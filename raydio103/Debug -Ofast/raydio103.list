
raydio103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005374  08005374  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005374  08005374  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005374  08005374  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800537c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a4  20000014  08005390  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019b8  08005390  000219b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2a0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000435c  00000000  00000000  0003b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0003f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e00  00000000  00000000  00040700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ada4  00000000  00000000  00042500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f08d  00000000  00000000  0005d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947bc  00000000  00000000  0007c331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00110aed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003558  00000000  00000000  00110bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001231a  00000000  00000000  00114108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080052ac 	.word	0x080052ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080052ac 	.word	0x080052ac

0800014c <arm_bitreversal_32>:
 800014c:	1c4b      	adds	r3, r1, #1
 800014e:	2b01      	cmp	r3, #1
 8000150:	bf98      	it	ls
 8000152:	4770      	bxls	lr
 8000154:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000158:	1c91      	adds	r1, r2, #2
 800015a:	089b      	lsrs	r3, r3, #2

0800015c <arm_bitreversal_32_0>:
 800015c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000160:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000164:	880a      	ldrh	r2, [r1, #0]
 8000166:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800016a:	4480      	add	r8, r0
 800016c:	4481      	add	r9, r0
 800016e:	4402      	add	r2, r0
 8000170:	4484      	add	ip, r0
 8000172:	f8d9 7000 	ldr.w	r7, [r9]
 8000176:	f8d8 6000 	ldr.w	r6, [r8]
 800017a:	6815      	ldr	r5, [r2, #0]
 800017c:	f8dc 4000 	ldr.w	r4, [ip]
 8000180:	f8c9 6000 	str.w	r6, [r9]
 8000184:	f8c8 7000 	str.w	r7, [r8]
 8000188:	f8cc 5000 	str.w	r5, [ip]
 800018c:	6014      	str	r4, [r2, #0]
 800018e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000192:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000196:	6855      	ldr	r5, [r2, #4]
 8000198:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800019c:	f8c9 6004 	str.w	r6, [r9, #4]
 80001a0:	f8c8 7004 	str.w	r7, [r8, #4]
 80001a4:	f8cc 5004 	str.w	r5, [ip, #4]
 80001a8:	6054      	str	r4, [r2, #4]
 80001aa:	3108      	adds	r1, #8
 80001ac:	3b01      	subs	r3, #1
 80001ae:	d1d5      	bne.n	800015c <arm_bitreversal_32_0>
 80001b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80001b4:	4770      	bx	lr

080001b6 <arm_bitreversal_16>:
 80001b6:	1c4b      	adds	r3, r1, #1
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	bf98      	it	ls
 80001bc:	4770      	bxls	lr
 80001be:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001c2:	1c91      	adds	r1, r2, #2
 80001c4:	089b      	lsrs	r3, r3, #2

080001c6 <arm_bitreversal_16_0>:
 80001c6:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ca:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001ce:	880a      	ldrh	r2, [r1, #0]
 80001d0:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001d4:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80001d8:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80001dc:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80001e0:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80001e4:	f8d9 7000 	ldr.w	r7, [r9]
 80001e8:	f8d8 6000 	ldr.w	r6, [r8]
 80001ec:	6815      	ldr	r5, [r2, #0]
 80001ee:	f8dc 4000 	ldr.w	r4, [ip]
 80001f2:	f8c9 6000 	str.w	r6, [r9]
 80001f6:	f8c8 7000 	str.w	r7, [r8]
 80001fa:	f8cc 5000 	str.w	r5, [ip]
 80001fe:	6014      	str	r4, [r2, #0]
 8000200:	3108      	adds	r1, #8
 8000202:	3b01      	subs	r3, #1
 8000204:	d1df      	bne.n	80001c6 <arm_bitreversal_16_0>
 8000206:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800020a:	4770      	bx	lr

0800020c <__aeabi_dmul>:
 800020c:	b570      	push	{r4, r5, r6, lr}
 800020e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000212:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000216:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800021a:	bf1d      	ittte	ne
 800021c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000220:	ea94 0f0c 	teqne	r4, ip
 8000224:	ea95 0f0c 	teqne	r5, ip
 8000228:	f000 f8de 	bleq	80003e8 <__aeabi_dmul+0x1dc>
 800022c:	442c      	add	r4, r5
 800022e:	ea81 0603 	eor.w	r6, r1, r3
 8000232:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000236:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800023a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023e:	bf18      	it	ne
 8000240:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800024c:	d038      	beq.n	80002c0 <__aeabi_dmul+0xb4>
 800024e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000252:	f04f 0500 	mov.w	r5, #0
 8000256:	fbe1 e502 	umlal	lr, r5, r1, r2
 800025a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000262:	f04f 0600 	mov.w	r6, #0
 8000266:	fbe1 5603 	umlal	r5, r6, r1, r3
 800026a:	f09c 0f00 	teq	ip, #0
 800026e:	bf18      	it	ne
 8000270:	f04e 0e01 	orrne.w	lr, lr, #1
 8000274:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000278:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800027c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000280:	d204      	bcs.n	800028c <__aeabi_dmul+0x80>
 8000282:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000286:	416d      	adcs	r5, r5
 8000288:	eb46 0606 	adc.w	r6, r6, r6
 800028c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000290:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000294:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000298:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800029c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a4:	bf88      	it	hi
 80002a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002aa:	d81e      	bhi.n	80002ea <__aeabi_dmul+0xde>
 80002ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c4:	ea46 0101 	orr.w	r1, r6, r1
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	ea81 0103 	eor.w	r1, r1, r3
 80002d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d4:	bfc2      	ittt	gt
 80002d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002de:	bd70      	popgt	{r4, r5, r6, pc}
 80002e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e4:	f04f 0e00 	mov.w	lr, #0
 80002e8:	3c01      	subs	r4, #1
 80002ea:	f300 80ab 	bgt.w	8000444 <__aeabi_dmul+0x238>
 80002ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002f2:	bfde      	ittt	le
 80002f4:	2000      	movle	r0, #0
 80002f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002fa:	bd70      	pople	{r4, r5, r6, pc}
 80002fc:	f1c4 0400 	rsb	r4, r4, #0
 8000300:	3c20      	subs	r4, #32
 8000302:	da35      	bge.n	8000370 <__aeabi_dmul+0x164>
 8000304:	340c      	adds	r4, #12
 8000306:	dc1b      	bgt.n	8000340 <__aeabi_dmul+0x134>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f305 	lsl.w	r3, r0, r5
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f205 	lsl.w	r2, r1, r5
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	fa21 f604 	lsr.w	r6, r1, r4
 8000330:	eb42 0106 	adc.w	r1, r2, r6
 8000334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000338:	bf08      	it	eq
 800033a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f1c4 040c 	rsb	r4, r4, #12
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f304 	lsl.w	r3, r0, r4
 800034c:	fa20 f005 	lsr.w	r0, r0, r5
 8000350:	fa01 f204 	lsl.w	r2, r1, r4
 8000354:	ea40 0002 	orr.w	r0, r0, r2
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f205 	lsl.w	r2, r0, r5
 8000378:	ea4e 0e02 	orr.w	lr, lr, r2
 800037c:	fa20 f304 	lsr.w	r3, r0, r4
 8000380:	fa01 f205 	lsl.w	r2, r1, r5
 8000384:	ea43 0302 	orr.w	r3, r3, r2
 8000388:	fa21 f004 	lsr.w	r0, r1, r4
 800038c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000390:	fa21 f204 	lsr.w	r2, r1, r4
 8000394:	ea20 0002 	bic.w	r0, r0, r2
 8000398:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800039c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a0:	bf08      	it	eq
 80003a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f094 0f00 	teq	r4, #0
 80003ac:	d10f      	bne.n	80003ce <__aeabi_dmul+0x1c2>
 80003ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003b2:	0040      	lsls	r0, r0, #1
 80003b4:	eb41 0101 	adc.w	r1, r1, r1
 80003b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3c01      	subeq	r4, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1a6>
 80003c2:	ea41 0106 	orr.w	r1, r1, r6
 80003c6:	f095 0f00 	teq	r5, #0
 80003ca:	bf18      	it	ne
 80003cc:	4770      	bxne	lr
 80003ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003d2:	0052      	lsls	r2, r2, #1
 80003d4:	eb43 0303 	adc.w	r3, r3, r3
 80003d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003dc:	bf08      	it	eq
 80003de:	3d01      	subeq	r5, #1
 80003e0:	d0f7      	beq.n	80003d2 <__aeabi_dmul+0x1c6>
 80003e2:	ea43 0306 	orr.w	r3, r3, r6
 80003e6:	4770      	bx	lr
 80003e8:	ea94 0f0c 	teq	r4, ip
 80003ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f0:	bf18      	it	ne
 80003f2:	ea95 0f0c 	teqne	r5, ip
 80003f6:	d00c      	beq.n	8000412 <__aeabi_dmul+0x206>
 80003f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fc:	bf18      	it	ne
 80003fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000402:	d1d1      	bne.n	80003a8 <__aeabi_dmul+0x19c>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000416:	bf06      	itte	eq
 8000418:	4610      	moveq	r0, r2
 800041a:	4619      	moveq	r1, r3
 800041c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000420:	d019      	beq.n	8000456 <__aeabi_dmul+0x24a>
 8000422:	ea94 0f0c 	teq	r4, ip
 8000426:	d102      	bne.n	800042e <__aeabi_dmul+0x222>
 8000428:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800042c:	d113      	bne.n	8000456 <__aeabi_dmul+0x24a>
 800042e:	ea95 0f0c 	teq	r5, ip
 8000432:	d105      	bne.n	8000440 <__aeabi_dmul+0x234>
 8000434:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000438:	bf1c      	itt	ne
 800043a:	4610      	movne	r0, r2
 800043c:	4619      	movne	r1, r3
 800043e:	d10a      	bne.n	8000456 <__aeabi_dmul+0x24a>
 8000440:	ea81 0103 	eor.w	r1, r1, r3
 8000444:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000448:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800045a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045e:	bd70      	pop	{r4, r5, r6, pc}

08000460 <__aeabi_drsub>:
 8000460:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e002      	b.n	800046c <__adddf3>
 8000466:	bf00      	nop

08000468 <__aeabi_dsub>:
 8000468:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800046c <__adddf3>:
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000472:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	bf1f      	itttt	ne
 8000482:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000486:	ea55 0c02 	orrsne.w	ip, r5, r2
 800048a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000492:	f000 80e2 	beq.w	800065a <__adddf3+0x1ee>
 8000496:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800049a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049e:	bfb8      	it	lt
 80004a0:	426d      	neglt	r5, r5
 80004a2:	dd0c      	ble.n	80004be <__adddf3+0x52>
 80004a4:	442c      	add	r4, r5
 80004a6:	ea80 0202 	eor.w	r2, r0, r2
 80004aa:	ea81 0303 	eor.w	r3, r1, r3
 80004ae:	ea82 0000 	eor.w	r0, r2, r0
 80004b2:	ea83 0101 	eor.w	r1, r3, r1
 80004b6:	ea80 0202 	eor.w	r2, r0, r2
 80004ba:	ea81 0303 	eor.w	r3, r1, r3
 80004be:	2d36      	cmp	r5, #54	; 0x36
 80004c0:	bf88      	it	hi
 80004c2:	bd30      	pophi	{r4, r5, pc}
 80004c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d4:	d002      	beq.n	80004dc <__adddf3+0x70>
 80004d6:	4240      	negs	r0, r0
 80004d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e8:	d002      	beq.n	80004f0 <__adddf3+0x84>
 80004ea:	4252      	negs	r2, r2
 80004ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f0:	ea94 0f05 	teq	r4, r5
 80004f4:	f000 80a7 	beq.w	8000646 <__adddf3+0x1da>
 80004f8:	f1a4 0401 	sub.w	r4, r4, #1
 80004fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000500:	db0d      	blt.n	800051e <__adddf3+0xb2>
 8000502:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000506:	fa22 f205 	lsr.w	r2, r2, r5
 800050a:	1880      	adds	r0, r0, r2
 800050c:	f141 0100 	adc.w	r1, r1, #0
 8000510:	fa03 f20e 	lsl.w	r2, r3, lr
 8000514:	1880      	adds	r0, r0, r2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	4159      	adcs	r1, r3
 800051c:	e00e      	b.n	800053c <__adddf3+0xd0>
 800051e:	f1a5 0520 	sub.w	r5, r5, #32
 8000522:	f10e 0e20 	add.w	lr, lr, #32
 8000526:	2a01      	cmp	r2, #1
 8000528:	fa03 fc0e 	lsl.w	ip, r3, lr
 800052c:	bf28      	it	cs
 800052e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	18c0      	adds	r0, r0, r3
 8000538:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	d507      	bpl.n	8000552 <__adddf3+0xe6>
 8000542:	f04f 0e00 	mov.w	lr, #0
 8000546:	f1dc 0c00 	rsbs	ip, ip, #0
 800054a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000552:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000556:	d31b      	bcc.n	8000590 <__adddf3+0x124>
 8000558:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800055c:	d30c      	bcc.n	8000578 <__adddf3+0x10c>
 800055e:	0849      	lsrs	r1, r1, #1
 8000560:	ea5f 0030 	movs.w	r0, r0, rrx
 8000564:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000568:	f104 0401 	add.w	r4, r4, #1
 800056c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000570:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000574:	f080 809a 	bcs.w	80006ac <__adddf3+0x240>
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	ea41 0105 	orr.w	r1, r1, r5
 800058e:	bd30      	pop	{r4, r5, pc}
 8000590:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000594:	4140      	adcs	r0, r0
 8000596:	eb41 0101 	adc.w	r1, r1, r1
 800059a:	3c01      	subs	r4, #1
 800059c:	bf28      	it	cs
 800059e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005a2:	d2e9      	bcs.n	8000578 <__adddf3+0x10c>
 80005a4:	f091 0f00 	teq	r1, #0
 80005a8:	bf04      	itt	eq
 80005aa:	4601      	moveq	r1, r0
 80005ac:	2000      	moveq	r0, #0
 80005ae:	fab1 f381 	clz	r3, r1
 80005b2:	bf08      	it	eq
 80005b4:	3320      	addeq	r3, #32
 80005b6:	f1a3 030b 	sub.w	r3, r3, #11
 80005ba:	f1b3 0220 	subs.w	r2, r3, #32
 80005be:	da0c      	bge.n	80005da <__adddf3+0x16e>
 80005c0:	320c      	adds	r2, #12
 80005c2:	dd08      	ble.n	80005d6 <__adddf3+0x16a>
 80005c4:	f102 0c14 	add.w	ip, r2, #20
 80005c8:	f1c2 020c 	rsb	r2, r2, #12
 80005cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d0:	fa21 f102 	lsr.w	r1, r1, r2
 80005d4:	e00c      	b.n	80005f0 <__adddf3+0x184>
 80005d6:	f102 0214 	add.w	r2, r2, #20
 80005da:	bfd8      	it	le
 80005dc:	f1c2 0c20 	rsble	ip, r2, #32
 80005e0:	fa01 f102 	lsl.w	r1, r1, r2
 80005e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e8:	bfdc      	itt	le
 80005ea:	ea41 010c 	orrle.w	r1, r1, ip
 80005ee:	4090      	lslle	r0, r2
 80005f0:	1ae4      	subs	r4, r4, r3
 80005f2:	bfa2      	ittt	ge
 80005f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f8:	4329      	orrge	r1, r5
 80005fa:	bd30      	popge	{r4, r5, pc}
 80005fc:	ea6f 0404 	mvn.w	r4, r4
 8000600:	3c1f      	subs	r4, #31
 8000602:	da1c      	bge.n	800063e <__adddf3+0x1d2>
 8000604:	340c      	adds	r4, #12
 8000606:	dc0e      	bgt.n	8000626 <__adddf3+0x1ba>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0220 	rsb	r2, r4, #32
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f302 	lsl.w	r3, r1, r2
 8000618:	ea40 0003 	orr.w	r0, r0, r3
 800061c:	fa21 f304 	lsr.w	r3, r1, r4
 8000620:	ea45 0103 	orr.w	r1, r5, r3
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f1c4 040c 	rsb	r4, r4, #12
 800062a:	f1c4 0220 	rsb	r2, r4, #32
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	fa01 f304 	lsl.w	r3, r1, r4
 8000636:	ea40 0003 	orr.w	r0, r0, r3
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	fa21 f004 	lsr.w	r0, r1, r4
 8000642:	4629      	mov	r1, r5
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	f094 0f00 	teq	r4, #0
 800064a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064e:	bf06      	itte	eq
 8000650:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000654:	3401      	addeq	r4, #1
 8000656:	3d01      	subne	r5, #1
 8000658:	e74e      	b.n	80004f8 <__adddf3+0x8c>
 800065a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065e:	bf18      	it	ne
 8000660:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000664:	d029      	beq.n	80006ba <__adddf3+0x24e>
 8000666:	ea94 0f05 	teq	r4, r5
 800066a:	bf08      	it	eq
 800066c:	ea90 0f02 	teqeq	r0, r2
 8000670:	d005      	beq.n	800067e <__adddf3+0x212>
 8000672:	ea54 0c00 	orrs.w	ip, r4, r0
 8000676:	bf04      	itt	eq
 8000678:	4619      	moveq	r1, r3
 800067a:	4610      	moveq	r0, r2
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea91 0f03 	teq	r1, r3
 8000682:	bf1e      	ittt	ne
 8000684:	2100      	movne	r1, #0
 8000686:	2000      	movne	r0, #0
 8000688:	bd30      	popne	{r4, r5, pc}
 800068a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068e:	d105      	bne.n	800069c <__adddf3+0x230>
 8000690:	0040      	lsls	r0, r0, #1
 8000692:	4149      	adcs	r1, r1
 8000694:	bf28      	it	cs
 8000696:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd30      	pop	{r4, r5, pc}
 800069c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006a0:	bf3c      	itt	cc
 80006a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a6:	bd30      	popcc	{r4, r5, pc}
 80006a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b4:	f04f 0000 	mov.w	r0, #0
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006be:	bf1a      	itte	ne
 80006c0:	4619      	movne	r1, r3
 80006c2:	4610      	movne	r0, r2
 80006c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c8:	bf1c      	itt	ne
 80006ca:	460b      	movne	r3, r1
 80006cc:	4602      	movne	r2, r0
 80006ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006d2:	bf06      	itte	eq
 80006d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d8:	ea91 0f03 	teqeq	r1, r3
 80006dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	bf00      	nop

080006e4 <__aeabi_ui2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f8:	f04f 0500 	mov.w	r5, #0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e750      	b.n	80005a4 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_i2d>:
 8000704:	f090 0f00 	teq	r0, #0
 8000708:	bf04      	itt	eq
 800070a:	2100      	moveq	r1, #0
 800070c:	4770      	bxeq	lr
 800070e:	b530      	push	{r4, r5, lr}
 8000710:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000714:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000718:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800071c:	bf48      	it	mi
 800071e:	4240      	negmi	r0, r0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e73e      	b.n	80005a4 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_f2d>:
 8000728:	0042      	lsls	r2, r0, #1
 800072a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000732:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000736:	bf1f      	itttt	ne
 8000738:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800073c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000740:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000744:	4770      	bxne	lr
 8000746:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800074a:	bf08      	it	eq
 800074c:	4770      	bxeq	lr
 800074e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000752:	bf04      	itt	eq
 8000754:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000758:	4770      	bxeq	lr
 800075a:	b530      	push	{r4, r5, lr}
 800075c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	e71c      	b.n	80005a4 <__adddf3+0x138>
 800076a:	bf00      	nop

0800076c <__aeabi_ul2d>:
 800076c:	ea50 0201 	orrs.w	r2, r0, r1
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	f04f 0500 	mov.w	r5, #0
 800077a:	e00a      	b.n	8000792 <__aeabi_l2d+0x16>

0800077c <__aeabi_l2d>:
 800077c:	ea50 0201 	orrs.w	r2, r0, r1
 8000780:	bf08      	it	eq
 8000782:	4770      	bxeq	lr
 8000784:	b530      	push	{r4, r5, lr}
 8000786:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800078a:	d502      	bpl.n	8000792 <__aeabi_l2d+0x16>
 800078c:	4240      	negs	r0, r0
 800078e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000792:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000796:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079e:	f43f aed8 	beq.w	8000552 <__adddf3+0xe6>
 80007a2:	f04f 0203 	mov.w	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b2:	bf18      	it	ne
 80007b4:	3203      	addne	r2, #3
 80007b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ba:	f1c2 0320 	rsb	r3, r2, #32
 80007be:	fa00 fc03 	lsl.w	ip, r0, r3
 80007c2:	fa20 f002 	lsr.w	r0, r0, r2
 80007c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ca:	ea40 000e 	orr.w	r0, r0, lr
 80007ce:	fa21 f102 	lsr.w	r1, r1, r2
 80007d2:	4414      	add	r4, r2
 80007d4:	e6bd      	b.n	8000552 <__adddf3+0xe6>
 80007d6:	bf00      	nop

080007d8 <__aeabi_d2f>:
 80007d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007e0:	bf24      	itt	cs
 80007e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ea:	d90d      	bls.n	8000808 <__aeabi_d2f+0x30>
 80007ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000800:	bf08      	it	eq
 8000802:	f020 0001 	biceq.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800080c:	d121      	bne.n	8000852 <__aeabi_d2f+0x7a>
 800080e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000812:	bfbc      	itt	lt
 8000814:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000818:	4770      	bxlt	lr
 800081a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000822:	f1c2 0218 	rsb	r2, r2, #24
 8000826:	f1c2 0c20 	rsb	ip, r2, #32
 800082a:	fa10 f30c 	lsls.w	r3, r0, ip
 800082e:	fa20 f002 	lsr.w	r0, r0, r2
 8000832:	bf18      	it	ne
 8000834:	f040 0001 	orrne.w	r0, r0, #1
 8000838:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800083c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000840:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000844:	ea40 000c 	orr.w	r0, r0, ip
 8000848:	fa23 f302 	lsr.w	r3, r3, r2
 800084c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000850:	e7cc      	b.n	80007ec <__aeabi_d2f+0x14>
 8000852:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000856:	d107      	bne.n	8000868 <__aeabi_d2f+0x90>
 8000858:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800085c:	bf1e      	ittt	ne
 800085e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000862:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000866:	4770      	bxne	lr
 8000868:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800086c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000870:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <__aeabi_frsub>:
 8000878:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800087c:	e002      	b.n	8000884 <__addsf3>
 800087e:	bf00      	nop

08000880 <__aeabi_fsub>:
 8000880:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000884 <__addsf3>:
 8000884:	0042      	lsls	r2, r0, #1
 8000886:	bf1f      	itttt	ne
 8000888:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800088c:	ea92 0f03 	teqne	r2, r3
 8000890:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000894:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000898:	d06a      	beq.n	8000970 <__addsf3+0xec>
 800089a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800089e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008a2:	bfc1      	itttt	gt
 80008a4:	18d2      	addgt	r2, r2, r3
 80008a6:	4041      	eorgt	r1, r0
 80008a8:	4048      	eorgt	r0, r1
 80008aa:	4041      	eorgt	r1, r0
 80008ac:	bfb8      	it	lt
 80008ae:	425b      	neglt	r3, r3
 80008b0:	2b19      	cmp	r3, #25
 80008b2:	bf88      	it	hi
 80008b4:	4770      	bxhi	lr
 80008b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80008ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80008c2:	bf18      	it	ne
 80008c4:	4240      	negne	r0, r0
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80008ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80008d2:	bf18      	it	ne
 80008d4:	4249      	negne	r1, r1
 80008d6:	ea92 0f03 	teq	r2, r3
 80008da:	d03f      	beq.n	800095c <__addsf3+0xd8>
 80008dc:	f1a2 0201 	sub.w	r2, r2, #1
 80008e0:	fa41 fc03 	asr.w	ip, r1, r3
 80008e4:	eb10 000c 	adds.w	r0, r0, ip
 80008e8:	f1c3 0320 	rsb	r3, r3, #32
 80008ec:	fa01 f103 	lsl.w	r1, r1, r3
 80008f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008f4:	d502      	bpl.n	80008fc <__addsf3+0x78>
 80008f6:	4249      	negs	r1, r1
 80008f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000900:	d313      	bcc.n	800092a <__addsf3+0xa6>
 8000902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000906:	d306      	bcc.n	8000916 <__addsf3+0x92>
 8000908:	0840      	lsrs	r0, r0, #1
 800090a:	ea4f 0131 	mov.w	r1, r1, rrx
 800090e:	f102 0201 	add.w	r2, r2, #1
 8000912:	2afe      	cmp	r2, #254	; 0xfe
 8000914:	d251      	bcs.n	80009ba <__addsf3+0x136>
 8000916:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800091a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800091e:	bf08      	it	eq
 8000920:	f020 0001 	biceq.w	r0, r0, #1
 8000924:	ea40 0003 	orr.w	r0, r0, r3
 8000928:	4770      	bx	lr
 800092a:	0049      	lsls	r1, r1, #1
 800092c:	eb40 0000 	adc.w	r0, r0, r0
 8000930:	3a01      	subs	r2, #1
 8000932:	bf28      	it	cs
 8000934:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000938:	d2ed      	bcs.n	8000916 <__addsf3+0x92>
 800093a:	fab0 fc80 	clz	ip, r0
 800093e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000942:	ebb2 020c 	subs.w	r2, r2, ip
 8000946:	fa00 f00c 	lsl.w	r0, r0, ip
 800094a:	bfaa      	itet	ge
 800094c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000950:	4252      	neglt	r2, r2
 8000952:	4318      	orrge	r0, r3
 8000954:	bfbc      	itt	lt
 8000956:	40d0      	lsrlt	r0, r2
 8000958:	4318      	orrlt	r0, r3
 800095a:	4770      	bx	lr
 800095c:	f092 0f00 	teq	r2, #0
 8000960:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000964:	bf06      	itte	eq
 8000966:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800096a:	3201      	addeq	r2, #1
 800096c:	3b01      	subne	r3, #1
 800096e:	e7b5      	b.n	80008dc <__addsf3+0x58>
 8000970:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000974:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000978:	bf18      	it	ne
 800097a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800097e:	d021      	beq.n	80009c4 <__addsf3+0x140>
 8000980:	ea92 0f03 	teq	r2, r3
 8000984:	d004      	beq.n	8000990 <__addsf3+0x10c>
 8000986:	f092 0f00 	teq	r2, #0
 800098a:	bf08      	it	eq
 800098c:	4608      	moveq	r0, r1
 800098e:	4770      	bx	lr
 8000990:	ea90 0f01 	teq	r0, r1
 8000994:	bf1c      	itt	ne
 8000996:	2000      	movne	r0, #0
 8000998:	4770      	bxne	lr
 800099a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800099e:	d104      	bne.n	80009aa <__addsf3+0x126>
 80009a0:	0040      	lsls	r0, r0, #1
 80009a2:	bf28      	it	cs
 80009a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80009a8:	4770      	bx	lr
 80009aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80009ae:	bf3c      	itt	cc
 80009b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80009b4:	4770      	bxcc	lr
 80009b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80009be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c2:	4770      	bx	lr
 80009c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009c8:	bf16      	itet	ne
 80009ca:	4608      	movne	r0, r1
 80009cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009d0:	4601      	movne	r1, r0
 80009d2:	0242      	lsls	r2, r0, #9
 80009d4:	bf06      	itte	eq
 80009d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009da:	ea90 0f01 	teqeq	r0, r1
 80009de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_ui2f>:
 80009e4:	f04f 0300 	mov.w	r3, #0
 80009e8:	e004      	b.n	80009f4 <__aeabi_i2f+0x8>
 80009ea:	bf00      	nop

080009ec <__aeabi_i2f>:
 80009ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009f0:	bf48      	it	mi
 80009f2:	4240      	negmi	r0, r0
 80009f4:	ea5f 0c00 	movs.w	ip, r0
 80009f8:	bf08      	it	eq
 80009fa:	4770      	bxeq	lr
 80009fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a00:	4601      	mov	r1, r0
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	e01c      	b.n	8000a42 <__aeabi_l2f+0x2a>

08000a08 <__aeabi_ul2f>:
 8000a08:	ea50 0201 	orrs.w	r2, r0, r1
 8000a0c:	bf08      	it	eq
 8000a0e:	4770      	bxeq	lr
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	e00a      	b.n	8000a2c <__aeabi_l2f+0x14>
 8000a16:	bf00      	nop

08000a18 <__aeabi_l2f>:
 8000a18:	ea50 0201 	orrs.w	r2, r0, r1
 8000a1c:	bf08      	it	eq
 8000a1e:	4770      	bxeq	lr
 8000a20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a24:	d502      	bpl.n	8000a2c <__aeabi_l2f+0x14>
 8000a26:	4240      	negs	r0, r0
 8000a28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a2c:	ea5f 0c01 	movs.w	ip, r1
 8000a30:	bf02      	ittt	eq
 8000a32:	4684      	moveq	ip, r0
 8000a34:	4601      	moveq	r1, r0
 8000a36:	2000      	moveq	r0, #0
 8000a38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a46:	fabc f28c 	clz	r2, ip
 8000a4a:	3a08      	subs	r2, #8
 8000a4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a50:	db10      	blt.n	8000a74 <__aeabi_l2f+0x5c>
 8000a52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a56:	4463      	add	r3, ip
 8000a58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a5c:	f1c2 0220 	rsb	r2, r2, #32
 8000a60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a64:	fa20 f202 	lsr.w	r2, r0, r2
 8000a68:	eb43 0002 	adc.w	r0, r3, r2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f102 0220 	add.w	r2, r2, #32
 8000a78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a7c:	f1c2 0220 	rsb	r2, r2, #32
 8000a80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a84:	fa21 f202 	lsr.w	r2, r1, r2
 8000a88:	eb43 0002 	adc.w	r0, r3, r2
 8000a8c:	bf08      	it	eq
 8000a8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_fmul>:
 8000a94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a9c:	bf1e      	ittt	ne
 8000a9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aa2:	ea92 0f0c 	teqne	r2, ip
 8000aa6:	ea93 0f0c 	teqne	r3, ip
 8000aaa:	d06f      	beq.n	8000b8c <__aeabi_fmul+0xf8>
 8000aac:	441a      	add	r2, r3
 8000aae:	ea80 0c01 	eor.w	ip, r0, r1
 8000ab2:	0240      	lsls	r0, r0, #9
 8000ab4:	bf18      	it	ne
 8000ab6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000aba:	d01e      	beq.n	8000afa <__aeabi_fmul+0x66>
 8000abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ac0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ac4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ac8:	fba0 3101 	umull	r3, r1, r0, r1
 8000acc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ad0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ad4:	bf3e      	ittt	cc
 8000ad6:	0049      	lslcc	r1, r1, #1
 8000ad8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000adc:	005b      	lslcc	r3, r3, #1
 8000ade:	ea40 0001 	orr.w	r0, r0, r1
 8000ae2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ae6:	2afd      	cmp	r2, #253	; 0xfd
 8000ae8:	d81d      	bhi.n	8000b26 <__aeabi_fmul+0x92>
 8000aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	4770      	bx	lr
 8000afa:	f090 0f00 	teq	r0, #0
 8000afe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b02:	bf08      	it	eq
 8000b04:	0249      	lsleq	r1, r1, #9
 8000b06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b0e:	3a7f      	subs	r2, #127	; 0x7f
 8000b10:	bfc2      	ittt	gt
 8000b12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b1a:	4770      	bxgt	lr
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	dc5d      	bgt.n	8000be4 <__aeabi_fmul+0x150>
 8000b28:	f112 0f19 	cmn.w	r2, #25
 8000b2c:	bfdc      	itt	le
 8000b2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b32:	4770      	bxle	lr
 8000b34:	f1c2 0200 	rsb	r2, r2, #0
 8000b38:	0041      	lsls	r1, r0, #1
 8000b3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000b3e:	f1c2 0220 	rsb	r2, r2, #32
 8000b42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b4a:	f140 0000 	adc.w	r0, r0, #0
 8000b4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b52:	bf08      	it	eq
 8000b54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b58:	4770      	bx	lr
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b62:	bf02      	ittt	eq
 8000b64:	0040      	lsleq	r0, r0, #1
 8000b66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b6a:	3a01      	subeq	r2, #1
 8000b6c:	d0f9      	beq.n	8000b62 <__aeabi_fmul+0xce>
 8000b6e:	ea40 000c 	orr.w	r0, r0, ip
 8000b72:	f093 0f00 	teq	r3, #0
 8000b76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b7a:	bf02      	ittt	eq
 8000b7c:	0049      	lsleq	r1, r1, #1
 8000b7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b82:	3b01      	subeq	r3, #1
 8000b84:	d0f9      	beq.n	8000b7a <__aeabi_fmul+0xe6>
 8000b86:	ea41 010c 	orr.w	r1, r1, ip
 8000b8a:	e78f      	b.n	8000aac <__aeabi_fmul+0x18>
 8000b8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b90:	ea92 0f0c 	teq	r2, ip
 8000b94:	bf18      	it	ne
 8000b96:	ea93 0f0c 	teqne	r3, ip
 8000b9a:	d00a      	beq.n	8000bb2 <__aeabi_fmul+0x11e>
 8000b9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba0:	bf18      	it	ne
 8000ba2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ba6:	d1d8      	bne.n	8000b5a <__aeabi_fmul+0xc6>
 8000ba8:	ea80 0001 	eor.w	r0, r0, r1
 8000bac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	4770      	bx	lr
 8000bb2:	f090 0f00 	teq	r0, #0
 8000bb6:	bf17      	itett	ne
 8000bb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	f091 0f00 	teqne	r1, #0
 8000bc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000bc6:	d014      	beq.n	8000bf2 <__aeabi_fmul+0x15e>
 8000bc8:	ea92 0f0c 	teq	r2, ip
 8000bcc:	d101      	bne.n	8000bd2 <__aeabi_fmul+0x13e>
 8000bce:	0242      	lsls	r2, r0, #9
 8000bd0:	d10f      	bne.n	8000bf2 <__aeabi_fmul+0x15e>
 8000bd2:	ea93 0f0c 	teq	r3, ip
 8000bd6:	d103      	bne.n	8000be0 <__aeabi_fmul+0x14c>
 8000bd8:	024b      	lsls	r3, r1, #9
 8000bda:	bf18      	it	ne
 8000bdc:	4608      	movne	r0, r1
 8000bde:	d108      	bne.n	8000bf2 <__aeabi_fmul+0x15e>
 8000be0:	ea80 0001 	eor.w	r0, r0, r1
 8000be4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_fdiv>:
 8000bfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c04:	bf1e      	ittt	ne
 8000c06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c0a:	ea92 0f0c 	teqne	r2, ip
 8000c0e:	ea93 0f0c 	teqne	r3, ip
 8000c12:	d069      	beq.n	8000ce8 <__aeabi_fdiv+0xec>
 8000c14:	eba2 0203 	sub.w	r2, r2, r3
 8000c18:	ea80 0c01 	eor.w	ip, r0, r1
 8000c1c:	0249      	lsls	r1, r1, #9
 8000c1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c22:	d037      	beq.n	8000c94 <__aeabi_fdiv+0x98>
 8000c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	428b      	cmp	r3, r1
 8000c36:	bf38      	it	cc
 8000c38:	005b      	lslcc	r3, r3, #1
 8000c3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c42:	428b      	cmp	r3, r1
 8000c44:	bf24      	itt	cs
 8000c46:	1a5b      	subcs	r3, r3, r1
 8000c48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c50:	bf24      	itt	cs
 8000c52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c5e:	bf24      	itt	cs
 8000c60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c6c:	bf24      	itt	cs
 8000c6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	bf18      	it	ne
 8000c7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c7e:	d1e0      	bne.n	8000c42 <__aeabi_fdiv+0x46>
 8000c80:	2afd      	cmp	r2, #253	; 0xfd
 8000c82:	f63f af50 	bhi.w	8000b26 <__aeabi_fmul+0x92>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8c:	bf08      	it	eq
 8000c8e:	f020 0001 	biceq.w	r0, r0, #1
 8000c92:	4770      	bx	lr
 8000c94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c9c:	327f      	adds	r2, #127	; 0x7f
 8000c9e:	bfc2      	ittt	gt
 8000ca0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ca4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ca8:	4770      	bxgt	lr
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	3a01      	subs	r2, #1
 8000cb4:	e737      	b.n	8000b26 <__aeabi_fmul+0x92>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cbe:	bf02      	ittt	eq
 8000cc0:	0040      	lsleq	r0, r0, #1
 8000cc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cc6:	3a01      	subeq	r2, #1
 8000cc8:	d0f9      	beq.n	8000cbe <__aeabi_fdiv+0xc2>
 8000cca:	ea40 000c 	orr.w	r0, r0, ip
 8000cce:	f093 0f00 	teq	r3, #0
 8000cd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0049      	lsleq	r1, r1, #1
 8000cda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cde:	3b01      	subeq	r3, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fdiv+0xda>
 8000ce2:	ea41 010c 	orr.w	r1, r1, ip
 8000ce6:	e795      	b.n	8000c14 <__aeabi_fdiv+0x18>
 8000ce8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d108      	bne.n	8000d04 <__aeabi_fdiv+0x108>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	f47f af7d 	bne.w	8000bf2 <__aeabi_fmul+0x15e>
 8000cf8:	ea93 0f0c 	teq	r3, ip
 8000cfc:	f47f af70 	bne.w	8000be0 <__aeabi_fmul+0x14c>
 8000d00:	4608      	mov	r0, r1
 8000d02:	e776      	b.n	8000bf2 <__aeabi_fmul+0x15e>
 8000d04:	ea93 0f0c 	teq	r3, ip
 8000d08:	d104      	bne.n	8000d14 <__aeabi_fdiv+0x118>
 8000d0a:	024b      	lsls	r3, r1, #9
 8000d0c:	f43f af4c 	beq.w	8000ba8 <__aeabi_fmul+0x114>
 8000d10:	4608      	mov	r0, r1
 8000d12:	e76e      	b.n	8000bf2 <__aeabi_fmul+0x15e>
 8000d14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d18:	bf18      	it	ne
 8000d1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	d1ca      	bne.n	8000cb6 <__aeabi_fdiv+0xba>
 8000d20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d24:	f47f af5c 	bne.w	8000be0 <__aeabi_fmul+0x14c>
 8000d28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d2c:	f47f af3c 	bne.w	8000ba8 <__aeabi_fmul+0x114>
 8000d30:	e75f      	b.n	8000bf2 <__aeabi_fmul+0x15e>
 8000d32:	bf00      	nop

08000d34 <__aeabi_f2iz>:
 8000d34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d3c:	d30f      	bcc.n	8000d5e <__aeabi_f2iz+0x2a>
 8000d3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d46:	d90d      	bls.n	8000d64 <__aeabi_f2iz+0x30>
 8000d48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d54:	fa23 f002 	lsr.w	r0, r3, r2
 8000d58:	bf18      	it	ne
 8000d5a:	4240      	negne	r0, r0
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr
 8000d64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d68:	d101      	bne.n	8000d6e <__aeabi_f2iz+0x3a>
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	d105      	bne.n	8000d7a <__aeabi_f2iz+0x46>
 8000d6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	bf08      	it	eq
 8000d74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	4770      	bx	lr

08000d80 <everythingElse>:
#include "si5351.h"

#include "fft.h"
bool elseDone = 0;
void everythingElse(void){
	if (!elseDone){
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <everythingElse+0xc>)
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	b90a      	cbnz	r2, 8000d8a <everythingElse+0xa>
		//sprintf(txt,"%.3f", gaine);
		//GLCD_Font_Print(1, 1, txt);
		// ST7920_Update();
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	 //ST7920_Update();
	elseDone = 1;
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
	}

}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000030 	.word	0x20000030

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b510      	push	{r4, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d94:	2214      	movs	r2, #20
 8000d96:	2100      	movs	r1, #0
 8000d98:	a80c      	add	r0, sp, #48	; 0x30
 8000d9a:	f004 fa7f 	bl	800529c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9e:	2214      	movs	r2, #20
 8000da0:	2100      	movs	r1, #0
 8000da2:	eb0d 0002 	add.w	r0, sp, r2
 8000da6:	f004 fa79 	bl	800529c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000daa:	2210      	movs	r2, #16
 8000dac:	2100      	movs	r1, #0
 8000dae:	a801      	add	r0, sp, #4
 8000db0:	f004 fa74 	bl	800529c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dba:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbc:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dc4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dca:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dcc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f001 fa7d 	bl	80022cc <HAL_RCC_OscConfig>
 8000dd2:	b108      	cbz	r0, 8000dd8 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	e9cd 0007 	strd	r0, r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	4621      	mov	r1, r4
 8000de2:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de8:	f001 fc46 	bl	8002678 <HAL_RCC_ClockConfig>
 8000dec:	b108      	cbz	r0, 8000df2 <SystemClock_Config+0x62>
 8000dee:	b672      	cpsid	i
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df8:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000dfa:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f001 fcf8 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	b108      	cbz	r0, 8000e06 <SystemClock_Config+0x76>
 8000e02:	b672      	cpsid	i
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <SystemClock_Config+0x74>
}
 8000e06:	b014      	add	sp, #80	; 0x50
 8000e08:	bd10      	pop	{r4, pc}
	...

08000e0c <main>:
{
 8000e0c:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	2710      	movs	r7, #16
{
 8000e10:	b09a      	sub	sp, #104	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4db1      	ldr	r5, [pc, #708]	; (80010d8 <main+0x2cc>)
  HAL_Init();
 8000e14:	f000 fcb0 	bl	8001778 <HAL_Init>
  SystemClock_Config();
 8000e18:	f7ff ffba 	bl	8000d90 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	463a      	mov	r2, r7
 8000e1e:	2100      	movs	r1, #0
 8000e20:	a812      	add	r0, sp, #72	; 0x48
 8000e22:	f004 fa3b 	bl	800529c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	433b      	orrs	r3, r7
 8000e2c:	61ab      	str	r3, [r5, #24]
 8000e2e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e34:	403b      	ands	r3, r7
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000e3c:	48a7      	ldr	r0, [pc, #668]	; (80010dc <main+0x2d0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	61ab      	str	r3, [r5, #24]
 8000e44:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	61ab      	str	r3, [r5, #24]
 8000e5a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	9303      	str	r3, [sp, #12]
 8000e66:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	69ab      	ldr	r3, [r5, #24]
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	61ab      	str	r3, [r5, #24]
 8000e70:	69ab      	ldr	r3, [r5, #24]
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000e7a:	f001 f979 	bl	8002170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PIN_LCD_CS_Pin|PIN_LCD_DC_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f240 3103 	movw	r1, #771	; 0x303
 8000e84:	4896      	ldr	r0, [pc, #600]	; (80010e0 <main+0x2d4>)
 8000e86:	f001 f973 	bl	8002170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PIN_CS_EXT_GPIO_Port, PIN_CS_EXT_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	4894      	ldr	r0, [pc, #592]	; (80010e4 <main+0x2d8>)
 8000e92:	f001 f96d 	bl	8002170 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	4890      	ldr	r0, [pc, #576]	; (80010dc <main+0x2d0>)
 8000e9c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	e9cd 4814 	strd	r4, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f001 f889 	bl	8001fbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PIN_LCD_CS_Pin|PIN_LCD_DC_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000eaa:	f240 3303 	movw	r3, #771	; 0x303
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	488c      	ldr	r0, [pc, #560]	; (80010e0 <main+0x2d4>)
 8000eb0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	e9cd 4814 	strd	r4, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f001 f87f 	bl	8001fbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PIN_CS_EXT_Pin;
 8000ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(PIN_CS_EXT_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	4888      	ldr	r0, [pc, #544]	; (80010e4 <main+0x2d8>)
 8000ec4:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	e9cd 4814 	strd	r4, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(PIN_CS_EXT_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f001 f875 	bl	8001fbc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed2:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed4:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	4333      	orrs	r3, r6
 8000ed8:	616b      	str	r3, [r5, #20]
 8000eda:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000edc:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ede:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ee0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ee6:	f000 feb5 	bl	8001c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eea:	200b      	movs	r0, #11
 8000eec:	f000 fee4 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ef0:	4622      	mov	r2, r4
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	200c      	movs	r0, #12
 8000ef6:	f000 fead 	bl	8001c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000efa:	200c      	movs	r0, #12
 8000efc:	f000 fedc 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f00:	4622      	mov	r2, r4
 8000f02:	4621      	mov	r1, r4
 8000f04:	200d      	movs	r0, #13
 8000f06:	f000 fea5 	bl	8001c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f0a:	200d      	movs	r0, #13
 8000f0c:	f000 fed4 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f10:	4622      	mov	r2, r4
 8000f12:	4621      	mov	r1, r4
 8000f14:	200e      	movs	r0, #14
 8000f16:	f000 fe9d 	bl	8001c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f1a:	200e      	movs	r0, #14
 8000f1c:	f000 fecc 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f20:	4622      	mov	r2, r4
 8000f22:	4621      	mov	r1, r4
 8000f24:	4638      	mov	r0, r7
 8000f26:	f000 fe95 	bl	8001c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f2a:	4638      	mov	r0, r7
 8000f2c:	f000 fec4 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000f30:	4d6d      	ldr	r5, [pc, #436]	; (80010e8 <main+0x2dc>)
 8000f32:	4b6e      	ldr	r3, [pc, #440]	; (80010ec <main+0x2e0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f34:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8000f36:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3c:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 8000f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000f46:	9414      	str	r4, [sp, #80]	; 0x50
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f48:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4a:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 8000f4c:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4e:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000f50:	f8c5 8010 	str.w	r8, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f54:	f000 fdee 	bl	8001b34 <HAL_ADC_Init>
 8000f58:	b108      	cbz	r0, 8000f5e <main+0x152>
 8000f5a:	b672      	cpsid	i
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <main+0x150>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000f5e:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f60:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	a912      	add	r1, sp, #72	; 0x48
 8000f66:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000f68:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	f000 fc75 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000f6e:	b108      	cbz	r0, 8000f74 <main+0x168>
 8000f70:	b672      	cpsid	i
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <main+0x166>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	4628      	mov	r0, r5
 8000f76:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f78:	e9cd 6812 	strd	r6, r8, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	f000 fc6c 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000f80:	4605      	mov	r5, r0
 8000f82:	b108      	cbz	r0, 8000f88 <main+0x17c>
 8000f84:	b672      	cpsid	i
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <main+0x17a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f88:	4601      	mov	r1, r0
 8000f8a:	463a      	mov	r2, r7
 8000f8c:	a807      	add	r0, sp, #28
 8000f8e:	f004 f985 	bl	800529c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	221c      	movs	r2, #28
 8000f94:	4629      	mov	r1, r5
 8000f96:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9c:	f004 f97e 	bl	800529c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	a812      	add	r0, sp, #72	; 0x48
 8000fa6:	f004 f979 	bl	800529c <memset>
  htim1.Instance = TIM1;
 8000faa:	4c51      	ldr	r4, [pc, #324]	; (80010f0 <main+0x2e4>)
 8000fac:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <main+0x2e8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fae:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 2-1;
 8000fb0:	e9c4 3600 	strd	r3, r6, [r4]
  htim1.Init.Period = 2048-1;
 8000fb4:	f240 73ff 	movw	r3, #2047	; 0x7ff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fbc:	2380      	movs	r3, #128	; 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8000fc0:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc2:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc4:	f002 f83e 	bl	8003044 <HAL_TIM_Base_Init>
 8000fc8:	b108      	cbz	r0, 8000fce <main+0x1c2>
 8000fca:	b672      	cpsid	i
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x1c0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd6:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f002 f91d 	bl	8003216 <HAL_TIM_ConfigClockSource>
 8000fdc:	b108      	cbz	r0, 8000fe2 <main+0x1d6>
 8000fde:	b672      	cpsid	i
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <main+0x1d4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f002 f85a 	bl	800309c <HAL_TIM_PWM_Init>
 8000fe8:	b108      	cbz	r0, 8000fee <main+0x1e2>
 8000fea:	b672      	cpsid	i
  while (1)
 8000fec:	e7fe      	b.n	8000fec <main+0x1e0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	e9cd 7005 	strd	r7, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff2:	a905      	add	r1, sp, #20
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f002 fb47 	bl	8003688 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	b108      	cbz	r0, 8001002 <main+0x1f6>
 8000ffe:	b672      	cpsid	i
  while (1)
 8001000:	e7fe      	b.n	8001000 <main+0x1f4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001002:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001004:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001008:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100c:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001010:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001012:	a90b      	add	r1, sp, #44	; 0x2c
 8001014:	4620      	mov	r0, r4
 8001016:	f002 f899 	bl	800314c <HAL_TIM_PWM_ConfigChannel>
 800101a:	b108      	cbz	r0, 8001020 <main+0x214>
 800101c:	b672      	cpsid	i
  while (1)
 800101e:	e7fe      	b.n	800101e <main+0x212>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001020:	2204      	movs	r2, #4
 8001022:	4620      	mov	r0, r4
 8001024:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 1;
 8001026:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	f002 f890 	bl	800314c <HAL_TIM_PWM_ConfigChannel>
 800102c:	b108      	cbz	r0, 8001032 <main+0x226>
 800102e:	b672      	cpsid	i
  while (1)
 8001030:	e7fe      	b.n	8001030 <main+0x224>
  sConfigOC.Pulse = 0;
 8001032:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001034:	2208      	movs	r2, #8
 8001036:	4620      	mov	r0, r4
 8001038:	a90b      	add	r1, sp, #44	; 0x2c
 800103a:	f002 f887 	bl	800314c <HAL_TIM_PWM_ConfigChannel>
 800103e:	b108      	cbz	r0, 8001044 <main+0x238>
 8001040:	b672      	cpsid	i
  while (1)
 8001042:	e7fe      	b.n	8001042 <main+0x236>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001044:	220c      	movs	r2, #12
 8001046:	482a      	ldr	r0, [pc, #168]	; (80010f0 <main+0x2e4>)
 8001048:	a90b      	add	r1, sp, #44	; 0x2c
 800104a:	f002 f87f 	bl	800314c <HAL_TIM_PWM_ConfigChannel>
 800104e:	b108      	cbz	r0, 8001054 <main+0x248>
 8001050:	b672      	cpsid	i
  while (1)
 8001052:	e7fe      	b.n	8001052 <main+0x246>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001058:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 800105c:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001060:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001062:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001064:	a912      	add	r1, sp, #72	; 0x48
 8001066:	4822      	ldr	r0, [pc, #136]	; (80010f0 <main+0x2e4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001068:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106a:	f002 fb3b 	bl	80036e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800106e:	4604      	mov	r4, r0
 8001070:	b108      	cbz	r0, 8001076 <main+0x26a>
 8001072:	b672      	cpsid	i
  while (1)
 8001074:	e7fe      	b.n	8001074 <main+0x268>
  HAL_TIM_MspPostInit(&htim1);
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <main+0x2e4>)
 8001078:	f000 fa92 	bl	80015a0 <HAL_TIM_MspPostInit>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001080:	481d      	ldr	r0, [pc, #116]	; (80010f8 <main+0x2ec>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001082:	4d1e      	ldr	r5, [pc, #120]	; (80010fc <main+0x2f0>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001084:	2601      	movs	r6, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001086:	e9c0 5300 	strd	r5, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108e:	e9c0 6305 	strd	r6, r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001092:	2330      	movs	r3, #48	; 0x30
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	e9c0 3407 	strd	r3, r4, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001098:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800109a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CRCPolynomial = 10;
 800109e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a4:	6104      	str	r4, [r0, #16]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a6:	f001 fc81 	bl	80029ac <HAL_SPI_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b108      	cbz	r0, 80010b2 <main+0x2a6>
 80010ae:	b672      	cpsid	i
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <main+0x2a4>
  huart1.Init.BaudRate = 115200;
 80010b2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Instance = USART1;
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <main+0x2f4>)
  huart1.Init.BaudRate = 115200;
 80010b8:	4c12      	ldr	r4, [pc, #72]	; (8001104 <main+0x2f8>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80010be:	e9c0 4200 	strd	r4, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c2:	220c      	movs	r2, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ca:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010cc:	f002 fb80 	bl	80037d0 <HAL_UART_Init>
 80010d0:	4605      	mov	r5, r0
 80010d2:	b1c8      	cbz	r0, 8001108 <main+0x2fc>
 80010d4:	b672      	cpsid	i
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <main+0x2ca>
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40010c00 	.word	0x40010c00
 80010e4:	40010800 	.word	0x40010800
 80010e8:	20000034 	.word	0x20000034
 80010ec:	40012400 	.word	0x40012400
 80010f0:	20000294 	.word	0x20000294
 80010f4:	40012c00 	.word	0x40012c00
 80010f8:	2000023c 	.word	0x2000023c
 80010fc:	40013000 	.word	0x40013000
 8001100:	20000324 	.word	0x20000324
 8001104:	40013800 	.word	0x40013800
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001108:	2710      	movs	r7, #16
 800110a:	4601      	mov	r1, r0
 800110c:	463a      	mov	r2, r7
 800110e:	a807      	add	r0, sp, #28
 8001110:	f004 f8c4 	bl	800529c <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001114:	2214      	movs	r2, #20
 8001116:	4629      	mov	r1, r5
 8001118:	a80b      	add	r0, sp, #44	; 0x2c
 800111a:	f004 f8bf 	bl	800529c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	221c      	movs	r2, #28
 8001120:	4629      	mov	r1, r5
 8001122:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	f004 f8b8 	bl	800529c <memset>
  htim2.Instance = TIM2;
 800112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001130:	4c44      	ldr	r4, [pc, #272]	; (8001244 <main+0x438>)
  htim2.Init.Prescaler = 2-1;
 8001132:	e9c4 3600 	strd	r3, r6, [r4]
  htim2.Init.Period = 2048-1;
 8001136:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113a:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001144:	f001 ff7e 	bl	8003044 <HAL_TIM_Base_Init>
 8001148:	b108      	cbz	r0, 800114e <main+0x342>
 800114a:	b672      	cpsid	i
  while (1)
 800114c:	e7fe      	b.n	800114c <main+0x340>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001152:	4620      	mov	r0, r4
 8001154:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001156:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001158:	f002 f85d 	bl	8003216 <HAL_TIM_ConfigClockSource>
 800115c:	b108      	cbz	r0, 8001162 <main+0x356>
 800115e:	b672      	cpsid	i
  while (1)
 8001160:	e7fe      	b.n	8001160 <main+0x354>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001162:	4620      	mov	r0, r4
 8001164:	f001 ff9a 	bl	800309c <HAL_TIM_PWM_Init>
 8001168:	b108      	cbz	r0, 800116e <main+0x362>
 800116a:	b672      	cpsid	i
  while (1)
 800116c:	e7fe      	b.n	800116c <main+0x360>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800116e:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001170:	a90b      	add	r1, sp, #44	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001172:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001176:	4620      	mov	r0, r4
 8001178:	f002 f933 	bl	80033e2 <HAL_TIM_SlaveConfigSynchro>
 800117c:	b108      	cbz	r0, 8001182 <main+0x376>
 800117e:	b672      	cpsid	i
  while (1)
 8001180:	e7fe      	b.n	8001180 <main+0x374>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001182:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001184:	4620      	mov	r0, r4
 8001186:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001188:	9705      	str	r7, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800118a:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118c:	f002 fa7c 	bl	8003688 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	b108      	cbz	r0, 8001196 <main+0x38a>
 8001192:	b672      	cpsid	i
  while (1)
 8001194:	e7fe      	b.n	8001194 <main+0x388>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001198:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119a:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119c:	2204      	movs	r2, #4
 800119e:	4620      	mov	r0, r4
 80011a0:	a912      	add	r1, sp, #72	; 0x48
  sConfigOC.Pulse = 1;
 80011a2:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a6:	f001 ffd1 	bl	800314c <HAL_TIM_PWM_ConfigChannel>
 80011aa:	b108      	cbz	r0, 80011b0 <main+0x3a4>
 80011ac:	b672      	cpsid	i
  while (1)
 80011ae:	e7fe      	b.n	80011ae <main+0x3a2>
  hadc2.Instance = ADC2;
 80011b0:	4c25      	ldr	r4, [pc, #148]	; (8001248 <main+0x43c>)
 80011b2:	4a26      	ldr	r2, [pc, #152]	; (800124c <main+0x440>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b4:	2300      	movs	r3, #0
  hadc2.Init.NbrOfConversion = 1;
 80011b6:	2501      	movs	r5, #1
  hadc2.Instance = ADC2;
 80011b8:	6022      	str	r2, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011be:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 80011c0:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 80011c4:	9314      	str	r3, [sp, #80]	; 0x50
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c6:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011c8:	7323      	strb	r3, [r4, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011ca:	7523      	strb	r3, [r4, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	61e2      	str	r2, [r4, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	6063      	str	r3, [r4, #4]
  hadc2.Init.NbrOfConversion = 1;
 80011d0:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d2:	f000 fcaf 	bl	8001b34 <HAL_ADC_Init>
 80011d6:	b108      	cbz	r0, 80011dc <main+0x3d0>
 80011d8:	b672      	cpsid	i
  while (1)
 80011da:	e7fe      	b.n	80011da <main+0x3ce>
  sConfig.Channel = ADC_CHANNEL_4;
 80011dc:	2304      	movs	r3, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011de:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e0:	a912      	add	r1, sp, #72	; 0x48
 80011e2:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e4:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e8:	f000 fb36 	bl	8001858 <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b108      	cbz	r0, 80011f4 <main+0x3e8>
 80011f0:	b672      	cpsid	i
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <main+0x3e6>
  hi2c2.Instance = I2C2;
 80011f4:	4816      	ldr	r0, [pc, #88]	; (8001250 <main+0x444>)
  hi2c2.Init.ClockSpeed = 100000;
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <main+0x448>)
 80011f8:	4917      	ldr	r1, [pc, #92]	; (8001258 <main+0x44c>)
  hi2c2.Init.OwnAddress1 = 0;
 80011fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 80011fe:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001206:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001210:	f000 ffb4 	bl	800217c <HAL_I2C_Init>
 8001214:	b108      	cbz	r0, 800121a <main+0x40e>
 8001216:	b672      	cpsid	i
  while (1)
 8001218:	e7fe      	b.n	8001218 <main+0x40c>
  HAL_Delay(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f000 facf 	bl	80017c0 <HAL_Delay>
  expanderInit();
 8001222:	f002 fcb1 	bl	8003b88 <expanderInit>
  HAL_Delay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f000 faca 	bl	80017c0 <HAL_Delay>
  dspInit();
 800122c:	f002 fd76 	bl	8003d1c <dspInit>
  HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f000 fac5 	bl	80017c0 <HAL_Delay>
  dspStart();
 8001236:	f002 fda5 	bl	8003d84 <dspStart>
	 dspProc();
 800123a:	f002 fe09 	bl	8003e50 <dspProc>
	 everythingElse();
 800123e:	f7ff fd9f 	bl	8000d80 <everythingElse>
  while (1)
 8001242:	e7fa      	b.n	800123a <main+0x42e>
 8001244:	200002dc 	.word	0x200002dc
 8001248:	20000064 	.word	0x20000064
 800124c:	40012800 	.word	0x40012800
 8001250:	200001e8 	.word	0x200001e8
 8001254:	000186a0 	.word	0x000186a0
 8001258:	40005800 	.word	0x40005800

0800125c <Error_Handler>:
 800125c:	b672      	cpsid	i
  while (1)
 800125e:	e7fe      	b.n	800125e <Error_Handler+0x2>

08001260 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_MspInit+0x3c>)
{
 8001262:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	f002 0201 	and.w	r2, r2, #1
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800127c:	61da      	str	r2, [r3, #28]
 800127e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800128a:	6853      	ldr	r3, [r2, #4]
 800128c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	b002      	add	sp, #8
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000

080012a4 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	2210      	movs	r2, #16
{
 80012a6:	b530      	push	{r4, r5, lr}
 80012a8:	4605      	mov	r5, r0
 80012aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	eb0d 0002 	add.w	r0, sp, r2
 80012b0:	2100      	movs	r1, #0
 80012b2:	f003 fff3 	bl	800529c <memset>
  if(hadc->Instance==ADC1)
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_ADC_MspInit+0xc8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d136      	bne.n	800132c <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <HAL_ADC_MspInit+0xcc>)
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_RX_I_Pin|ADC_RX_Q_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	482c      	ldr	r0, [pc, #176]	; (8001374 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012ce:	4c2a      	ldr	r4, [pc, #168]	; (8001378 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	f042 0204 	orr.w	r2, r2, #4
 80012de:	619a      	str	r2, [r3, #24]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_RX_I_Pin|ADC_RX_Q_Pin;
 80012ea:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f000 fe64 	bl	8001fbc <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f4:	2300      	movs	r3, #0
 80012f6:	4921      	ldr	r1, [pc, #132]	; (800137c <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f8:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fe:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001300:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001304:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001308:	e9c4 0303 	strd	r0, r3, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800130c:	2320      	movs	r3, #32
 800130e:	e9c4 c305 	strd	ip, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001312:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001316:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001318:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800131a:	f000 fcef 	bl	8001cfc <HAL_DMA_Init>
 800131e:	b108      	cbz	r0, 8001324 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001320:	f7ff ff9c 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001324:	622c      	str	r4, [r5, #32]
 8001326:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001328:	b009      	add	sp, #36	; 0x24
 800132a:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_ADC_MspInit+0xdc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d1fa      	bne.n	8001328 <HAL_ADC_MspInit+0x84>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_ADC_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	480f      	ldr	r0, [pc, #60]	; (8001374 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001336:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 800133a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800133e:	619a      	str	r2, [r3, #24]
 8001340:	699a      	ldr	r2, [r3, #24]
 8001342:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001346:	9202      	str	r2, [sp, #8]
 8001348:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	699a      	ldr	r2, [r3, #24]
 800134c:	f042 0204 	orr.w	r2, r2, #4
 8001350:	619a      	str	r2, [r3, #24]
 8001352:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	22fc      	movs	r2, #252	; 0xfc
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	9303      	str	r3, [sp, #12]
 800135c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f000 fe2a 	bl	8001fbc <HAL_GPIO_Init>
}
 8001368:	e7de      	b.n	8001328 <HAL_ADC_MspInit+0x84>
 800136a:	bf00      	nop
 800136c:	40012400 	.word	0x40012400
 8001370:	40021000 	.word	0x40021000
 8001374:	40010800 	.word	0x40010800
 8001378:	20000094 	.word	0x20000094
 800137c:	40020008 	.word	0x40020008
 8001380:	40012800 	.word	0x40012800

08001384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001384:	b510      	push	{r4, lr}
 8001386:	4604      	mov	r4, r0
 8001388:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	2210      	movs	r2, #16
 800138c:	2100      	movs	r1, #0
 800138e:	a802      	add	r0, sp, #8
 8001390:	f003 ff84 	bl	800529c <memset>
  if(hi2c->Instance==I2C2)
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_I2C_MspInit+0x58>)
 8001398:	429a      	cmp	r2, r3
 800139a:	d11d      	bne.n	80013d8 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4c10      	ldr	r4, [pc, #64]	; (80013e0 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	61a3      	str	r3, [r4, #24]
 80013ac:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b8:	2312      	movs	r3, #18
 80013ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f000 fdfb 	bl	8001fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013c6:	69e3      	ldr	r3, [r4, #28]
 80013c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013cc:	61e3      	str	r3, [r4, #28]
 80013ce:	69e3      	ldr	r3, [r4, #28]
 80013d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013d8:	b006      	add	sp, #24
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	40005800 	.word	0x40005800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	2710      	movs	r7, #16
{
 80013ec:	4606      	mov	r6, r0
 80013ee:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	463a      	mov	r2, r7
 80013f2:	2100      	movs	r1, #0
 80013f4:	a802      	add	r0, sp, #8
 80013f6:	f003 ff51 	bl	800529c <memset>
  if(hspi->Instance==SPI1)
 80013fa:	6832      	ldr	r2, [r6, #0]
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_SPI_MspInit+0xa0>)
 80013fe:	429a      	cmp	r2, r3
 8001400:	d13f      	bne.n	8001482 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001402:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001406:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800140a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800140e:	619a      	str	r2, [r3, #24]
 8001410:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001414:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001418:	9200      	str	r2, [sp, #0]
 800141a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	f042 0208 	orr.w	r2, r2, #8
 8001424:	619a      	str	r2, [r3, #24]
 8001426:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2228      	movs	r2, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f000 fdbe 	bl	8001fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	4812      	ldr	r0, [pc, #72]	; (800148c <HAL_SPI_MspInit+0xa4>)
 8001442:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	e9cd 5503 	strd	r5, r5, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001448:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f000 fdb7 	bl	8001fbc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_SPI_MspInit+0xa8>)

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001450:	4c10      	ldr	r4, [pc, #64]	; (8001494 <HAL_SPI_MspInit+0xac>)
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001452:	6853      	ldr	r3, [r2, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001454:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001456:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6053      	str	r3, [r2, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_SPI_MspInit+0xb0>)
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001462:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001466:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800146a:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146c:	60a5      	str	r5, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800146e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001472:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001474:	f000 fc42 	bl	8001cfc <HAL_DMA_Init>
 8001478:	b108      	cbz	r0, 800147e <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 800147a:	f7ff feef 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800147e:	64b4      	str	r4, [r6, #72]	; 0x48
 8001480:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001482:	b007      	add	sp, #28
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001486:	bf00      	nop
 8001488:	40013000 	.word	0x40013000
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40010000 	.word	0x40010000
 8001494:	200000d8 	.word	0x200000d8
 8001498:	40020030 	.word	0x40020030

0800149c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM1)
 800149e:	6803      	ldr	r3, [r0, #0]
 80014a0:	4a37      	ldr	r2, [pc, #220]	; (8001580 <HAL_TIM_Base_MspInit+0xe4>)
{
 80014a2:	4605      	mov	r5, r0
  if(htim_base->Instance==TIM1)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d15c      	bne.n	8001562 <HAL_TIM_Base_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_TIM_Base_MspInit+0xe8>)

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 80014aa:	4c37      	ldr	r4, [pc, #220]	; (8001588 <HAL_TIM_Base_MspInit+0xec>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ac:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ae:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800158c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80014ba:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c4:	2310      	movs	r3, #16
 80014c6:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80014ca:	2380      	movs	r3, #128	; 0x80
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014cc:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80014d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80014d8:	2020      	movs	r0, #32
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014da:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80014de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e2:	e9c4 0306 	strd	r0, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80014e6:	4620      	mov	r0, r4
 80014e8:	f000 fc08 	bl	8001cfc <HAL_DMA_Init>
 80014ec:	b108      	cbz	r0, 80014f2 <HAL_TIM_Base_MspInit+0x56>
    {
      Error_Handler();
 80014ee:	f7ff feb5 	bl	800125c <Error_Handler>

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f2:	2310      	movs	r3, #16
 80014f4:	4826      	ldr	r0, [pc, #152]	; (8001590 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80014f6:	62ec      	str	r4, [r5, #44]	; 0x2c
 80014f8:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 80014fa:	4c26      	ldr	r4, [pc, #152]	; (8001594 <HAL_TIM_Base_MspInit+0xf8>)
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	2280      	movs	r2, #128	; 0x80
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fe:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	2300      	movs	r3, #0
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001504:	f44f 7c80 	mov.w	ip, #256	; 0x100
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001508:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001510:	4620      	mov	r0, r4
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001512:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001516:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800151a:	f000 fbef 	bl	8001cfc <HAL_DMA_Init>
 800151e:	b108      	cbz	r0, 8001524 <HAL_TIM_Base_MspInit+0x88>
    {
      Error_Handler();
 8001520:	f7ff fe9c 	bl	800125c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001524:	2310      	movs	r3, #16
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <HAL_TIM_Base_MspInit+0xfc>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8001528:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 800152c:	632c      	str	r4, [r5, #48]	; 0x30
 800152e:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001530:	4c1a      	ldr	r4, [pc, #104]	; (800159c <HAL_TIM_Base_MspInit+0x100>)
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001532:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001536:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001542:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001546:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001548:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001550:	f000 fbd4 	bl	8001cfc <HAL_DMA_Init>
 8001554:	b108      	cbz	r0, 800155a <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8001556:	f7ff fe81 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800155a:	626c      	str	r4, [r5, #36]	; 0x24
 800155c:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800155e:	b003      	add	sp, #12
 8001560:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM2)
 8001562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001566:	d1fa      	bne.n	800155e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001568:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	61da      	str	r2, [r3, #28]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	9b01      	ldr	r3, [sp, #4]
}
 800157e:	e7ee      	b.n	800155e <HAL_TIM_Base_MspInit+0xc2>
 8001580:	40012c00 	.word	0x40012c00
 8001584:	40021000 	.word	0x40021000
 8001588:	20000160 	.word	0x20000160
 800158c:	4002006c 	.word	0x4002006c
 8001590:	40020044 	.word	0x40020044
 8001594:	200001a4 	.word	0x200001a4
 8001598:	4002001c 	.word	0x4002001c
 800159c:	2000011c 	.word	0x2000011c

080015a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a0:	b510      	push	{r4, lr}
 80015a2:	4604      	mov	r4, r0
 80015a4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	2210      	movs	r2, #16
 80015a8:	2100      	movs	r1, #0
 80015aa:	a802      	add	r0, sp, #8
 80015ac:	f003 fe76 	bl	800529c <memset>
  if(htim->Instance==TIM1)
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_TIM_MspPostInit+0x48>)
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d114      	bne.n	80015e2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80015bc:	699a      	ldr	r2, [r3, #24]
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TX_Q_PWM_Pin|AUDIO_PWM_Pin|TX_Q_PWMA11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	480b      	ldr	r0, [pc, #44]	; (80015ec <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	f042 0204 	orr.w	r2, r2, #4
 80015c4:	619a      	str	r2, [r3, #24]
 80015c6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	f44f 6250 	mov.w	r2, #3328	; 0xd00
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f000 fced 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015e2:	b006      	add	sp, #24
 80015e4:	bd10      	pop	{r4, pc}
 80015e6:	bf00      	nop
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40010800 	.word	0x40010800

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b510      	push	{r4, lr}
 80015f2:	4604      	mov	r4, r0
 80015f4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	2210      	movs	r2, #16
 80015f8:	2100      	movs	r1, #0
 80015fa:	a802      	add	r0, sp, #8
 80015fc:	f003 fe4e 	bl	800529c <memset>
  if(huart->Instance==USART1)
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001604:	429a      	cmp	r2, r3
 8001606:	d135      	bne.n	8001674 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001608:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800160c:	699a      	ldr	r2, [r3, #24]
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	481b      	ldr	r0, [pc, #108]	; (800167c <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001614:	619a      	str	r2, [r3, #24]
 8001616:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800161a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001624:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	619a      	str	r2, [r3, #24]
 800162c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f000 fcbb 	bl	8001fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <HAL_UART_MspInit+0x8c>)
 800164a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f000 fcb3 	bl	8001fbc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_UART_MspInit+0x90>)

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001658:	2025      	movs	r0, #37	; 0x25
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800165a:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800165c:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800165e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001668:	4622      	mov	r2, r4
 800166a:	f000 faf3 	bl	8001c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166e:	2025      	movs	r0, #37	; 0x25
 8001670:	f000 fb22 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001674:	b006      	add	sp, #24
 8001676:	bd10      	pop	{r4, pc}
 8001678:	40013800 	.word	0x40013800
 800167c:	40010c00 	.word	0x40010c00
 8001680:	40010000 	.word	0x40010000

08001684 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler>

08001686 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler>

08001688 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler>

0800168a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler>

0800168c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler>

0800168e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 b882 	b.w	800179c <HAL_IncTick>

08001698 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001698:	4801      	ldr	r0, [pc, #4]	; (80016a0 <DMA1_Channel1_IRQHandler+0x8>)
 800169a:	f000 bbfd 	b.w	8001e98 <HAL_DMA_IRQHandler>
 800169e:	bf00      	nop
 80016a0:	20000094 	.word	0x20000094

080016a4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <DMA1_Channel2_IRQHandler+0x8>)
 80016a6:	f000 bbf7 	b.w	8001e98 <HAL_DMA_IRQHandler>
 80016aa:	bf00      	nop
 80016ac:	2000011c 	.word	0x2000011c

080016b0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016b0:	4801      	ldr	r0, [pc, #4]	; (80016b8 <DMA1_Channel3_IRQHandler+0x8>)
 80016b2:	f000 bbf1 	b.w	8001e98 <HAL_DMA_IRQHandler>
 80016b6:	bf00      	nop
 80016b8:	200000d8 	.word	0x200000d8

080016bc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 80016bc:	4801      	ldr	r0, [pc, #4]	; (80016c4 <DMA1_Channel4_IRQHandler+0x8>)
 80016be:	f000 bbeb 	b.w	8001e98 <HAL_DMA_IRQHandler>
 80016c2:	bf00      	nop
 80016c4:	200001a4 	.word	0x200001a4

080016c8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80016c8:	4801      	ldr	r0, [pc, #4]	; (80016d0 <DMA1_Channel6_IRQHandler+0x8>)
 80016ca:	f000 bbe5 	b.w	8001e98 <HAL_DMA_IRQHandler>
 80016ce:	bf00      	nop
 80016d0:	20000160 	.word	0x20000160

080016d4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016d4:	4801      	ldr	r0, [pc, #4]	; (80016dc <USART1_IRQHandler+0x8>)
 80016d6:	f002 b901 	b.w	80038dc <HAL_UART_IRQHandler>
 80016da:	bf00      	nop
 80016dc:	20000324 	.word	0x20000324

080016e0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	4770      	bx	lr
	...

080016e4 <Reset_Handler>:
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <LoopFillZerobss+0x12>)
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <LoopFillZerobss+0x16>)
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <LoopFillZerobss+0x1a>)
 80016ea:	2300      	movs	r3, #0
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:
 80016ee:	58d4      	ldr	r4, [r2, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:
 80016f4:	18c4      	adds	r4, r0, r3
 80016f6:	428c      	cmp	r4, r1
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <LoopFillZerobss+0x1e>)
 80016fc:	4c0a      	ldr	r4, [pc, #40]	; (8001728 <LoopFillZerobss+0x22>)
 80016fe:	2300      	movs	r3, #0
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:
 8001706:	42a2      	cmp	r2, r4
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>
 800170a:	f7ff ffe9 	bl	80016e0 <SystemInit>
 800170e:	f003 fda1 	bl	8005254 <__libc_init_array>
 8001712:	f7ff fb7b 	bl	8000e0c <main>
 8001716:	4770      	bx	lr
 8001718:	20000000 	.word	0x20000000
 800171c:	20000014 	.word	0x20000014
 8001720:	0800537c 	.word	0x0800537c
 8001724:	20000014 	.word	0x20000014
 8001728:	200019b8 	.word	0x200019b8

0800172c <ADC1_2_IRQHandler>:
 800172c:	e7fe      	b.n	800172c <ADC1_2_IRQHandler>
	...

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_InitTick+0x3c>)
{
 8001734:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001736:	7818      	ldrb	r0, [r3, #0]
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_InitTick+0x40>)
 8001742:	6810      	ldr	r0, [r2, #0]
 8001744:	fbb0 f0f3 	udiv	r0, r0, r3
 8001748:	f000 fac4 	bl	8001cd4 <HAL_SYSTICK_Config>
 800174c:	4604      	mov	r4, r0
 800174e:	b958      	cbnz	r0, 8001768 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001750:	2d0f      	cmp	r5, #15
 8001752:	d809      	bhi.n	8001768 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	4602      	mov	r2, r0
 8001756:	4629      	mov	r1, r5
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f000 fa7a 	bl	8001c54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4620      	mov	r0, r4
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_InitTick+0x44>)
 8001764:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001766:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001768:	2001      	movs	r0, #1
 800176a:	e7fc      	b.n	8001766 <HAL_InitTick+0x36>
 800176c:	20000004 	.word	0x20000004
 8001770:	20000000 	.word	0x20000000
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_Init+0x20>)
{
 800177a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001786:	f000 fa53 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	200f      	movs	r0, #15
 800178c:	f7ff ffd0 	bl	8001730 <HAL_InitTick>
  HAL_MspInit();
 8001790:	f7ff fd66 	bl	8001260 <HAL_MspInit>
}
 8001794:	2000      	movs	r0, #0
 8001796:	bd08      	pop	{r3, pc}
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_IncTick+0x10>)
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_IncTick+0x14>)
 80017a0:	6811      	ldr	r1, [r2, #0]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	440b      	add	r3, r1
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000368 	.word	0x20000368
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017b4:	4b01      	ldr	r3, [pc, #4]	; (80017bc <HAL_GetTick+0x8>)
 80017b6:	6818      	ldr	r0, [r3, #0]
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000368 	.word	0x20000368

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b538      	push	{r3, r4, r5, lr}
 80017c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fff6 	bl	80017b4 <HAL_GetTick>
 80017c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80017cc:	bf1e      	ittt	ne
 80017ce:	4b04      	ldrne	r3, [pc, #16]	; (80017e0 <HAL_Delay+0x20>)
 80017d0:	781b      	ldrbne	r3, [r3, #0]
 80017d2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	1b43      	subs	r3, r0, r5
 80017da:	42a3      	cmp	r3, r4
 80017dc:	d3fa      	bcc.n	80017d4 <HAL_Delay+0x14>
  {
  }
}
 80017de:	bd38      	pop	{r3, r4, r5, pc}
 80017e0:	20000004 	.word	0x20000004

080017e4 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80017e6:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ea:	f012 0f50 	tst.w	r2, #80	; 0x50
 80017ee:	d11b      	bne.n	8001828 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	6892      	ldr	r2, [r2, #8]
 80017fc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001800:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001804:	d10c      	bne.n	8001820 <ADC_DMAConvCplt+0x3c>
 8001806:	7b1a      	ldrb	r2, [r3, #12]
 8001808:	b952      	cbnz	r2, 8001820 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800180a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001814:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001816:	bf5e      	ittt	pl
 8001818:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800181a:	f042 0201 	orrpl.w	r2, r2, #1
 800181e:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fb3c 	bl	8003e9e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001826:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001828:	6a1b      	ldr	r3, [r3, #32]
}
 800182a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4718      	bx	r3

08001832 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001832:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001834:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001836:	f002 fb31 	bl	8003e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800183a:	bd08      	pop	{r3, pc}

0800183c <HAL_ADC_ErrorCallback>:
 800183c:	4770      	bx	lr

0800183e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800183e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001840:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001842:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001848:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800184a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001852:	f7ff fff3 	bl	800183c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001856:	bd08      	pop	{r3, pc}

08001858 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001858:	2300      	movs	r3, #0
{ 
 800185a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800185c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800185e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001862:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001864:	2b01      	cmp	r3, #1
 8001866:	d06c      	beq.n	8001942 <HAL_ADC_ConfigChannel+0xea>
 8001868:	2301      	movs	r3, #1
 800186a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800186e:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001870:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8001872:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001874:	6808      	ldr	r0, [r1, #0]
 8001876:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800187a:	d822      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800187c:	261f      	movs	r6, #31
 800187e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001880:	3b05      	subs	r3, #5
 8001882:	409e      	lsls	r6, r3
 8001884:	ea25 0506 	bic.w	r5, r5, r6
 8001888:	fa00 f303 	lsl.w	r3, r0, r3
 800188c:	432b      	orrs	r3, r5
 800188e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001890:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001892:	688b      	ldr	r3, [r1, #8]
 8001894:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001898:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800189c:	d929      	bls.n	80018f2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800189e:	68d6      	ldr	r6, [r2, #12]
 80018a0:	3d1e      	subs	r5, #30
 80018a2:	40a9      	lsls	r1, r5
 80018a4:	ea26 0101 	bic.w	r1, r6, r1
 80018a8:	40ab      	lsls	r3, r5
 80018aa:	430b      	orrs	r3, r1
 80018ac:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ae:	f1a0 0310 	sub.w	r3, r0, #16
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d925      	bls.n	8001902 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80018b8:	2300      	movs	r3, #0
 80018ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80018be:	b002      	add	sp, #8
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80018c2:	2d0c      	cmp	r5, #12
 80018c4:	f04f 051f 	mov.w	r5, #31
 80018c8:	d809      	bhi.n	80018de <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018ca:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80018cc:	3b23      	subs	r3, #35	; 0x23
 80018ce:	409d      	lsls	r5, r3
 80018d0:	ea26 0505 	bic.w	r5, r6, r5
 80018d4:	fa00 f303 	lsl.w	r3, r0, r3
 80018d8:	432b      	orrs	r3, r5
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	e7d8      	b.n	8001890 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018de:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80018e0:	3b41      	subs	r3, #65	; 0x41
 80018e2:	409d      	lsls	r5, r3
 80018e4:	ea26 0505 	bic.w	r5, r6, r5
 80018e8:	fa00 f303 	lsl.w	r3, r0, r3
 80018ec:	432b      	orrs	r3, r5
 80018ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80018f0:	e7ce      	b.n	8001890 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018f2:	6910      	ldr	r0, [r2, #16]
 80018f4:	40a9      	lsls	r1, r5
 80018f6:	ea20 0101 	bic.w	r1, r0, r1
 80018fa:	40ab      	lsls	r3, r5
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6113      	str	r3, [r2, #16]
 8001900:	e7d9      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_ADC_ConfigChannel+0xf0>)
 8001904:	429a      	cmp	r2, r3
 8001906:	d116      	bne.n	8001936 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001908:	6893      	ldr	r3, [r2, #8]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d4d3      	bmi.n	80018b6 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800190e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001910:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001912:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001916:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001918:	d1cd      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_ADC_ConfigChannel+0xf4>)
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_ADC_ConfigChannel+0xf8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fbb3 f3f2 	udiv	r3, r3, r2
 8001924:	220a      	movs	r2, #10
 8001926:	4353      	muls	r3, r2
            wait_loop_index--;
 8001928:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800192a:	9b01      	ldr	r3, [sp, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0c2      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001930:	9b01      	ldr	r3, [sp, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	e7f8      	b.n	8001928 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001938:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193a:	f043 0320 	orr.w	r3, r3, #32
 800193e:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001940:	e7ba      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001942:	2002      	movs	r0, #2
 8001944:	e7bb      	b.n	80018be <HAL_ADC_ConfigChannel+0x66>
 8001946:	bf00      	nop
 8001948:	40012400 	.word	0x40012400
 800194c:	20000000 	.word	0x20000000
 8001950:	000f4240 	.word	0x000f4240

08001954 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001954:	2300      	movs	r3, #0
{
 8001956:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001958:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800195a:	6803      	ldr	r3, [r0, #0]
{
 800195c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	07d2      	lsls	r2, r2, #31
 8001962:	d502      	bpl.n	800196a <ADC_Enable+0x16>
  return HAL_OK;
 8001964:	2000      	movs	r0, #0
}
 8001966:	b003      	add	sp, #12
 8001968:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	f042 0201 	orr.w	r2, r2, #1
 8001970:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <ADC_Enable+0x70>)
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <ADC_Enable+0x74>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800197c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	b9e3      	cbnz	r3, 80019bc <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8001982:	f7ff ff17 	bl	80017b4 <HAL_GetTick>
 8001986:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	07db      	lsls	r3, r3, #31
 800198e:	d4e9      	bmi.n	8001964 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001990:	f7ff ff10 	bl	80017b4 <HAL_GetTick>
 8001994:	1b40      	subs	r0, r0, r5
 8001996:	2802      	cmp	r0, #2
 8001998:	d9f6      	bls.n	8001988 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f013 0301 	ands.w	r3, r3, #1
 80019a2:	d1f1      	bne.n	8001988 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 80019a6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a8:	f042 0210 	orr.w	r2, r2, #16
 80019ac:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80019b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80019ba:	e7d4      	b.n	8001966 <ADC_Enable+0x12>
      wait_loop_index--;
 80019bc:	9b01      	ldr	r3, [sp, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	e7dc      	b.n	800197c <ADC_Enable+0x28>
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000
 80019c8:	000f4240 	.word	0x000f4240

080019cc <HAL_ADC_Start_DMA>:
{
 80019cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80019d0:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <HAL_ADC_Start_DMA+0x108>)
{
 80019d2:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80019d4:	6802      	ldr	r2, [r0, #0]
{
 80019d6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80019d8:	429a      	cmp	r2, r3
{
 80019da:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80019dc:	d002      	beq.n	80019e4 <HAL_ADC_Start_DMA+0x18>
 80019de:	493e      	ldr	r1, [pc, #248]	; (8001ad8 <HAL_ADC_Start_DMA+0x10c>)
 80019e0:	428a      	cmp	r2, r1
 80019e2:	d103      	bne.n	80019ec <HAL_ADC_Start_DMA+0x20>
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80019ea:	d16e      	bne.n	8001aca <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80019ec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d06c      	beq.n	8001ace <HAL_ADC_Start_DMA+0x102>
 80019f4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80019f6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80019f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80019fc:	f7ff ffaa 	bl	8001954 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001a00:	4606      	mov	r6, r0
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d15d      	bne.n	8001ac2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001a06:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a08:	6821      	ldr	r1, [r4, #0]
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8001a10:	f025 0501 	bic.w	r5, r5, #1
 8001a14:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a18:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a1c:	d104      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x5c>
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <HAL_ADC_Start_DMA+0x108>)
 8001a20:	6853      	ldr	r3, [r2, #4]
 8001a22:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001a26:	d13e      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a2e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a30:	684b      	ldr	r3, [r1, #4]
 8001a32:	055a      	lsls	r2, r3, #21
 8001a34:	d505      	bpl.n	8001a42 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a40:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a44:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a46:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a4a:	bf18      	it	ne
 8001a4c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a4e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a50:	bf18      	it	ne
 8001a52:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001a56:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a60:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a62:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_ADC_Start_DMA+0x114>)
 8001a66:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_ADC_Start_DMA+0x118>)
 8001a6a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a6c:	f06f 0302 	mvn.w	r3, #2
 8001a70:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a74:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a80:	4643      	mov	r3, r8
 8001a82:	f000 f969 	bl	8001d58 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001a8e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	bf0c      	ite	eq
 8001a96:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a9a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aac:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aae:	6853      	ldr	r3, [r2, #4]
 8001ab0:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ab2:	bf41      	itttt	mi
 8001ab4:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001ab6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001aba:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001abe:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001ac0:	e7bf      	b.n	8001a42 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001ac8:	e7ea      	b.n	8001aa0 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001aca:	2601      	movs	r6, #1
 8001acc:	e7e8      	b.n	8001aa0 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001ace:	2602      	movs	r6, #2
 8001ad0:	e7e6      	b.n	8001aa0 <HAL_ADC_Start_DMA+0xd4>
 8001ad2:	bf00      	nop
 8001ad4:	40012400 	.word	0x40012400
 8001ad8:	40012800 	.word	0x40012800
 8001adc:	080017e5 	.word	0x080017e5
 8001ae0:	08001833 	.word	0x08001833
 8001ae4:	0800183f 	.word	0x0800183f

08001ae8 <ADC_ConversionStop_Disable>:
{
 8001ae8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001aea:	6803      	ldr	r3, [r0, #0]
{
 8001aec:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	07d1      	lsls	r1, r2, #31
 8001af2:	d401      	bmi.n	8001af8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
}
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001b00:	f7ff fe58 	bl	80017b4 <HAL_GetTick>
 8001b04:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	07db      	lsls	r3, r3, #31
 8001b0c:	d5f2      	bpl.n	8001af4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b0e:	f7ff fe51 	bl	80017b4 <HAL_GetTick>
 8001b12:	1b40      	subs	r0, r0, r5
 8001b14:	2802      	cmp	r0, #2
 8001b16:	d9f6      	bls.n	8001b06 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	07da      	lsls	r2, r3, #31
 8001b1e:	d5f2      	bpl.n	8001b06 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001b32:	e7e0      	b.n	8001af6 <ADC_ConversionStop_Disable+0xe>

08001b34 <HAL_ADC_Init>:
{
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001b36:	4604      	mov	r4, r0
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d06e      	beq.n	8001c1a <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b3e:	b923      	cbnz	r3, 8001b4a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001b42:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001b46:	f7ff fbad 	bl	80012a4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff ffcc 	bl	8001ae8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b52:	f013 0310 	ands.w	r3, r3, #16
 8001b56:	d162      	bne.n	8001c1e <HAL_ADC_Init+0xea>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d160      	bne.n	8001c1e <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8001b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b5e:	69e5      	ldr	r5, [r4, #28]
 8001b60:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001b62:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001b66:	f022 0202 	bic.w	r2, r2, #2
 8001b6a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b6e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b70:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b74:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b76:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b7a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b7e:	d037      	beq.n	8001bf0 <HAL_ADC_Init+0xbc>
 8001b80:	2d01      	cmp	r5, #1
 8001b82:	bf14      	ite	ne
 8001b84:	2700      	movne	r7, #0
 8001b86:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b8a:	7d26      	ldrb	r6, [r4, #20]
 8001b8c:	2e01      	cmp	r6, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b90:	bb82      	cbnz	r2, 8001bf4 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b92:	69a2      	ldr	r2, [r4, #24]
 8001b94:	3a01      	subs	r2, #1
 8001b96:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8001b9a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001b9e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ba0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001ba4:	6856      	ldr	r6, [r2, #4]
 8001ba6:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001baa:	ea46 0607 	orr.w	r6, r6, r7
 8001bae:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001bb0:	6897      	ldr	r7, [r2, #8]
 8001bb2:	4e1d      	ldr	r6, [pc, #116]	; (8001c28 <HAL_ADC_Init+0xf4>)
 8001bb4:	ea06 0607 	and.w	r6, r6, r7
 8001bb8:	ea46 0601 	orr.w	r6, r6, r1
 8001bbc:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bbe:	d001      	beq.n	8001bc4 <HAL_ADC_Init+0x90>
 8001bc0:	2d01      	cmp	r5, #1
 8001bc2:	d102      	bne.n	8001bca <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bc4:	6923      	ldr	r3, [r4, #16]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001bca:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001bcc:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001bd0:	432b      	orrs	r3, r5
 8001bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd4:	6892      	ldr	r2, [r2, #8]
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_ADC_Init+0xf8>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	4299      	cmp	r1, r3
 8001bdc:	d113      	bne.n	8001c06 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8001bde:	2300      	movs	r3, #0
 8001be0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001be2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001be4:	f023 0303 	bic.w	r3, r3, #3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bf0:	462f      	mov	r7, r5
 8001bf2:	e7ca      	b.n	8001b8a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001c04:	e7cb      	b.n	8001b9e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c08:	f023 0312 	bic.w	r3, r3, #18
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e7e7      	b.n	8001bee <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001c26:	e7f8      	b.n	8001c1a <HAL_ADC_Init+0xe6>
 8001c28:	ffe1f7fd 	.word	0xffe1f7fd
 8001c2c:	ff1f0efe 	.word	0xff1f0efe

08001c30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c32:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c3e:	0412      	lsls	r2, r2, #16
 8001c40:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c4c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b530      	push	{r4, r5, lr}
 8001c58:	68dc      	ldr	r4, [r3, #12]
 8001c5a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	bf28      	it	cs
 8001c68:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c70:	bf98      	it	ls
 8001c72:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c78:	bf88      	it	hi
 8001c7a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	ea21 0303 	bic.w	r3, r1, r3
 8001c80:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c82:	fa05 f404 	lsl.w	r4, r5, r4
 8001c86:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	bfac      	ite	ge
 8001c92:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	4a07      	ldrlt	r2, [pc, #28]	; (8001cb4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	bfab      	itete	ge
 8001ca0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001cae:	bd30      	pop	{r4, r5, pc}
 8001cb0:	e000ed00 	.word	0xe000ed00
 8001cb4:	e000ed14 	.word	0xe000ed14

08001cb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	db08      	blt.n	8001cce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	0942      	lsrs	r2, r0, #5
 8001cc0:	f000 001f 	and.w	r0, r0, #31
 8001cc4:	fa03 f000 	lsl.w	r0, r3, r0
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <HAL_NVIC_EnableIRQ+0x18>)
 8001cca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	3801      	subs	r0, #1
 8001cd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001cda:	d20b      	bcs.n	8001cf4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	21f0      	movs	r1, #240	; 0xf0
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cea:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cec:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cee:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001cf4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cfe:	b320      	cbz	r0, 8001d4a <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d00:	2214      	movs	r2, #20
 8001d02:	6801      	ldr	r1, [r0, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_DMA_Init+0x54>)
 8001d06:	440b      	add	r3, r1
 8001d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d12:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001d14:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d16:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001d1a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d1e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	4323      	orrs	r3, r4
 8001d24:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d26:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2c:	6944      	ldr	r4, [r0, #20]
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	6984      	ldr	r4, [r0, #24]
 8001d32:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d34:	69c4      	ldr	r4, [r0, #28]
 8001d36:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001d38:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d3a:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d40:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8001d42:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d44:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001d46:	4618      	mov	r0, r3
}
 8001d48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e7fc      	b.n	8001d48 <HAL_DMA_Init+0x4c>
 8001d4e:	bf00      	nop
 8001d50:	bffdfff8 	.word	0xbffdfff8
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d5a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001d5e:	2c01      	cmp	r4, #1
 8001d60:	d034      	beq.n	8001dcc <HAL_DMA_Start_IT+0x74>
 8001d62:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d64:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001d68:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d6c:	42a5      	cmp	r5, r4
 8001d6e:	f04f 0600 	mov.w	r6, #0
 8001d72:	f04f 0402 	mov.w	r4, #2
 8001d76:	d127      	bne.n	8001dc8 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d78:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d7c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001d80:	6826      	ldr	r6, [r4, #0]
 8001d82:	f026 0601 	bic.w	r6, r6, #1
 8001d86:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d88:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001d8c:	40bd      	lsls	r5, r7
 8001d8e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d90:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d92:	6843      	ldr	r3, [r0, #4]
 8001d94:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001d96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d98:	bf0b      	itete	eq
 8001d9a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001d9c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001d9e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001da0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001da2:	b14b      	cbz	r3, 8001db8 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dac:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6023      	str	r3, [r4, #0]
}
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	f023 0304 	bic.w	r3, r3, #4
 8001dbe:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f043 030a 	orr.w	r3, r3, #10
 8001dc6:	e7f0      	b.n	8001daa <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001dc8:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	e7f2      	b.n	8001db6 <HAL_DMA_Start_IT+0x5e>

08001dd0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d006      	beq.n	8001de6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001de2:	2001      	movs	r0, #1
 8001de4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de6:	6803      	ldr	r3, [r0, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f022 020e 	bic.w	r2, r2, #14
 8001dee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 8001dfe:	408b      	lsls	r3, r1
 8001e00:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e06:	8403      	strh	r3, [r0, #32]
  return status; 
 8001e08:	2000      	movs	r0, #0
}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_DMA_Abort_IT>:
{  
 8001e0c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e0e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e16:	2304      	movs	r3, #4
 8001e18:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e1e:	6803      	ldr	r3, [r0, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f022 020e 	bic.w	r2, r2, #14
 8001e26:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_DMA_Abort_IT+0x84>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01c      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x64>
 8001e36:	3214      	adds	r2, #20
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01b      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x68>
 8001e3c:	3214      	adds	r2, #20
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01a      	beq.n	8001e78 <HAL_DMA_Abort_IT+0x6c>
 8001e42:	3214      	adds	r2, #20
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d01a      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x72>
 8001e48:	3214      	adds	r2, #20
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01a      	beq.n	8001e84 <HAL_DMA_Abort_IT+0x78>
 8001e4e:	3214      	adds	r2, #20
 8001e50:	4293      	cmp	r3, r2
 8001e52:	bf0c      	ite	eq
 8001e54:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001e58:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_DMA_Abort_IT+0x88>)
 8001e5e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e64:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001e66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e68:	b17b      	cbz	r3, 8001e8a <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8001e6a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e7d5      	b.n	8001e1c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e70:	2301      	movs	r3, #1
 8001e72:	e7f3      	b.n	8001e5c <HAL_DMA_Abort_IT+0x50>
 8001e74:	2310      	movs	r3, #16
 8001e76:	e7f1      	b.n	8001e5c <HAL_DMA_Abort_IT+0x50>
 8001e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7c:	e7ee      	b.n	8001e5c <HAL_DMA_Abort_IT+0x50>
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	e7eb      	b.n	8001e5c <HAL_DMA_Abort_IT+0x50>
 8001e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e88:	e7e8      	b.n	8001e5c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	e7c6      	b.n	8001e1c <HAL_DMA_Abort_IT+0x10>
 8001e8e:	bf00      	nop
 8001e90:	40020008 	.word	0x40020008
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_DMA_IRQHandler>:
{
 8001e98:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e9a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e9c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ea0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001ea2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ea4:	4095      	lsls	r5, r2
 8001ea6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001ea8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001eaa:	d032      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x7a>
 8001eac:	074d      	lsls	r5, r1, #29
 8001eae:	d530      	bpl.n	8001f12 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eb4:	bf5e      	ittt	pl
 8001eb6:	681a      	ldrpl	r2, [r3, #0]
 8001eb8:	f022 0204 	bicpl.w	r2, r2, #4
 8001ebc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_DMA_IRQHandler+0x11c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d019      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x60>
 8001ec4:	3214      	adds	r2, #20
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d018      	beq.n	8001efc <HAL_DMA_IRQHandler+0x64>
 8001eca:	3214      	adds	r2, #20
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d017      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x68>
 8001ed0:	3214      	adds	r2, #20
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d017      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x6e>
 8001ed6:	3214      	adds	r2, #20
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d017      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x74>
 8001edc:	3214      	adds	r2, #20
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	bf0c      	ite	eq
 8001ee2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001ee6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001eea:	4a33      	ldr	r2, [pc, #204]	; (8001fb8 <HAL_DMA_IRQHandler+0x120>)
 8001eec:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001eee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d05c      	beq.n	8001fae <HAL_DMA_IRQHandler+0x116>
}
 8001ef4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001ef6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e7f6      	b.n	8001eea <HAL_DMA_IRQHandler+0x52>
 8001efc:	2340      	movs	r3, #64	; 0x40
 8001efe:	e7f4      	b.n	8001eea <HAL_DMA_IRQHandler+0x52>
 8001f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f04:	e7f1      	b.n	8001eea <HAL_DMA_IRQHandler+0x52>
 8001f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f0a:	e7ee      	b.n	8001eea <HAL_DMA_IRQHandler+0x52>
 8001f0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f10:	e7eb      	b.n	8001eea <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f12:	2502      	movs	r5, #2
 8001f14:	4095      	lsls	r5, r2
 8001f16:	4225      	tst	r5, r4
 8001f18:	d035      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xee>
 8001f1a:	078d      	lsls	r5, r1, #30
 8001f1c:	d533      	bpl.n	8001f86 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	0694      	lsls	r4, r2, #26
 8001f22:	d406      	bmi.n	8001f32 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f022 020a 	bic.w	r2, r2, #10
 8001f2a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f32:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_DMA_IRQHandler+0x11c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d019      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xd4>
 8001f38:	3214      	adds	r2, #20
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d018      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
 8001f3e:	3214      	adds	r2, #20
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d017      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xdc>
 8001f44:	3214      	adds	r2, #20
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d017      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xe2>
 8001f4a:	3214      	adds	r2, #20
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d017      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xe8>
 8001f50:	3214      	adds	r2, #20
 8001f52:	4293      	cmp	r3, r2
 8001f54:	bf0c      	ite	eq
 8001f56:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001f5a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001f5e:	4a16      	ldr	r2, [pc, #88]	; (8001fb8 <HAL_DMA_IRQHandler+0x120>)
 8001f60:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001f62:	2300      	movs	r3, #0
 8001f64:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001f68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f6a:	e7c1      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e7f6      	b.n	8001f5e <HAL_DMA_IRQHandler+0xc6>
 8001f70:	2320      	movs	r3, #32
 8001f72:	e7f4      	b.n	8001f5e <HAL_DMA_IRQHandler+0xc6>
 8001f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f78:	e7f1      	b.n	8001f5e <HAL_DMA_IRQHandler+0xc6>
 8001f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7e:	e7ee      	b.n	8001f5e <HAL_DMA_IRQHandler+0xc6>
 8001f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f84:	e7eb      	b.n	8001f5e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f86:	2508      	movs	r5, #8
 8001f88:	4095      	lsls	r5, r2
 8001f8a:	4225      	tst	r5, r4
 8001f8c:	d00f      	beq.n	8001fae <HAL_DMA_IRQHandler+0x116>
 8001f8e:	0709      	lsls	r1, r1, #28
 8001f90:	d50d      	bpl.n	8001fae <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	f021 010e 	bic.w	r1, r1, #14
 8001f98:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	fa03 f202 	lsl.w	r2, r3, r2
 8001fa0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fa2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa8:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001faa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001fac:	e7a0      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x58>
}
 8001fae:	bc70      	pop	{r4, r5, r6}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40020008 	.word	0x40020008
 8001fb8:	40020000 	.word	0x40020000

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fc0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001fc2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc4:	4f64      	ldr	r7, [pc, #400]	; (8002158 <HAL_GPIO_Init+0x19c>)
 8001fc6:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8001fc8:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002160 <HAL_GPIO_Init+0x1a4>
 8001fcc:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002164 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd0:	680d      	ldr	r5, [r1, #0]
 8001fd2:	fa35 f406 	lsrs.w	r4, r5, r6
 8001fd6:	d102      	bne.n	8001fde <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001fd8:	b003      	add	sp, #12
 8001fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001fde:	f04f 0801 	mov.w	r8, #1
 8001fe2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8001fea:	ea38 0505 	bics.w	r5, r8, r5
 8001fee:	d17b      	bne.n	80020e8 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8001ff0:	684d      	ldr	r5, [r1, #4]
 8001ff2:	2d03      	cmp	r5, #3
 8001ff4:	d807      	bhi.n	8002006 <HAL_GPIO_Init+0x4a>
 8001ff6:	3d01      	subs	r5, #1
 8001ff8:	2d02      	cmp	r5, #2
 8001ffa:	f200 8088 	bhi.w	800210e <HAL_GPIO_Init+0x152>
 8001ffe:	e8df f005 	tbb	[pc, r5]
 8002002:	9b96      	.short	0x9b96
 8002004:	a1          	.byte	0xa1
 8002005:	00          	.byte	0x00
 8002006:	2d12      	cmp	r5, #18
 8002008:	f000 8099 	beq.w	800213e <HAL_GPIO_Init+0x182>
 800200c:	d86e      	bhi.n	80020ec <HAL_GPIO_Init+0x130>
 800200e:	2d11      	cmp	r5, #17
 8002010:	f000 808f 	beq.w	8002132 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002014:	2cff      	cmp	r4, #255	; 0xff
 8002016:	bf98      	it	ls
 8002018:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800201e:	bf88      	it	hi
 8002020:	f100 0a04 	addhi.w	sl, r0, #4
 8002024:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002028:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800202c:	bf88      	it	hi
 800202e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002030:	fa09 fb05 	lsl.w	fp, r9, r5
 8002034:	ea28 080b 	bic.w	r8, r8, fp
 8002038:	fa02 f505 	lsl.w	r5, r2, r5
 800203c:	ea48 0505 	orr.w	r5, r8, r5
 8002040:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002044:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002048:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800204c:	d04c      	beq.n	80020e8 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800204e:	69bd      	ldr	r5, [r7, #24]
 8002050:	f026 0803 	bic.w	r8, r6, #3
 8002054:	f045 0501 	orr.w	r5, r5, #1
 8002058:	61bd      	str	r5, [r7, #24]
 800205a:	69bd      	ldr	r5, [r7, #24]
 800205c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002060:	f005 0501 	and.w	r5, r5, #1
 8002064:	9501      	str	r5, [sp, #4]
 8002066:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800206e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002070:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002074:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002078:	fa09 f90b 	lsl.w	r9, r9, fp
 800207c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002080:	4d39      	ldr	r5, [pc, #228]	; (8002168 <HAL_GPIO_Init+0x1ac>)
 8002082:	42a8      	cmp	r0, r5
 8002084:	d062      	beq.n	800214c <HAL_GPIO_Init+0x190>
 8002086:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800208a:	42a8      	cmp	r0, r5
 800208c:	d060      	beq.n	8002150 <HAL_GPIO_Init+0x194>
 800208e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002092:	42a8      	cmp	r0, r5
 8002094:	d05e      	beq.n	8002154 <HAL_GPIO_Init+0x198>
 8002096:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800209a:	42a8      	cmp	r0, r5
 800209c:	bf0c      	ite	eq
 800209e:	2503      	moveq	r5, #3
 80020a0:	2504      	movne	r5, #4
 80020a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80020a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80020aa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80020ae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80020b4:	bf14      	ite	ne
 80020b6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b8:	43a5      	biceq	r5, r4
 80020ba:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80020bc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020be:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80020c2:	bf14      	ite	ne
 80020c4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020c6:	43a5      	biceq	r5, r4
 80020c8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020cc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d0:	bf14      	ite	ne
 80020d2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020d4:	43a5      	biceq	r5, r4
 80020d6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020da:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80020de:	bf14      	ite	ne
 80020e0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e2:	ea25 0404 	biceq.w	r4, r5, r4
 80020e6:	60dc      	str	r4, [r3, #12]
	position++;
 80020e8:	3601      	adds	r6, #1
 80020ea:	e771      	b.n	8001fd0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80020ec:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800216c <HAL_GPIO_Init+0x1b0>
 80020f0:	454d      	cmp	r5, r9
 80020f2:	d00c      	beq.n	800210e <HAL_GPIO_Init+0x152>
 80020f4:	d817      	bhi.n	8002126 <HAL_GPIO_Init+0x16a>
 80020f6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80020fa:	454d      	cmp	r5, r9
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x152>
 80020fe:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002102:	454d      	cmp	r5, r9
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x152>
 8002106:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800210a:	454d      	cmp	r5, r9
 800210c:	d182      	bne.n	8002014 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800210e:	688a      	ldr	r2, [r1, #8]
 8002110:	b1d2      	cbz	r2, 8002148 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002112:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002114:	bf08      	it	eq
 8002116:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800211a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800211e:	bf18      	it	ne
 8002120:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002124:	e776      	b.n	8002014 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002126:	4565      	cmp	r5, ip
 8002128:	d0f1      	beq.n	800210e <HAL_GPIO_Init+0x152>
 800212a:	4575      	cmp	r5, lr
 800212c:	e7ee      	b.n	800210c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800212e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002130:	e770      	b.n	8002014 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002132:	68ca      	ldr	r2, [r1, #12]
 8002134:	3204      	adds	r2, #4
          break;
 8002136:	e76d      	b.n	8002014 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002138:	68ca      	ldr	r2, [r1, #12]
 800213a:	3208      	adds	r2, #8
          break;
 800213c:	e76a      	b.n	8002014 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800213e:	68ca      	ldr	r2, [r1, #12]
 8002140:	320c      	adds	r2, #12
          break;
 8002142:	e767      	b.n	8002014 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002144:	2200      	movs	r2, #0
 8002146:	e765      	b.n	8002014 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002148:	2204      	movs	r2, #4
 800214a:	e763      	b.n	8002014 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800214c:	2500      	movs	r5, #0
 800214e:	e7a8      	b.n	80020a2 <HAL_GPIO_Init+0xe6>
 8002150:	2501      	movs	r5, #1
 8002152:	e7a6      	b.n	80020a2 <HAL_GPIO_Init+0xe6>
 8002154:	2502      	movs	r5, #2
 8002156:	e7a4      	b.n	80020a2 <HAL_GPIO_Init+0xe6>
 8002158:	40021000 	.word	0x40021000
 800215c:	40010400 	.word	0x40010400
 8002160:	10310000 	.word	0x10310000
 8002164:	10320000 	.word	0x10320000
 8002168:	40010800 	.word	0x40010800
 800216c:	10220000 	.word	0x10220000

08002170 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	b10a      	cbz	r2, 8002176 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002172:	6101      	str	r1, [r0, #16]
  }
}
 8002174:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002176:	0409      	lsls	r1, r1, #16
 8002178:	e7fb      	b.n	8002172 <HAL_GPIO_WritePin+0x2>
	...

0800217c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800217c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800217e:	4604      	mov	r4, r0
 8002180:	b908      	cbnz	r0, 8002186 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8002184:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002186:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800218a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800218e:	b91b      	cbnz	r3, 8002198 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002190:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002194:	f7ff f8f6 	bl	8001384 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	2324      	movs	r3, #36	; 0x24
 800219a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b8:	f000 fafa 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021bc:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_I2C_Init+0x140>)
 80021be:	6863      	ldr	r3, [r4, #4]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf94      	ite	ls
 80021c4:	4a3e      	ldrls	r2, [pc, #248]	; (80022c0 <HAL_I2C_Init+0x144>)
 80021c6:	4a3f      	ldrhi	r2, [pc, #252]	; (80022c4 <HAL_I2C_Init+0x148>)
 80021c8:	4290      	cmp	r0, r2
 80021ca:	bf8c      	ite	hi
 80021cc:	2200      	movhi	r2, #0
 80021ce:	2201      	movls	r2, #1
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d1d6      	bne.n	8002182 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021d4:	4e39      	ldr	r6, [pc, #228]	; (80022bc <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80021d6:	493c      	ldr	r1, [pc, #240]	; (80022c8 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021d8:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80021da:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021de:	bf88      	it	hi
 80021e0:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021e6:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ea:	6855      	ldr	r5, [r2, #4]
 80021ec:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80021f0:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f4:	bf82      	ittt	hi
 80021f6:	4371      	mulhi	r1, r6
 80021f8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80021fc:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002200:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002202:	6a15      	ldr	r5, [r2, #32]
 8002204:	3101      	adds	r1, #1
 8002206:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800220a:	4329      	orrs	r1, r5
 800220c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800220e:	69d1      	ldr	r1, [r2, #28]
 8002210:	4d2a      	ldr	r5, [pc, #168]	; (80022bc <HAL_I2C_Init+0x140>)
 8002212:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002216:	42ab      	cmp	r3, r5
 8002218:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800221c:	d832      	bhi.n	8002284 <HAL_I2C_Init+0x108>
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fbb0 f0f3 	udiv	r0, r0, r3
 8002224:	1c43      	adds	r3, r0, #1
 8002226:	f640 70fc 	movw	r0, #4092	; 0xffc
 800222a:	4203      	tst	r3, r0
 800222c:	d042      	beq.n	80022b4 <HAL_I2C_Init+0x138>
 800222e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002232:	430b      	orrs	r3, r1
 8002234:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002236:	6811      	ldr	r1, [r2, #0]
 8002238:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800223c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002240:	4303      	orrs	r3, r0
 8002242:	430b      	orrs	r3, r1
 8002244:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002246:	6891      	ldr	r1, [r2, #8]
 8002248:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800224c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002250:	4303      	orrs	r3, r0
 8002252:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002256:	430b      	orrs	r3, r1
 8002258:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800225a:	68d1      	ldr	r1, [r2, #12]
 800225c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002260:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002264:	4303      	orrs	r3, r0
 8002266:	430b      	orrs	r3, r1
 8002268:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800226a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002274:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002276:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002278:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800227c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800227e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002282:	e77f      	b.n	8002184 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002284:	68a5      	ldr	r5, [r4, #8]
 8002286:	b955      	cbnz	r5, 800229e <HAL_I2C_Init+0x122>
 8002288:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800228c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	b17b      	cbz	r3, 80022b8 <HAL_I2C_Init+0x13c>
 8002298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229c:	e7c9      	b.n	8002232 <HAL_I2C_Init+0xb6>
 800229e:	2519      	movs	r5, #25
 80022a0:	436b      	muls	r3, r5
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	b123      	cbz	r3, 80022b8 <HAL_I2C_Init+0x13c>
 80022ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b2:	e7be      	b.n	8002232 <HAL_I2C_Init+0xb6>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e7bc      	b.n	8002232 <HAL_I2C_Init+0xb6>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e7ba      	b.n	8002232 <HAL_I2C_Init+0xb6>
 80022bc:	000186a0 	.word	0x000186a0
 80022c0:	001e847f 	.word	0x001e847f
 80022c4:	003d08ff 	.word	0x003d08ff
 80022c8:	000f4240 	.word	0x000f4240

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d0:	4605      	mov	r5, r0
 80022d2:	b338      	cbz	r0, 8002324 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d4:	6803      	ldr	r3, [r0, #0]
 80022d6:	07db      	lsls	r3, r3, #31
 80022d8:	d410      	bmi.n	80022fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	079f      	lsls	r7, r3, #30
 80022de:	d45e      	bmi.n	800239e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	0719      	lsls	r1, r3, #28
 80022e4:	f100 8095 	bmi.w	8002412 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	075a      	lsls	r2, r3, #29
 80022ec:	f100 80c1 	bmi.w	8002472 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f0:	69e8      	ldr	r0, [r5, #28]
 80022f2:	2800      	cmp	r0, #0
 80022f4:	f040 812c 	bne.w	8002550 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80022f8:	2000      	movs	r0, #0
 80022fa:	e029      	b.n	8002350 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022fc:	4c90      	ldr	r4, [pc, #576]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b04      	cmp	r3, #4
 8002306:	d007      	beq.n	8002318 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d10a      	bne.n	8002328 <HAL_RCC_OscConfig+0x5c>
 8002312:	6863      	ldr	r3, [r4, #4]
 8002314:	03de      	lsls	r6, r3, #15
 8002316:	d507      	bpl.n	8002328 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	039c      	lsls	r4, r3, #14
 800231c:	d5dd      	bpl.n	80022da <HAL_RCC_OscConfig+0xe>
 800231e:	686b      	ldr	r3, [r5, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1da      	bne.n	80022da <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002324:	2001      	movs	r0, #1
 8002326:	e013      	b.n	8002350 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002328:	686b      	ldr	r3, [r5, #4]
 800232a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232e:	d112      	bne.n	8002356 <HAL_RCC_OscConfig+0x8a>
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002336:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002338:	f7ff fa3c 	bl	80017b4 <HAL_GetTick>
 800233c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	0398      	lsls	r0, r3, #14
 8002342:	d4ca      	bmi.n	80022da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7ff fa36 	bl	80017b4 <HAL_GetTick>
 8002348:	1b80      	subs	r0, r0, r6
 800234a:	2864      	cmp	r0, #100	; 0x64
 800234c:	d9f7      	bls.n	800233e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800234e:	2003      	movs	r0, #3
}
 8002350:	b002      	add	sp, #8
 8002352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002356:	b99b      	cbnz	r3, 8002380 <HAL_RCC_OscConfig+0xb4>
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6023      	str	r3, [r4, #0]
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002366:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002368:	f7ff fa24 	bl	80017b4 <HAL_GetTick>
 800236c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	0399      	lsls	r1, r3, #14
 8002372:	d5b2      	bpl.n	80022da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7ff fa1e 	bl	80017b4 <HAL_GetTick>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	2864      	cmp	r0, #100	; 0x64
 800237c:	d9f7      	bls.n	800236e <HAL_RCC_OscConfig+0xa2>
 800237e:	e7e6      	b.n	800234e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	d103      	bne.n	8002390 <HAL_RCC_OscConfig+0xc4>
 8002388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	e7cf      	b.n	8002330 <HAL_RCC_OscConfig+0x64>
 8002390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239c:	e7cb      	b.n	8002336 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4c68      	ldr	r4, [pc, #416]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80023a0:	6863      	ldr	r3, [r4, #4]
 80023a2:	f013 0f0c 	tst.w	r3, #12
 80023a6:	d007      	beq.n	80023b8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023a8:	6863      	ldr	r3, [r4, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d110      	bne.n	80023d4 <HAL_RCC_OscConfig+0x108>
 80023b2:	6863      	ldr	r3, [r4, #4]
 80023b4:	03da      	lsls	r2, r3, #15
 80023b6:	d40d      	bmi.n	80023d4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	079b      	lsls	r3, r3, #30
 80023bc:	d502      	bpl.n	80023c4 <HAL_RCC_OscConfig+0xf8>
 80023be:	692b      	ldr	r3, [r5, #16]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d1af      	bne.n	8002324 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	696a      	ldr	r2, [r5, #20]
 80023c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	e785      	b.n	80022e0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d4:	692a      	ldr	r2, [r5, #16]
 80023d6:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <HAL_RCC_OscConfig+0x278>)
 80023d8:	b16a      	cbz	r2, 80023f6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023de:	f7ff f9e9 	bl	80017b4 <HAL_GetTick>
 80023e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	079f      	lsls	r7, r3, #30
 80023e8:	d4ec      	bmi.n	80023c4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff f9e3 	bl	80017b4 <HAL_GetTick>
 80023ee:	1b80      	subs	r0, r0, r6
 80023f0:	2802      	cmp	r0, #2
 80023f2:	d9f7      	bls.n	80023e4 <HAL_RCC_OscConfig+0x118>
 80023f4:	e7ab      	b.n	800234e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80023f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023f8:	f7ff f9dc 	bl	80017b4 <HAL_GetTick>
 80023fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	0798      	lsls	r0, r3, #30
 8002402:	f57f af6d 	bpl.w	80022e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff f9d5 	bl	80017b4 <HAL_GetTick>
 800240a:	1b80      	subs	r0, r0, r6
 800240c:	2802      	cmp	r0, #2
 800240e:	d9f6      	bls.n	80023fe <HAL_RCC_OscConfig+0x132>
 8002410:	e79d      	b.n	800234e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	69aa      	ldr	r2, [r5, #24]
 8002414:	4e4a      	ldr	r6, [pc, #296]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002416:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <HAL_RCC_OscConfig+0x278>)
 8002418:	b1e2      	cbz	r2, 8002454 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800241a:	2201      	movs	r2, #1
 800241c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002420:	f7ff f9c8 	bl	80017b4 <HAL_GetTick>
 8002424:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002428:	079b      	lsls	r3, r3, #30
 800242a:	d50d      	bpl.n	8002448 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800242c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002430:	4b45      	ldr	r3, [pc, #276]	; (8002548 <HAL_RCC_OscConfig+0x27c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fbb3 f3f2 	udiv	r3, r3, r2
 8002438:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800243a:	bf00      	nop
  }
  while (Delay --);
 800243c:	9b01      	ldr	r3, [sp, #4]
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	9201      	str	r2, [sp, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <HAL_RCC_OscConfig+0x16e>
 8002446:	e74f      	b.n	80022e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7ff f9b4 	bl	80017b4 <HAL_GetTick>
 800244c:	1b00      	subs	r0, r0, r4
 800244e:	2802      	cmp	r0, #2
 8002450:	d9e9      	bls.n	8002426 <HAL_RCC_OscConfig+0x15a>
 8002452:	e77c      	b.n	800234e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002454:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002458:	f7ff f9ac 	bl	80017b4 <HAL_GetTick>
 800245c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002460:	079f      	lsls	r7, r3, #30
 8002462:	f57f af41 	bpl.w	80022e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7ff f9a5 	bl	80017b4 <HAL_GetTick>
 800246a:	1b00      	subs	r0, r0, r4
 800246c:	2802      	cmp	r0, #2
 800246e:	d9f6      	bls.n	800245e <HAL_RCC_OscConfig+0x192>
 8002470:	e76d      	b.n	800234e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4c33      	ldr	r4, [pc, #204]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002474:	69e3      	ldr	r3, [r4, #28]
 8002476:	00d8      	lsls	r0, r3, #3
 8002478:	d424      	bmi.n	80024c4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800247a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	69e3      	ldr	r3, [r4, #28]
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	61e3      	str	r3, [r4, #28]
 8002484:	69e3      	ldr	r3, [r4, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248e:	4e2f      	ldr	r6, [pc, #188]	; (800254c <HAL_RCC_OscConfig+0x280>)
 8002490:	6833      	ldr	r3, [r6, #0]
 8002492:	05d9      	lsls	r1, r3, #23
 8002494:	d518      	bpl.n	80024c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002496:	68eb      	ldr	r3, [r5, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d126      	bne.n	80024ea <HAL_RCC_OscConfig+0x21e>
 800249c:	6a23      	ldr	r3, [r4, #32]
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80024a4:	f7ff f986 	bl	80017b4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	6a23      	ldr	r3, [r4, #32]
 80024b0:	079b      	lsls	r3, r3, #30
 80024b2:	d53f      	bpl.n	8002534 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80024b4:	2f00      	cmp	r7, #0
 80024b6:	f43f af1b 	beq.w	80022f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	69e3      	ldr	r3, [r4, #28]
 80024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61e3      	str	r3, [r4, #28]
 80024c2:	e715      	b.n	80022f0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80024c4:	2700      	movs	r7, #0
 80024c6:	e7e2      	b.n	800248e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c8:	6833      	ldr	r3, [r6, #0]
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80024d0:	f7ff f970 	bl	80017b4 <HAL_GetTick>
 80024d4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d6:	6833      	ldr	r3, [r6, #0]
 80024d8:	05da      	lsls	r2, r3, #23
 80024da:	d4dc      	bmi.n	8002496 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7ff f96a 	bl	80017b4 <HAL_GetTick>
 80024e0:	eba0 0008 	sub.w	r0, r0, r8
 80024e4:	2864      	cmp	r0, #100	; 0x64
 80024e6:	d9f6      	bls.n	80024d6 <HAL_RCC_OscConfig+0x20a>
 80024e8:	e731      	b.n	800234e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	b9ab      	cbnz	r3, 8002518 <HAL_RCC_OscConfig+0x24c>
 80024ec:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6223      	str	r3, [r4, #32]
 80024f8:	6a23      	ldr	r3, [r4, #32]
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002500:	f7ff f958 	bl	80017b4 <HAL_GetTick>
 8002504:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002506:	6a23      	ldr	r3, [r4, #32]
 8002508:	0798      	lsls	r0, r3, #30
 800250a:	d5d3      	bpl.n	80024b4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7ff f952 	bl	80017b4 <HAL_GetTick>
 8002510:	1b80      	subs	r0, r0, r6
 8002512:	4540      	cmp	r0, r8
 8002514:	d9f7      	bls.n	8002506 <HAL_RCC_OscConfig+0x23a>
 8002516:	e71a      	b.n	800234e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	2b05      	cmp	r3, #5
 800251a:	6a23      	ldr	r3, [r4, #32]
 800251c:	d103      	bne.n	8002526 <HAL_RCC_OscConfig+0x25a>
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6223      	str	r3, [r4, #32]
 8002524:	e7ba      	b.n	800249c <HAL_RCC_OscConfig+0x1d0>
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6223      	str	r3, [r4, #32]
 800252c:	6a23      	ldr	r3, [r4, #32]
 800252e:	f023 0304 	bic.w	r3, r3, #4
 8002532:	e7b6      	b.n	80024a2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7ff f93e 	bl	80017b4 <HAL_GetTick>
 8002538:	1b80      	subs	r0, r0, r6
 800253a:	4540      	cmp	r0, r8
 800253c:	d9b7      	bls.n	80024ae <HAL_RCC_OscConfig+0x1e2>
 800253e:	e706      	b.n	800234e <HAL_RCC_OscConfig+0x82>
 8002540:	40021000 	.word	0x40021000
 8002544:	42420000 	.word	0x42420000
 8002548:	20000000 	.word	0x20000000
 800254c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002550:	4c2a      	ldr	r4, [pc, #168]	; (80025fc <HAL_RCC_OscConfig+0x330>)
 8002552:	6863      	ldr	r3, [r4, #4]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b08      	cmp	r3, #8
 800255a:	d03e      	beq.n	80025da <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255c:	2200      	movs	r2, #0
 800255e:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_OscConfig+0x334>)
 8002560:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002562:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002564:	d12c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002566:	f7ff f925 	bl	80017b4 <HAL_GetTick>
 800256a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	0199      	lsls	r1, r3, #6
 8002570:	d420      	bmi.n	80025b4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002572:	6a2b      	ldr	r3, [r5, #32]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d105      	bne.n	8002586 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257a:	6862      	ldr	r2, [r4, #4]
 800257c:	68a9      	ldr	r1, [r5, #8]
 800257e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002582:	430a      	orrs	r2, r1
 8002584:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002586:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002588:	6862      	ldr	r2, [r4, #4]
 800258a:	430b      	orrs	r3, r1
 800258c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002590:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002592:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002594:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_RCC_OscConfig+0x334>)
 8002598:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800259a:	f7ff f90b 	bl	80017b4 <HAL_GetTick>
 800259e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	019a      	lsls	r2, r3, #6
 80025a4:	f53f aea8 	bmi.w	80022f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7ff f904 	bl	80017b4 <HAL_GetTick>
 80025ac:	1b40      	subs	r0, r0, r5
 80025ae:	2802      	cmp	r0, #2
 80025b0:	d9f6      	bls.n	80025a0 <HAL_RCC_OscConfig+0x2d4>
 80025b2:	e6cc      	b.n	800234e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff f8fe 	bl	80017b4 <HAL_GetTick>
 80025b8:	1b80      	subs	r0, r0, r6
 80025ba:	2802      	cmp	r0, #2
 80025bc:	d9d6      	bls.n	800256c <HAL_RCC_OscConfig+0x2a0>
 80025be:	e6c6      	b.n	800234e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80025c0:	f7ff f8f8 	bl	80017b4 <HAL_GetTick>
 80025c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	019b      	lsls	r3, r3, #6
 80025ca:	f57f ae95 	bpl.w	80022f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7ff f8f1 	bl	80017b4 <HAL_GetTick>
 80025d2:	1b40      	subs	r0, r0, r5
 80025d4:	2802      	cmp	r0, #2
 80025d6:	d9f6      	bls.n	80025c6 <HAL_RCC_OscConfig+0x2fa>
 80025d8:	e6b9      	b.n	800234e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025da:	2801      	cmp	r0, #1
 80025dc:	f43f aeb8 	beq.w	8002350 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80025e0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	6a2a      	ldr	r2, [r5, #32]
 80025e4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80025e8:	4291      	cmp	r1, r2
 80025ea:	f47f ae9b 	bne.w	8002324 <HAL_RCC_OscConfig+0x58>
 80025ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f43f ae7f 	beq.w	80022f8 <HAL_RCC_OscConfig+0x2c>
 80025fa:	e693      	b.n	8002324 <HAL_RCC_OscConfig+0x58>
 80025fc:	40021000 	.word	0x40021000
 8002600:	42420000 	.word	0x42420000

08002604 <HAL_RCC_GetSysClockFreq>:
{
 8002604:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002608:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800260a:	ac02      	add	r4, sp, #8
 800260c:	f103 0510 	add.w	r5, r3, #16
 8002610:	4622      	mov	r2, r4
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	3308      	adds	r3, #8
 8002618:	c203      	stmia	r2!, {r0, r1}
 800261a:	42ab      	cmp	r3, r5
 800261c:	4614      	mov	r4, r2
 800261e:	d1f7      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002620:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002624:	4911      	ldr	r1, [pc, #68]	; (800266c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002626:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800262a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800262c:	f003 020c 	and.w	r2, r3, #12
 8002630:	2a08      	cmp	r2, #8
 8002632:	d117      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002634:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002638:	3218      	adds	r2, #24
 800263a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800263c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800263e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002642:	d50c      	bpl.n	800265e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002644:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002648:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800264e:	3318      	adds	r3, #24
 8002650:	446b      	add	r3, sp
 8002652:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002656:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800265a:	b007      	add	sp, #28
 800265c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetSysClockFreq+0x70>)
 8002660:	4358      	muls	r0, r3
 8002662:	e7fa      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002666:	e7f8      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x56>
 8002668:	080052dc 	.word	0x080052dc
 800266c:	40021000 	.word	0x40021000
 8002670:	007a1200 	.word	0x007a1200
 8002674:	003d0900 	.word	0x003d0900

08002678 <HAL_RCC_ClockConfig>:
{
 8002678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800267c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800267e:	4604      	mov	r4, r0
 8002680:	b910      	cbnz	r0, 8002688 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002682:	2001      	movs	r0, #1
}
 8002684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4a44      	ldr	r2, [pc, #272]	; (800279c <HAL_RCC_ClockConfig+0x124>)
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	428b      	cmp	r3, r1
 8002692:	d328      	bcc.n	80026e6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	6821      	ldr	r1, [r4, #0]
 8002696:	078e      	lsls	r6, r1, #30
 8002698:	d430      	bmi.n	80026fc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	07ca      	lsls	r2, r1, #31
 800269c:	d443      	bmi.n	8002726 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800269e:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_RCC_ClockConfig+0x124>)
 80026a0:	6813      	ldr	r3, [r2, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	42ab      	cmp	r3, r5
 80026a8:	d865      	bhi.n	8002776 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	4d3c      	ldr	r5, [pc, #240]	; (80027a0 <HAL_RCC_ClockConfig+0x128>)
 80026ae:	f012 0f04 	tst.w	r2, #4
 80026b2:	d16c      	bne.n	800278e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	0713      	lsls	r3, r2, #28
 80026b6:	d506      	bpl.n	80026c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026b8:	686b      	ldr	r3, [r5, #4]
 80026ba:	6922      	ldr	r2, [r4, #16]
 80026bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026c4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026c6:	f7ff ff9d 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80026ca:	686b      	ldr	r3, [r5, #4]
 80026cc:	4a35      	ldr	r2, [pc, #212]	; (80027a4 <HAL_RCC_ClockConfig+0x12c>)
 80026ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	40d8      	lsrs	r0, r3
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_ClockConfig+0x130>)
 80026d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80026da:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x134>)
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	f7ff f827 	bl	8001730 <HAL_InitTick>
  return HAL_OK;
 80026e2:	2000      	movs	r0, #0
 80026e4:	e7ce      	b.n	8002684 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	6813      	ldr	r3, [r2, #0]
 80026e8:	f023 0307 	bic.w	r3, r3, #7
 80026ec:	430b      	orrs	r3, r1
 80026ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f0:	6813      	ldr	r3, [r2, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	428b      	cmp	r3, r1
 80026f8:	d1c3      	bne.n	8002682 <HAL_RCC_ClockConfig+0xa>
 80026fa:	e7cb      	b.n	8002694 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_ClockConfig+0x128>)
 80026fe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002702:	bf1e      	ittt	ne
 8002704:	685a      	ldrne	r2, [r3, #4]
 8002706:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800270a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800270e:	bf42      	ittt	mi
 8002710:	685a      	ldrmi	r2, [r3, #4]
 8002712:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002716:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68a0      	ldr	r0, [r4, #8]
 800271c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002720:	4302      	orrs	r2, r0
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	e7b9      	b.n	800269a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	6862      	ldr	r2, [r4, #4]
 8002728:	4e1d      	ldr	r6, [pc, #116]	; (80027a0 <HAL_RCC_ClockConfig+0x128>)
 800272a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	d11a      	bne.n	8002766 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002730:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	d0a5      	beq.n	8002682 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002736:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273c:	f023 0303 	bic.w	r3, r3, #3
 8002740:	4313      	orrs	r3, r2
 8002742:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002744:	f7ff f836 	bl	80017b4 <HAL_GetTick>
 8002748:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	6873      	ldr	r3, [r6, #4]
 800274c:	6862      	ldr	r2, [r4, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002756:	d0a2      	beq.n	800269e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7ff f82c 	bl	80017b4 <HAL_GetTick>
 800275c:	1bc0      	subs	r0, r0, r7
 800275e:	4540      	cmp	r0, r8
 8002760:	d9f3      	bls.n	800274a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002762:	2003      	movs	r0, #3
 8002764:	e78e      	b.n	8002684 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	2a02      	cmp	r2, #2
 8002768:	d102      	bne.n	8002770 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800276e:	e7e1      	b.n	8002734 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	f013 0f02 	tst.w	r3, #2
 8002774:	e7de      	b.n	8002734 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f023 0307 	bic.w	r3, r3, #7
 800277c:	432b      	orrs	r3, r5
 800277e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	42ab      	cmp	r3, r5
 8002788:	f47f af7b 	bne.w	8002682 <HAL_RCC_ClockConfig+0xa>
 800278c:	e78d      	b.n	80026aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278e:	686b      	ldr	r3, [r5, #4]
 8002790:	68e1      	ldr	r1, [r4, #12]
 8002792:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002796:	430b      	orrs	r3, r1
 8002798:	606b      	str	r3, [r5, #4]
 800279a:	e78b      	b.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
 800279c:	40022000 	.word	0x40022000
 80027a0:	40021000 	.word	0x40021000
 80027a4:	080052c4 	.word	0x080052c4
 80027a8:	20000000 	.word	0x20000000
 80027ac:	20000008 	.word	0x20000008

080027b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	4a03      	ldr	r2, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80027be:	6810      	ldr	r0, [r2, #0]
}
 80027c0:	40d8      	lsrs	r0, r3
 80027c2:	4770      	bx	lr
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080052d4 	.word	0x080052d4
 80027cc:	20000000 	.word	0x20000000

080027d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	4a03      	ldr	r2, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80027de:	6810      	ldr	r0, [r2, #0]
}
 80027e0:	40d8      	lsrs	r0, r3
 80027e2:	4770      	bx	lr
 80027e4:	40021000 	.word	0x40021000
 80027e8:	080052d4 	.word	0x080052d4
 80027ec:	20000000 	.word	0x20000000

080027f0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027f0:	6803      	ldr	r3, [r0, #0]
{
 80027f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027f6:	07d9      	lsls	r1, r3, #31
{
 80027f8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027fa:	d520      	bpl.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fc:	4c36      	ldr	r4, [pc, #216]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80027fe:	69e3      	ldr	r3, [r4, #28]
 8002800:	00da      	lsls	r2, r3, #3
 8002802:	d432      	bmi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002804:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	69e3      	ldr	r3, [r4, #28]
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	61e3      	str	r3, [r4, #28]
 800280e:	69e3      	ldr	r3, [r4, #28]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	4f30      	ldr	r7, [pc, #192]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	d526      	bpl.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002820:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002822:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002826:	d136      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002828:	6a23      	ldr	r3, [r4, #32]
 800282a:	686a      	ldr	r2, [r5, #4]
 800282c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002830:	4313      	orrs	r3, r2
 8002832:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002834:	b11e      	cbz	r6, 800283e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	69e3      	ldr	r3, [r4, #28]
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800283e:	6828      	ldr	r0, [r5, #0]
 8002840:	0783      	lsls	r3, r0, #30
 8002842:	d506      	bpl.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002844:	4924      	ldr	r1, [pc, #144]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002846:	68ab      	ldr	r3, [r5, #8]
 8002848:	684a      	ldr	r2, [r1, #4]
 800284a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800284e:	431a      	orrs	r2, r3
 8002850:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002852:	f010 0010 	ands.w	r0, r0, #16
 8002856:	d01b      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800285a:	68e9      	ldr	r1, [r5, #12]
 800285c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800285e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002860:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002864:	430b      	orrs	r3, r1
 8002866:	6053      	str	r3, [r2, #4]
 8002868:	e012      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800286a:	2600      	movs	r6, #0
 800286c:	e7d4      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002876:	f7fe ff9d 	bl	80017b4 <HAL_GetTick>
 800287a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	05d8      	lsls	r0, r3, #23
 8002880:	d4ce      	bmi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe ff97 	bl	80017b4 <HAL_GetTick>
 8002886:	eba0 0008 	sub.w	r0, r0, r8
 800288a:	2864      	cmp	r0, #100	; 0x64
 800288c:	d9f6      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800288e:	2003      	movs	r0, #3
}
 8002890:	b002      	add	sp, #8
 8002892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002896:	686a      	ldr	r2, [r5, #4]
 8002898:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800289c:	429a      	cmp	r2, r3
 800289e:	d0c3      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80028a0:	2001      	movs	r0, #1
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80028a6:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028aa:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028b0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80028b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028b6:	07d9      	lsls	r1, r3, #31
 80028b8:	d5b6      	bpl.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80028ba:	f7fe ff7b 	bl	80017b4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80028c2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	6a23      	ldr	r3, [r4, #32]
 80028c6:	079a      	lsls	r2, r3, #30
 80028c8:	d4ae      	bmi.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe ff73 	bl	80017b4 <HAL_GetTick>
 80028ce:	1bc0      	subs	r0, r0, r7
 80028d0:	4540      	cmp	r0, r8
 80028d2:	d9f7      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028d4:	e7db      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42420000 	.word	0x42420000

080028e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80028e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80028e8:	461c      	mov	r4, r3
 80028ea:	4616      	mov	r6, r2
 80028ec:	460f      	mov	r7, r1
 80028ee:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028f0:	f7fe ff60 	bl	80017b4 <HAL_GetTick>
 80028f4:	4434      	add	r4, r6
 80028f6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80028f8:	f7fe ff5c 	bl	80017b4 <HAL_GetTick>
 80028fc:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002906:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002908:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800290a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290c:	6893      	ldr	r3, [r2, #8]
 800290e:	ea37 0303 	bics.w	r3, r7, r3
 8002912:	d001      	beq.n	8002918 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002914:	2000      	movs	r0, #0
 8002916:	e02e      	b.n	8002976 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002918:	1c73      	adds	r3, r6, #1
 800291a:	d0f7      	beq.n	800290c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800291c:	f7fe ff4a 	bl	80017b4 <HAL_GetTick>
 8002920:	eba0 0008 	sub.w	r0, r0, r8
 8002924:	42a0      	cmp	r0, r4
 8002926:	d329      	bcc.n	800297c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002930:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002932:	686a      	ldr	r2, [r5, #4]
 8002934:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002938:	d10a      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 800293a:	68aa      	ldr	r2, [r5, #8]
 800293c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002940:	d002      	beq.n	8002948 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002942:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002946:	d103      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002950:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002952:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002956:	d107      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002966:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002968:	2301      	movs	r3, #1
 800296a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800296e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002970:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002972:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002976:	b002      	add	sp, #8
 8002978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 800297c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800297e:	2b00      	cmp	r3, #0
      count--;
 8002980:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002982:	bf08      	it	eq
 8002984:	2400      	moveq	r4, #0
      count--;
 8002986:	3b01      	subs	r3, #1
 8002988:	e7be      	b.n	8002908 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000

08002990 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b510      	push	{r4, lr}
 8002992:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002994:	460a      	mov	r2, r1
 8002996:	2180      	movs	r1, #128	; 0x80
{
 8002998:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800299a:	f7ff ffa3 	bl	80028e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800299e:	b120      	cbz	r0, 80029aa <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80029a0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029a4:	f043 0320 	orr.w	r3, r3, #32
 80029a8:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80029aa:	bd10      	pop	{r4, pc}

080029ac <HAL_SPI_Init>:
{
 80029ac:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80029ae:	4604      	mov	r4, r0
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d051      	beq.n	8002a58 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d14a      	bne.n	8002a50 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ba:	6842      	ldr	r2, [r0, #4]
 80029bc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80029c0:	d000      	beq.n	80029c4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029c8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80029cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029d0:	b923      	cbnz	r3, 80029dc <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80029d2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80029d4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80029d8:	f7fe fd06 	bl	80013e8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80029dc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80029de:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80029e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80029e4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80029e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ec:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029ee:	6863      	ldr	r3, [r4, #4]
 80029f0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80029f4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80029f8:	4303      	orrs	r3, r0
 80029fa:	68e0      	ldr	r0, [r4, #12]
 80029fc:	69a1      	ldr	r1, [r4, #24]
 80029fe:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002a02:	4303      	orrs	r3, r0
 8002a04:	6920      	ldr	r0, [r4, #16]
 8002a06:	f000 0002 	and.w	r0, r0, #2
 8002a0a:	4303      	orrs	r3, r0
 8002a0c:	6960      	ldr	r0, [r4, #20]
 8002a0e:	f000 0001 	and.w	r0, r0, #1
 8002a12:	4303      	orrs	r3, r0
 8002a14:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002a18:	4303      	orrs	r3, r0
 8002a1a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a1c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a1e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002a22:	4303      	orrs	r3, r0
 8002a24:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a26:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a2a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a32:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002a36:	4303      	orrs	r3, r0
 8002a38:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a3a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a3c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a3e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a44:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002a46:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a48:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002a4e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a50:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a56:	e7b5      	b.n	80029c4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002a58:	2001      	movs	r0, #1
 8002a5a:	e7f8      	b.n	8002a4e <HAL_SPI_Init+0xa2>

08002a5c <HAL_SPI_Transmit>:
{
 8002a5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a60:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002a62:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002a66:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002a68:	2b01      	cmp	r3, #1
{
 8002a6a:	460d      	mov	r5, r1
 8002a6c:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8002a6e:	f000 80a0 	beq.w	8002bb2 <HAL_SPI_Transmit+0x156>
 8002a72:	2301      	movs	r3, #1
 8002a74:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002a78:	f7fe fe9c 	bl	80017b4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a7c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002a80:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	b2d8      	uxtb	r0, r3
 8002a86:	f040 8092 	bne.w	8002bae <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	d05d      	beq.n	8002b4a <HAL_SPI_Transmit+0xee>
 8002a8e:	2f00      	cmp	r7, #0
 8002a90:	d05b      	beq.n	8002b4a <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a92:	2303      	movs	r3, #3
 8002a94:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a98:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9a:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8002aa2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002aa6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aa8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aaa:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aac:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aae:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8002ab0:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002ab2:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab4:	d107      	bne.n	8002ac6 <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac6:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac8:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aca:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002acc:	bf5e      	ittt	pl
 8002ace:	681a      	ldrpl	r2, [r3, #0]
 8002ad0:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002ad4:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ad6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ada:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002adc:	d141      	bne.n	8002b62 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ade:	b10a      	cbz	r2, 8002ae4 <HAL_SPI_Transmit+0x88>
 8002ae0:	2f01      	cmp	r7, #1
 8002ae2:	d107      	bne.n	8002af4 <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae4:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002ae8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aea:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002aec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002af4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b9a3      	cbnz	r3, 8002b24 <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002afa:	4642      	mov	r2, r8
 8002afc:	4631      	mov	r1, r6
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7ff ff46 	bl	8002990 <SPI_EndRxTxTransaction>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d14f      	bne.n	8002ba8 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b08:	68a3      	ldr	r3, [r4, #8]
 8002b0a:	b933      	cbnz	r3, 8002b1a <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	9201      	str	r2, [sp, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002b1c:	3800      	subs	r0, #0
 8002b1e:	bf18      	it	ne
 8002b20:	2001      	movne	r0, #1
error:
 8002b22:	e012      	b.n	8002b4a <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	6893      	ldr	r3, [r2, #8]
 8002b28:	0798      	lsls	r0, r3, #30
 8002b2a:	d505      	bpl.n	8002b38 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b2e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b32:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b34:	6323      	str	r3, [r4, #48]	; 0x30
 8002b36:	e7d9      	b.n	8002aec <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b38:	f7fe fe3c 	bl	80017b4 <HAL_GetTick>
 8002b3c:	eba0 0008 	sub.w	r0, r0, r8
 8002b40:	42b0      	cmp	r0, r6
 8002b42:	d30b      	bcc.n	8002b5c <HAL_SPI_Transmit+0x100>
 8002b44:	1c71      	adds	r1, r6, #1
 8002b46:	d0d5      	beq.n	8002af4 <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 8002b48:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b50:	2300      	movs	r3, #0
 8002b52:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b56:	b002      	add	sp, #8
 8002b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5c:	2e00      	cmp	r6, #0
 8002b5e:	d1c9      	bne.n	8002af4 <HAL_SPI_Transmit+0x98>
 8002b60:	e7f2      	b.n	8002b48 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b62:	b10a      	cbz	r2, 8002b68 <HAL_SPI_Transmit+0x10c>
 8002b64:	2f01      	cmp	r7, #1
 8002b66:	d108      	bne.n	8002b7a <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b68:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b6a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b6e:	3301      	adds	r3, #1
 8002b70:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002b7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0bb      	beq.n	8002afa <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	0792      	lsls	r2, r2, #30
 8002b88:	d502      	bpl.n	8002b90 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	e7ec      	b.n	8002b6a <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b90:	f7fe fe10 	bl	80017b4 <HAL_GetTick>
 8002b94:	eba0 0008 	sub.w	r0, r0, r8
 8002b98:	42b0      	cmp	r0, r6
 8002b9a:	d302      	bcc.n	8002ba2 <HAL_SPI_Transmit+0x146>
 8002b9c:	1c73      	adds	r3, r6, #1
 8002b9e:	d0ec      	beq.n	8002b7a <HAL_SPI_Transmit+0x11e>
 8002ba0:	e7d2      	b.n	8002b48 <HAL_SPI_Transmit+0xec>
 8002ba2:	2e00      	cmp	r6, #0
 8002ba4:	d1e9      	bne.n	8002b7a <HAL_SPI_Transmit+0x11e>
 8002ba6:	e7cf      	b.n	8002b48 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	6563      	str	r3, [r4, #84]	; 0x54
 8002bac:	e7ac      	b.n	8002b08 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8002bae:	2002      	movs	r0, #2
 8002bb0:	e7cb      	b.n	8002b4a <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002bb2:	2002      	movs	r0, #2
 8002bb4:	e7cf      	b.n	8002b56 <HAL_SPI_Transmit+0xfa>

08002bb6 <HAL_SPI_TransmitReceive>:
{
 8002bb6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bba:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002bbc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002bc0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002bc2:	2b01      	cmp	r3, #1
{
 8002bc4:	460d      	mov	r5, r1
 8002bc6:	4691      	mov	r9, r2
 8002bc8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002bca:	f000 80e6 	beq.w	8002d9a <HAL_SPI_TransmitReceive+0x1e4>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002bd4:	f7fe fdee 	bl	80017b4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002bd8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002bdc:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bde:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8002be0:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8002be2:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002be4:	d00a      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x46>
 8002be6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002bea:	f040 80d4 	bne.w	8002d96 <HAL_SPI_TransmitReceive+0x1e0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bee:	68a3      	ldr	r3, [r4, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 80d0 	bne.w	8002d96 <HAL_SPI_TransmitReceive+0x1e0>
 8002bf6:	2904      	cmp	r1, #4
 8002bf8:	f040 80cd 	bne.w	8002d96 <HAL_SPI_TransmitReceive+0x1e0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d040      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0xcc>
 8002c00:	f1b9 0f00 	cmp.w	r9, #0
 8002c04:	d03d      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0xcc>
 8002c06:	2e00      	cmp	r6, #0
 8002c08:	d03b      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c0a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c0e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c12:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c14:	bf1c      	itt	ne
 8002c16:	2305      	movne	r3, #5
 8002c18:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8002c20:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c24:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002c26:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002c28:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c2a:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8002c2c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c2e:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8002c30:	bf58      	it	pl
 8002c32:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c34:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002c36:	bf58      	it	pl
 8002c38:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002c3c:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002c3e:	bf58      	it	pl
 8002c40:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c42:	68e1      	ldr	r1, [r4, #12]
 8002c44:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002c48:	d152      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c4a:	b10a      	cbz	r2, 8002c50 <HAL_SPI_TransmitReceive+0x9a>
 8002c4c:	2e01      	cmp	r6, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c50:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002c54:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002c56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c58:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002c60:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b973      	cbnz	r3, 8002c86 <HAL_SPI_TransmitReceive+0xd0>
 8002c68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b95b      	cbnz	r3, 8002c86 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c6e:	4642      	mov	r2, r8
 8002c70:	4639      	mov	r1, r7
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7ff fe8c 	bl	8002990 <SPI_EndRxTxTransaction>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	f000 8081 	beq.w	8002d80 <HAL_SPI_TransmitReceive+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
 8002c84:	e02b      	b.n	8002cde <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c86:	6821      	ldr	r1, [r4, #0]
 8002c88:	688b      	ldr	r3, [r1, #8]
 8002c8a:	079e      	lsls	r6, r3, #30
 8002c8c:	d50d      	bpl.n	8002caa <HAL_SPI_TransmitReceive+0xf4>
 8002c8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b153      	cbz	r3, 8002caa <HAL_SPI_TransmitReceive+0xf4>
 8002c94:	b14d      	cbz	r5, 8002caa <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8002c96:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c9a:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002c9e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ca2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002caa:	688a      	ldr	r2, [r1, #8]
 8002cac:	f012 0201 	ands.w	r2, r2, #1
 8002cb0:	d00c      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x116>
 8002cb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	b14b      	cbz	r3, 8002ccc <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8002cb8:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cba:	68c9      	ldr	r1, [r1, #12]
 8002cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cbe:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cc2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ccc:	f7fe fd72 	bl	80017b4 <HAL_GetTick>
 8002cd0:	eba0 0008 	sub.w	r0, r0, r8
 8002cd4:	42b8      	cmp	r0, r7
 8002cd6:	d3c4      	bcc.n	8002c62 <HAL_SPI_TransmitReceive+0xac>
 8002cd8:	1c78      	adds	r0, r7, #1
 8002cda:	d0c2      	beq.n	8002c62 <HAL_SPI_TransmitReceive+0xac>
        errorcode = HAL_TIMEOUT;
 8002cdc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002cea:	b003      	add	sp, #12
 8002cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf0:	b10a      	cbz	r2, 8002cf6 <HAL_SPI_TransmitReceive+0x140>
 8002cf2:	2e01      	cmp	r6, #1
 8002cf4:	d108      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cf6:	782a      	ldrb	r2, [r5, #0]
 8002cf8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002d00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002d08:	2501      	movs	r5, #1
 8002d0a:	e02d      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6893      	ldr	r3, [r2, #8]
 8002d10:	0799      	lsls	r1, r3, #30
 8002d12:	d50e      	bpl.n	8002d32 <HAL_SPI_TransmitReceive+0x17c>
 8002d14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	b15b      	cbz	r3, 8002d32 <HAL_SPI_TransmitReceive+0x17c>
 8002d1a:	b155      	cbz	r5, 8002d32 <HAL_SPI_TransmitReceive+0x17c>
        txallowed = 0U;
 8002d1c:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002d24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d26:	3301      	adds	r3, #1
 8002d28:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002d2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	6891      	ldr	r1, [r2, #8]
 8002d36:	f011 0101 	ands.w	r1, r1, #1
 8002d3a:	d00d      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x1a2>
 8002d3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b153      	cbz	r3, 8002d58 <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 1U;
 8002d42:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002d50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d58:	f7fe fd2c 	bl	80017b4 <HAL_GetTick>
 8002d5c:	eba0 0008 	sub.w	r0, r0, r8
 8002d60:	42b8      	cmp	r0, r7
 8002d62:	d30a      	bcc.n	8002d7a <HAL_SPI_TransmitReceive+0x1c4>
 8002d64:	1c7b      	adds	r3, r7, #1
 8002d66:	d1b9      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x126>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1cd      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x156>
 8002d70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1c9      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x156>
 8002d78:	e779      	b.n	8002c6e <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	d1f4      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x1b2>
 8002d7e:	e7ad      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d80:	68a3      	ldr	r3, [r4, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ab      	bne.n	8002cde <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	9001      	str	r0, [sp, #4]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	9201      	str	r2, [sp, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	9b01      	ldr	r3, [sp, #4]
 8002d94:	e7a3      	b.n	8002cde <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8002d96:	2002      	movs	r0, #2
 8002d98:	e7a1      	b.n	8002cde <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8002d9a:	2002      	movs	r0, #2
 8002d9c:	e7a5      	b.n	8002cea <HAL_SPI_TransmitReceive+0x134>
	...

08002da0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da0:	6a03      	ldr	r3, [r0, #32]
{
 8002da2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002db2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002db6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002db8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002dba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002dbe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dc0:	4d0a      	ldr	r5, [pc, #40]	; (8002dec <TIM_OC1_SetConfig+0x4c>)
 8002dc2:	42a8      	cmp	r0, r5
 8002dc4:	d10b      	bne.n	8002dde <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dc6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002dcc:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dce:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dd2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002dd6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ddc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dde:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002de2:	684a      	ldr	r2, [r1, #4]
 8002de4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de6:	6203      	str	r3, [r0, #32]
}
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00

08002df0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002df0:	6a03      	ldr	r3, [r0, #32]
{
 8002df2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dfe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002e06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002e0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e12:	4d0b      	ldr	r5, [pc, #44]	; (8002e40 <TIM_OC3_SetConfig+0x50>)
 8002e14:	42a8      	cmp	r0, r5
 8002e16:	d10d      	bne.n	8002e34 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e18:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e1e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e22:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e26:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002e2a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e30:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e34:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e36:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e38:	684a      	ldr	r2, [r1, #4]
 8002e3a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	6203      	str	r3, [r0, #32]
}
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	40012c00 	.word	0x40012c00

08002e44 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e44:	6a03      	ldr	r3, [r0, #32]
{
 8002e46:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e56:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e5e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e68:	4d06      	ldr	r5, [pc, #24]	; (8002e84 <TIM_OC4_SetConfig+0x40>)
 8002e6a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e6c:	bf02      	ittt	eq
 8002e6e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e70:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e74:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e78:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e7a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e7c:	684a      	ldr	r2, [r1, #4]
 8002e7e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e80:	6203      	str	r3, [r0, #32]
}
 8002e82:	bd30      	pop	{r4, r5, pc}
 8002e84:	40012c00 	.word	0x40012c00

08002e88 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002e88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d11c      	bne.n	8002eca <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e92:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e98:	6803      	ldr	r3, [r0, #0]
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_TIM_Base_Start+0x2c>
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIM_Base_Start+0x2c>
 8002ea4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <HAL_TIM_Base_Start+0x2c>
 8002eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	2a06      	cmp	r2, #6
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ec6:	2000      	movs	r0, #0
}
 8002ec8:	4770      	bx	lr
    return HAL_ERROR;
 8002eca:	2001      	movs	r0, #1
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40012c00 	.word	0x40012c00

08002ed4 <HAL_TIM_PWM_MspInit>:
 8002ed4:	4770      	bx	lr

08002ed6 <TIM_DMADelayPulseCplt>:
{
 8002ed6:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002eda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002edc:	4282      	cmp	r2, r0
 8002ede:	d10b      	bne.n	8002ef8 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002ee4:	6992      	ldr	r2, [r2, #24]
 8002ee6:	b90a      	cbnz	r2, 8002eec <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	4620      	mov	r0, r4
 8002eee:	f000 ffe7 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	7723      	strb	r3, [r4, #28]
}
 8002ef6:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002efa:	4283      	cmp	r3, r0
 8002efc:	d108      	bne.n	8002f10 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002efe:	2202      	movs	r2, #2
 8002f00:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f1      	bne.n	8002eec <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f0e:	e7ed      	b.n	8002eec <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f12:	4283      	cmp	r3, r0
 8002f14:	d108      	bne.n	8002f28 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f16:	2204      	movs	r2, #4
 8002f18:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e5      	bne.n	8002eec <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	2301      	movs	r3, #1
 8002f22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f26:	e7e1      	b.n	8002eec <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f2a:	4283      	cmp	r3, r0
 8002f2c:	d1de      	bne.n	8002eec <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2e:	2208      	movs	r2, #8
 8002f30:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1d9      	bne.n	8002eec <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002f3e:	e7d5      	b.n	8002eec <TIM_DMADelayPulseCplt+0x16>

08002f40 <TIM_DMADelayPulseHalfCplt>:
{
 8002f40:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f42:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f46:	4283      	cmp	r3, r0
 8002f48:	d107      	bne.n	8002f5a <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4a:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f4c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f000 ffa6 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f54:	2300      	movs	r3, #0
 8002f56:	7723      	strb	r3, [r4, #28]
}
 8002f58:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f5c:	4283      	cmp	r3, r0
 8002f5e:	d101      	bne.n	8002f64 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f60:	2302      	movs	r3, #2
 8002f62:	e7f3      	b.n	8002f4c <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f66:	4283      	cmp	r3, r0
 8002f68:	d101      	bne.n	8002f6e <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e7ee      	b.n	8002f4c <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f70:	4283      	cmp	r3, r0
 8002f72:	d1ec      	bne.n	8002f4e <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f74:	2308      	movs	r3, #8
 8002f76:	e7e9      	b.n	8002f4c <TIM_DMADelayPulseHalfCplt+0xc>

08002f78 <HAL_TIM_ErrorCallback>:
 8002f78:	4770      	bx	lr

08002f7a <TIM_DMAError>:
{
 8002f7a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f80:	4283      	cmp	r3, r0
 8002f82:	d109      	bne.n	8002f98 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7ff fff3 	bl	8002f78 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	2300      	movs	r3, #0
 8002f94:	7723      	strb	r3, [r4, #28]
}
 8002f96:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f9a:	4283      	cmp	r3, r0
 8002f9c:	d105      	bne.n	8002faa <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002fa8:	e7f0      	b.n	8002f8c <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002faa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fac:	4283      	cmp	r3, r0
 8002fae:	f04f 0301 	mov.w	r3, #1
 8002fb2:	d104      	bne.n	8002fbe <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb4:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fba:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	e7e6      	b.n	8002f8c <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fc0:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc2:	bf03      	ittte	eq
 8002fc4:	2208      	moveq	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002fc6:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fca:	7722      	strbeq	r2, [r4, #28]
    htim->State = HAL_TIM_STATE_READY;
 8002fcc:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8002fd0:	e7dc      	b.n	8002f8c <TIM_DMAError+0x12>
	...

08002fd4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002fd6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd8:	4290      	cmp	r0, r2
 8002fda:	d00a      	beq.n	8002ff2 <TIM_Base_SetConfig+0x1e>
 8002fdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0x1e>
 8002fe2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fe6:	4290      	cmp	r0, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0x1e>
 8002fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fee:	4290      	cmp	r0, r2
 8002ff0:	d115      	bne.n	800301e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002ff2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <TIM_Base_SetConfig+0x6c>)
 8002ffc:	4290      	cmp	r0, r2
 8002ffe:	d00a      	beq.n	8003016 <TIM_Base_SetConfig+0x42>
 8003000:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003004:	d007      	beq.n	8003016 <TIM_Base_SetConfig+0x42>
 8003006:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800300a:	4290      	cmp	r0, r2
 800300c:	d003      	beq.n	8003016 <TIM_Base_SetConfig+0x42>
 800300e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003012:	4290      	cmp	r0, r2
 8003014:	d103      	bne.n	800301e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003016:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301e:	694a      	ldr	r2, [r1, #20]
 8003020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003024:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003026:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003028:	688b      	ldr	r3, [r1, #8]
 800302a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800302c:	680b      	ldr	r3, [r1, #0]
 800302e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <TIM_Base_SetConfig+0x6c>)
 8003032:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003034:	bf04      	itt	eq
 8003036:	690b      	ldreq	r3, [r1, #16]
 8003038:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800303a:	2301      	movs	r3, #1
 800303c:	6143      	str	r3, [r0, #20]
}
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00

08003044 <HAL_TIM_Base_Init>:
{
 8003044:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003046:	4604      	mov	r4, r0
 8003048:	b330      	cbz	r0, 8003098 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800304e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003052:	b91b      	cbnz	r3, 800305c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003054:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003058:	f7fe fa20 	bl	800149c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	1d21      	adds	r1, r4, #4
 8003066:	f7ff ffb5 	bl	8002fd4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306a:	2301      	movs	r3, #1
  return HAL_OK;
 800306c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003072:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003076:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800307a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800307e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800308a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800308e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003092:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003096:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003098:	2001      	movs	r0, #1
 800309a:	e7fc      	b.n	8003096 <HAL_TIM_Base_Init+0x52>

0800309c <HAL_TIM_PWM_Init>:
{
 800309c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800309e:	4604      	mov	r4, r0
 80030a0:	b330      	cbz	r0, 80030f0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030aa:	b91b      	cbnz	r3, 80030b4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80030ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80030b0:	f7ff ff10 	bl	8002ed4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030bc:	1d21      	adds	r1, r4, #4
 80030be:	f7ff ff89 	bl	8002fd4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c2:	2301      	movs	r3, #1
  return HAL_OK;
 80030c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80030ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80030d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80030d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80030e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80030ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80030ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030f0:	2001      	movs	r0, #1
 80030f2:	e7fc      	b.n	80030ee <HAL_TIM_PWM_Init+0x52>

080030f4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f4:	6a03      	ldr	r3, [r0, #32]
{
 80030f6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f8:	f023 0310 	bic.w	r3, r3, #16
 80030fc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80030fe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003100:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003102:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003104:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003106:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800310a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800310e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003110:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003114:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003118:	4d0b      	ldr	r5, [pc, #44]	; (8003148 <TIM_OC2_SetConfig+0x54>)
 800311a:	42a8      	cmp	r0, r5
 800311c:	d10d      	bne.n	800313a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800311e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003124:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003128:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800312c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003130:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003136:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800313a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800313c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800313e:	684a      	ldr	r2, [r1, #4]
 8003140:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003142:	6203      	str	r3, [r0, #32]
}
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00

0800314c <HAL_TIM_PWM_ConfigChannel>:
{
 800314c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800314e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003152:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003154:	2b01      	cmp	r3, #1
 8003156:	d052      	beq.n	80031fe <HAL_TIM_PWM_ConfigChannel+0xb2>
 8003158:	2301      	movs	r3, #1
  switch (Channel)
 800315a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800315c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003160:	d03c      	beq.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x90>
 8003162:	d806      	bhi.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x26>
 8003164:	b1c2      	cbz	r2, 8003198 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8003166:	2a04      	cmp	r2, #4
 8003168:	d027      	beq.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 800316a:	2000      	movs	r0, #0
 800316c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003170:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003172:	2a0c      	cmp	r2, #12
 8003174:	d1f9      	bne.n	800316a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003176:	6800      	ldr	r0, [r0, #0]
 8003178:	f7ff fe64 	bl	8002e44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800317e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003186:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003196:	e030      	b.n	80031fa <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003198:	6800      	ldr	r0, [r0, #0]
 800319a:	f7ff fe01 	bl	8002da0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800319e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	f042 0208 	orr.w	r2, r2, #8
 80031a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	f022 0204 	bic.w	r2, r2, #4
 80031b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031b6:	619a      	str	r2, [r3, #24]
      break;
 80031b8:	e7d7      	b.n	800316a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031ba:	6800      	ldr	r0, [r0, #0]
 80031bc:	f7ff ff9a 	bl	80030f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031da:	e7ec      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031dc:	6800      	ldr	r0, [r0, #0]
 80031de:	f7ff fe07 	bl	8002df0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	f042 0208 	orr.w	r2, r2, #8
 80031ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	f022 0204 	bic.w	r2, r2, #4
 80031f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fa:	61da      	str	r2, [r3, #28]
      break;
 80031fc:	e7b5      	b.n	800316a <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 80031fe:	2002      	movs	r0, #2
 8003200:	e7b6      	b.n	8003170 <HAL_TIM_PWM_ConfigChannel+0x24>

08003202 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003202:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003204:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003206:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003208:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800320c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003210:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	6082      	str	r2, [r0, #8]
}
 8003214:	bd10      	pop	{r4, pc}

08003216 <HAL_TIM_ConfigClockSource>:
{
 8003216:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003218:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800321c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800321e:	2b01      	cmp	r3, #1
 8003220:	f04f 0002 	mov.w	r0, #2
 8003224:	d027      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x60>
 8003226:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800322c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800322e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003232:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003238:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800323c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800323e:	680b      	ldr	r3, [r1, #0]
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d04d      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0xca>
 8003244:	d832      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x96>
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d062      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0xfa>
 800324a:	d815      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x62>
 800324c:	2b20      	cmp	r3, #32
 800324e:	d003      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0x42>
 8003250:	d809      	bhi.n	8003266 <HAL_TIM_ConfigClockSource+0x50>
 8003252:	f033 0210 	bics.w	r2, r3, #16
 8003256:	d108      	bne.n	800326a <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8003258:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800325a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325e:	4313      	orrs	r3, r2
 8003260:	f043 0307 	orr.w	r3, r3, #7
 8003264:	e020      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d0f6      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800326a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800326c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800326e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003272:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003276:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d1f6      	bne.n	800326a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327c:	684a      	ldr	r2, [r1, #4]
 800327e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003280:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003284:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003288:	f025 0501 	bic.w	r5, r5, #1
 800328c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003290:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003296:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800329a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800329c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800329e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032a4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80032a8:	6083      	str	r3, [r0, #8]
}
 80032aa:	e7de      	b.n	800326a <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d00c      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0xb4>
 80032b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b4:	d1d9      	bne.n	800326a <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	68cb      	ldr	r3, [r1, #12]
 80032b8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80032bc:	f7ff ffa1 	bl	8003202 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	6893      	ldr	r3, [r2, #8]
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c8:	e008      	b.n	80032dc <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80032ca:	68cb      	ldr	r3, [r1, #12]
 80032cc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80032d0:	f7ff ff97 	bl	8003202 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032dc:	6093      	str	r3, [r2, #8]
      break;
 80032de:	e7c4      	b.n	800326a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032e0:	684d      	ldr	r5, [r1, #4]
 80032e2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e4:	6a01      	ldr	r1, [r0, #32]
 80032e6:	f021 0110 	bic.w	r1, r1, #16
 80032ea:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80032ee:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80032f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fc:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003300:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003302:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003304:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800330a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800330e:	e7cb      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003310:	684a      	ldr	r2, [r1, #4]
 8003312:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003314:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003316:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003318:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331c:	f025 0501 	bic.w	r5, r5, #1
 8003320:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003322:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003324:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800332a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800332e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003330:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003332:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003338:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800333c:	e7b4      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x92>

0800333e <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 800333e:	6800      	ldr	r0, [r0, #0]
{
 8003340:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003342:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003344:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800334a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800334c:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800334e:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003352:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 8003354:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003356:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8003358:	d02e      	beq.n	80033b8 <TIM_SlaveTimer_SetConfig+0x7a>
 800335a:	d805      	bhi.n	8003368 <TIM_SlaveTimer_SetConfig+0x2a>
 800335c:	2a40      	cmp	r2, #64	; 0x40
 800335e:	d00b      	beq.n	8003378 <TIM_SlaveTimer_SetConfig+0x3a>
 8003360:	2a50      	cmp	r2, #80	; 0x50
 8003362:	d019      	beq.n	8003398 <TIM_SlaveTimer_SetConfig+0x5a>
  return HAL_OK;
 8003364:	2000      	movs	r0, #0
}
 8003366:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 8003368:	2a70      	cmp	r2, #112	; 0x70
 800336a:	d1fb      	bne.n	8003364 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_ETR_SetConfig(htim->Instance,
 800336c:	690b      	ldr	r3, [r1, #16]
 800336e:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8003372:	f7ff ff46 	bl	8003202 <TIM_ETR_SetConfig>
      break;
 8003376:	e7f5      	b.n	8003364 <TIM_SlaveTimer_SetConfig+0x26>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003378:	2c05      	cmp	r4, #5
 800337a:	d030      	beq.n	80033de <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 800337c:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800337e:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003380:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003388:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800338a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800338e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003392:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8003394:	6202      	str	r2, [r0, #32]
 8003396:	e7e5      	b.n	8003364 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003398:	688a      	ldr	r2, [r1, #8]
 800339a:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800339c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339e:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a4:	f024 0401 	bic.w	r4, r4, #1
 80033a8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80033ac:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80033b6:	e7ec      	b.n	8003392 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b8:	688c      	ldr	r4, [r1, #8]
 80033ba:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033bc:	6a01      	ldr	r1, [r0, #32]
 80033be:	f021 0110 	bic.w	r1, r1, #16
 80033c2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80033c6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033d0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80033d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80033da:	6203      	str	r3, [r0, #32]
 80033dc:	e7c2      	b.n	8003364 <TIM_SlaveTimer_SetConfig+0x26>
        return HAL_ERROR;
 80033de:	2001      	movs	r0, #1
 80033e0:	e7c1      	b.n	8003366 <TIM_SlaveTimer_SetConfig+0x28>

080033e2 <HAL_TIM_SlaveConfigSynchro>:
{
 80033e2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80033e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80033e8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	f04f 0302 	mov.w	r3, #2
 80033f0:	d01c      	beq.n	800342c <HAL_TIM_SlaveConfigSynchro+0x4a>
 80033f2:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80033f8:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033fc:	f7ff ff9f 	bl	800333e <TIM_SlaveTimer_SetConfig>
 8003400:	b130      	cbz	r0, 8003410 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8003402:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003404:	4628      	mov	r0, r5
    htim->State = HAL_TIM_STATE_READY;
 8003406:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800340a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800340e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003418:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003420:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003422:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003426:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800342a:	e7f0      	b.n	800340e <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 800342c:	4618      	mov	r0, r3
 800342e:	e7ee      	b.n	800340e <HAL_TIM_SlaveConfigSynchro+0x2c>

08003430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003430:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003432:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003434:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003436:	f001 011f 	and.w	r1, r1, #31
 800343a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800343c:	ea23 0304 	bic.w	r3, r3, r4
 8003440:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003442:	6a03      	ldr	r3, [r0, #32]
 8003444:	408a      	lsls	r2, r1
 8003446:	431a      	orrs	r2, r3
 8003448:	6202      	str	r2, [r0, #32]
}
 800344a:	bd10      	pop	{r4, pc}

0800344c <HAL_TIM_OC_Start>:
{
 800344c:	b510      	push	{r4, lr}
 800344e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003450:	b929      	cbnz	r1, 800345e <HAL_TIM_OC_Start+0x12>
 8003452:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003456:	2b01      	cmp	r3, #1
 8003458:	d021      	beq.n	800349e <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800345a:	2001      	movs	r0, #1
}
 800345c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	2904      	cmp	r1, #4
 8003460:	d107      	bne.n	8003472 <HAL_TIM_OC_Start+0x26>
 8003462:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003466:	2b01      	cmp	r3, #1
 8003468:	d1f7      	bne.n	800345a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800346a:	2302      	movs	r3, #2
 800346c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003470:	e018      	b.n	80034a4 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	2908      	cmp	r1, #8
 8003474:	d107      	bne.n	8003486 <HAL_TIM_OC_Start+0x3a>
 8003476:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800347a:	2b01      	cmp	r3, #1
 800347c:	d1ed      	bne.n	800345a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800347e:	2302      	movs	r3, #2
 8003480:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003484:	e00e      	b.n	80034a4 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003486:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800348a:	2b01      	cmp	r3, #1
 800348c:	d1e5      	bne.n	800345a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800348e:	2904      	cmp	r1, #4
 8003490:	d0eb      	beq.n	800346a <HAL_TIM_OC_Start+0x1e>
 8003492:	2908      	cmp	r1, #8
 8003494:	d0f3      	beq.n	800347e <HAL_TIM_OC_Start+0x32>
 8003496:	2302      	movs	r3, #2
 8003498:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800349c:	e002      	b.n	80034a4 <HAL_TIM_OC_Start+0x58>
 800349e:	2302      	movs	r3, #2
 80034a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034a4:	2201      	movs	r2, #1
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	f7ff ffc2 	bl	8003430 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <HAL_TIM_OC_Start+0x9c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10a      	bne.n	80034ca <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 80034b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c2:	2a06      	cmp	r2, #6
 80034c4:	d10b      	bne.n	80034de <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 80034c6:	2000      	movs	r0, #0
 80034c8:	e7c8      	b.n	800345c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d0f5      	beq.n	80034bc <HAL_TIM_OC_Start+0x70>
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <HAL_TIM_OC_Start+0xa0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d0f2      	beq.n	80034bc <HAL_TIM_OC_Start+0x70>
 80034d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034da:	4293      	cmp	r3, r2
 80034dc:	d0ee      	beq.n	80034bc <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e7ee      	b.n	80034c6 <HAL_TIM_OC_Start+0x7a>
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40000400 	.word	0x40000400

080034f0 <HAL_TIM_PWM_Start>:
 80034f0:	f7ff bfac 	b.w	800344c <HAL_TIM_OC_Start>

080034f4 <HAL_TIM_OC_Start_DMA>:
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	460d      	mov	r5, r1
 80034f8:	4604      	mov	r4, r0
 80034fa:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80034fc:	b92d      	cbnz	r5, 800350a <HAL_TIM_OC_Start_DMA+0x16>
 80034fe:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003502:	2a02      	cmp	r2, #2
 8003504:	b2d0      	uxtb	r0, r2
 8003506:	d112      	bne.n	800352e <HAL_TIM_OC_Start_DMA+0x3a>
}
 8003508:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800350a:	2d04      	cmp	r5, #4
 800350c:	d107      	bne.n	800351e <HAL_TIM_OC_Start_DMA+0x2a>
 800350e:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8003512:	1e86      	subs	r6, r0, #2
 8003514:	4270      	negs	r0, r6
 8003516:	4170      	adcs	r0, r6
 8003518:	b140      	cbz	r0, 800352c <HAL_TIM_OC_Start_DMA+0x38>
    return HAL_BUSY;
 800351a:	2002      	movs	r0, #2
 800351c:	e7f4      	b.n	8003508 <HAL_TIM_OC_Start_DMA+0x14>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800351e:	2d08      	cmp	r5, #8
 8003520:	bf0c      	ite	eq
 8003522:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 8003526:	f894 0041 	ldrbne.w	r0, [r4, #65]	; 0x41
 800352a:	e7f2      	b.n	8003512 <HAL_TIM_OC_Start_DMA+0x1e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800352c:	b93d      	cbnz	r5, 800353e <HAL_TIM_OC_Start_DMA+0x4a>
 800352e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003532:	1e50      	subs	r0, r2, #1
 8003534:	4242      	negs	r2, r0
 8003536:	4142      	adcs	r2, r0
 8003538:	bb4a      	cbnz	r2, 800358e <HAL_TIM_OC_Start_DMA+0x9a>
      return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
 800353c:	e7e4      	b.n	8003508 <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800353e:	2d04      	cmp	r5, #4
 8003540:	d102      	bne.n	8003548 <HAL_TIM_OC_Start_DMA+0x54>
 8003542:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8003546:	e7f4      	b.n	8003532 <HAL_TIM_OC_Start_DMA+0x3e>
 8003548:	2d08      	cmp	r5, #8
 800354a:	bf0c      	ite	eq
 800354c:	f894 2040 	ldrbeq.w	r2, [r4, #64]	; 0x40
 8003550:	f894 2041 	ldrbne.w	r2, [r4, #65]	; 0x41
 8003554:	2a01      	cmp	r2, #1
 8003556:	d1f0      	bne.n	800353a <HAL_TIM_OC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 8003558:	b909      	cbnz	r1, 800355e <HAL_TIM_OC_Start_DMA+0x6a>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ed      	bne.n	800353a <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	2d08      	cmp	r5, #8
 8003560:	f04f 0002 	mov.w	r0, #2
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003564:	6822      	ldr	r2, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003566:	d142      	bne.n	80035ee <HAL_TIM_OC_Start_DMA+0xfa>
 8003568:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800356c:	4e40      	ldr	r6, [pc, #256]	; (8003670 <HAL_TIM_OC_Start_DMA+0x17c>)
 800356e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003570:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003572:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003574:	4e3f      	ldr	r6, [pc, #252]	; (8003674 <HAL_TIM_OC_Start_DMA+0x180>)
 8003576:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003578:	4e3f      	ldr	r6, [pc, #252]	; (8003678 <HAL_TIM_OC_Start_DMA+0x184>)
 800357a:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800357c:	f7fe fbec 	bl	8001d58 <HAL_DMA_Start_IT>
 8003580:	2800      	cmp	r0, #0
 8003582:	d1da      	bne.n	800353a <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	68d3      	ldr	r3, [r2, #12]
 8003588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800358c:	e017      	b.n	80035be <HAL_TIM_OC_Start_DMA+0xca>
    if ((pData == NULL) && (Length > 0U))
 800358e:	b909      	cbnz	r1, 8003594 <HAL_TIM_OC_Start_DMA+0xa0>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1d2      	bne.n	800353a <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003594:	2202      	movs	r2, #2
 8003596:	b9a5      	cbnz	r5, 80035c2 <HAL_TIM_OC_Start_DMA+0xce>
 8003598:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800359c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800359e:	4a34      	ldr	r2, [pc, #208]	; (8003670 <HAL_TIM_OC_Start_DMA+0x17c>)
 80035a0:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035a2:	4a34      	ldr	r2, [pc, #208]	; (8003674 <HAL_TIM_OC_Start_DMA+0x180>)
 80035a4:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80035a6:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_TIM_OC_Start_DMA+0x184>)
 80035a8:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	3234      	adds	r2, #52	; 0x34
 80035ae:	f7fe fbd3 	bl	8001d58 <HAL_DMA_Start_IT>
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d1c1      	bne.n	800353a <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	68d3      	ldr	r3, [r2, #12]
 80035ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80035be:	60d3      	str	r3, [r2, #12]
      break;
 80035c0:	e020      	b.n	8003604 <HAL_TIM_OC_Start_DMA+0x110>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c2:	2d04      	cmp	r5, #4
 80035c4:	d1cb      	bne.n	800355e <HAL_TIM_OC_Start_DMA+0x6a>
 80035c6:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <HAL_TIM_OC_Start_DMA+0x17c>)
 80035ce:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035d0:	4a28      	ldr	r2, [pc, #160]	; (8003674 <HAL_TIM_OC_Start_DMA+0x180>)
 80035d2:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035d4:	4a28      	ldr	r2, [pc, #160]	; (8003678 <HAL_TIM_OC_Start_DMA+0x184>)
 80035d6:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	3238      	adds	r2, #56	; 0x38
 80035dc:	f7fe fbbc 	bl	8001d58 <HAL_DMA_Start_IT>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1aa      	bne.n	800353a <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	68d3      	ldr	r3, [r2, #12]
 80035e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ec:	e7e7      	b.n	80035be <HAL_TIM_OC_Start_DMA+0xca>
  switch (Channel)
 80035ee:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  switch (Channel)
 80035f4:	d01a      	beq.n	800362c <HAL_TIM_OC_Start_DMA+0x138>
 80035f6:	d805      	bhi.n	8003604 <HAL_TIM_OC_Start_DMA+0x110>
 80035f8:	2d08      	cmp	r5, #8
 80035fa:	d803      	bhi.n	8003604 <HAL_TIM_OC_Start_DMA+0x110>
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	d0cd      	beq.n	800359c <HAL_TIM_OC_Start_DMA+0xa8>
 8003600:	2d04      	cmp	r5, #4
 8003602:	d0e2      	beq.n	80035ca <HAL_TIM_OC_Start_DMA+0xd6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003604:	2201      	movs	r2, #1
 8003606:	4629      	mov	r1, r5
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	f7ff ff11 	bl	8003430 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_TIM_OC_Start_DMA+0x188>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11c      	bne.n	8003650 <HAL_TIM_OC_Start_DMA+0x15c>
    __HAL_TIM_MOE_ENABLE(htim);
 8003616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	2a06      	cmp	r2, #6
 8003626:	d11d      	bne.n	8003664 <HAL_TIM_OC_Start_DMA+0x170>
  return HAL_OK;
 8003628:	2000      	movs	r0, #0
 800362a:	e76d      	b.n	8003508 <HAL_TIM_OC_Start_DMA+0x14>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800362c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800362e:	4e10      	ldr	r6, [pc, #64]	; (8003670 <HAL_TIM_OC_Start_DMA+0x17c>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003630:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003632:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003634:	4e0f      	ldr	r6, [pc, #60]	; (8003674 <HAL_TIM_OC_Start_DMA+0x180>)
 8003636:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003638:	4e0f      	ldr	r6, [pc, #60]	; (8003678 <HAL_TIM_OC_Start_DMA+0x184>)
 800363a:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800363c:	f7fe fb8c 	bl	8001d58 <HAL_DMA_Start_IT>
 8003640:	2800      	cmp	r0, #0
 8003642:	f47f af7a 	bne.w	800353a <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	68d3      	ldr	r3, [r2, #12]
 800364a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800364e:	e7b6      	b.n	80035be <HAL_TIM_OC_Start_DMA+0xca>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d0e3      	beq.n	800361e <HAL_TIM_OC_Start_DMA+0x12a>
 8003656:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <HAL_TIM_OC_Start_DMA+0x18c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d0e0      	beq.n	800361e <HAL_TIM_OC_Start_DMA+0x12a>
 800365c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003660:	4293      	cmp	r3, r2
 8003662:	d0dc      	beq.n	800361e <HAL_TIM_OC_Start_DMA+0x12a>
    __HAL_TIM_ENABLE(htim);
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e7dc      	b.n	8003628 <HAL_TIM_OC_Start_DMA+0x134>
 800366e:	bf00      	nop
 8003670:	08002ed7 	.word	0x08002ed7
 8003674:	08002f41 	.word	0x08002f41
 8003678:	08002f7b 	.word	0x08002f7b
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400

08003684 <HAL_TIM_PWM_Start_DMA>:
 8003684:	f7ff bf36 	b.w	80034f4 <HAL_TIM_OC_Start_DMA>

08003688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003688:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800368e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003690:	2b01      	cmp	r3, #1
 8003692:	f04f 0002 	mov.w	r0, #2
 8003696:	d022      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003698:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800369a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800369e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80036a8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036aa:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ac:	4c0c      	ldr	r4, [pc, #48]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	d00a      	beq.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d007      	beq.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80036b8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80036bc:	42a3      	cmp	r3, r4
 80036be:	d003      	beq.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80036c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80036c4:	42a3      	cmp	r3, r4
 80036c6:	d104      	bne.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ce:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80036d4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80036da:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80036de:	bd30      	pop	{r4, r5, pc}
 80036e0:	40012c00 	.word	0x40012c00

080036e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d01f      	beq.n	800372c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036ec:	68cb      	ldr	r3, [r1, #12]
 80036ee:	688a      	ldr	r2, [r1, #8]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036f6:	684a      	ldr	r2, [r1, #4]
 80036f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036fe:	680a      	ldr	r2, [r1, #0]
 8003700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003704:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003706:	690a      	ldr	r2, [r1, #16]
 8003708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800370c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800370e:	694a      	ldr	r2, [r1, #20]
 8003710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003714:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003716:	69ca      	ldr	r2, [r1, #28]
 8003718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371c:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800371e:	6802      	ldr	r2, [r0, #0]
 8003720:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003722:	2300      	movs	r3, #0
 8003724:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003728:	4618      	mov	r0, r3
 800372a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800372c:	2002      	movs	r0, #2
}
 800372e:	4770      	bx	lr

08003730 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	6803      	ldr	r3, [r0, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003738:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003742:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003744:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003746:	bf02      	ittt	eq
 8003748:	68da      	ldreq	r2, [r3, #12]
 800374a:	f022 0210 	biceq.w	r2, r2, #16
 800374e:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	2320      	movs	r3, #32
 8003752:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003756:	2300      	movs	r3, #0
 8003758:	6303      	str	r3, [r0, #48]	; 0x30
}
 800375a:	4770      	bx	lr

0800375c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800375c:	b510      	push	{r4, lr}
 800375e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	6803      	ldr	r3, [r0, #0]
 8003762:	68c1      	ldr	r1, [r0, #12]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800376a:	430a      	orrs	r2, r1
 800376c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800376e:	6882      	ldr	r2, [r0, #8]
 8003770:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003772:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003774:	4302      	orrs	r2, r0
 8003776:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003778:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800377c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003780:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003782:	430a      	orrs	r2, r1
 8003784:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	69a1      	ldr	r1, [r4, #24]
 800378a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800378e:	430a      	orrs	r2, r1
 8003790:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <UART_SetConfig+0x70>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d115      	bne.n	80037c4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7ff f81a 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800379c:	2319      	movs	r3, #25
 800379e:	4343      	muls	r3, r0
 80037a0:	6862      	ldr	r2, [r4, #4]
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037aa:	2264      	movs	r2, #100	; 0x64
 80037ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b0:	fb02 3311 	mls	r3, r2, r1, r3
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	3332      	adds	r3, #50	; 0x32
 80037b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80037bc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80037c0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80037c2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7fe fff4 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 80037c8:	e7e8      	b.n	800379c <UART_SetConfig+0x40>
 80037ca:	bf00      	nop
 80037cc:	40013800 	.word	0x40013800

080037d0 <HAL_UART_Init>:
{
 80037d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80037d2:	4604      	mov	r4, r0
 80037d4:	b340      	cbz	r0, 8003828 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037de:	b91b      	cbnz	r3, 80037e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80037e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80037e4:	f7fd ff04 	bl	80015f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80037ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80037f0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80037f2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80037f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80037fa:	f7ff ffaf 	bl	800375c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003810:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003818:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800381a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800381e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003822:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003826:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	e7fc      	b.n	8003826 <HAL_UART_Init+0x56>

0800382c <HAL_UART_TxCpltCallback>:
 800382c:	4770      	bx	lr

0800382e <HAL_UART_RxCpltCallback>:
 800382e:	4770      	bx	lr

08003830 <HAL_UART_ErrorCallback>:
 8003830:	4770      	bx	lr

08003832 <UART_DMAAbortOnError>:
{
 8003832:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003834:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003836:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003838:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800383a:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800383c:	f7ff fff8 	bl	8003830 <HAL_UART_ErrorCallback>
}
 8003840:	bd08      	pop	{r3, pc}

08003842 <HAL_UARTEx_RxEventCallback>:
}
 8003842:	4770      	bx	lr

08003844 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003844:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003848:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800384e:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	d134      	bne.n	80038bc <UART_Receive_IT.part.0.isra.0+0x78>
 8003852:	6901      	ldr	r1, [r0, #16]
 8003854:	2900      	cmp	r1, #0
 8003856:	d134      	bne.n	80038c2 <UART_Receive_IT.part.0.isra.0+0x7e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003858:	6852      	ldr	r2, [r2, #4]
 800385a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800385e:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8003862:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8003864:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003866:	3a01      	subs	r2, #1
 8003868:	b292      	uxth	r2, r2
 800386a:	85c2      	strh	r2, [r0, #46]	; 0x2e
 800386c:	bb1a      	cbnz	r2, 80038b6 <UART_Receive_IT.part.0.isra.0+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800386e:	6803      	ldr	r3, [r0, #0]
 8003870:	68d9      	ldr	r1, [r3, #12]
 8003872:	f021 0120 	bic.w	r1, r1, #32
 8003876:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800387e:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003880:	6959      	ldr	r1, [r3, #20]
 8003882:	f021 0101 	bic.w	r1, r1, #1
 8003886:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003888:	2120      	movs	r1, #32
 800388a:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003890:	2901      	cmp	r1, #1
 8003892:	d120      	bne.n	80038d6 <UART_Receive_IT.part.0.isra.0+0x92>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	6302      	str	r2, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003896:	68d9      	ldr	r1, [r3, #12]
 8003898:	f021 0110 	bic.w	r1, r1, #16
 800389c:	60d9      	str	r1, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	06c9      	lsls	r1, r1, #27
 80038a2:	d505      	bpl.n	80038b0 <UART_Receive_IT.part.0.isra.0+0x6c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a4:	9201      	str	r2, [sp, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	9201      	str	r2, [sp, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038b0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80038b2:	f7ff ffc6 	bl	8003842 <HAL_UARTEx_RxEventCallback>
}
 80038b6:	b003      	add	sp, #12
 80038b8:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038bc:	b939      	cbnz	r1, 80038ce <UART_Receive_IT.part.0.isra.0+0x8a>
 80038be:	6901      	ldr	r1, [r0, #16]
 80038c0:	b929      	cbnz	r1, 80038ce <UART_Receive_IT.part.0.isra.0+0x8a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c2:	6852      	ldr	r2, [r2, #4]
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80038c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80038ca:	3301      	adds	r3, #1
 80038cc:	e7c9      	b.n	8003862 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038d4:	e7f7      	b.n	80038c6 <UART_Receive_IT.part.0.isra.0+0x82>
       HAL_UART_RxCpltCallback(huart);
 80038d6:	f7ff ffaa 	bl	800382e <HAL_UART_RxCpltCallback>
 80038da:	e7ec      	b.n	80038b6 <UART_Receive_IT.part.0.isra.0+0x72>

080038dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038dc:	6803      	ldr	r3, [r0, #0]
{
 80038de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038e0:	681a      	ldr	r2, [r3, #0]
{
 80038e2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80038e4:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e8:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038ea:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80038ec:	d10c      	bne.n	8003908 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ee:	0695      	lsls	r5, r2, #26
 80038f0:	d567      	bpl.n	80039c2 <HAL_UART_IRQHandler+0xe6>
 80038f2:	068d      	lsls	r5, r1, #26
 80038f4:	d565      	bpl.n	80039c2 <HAL_UART_IRQHandler+0xe6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038f6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80038fa:	2b22      	cmp	r3, #34	; 0x22
 80038fc:	d15b      	bne.n	80039b6 <HAL_UART_IRQHandler+0xda>
}
 80038fe:	b003      	add	sp, #12
 8003900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003904:	f7ff bf9e 	b.w	8003844 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003908:	f005 0001 	and.w	r0, r5, #1
 800390c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8003910:	4305      	orrs	r5, r0
 8003912:	d056      	beq.n	80039c2 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003914:	07d5      	lsls	r5, r2, #31
 8003916:	d505      	bpl.n	8003924 <HAL_UART_IRQHandler+0x48>
 8003918:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800391a:	bf42      	ittt	mi
 800391c:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800391e:	f043 0301 	orrmi.w	r3, r3, #1
 8003922:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003924:	0755      	lsls	r5, r2, #29
 8003926:	d504      	bpl.n	8003932 <HAL_UART_IRQHandler+0x56>
 8003928:	b118      	cbz	r0, 8003932 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003932:	0793      	lsls	r3, r2, #30
 8003934:	d504      	bpl.n	8003940 <HAL_UART_IRQHandler+0x64>
 8003936:	b118      	cbz	r0, 8003940 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003938:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003940:	0715      	lsls	r5, r2, #28
 8003942:	d507      	bpl.n	8003954 <HAL_UART_IRQHandler+0x78>
 8003944:	f001 0320 	and.w	r3, r1, #32
 8003948:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800394a:	bf1e      	ittt	ne
 800394c:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800394e:	f043 0308 	orrne.w	r3, r3, #8
 8003952:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003956:	b373      	cbz	r3, 80039b6 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003958:	0692      	lsls	r2, r2, #26
 800395a:	d508      	bpl.n	800396e <HAL_UART_IRQHandler+0x92>
 800395c:	068b      	lsls	r3, r1, #26
 800395e:	d506      	bpl.n	800396e <HAL_UART_IRQHandler+0x92>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003960:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003964:	2b22      	cmp	r3, #34	; 0x22
 8003966:	d102      	bne.n	800396e <HAL_UART_IRQHandler+0x92>
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff ff6b 	bl	8003844 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800396e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003970:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003972:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003974:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800397a:	f005 0508 	and.w	r5, r5, #8
 800397e:	431d      	orrs	r5, r3
 8003980:	d01b      	beq.n	80039ba <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8003982:	f7ff fed5 	bl	8003730 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	0655      	lsls	r5, r2, #25
 800398c:	d510      	bpl.n	80039b0 <HAL_UART_IRQHandler+0xd4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003990:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003996:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003998:	b150      	cbz	r0, 80039b0 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399a:	4b53      	ldr	r3, [pc, #332]	; (8003ae8 <HAL_UART_IRQHandler+0x20c>)
 800399c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800399e:	f7fe fa35 	bl	8001e0c <HAL_DMA_Abort_IT>
 80039a2:	b140      	cbz	r0, 80039b6 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80039a8:	b003      	add	sp, #12
 80039aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ae:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff ff3d 	bl	8003830 <HAL_UART_ErrorCallback>
}
 80039b6:	b003      	add	sp, #12
 80039b8:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80039ba:	f7ff ff39 	bl	8003830 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039be:	6425      	str	r5, [r4, #64]	; 0x40
 80039c0:	e7f9      	b.n	80039b6 <HAL_UART_IRQHandler+0xda>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80039c4:	2801      	cmp	r0, #1
 80039c6:	d155      	bne.n	8003a74 <HAL_UART_IRQHandler+0x198>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039c8:	06d0      	lsls	r0, r2, #27
 80039ca:	d553      	bpl.n	8003a74 <HAL_UART_IRQHandler+0x198>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80039cc:	06cd      	lsls	r5, r1, #27
 80039ce:	d551      	bpl.n	8003a74 <HAL_UART_IRQHandler+0x198>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039d0:	2100      	movs	r1, #0
 80039d2:	9101      	str	r1, [sp, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	9201      	str	r2, [sp, #4]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	9201      	str	r2, [sp, #4]
 80039dc:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80039e4:	d02a      	beq.n	8003a3c <HAL_UART_IRQHandler+0x160>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039e8:	6802      	ldr	r2, [r0, #0]
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80039ee:	2a00      	cmp	r2, #0
 80039f0:	d0e1      	beq.n	80039b6 <HAL_UART_IRQHandler+0xda>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039f2:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80039f4:	4295      	cmp	r5, r2
 80039f6:	d9de      	bls.n	80039b6 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 80039f8:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039fa:	6982      	ldr	r2, [r0, #24]
 80039fc:	2a20      	cmp	r2, #32
 80039fe:	d015      	beq.n	8003a2c <HAL_UART_IRQHandler+0x150>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a06:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a16:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1e:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	f022 0210 	bic.w	r2, r2, #16
 8003a26:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a28:	f7fe f9d2 	bl	8001dd0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a2c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003a2e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003a30:	1ac9      	subs	r1, r1, r3
 8003a32:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff ff04 	bl	8003842 <HAL_UARTEx_RxEventCallback>
 8003a3a:	e7bc      	b.n	80039b6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a3c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003a3e:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8003a40:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003a42:	b289      	uxth	r1, r1
 8003a44:	2900      	cmp	r1, #0
 8003a46:	d0b6      	beq.n	80039b6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a48:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003a4a:	1a09      	subs	r1, r1, r0
 8003a4c:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8003a4e:	2900      	cmp	r1, #0
 8003a50:	d0b1      	beq.n	80039b6 <HAL_UART_IRQHandler+0xda>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a52:	68d8      	ldr	r0, [r3, #12]
 8003a54:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003a58:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	6958      	ldr	r0, [r3, #20]
 8003a5c:	f020 0001 	bic.w	r0, r0, #1
 8003a60:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8003a62:	2020      	movs	r0, #32
 8003a64:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	f022 0210 	bic.w	r2, r2, #16
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	e7df      	b.n	8003a34 <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a74:	0610      	lsls	r0, r2, #24
 8003a76:	d526      	bpl.n	8003ac6 <HAL_UART_IRQHandler+0x1ea>
 8003a78:	060d      	lsls	r5, r1, #24
 8003a7a:	d524      	bpl.n	8003ac6 <HAL_UART_IRQHandler+0x1ea>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a7c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a80:	2a21      	cmp	r2, #33	; 0x21
 8003a82:	d198      	bne.n	80039b6 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a86:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003a8c:	d116      	bne.n	8003abc <HAL_UART_IRQHandler+0x1e0>
 8003a8e:	6921      	ldr	r1, [r4, #16]
 8003a90:	b9a1      	cbnz	r1, 8003abc <HAL_UART_IRQHandler+0x1e0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a92:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003a96:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003a9a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a9c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003a9e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	b292      	uxth	r2, r2
 8003aa4:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d185      	bne.n	80039b6 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e77c      	b.n	80039b6 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003abc:	1c51      	adds	r1, r2, #1
 8003abe:	6221      	str	r1, [r4, #32]
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	e7eb      	b.n	8003a9e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac6:	0650      	lsls	r0, r2, #25
 8003ac8:	f57f af75 	bpl.w	80039b6 <HAL_UART_IRQHandler+0xda>
 8003acc:	064a      	lsls	r2, r1, #25
 8003ace:	f57f af72 	bpl.w	80039b6 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ad2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003ad4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ada:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003adc:	2320      	movs	r3, #32
 8003ade:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003ae2:	f7ff fea3 	bl	800382c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003ae6:	e766      	b.n	80039b6 <HAL_UART_IRQHandler+0xda>
 8003ae8:	08003833 	.word	0x08003833

08003aec <expanderSelect>:
#include "main.h"
#include "stm32f1xx_hal.h"

uint8_t expanderOk = 0;

void expanderSelect(void) {HAL_GPIO_WritePin(EXP_GPIO, EXP_PIN, 0);}
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af2:	4801      	ldr	r0, [pc, #4]	; (8003af8 <expanderSelect+0xc>)
 8003af4:	f7fe bb3c 	b.w	8002170 <HAL_GPIO_WritePin>
 8003af8:	40010800 	.word	0x40010800

08003afc <expanderDeselect>:
void expanderDeselect(void) {HAL_GPIO_WritePin(EXP_GPIO, EXP_PIN, 1);}
 8003afc:	2201      	movs	r2, #1
 8003afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b02:	4801      	ldr	r0, [pc, #4]	; (8003b08 <expanderDeselect+0xc>)
 8003b04:	f7fe bb34 	b.w	8002170 <HAL_GPIO_WritePin>
 8003b08:	40010800 	.word	0x40010800

08003b0c <expanderReadReg>:
	HAL_Delay(500);
	write8(0, 0);

}

uint8_t expanderReadReg(uint8_t addr) {
 8003b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  uint8_t txData[3];
	  txData[0] = READ_CMD | (EXP_ADDR << 1) | 0x40;
 8003b0e:	2341      	movs	r3, #65	; 0x41
 8003b10:	f88d 3008 	strb.w	r3, [sp, #8]
	  txData[1] = addr;
	  txData[2] = 0xFF; //dummy data for Tx
 8003b14:	23ff      	movs	r3, #255	; 0xff
 8003b16:	f88d 300a 	strb.w	r3, [sp, #10]

	  uint8_t rxData[3] = {0x55, 0x55, 0x55};
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <expanderReadReg+0x44>)
	  txData[1] = addr;
 8003b1c:	f88d 0009 	strb.w	r0, [sp, #9]
	  uint8_t rxData[3] = {0x55, 0x55, 0x55};
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	789b      	ldrb	r3, [r3, #2]
 8003b24:	f8ad 200c 	strh.w	r2, [sp, #12]
 8003b28:	f88d 300e 	strb.w	r3, [sp, #14]

	  expanderSelect();
 8003b2c:	f7ff ffde 	bl	8003aec <expanderSelect>
	  	  HAL_SPI_TransmitReceive(EXP_SPI_HANDLE, txData, rxData, 3, 1);
 8003b30:	2301      	movs	r3, #1
 8003b32:	aa03      	add	r2, sp, #12
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	a902      	add	r1, sp, #8
 8003b38:	2303      	movs	r3, #3
 8003b3a:	4806      	ldr	r0, [pc, #24]	; (8003b54 <expanderReadReg+0x48>)
 8003b3c:	f7ff f83b 	bl	8002bb6 <HAL_SPI_TransmitReceive>
	  expanderDeselect();
 8003b40:	f7ff ffdc 	bl	8003afc <expanderDeselect>

	  return rxData[2];
}
 8003b44:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8003b48:	b005      	add	sp, #20
 8003b4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b4e:	bf00      	nop
 8003b50:	080052ed 	.word	0x080052ed
 8003b54:	2000023c 	.word	0x2000023c

08003b58 <expanderWriteReg>:

void expanderWriteReg(uint8_t addr, uint8_t value) {
	  uint8_t txData[3];
	  txData[0] = WRITE_CMD | (EXP_ADDR << 1) | 0x40;
 8003b58:	2340      	movs	r3, #64	; 0x40
void expanderWriteReg(uint8_t addr, uint8_t value) {
 8003b5a:	b507      	push	{r0, r1, r2, lr}
	  txData[0] = WRITE_CMD | (EXP_ADDR << 1) | 0x40;
 8003b5c:	f88d 3004 	strb.w	r3, [sp, #4]
	  txData[1] = addr;
 8003b60:	f88d 0005 	strb.w	r0, [sp, #5]
	  txData[2] = value;
 8003b64:	f88d 1006 	strb.w	r1, [sp, #6]

	  expanderSelect();
 8003b68:	f7ff ffc0 	bl	8003aec <expanderSelect>
	  	  HAL_SPI_Transmit(EXP_SPI_HANDLE, txData, 3, 1);
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	a901      	add	r1, sp, #4
 8003b72:	4804      	ldr	r0, [pc, #16]	; (8003b84 <expanderWriteReg+0x2c>)
 8003b74:	f7fe ff72 	bl	8002a5c <HAL_SPI_Transmit>
	  expanderDeselect();
 8003b78:	f7ff ffc0 	bl	8003afc <expanderDeselect>
}
 8003b7c:	b003      	add	sp, #12
 8003b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b82:	bf00      	nop
 8003b84:	2000023c 	.word	0x2000023c

08003b88 <expanderInit>:
void expanderInit(void){
 8003b88:	b538      	push	{r3, r4, r5, lr}
	expanderOk = 0;
 8003b8a:	2400      	movs	r4, #0
 8003b8c:	4d14      	ldr	r5, [pc, #80]	; (8003be0 <expanderInit+0x58>)
 8003b8e:	702c      	strb	r4, [r5, #0]
	expanderDeselect();
 8003b90:	f7ff ffb4 	bl	8003afc <expanderDeselect>
	HAL_Delay(100);
 8003b94:	2064      	movs	r0, #100	; 0x64
 8003b96:	f7fd fe13 	bl	80017c0 <HAL_Delay>
	expanderWriteReg(MCP23S17_DDR_A, 0);
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f7ff ffdb 	bl	8003b58 <expanderWriteReg>
	expanderWriteReg(MCP23S17_DDR_B, 0);
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f7ff ffd7 	bl	8003b58 <expanderWriteReg>
  if (!port) return expanderReadReg(MCP23S17_GPIO_A);
  return 			expanderReadReg(MCP23S17_GPIO_B);
}

void setPolarity8(uint8_t port,  uint8_t mask){
  if (!port) 	expanderWriteReg(MCP23S17_POL_A, mask);
 8003baa:	21be      	movs	r1, #190	; 0xbe
 8003bac:	2002      	movs	r0, #2
 8003bae:	f7ff ffd3 	bl	8003b58 <expanderWriteReg>
  else 			expanderWriteReg(MCP23S17_POL_B, mask);
}

int getPolarity8(uint8_t port){
	if (!port)	 return expanderReadReg(MCP23S17_POL_A);
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f7ff ffaa 	bl	8003b0c <expanderReadReg>
	if (readBack == testVal){
 8003bb8:	28be      	cmp	r0, #190	; 0xbe
		expanderOk = 1;
 8003bba:	bf04      	itt	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	702b      	strbeq	r3, [r5, #0]
	write8(0, expanderOk * 0xff);
 8003bc0:	7829      	ldrb	r1, [r5, #0]
	if (!port) 	expanderWriteReg(MCP23S17_GPIO_A, value);
 8003bc2:	2012      	movs	r0, #18
	write8(0, expanderOk * 0xff);
 8003bc4:	4249      	negs	r1, r1
	if (!port) 	expanderWriteReg(MCP23S17_GPIO_A, value);
 8003bc6:	b2c9      	uxtb	r1, r1
 8003bc8:	f7ff ffc6 	bl	8003b58 <expanderWriteReg>
	HAL_Delay(500);
 8003bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bd0:	f7fd fdf6 	bl	80017c0 <HAL_Delay>
}
 8003bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!port) 	expanderWriteReg(MCP23S17_GPIO_A, value);
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2012      	movs	r0, #18
 8003bdc:	f7ff bfbc 	b.w	8003b58 <expanderWriteReg>
 8003be0:	2000036c 	.word	0x2000036c

08003be4 <agcPrasolovFloat>:
float Falpha = 0.02f;
float FR = 0.7f;
float FAn = 0;


void agcPrasolovFloat(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i=0; i<blockSize; i++){
 8003be8:	2500      	movs	r5, #0
		float input = Q31toF(source[i]);
		input = input * FAn;

		//float Anew =;
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 8003bea:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <agcPrasolovFloat+0xd0>)
void agcPrasolovFloat(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003bec:	b085      	sub	sp, #20
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 8003bee:	681f      	ldr	r7, [r3, #0]
 8003bf0:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <agcPrasolovFloat+0xd4>)
		destination[i] = FtoQ31(input);
 8003bf2:	f04f 4b9e 	mov.w	fp, #1325400064	; 0x4f000000
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8003cbc <agcPrasolovFloat+0xd8>
 8003bfc:	9300      	str	r3, [sp, #0]
	for (uint16_t i=0; i<blockSize; i++){
 8003bfe:	462b      	mov	r3, r5
void agcPrasolovFloat(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003c00:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003c04:	f8da 4000 	ldr.w	r4, [sl]
 8003c08:	9203      	str	r2, [sp, #12]
	for (uint16_t i=0; i<blockSize; i++){
 8003c0a:	9903      	ldr	r1, [sp, #12]
 8003c0c:	b2aa      	uxth	r2, r5
 8003c0e:	4291      	cmp	r1, r2
 8003c10:	d805      	bhi.n	8003c1e <agcPrasolovFloat+0x3a>
 8003c12:	b10b      	cbz	r3, 8003c18 <agcPrasolovFloat+0x34>
 8003c14:	f8ca 4000 	str.w	r4, [sl]
	}
}
 8003c18:	b005      	add	sp, #20
 8003c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float input = Q31toF(source[i]);
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003c24:	f7fc fee2 	bl	80009ec <__aeabi_i2f>
 8003c28:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8003c2c:	f7fc ff32 	bl	8000a94 <__aeabi_fmul>
		input = input * FAn;
 8003c30:	4621      	mov	r1, r4
 8003c32:	f7fc ff2f 	bl	8000a94 <__aeabi_fmul>
 8003c36:	4606      	mov	r6, r0
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 8003c38:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c3c:	f7fc fd74 	bl	8000728 <__aeabi_f2d>
 8003c40:	4680      	mov	r8, r0
 8003c42:	4638      	mov	r0, r7
 8003c44:	4689      	mov	r9, r1
 8003c46:	f7fc fd6f 	bl	8000728 <__aeabi_f2d>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4640      	mov	r0, r8
 8003c50:	4649      	mov	r1, r9
 8003c52:	f7fc fadb 	bl	800020c <__aeabi_dmul>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	4918      	ldr	r1, [pc, #96]	; (8003cc0 <agcPrasolovFloat+0xdc>)
 8003c5e:	f7fc fc03 	bl	8000468 <__aeabi_dsub>
 8003c62:	4680      	mov	r8, r0
 8003c64:	4620      	mov	r0, r4
 8003c66:	4689      	mov	r9, r1
 8003c68:	f7fc fd5e 	bl	8000728 <__aeabi_f2d>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4640      	mov	r0, r8
 8003c72:	4649      	mov	r1, r9
 8003c74:	f7fc faca 	bl	800020c <__aeabi_dmul>
 8003c78:	4680      	mov	r8, r0
 8003c7a:	4689      	mov	r9, r1
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	9900      	ldr	r1, [sp, #0]
 8003c80:	f7fc ff08 	bl	8000a94 <__aeabi_fmul>
 8003c84:	f7fc fd50 	bl	8000728 <__aeabi_f2d>
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	4640      	mov	r0, r8
 8003c90:	f7fc fbec 	bl	800046c <__adddf3>
 8003c94:	f7fc fda0 	bl	80007d8 <__aeabi_d2f>
		destination[i] = FtoQ31(input);
 8003c98:	4659      	mov	r1, fp
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 8003c9a:	4604      	mov	r4, r0
		destination[i] = FtoQ31(input);
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f7fc fef9 	bl	8000a94 <__aeabi_fmul>
 8003ca2:	f7fd f847 	bl	8000d34 <__aeabi_f2iz>
 8003ca6:	9b02      	ldr	r3, [sp, #8]
 8003ca8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003cac:	2301      	movs	r3, #1
 8003cae:	3501      	adds	r5, #1
 8003cb0:	e7ab      	b.n	8003c0a <agcPrasolovFloat+0x26>
 8003cb2:	bf00      	nop
 8003cb4:	20000010 	.word	0x20000010
 8003cb8:	2000000c 	.word	0x2000000c
 8003cbc:	20000370 	.word	0x20000370
 8003cc0:	3ff00000 	.word	0x3ff00000

08003cc4 <softClip>:
#include "audio.h"
#include "arm_math.h"
#include <stdbool.h>
#include <stdint.h>

q31_t softClip(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	4614      	mov	r4, r2
	//in = in - 0.33333333333333f * in * in * in;
	//if (in > 0.999) in = 0.999;
	//if (in < -0.999) in = -0.999;

	q31_t multResult[blockSize];
 8003ccc:	0093      	lsls	r3, r2, #2
 8003cce:	466a      	mov	r2, sp
 8003cd0:	3307      	adds	r3, #7
 8003cd2:	08db      	lsrs	r3, r3, #3
 8003cd4:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
q31_t softClip(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003cd8:	af02      	add	r7, sp, #8
	q31_t multResult[blockSize];
 8003cda:	469d      	mov	sp, r3
q31_t softClip(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003cdc:	4606      	mov	r6, r0
 8003cde:	4688      	mov	r8, r1
	q31_t multResult[blockSize];
 8003ce0:	ad02      	add	r5, sp, #8
	q31_t cilpA = FtoQ31(0.333333333f);

	arm_mult_q31(source, source, multResult, blockSize); // in^2
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	f001 fa4c 	bl	8005184 <arm_mult_q31>
	arm_mult_q31(source, multResult, multResult, blockSize); // in^3
 8003cec:	4623      	mov	r3, r4
 8003cee:	462a      	mov	r2, r5
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f001 fa46 	bl	8005184 <arm_mult_q31>
	arm_scale_q31(multResult, cilpA, 0, multResult, blockSize); // in^3 * 1/3
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4906      	ldr	r1, [pc, #24]	; (8003d18 <softClip+0x54>)
 8003d00:	9400      	str	r4, [sp, #0]
 8003d02:	f001 f969 	bl	8004fd8 <arm_scale_q31>
	//arm_negate_q31(multResult, multResult, blockSize); // - (in^3 * 1/3)
	//arm_add_q31(source, multResult, destination, blockSize); // in - (in^3 * 1/3)
	arm_sub_q31(source, multResult, destination, blockSize); // in - (in^3 * 1/3)
 8003d06:	4630      	mov	r0, r6
 8003d08:	4623      	mov	r3, r4
 8003d0a:	4642      	mov	r2, r8
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f001 f8d7 	bl	8004ec0 <arm_sub_q31>

		destination[i] = input - cube;

	}
	*/
}
 8003d12:	46bd      	mov	sp, r7
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d18:	2aaaaac0 	.word	0x2aaaaac0

08003d1c <dspInit>:

arm_fir_decimate_instance_q31	firInstanceDecI;
arm_fir_decimate_instance_q31	firInstanceDecQ;

int outStarted = 0;
void dspInit(void){
 8003d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	outStarted = 0;
 8003d1e:	2300      	movs	r3, #0
	firInit();

	arm_fir_init_q31(&firInstanceI, FIR_NUM_TAPS, firCoeffs, firStateI, DSP_BLOCK_SIZE);
 8003d20:	2580      	movs	r5, #128	; 0x80
 8003d22:	4c11      	ldr	r4, [pc, #68]	; (8003d68 <dspInit+0x4c>)
	outStarted = 0;
 8003d24:	4e11      	ldr	r6, [pc, #68]	; (8003d6c <dspInit+0x50>)
	arm_fir_init_q31(&firInstanceI, FIR_NUM_TAPS, firCoeffs, firStateI, DSP_BLOCK_SIZE);
 8003d26:	4f12      	ldr	r7, [pc, #72]	; (8003d70 <dspInit+0x54>)
	outStarted = 0;
 8003d28:	6033      	str	r3, [r6, #0]
	firInit();
 8003d2a:	f000 f8ff 	bl	8003f2c <firInit>
	arm_fir_init_q31(&firInstanceI, FIR_NUM_TAPS, firCoeffs, firStateI, DSP_BLOCK_SIZE);
 8003d2e:	463b      	mov	r3, r7
 8003d30:	4622      	mov	r2, r4
 8003d32:	2120      	movs	r1, #32
 8003d34:	480f      	ldr	r0, [pc, #60]	; (8003d74 <dspInit+0x58>)
 8003d36:	9500      	str	r5, [sp, #0]
 8003d38:	f000 fee2 	bl	8004b00 <arm_fir_init_q31>
	arm_fir_init_q31(&firInstanceQ, FIR_NUM_TAPS, firCoeffs, firStateQ, DSP_BLOCK_SIZE);
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	2120      	movs	r1, #32
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <dspInit+0x5c>)
 8003d42:	480e      	ldr	r0, [pc, #56]	; (8003d7c <dspInit+0x60>)
 8003d44:	9500      	str	r5, [sp, #0]
 8003d46:	f000 fedb 	bl	8004b00 <arm_fir_init_q31>

	arm_fir_decimate_init_q31(&firInstanceDecI, FIR_NUM_TAPS, 2, firCoeffs, firStateI, DSP_BLOCK_SIZE);
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	2120      	movs	r1, #32
 8003d50:	e9cd 7500 	strd	r7, r5, [sp]
 8003d54:	480a      	ldr	r0, [pc, #40]	; (8003d80 <dspInit+0x64>)
 8003d56:	f000 ffa1 	bl	8004c9c <arm_fir_decimate_init_q31>
	//arm_fir_decimate_init_q31(&firInstanceDecQ, FIR_NUM_TAPS, 2, firCoeffs, firStateQ, DSP_BLOCK_SIZE);


	 fftInit();
 8003d5a:	f000 f8bf 	bl	8003edc <fftInit>
	//arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	//arm_fir_init_q31(&S2, NUM_TAPS, firCoeffs32, firState2, DSP_BLOCK_SIZE);

	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	 outStarted = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6033      	str	r3, [r6, #0]

}
 8003d62:	b003      	add	sp, #12
 8003d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	080052f4 	.word	0x080052f4
 8003d6c:	200014a4 	.word	0x200014a4
 8003d70:	2000099c 	.word	0x2000099c
 8003d74:	20000984 	.word	0x20000984
 8003d78:	20000c20 	.word	0x20000c20
 8003d7c:	20000990 	.word	0x20000990
 8003d80:	20000978 	.word	0x20000978

08003d84 <dspStart>:

void dspStart(void){
 8003d84:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 8003d86:	4c0b      	ldr	r4, [pc, #44]	; (8003db4 <dspStart+0x30>)
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f7ff f87d 	bl	8002e88 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // TIM1 CH2 = ADC trigger
 8003d8e:	2104      	movs	r1, #4
 8003d90:	4620      	mov	r0, r4
 8003d92:	f7ff fbad 	bl	80034f0 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inBuf, ADC_BUFFER_LEN); // CH3 = audio output
 8003d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9a:	4907      	ldr	r1, [pc, #28]	; (8003db8 <dspStart+0x34>)
 8003d9c:	4807      	ldr	r0, [pc, #28]	; (8003dbc <dspStart+0x38>)
 8003d9e:	f7fd fe15 	bl	80019cc <HAL_ADC_Start_DMA>
																	// ADC_BUFFER_LEN/(ADC_DMA_CHANNELS)
	//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS)/2);

	#ifdef DSP_DECIMATED
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
 8003da2:	4620      	mov	r0, r4

	#ifndef DSP_DECIMATED
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
	#endif

}
 8003da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
 8003da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dac:	2108      	movs	r1, #8
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <dspStart+0x3c>)
 8003db0:	f7ff bc68 	b.w	8003684 <HAL_TIM_PWM_Start_DMA>
 8003db4:	20000294 	.word	0x20000294
 8003db8:	20000ea4 	.word	0x20000ea4
 8003dbc:	20000034 	.word	0x20000034
 8003dc0:	200012a4 	.word	0x200012a4

08003dc4 <dspPrepareInput>:
//int adcBuffStart = 0;

void dspPrepareInput(void){
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);

	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003dc4:	2100      	movs	r1, #0
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <dspPrepareInput+0x40>)
void dspPrepareInput(void){
 8003dc8:	b510      	push	{r4, lr}
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003dca:	781b      	ldrb	r3, [r3, #0]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003dcc:	4c0e      	ldr	r4, [pc, #56]	; (8003e08 <dspPrepareInput+0x44>)
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003dce:	f083 0201 	eor.w	r2, r3, #1
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <dspPrepareInput+0x48>)
 8003dd4:	480e      	ldr	r0, [pc, #56]	; (8003e10 <dspPrepareInput+0x4c>)
 8003dd6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
#define FtoQ31(x) 			(q31_t)(x * 2147483648.0f)
#define Q31toF(x) 			(float)(x / 2147483648.0f)
//#define q31ToPwm(x)			(uint16_t)((x >> 21) + PWM_HALF)
//#define adcToQ31(x)			(q31_t)((x - ADC_HALF) << 20)
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
inline q31_t	adcToQ31(int16_t input)	{return ((input - ADC_HALF) << 20);}
 8003dda:	f9b3 2000 	ldrsh.w	r2, [r3]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003dde:	3101      	adds	r1, #1
 8003de0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003de4:	0512      	lsls	r2, r2, #20
		int ptr = i * ADC_DMA_CHANNELS + adcBuffStart;
		dspInI[i] = adcToQ31(inBuf[ptr]);
 8003de6:	f844 2b04 	str.w	r2, [r4], #4
 8003dea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003dee:	2980      	cmp	r1, #128	; 0x80
 8003df0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003df4:	ea4f 5202 	mov.w	r2, r2, lsl #20
		dspInQ[i] = adcToQ31(inBuf[ptr + 1]);
 8003df8:	f840 2b04 	str.w	r2, [r0], #4
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003dfc:	f103 0304 	add.w	r3, r3, #4
 8003e00:	d1eb      	bne.n	8003dda <dspPrepareInput+0x16>
	}
}
 8003e02:	bd10      	pop	{r4, pc}
 8003e04:	20000975 	.word	0x20000975
 8003e08:	20000374 	.word	0x20000374
 8003e0c:	20000ea4 	.word	0x20000ea4
 8003e10:	20000574 	.word	0x20000574

08003e14 <dspPrepareOutput>:
void dspPrepareOutput(void){

#ifdef DSP_DECIMATED
	int adcBuffStart = ADC_BUFFER_LEN/(ADC_DMA_CHANNELS*2) * (dspRingHalf == HALF_LOWER);

	for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8003e14:	2100      	movs	r1, #0
	int adcBuffStart = ADC_BUFFER_LEN/(ADC_DMA_CHANNELS*2) * (dspRingHalf == HALF_LOWER);
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <dspPrepareOutput+0x30>)
 8003e18:	480b      	ldr	r0, [pc, #44]	; (8003e48 <dspPrepareOutput+0x34>)
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	f082 0301 	eor.w	r3, r2, #1
 8003e20:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <dspPrepareOutput+0x38>)
 8003e22:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		int ptr = adcBuffStart + k*2;
		outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8003e26:	f850 3b04 	ldr.w	r3, [r0], #4
	for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8003e2a:	3101      	adds	r1, #1
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
 8003e2c:	155b      	asrs	r3, r3, #21
 8003e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2940      	cmp	r1, #64	; 0x40
		outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8003e36:	8013      	strh	r3, [r2, #0]
		outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8003e38:	8053      	strh	r3, [r2, #2]
	for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8003e3a:	f102 0204 	add.w	r2, r2, #4
 8003e3e:	d1f2      	bne.n	8003e26 <dspPrepareOutput+0x12>
	for (int k=0; k < DSP_BLOCK_SIZE; k++){
		outBuf[adcBuffStart + k] = 		q31toPwm(dspOut[k]);
	}
#endif

}
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000975 	.word	0x20000975
 8003e48:	20000774 	.word	0x20000774
 8003e4c:	200012a4 	.word	0x200012a4

08003e50 <dspProc>:

q31_t sinX = 0;
void dspProc(void){
 8003e50:	b510      	push	{r4, lr}

	if (!dspProcDone){
 8003e52:	4c0e      	ldr	r4, [pc, #56]	; (8003e8c <dspProc+0x3c>)
 8003e54:	7823      	ldrb	r3, [r4, #0]
 8003e56:	b9c3      	cbnz	r3, 8003e8a <dspProc+0x3a>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);

		//arm_scale_f32(blockIN, (1.0f/4096.0f), blockOUT, BUF_LEN/2);

		dspPrepareInput();
 8003e58:	f7ff ffb4 	bl	8003dc4 <dspPrepareInput>
			//arm_scale_q31(dspInI, floatQ31(2.0), 0, dspOut, BUF_LEN/2);
			//arm_copy_q31(dspInI, dspOut, DSP_BLOCK_SIZE);


			//arm_cfft_q31(&fftS, blockOUT, 0, 1);
			fftProcess(dspOut);
 8003e5c:	480c      	ldr	r0, [pc, #48]	; (8003e90 <dspProc+0x40>)
 8003e5e:	f000 f83f 	bl	8003ee0 <fftProcess>

			// main selection filter

#ifdef DSP_DECIMATED
			arm_fir_decimate_q31(&firInstanceDecI, dspInI, dspOut, DSP_BLOCK_SIZE);
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <dspProc+0x40>)
 8003e66:	490b      	ldr	r1, [pc, #44]	; (8003e94 <dspProc+0x44>)
 8003e68:	480b      	ldr	r0, [pc, #44]	; (8003e98 <dspProc+0x48>)
 8003e6a:	f000 fe5b 	bl	8004b24 <arm_fir_decimate_q31>
#ifndef DSP_DECIMATED
			arm_fir_q31(&firInstanceI, dspInI, dspOut, DSP_BLOCK_SIZE);
			//arm_fir_q31(&firInstanceQ, dspInQ, dspOut, DSP_BLOCK_SIZE);
#endif

				agcPrasolovFloat(dspOut, dspOut, DSP_BLOCK_SIZE_DEC);
 8003e6e:	4908      	ldr	r1, [pc, #32]	; (8003e90 <dspProc+0x40>)
 8003e70:	2240      	movs	r2, #64	; 0x40
 8003e72:	4608      	mov	r0, r1
 8003e74:	f7ff feb6 	bl	8003be4 <agcPrasolovFloat>
				softClip(dspOut, dspOut, DSP_BLOCK_SIZE_DEC);
 8003e78:	4905      	ldr	r1, [pc, #20]	; (8003e90 <dspProc+0x40>)
 8003e7a:	2240      	movs	r2, #64	; 0x40
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	f7ff ff21 	bl	8003cc4 <softClip>


		dspPrepareOutput();
 8003e82:	f7ff ffc7 	bl	8003e14 <dspPrepareOutput>
		dspProcDone = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	7023      	strb	r3, [r4, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
	}
}
 8003e8a:	bd10      	pop	{r4, pc}
 8003e8c:	20000974 	.word	0x20000974
 8003e90:	20000774 	.word	0x20000774
 8003e94:	20000374 	.word	0x20000374
 8003e98:	20000978 	.word	0x20000978

08003e9c <HAL_ADC_ConvHalfCpltCallback>:
 8003e9c:	4770      	bx	lr

08003e9e <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){



}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);


	dspRingHalf = HALF_UPPER;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14>)
 8003ea4:	701a      	strb	r2, [r3, #0]
	dspProcDone = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	4a03      	ldr	r2, [pc, #12]	; (8003eb8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8003eaa:	7013      	strb	r3, [r2, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,dspRingHalf);
	elseDone = 0;
 8003eac:	4a03      	ldr	r2, [pc, #12]	; (8003ebc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1c>)
 8003eae:	7013      	strb	r3, [r2, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

};
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000975 	.word	0x20000975
 8003eb8:	20000974 	.word	0x20000974
 8003ebc:	20000030 	.word	0x20000030

08003ec0 <HAL_TIM_PWM_PulseFinishedCallback>:


	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

		dspRingHalf = HALF_LOWER;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4a03      	ldr	r2, [pc, #12]	; (8003ed0 <HAL_TIM_PWM_PulseFinishedCallback+0x10>)
 8003ec4:	7013      	strb	r3, [r2, #0]
		dspProcDone = 0;
 8003ec6:	4a03      	ldr	r2, [pc, #12]	; (8003ed4 <HAL_TIM_PWM_PulseFinishedCallback+0x14>)
 8003ec8:	7013      	strb	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,dspRingHalf);
		elseDone = 0;
 8003eca:	4a03      	ldr	r2, [pc, #12]	; (8003ed8 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8003ecc:	7013      	strb	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

}
 8003ece:	4770      	bx	lr
 8003ed0:	20000975 	.word	0x20000975
 8003ed4:	20000974 	.word	0x20000974
 8003ed8:	20000030 	.word	0x20000030

08003edc <fftInit>:

arm_cfft_instance_q31 fftS;

void fftInit(void) {
	//arm_cfft_radix4_init_q31(&fftS, FFT_LEN, 0, 1);
}
 8003edc:	4770      	bx	lr
	...

08003ee0 <fftProcess>:

q31_t fftBuf[FFT_LEN*2];
q31_t magnitudes[FFT_LEN/2];

void fftProcess(q31_t *inputF32) {
 8003ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	//arm_cfft_radix4_q31(&fftS, inputF32);

	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 8003ee2:	4c0e      	ldr	r4, [pc, #56]	; (8003f1c <fftProcess+0x3c>)
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 8003ee4:	4d0e      	ldr	r5, [pc, #56]	; (8003f20 <fftProcess+0x40>)
	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	f000 f821 	bl	8003f30 <arm_copy_q31>
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	480b      	ldr	r0, [pc, #44]	; (8003f24 <fftProcess+0x44>)
 8003ef6:	f000 f995 	bl	8004224 <arm_cfft_q31>
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 8003efa:	4629      	mov	r1, r5
 8003efc:	4620      	mov	r0, r4
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	f000 fee8 	bl	8004cd4 <arm_cmplx_mag_q31>

	arm_scale_q31(magnitudes, 2126008812, -24, magnitudes, FFT_LEN/2);
 8003f04:	2340      	movs	r3, #64	; 0x40
 8003f06:	f06f 0217 	mvn.w	r2, #23
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	462b      	mov	r3, r5
 8003f10:	4905      	ldr	r1, [pc, #20]	; (8003f28 <fftProcess+0x48>)
 8003f12:	f001 f861 	bl	8004fd8 <arm_scale_q31>



	//arm_max_f32(fftMagnitudesdB, FFT_LEN, &maxValue, &maxIndex);
}
 8003f16:	b003      	add	sp, #12
 8003f18:	bd30      	pop	{r4, r5, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200014a8 	.word	0x200014a8
 8003f20:	200018b8 	.word	0x200018b8
 8003f24:	200018a8 	.word	0x200018a8
 8003f28:	7eb851ec 	.word	0x7eb851ec

08003f2c <firInit>:


	//arm_fir_decimate_init_q31(&firInstanceI, FIR_NUM_TAPS, 2, firCoeffs, firStateI, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&firInstanceQ, FIR_NUM_TAPS, 2, firCoeffs, firStateQ, DSP_BLOCK_SIZE);

}
 8003f2c:	4770      	bx	lr
	...

08003f30 <arm_copy_q31>:
 8003f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f34:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003f38:	4696      	mov	lr, r2
 8003f3a:	468c      	mov	ip, r1
 8003f3c:	d01e      	beq.n	8003f7c <arm_copy_q31+0x4c>
 8003f3e:	4645      	mov	r5, r8
 8003f40:	f100 0410 	add.w	r4, r0, #16
 8003f44:	f101 0310 	add.w	r3, r1, #16
 8003f48:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8003f4c:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8003f50:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8003f54:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8003f58:	3d01      	subs	r5, #1
 8003f5a:	f843 1c10 	str.w	r1, [r3, #-16]
 8003f5e:	f843 2c0c 	str.w	r2, [r3, #-12]
 8003f62:	f843 7c08 	str.w	r7, [r3, #-8]
 8003f66:	f843 6c04 	str.w	r6, [r3, #-4]
 8003f6a:	f104 0410 	add.w	r4, r4, #16
 8003f6e:	f103 0310 	add.w	r3, r3, #16
 8003f72:	d1e9      	bne.n	8003f48 <arm_copy_q31+0x18>
 8003f74:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003f78:	4440      	add	r0, r8
 8003f7a:	44c4      	add	ip, r8
 8003f7c:	f01e 0203 	ands.w	r2, lr, #3
 8003f80:	d007      	beq.n	8003f92 <arm_copy_q31+0x62>
 8003f82:	f1ac 0104 	sub.w	r1, ip, #4
 8003f86:	f850 3b04 	ldr.w	r3, [r0], #4
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	f841 3f04 	str.w	r3, [r1, #4]!
 8003f90:	d1f9      	bne.n	8003f86 <arm_copy_q31+0x56>
 8003f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f96:	bf00      	nop

08003f98 <arm_cfft_radix4by2_q31>:
 8003f98:	460b      	mov	r3, r1
 8003f9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	b08b      	sub	sp, #44	; 0x2c
 8003fa2:	9107      	str	r1, [sp, #28]
 8003fa4:	4682      	mov	sl, r0
 8003fa6:	9205      	str	r2, [sp, #20]
 8003fa8:	9306      	str	r3, [sp, #24]
 8003faa:	f000 8084 	beq.w	80040b6 <arm_cfft_radix4by2_q31+0x11e>
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	eb00 0b03 	add.w	fp, r0, r3
 8003fb4:	46de      	mov	lr, fp
 8003fb6:	46d4      	mov	ip, sl
 8003fb8:	4691      	mov	r9, r2
 8003fba:	9308      	str	r3, [sp, #32]
 8003fbc:	2500      	movs	r5, #0
 8003fbe:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003fc2:	f85b 3035 	ldr.w	r3, [fp, r5, lsl #3]
 8003fc6:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8003fca:	109e      	asrs	r6, r3, #2
 8003fcc:	9b05      	ldr	r3, [sp, #20]
 8003fce:	1092      	asrs	r2, r2, #2
 8003fd0:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8003fd4:	1991      	adds	r1, r2, r6
 8003fd6:	2700      	movs	r7, #0
 8003fd8:	1b92      	subs	r2, r2, r6
 8003fda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003fde:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8003fe2:	fbc3 6702 	smlal	r6, r7, r3, r2
 8003fe6:	f84a 1035 	str.w	r1, [sl, r5, lsl #3]
 8003fea:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003fee:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003ff2:	1080      	asrs	r0, r0, #2
 8003ff4:	1089      	asrs	r1, r1, #2
 8003ff6:	ebc1 0800 	rsb	r8, r1, r0
 8003ffa:	9701      	str	r7, [sp, #4]
 8003ffc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004000:	2700      	movs	r7, #0
 8004002:	fbc8 6703 	smlal	r6, r7, r8, r3
 8004006:	2300      	movs	r3, #0
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	9302      	str	r3, [sp, #8]
 800400c:	fb82 2304 	smull	r2, r3, r2, r4
 8004010:	9703      	str	r7, [sp, #12]
 8004012:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004016:	1ab6      	subs	r6, r6, r2
 8004018:	eb67 0703 	sbc.w	r7, r7, r3
 800401c:	4632      	mov	r2, r6
 800401e:	463b      	mov	r3, r7
 8004020:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004024:	fbc4 6708 	smlal	r6, r7, r4, r8
 8004028:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800402c:	f147 0700 	adc.w	r7, r7, #0
 8004030:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004034:	f143 0300 	adc.w	r3, r3, #0
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4401      	add	r1, r0
 800403c:	007a      	lsls	r2, r7, #1
 800403e:	f8cc 1004 	str.w	r1, [ip, #4]
 8004042:	f84b 2035 	str.w	r2, [fp, r5, lsl #3]
 8004046:	f8ce 3004 	str.w	r3, [lr, #4]
 800404a:	9b06      	ldr	r3, [sp, #24]
 800404c:	3501      	adds	r5, #1
 800404e:	429d      	cmp	r5, r3
 8004050:	f109 0908 	add.w	r9, r9, #8
 8004054:	f10c 0c08 	add.w	ip, ip, #8
 8004058:	f10e 0e08 	add.w	lr, lr, #8
 800405c:	d1b1      	bne.n	8003fc2 <arm_cfft_radix4by2_q31+0x2a>
 800405e:	9e05      	ldr	r6, [sp, #20]
 8004060:	4650      	mov	r0, sl
 8004062:	4629      	mov	r1, r5
 8004064:	4632      	mov	r2, r6
 8004066:	2302      	movs	r3, #2
 8004068:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800406a:	f000 f939 	bl	80042e0 <arm_radix4_butterfly_q31>
 800406e:	9b07      	ldr	r3, [sp, #28]
 8004070:	4629      	mov	r1, r5
 8004072:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004076:	4632      	mov	r2, r6
 8004078:	2302      	movs	r3, #2
 800407a:	f000 f931 	bl	80042e0 <arm_radix4_butterfly_q31>
 800407e:	9b08      	ldr	r3, [sp, #32]
 8004080:	f10a 0a04 	add.w	sl, sl, #4
 8004084:	449b      	add	fp, r3
 8004086:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800408a:	1d21      	adds	r1, r4, #4
 800408c:	c90e      	ldmia	r1, {r1, r2, r3}
 800408e:	0040      	lsls	r0, r0, #1
 8004090:	0049      	lsls	r1, r1, #1
 8004092:	0052      	lsls	r2, r2, #1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	f84a 0c04 	str.w	r0, [sl, #-4]
 800409a:	3410      	adds	r4, #16
 800409c:	f844 1c0c 	str.w	r1, [r4, #-12]
 80040a0:	f844 2c08 	str.w	r2, [r4, #-8]
 80040a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80040a8:	455c      	cmp	r4, fp
 80040aa:	f10a 0a10 	add.w	sl, sl, #16
 80040ae:	d1ea      	bne.n	8004086 <arm_cfft_radix4by2_q31+0xee>
 80040b0:	b00b      	add	sp, #44	; 0x2c
 80040b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b6:	461c      	mov	r4, r3
 80040b8:	4619      	mov	r1, r3
 80040ba:	2302      	movs	r3, #2
 80040bc:	f000 f910 	bl	80042e0 <arm_radix4_butterfly_q31>
 80040c0:	4621      	mov	r1, r4
 80040c2:	9b07      	ldr	r3, [sp, #28]
 80040c4:	9a05      	ldr	r2, [sp, #20]
 80040c6:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 80040ca:	2302      	movs	r3, #2
 80040cc:	b00b      	add	sp, #44	; 0x2c
 80040ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d2:	f000 b905 	b.w	80042e0 <arm_radix4_butterfly_q31>
 80040d6:	bf00      	nop

080040d8 <arm_cfft_radix4by2_inverse_q31>:
 80040d8:	460b      	mov	r3, r1
 80040da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	b08b      	sub	sp, #44	; 0x2c
 80040e2:	9107      	str	r1, [sp, #28]
 80040e4:	4682      	mov	sl, r0
 80040e6:	4611      	mov	r1, r2
 80040e8:	9205      	str	r2, [sp, #20]
 80040ea:	9306      	str	r3, [sp, #24]
 80040ec:	f000 8089 	beq.w	8004202 <arm_cfft_radix4by2_inverse_q31+0x12a>
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	eb00 0b03 	add.w	fp, r0, r3
 80040f6:	46de      	mov	lr, fp
 80040f8:	4684      	mov	ip, r0
 80040fa:	9308      	str	r3, [sp, #32]
 80040fc:	2500      	movs	r5, #0
 80040fe:	9009      	str	r0, [sp, #36]	; 0x24
 8004100:	f85b 2035 	ldr.w	r2, [fp, r5, lsl #3]
 8004104:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8004108:	9805      	ldr	r0, [sp, #20]
 800410a:	1096      	asrs	r6, r2, #2
 800410c:	f850 4035 	ldr.w	r4, [r0, r5, lsl #3]
 8004110:	109b      	asrs	r3, r3, #2
 8004112:	199a      	adds	r2, r3, r6
 8004114:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004118:	1b9b      	subs	r3, r3, r6
 800411a:	f04f 0900 	mov.w	r9, #0
 800411e:	6848      	ldr	r0, [r1, #4]
 8004120:	fbc4 8903 	smlal	r8, r9, r4, r3
 8004124:	f84a 2035 	str.w	r2, [sl, r5, lsl #3]
 8004128:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800412c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004130:	10be      	asrs	r6, r7, #2
 8004132:	1092      	asrs	r2, r2, #2
 8004134:	9604      	str	r6, [sp, #16]
 8004136:	f8cd 9004 	str.w	r9, [sp, #4]
 800413a:	1ab6      	subs	r6, r6, r2
 800413c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004140:	f04f 0900 	mov.w	r9, #0
 8004144:	fbc6 8904 	smlal	r8, r9, r6, r4
 8004148:	fb86 6700 	smull	r6, r7, r6, r0
 800414c:	2400      	movs	r4, #0
 800414e:	9400      	str	r4, [sp, #0]
 8004150:	f8cd 900c 	str.w	r9, [sp, #12]
 8004154:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004158:	f8cd 8008 	str.w	r8, [sp, #8]
 800415c:	ebb8 0806 	subs.w	r8, r8, r6
 8004160:	eb69 0907 	sbc.w	r9, r9, r7
 8004164:	4646      	mov	r6, r8
 8004166:	464f      	mov	r7, r9
 8004168:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800416c:	fbc0 8903 	smlal	r8, r9, r0, r3
 8004170:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8004174:	9b04      	ldr	r3, [sp, #16]
 8004176:	f147 0700 	adc.w	r7, r7, #0
 800417a:	441a      	add	r2, r3
 800417c:	007b      	lsls	r3, r7, #1
 800417e:	f8cc 2004 	str.w	r2, [ip, #4]
 8004182:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004186:	f84b 3035 	str.w	r3, [fp, r5, lsl #3]
 800418a:	9b06      	ldr	r3, [sp, #24]
 800418c:	f149 0900 	adc.w	r9, r9, #0
 8004190:	3501      	adds	r5, #1
 8004192:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8004196:	429d      	cmp	r5, r3
 8004198:	f8ce 2004 	str.w	r2, [lr, #4]
 800419c:	f101 0108 	add.w	r1, r1, #8
 80041a0:	f10c 0c08 	add.w	ip, ip, #8
 80041a4:	f10e 0e08 	add.w	lr, lr, #8
 80041a8:	d1aa      	bne.n	8004100 <arm_cfft_radix4by2_inverse_q31+0x28>
 80041aa:	9e05      	ldr	r6, [sp, #20]
 80041ac:	4650      	mov	r0, sl
 80041ae:	4629      	mov	r1, r5
 80041b0:	4632      	mov	r2, r6
 80041b2:	2302      	movs	r3, #2
 80041b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80041b6:	f000 faa1 	bl	80046fc <arm_radix4_butterfly_inverse_q31>
 80041ba:	9b07      	ldr	r3, [sp, #28]
 80041bc:	4629      	mov	r1, r5
 80041be:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 80041c2:	4632      	mov	r2, r6
 80041c4:	2302      	movs	r3, #2
 80041c6:	f000 fa99 	bl	80046fc <arm_radix4_butterfly_inverse_q31>
 80041ca:	9b08      	ldr	r3, [sp, #32]
 80041cc:	f10a 0a04 	add.w	sl, sl, #4
 80041d0:	449b      	add	fp, r3
 80041d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80041d6:	1d21      	adds	r1, r4, #4
 80041d8:	c90e      	ldmia	r1, {r1, r2, r3}
 80041da:	0040      	lsls	r0, r0, #1
 80041dc:	0049      	lsls	r1, r1, #1
 80041de:	0052      	lsls	r2, r2, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	f84a 0c04 	str.w	r0, [sl, #-4]
 80041e6:	3410      	adds	r4, #16
 80041e8:	f844 1c0c 	str.w	r1, [r4, #-12]
 80041ec:	f844 2c08 	str.w	r2, [r4, #-8]
 80041f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80041f4:	455c      	cmp	r4, fp
 80041f6:	f10a 0a10 	add.w	sl, sl, #16
 80041fa:	d1ea      	bne.n	80041d2 <arm_cfft_radix4by2_inverse_q31+0xfa>
 80041fc:	b00b      	add	sp, #44	; 0x2c
 80041fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004202:	461c      	mov	r4, r3
 8004204:	4619      	mov	r1, r3
 8004206:	2302      	movs	r3, #2
 8004208:	f000 fa78 	bl	80046fc <arm_radix4_butterfly_inverse_q31>
 800420c:	4621      	mov	r1, r4
 800420e:	9b07      	ldr	r3, [sp, #28]
 8004210:	9a05      	ldr	r2, [sp, #20]
 8004212:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004216:	2302      	movs	r3, #2
 8004218:	b00b      	add	sp, #44	; 0x2c
 800421a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421e:	f000 ba6d 	b.w	80046fc <arm_radix4_butterfly_inverse_q31>
 8004222:	bf00      	nop

08004224 <arm_cfft_q31>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	2a01      	cmp	r2, #1
 8004228:	460d      	mov	r5, r1
 800422a:	4604      	mov	r4, r0
 800422c:	461e      	mov	r6, r3
 800422e:	8801      	ldrh	r1, [r0, #0]
 8004230:	d024      	beq.n	800427c <arm_cfft_q31+0x58>
 8004232:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004236:	d013      	beq.n	8004260 <arm_cfft_q31+0x3c>
 8004238:	d808      	bhi.n	800424c <arm_cfft_q31+0x28>
 800423a:	2920      	cmp	r1, #32
 800423c:	d031      	beq.n	80042a2 <arm_cfft_q31+0x7e>
 800423e:	d945      	bls.n	80042cc <arm_cfft_q31+0xa8>
 8004240:	2940      	cmp	r1, #64	; 0x40
 8004242:	d00d      	beq.n	8004260 <arm_cfft_q31+0x3c>
 8004244:	2980      	cmp	r1, #128	; 0x80
 8004246:	d02c      	beq.n	80042a2 <arm_cfft_q31+0x7e>
 8004248:	b98e      	cbnz	r6, 800426e <arm_cfft_q31+0x4a>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004250:	d006      	beq.n	8004260 <arm_cfft_q31+0x3c>
 8004252:	d923      	bls.n	800429c <arm_cfft_q31+0x78>
 8004254:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004258:	d023      	beq.n	80042a2 <arm_cfft_q31+0x7e>
 800425a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800425e:	d1f3      	bne.n	8004248 <arm_cfft_q31+0x24>
 8004260:	4628      	mov	r0, r5
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	2301      	movs	r3, #1
 8004266:	f000 f83b 	bl	80042e0 <arm_radix4_butterfly_q31>
 800426a:	2e00      	cmp	r6, #0
 800426c:	d0ed      	beq.n	800424a <arm_cfft_q31+0x26>
 800426e:	4628      	mov	r0, r5
 8004270:	89a1      	ldrh	r1, [r4, #12]
 8004272:	68a2      	ldr	r2, [r4, #8]
 8004274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004278:	f7fb bf68 	b.w	800014c <arm_bitreversal_32>
 800427c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004280:	d01e      	beq.n	80042c0 <arm_cfft_q31+0x9c>
 8004282:	d813      	bhi.n	80042ac <arm_cfft_q31+0x88>
 8004284:	2920      	cmp	r1, #32
 8004286:	d004      	beq.n	8004292 <arm_cfft_q31+0x6e>
 8004288:	d927      	bls.n	80042da <arm_cfft_q31+0xb6>
 800428a:	2940      	cmp	r1, #64	; 0x40
 800428c:	d018      	beq.n	80042c0 <arm_cfft_q31+0x9c>
 800428e:	2980      	cmp	r1, #128	; 0x80
 8004290:	d1da      	bne.n	8004248 <arm_cfft_q31+0x24>
 8004292:	4628      	mov	r0, r5
 8004294:	6862      	ldr	r2, [r4, #4]
 8004296:	f7ff ff1f 	bl	80040d8 <arm_cfft_radix4by2_inverse_q31>
 800429a:	e7d5      	b.n	8004248 <arm_cfft_q31+0x24>
 800429c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80042a0:	d1d2      	bne.n	8004248 <arm_cfft_q31+0x24>
 80042a2:	4628      	mov	r0, r5
 80042a4:	6862      	ldr	r2, [r4, #4]
 80042a6:	f7ff fe77 	bl	8003f98 <arm_cfft_radix4by2_q31>
 80042aa:	e7cd      	b.n	8004248 <arm_cfft_q31+0x24>
 80042ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80042b0:	d006      	beq.n	80042c0 <arm_cfft_q31+0x9c>
 80042b2:	d90e      	bls.n	80042d2 <arm_cfft_q31+0xae>
 80042b4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80042b8:	d0eb      	beq.n	8004292 <arm_cfft_q31+0x6e>
 80042ba:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80042be:	d1c3      	bne.n	8004248 <arm_cfft_q31+0x24>
 80042c0:	4628      	mov	r0, r5
 80042c2:	6862      	ldr	r2, [r4, #4]
 80042c4:	2301      	movs	r3, #1
 80042c6:	f000 fa19 	bl	80046fc <arm_radix4_butterfly_inverse_q31>
 80042ca:	e7bd      	b.n	8004248 <arm_cfft_q31+0x24>
 80042cc:	2910      	cmp	r1, #16
 80042ce:	d1bb      	bne.n	8004248 <arm_cfft_q31+0x24>
 80042d0:	e7c6      	b.n	8004260 <arm_cfft_q31+0x3c>
 80042d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80042d6:	d0dc      	beq.n	8004292 <arm_cfft_q31+0x6e>
 80042d8:	e7b6      	b.n	8004248 <arm_cfft_q31+0x24>
 80042da:	2910      	cmp	r1, #16
 80042dc:	d1b4      	bne.n	8004248 <arm_cfft_q31+0x24>
 80042de:	e7ef      	b.n	80042c0 <arm_cfft_q31+0x9c>

080042e0 <arm_radix4_butterfly_q31>:
 80042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e4:	461e      	mov	r6, r3
 80042e6:	b0a1      	sub	sp, #132	; 0x84
 80042e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80042ea:	0889      	lsrs	r1, r1, #2
 80042ec:	930d      	str	r3, [sp, #52]	; 0x34
 80042ee:	00cb      	lsls	r3, r1, #3
 80042f0:	4605      	mov	r5, r0
 80042f2:	901e      	str	r0, [sp, #120]	; 0x78
 80042f4:	4418      	add	r0, r3
 80042f6:	4690      	mov	r8, r2
 80042f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80042fa:	911f      	str	r1, [sp, #124]	; 0x7c
 80042fc:	9106      	str	r1, [sp, #24]
 80042fe:	9202      	str	r2, [sp, #8]
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004306:	18c2      	adds	r2, r0, r3
 8004308:	3308      	adds	r3, #8
 800430a:	eb02 0c03 	add.w	ip, r2, r3
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	930a      	str	r3, [sp, #40]	; 0x28
 8004312:	0133      	lsls	r3, r6, #4
 8004314:	f102 0b08 	add.w	fp, r2, #8
 8004318:	9308      	str	r3, [sp, #32]
 800431a:	00f3      	lsls	r3, r6, #3
 800431c:	930c      	str	r3, [sp, #48]	; 0x30
 800431e:	465b      	mov	r3, fp
 8004320:	f105 0a08 	add.w	sl, r5, #8
 8004324:	46d3      	mov	fp, sl
 8004326:	469a      	mov	sl, r3
 8004328:	f100 0908 	add.w	r9, r0, #8
 800432c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004330:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8004334:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 8004338:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 800433c:	f859 1c08 	ldr.w	r1, [r9, #-8]
 8004340:	ea4f 1820 	mov.w	r8, r0, asr #4
 8004344:	1112      	asrs	r2, r2, #4
 8004346:	111b      	asrs	r3, r3, #4
 8004348:	eb08 0402 	add.w	r4, r8, r2
 800434c:	eb03 1521 	add.w	r5, r3, r1, asr #4
 8004350:	1963      	adds	r3, r4, r5
 8004352:	9204      	str	r2, [sp, #16]
 8004354:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8004358:	f84b 3c08 	str.w	r3, [fp, #-8]
 800435c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8004360:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8004364:	f859 1c04 	ldr.w	r1, [r9, #-4]
 8004368:	ea4f 1e22 	mov.w	lr, r2, asr #4
 800436c:	1106      	asrs	r6, r0, #4
 800436e:	111b      	asrs	r3, r3, #4
 8004370:	9607      	str	r6, [sp, #28]
 8004372:	eb03 1121 	add.w	r1, r3, r1, asr #4
 8004376:	4476      	add	r6, lr
 8004378:	1873      	adds	r3, r6, r1
 800437a:	f84b 3c04 	str.w	r3, [fp, #-4]
 800437e:	9b01      	ldr	r3, [sp, #4]
 8004380:	1a71      	subs	r1, r6, r1
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	fb81 6702 	smull	r6, r7, r1, r2
 800438a:	463e      	mov	r6, r7
 800438c:	1b63      	subs	r3, r4, r5
 800438e:	fb83 4500 	smull	r4, r5, r3, r0
 8004392:	fb80 0101 	smull	r0, r1, r0, r1
 8004396:	fb83 2302 	smull	r2, r3, r3, r2
 800439a:	442e      	add	r6, r5
 800439c:	1acd      	subs	r5, r1, r3
 800439e:	e91c 0006 	ldmdb	ip, {r1, r2}
 80043a2:	1110      	asrs	r0, r2, #4
 80043a4:	9a04      	ldr	r2, [sp, #16]
 80043a6:	e919 0018 	ldmdb	r9, {r3, r4}
 80043aa:	ebc2 0208 	rsb	r2, r2, r8
 80043ae:	0076      	lsls	r6, r6, #1
 80043b0:	ebc0 1824 	rsb	r8, r0, r4, asr #4
 80043b4:	006d      	lsls	r5, r5, #1
 80043b6:	9800      	ldr	r0, [sp, #0]
 80043b8:	f849 6c08 	str.w	r6, [r9, #-8]
 80043bc:	f849 5c04 	str.w	r5, [r9, #-4]
 80043c0:	6805      	ldr	r5, [r0, #0]
 80043c2:	9e07      	ldr	r6, [sp, #28]
 80043c4:	1109      	asrs	r1, r1, #4
 80043c6:	ebc1 1323 	rsb	r3, r1, r3, asr #4
 80043ca:	6841      	ldr	r1, [r0, #4]
 80043cc:	eb02 0008 	add.w	r0, r2, r8
 80043d0:	ebce 0e06 	rsb	lr, lr, r6
 80043d4:	fb80 6705 	smull	r6, r7, r0, r5
 80043d8:	ebc3 040e 	rsb	r4, r3, lr
 80043dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043e0:	fb84 6701 	smull	r6, r7, r4, r1
 80043e4:	463e      	mov	r6, r7
 80043e6:	fb85 4504 	smull	r4, r5, r5, r4
 80043ea:	fb80 0101 	smull	r0, r1, r0, r1
 80043ee:	9f05      	ldr	r7, [sp, #20]
 80043f0:	1a69      	subs	r1, r5, r1
 80043f2:	443e      	add	r6, r7
 80043f4:	0070      	lsls	r0, r6, #1
 80043f6:	0049      	lsls	r1, r1, #1
 80043f8:	e90a 0003 	stmdb	sl, {r0, r1}
 80043fc:	9f02      	ldr	r7, [sp, #8]
 80043fe:	ebc8 0202 	rsb	r2, r8, r2
 8004402:	6839      	ldr	r1, [r7, #0]
 8004404:	687e      	ldr	r6, [r7, #4]
 8004406:	fb82 4501 	smull	r4, r5, r2, r1
 800440a:	4473      	add	r3, lr
 800440c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004410:	fb81 0103 	smull	r0, r1, r1, r3
 8004414:	fb83 4506 	smull	r4, r5, r3, r6
 8004418:	fb82 2306 	smull	r2, r3, r2, r6
 800441c:	9e08      	ldr	r6, [sp, #32]
 800441e:	1acb      	subs	r3, r1, r3
 8004420:	9901      	ldr	r1, [sp, #4]
 8004422:	9c03      	ldr	r4, [sp, #12]
 8004424:	4431      	add	r1, r6
 8004426:	9800      	ldr	r0, [sp, #0]
 8004428:	9101      	str	r1, [sp, #4]
 800442a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800442c:	442c      	add	r4, r5
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	1841      	adds	r1, r0, r1
 8004432:	0062      	lsls	r2, r4, #1
 8004434:	e90c 000c 	stmdb	ip, {r2, r3}
 8004438:	9100      	str	r1, [sp, #0]
 800443a:	9b06      	ldr	r3, [sp, #24]
 800443c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	4439      	add	r1, r7
 8004442:	f10b 0b08 	add.w	fp, fp, #8
 8004446:	f109 0908 	add.w	r9, r9, #8
 800444a:	f10a 0a08 	add.w	sl, sl, #8
 800444e:	9102      	str	r1, [sp, #8]
 8004450:	f10c 0c08 	add.w	ip, ip, #8
 8004454:	9306      	str	r3, [sp, #24]
 8004456:	f47f af6b 	bne.w	8004330 <arm_radix4_butterfly_q31+0x50>
 800445a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	9316      	str	r3, [sp, #88]	; 0x58
 8004460:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004462:	2b04      	cmp	r3, #4
 8004464:	f240 80f9 	bls.w	800465a <arm_radix4_butterfly_q31+0x37a>
 8004468:	931c      	str	r3, [sp, #112]	; 0x70
 800446a:	930e      	str	r3, [sp, #56]	; 0x38
 800446c:	2300      	movs	r3, #0
 800446e:	9312      	str	r3, [sp, #72]	; 0x48
 8004470:	9315      	str	r3, [sp, #84]	; 0x54
 8004472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004474:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004476:	9314      	str	r3, [sp, #80]	; 0x50
 8004478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800447a:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800447e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004480:	0883      	lsrs	r3, r0, #2
 8004482:	4619      	mov	r1, r3
 8004484:	931d      	str	r3, [sp, #116]	; 0x74
 8004486:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004488:	1e4a      	subs	r2, r1, #1
 800448a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800448e:	9218      	str	r2, [sp, #96]	; 0x60
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	00ca      	lsls	r2, r1, #3
 8004494:	9219      	str	r2, [sp, #100]	; 0x64
 8004496:	931a      	str	r3, [sp, #104]	; 0x68
 8004498:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 800449c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800449e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044a0:	4622      	mov	r2, r4
 80044a2:	4618      	mov	r0, r3
 80044a4:	00d9      	lsls	r1, r3, #3
 80044a6:	440a      	add	r2, r1
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	4411      	add	r1, r2
 80044ac:	58e3      	ldr	r3, [r4, r3]
 80044ae:	6849      	ldr	r1, [r1, #4]
 80044b0:	6852      	ldr	r2, [r2, #4]
 80044b2:	9310      	str	r3, [sp, #64]	; 0x40
 80044b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044b6:	9104      	str	r1, [sp, #16]
 80044b8:	9202      	str	r2, [sp, #8]
 80044ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80044bc:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 80044c0:	18c3      	adds	r3, r0, r3
 80044c2:	9206      	str	r2, [sp, #24]
 80044c4:	9315      	str	r3, [sp, #84]	; 0x54
 80044c6:	680a      	ldr	r2, [r1, #0]
 80044c8:	684b      	ldr	r3, [r1, #4]
 80044ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80044cc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044ce:	9207      	str	r2, [sp, #28]
 80044d0:	9311      	str	r3, [sp, #68]	; 0x44
 80044d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044d6:	eb07 0a05 	add.w	sl, r7, r5
 80044da:	eb0a 0b05 	add.w	fp, sl, r5
 80044de:	4293      	cmp	r3, r2
 80044e0:	eb0b 0e05 	add.w	lr, fp, r5
 80044e4:	f240 80a0 	bls.w	8004628 <arm_radix4_butterfly_q31+0x348>
 80044e8:	4613      	mov	r3, r2
 80044ea:	46d8      	mov	r8, fp
 80044ec:	46d3      	mov	fp, sl
 80044ee:	46ba      	mov	sl, r7
 80044f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044f2:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80044f6:	4413      	add	r3, r2
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	9b00      	ldr	r3, [sp, #0]
 80044fc:	f8da c000 	ldr.w	ip, [sl]
 8004500:	f8d8 5000 	ldr.w	r5, [r8]
 8004504:	f8db 2000 	ldr.w	r2, [fp]
 8004508:	930c      	str	r3, [sp, #48]	; 0x30
 800450a:	f8de 3000 	ldr.w	r3, [lr]
 800450e:	eb0c 0705 	add.w	r7, ip, r5
 8004512:	441a      	add	r2, r3
 8004514:	18b9      	adds	r1, r7, r2
 8004516:	1089      	asrs	r1, r1, #2
 8004518:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800451c:	f8ca 1000 	str.w	r1, [sl]
 8004520:	f8db 4004 	ldr.w	r4, [fp, #4]
 8004524:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004528:	f8de 0004 	ldr.w	r0, [lr, #4]
 800452c:	18ce      	adds	r6, r1, r3
 800452e:	4420      	add	r0, r4
 8004530:	1834      	adds	r4, r6, r0
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	f8ca 4004 	str.w	r4, [sl, #4]
 8004538:	1ac9      	subs	r1, r1, r3
 800453a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800453e:	ebc5 050c 	rsb	r5, r5, ip
 8004542:	469c      	mov	ip, r3
 8004544:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004548:	f8de 4000 	ldr.w	r4, [lr]
 800454c:	ebc3 0c0c 	rsb	ip, r3, ip
 8004550:	f8db 3000 	ldr.w	r3, [fp]
 8004554:	1aba      	subs	r2, r7, r2
 8004556:	1b1b      	subs	r3, r3, r4
 8004558:	eb05 040c 	add.w	r4, r5, ip
 800455c:	ebcc 0c05 	rsb	ip, ip, r5
 8004560:	1acd      	subs	r5, r1, r3
 8004562:	440b      	add	r3, r1
 8004564:	9906      	ldr	r1, [sp, #24]
 8004566:	1a30      	subs	r0, r6, r0
 8004568:	fb84 6701 	smull	r6, r7, r4, r1
 800456c:	9902      	ldr	r1, [sp, #8]
 800456e:	9001      	str	r0, [sp, #4]
 8004570:	fb85 0101 	smull	r0, r1, r5, r1
 8004574:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004578:	9801      	ldr	r0, [sp, #4]
 800457a:	9904      	ldr	r1, [sp, #16]
 800457c:	44ca      	add	sl, r9
 800457e:	fb80 0101 	smull	r0, r1, r0, r1
 8004582:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004586:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004588:	19cf      	adds	r7, r1, r7
 800458a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800458c:	970d      	str	r7, [sp, #52]	; 0x34
 800458e:	4608      	mov	r0, r1
 8004590:	fb82 6701 	smull	r6, r7, r2, r1
 8004594:	9901      	ldr	r1, [sp, #4]
 8004596:	fb81 0100 	smull	r0, r1, r1, r0
 800459a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800459e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045a0:	19c6      	adds	r6, r0, r7
 80045a2:	9601      	str	r6, [sp, #4]
 80045a4:	9e04      	ldr	r6, [sp, #16]
 80045a6:	4630      	mov	r0, r6
 80045a8:	fb82 6700 	smull	r6, r7, r2, r0
 80045ac:	9a06      	ldr	r2, [sp, #24]
 80045ae:	fb85 0102 	smull	r0, r1, r5, r2
 80045b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80045b6:	9d02      	ldr	r5, [sp, #8]
 80045b8:	9907      	ldr	r1, [sp, #28]
 80045ba:	fb84 4505 	smull	r4, r5, r4, r5
 80045be:	fb8c 0101 	smull	r0, r1, ip, r1
 80045c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80045cc:	9c07      	ldr	r4, [sp, #28]
 80045ce:	1b40      	subs	r0, r0, r5
 80045d0:	1bd2      	subs	r2, r2, r7
 80045d2:	fb83 4504 	smull	r4, r5, r3, r4
 80045d6:	fb83 6701 	smull	r6, r7, r3, r1
 80045da:	9008      	str	r0, [sp, #32]
 80045dc:	fb8c 0101 	smull	r0, r1, ip, r1
 80045e0:	9e01      	ldr	r6, [sp, #4]
 80045e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e4:	1a69      	subs	r1, r5, r1
 80045e6:	1052      	asrs	r2, r2, #1
 80045e8:	1075      	asrs	r5, r6, #1
 80045ea:	f8cb 5000 	str.w	r5, [fp]
 80045ee:	f8cb 2004 	str.w	r2, [fp, #4]
 80045f2:	443b      	add	r3, r7
 80045f4:	9a00      	ldr	r2, [sp, #0]
 80045f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80045f8:	9808      	ldr	r0, [sp, #32]
 80045fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80045fc:	105b      	asrs	r3, r3, #1
 80045fe:	442a      	add	r2, r5
 8004600:	107c      	asrs	r4, r7, #1
 8004602:	1040      	asrs	r0, r0, #1
 8004604:	f8c8 4000 	str.w	r4, [r8]
 8004608:	f8c8 0004 	str.w	r0, [r8, #4]
 800460c:	9200      	str	r2, [sp, #0]
 800460e:	f8ce 3000 	str.w	r3, [lr]
 8004612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004616:	1049      	asrs	r1, r1, #1
 8004618:	429a      	cmp	r2, r3
 800461a:	f8ce 1004 	str.w	r1, [lr, #4]
 800461e:	44cb      	add	fp, r9
 8004620:	44c8      	add	r8, r9
 8004622:	44ce      	add	lr, r9
 8004624:	f63f af69 	bhi.w	80044fa <arm_radix4_butterfly_q31+0x21a>
 8004628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800462a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800462c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800462e:	440a      	add	r2, r1
 8004630:	9213      	str	r2, [sp, #76]	; 0x4c
 8004632:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004634:	3301      	adds	r3, #1
 8004636:	3208      	adds	r2, #8
 8004638:	9214      	str	r2, [sp, #80]	; 0x50
 800463a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800463c:	9312      	str	r3, [sp, #72]	; 0x48
 800463e:	4293      	cmp	r3, r2
 8004640:	f67f af2c 	bls.w	800449c <arm_radix4_butterfly_q31+0x1bc>
 8004644:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004646:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004648:	0092      	lsls	r2, r2, #2
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	9216      	str	r2, [sp, #88]	; 0x58
 800464e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004650:	2b04      	cmp	r3, #4
 8004652:	931c      	str	r3, [sp, #112]	; 0x70
 8004654:	920e      	str	r2, [sp, #56]	; 0x38
 8004656:	f63f af09 	bhi.w	800446c <arm_radix4_butterfly_q31+0x18c>
 800465a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800465c:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8004660:	3020      	adds	r0, #32
 8004662:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8004666:	f850 3c18 	ldr.w	r3, [r0, #-24]
 800466a:	f850 1c14 	ldr.w	r1, [r0, #-20]
 800466e:	f850 8c1c 	ldr.w	r8, [r0, #-28]
 8004672:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8004676:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 800467a:	18d7      	adds	r7, r2, r3
 800467c:	1ad6      	subs	r6, r2, r3
 800467e:	1855      	adds	r5, r2, r1
 8004680:	1a52      	subs	r2, r2, r1
 8004682:	f850 ec08 	ldr.w	lr, [r0, #-8]
 8004686:	f850 bc04 	ldr.w	fp, [r0, #-4]
 800468a:	eb08 0401 	add.w	r4, r8, r1
 800468e:	4457      	add	r7, sl
 8004690:	ebc1 0108 	rsb	r1, r1, r8
 8004694:	4456      	add	r6, sl
 8004696:	ebca 0505 	rsb	r5, sl, r5
 800469a:	ebca 0202 	rsb	r2, sl, r2
 800469e:	ebc3 0a08 	rsb	sl, r3, r8
 80046a2:	4443      	add	r3, r8
 80046a4:	4461      	add	r1, ip
 80046a6:	4464      	add	r4, ip
 80046a8:	ebcc 080a 	rsb	r8, ip, sl
 80046ac:	ebcc 0303 	rsb	r3, ip, r3
 80046b0:	ebcb 0505 	rsb	r5, fp, r5
 80046b4:	445a      	add	r2, fp
 80046b6:	445c      	add	r4, fp
 80046b8:	4477      	add	r7, lr
 80046ba:	ebcb 0b01 	rsb	fp, fp, r1
 80046be:	ebce 0606 	rsb	r6, lr, r6
 80046c2:	eb08 010e 	add.w	r1, r8, lr
 80046c6:	ebce 0303 	rsb	r3, lr, r3
 80046ca:	f1b9 0901 	subs.w	r9, r9, #1
 80046ce:	f840 7c20 	str.w	r7, [r0, #-32]
 80046d2:	f840 6c18 	str.w	r6, [r0, #-24]
 80046d6:	f840 5c10 	str.w	r5, [r0, #-16]
 80046da:	f840 2c08 	str.w	r2, [r0, #-8]
 80046de:	f840 4c1c 	str.w	r4, [r0, #-28]
 80046e2:	f840 bc14 	str.w	fp, [r0, #-20]
 80046e6:	f840 1c0c 	str.w	r1, [r0, #-12]
 80046ea:	f840 3c04 	str.w	r3, [r0, #-4]
 80046ee:	f100 0020 	add.w	r0, r0, #32
 80046f2:	d1b6      	bne.n	8004662 <arm_radix4_butterfly_q31+0x382>
 80046f4:	b021      	add	sp, #132	; 0x84
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fa:	bf00      	nop

080046fc <arm_radix4_butterfly_inverse_q31>:
 80046fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	4605      	mov	r5, r0
 8004702:	4617      	mov	r7, r2
 8004704:	b0a1      	sub	sp, #132	; 0x84
 8004706:	461e      	mov	r6, r3
 8004708:	9111      	str	r1, [sp, #68]	; 0x44
 800470a:	0889      	lsrs	r1, r1, #2
 800470c:	930c      	str	r3, [sp, #48]	; 0x30
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	901e      	str	r0, [sp, #120]	; 0x78
 8004712:	4418      	add	r0, r3
 8004714:	9218      	str	r2, [sp, #96]	; 0x60
 8004716:	4694      	mov	ip, r2
 8004718:	18c2      	adds	r2, r0, r3
 800471a:	3308      	adds	r3, #8
 800471c:	eb02 0b03 	add.w	fp, r2, r3
 8004720:	f102 0908 	add.w	r9, r2, #8
 8004724:	f105 0a08 	add.w	sl, r5, #8
 8004728:	46de      	mov	lr, fp
 800472a:	46d3      	mov	fp, sl
 800472c:	46ca      	mov	sl, r9
 800472e:	46b9      	mov	r9, r7
 8004730:	911f      	str	r1, [sp, #124]	; 0x7c
 8004732:	9102      	str	r1, [sp, #8]
 8004734:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004738:	00cb      	lsls	r3, r1, #3
 800473a:	930b      	str	r3, [sp, #44]	; 0x2c
 800473c:	0133      	lsls	r3, r6, #4
 800473e:	930a      	str	r3, [sp, #40]	; 0x28
 8004740:	00f3      	lsls	r3, r6, #3
 8004742:	f100 0808 	add.w	r8, r0, #8
 8004746:	9309      	str	r3, [sp, #36]	; 0x24
 8004748:	9701      	str	r7, [sp, #4]
 800474a:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 800474e:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 8004752:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8004756:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800475a:	1100      	asrs	r0, r0, #4
 800475c:	1109      	asrs	r1, r1, #4
 800475e:	111b      	asrs	r3, r3, #4
 8004760:	1846      	adds	r6, r0, r1
 8004762:	eb03 1722 	add.w	r7, r3, r2, asr #4
 8004766:	19f3      	adds	r3, r6, r7
 8004768:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 800476c:	f84b 3c08 	str.w	r3, [fp, #-8]
 8004770:	9108      	str	r1, [sp, #32]
 8004772:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8004776:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 800477a:	f858 4c04 	ldr.w	r4, [r8, #-4]
 800477e:	111b      	asrs	r3, r3, #4
 8004780:	1112      	asrs	r2, r2, #4
 8004782:	1109      	asrs	r1, r1, #4
 8004784:	9003      	str	r0, [sp, #12]
 8004786:	eb01 1424 	add.w	r4, r1, r4, asr #4
 800478a:	1898      	adds	r0, r3, r2
 800478c:	9304      	str	r3, [sp, #16]
 800478e:	1901      	adds	r1, r0, r4
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	f84b 1c04 	str.w	r1, [fp, #-4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	460b      	mov	r3, r1
 800479c:	1bf1      	subs	r1, r6, r7
 800479e:	fb81 6705 	smull	r6, r7, r1, r5
 80047a2:	1b04      	subs	r4, r0, r4
 80047a4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80047a8:	fb81 0103 	smull	r0, r1, r1, r3
 80047ac:	fb84 6703 	smull	r6, r7, r4, r3
 80047b0:	fb85 4504 	smull	r4, r5, r5, r4
 80047b4:	9b07      	ldr	r3, [sp, #28]
 80047b6:	194e      	adds	r6, r1, r5
 80047b8:	1bdf      	subs	r7, r3, r7
 80047ba:	007f      	lsls	r7, r7, #1
 80047bc:	0076      	lsls	r6, r6, #1
 80047be:	e91e 0003 	ldmdb	lr, {r0, r1}
 80047c2:	f858 5c08 	ldr.w	r5, [r8, #-8]
 80047c6:	f858 4c04 	ldr.w	r4, [r8, #-4]
 80047ca:	f848 7c08 	str.w	r7, [r8, #-8]
 80047ce:	f848 6c04 	str.w	r6, [r8, #-4]
 80047d2:	9b04      	ldr	r3, [sp, #16]
 80047d4:	9e03      	ldr	r6, [sp, #12]
 80047d6:	9f08      	ldr	r7, [sp, #32]
 80047d8:	1109      	asrs	r1, r1, #4
 80047da:	1bf7      	subs	r7, r6, r7
 80047dc:	1a9a      	subs	r2, r3, r2
 80047de:	1100      	asrs	r0, r0, #4
 80047e0:	ebc1 1324 	rsb	r3, r1, r4, asr #4
 80047e4:	ebc0 1625 	rsb	r6, r0, r5, asr #4
 80047e8:	1afd      	subs	r5, r7, r3
 80047ea:	e899 0011 	ldmia.w	r9, {r0, r4}
 80047ee:	1991      	adds	r1, r2, r6
 80047f0:	9308      	str	r3, [sp, #32]
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	fb85 2300 	smull	r2, r3, r5, r0
 80047f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047fc:	fb81 2304 	smull	r2, r3, r1, r4
 8004800:	fb85 4504 	smull	r4, r5, r5, r4
 8004804:	fb80 0101 	smull	r0, r1, r0, r1
 8004808:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800480c:	9c05      	ldr	r4, [sp, #20]
 800480e:	f10b 0b08 	add.w	fp, fp, #8
 8004812:	1ae2      	subs	r2, r4, r3
 8004814:	9c07      	ldr	r4, [sp, #28]
 8004816:	0050      	lsls	r0, r2, #1
 8004818:	4421      	add	r1, r4
 800481a:	0049      	lsls	r1, r1, #1
 800481c:	e90a 0003 	stmdb	sl, {r0, r1}
 8004820:	9b08      	ldr	r3, [sp, #32]
 8004822:	9a03      	ldr	r2, [sp, #12]
 8004824:	f8dc 1000 	ldr.w	r1, [ip]
 8004828:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800482c:	1b92      	subs	r2, r2, r6
 800482e:	443b      	add	r3, r7
 8004830:	fb83 6701 	smull	r6, r7, r3, r1
 8004834:	fb82 4500 	smull	r4, r5, r2, r0
 8004838:	fb81 0102 	smull	r0, r1, r1, r2
 800483c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004840:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004842:	fb83 2302 	smull	r2, r3, r3, r2
 8004846:	440b      	add	r3, r1
 8004848:	9901      	ldr	r1, [sp, #4]
 800484a:	1b7c      	subs	r4, r7, r5
 800484c:	4401      	add	r1, r0
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	0062      	lsls	r2, r4, #1
 8004852:	9101      	str	r1, [sp, #4]
 8004854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004856:	e90e 000c 	stmdb	lr, {r2, r3}
 800485a:	9b02      	ldr	r3, [sp, #8]
 800485c:	4489      	add	r9, r1
 800485e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004860:	3b01      	subs	r3, #1
 8004862:	f108 0808 	add.w	r8, r8, #8
 8004866:	f10a 0a08 	add.w	sl, sl, #8
 800486a:	448c      	add	ip, r1
 800486c:	f10e 0e08 	add.w	lr, lr, #8
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	f47f af6a 	bne.w	800474a <arm_radix4_butterfly_inverse_q31+0x4e>
 8004876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	9317      	str	r3, [sp, #92]	; 0x5c
 800487c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800487e:	2b04      	cmp	r3, #4
 8004880:	f240 80ed 	bls.w	8004a5e <arm_radix4_butterfly_inverse_q31+0x362>
 8004884:	931c      	str	r3, [sp, #112]	; 0x70
 8004886:	9310      	str	r3, [sp, #64]	; 0x40
 8004888:	2300      	movs	r3, #0
 800488a:	9313      	str	r3, [sp, #76]	; 0x4c
 800488c:	9316      	str	r3, [sp, #88]	; 0x58
 800488e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004890:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004892:	9315      	str	r3, [sp, #84]	; 0x54
 8004894:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004896:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800489a:	9314      	str	r3, [sp, #80]	; 0x50
 800489c:	0883      	lsrs	r3, r0, #2
 800489e:	4619      	mov	r1, r3
 80048a0:	931d      	str	r3, [sp, #116]	; 0x74
 80048a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048a4:	1e4a      	subs	r2, r1, #1
 80048a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80048aa:	9219      	str	r2, [sp, #100]	; 0x64
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	00ca      	lsls	r2, r1, #3
 80048b0:	921a      	str	r2, [sp, #104]	; 0x68
 80048b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80048b4:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80048b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80048ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048bc:	4622      	mov	r2, r4
 80048be:	4618      	mov	r0, r3
 80048c0:	00d9      	lsls	r1, r3, #3
 80048c2:	440a      	add	r2, r1
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	4411      	add	r1, r2
 80048c8:	58e3      	ldr	r3, [r4, r3]
 80048ca:	6849      	ldr	r1, [r1, #4]
 80048cc:	6852      	ldr	r2, [r2, #4]
 80048ce:	9304      	str	r3, [sp, #16]
 80048d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048d2:	9106      	str	r1, [sp, #24]
 80048d4:	9208      	str	r2, [sp, #32]
 80048d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80048d8:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 80048dc:	18c3      	adds	r3, r0, r3
 80048de:	9203      	str	r2, [sp, #12]
 80048e0:	9316      	str	r3, [sp, #88]	; 0x58
 80048e2:	680a      	ldr	r2, [r1, #0]
 80048e4:	684b      	ldr	r3, [r1, #4]
 80048e6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80048e8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80048ea:	9209      	str	r2, [sp, #36]	; 0x24
 80048ec:	930a      	str	r3, [sp, #40]	; 0x28
 80048ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048f2:	eb07 0a05 	add.w	sl, r7, r5
 80048f6:	eb0a 0b05 	add.w	fp, sl, r5
 80048fa:	4293      	cmp	r3, r2
 80048fc:	eb0b 0e05 	add.w	lr, fp, r5
 8004900:	f240 8094 	bls.w	8004a2c <arm_radix4_butterfly_inverse_q31+0x330>
 8004904:	4613      	mov	r3, r2
 8004906:	f8cd b004 	str.w	fp, [sp, #4]
 800490a:	46d3      	mov	fp, sl
 800490c:	46ba      	mov	sl, r7
 800490e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004910:	9801      	ldr	r0, [sp, #4]
 8004912:	4413      	add	r3, r2
 8004914:	9302      	str	r3, [sp, #8]
 8004916:	9b02      	ldr	r3, [sp, #8]
 8004918:	f8da c000 	ldr.w	ip, [sl]
 800491c:	6804      	ldr	r4, [r0, #0]
 800491e:	f8db 2000 	ldr.w	r2, [fp]
 8004922:	930b      	str	r3, [sp, #44]	; 0x2c
 8004924:	f8de 3000 	ldr.w	r3, [lr]
 8004928:	eb0c 0704 	add.w	r7, ip, r4
 800492c:	441a      	add	r2, r3
 800492e:	18b9      	adds	r1, r7, r2
 8004930:	1089      	asrs	r1, r1, #2
 8004932:	6843      	ldr	r3, [r0, #4]
 8004934:	f8ca 1000 	str.w	r1, [sl]
 8004938:	f8db 5004 	ldr.w	r5, [fp, #4]
 800493c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004940:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004944:	18ce      	adds	r6, r1, r3
 8004946:	4428      	add	r0, r5
 8004948:	1835      	adds	r5, r6, r0
 800494a:	10ad      	asrs	r5, r5, #2
 800494c:	f8ca 5004 	str.w	r5, [sl, #4]
 8004950:	1ac9      	subs	r1, r1, r3
 8004952:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004956:	ebc4 040c 	rsb	r4, r4, ip
 800495a:	469c      	mov	ip, r3
 800495c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004960:	f8de 5000 	ldr.w	r5, [lr]
 8004964:	ebc3 0c0c 	rsb	ip, r3, ip
 8004968:	f8db 3000 	ldr.w	r3, [fp]
 800496c:	1aba      	subs	r2, r7, r2
 800496e:	1b5b      	subs	r3, r3, r5
 8004970:	ebcc 0504 	rsb	r5, ip, r4
 8004974:	44a4      	add	ip, r4
 8004976:	18cc      	adds	r4, r1, r3
 8004978:	1acb      	subs	r3, r1, r3
 800497a:	9903      	ldr	r1, [sp, #12]
 800497c:	1a30      	subs	r0, r6, r0
 800497e:	fb85 6701 	smull	r6, r7, r5, r1
 8004982:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8004986:	9e08      	ldr	r6, [sp, #32]
 8004988:	990d      	ldr	r1, [sp, #52]	; 0x34
 800498a:	fb84 8906 	smull	r8, r9, r4, r6
 800498e:	ebc9 0101 	rsb	r1, r9, r1
 8004992:	910e      	str	r1, [sp, #56]	; 0x38
 8004994:	9904      	ldr	r1, [sp, #16]
 8004996:	9f06      	ldr	r7, [sp, #24]
 8004998:	4688      	mov	r8, r1
 800499a:	fb80 6707 	smull	r6, r7, r0, r7
 800499e:	fb82 8908 	smull	r8, r9, r2, r8
 80049a2:	ebc7 0609 	rsb	r6, r7, r9
 80049a6:	9f06      	ldr	r7, [sp, #24]
 80049a8:	960c      	str	r6, [sp, #48]	; 0x30
 80049aa:	fb82 6707 	smull	r6, r7, r2, r7
 80049ae:	9a03      	ldr	r2, [sp, #12]
 80049b0:	fb80 0101 	smull	r0, r1, r0, r1
 80049b4:	fb84 8902 	smull	r8, r9, r4, r2
 80049b8:	9c08      	ldr	r4, [sp, #32]
 80049ba:	187a      	adds	r2, r7, r1
 80049bc:	fb85 4504 	smull	r4, r5, r5, r4
 80049c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049c2:	eb05 0409 	add.w	r4, r5, r9
 80049c6:	fb8c 6701 	smull	r6, r7, ip, r1
 80049ca:	940f      	str	r4, [sp, #60]	; 0x3c
 80049cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80049ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80049d0:	fb83 0101 	smull	r0, r1, r3, r1
 80049d4:	fb83 4504 	smull	r4, r5, r3, r4
 80049d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80049dc:	4698      	mov	r8, r3
 80049de:	fb8c 8908 	smull	r8, r9, ip, r8
 80049e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80049e4:	1052      	asrs	r2, r2, #1
 80049e6:	f8cb 2004 	str.w	r2, [fp, #4]
 80049ea:	1a7b      	subs	r3, r7, r1
 80049ec:	9a02      	ldr	r2, [sp, #8]
 80049ee:	eb09 0105 	add.w	r1, r9, r5
 80049f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80049f4:	1075      	asrs	r5, r6, #1
 80049f6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80049f8:	f8cb 5000 	str.w	r5, [fp]
 80049fc:	9d01      	ldr	r5, [sp, #4]
 80049fe:	1040      	asrs	r0, r0, #1
 8004a00:	105b      	asrs	r3, r3, #1
 8004a02:	4432      	add	r2, r6
 8004a04:	1064      	asrs	r4, r4, #1
 8004a06:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004a08:	6068      	str	r0, [r5, #4]
 8004a0a:	602c      	str	r4, [r5, #0]
 8004a0c:	9202      	str	r2, [sp, #8]
 8004a0e:	f8ce 3000 	str.w	r3, [lr]
 8004a12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a16:	1049      	asrs	r1, r1, #1
 8004a18:	19e8      	adds	r0, r5, r7
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	f8ce 1004 	str.w	r1, [lr, #4]
 8004a20:	44ba      	add	sl, r7
 8004a22:	44bb      	add	fp, r7
 8004a24:	9001      	str	r0, [sp, #4]
 8004a26:	44be      	add	lr, r7
 8004a28:	f63f af75 	bhi.w	8004916 <arm_radix4_butterfly_inverse_q31+0x21a>
 8004a2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004a2e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a32:	440a      	add	r2, r1
 8004a34:	9214      	str	r2, [sp, #80]	; 0x50
 8004a36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a38:	3301      	adds	r3, #1
 8004a3a:	3208      	adds	r2, #8
 8004a3c:	9215      	str	r2, [sp, #84]	; 0x54
 8004a3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004a40:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a42:	4293      	cmp	r3, r2
 8004a44:	f67f af38 	bls.w	80048b8 <arm_radix4_butterfly_inverse_q31+0x1bc>
 8004a48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004a4c:	0092      	lsls	r2, r2, #2
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	931c      	str	r3, [sp, #112]	; 0x70
 8004a58:	9210      	str	r2, [sp, #64]	; 0x40
 8004a5a:	f63f af15 	bhi.w	8004888 <arm_radix4_butterfly_inverse_q31+0x18c>
 8004a5e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004a60:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8004a64:	3020      	adds	r0, #32
 8004a66:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8004a6a:	f850 1c18 	ldr.w	r1, [r0, #-24]
 8004a6e:	f850 3c14 	ldr.w	r3, [r0, #-20]
 8004a72:	f850 9c1c 	ldr.w	r9, [r0, #-28]
 8004a76:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8004a7a:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8004a7e:	eb02 0e01 	add.w	lr, r2, r1
 8004a82:	1a57      	subs	r7, r2, r1
 8004a84:	1ad6      	subs	r6, r2, r3
 8004a86:	441a      	add	r2, r3
 8004a88:	f850 4c08 	ldr.w	r4, [r0, #-8]
 8004a8c:	f850 bc04 	ldr.w	fp, [r0, #-4]
 8004a90:	eb09 0503 	add.w	r5, r9, r3
 8004a94:	44d6      	add	lr, sl
 8004a96:	4457      	add	r7, sl
 8004a98:	ebca 0606 	rsb	r6, sl, r6
 8004a9c:	ebc3 0309 	rsb	r3, r3, r9
 8004aa0:	ebca 0a02 	rsb	sl, sl, r2
 8004aa4:	eb09 0201 	add.w	r2, r9, r1
 8004aa8:	ebc1 0109 	rsb	r1, r1, r9
 8004aac:	4463      	add	r3, ip
 8004aae:	4465      	add	r5, ip
 8004ab0:	ebcc 0202 	rsb	r2, ip, r2
 8004ab4:	ebcc 0c01 	rsb	ip, ip, r1
 8004ab8:	445e      	add	r6, fp
 8004aba:	ebcb 0a0a 	rsb	sl, fp, sl
 8004abe:	445d      	add	r5, fp
 8004ac0:	eb0e 0104 	add.w	r1, lr, r4
 8004ac4:	ebcb 0b03 	rsb	fp, fp, r3
 8004ac8:	1b3f      	subs	r7, r7, r4
 8004aca:	1b12      	subs	r2, r2, r4
 8004acc:	eb0c 0304 	add.w	r3, ip, r4
 8004ad0:	f1b8 0801 	subs.w	r8, r8, #1
 8004ad4:	f840 1c20 	str.w	r1, [r0, #-32]
 8004ad8:	f840 7c18 	str.w	r7, [r0, #-24]
 8004adc:	f840 6c10 	str.w	r6, [r0, #-16]
 8004ae0:	f840 ac08 	str.w	sl, [r0, #-8]
 8004ae4:	f840 5c1c 	str.w	r5, [r0, #-28]
 8004ae8:	f840 bc14 	str.w	fp, [r0, #-20]
 8004aec:	f840 2c0c 	str.w	r2, [r0, #-12]
 8004af0:	f840 3c04 	str.w	r3, [r0, #-4]
 8004af4:	f100 0020 	add.w	r0, r0, #32
 8004af8:	d1b5      	bne.n	8004a66 <arm_radix4_butterfly_inverse_q31+0x36a>
 8004afa:	b021      	add	sp, #132	; 0x84
 8004afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b00 <arm_fir_init_q31>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4604      	mov	r4, r0
 8004b04:	461d      	mov	r5, r3
 8004b06:	9804      	ldr	r0, [sp, #16]
 8004b08:	60a2      	str	r2, [r4, #8]
 8004b0a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	440a      	add	r2, r1
 8004b12:	8021      	strh	r1, [r4, #0]
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	4618      	mov	r0, r3
 8004b18:	2100      	movs	r1, #0
 8004b1a:	f000 fbbf 	bl	800529c <memset>
 8004b1e:	6065      	str	r5, [r4, #4]
 8004b20:	bd38      	pop	{r3, r4, r5, pc}
 8004b22:	bf00      	nop

08004b24 <arm_fir_decimate_q31>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4680      	mov	r8, r0
 8004b2a:	7805      	ldrb	r5, [r0, #0]
 8004b2c:	8840      	ldrh	r0, [r0, #2]
 8004b2e:	fbb3 f9f5 	udiv	r9, r3, r5
 8004b32:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 8004b36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004b3a:	f8d8 e008 	ldr.w	lr, [r8, #8]
 8004b3e:	b087      	sub	sp, #28
 8004b40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b44:	9005      	str	r0, [sp, #20]
 8004b46:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 8004b4a:	461c      	mov	r4, r3
 8004b4c:	9302      	str	r3, [sp, #8]
 8004b4e:	f1b9 0f00 	cmp.w	r9, #0
 8004b52:	f000 80a0 	beq.w	8004c96 <arm_fir_decimate_q31+0x172>
 8004b56:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 8004b5a:	4692      	mov	sl, r2
 8004b5c:	ea4f 120b 	mov.w	r2, fp, lsl #4
 8004b60:	4603      	mov	r3, r0
 8004b62:	9203      	str	r2, [sp, #12]
 8004b64:	4610      	mov	r0, r2
 8004b66:	4622      	mov	r2, r4
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	4402      	add	r2, r0
 8004b6e:	9204      	str	r2, [sp, #16]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	462b      	mov	r3, r5
 8004b74:	4608      	mov	r0, r1
 8004b76:	f1ac 0204 	sub.w	r2, ip, #4
 8004b7a:	f850 4b04 	ldr.w	r4, [r0], #4
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	f842 4f04 	str.w	r4, [r2, #4]!
 8004b84:	d1f9      	bne.n	8004b7a <arm_fir_decimate_q31+0x56>
 8004b86:	00ad      	lsls	r5, r5, #2
 8004b88:	44ac      	add	ip, r5
 8004b8a:	4429      	add	r1, r5
 8004b8c:	f1bb 0f00 	cmp.w	fp, #0
 8004b90:	d04b      	beq.n	8004c2a <arm_fir_decimate_q31+0x106>
 8004b92:	9b02      	ldr	r3, [sp, #8]
 8004b94:	2600      	movs	r6, #0
 8004b96:	2700      	movs	r7, #0
 8004b98:	f103 0410 	add.w	r4, r3, #16
 8004b9c:	465d      	mov	r5, fp
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	463b      	mov	r3, r7
 8004ba2:	f10e 0010 	add.w	r0, lr, #16
 8004ba6:	9100      	str	r1, [sp, #0]
 8004ba8:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8004bac:	f850 7c10 	ldr.w	r7, [r0, #-16]
 8004bb0:	3d01      	subs	r5, #1
 8004bb2:	fbc6 2307 	smlal	r2, r3, r6, r7
 8004bb6:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 8004bba:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 8004bbe:	f100 0010 	add.w	r0, r0, #16
 8004bc2:	fbc7 2306 	smlal	r2, r3, r7, r6
 8004bc6:	e914 0082 	ldmdb	r4, {r1, r7}
 8004bca:	f850 6c18 	ldr.w	r6, [r0, #-24]
 8004bce:	f104 0410 	add.w	r4, r4, #16
 8004bd2:	fbc1 2306 	smlal	r2, r3, r1, r6
 8004bd6:	f850 6c14 	ldr.w	r6, [r0, #-20]
 8004bda:	fbc7 2306 	smlal	r2, r3, r7, r6
 8004bde:	d1e3      	bne.n	8004ba8 <arm_fir_decimate_q31+0x84>
 8004be0:	4616      	mov	r6, r2
 8004be2:	461f      	mov	r7, r3
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	9900      	ldr	r1, [sp, #0]
 8004be8:	9c04      	ldr	r4, [sp, #16]
 8004bea:	eb0e 0503 	add.w	r5, lr, r3
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	b163      	cbz	r3, 8004c0c <arm_fir_decimate_q31+0xe8>
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	f854 6b04 	ldr.w	r6, [r4], #4
 8004bfc:	f855 7b04 	ldr.w	r7, [r5], #4
 8004c00:	3801      	subs	r0, #1
 8004c02:	fbc6 2307 	smlal	r2, r3, r6, r7
 8004c06:	d1f7      	bne.n	8004bf8 <arm_fir_decimate_q31+0xd4>
 8004c08:	4616      	mov	r6, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	f898 0000 	ldrb.w	r0, [r8]
 8004c10:	0ff2      	lsrs	r2, r6, #31
 8004c12:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8004c16:	f1b9 0901 	subs.w	r9, r9, #1
 8004c1a:	f84a 2b04 	str.w	r2, [sl], #4
 8004c1e:	eb0e 0e80 	add.w	lr, lr, r0, lsl #2
 8004c22:	d007      	beq.n	8004c34 <arm_fir_decimate_q31+0x110>
 8004c24:	f898 5000 	ldrb.w	r5, [r8]
 8004c28:	e7a3      	b.n	8004b72 <arm_fir_decimate_q31+0x4e>
 8004c2a:	9c02      	ldr	r4, [sp, #8]
 8004c2c:	4675      	mov	r5, lr
 8004c2e:	2600      	movs	r6, #0
 8004c30:	2700      	movs	r7, #0
 8004c32:	e7dc      	b.n	8004bee <arm_fir_decimate_q31+0xca>
 8004c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c38:	9b05      	ldr	r3, [sp, #20]
 8004c3a:	1e59      	subs	r1, r3, #1
 8004c3c:	088e      	lsrs	r6, r1, #2
 8004c3e:	d01d      	beq.n	8004c7c <arm_fir_decimate_q31+0x158>
 8004c40:	4630      	mov	r0, r6
 8004c42:	f104 0210 	add.w	r2, r4, #16
 8004c46:	f10e 0310 	add.w	r3, lr, #16
 8004c4a:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8004c4e:	3801      	subs	r0, #1
 8004c50:	f842 5c10 	str.w	r5, [r2, #-16]
 8004c54:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8004c58:	f102 0210 	add.w	r2, r2, #16
 8004c5c:	f842 5c1c 	str.w	r5, [r2, #-28]
 8004c60:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004c64:	f103 0310 	add.w	r3, r3, #16
 8004c68:	f842 5c18 	str.w	r5, [r2, #-24]
 8004c6c:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8004c70:	f842 5c14 	str.w	r5, [r2, #-20]
 8004c74:	d1e9      	bne.n	8004c4a <arm_fir_decimate_q31+0x126>
 8004c76:	0133      	lsls	r3, r6, #4
 8004c78:	441c      	add	r4, r3
 8004c7a:	449e      	add	lr, r3
 8004c7c:	f011 0303 	ands.w	r3, r1, #3
 8004c80:	d006      	beq.n	8004c90 <arm_fir_decimate_q31+0x16c>
 8004c82:	1f22      	subs	r2, r4, #4
 8004c84:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8004c8e:	d1f9      	bne.n	8004c84 <arm_fir_decimate_q31+0x160>
 8004c90:	b007      	add	sp, #28
 8004c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c96:	4674      	mov	r4, lr
 8004c98:	e7ce      	b.n	8004c38 <arm_fir_decimate_q31+0x114>
 8004c9a:	bf00      	nop

08004c9c <arm_fir_decimate_init_q31>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4616      	mov	r6, r2
 8004ca0:	9a05      	ldr	r2, [sp, #20]
 8004ca2:	fbb2 f4f6 	udiv	r4, r2, r6
 8004ca6:	fb06 2414 	mls	r4, r6, r4, r2
 8004caa:	b98c      	cbnz	r4, 8004cd0 <arm_fir_decimate_init_q31+0x34>
 8004cac:	4605      	mov	r5, r0
 8004cae:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 8004cb2:	3801      	subs	r0, #1
 8004cb4:	4402      	add	r2, r0
 8004cb6:	8069      	strh	r1, [r5, #2]
 8004cb8:	606b      	str	r3, [r5, #4]
 8004cba:	0092      	lsls	r2, r2, #2
 8004cbc:	9804      	ldr	r0, [sp, #16]
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	f000 faec 	bl	800529c <memset>
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	9b04      	ldr	r3, [sp, #16]
 8004cc8:	702e      	strb	r6, [r5, #0]
 8004cca:	60ab      	str	r3, [r5, #8]
 8004ccc:	b240      	sxtb	r0, r0
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	20fe      	movs	r0, #254	; 0xfe
 8004cd2:	e7fb      	b.n	8004ccc <arm_fir_decimate_init_q31+0x30>

08004cd4 <arm_cmplx_mag_q31>:
 8004cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd8:	0893      	lsrs	r3, r2, #2
 8004cda:	b085      	sub	sp, #20
 8004cdc:	e88d 0005 	stmia.w	sp, {r0, r2}
 8004ce0:	460e      	mov	r6, r1
 8004ce2:	9302      	str	r3, [sp, #8]
 8004ce4:	d053      	beq.n	8004d8e <arm_cmplx_mag_q31+0xba>
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	460d      	mov	r5, r1
 8004cea:	46ba      	mov	sl, r7
 8004cec:	f100 0420 	add.w	r4, r0, #32
 8004cf0:	9103      	str	r1, [sp, #12]
 8004cf2:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8004cf6:	f854 0c1c 	ldr.w	r0, [r4, #-28]
 8004cfa:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8004cfe:	f854 2c18 	ldr.w	r2, [r4, #-24]
 8004d02:	fb83 8903 	smull	r8, r9, r3, r3
 8004d06:	fb80 0100 	smull	r0, r1, r0, r0
 8004d0a:	fb82 2302 	smull	r2, r3, r2, r2
 8004d0e:	fb86 6706 	smull	r6, r7, r6, r6
 8004d12:	ea4f 0269 	mov.w	r2, r9, asr #1
 8004d16:	1048      	asrs	r0, r1, #1
 8004d18:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8004d1c:	f854 8c0c 	ldr.w	r8, [r4, #-12]
 8004d20:	4629      	mov	r1, r5
 8004d22:	eb00 0067 	add.w	r0, r0, r7, asr #1
 8004d26:	eb02 0763 	add.w	r7, r2, r3, asr #1
 8004d2a:	f854 bc10 	ldr.w	fp, [r4, #-16]
 8004d2e:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8004d32:	f000 f849 	bl	8004dc8 <arm_sqrt_q31>
 8004d36:	1d29      	adds	r1, r5, #4
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f000 f845 	bl	8004dc8 <arm_sqrt_q31>
 8004d3e:	fb89 0109 	smull	r0, r1, r9, r9
 8004d42:	fb88 8908 	smull	r8, r9, r8, r8
 8004d46:	fb8b 230b 	smull	r2, r3, fp, fp
 8004d4a:	fb86 6706 	smull	r6, r7, r6, r6
 8004d4e:	ea4f 0069 	mov.w	r0, r9, asr #1
 8004d52:	104e      	asrs	r6, r1, #1
 8004d54:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8004d58:	f105 0108 	add.w	r1, r5, #8
 8004d5c:	eb06 0667 	add.w	r6, r6, r7, asr #1
 8004d60:	f000 f832 	bl	8004dc8 <arm_sqrt_q31>
 8004d64:	f105 010c 	add.w	r1, r5, #12
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 f82d 	bl	8004dc8 <arm_sqrt_q31>
 8004d6e:	f1ba 0a01 	subs.w	sl, sl, #1
 8004d72:	f104 0420 	add.w	r4, r4, #32
 8004d76:	f105 0510 	add.w	r5, r5, #16
 8004d7a:	d1ba      	bne.n	8004cf2 <arm_cmplx_mag_q31+0x1e>
 8004d7c:	9b00      	ldr	r3, [sp, #0]
 8004d7e:	9a02      	ldr	r2, [sp, #8]
 8004d80:	4619      	mov	r1, r3
 8004d82:	9e03      	ldr	r6, [sp, #12]
 8004d84:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	eb06 1602 	add.w	r6, r6, r2, lsl #4
 8004d8e:	9b01      	ldr	r3, [sp, #4]
 8004d90:	f013 0503 	ands.w	r5, r3, #3
 8004d94:	d015      	beq.n	8004dc2 <arm_cmplx_mag_q31+0xee>
 8004d96:	9c00      	ldr	r4, [sp, #0]
 8004d98:	3408      	adds	r4, #8
 8004d9a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004d9e:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004da2:	fb80 0100 	smull	r0, r1, r0, r0
 8004da6:	fb82 2302 	smull	r2, r3, r2, r2
 8004daa:	1048      	asrs	r0, r1, #1
 8004dac:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8004db0:	4631      	mov	r1, r6
 8004db2:	f000 f809 	bl	8004dc8 <arm_sqrt_q31>
 8004db6:	3d01      	subs	r5, #1
 8004db8:	f106 0604 	add.w	r6, r6, #4
 8004dbc:	f104 0408 	add.w	r4, r4, #8
 8004dc0:	d1eb      	bne.n	8004d9a <arm_cmplx_mag_q31+0xc6>
 8004dc2:	b005      	add	sp, #20
 8004dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004dc8 <arm_sqrt_q31>:
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	dd71      	ble.n	8004eb0 <arm_sqrt_q31+0xe8>
 8004dcc:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8004dd0:	fab0 f580 	clz	r5, r0
 8004dd4:	1e6e      	subs	r6, r5, #1
 8004dd6:	f016 0701 	ands.w	r7, r6, #1
 8004dda:	bf1a      	itte	ne
 8004ddc:	1eab      	subne	r3, r5, #2
 8004dde:	fa00 f403 	lslne.w	r4, r0, r3
 8004de2:	fa00 f406 	lsleq.w	r4, r0, r6
 8004de6:	4620      	mov	r0, r4
 8004de8:	4688      	mov	r8, r1
 8004dea:	f7fb fdff 	bl	80009ec <__aeabi_i2f>
 8004dee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8004df2:	f7fb fe4f 	bl	8000a94 <__aeabi_fmul>
 8004df6:	1043      	asrs	r3, r0, #1
 8004df8:	4830      	ldr	r0, [pc, #192]	; (8004ebc <arm_sqrt_q31+0xf4>)
 8004dfa:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8004dfe:	1ac0      	subs	r0, r0, r3
 8004e00:	f7fb fe48 	bl	8000a94 <__aeabi_fmul>
 8004e04:	f7fb ff96 	bl	8000d34 <__aeabi_f2iz>
 8004e08:	fb80 ab00 	smull	sl, fp, r0, r0
 8004e0c:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8004e10:	ea4f 0e64 	mov.w	lr, r4, asr #1
 8004e14:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 8004e18:	fb82 230e 	smull	r2, r3, r2, lr
 8004e1c:	0fd2      	lsrs	r2, r2, #31
 8004e1e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8004e22:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e26:	fb80 0102 	smull	r0, r1, r0, r2
 8004e2a:	0fc2      	lsrs	r2, r0, #31
 8004e2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004e30:	0093      	lsls	r3, r2, #2
 8004e32:	fb83 ab03 	smull	sl, fp, r3, r3
 8004e36:	ea4f 70da 	mov.w	r0, sl, lsr #31
 8004e3a:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
 8004e3e:	fb8e 0100 	smull	r0, r1, lr, r0
 8004e42:	0fc2      	lsrs	r2, r0, #31
 8004e44:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004e48:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e4c:	fb83 2302 	smull	r2, r3, r3, r2
 8004e50:	0fd2      	lsrs	r2, r2, #31
 8004e52:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8004e56:	0093      	lsls	r3, r2, #2
 8004e58:	fb83 0103 	smull	r0, r1, r3, r3
 8004e5c:	0fc0      	lsrs	r0, r0, #31
 8004e5e:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 8004e62:	fb8e 0100 	smull	r0, r1, lr, r0
 8004e66:	0fc2      	lsrs	r2, r0, #31
 8004e68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004e6c:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e70:	fb83 2302 	smull	r2, r3, r3, r2
 8004e74:	0fd0      	lsrs	r0, r2, #31
 8004e76:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8004e7a:	0080      	lsls	r0, r0, #2
 8004e7c:	fb84 0100 	smull	r0, r1, r4, r0
 8004e80:	0fc3      	lsrs	r3, r0, #31
 8004e82:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	b157      	cbz	r7, 8004ea0 <arm_sqrt_q31+0xd8>
 8004e8a:	3d02      	subs	r5, #2
 8004e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e90:	106d      	asrs	r5, r5, #1
 8004e92:	412b      	asrs	r3, r5
 8004e94:	f8c8 3000 	str.w	r3, [r8]
 8004e98:	2000      	movs	r0, #0
 8004e9a:	b240      	sxtb	r0, r0
 8004e9c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8004ea0:	1076      	asrs	r6, r6, #1
 8004ea2:	4133      	asrs	r3, r6
 8004ea4:	f8c8 3000 	str.w	r3, [r8]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	b240      	sxtb	r0, r0
 8004eac:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	20ff      	movs	r0, #255	; 0xff
 8004eb4:	600b      	str	r3, [r1, #0]
 8004eb6:	b240      	sxtb	r0, r0
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	5f3759df 	.word	0x5f3759df

08004ec0 <arm_sub_q31>:
 8004ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	9302      	str	r3, [sp, #8]
 8004ec8:	089b      	lsrs	r3, r3, #2
 8004eca:	4683      	mov	fp, r0
 8004ecc:	468a      	mov	sl, r1
 8004ece:	9201      	str	r2, [sp, #4]
 8004ed0:	9303      	str	r3, [sp, #12]
 8004ed2:	d063      	beq.n	8004f9c <arm_sub_q31+0xdc>
 8004ed4:	461f      	mov	r7, r3
 8004ed6:	f100 0e10 	add.w	lr, r0, #16
 8004eda:	f101 0610 	add.w	r6, r1, #16
 8004ede:	f102 0510 	add.w	r5, r2, #16
 8004ee2:	f856 1c10 	ldr.w	r1, [r6, #-16]
 8004ee6:	f85e 2c10 	ldr.w	r2, [lr, #-16]
 8004eea:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 8004eee:	17d3      	asrs	r3, r2, #31
 8004ef0:	1a52      	subs	r2, r2, r1
 8004ef2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8004ef6:	f85e 0c0c 	ldr.w	r0, [lr, #-12]
 8004efa:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8004efe:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8004f02:	f08c 4c00 	eor.w	ip, ip, #2147483648	; 0x80000000
 8004f06:	ea6f 0c0c 	mvn.w	ip, ip
 8004f0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004f0e:	bf08      	it	eq
 8004f10:	4694      	moveq	ip, r2
 8004f12:	1b00      	subs	r0, r0, r4
 8004f14:	eb61 71e4 	sbc.w	r1, r1, r4, asr #31
 8004f18:	ea4f 78e1 	mov.w	r8, r1, asr #31
 8004f1c:	f088 4800 	eor.w	r8, r8, #2147483648	; 0x80000000
 8004f20:	ea6f 0808 	mvn.w	r8, r8
 8004f24:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8004f28:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 8004f2c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004f30:	bf18      	it	ne
 8004f32:	4640      	movne	r0, r8
 8004f34:	17d3      	asrs	r3, r2, #31
 8004f36:	1b12      	subs	r2, r2, r4
 8004f38:	eb63 73e4 	sbc.w	r3, r3, r4, asr #31
 8004f3c:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8004f40:	17dc      	asrs	r4, r3, #31
 8004f42:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8004f46:	4688      	mov	r8, r1
 8004f48:	43e4      	mvns	r4, r4
 8004f4a:	ea4f 79e1 	mov.w	r9, r1, asr #31
 8004f4e:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8004f52:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8004f56:	bf18      	it	ne
 8004f58:	4622      	movne	r2, r4
 8004f5a:	ebb8 0801 	subs.w	r8, r8, r1
 8004f5e:	eb69 79e1 	sbc.w	r9, r9, r1, asr #31
 8004f62:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8004f66:	ebb9 7fe8 	cmp.w	r9, r8, asr #31
 8004f6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f6e:	ea6f 0303 	mvn.w	r3, r3
 8004f72:	bf08      	it	eq
 8004f74:	4643      	moveq	r3, r8
 8004f76:	3f01      	subs	r7, #1
 8004f78:	f845 cc10 	str.w	ip, [r5, #-16]
 8004f7c:	e905 000d 	stmdb	r5, {r0, r2, r3}
 8004f80:	f10e 0e10 	add.w	lr, lr, #16
 8004f84:	f106 0610 	add.w	r6, r6, #16
 8004f88:	f105 0510 	add.w	r5, r5, #16
 8004f8c:	d1a9      	bne.n	8004ee2 <arm_sub_q31+0x22>
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	9a01      	ldr	r2, [sp, #4]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	441a      	add	r2, r3
 8004f96:	449b      	add	fp, r3
 8004f98:	449a      	add	sl, r3
 8004f9a:	9201      	str	r2, [sp, #4]
 8004f9c:	9b02      	ldr	r3, [sp, #8]
 8004f9e:	f013 0303 	ands.w	r3, r3, #3
 8004fa2:	d015      	beq.n	8004fd0 <arm_sub_q31+0x110>
 8004fa4:	9a01      	ldr	r2, [sp, #4]
 8004fa6:	3a04      	subs	r2, #4
 8004fa8:	f85a 4b04 	ldr.w	r4, [sl], #4
 8004fac:	f85b 0b04 	ldr.w	r0, [fp], #4
 8004fb0:	17c1      	asrs	r1, r0, #31
 8004fb2:	1b00      	subs	r0, r0, r4
 8004fb4:	eb61 71e4 	sbc.w	r1, r1, r4, asr #31
 8004fb8:	17cc      	asrs	r4, r1, #31
 8004fba:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8004fbe:	43e4      	mvns	r4, r4
 8004fc0:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004fc4:	bf18      	it	ne
 8004fc6:	4620      	movne	r0, r4
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	f842 0f04 	str.w	r0, [r2, #4]!
 8004fce:	d1eb      	bne.n	8004fa8 <arm_sub_q31+0xe8>
 8004fd0:	b005      	add	sp, #20
 8004fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop

08004fd8 <arm_scale_q31>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	b089      	sub	sp, #36	; 0x24
 8004fde:	3201      	adds	r2, #1
 8004fe0:	9305      	str	r3, [sp, #20]
 8004fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fe4:	fa4f fc82 	sxtb.w	ip, r2
 8004fe8:	089b      	lsrs	r3, r3, #2
 8004fea:	f1bc 0f00 	cmp.w	ip, #0
 8004fee:	4683      	mov	fp, r0
 8004ff0:	468a      	mov	sl, r1
 8004ff2:	9306      	str	r3, [sp, #24]
 8004ff4:	da48      	bge.n	8005088 <arm_scale_q31+0xb0>
 8004ff6:	b39b      	cbz	r3, 8005060 <arm_scale_q31+0x88>
 8004ff8:	9b05      	ldr	r3, [sp, #20]
 8004ffa:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004ffe:	f1cc 0100 	rsb	r1, ip, #0
 8005002:	f100 0210 	add.w	r2, r0, #16
 8005006:	3310      	adds	r3, #16
 8005008:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800500c:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8005010:	fb86 670a 	smull	r6, r7, r6, sl
 8005014:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005018:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800501c:	fb85 890a 	smull	r8, r9, r5, sl
 8005020:	fb84 450a 	smull	r4, r5, r4, sl
 8005024:	fa47 f401 	asr.w	r4, r7, r1
 8005028:	fb80 670a 	smull	r6, r7, r0, sl
 800502c:	410d      	asrs	r5, r1
 800502e:	fa49 f601 	asr.w	r6, r9, r1
 8005032:	fa47 f001 	asr.w	r0, r7, r1
 8005036:	f1be 0e01 	subs.w	lr, lr, #1
 800503a:	f843 4c10 	str.w	r4, [r3, #-16]
 800503e:	f843 6c0c 	str.w	r6, [r3, #-12]
 8005042:	f843 5c08 	str.w	r5, [r3, #-8]
 8005046:	f843 0c04 	str.w	r0, [r3, #-4]
 800504a:	f102 0210 	add.w	r2, r2, #16
 800504e:	f103 0310 	add.w	r3, r3, #16
 8005052:	d1d9      	bne.n	8005008 <arm_scale_q31+0x30>
 8005054:	9b06      	ldr	r3, [sp, #24]
 8005056:	9a05      	ldr	r2, [sp, #20]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	441a      	add	r2, r3
 800505c:	449b      	add	fp, r3
 800505e:	9205      	str	r2, [sp, #20]
 8005060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005062:	f013 0103 	ands.w	r1, r3, #3
 8005066:	d00c      	beq.n	8005082 <arm_scale_q31+0xaa>
 8005068:	9805      	ldr	r0, [sp, #20]
 800506a:	f1cc 0c00 	rsb	ip, ip, #0
 800506e:	f85b 2b04 	ldr.w	r2, [fp], #4
 8005072:	3901      	subs	r1, #1
 8005074:	fb82 230a 	smull	r2, r3, r2, sl
 8005078:	fa43 f30c 	asr.w	r3, r3, ip
 800507c:	f840 3b04 	str.w	r3, [r0], #4
 8005080:	d1f5      	bne.n	800506e <arm_scale_q31+0x96>
 8005082:	b009      	add	sp, #36	; 0x24
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	2b00      	cmp	r3, #0
 800508a:	d060      	beq.n	800514e <arm_scale_q31+0x176>
 800508c:	9304      	str	r3, [sp, #16]
 800508e:	9b05      	ldr	r3, [sp, #20]
 8005090:	f100 0210 	add.w	r2, r0, #16
 8005094:	f103 0910 	add.w	r9, r3, #16
 8005098:	9201      	str	r2, [sp, #4]
 800509a:	9007      	str	r0, [sp, #28]
 800509c:	9b01      	ldr	r3, [sp, #4]
 800509e:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80050a2:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80050a6:	fb86 670a 	smull	r6, r7, r6, sl
 80050aa:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80050ae:	fb84 450a 	smull	r4, r5, r4, sl
 80050b2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80050b6:	fb80 010a 	smull	r0, r1, r0, sl
 80050ba:	17fe      	asrs	r6, r7, #31
 80050bc:	fb83 230a 	smull	r2, r3, r3, sl
 80050c0:	f086 4e00 	eor.w	lr, r6, #2147483648	; 0x80000000
 80050c4:	ea6f 0e0e 	mvn.w	lr, lr
 80050c8:	17ec      	asrs	r4, r5, #31
 80050ca:	17c8      	asrs	r0, r1, #31
 80050cc:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 80050d0:	43e4      	mvns	r4, r4
 80050d2:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80050d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050da:	43c0      	mvns	r0, r0
 80050dc:	17db      	asrs	r3, r3, #31
 80050de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80050e2:	43db      	mvns	r3, r3
 80050e4:	fa07 f60c 	lsl.w	r6, r7, ip
 80050e8:	fa46 f80c 	asr.w	r8, r6, ip
 80050ec:	45b8      	cmp	r8, r7
 80050ee:	bf18      	it	ne
 80050f0:	4676      	movne	r6, lr
 80050f2:	fa05 f80c 	lsl.w	r8, r5, ip
 80050f6:	fa01 fe0c 	lsl.w	lr, r1, ip
 80050fa:	9f03      	ldr	r7, [sp, #12]
 80050fc:	fa48 fb0c 	asr.w	fp, r8, ip
 8005100:	45ab      	cmp	fp, r5
 8005102:	bf08      	it	eq
 8005104:	4644      	moveq	r4, r8
 8005106:	fa4e f50c 	asr.w	r5, lr, ip
 800510a:	428d      	cmp	r5, r1
 800510c:	bf08      	it	eq
 800510e:	4670      	moveq	r0, lr
 8005110:	fa07 f70c 	lsl.w	r7, r7, ip
 8005114:	9d03      	ldr	r5, [sp, #12]
 8005116:	fa47 f10c 	asr.w	r1, r7, ip
 800511a:	42a9      	cmp	r1, r5
 800511c:	bf08      	it	eq
 800511e:	463b      	moveq	r3, r7
 8005120:	9a01      	ldr	r2, [sp, #4]
 8005122:	e909 0009 	stmdb	r9, {r0, r3}
 8005126:	9b04      	ldr	r3, [sp, #16]
 8005128:	3210      	adds	r2, #16
 800512a:	3b01      	subs	r3, #1
 800512c:	f849 6c10 	str.w	r6, [r9, #-16]
 8005130:	f849 4c0c 	str.w	r4, [r9, #-12]
 8005134:	9201      	str	r2, [sp, #4]
 8005136:	f109 0910 	add.w	r9, r9, #16
 800513a:	9304      	str	r3, [sp, #16]
 800513c:	d1ae      	bne.n	800509c <arm_scale_q31+0xc4>
 800513e:	9b06      	ldr	r3, [sp, #24]
 8005140:	9a05      	ldr	r2, [sp, #20]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005148:	441a      	add	r2, r3
 800514a:	449b      	add	fp, r3
 800514c:	9205      	str	r2, [sp, #20]
 800514e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005150:	f013 0003 	ands.w	r0, r3, #3
 8005154:	d095      	beq.n	8005082 <arm_scale_q31+0xaa>
 8005156:	9905      	ldr	r1, [sp, #20]
 8005158:	f85b 4b04 	ldr.w	r4, [fp], #4
 800515c:	fb84 450a 	smull	r4, r5, r4, sl
 8005160:	17eb      	asrs	r3, r5, #31
 8005162:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005166:	43db      	mvns	r3, r3
 8005168:	fa05 f20c 	lsl.w	r2, r5, ip
 800516c:	fa42 f40c 	asr.w	r4, r2, ip
 8005170:	42ac      	cmp	r4, r5
 8005172:	bf08      	it	eq
 8005174:	4613      	moveq	r3, r2
 8005176:	3801      	subs	r0, #1
 8005178:	f841 3b04 	str.w	r3, [r1], #4
 800517c:	d1ec      	bne.n	8005158 <arm_scale_q31+0x180>
 800517e:	b009      	add	sp, #36	; 0x24
 8005180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005184 <arm_mult_q31>:
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 800518c:	b083      	sub	sp, #12
 800518e:	469a      	mov	sl, r3
 8005190:	d04a      	beq.n	8005228 <arm_mult_q31+0xa4>
 8005192:	46dc      	mov	ip, fp
 8005194:	f8cd b004 	str.w	fp, [sp, #4]
 8005198:	468e      	mov	lr, r1
 800519a:	4683      	mov	fp, r0
 800519c:	f100 0510 	add.w	r5, r0, #16
 80051a0:	f101 0410 	add.w	r4, r1, #16
 80051a4:	f102 0310 	add.w	r3, r2, #16
 80051a8:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80051ac:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80051b0:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 80051b4:	fb80 0101 	smull	r0, r1, r0, r1
 80051b8:	f301 011e 	ssat	r1, #31, r1
 80051bc:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80051c0:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80051c4:	fb87 8900 	smull	r8, r9, r7, r0
 80051c8:	f309 071e 	ssat	r7, #31, r9
 80051cc:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80051d0:	0049      	lsls	r1, r1, #1
 80051d2:	4680      	mov	r8, r0
 80051d4:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80051d8:	f1bc 0c01 	subs.w	ip, ip, #1
 80051dc:	fb88 8900 	smull	r8, r9, r8, r0
 80051e0:	f309 001e 	ssat	r0, #31, r9
 80051e4:	ea4f 0847 	mov.w	r8, r7, lsl #1
 80051e8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80051ec:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80051f0:	fb87 6706 	smull	r6, r7, r7, r6
 80051f4:	f307 061e 	ssat	r6, #31, r7
 80051f8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80051fc:	f843 1c10 	str.w	r1, [r3, #-16]
 8005200:	f843 8c0c 	str.w	r8, [r3, #-12]
 8005204:	e903 0041 	stmdb	r3, {r0, r6}
 8005208:	f105 0510 	add.w	r5, r5, #16
 800520c:	f104 0410 	add.w	r4, r4, #16
 8005210:	f103 0310 	add.w	r3, r3, #16
 8005214:	d1c8      	bne.n	80051a8 <arm_mult_q31+0x24>
 8005216:	4658      	mov	r0, fp
 8005218:	4671      	mov	r1, lr
 800521a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800521e:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8005222:	4458      	add	r0, fp
 8005224:	4459      	add	r1, fp
 8005226:	445a      	add	r2, fp
 8005228:	f01a 0a03 	ands.w	sl, sl, #3
 800522c:	d00e      	beq.n	800524c <arm_mult_q31+0xc8>
 800522e:	f850 3b04 	ldr.w	r3, [r0], #4
 8005232:	f851 4b04 	ldr.w	r4, [r1], #4
 8005236:	f1ba 0a01 	subs.w	sl, sl, #1
 800523a:	fb83 4504 	smull	r4, r5, r3, r4
 800523e:	f305 031e 	ssat	r3, #31, r5
 8005242:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005246:	f842 3b04 	str.w	r3, [r2], #4
 800524a:	d1f0      	bne.n	800522e <arm_mult_q31+0xaa>
 800524c:	b003      	add	sp, #12
 800524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005252:	bf00      	nop

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	2600      	movs	r6, #0
 8005258:	4d0c      	ldr	r5, [pc, #48]	; (800528c <__libc_init_array+0x38>)
 800525a:	4c0d      	ldr	r4, [pc, #52]	; (8005290 <__libc_init_array+0x3c>)
 800525c:	1b64      	subs	r4, r4, r5
 800525e:	10a4      	asrs	r4, r4, #2
 8005260:	42a6      	cmp	r6, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	f000 f822 	bl	80052ac <_init>
 8005268:	2600      	movs	r6, #0
 800526a:	4d0a      	ldr	r5, [pc, #40]	; (8005294 <__libc_init_array+0x40>)
 800526c:	4c0a      	ldr	r4, [pc, #40]	; (8005298 <__libc_init_array+0x44>)
 800526e:	1b64      	subs	r4, r4, r5
 8005270:	10a4      	asrs	r4, r4, #2
 8005272:	42a6      	cmp	r6, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	f855 3b04 	ldr.w	r3, [r5], #4
 800527c:	4798      	blx	r3
 800527e:	3601      	adds	r6, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	f855 3b04 	ldr.w	r3, [r5], #4
 8005286:	4798      	blx	r3
 8005288:	3601      	adds	r6, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	08005374 	.word	0x08005374
 8005290:	08005374 	.word	0x08005374
 8005294:	08005374 	.word	0x08005374
 8005298:	08005378 	.word	0x08005378

0800529c <memset>:
 800529c:	4603      	mov	r3, r0
 800529e:	4402      	add	r2, r0
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d100      	bne.n	80052a6 <memset+0xa>
 80052a4:	4770      	bx	lr
 80052a6:	f803 1b01 	strb.w	r1, [r3], #1
 80052aa:	e7f9      	b.n	80052a0 <memset+0x4>

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr

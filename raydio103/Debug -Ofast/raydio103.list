
raydio103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08008f40  08008f40  00018f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aec  08009aec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009aec  08009aec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aec  08009aec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002054  200001e0  08009cd4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002234  08009cd4  00022234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e00  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a12  00000000  00000000  00036009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00039a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  0003a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac80  00000000  00000000  0003bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017392  00000000  00000000  00056b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009229f  00000000  00000000  0006df1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001001b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f24  00000000  00000000  0010027c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000eca3  00000000  00000000  001041a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f28 	.word	0x08008f28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008f28 	.word	0x08008f28

08000150 <arm_bitreversal_32>:
 8000150:	1c4b      	adds	r3, r1, #1
 8000152:	2b01      	cmp	r3, #1
 8000154:	bf98      	it	ls
 8000156:	4770      	bxls	lr
 8000158:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800015c:	1c91      	adds	r1, r2, #2
 800015e:	089b      	lsrs	r3, r3, #2

08000160 <arm_bitreversal_32_0>:
 8000160:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000164:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000168:	880a      	ldrh	r2, [r1, #0]
 800016a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800016e:	4480      	add	r8, r0
 8000170:	4481      	add	r9, r0
 8000172:	4402      	add	r2, r0
 8000174:	4484      	add	ip, r0
 8000176:	f8d9 7000 	ldr.w	r7, [r9]
 800017a:	f8d8 6000 	ldr.w	r6, [r8]
 800017e:	6815      	ldr	r5, [r2, #0]
 8000180:	f8dc 4000 	ldr.w	r4, [ip]
 8000184:	f8c9 6000 	str.w	r6, [r9]
 8000188:	f8c8 7000 	str.w	r7, [r8]
 800018c:	f8cc 5000 	str.w	r5, [ip]
 8000190:	6014      	str	r4, [r2, #0]
 8000192:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000196:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800019a:	6855      	ldr	r5, [r2, #4]
 800019c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80001a0:	f8c9 6004 	str.w	r6, [r9, #4]
 80001a4:	f8c8 7004 	str.w	r7, [r8, #4]
 80001a8:	f8cc 5004 	str.w	r5, [ip, #4]
 80001ac:	6054      	str	r4, [r2, #4]
 80001ae:	3108      	adds	r1, #8
 80001b0:	3b01      	subs	r3, #1
 80001b2:	d1d5      	bne.n	8000160 <arm_bitreversal_32_0>
 80001b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80001b8:	4770      	bx	lr

080001ba <arm_bitreversal_16>:
 80001ba:	1c4b      	adds	r3, r1, #1
 80001bc:	2b01      	cmp	r3, #1
 80001be:	bf98      	it	ls
 80001c0:	4770      	bxls	lr
 80001c2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001c6:	1c91      	adds	r1, r2, #2
 80001c8:	089b      	lsrs	r3, r3, #2

080001ca <arm_bitreversal_16_0>:
 80001ca:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ce:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001d2:	880a      	ldrh	r2, [r1, #0]
 80001d4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001d8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80001dc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80001e0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80001e4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80001e8:	f8d9 7000 	ldr.w	r7, [r9]
 80001ec:	f8d8 6000 	ldr.w	r6, [r8]
 80001f0:	6815      	ldr	r5, [r2, #0]
 80001f2:	f8dc 4000 	ldr.w	r4, [ip]
 80001f6:	f8c9 6000 	str.w	r6, [r9]
 80001fa:	f8c8 7000 	str.w	r7, [r8]
 80001fe:	f8cc 5000 	str.w	r5, [ip]
 8000202:	6014      	str	r4, [r2, #0]
 8000204:	3108      	adds	r1, #8
 8000206:	3b01      	subs	r3, #1
 8000208:	d1df      	bne.n	80001ca <arm_bitreversal_16_0>
 800020a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800020e:	4770      	bx	lr

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca8:	d2ed      	bcs.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fmul>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d06f      	beq.n	8000efc <__aeabi_fmul+0xf8>
 8000e1c:	441a      	add	r2, r3
 8000e1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e22:	0240      	lsls	r0, r0, #9
 8000e24:	bf18      	it	ne
 8000e26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e2a:	d01e      	beq.n	8000e6a <__aeabi_fmul+0x66>
 8000e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e38:	fba0 3101 	umull	r3, r1, r0, r1
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e44:	bf3e      	ittt	cc
 8000e46:	0049      	lslcc	r1, r1, #1
 8000e48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	ea40 0001 	orr.w	r0, r0, r1
 8000e52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e56:	2afd      	cmp	r2, #253	; 0xfd
 8000e58:	d81d      	bhi.n	8000e96 <__aeabi_fmul+0x92>
 8000e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e72:	bf08      	it	eq
 8000e74:	0249      	lsleq	r1, r1, #9
 8000e76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e7e:	3a7f      	subs	r2, #127	; 0x7f
 8000e80:	bfc2      	ittt	gt
 8000e82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8a:	4770      	bxgt	lr
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	3a01      	subs	r2, #1
 8000e96:	dc5d      	bgt.n	8000f54 <__aeabi_fmul+0x150>
 8000e98:	f112 0f19 	cmn.w	r2, #25
 8000e9c:	bfdc      	itt	le
 8000e9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ea2:	4770      	bxle	lr
 8000ea4:	f1c2 0200 	rsb	r2, r2, #0
 8000ea8:	0041      	lsls	r1, r0, #1
 8000eaa:	fa21 f102 	lsr.w	r1, r1, r2
 8000eae:	f1c2 0220 	rsb	r2, r2, #32
 8000eb2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eba:	f140 0000 	adc.w	r0, r0, #0
 8000ebe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ec2:	bf08      	it	eq
 8000ec4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec8:	4770      	bx	lr
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fmul+0xce>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xe6>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e78f      	b.n	8000e1c <__aeabi_fmul+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	bf18      	it	ne
 8000f06:	ea93 0f0c 	teqne	r3, ip
 8000f0a:	d00a      	beq.n	8000f22 <__aeabi_fmul+0x11e>
 8000f0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f10:	bf18      	it	ne
 8000f12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	d1d8      	bne.n	8000eca <__aeabi_fmul+0xc6>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	4770      	bx	lr
 8000f22:	f090 0f00 	teq	r0, #0
 8000f26:	bf17      	itett	ne
 8000f28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f2c:	4608      	moveq	r0, r1
 8000f2e:	f091 0f00 	teqne	r1, #0
 8000f32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f36:	d014      	beq.n	8000f62 <__aeabi_fmul+0x15e>
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d101      	bne.n	8000f42 <__aeabi_fmul+0x13e>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	d10f      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f42:	ea93 0f0c 	teq	r3, ip
 8000f46:	d103      	bne.n	8000f50 <__aeabi_fmul+0x14c>
 8000f48:	024b      	lsls	r3, r1, #9
 8000f4a:	bf18      	it	ne
 8000f4c:	4608      	movne	r0, r1
 8000f4e:	d108      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f50:	ea80 0001 	eor.w	r0, r0, r1
 8000f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f60:	4770      	bx	lr
 8000f62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bx	lr

08000f6c <__aeabi_fdiv>:
 8000f6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f74:	bf1e      	ittt	ne
 8000f76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f7a:	ea92 0f0c 	teqne	r2, ip
 8000f7e:	ea93 0f0c 	teqne	r3, ip
 8000f82:	d069      	beq.n	8001058 <__aeabi_fdiv+0xec>
 8000f84:	eba2 0203 	sub.w	r2, r2, r3
 8000f88:	ea80 0c01 	eor.w	ip, r0, r1
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f92:	d037      	beq.n	8001004 <__aeabi_fdiv+0x98>
 8000f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fa0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	bf38      	it	cc
 8000fa8:	005b      	lslcc	r3, r3, #1
 8000faa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	bf24      	itt	cs
 8000fb6:	1a5b      	subcs	r3, r3, r1
 8000fb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fbc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fc6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fce:	bf24      	itt	cs
 8000fd0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fe2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	bf18      	it	ne
 8000fea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fee:	d1e0      	bne.n	8000fb2 <__aeabi_fdiv+0x46>
 8000ff0:	2afd      	cmp	r2, #253	; 0xfd
 8000ff2:	f63f af50 	bhi.w	8000e96 <__aeabi_fmul+0x92>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ffc:	bf08      	it	eq
 8000ffe:	f020 0001 	biceq.w	r0, r0, #1
 8001002:	4770      	bx	lr
 8001004:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001008:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800100c:	327f      	adds	r2, #127	; 0x7f
 800100e:	bfc2      	ittt	gt
 8001010:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001014:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001018:	4770      	bxgt	lr
 800101a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	3a01      	subs	r2, #1
 8001024:	e737      	b.n	8000e96 <__aeabi_fmul+0x92>
 8001026:	f092 0f00 	teq	r2, #0
 800102a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800102e:	bf02      	ittt	eq
 8001030:	0040      	lsleq	r0, r0, #1
 8001032:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001036:	3a01      	subeq	r2, #1
 8001038:	d0f9      	beq.n	800102e <__aeabi_fdiv+0xc2>
 800103a:	ea40 000c 	orr.w	r0, r0, ip
 800103e:	f093 0f00 	teq	r3, #0
 8001042:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0049      	lsleq	r1, r1, #1
 800104a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800104e:	3b01      	subeq	r3, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xda>
 8001052:	ea41 010c 	orr.w	r1, r1, ip
 8001056:	e795      	b.n	8000f84 <__aeabi_fdiv+0x18>
 8001058:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800105c:	ea92 0f0c 	teq	r2, ip
 8001060:	d108      	bne.n	8001074 <__aeabi_fdiv+0x108>
 8001062:	0242      	lsls	r2, r0, #9
 8001064:	f47f af7d 	bne.w	8000f62 <__aeabi_fmul+0x15e>
 8001068:	ea93 0f0c 	teq	r3, ip
 800106c:	f47f af70 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001070:	4608      	mov	r0, r1
 8001072:	e776      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	d104      	bne.n	8001084 <__aeabi_fdiv+0x118>
 800107a:	024b      	lsls	r3, r1, #9
 800107c:	f43f af4c 	beq.w	8000f18 <__aeabi_fmul+0x114>
 8001080:	4608      	mov	r0, r1
 8001082:	e76e      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001084:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001088:	bf18      	it	ne
 800108a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800108e:	d1ca      	bne.n	8001026 <__aeabi_fdiv+0xba>
 8001090:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001094:	f47f af5c 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001098:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800109c:	f47f af3c 	bne.w	8000f18 <__aeabi_fmul+0x114>
 80010a0:	e75f      	b.n	8000f62 <__aeabi_fmul+0x15e>
 80010a2:	bf00      	nop

080010a4 <__gesf2>:
 80010a4:	f04f 3cff 	mov.w	ip, #4294967295
 80010a8:	e006      	b.n	80010b8 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__lesf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	e002      	b.n	80010b8 <__cmpsf2+0x4>
 80010b2:	bf00      	nop

080010b4 <__cmpsf2>:
 80010b4:	f04f 0c01 	mov.w	ip, #1
 80010b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c8:	bf18      	it	ne
 80010ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ce:	d011      	beq.n	80010f4 <__cmpsf2+0x40>
 80010d0:	b001      	add	sp, #4
 80010d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010d6:	bf18      	it	ne
 80010d8:	ea90 0f01 	teqne	r0, r1
 80010dc:	bf58      	it	pl
 80010de:	ebb2 0003 	subspl.w	r0, r2, r3
 80010e2:	bf88      	it	hi
 80010e4:	17c8      	asrhi	r0, r1, #31
 80010e6:	bf38      	it	cc
 80010e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ec:	bf18      	it	ne
 80010ee:	f040 0001 	orrne.w	r0, r0, #1
 80010f2:	4770      	bx	lr
 80010f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f8:	d102      	bne.n	8001100 <__cmpsf2+0x4c>
 80010fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010fe:	d105      	bne.n	800110c <__cmpsf2+0x58>
 8001100:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001104:	d1e4      	bne.n	80010d0 <__cmpsf2+0x1c>
 8001106:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800110a:	d0e1      	beq.n	80010d0 <__cmpsf2+0x1c>
 800110c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <__aeabi_cfrcmple>:
 8001114:	4684      	mov	ip, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4661      	mov	r1, ip
 800111a:	e7ff      	b.n	800111c <__aeabi_cfcmpeq>

0800111c <__aeabi_cfcmpeq>:
 800111c:	b50f      	push	{r0, r1, r2, r3, lr}
 800111e:	f7ff ffc9 	bl	80010b4 <__cmpsf2>
 8001122:	2800      	cmp	r0, #0
 8001124:	bf48      	it	mi
 8001126:	f110 0f00 	cmnmi.w	r0, #0
 800112a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800112c <__aeabi_fcmpeq>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff fff4 	bl	800111c <__aeabi_cfcmpeq>
 8001134:	bf0c      	ite	eq
 8001136:	2001      	moveq	r0, #1
 8001138:	2000      	movne	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmplt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffea 	bl	800111c <__aeabi_cfcmpeq>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmple>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffe0 	bl	800111c <__aeabi_cfcmpeq>
 800115c:	bf94      	ite	ls
 800115e:	2001      	movls	r0, #1
 8001160:	2000      	movhi	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmpge>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffd2 	bl	8001114 <__aeabi_cfrcmple>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_fcmpgt>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffc8 	bl	8001114 <__aeabi_cfrcmple>
 8001184:	bf34      	ite	cc
 8001186:	2001      	movcc	r0, #1
 8001188:	2000      	movcs	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmpun>:
 8001190:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001194:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001198:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800119c:	d102      	bne.n	80011a4 <__aeabi_fcmpun+0x14>
 800119e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011a2:	d108      	bne.n	80011b6 <__aeabi_fcmpun+0x26>
 80011a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a8:	d102      	bne.n	80011b0 <__aeabi_fcmpun+0x20>
 80011aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011ae:	d102      	bne.n	80011b6 <__aeabi_fcmpun+0x26>
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0001 	mov.w	r0, #1
 80011ba:	4770      	bx	lr

080011bc <__aeabi_f2iz>:
 80011bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c4:	d30f      	bcc.n	80011e6 <__aeabi_f2iz+0x2a>
 80011c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ce:	d90d      	bls.n	80011ec <__aeabi_f2iz+0x30>
 80011d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011dc:	fa23 f002 	lsr.w	r0, r3, r2
 80011e0:	bf18      	it	ne
 80011e2:	4240      	negne	r0, r0
 80011e4:	4770      	bx	lr
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	4770      	bx	lr
 80011ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011f0:	d101      	bne.n	80011f6 <__aeabi_f2iz+0x3a>
 80011f2:	0242      	lsls	r2, r0, #9
 80011f4:	d105      	bne.n	8001202 <__aeabi_f2iz+0x46>
 80011f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011fa:	bf08      	it	eq
 80011fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001200:	4770      	bx	lr
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	4770      	bx	lr

08001208 <everythingElse>:
#include "st7920.h"

#include "fft.h"
bool elseDone = 0;
void everythingElse(void){
	if (!elseDone){
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <everythingElse+0xc>)
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	b90a      	cbnz	r2, 8001212 <everythingElse+0xa>
	 }
*/

	//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	 //ST7920_Update();
	elseDone = 1;
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
	}

}
 8001212:	4770      	bx	lr
 8001214:	200001fc 	.word	0x200001fc

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b510      	push	{r4, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121c:	2214      	movs	r2, #20
 800121e:	2100      	movs	r1, #0
 8001220:	a80c      	add	r0, sp, #48	; 0x30
 8001222:	f004 f9ed 	bl	8005600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001226:	2214      	movs	r2, #20
 8001228:	2100      	movs	r1, #0
 800122a:	eb0d 0002 	add.w	r0, sp, r2
 800122e:	f004 f9e7 	bl	8005600 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001232:	2210      	movs	r2, #16
 8001234:	2100      	movs	r1, #0
 8001236:	a801      	add	r0, sp, #4
 8001238:	f004 f9e2 	bl	8005600 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001242:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001244:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001248:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800124c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001252:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001254:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f001 f84f 	bl	80022f8 <HAL_RCC_OscConfig>
 800125a:	b108      	cbz	r0, 8001260 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125e:	e7fe      	b.n	800125e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001266:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001270:	4621      	mov	r1, r4
 8001272:	a805      	add	r0, sp, #20
 8001274:	f001 fa16 	bl	80026a4 <HAL_RCC_ClockConfig>
 8001278:	b108      	cbz	r0, 800127e <SystemClock_Config+0x66>
 800127a:	b672      	cpsid	i
  while (1)
 800127c:	e7fe      	b.n	800127c <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800127e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001282:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001284:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001286:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001288:	f001 faa8 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 800128c:	b108      	cbz	r0, 8001292 <SystemClock_Config+0x7a>
 800128e:	b672      	cpsid	i
  while (1)
 8001290:	e7fe      	b.n	8001290 <SystemClock_Config+0x78>
}
 8001292:	b014      	add	sp, #80	; 0x50
 8001294:	bd10      	pop	{r4, pc}
	...

08001298 <main>:
{
 8001298:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4cb1      	ldr	r4, [pc, #708]	; (8001560 <main+0x2c8>)
{
 800129c:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 800129e:	f000 fb8d 	bl	80019bc <HAL_Init>
  SystemClock_Config();
 80012a2:	f7ff ffb9 	bl	8001218 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	2210      	movs	r2, #16
 80012a8:	2100      	movs	r1, #0
 80012aa:	a812      	add	r0, sp, #72	; 0x48
 80012ac:	f004 f9a8 	bl	8005600 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	61a3      	str	r3, [r4, #24]
 80012ba:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 80012bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 80012ca:	48a6      	ldr	r0, [pc, #664]	; (8001564 <main+0x2cc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	61a3      	str	r3, [r4, #24]
 80012d2:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	61a3      	str	r3, [r4, #24]
 80012ea:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012ec:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	9303      	str	r3, [sp, #12]
 80012f6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	61a3      	str	r3, [r4, #24]
 8001302:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001304:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	9304      	str	r3, [sp, #16]
 800130e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 8001310:	f000 ffec 	bl	80022ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PIN_LCD_CS_GPIO_Port, PIN_LCD_CS_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	; 0x40
 8001318:	4893      	ldr	r0, [pc, #588]	; (8001568 <main+0x2d0>)
 800131a:	f000 ffe7 	bl	80022ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2138      	movs	r1, #56	; 0x38
 8001322:	4892      	ldr	r0, [pc, #584]	; (800156c <main+0x2d4>)
 8001324:	f000 ffe2 	bl	80022ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001328:	2311      	movs	r3, #17
  HAL_GPIO_Init(PIN_LED_GPIO_Port, &GPIO_InitStruct);
 800132a:	488e      	ldr	r0, [pc, #568]	; (8001564 <main+0x2cc>)
 800132c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800132e:	e9cd 6312 	strd	r6, r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001332:	e9cd 5914 	strd	r5, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(PIN_LED_GPIO_Port, &GPIO_InitStruct);
 8001336:	f000 feff 	bl	8002138 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(PIN_LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800133c:	488a      	ldr	r0, [pc, #552]	; (8001568 <main+0x2d0>)
 800133e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001344:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(PIN_LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f000 fef6 	bl	8002138 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800134c:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	4887      	ldr	r0, [pc, #540]	; (800156c <main+0x2d4>)
 8001350:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	e9cd 5814 	strd	r5, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f000 feed 	bl	8002138 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001360:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	433b      	orrs	r3, r7
 8001364:	6163      	str	r3, [r4, #20]
 8001366:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001368:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800136c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001372:	f000 fd91 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001376:	200b      	movs	r0, #11
 8001378:	f000 fdc0 	bl	8001efc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800137c:	462a      	mov	r2, r5
 800137e:	4629      	mov	r1, r5
 8001380:	2010      	movs	r0, #16
 8001382:	f000 fd89 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001386:	2010      	movs	r0, #16
 8001388:	f000 fdb8 	bl	8001efc <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 800138c:	4c78      	ldr	r4, [pc, #480]	; (8001570 <main+0x2d8>)
 800138e:	4b79      	ldr	r3, [pc, #484]	; (8001574 <main+0x2dc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001390:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001392:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001398:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 800139a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 80013a2:	9514      	str	r5, [sp, #80]	; 0x50
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013a4:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a6:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 80013a8:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013aa:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 80013ac:	f8c4 8010 	str.w	r8, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b0:	f000 fce2 	bl	8001d78 <HAL_ADC_Init>
 80013b4:	b108      	cbz	r0, 80013ba <main+0x122>
 80013b6:	b672      	cpsid	i
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <main+0x120>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80013ba:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013bc:	e9cd 0712 	strd	r0, r7, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	a912      	add	r1, sp, #72	; 0x48
 80013c2:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80013c4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	f000 fb69 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80013ca:	b108      	cbz	r0, 80013d0 <main+0x138>
 80013cc:	b672      	cpsid	i
  while (1)
 80013ce:	e7fe      	b.n	80013ce <main+0x136>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d0:	4620      	mov	r0, r4
 80013d2:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013d4:	e9cd 7812 	strd	r7, r8, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	f000 fb60 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80013dc:	4605      	mov	r5, r0
 80013de:	b108      	cbz	r0, 80013e4 <main+0x14c>
 80013e0:	b672      	cpsid	i
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <main+0x14a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e4:	4601      	mov	r1, r0
 80013e6:	2210      	movs	r2, #16
 80013e8:	a807      	add	r0, sp, #28
 80013ea:	f004 f909 	bl	8005600 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	221c      	movs	r2, #28
 80013f0:	4629      	mov	r1, r5
 80013f2:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f8:	f004 f902 	bl	8005600 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fc:	2220      	movs	r2, #32
 80013fe:	4629      	mov	r1, r5
 8001400:	a812      	add	r0, sp, #72	; 0x48
 8001402:	f004 f8fd 	bl	8005600 <memset>
  htim1.Instance = TIM1;
 8001406:	4c5c      	ldr	r4, [pc, #368]	; (8001578 <main+0x2e0>)
 8001408:	4b5c      	ldr	r3, [pc, #368]	; (800157c <main+0x2e4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140a:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 2-1;
 800140c:	e9c4 3700 	strd	r3, r7, [r4]
  htim1.Init.Period = 2048-1;
 8001410:	f240 73ff 	movw	r3, #2047	; 0x7ff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001418:	2380      	movs	r3, #128	; 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 800141c:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800141e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001420:	f001 fd12 	bl	8002e48 <HAL_TIM_Base_Init>
 8001424:	b108      	cbz	r0, 800142a <main+0x192>
 8001426:	b672      	cpsid	i
  while (1)
 8001428:	e7fe      	b.n	8001428 <main+0x190>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800142e:	4620      	mov	r0, r4
 8001430:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001434:	f001 fdf1 	bl	800301a <HAL_TIM_ConfigClockSource>
 8001438:	b108      	cbz	r0, 800143e <main+0x1a6>
 800143a:	b672      	cpsid	i
  while (1)
 800143c:	e7fe      	b.n	800143c <main+0x1a4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143e:	4620      	mov	r0, r4
 8001440:	f001 fd2e 	bl	8002ea0 <HAL_TIM_PWM_Init>
 8001444:	b108      	cbz	r0, 800144a <main+0x1b2>
 8001446:	b672      	cpsid	i
  while (1)
 8001448:	e7fe      	b.n	8001448 <main+0x1b0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800144e:	a905      	add	r1, sp, #20
 8001450:	4620      	mov	r0, r4
 8001452:	f002 f81b 	bl	800348c <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	b108      	cbz	r0, 800145c <main+0x1c4>
 8001458:	b672      	cpsid	i
  while (1)
 800145a:	e7fe      	b.n	800145a <main+0x1c2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001462:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001466:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001468:	2204      	movs	r2, #4
 800146a:	4620      	mov	r0, r4
 800146c:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 1;
 800146e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001472:	f001 fd6d 	bl	8002f50 <HAL_TIM_PWM_ConfigChannel>
 8001476:	b108      	cbz	r0, 800147c <main+0x1e4>
 8001478:	b672      	cpsid	i
  while (1)
 800147a:	e7fe      	b.n	800147a <main+0x1e2>
  sConfigOC.Pulse = 0;
 800147c:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800147e:	2208      	movs	r2, #8
 8001480:	4620      	mov	r0, r4
 8001482:	a90b      	add	r1, sp, #44	; 0x2c
 8001484:	f001 fd64 	bl	8002f50 <HAL_TIM_PWM_ConfigChannel>
 8001488:	b108      	cbz	r0, 800148e <main+0x1f6>
 800148a:	b672      	cpsid	i
  while (1)
 800148c:	e7fe      	b.n	800148c <main+0x1f4>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148e:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8001492:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001496:	e9cd 0616 	strd	r0, r6, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149a:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800149c:	a912      	add	r1, sp, #72	; 0x48
 800149e:	4620      	mov	r0, r4
 80014a0:	f002 f822 	bl	80034e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014a4:	b108      	cbz	r0, 80014aa <main+0x212>
 80014a6:	b672      	cpsid	i
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <main+0x210>
  HAL_TIM_MspPostInit(&htim1);
 80014aa:	4833      	ldr	r0, [pc, #204]	; (8001578 <main+0x2e0>)
 80014ac:	f000 f9a4 	bl	80017f8 <HAL_TIM_MspPostInit>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b0:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80014b4:	4832      	ldr	r0, [pc, #200]	; (8001580 <main+0x2e8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <main+0x2ec>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014b8:	2601      	movs	r6, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ba:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014be:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c4:	e9c0 6205 	strd	r6, r2, [r0, #20]
  hspi1.Init.CRCPolynomial = 10;
 80014c8:	270a      	movs	r7, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014ca:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014cc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d0:	e9c0 2307 	strd	r2, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCPolynomial = 10;
 80014da:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014dc:	f001 fa5c 	bl	8002998 <HAL_SPI_Init>
 80014e0:	4605      	mov	r5, r0
 80014e2:	b108      	cbz	r0, 80014e8 <main+0x250>
 80014e4:	b672      	cpsid	i
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <main+0x24e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e8:	4601      	mov	r1, r0
 80014ea:	2210      	movs	r2, #16
 80014ec:	a807      	add	r0, sp, #28
 80014ee:	f004 f887 	bl	8005600 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014f2:	2214      	movs	r2, #20
 80014f4:	4629      	mov	r1, r5
 80014f6:	a80b      	add	r0, sp, #44	; 0x2c
 80014f8:	f004 f882 	bl	8005600 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	221c      	movs	r2, #28
 80014fe:	4629      	mov	r1, r5
 8001500:	a812      	add	r0, sp, #72	; 0x48
  htim3.Instance = TIM3;
 8001502:	4c21      	ldr	r4, [pc, #132]	; (8001588 <main+0x2f0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	f004 f87a 	bl	8005600 <memset>
  htim3.Instance = TIM3;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <main+0x2f4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800150e:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 2-1;
 8001510:	e9c4 3600 	strd	r3, r6, [r4]
  htim3.Init.Period = 1024-1;
 8001514:	f240 33ff 	movw	r3, #1023	; 0x3ff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	60a5      	str	r5, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001520:	f001 fc92 	bl	8002e48 <HAL_TIM_Base_Init>
 8001524:	b108      	cbz	r0, 800152a <main+0x292>
 8001526:	b672      	cpsid	i
  while (1)
 8001528:	e7fe      	b.n	8001528 <main+0x290>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152e:	4620      	mov	r0, r4
 8001530:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001534:	f001 fd71 	bl	800301a <HAL_TIM_ConfigClockSource>
 8001538:	b108      	cbz	r0, 800153e <main+0x2a6>
 800153a:	b672      	cpsid	i
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0x2a4>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800153e:	4620      	mov	r0, r4
 8001540:	f001 fcae 	bl	8002ea0 <HAL_TIM_PWM_Init>
 8001544:	b108      	cbz	r0, 800154a <main+0x2b2>
 8001546:	b672      	cpsid	i
  while (1)
 8001548:	e7fe      	b.n	8001548 <main+0x2b0>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800154a:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800154c:	a90b      	add	r1, sp, #44	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800154e:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001552:	4620      	mov	r0, r4
 8001554:	f001 fe47 	bl	80031e6 <HAL_TIM_SlaveConfigSynchro>
 8001558:	b1d0      	cbz	r0, 8001590 <main+0x2f8>
 800155a:	b672      	cpsid	i
  while (1)
 800155c:	e7fe      	b.n	800155c <main+0x2c4>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40011000 	.word	0x40011000
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00
 8001570:	20000200 	.word	0x20000200
 8001574:	40012400 	.word	0x40012400
 8001578:	20000310 	.word	0x20000310
 800157c:	40012c00 	.word	0x40012c00
 8001580:	200002b8 	.word	0x200002b8
 8001584:	40013000 	.word	0x40013000
 8001588:	20000358 	.word	0x20000358
 800158c:	40000400 	.word	0x40000400
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001590:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001592:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	e9cd 3005 	strd	r3, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001598:	4620      	mov	r0, r4
 800159a:	f001 ff77 	bl	800348c <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4602      	mov	r2, r0
 80015a0:	b108      	cbz	r0, 80015a6 <main+0x30e>
 80015a2:	b672      	cpsid	i
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <main+0x30c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 80015aa:	e9cd 3012 	strd	r3, r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b0:	a912      	add	r1, sp, #72	; 0x48
 80015b2:	4620      	mov	r0, r4
 80015b4:	f001 fccc 	bl	8002f50 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4604      	mov	r4, r0
 80015ba:	b108      	cbz	r0, 80015c0 <main+0x328>
 80015bc:	b672      	cpsid	i
  while (1)
 80015be:	e7fe      	b.n	80015be <main+0x326>
  dspInit();
 80015c0:	f002 fdb8 	bl	8004134 <dspInit>
  fftInit();
 80015c4:	f002 feb4 	bl	8004330 <fftInit>
  compInit();
 80015c8:	f002 f9f8 	bl	80039bc <compInit>
  AudioAgc_AgcWdsp_Init();
 80015cc:	f002 fb06 	bl	8003bdc <AudioAgc_AgcWdsp_Init>
  AudioAgc_SetupAgcWdsp(31250, 0);
 80015d0:	4621      	mov	r1, r4
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <main+0x384>)
 80015d4:	f002 fb28 	bl	8003c28 <AudioAgc_SetupAgcWdsp>
  dspStart();
 80015d8:	f002 fdce 	bl	8004178 <dspStart>
  HAL_Delay(100);
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f000 fa11 	bl	8001a04 <HAL_Delay>
  HAL_GPIO_WritePin(PIN_LCD_CS_GPIO_Port, PIN_LCD_CS_Pin, GPIO_PIN_RESET);
 80015e2:	4622      	mov	r2, r4
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <main+0x388>)
 80015e8:	f000 fe80 	bl	80022ec <HAL_GPIO_WritePin>
  ST7920_Init();
 80015ec:	f002 f970 	bl	80038d0 <ST7920_Init>
  ST7920_GraphicMode(1);
 80015f0:	4630      	mov	r0, r6
 80015f2:	f001 fffb 	bl	80035ec <ST7920_GraphicMode>
  ST7920_Clear();
 80015f6:	f002 f937 	bl	8003868 <ST7920_Clear>
  SetPixel(10, 10);
 80015fa:	4639      	mov	r1, r7
 80015fc:	4638      	mov	r0, r7
 80015fe:	f002 f997 	bl	8003930 <SetPixel>
  GLCD_Font_Print(10, 3, "hello");
 8001602:	2103      	movs	r1, #3
 8001604:	4638      	mov	r0, r7
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <main+0x38c>)
 8001608:	f002 f9b8 	bl	800397c <GLCD_Font_Print>
  ST7920_Update();
 800160c:	f002 f922 	bl	8003854 <ST7920_Update>
	 dspProc();
 8001610:	f002 fe20 	bl	8004254 <dspProc>
	 everythingElse();
 8001614:	f7ff fdf8 	bl	8001208 <everythingElse>
  while (1)
 8001618:	e7fa      	b.n	8001610 <main+0x378>
 800161a:	bf00      	nop
 800161c:	46f42400 	.word	0x46f42400
 8001620:	40010800 	.word	0x40010800
 8001624:	08008f40 	.word	0x08008f40

08001628 <Error_Handler>:
 8001628:	b672      	cpsid	i
  while (1)
 800162a:	e7fe      	b.n	800162a <Error_Handler+0x2>

0800162c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_MspInit+0x3c>)
{
 800162e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	619a      	str	r2, [r3, #24]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	f002 0201 	and.w	r2, r2, #1
 800163e:	9200      	str	r2, [sp, #0]
 8001640:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	69da      	ldr	r2, [r3, #28]
 8001644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001648:	61da      	str	r2, [r3, #28]
 800164a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001656:	6853      	ldr	r3, [r2, #4]
 8001658:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800165c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	b002      	add	sp, #8
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000

08001670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001670:	b530      	push	{r4, r5, lr}
 8001672:	4605      	mov	r5, r0
 8001674:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	2210      	movs	r2, #16
 8001678:	2100      	movs	r1, #0
 800167a:	a802      	add	r0, sp, #8
 800167c:	f003 ffc0 	bl	8005600 <memset>
  if(hadc->Instance==ADC1)
 8001680:	682a      	ldr	r2, [r5, #0]
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_ADC_MspInit+0x88>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d135      	bne.n	80016f4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001688:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800168c:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	481b      	ldr	r0, [pc, #108]	; (80016fc <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001694:	619a      	str	r2, [r3, #24]
 8001696:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800169a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016a4:	4c16      	ldr	r4, [pc, #88]	; (8001700 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	f042 0204 	orr.w	r2, r2, #4
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b6:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f000 fd3c 	bl	8002138 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c0:	2300      	movs	r3, #0
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c4:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c6:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ca:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016d4:	e9c4 1303 	strd	r1, r3, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016d8:	2320      	movs	r3, #32
 80016da:	e9c4 0305 	strd	r0, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016e2:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016e4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016e6:	f000 fc2b 	bl	8001f40 <HAL_DMA_Init>
 80016ea:	b108      	cbz	r0, 80016f0 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80016ec:	f7ff ff9c 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016f0:	622c      	str	r4, [r5, #32]
 80016f2:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016f4:	b007      	add	sp, #28
 80016f6:	bd30      	pop	{r4, r5, pc}
 80016f8:	40012400 	.word	0x40012400
 80016fc:	40010800 	.word	0x40010800
 8001700:	20000230 	.word	0x20000230
 8001704:	40020008 	.word	0x40020008

08001708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001708:	b510      	push	{r4, lr}
 800170a:	4604      	mov	r4, r0
 800170c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	2210      	movs	r2, #16
 8001710:	2100      	movs	r1, #0
 8001712:	a802      	add	r0, sp, #8
 8001714:	f003 ff74 	bl	8005600 <memset>
  if(hspi->Instance==SPI1)
 8001718:	6822      	ldr	r2, [r4, #0]
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_SPI_MspInit+0x58>)
 800171c:	429a      	cmp	r2, r3
 800171e:	d11d      	bne.n	800175c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001720:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001724:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	480f      	ldr	r0, [pc, #60]	; (8001764 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001732:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	f042 0204 	orr.w	r2, r2, #4
 8001740:	619a      	str	r2, [r3, #24]
 8001742:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f000 fcee 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800175c:	b006      	add	sp, #24
 800175e:	bd10      	pop	{r4, pc}
 8001760:	40013000 	.word	0x40013000
 8001764:	40010800 	.word	0x40010800

08001768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM1)
 800176a:	6803      	ldr	r3, [r0, #0]
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_TIM_Base_MspInit+0x7c>)
{
 800176e:	4605      	mov	r5, r0
  if(htim_base->Instance==TIM1)
 8001770:	4293      	cmp	r3, r2
 8001772:	d128      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_TIM_Base_MspInit+0x80>)

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8001776:	4c1d      	ldr	r4, [pc, #116]	; (80017ec <HAL_TIM_Base_MspInit+0x84>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001778:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	2100      	movs	r1, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_TIM_Base_MspInit+0x88>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800178e:	2310      	movs	r3, #16
 8001790:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	2380      	movs	r3, #128	; 0x80
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001796:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800179a:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80017a2:	f04f 0c20 	mov.w	ip, #32
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017a6:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80017ae:	4620      	mov	r0, r4
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80017b0:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80017b4:	f000 fbc4 	bl	8001f40 <HAL_DMA_Init>
 80017b8:	b108      	cbz	r0, 80017be <HAL_TIM_Base_MspInit+0x56>
    {
      Error_Handler();
 80017ba:	f7ff ff35 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80017be:	62ec      	str	r4, [r5, #44]	; 0x2c
 80017c0:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017c2:	b003      	add	sp, #12
 80017c4:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM3)
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_TIM_Base_MspInit+0x8c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d1fa      	bne.n	80017c2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_TIM_Base_MspInit+0x80>)
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	f042 0202 	orr.w	r2, r2, #2
 80017d4:	61da      	str	r2, [r3, #28]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	9b01      	ldr	r3, [sp, #4]
}
 80017e0:	e7ef      	b.n	80017c2 <HAL_TIM_Base_MspInit+0x5a>
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	20000274 	.word	0x20000274
 80017f0:	4002006c 	.word	0x4002006c
 80017f4:	40000400 	.word	0x40000400

080017f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	4604      	mov	r4, r0
 80017fc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	2210      	movs	r2, #16
 8001800:	2100      	movs	r1, #0
 8001802:	a802      	add	r0, sp, #8
 8001804:	f003 fefc 	bl	8005600 <memset>
  if(htim->Instance==TIM1)
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_TIM_MspPostInit+0x48>)
 800180c:	429a      	cmp	r2, r3
 800180e:	d114      	bne.n	800183a <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001814:	699a      	ldr	r2, [r3, #24]
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	f042 0204 	orr.w	r2, r2, #4
 800181c:	619a      	str	r2, [r3, #24]
 800181e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f000 fc7f 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800183a:	b006      	add	sp, #24
 800183c:	bd10      	pop	{r4, pc}
 800183e:	bf00      	nop
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40010800 	.word	0x40010800

08001848 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler>

0800184a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler>

0800184c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler>

0800184e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler>

08001850 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler>

08001852 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	4770      	bx	lr

08001854 <DebugMon_Handler>:
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 b8c2 	b.w	80019e0 <HAL_IncTick>

0800185c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800185c:	4801      	ldr	r0, [pc, #4]	; (8001864 <DMA1_Channel1_IRQHandler+0x8>)
 800185e:	f000 bbd9 	b.w	8002014 <HAL_DMA_IRQHandler>
 8001862:	bf00      	nop
 8001864:	20000230 	.word	0x20000230

08001868 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001868:	4801      	ldr	r0, [pc, #4]	; (8001870 <DMA1_Channel6_IRQHandler+0x8>)
 800186a:	f000 bbd3 	b.w	8002014 <HAL_DMA_IRQHandler>
 800186e:	bf00      	nop
 8001870:	20000274 	.word	0x20000274

08001874 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001874:	2001      	movs	r0, #1
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b508      	push	{r3, lr}
	errno = EINVAL;
 800187a:	f003 fe97 	bl	80055ac <__errno>
 800187e:	2316      	movs	r3, #22
 8001880:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001882:	f04f 30ff 	mov.w	r0, #4294967295
 8001886:	bd08      	pop	{r3, pc}

08001888 <_exit>:

void _exit (int status)
{
 8001888:	b508      	push	{r3, lr}
	errno = EINVAL;
 800188a:	f003 fe8f 	bl	80055ac <__errno>
 800188e:	2316      	movs	r3, #22
 8001890:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001892:	e7fe      	b.n	8001892 <_exit+0xa>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	460d      	mov	r5, r1
 8001898:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	460e      	mov	r6, r1
 800189c:	1b73      	subs	r3, r6, r5
 800189e:	429c      	cmp	r4, r3
 80018a0:	dc01      	bgt.n	80018a6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80018a2:	4620      	mov	r0, r4
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80018a6:	f3af 8000 	nop.w
 80018aa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	e7f5      	b.n	800189c <_read+0x8>

080018b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	460d      	mov	r5, r1
 80018b4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	460e      	mov	r6, r1
 80018b8:	1b73      	subs	r3, r6, r5
 80018ba:	429c      	cmp	r4, r3
 80018bc:	dc01      	bgt.n	80018c2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80018be:	4620      	mov	r0, r4
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80018c2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80018c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	e7f5      	b.n	80018b8 <_write+0x8>

080018cc <_close>:

int _close(int file)
{
	return -1;
}
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	4770      	bx	lr

080018d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80018d6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80018d8:	604b      	str	r3, [r1, #4]
}
 80018da:	4770      	bx	lr

080018dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018dc:	2001      	movs	r0, #1
 80018de:	4770      	bx	lr

080018e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018e0:	2000      	movs	r0, #0
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <_sbrk+0x30>)
{
 80018e6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80018e8:	6811      	ldr	r1, [r2, #0]
{
 80018ea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80018ec:	b909      	cbnz	r1, 80018f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <_sbrk+0x34>)
 80018f0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	6810      	ldr	r0, [r2, #0]
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <_sbrk+0x38>)
 80018f6:	4c0a      	ldr	r4, [pc, #40]	; (8001920 <_sbrk+0x3c>)
 80018f8:	4403      	add	r3, r0
 80018fa:	1b09      	subs	r1, r1, r4
 80018fc:	428b      	cmp	r3, r1
 80018fe:	d906      	bls.n	800190e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001900:	f003 fe54 	bl	80055ac <__errno>
 8001904:	230c      	movs	r3, #12
 8001906:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001908:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800190c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800190e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001910:	e7fc      	b.n	800190c <_sbrk+0x28>
 8001912:	bf00      	nop
 8001914:	200003a0 	.word	0x200003a0
 8001918:	20002238 	.word	0x20002238
 800191c:	20005000 	.word	0x20005000
 8001920:	00000400 	.word	0x00000400

08001924 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	4770      	bx	lr
	...

08001928 <Reset_Handler>:
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopFillZerobss+0x1a>)
 800192e:	2300      	movs	r3, #0
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:
 8001932:	58d4      	ldr	r4, [r2, r3]
 8001934:	50c4      	str	r4, [r0, r3]
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:
 8001938:	18c4      	adds	r4, r0, r3
 800193a:	428c      	cmp	r4, r1
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x1e>)
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopFillZerobss+0x22>)
 8001942:	2300      	movs	r3, #0
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:
 800194a:	42a2      	cmp	r2, r4
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>
 800194e:	f7ff ffe9 	bl	8001924 <SystemInit>
 8001952:	f003 fe31 	bl	80055b8 <__libc_init_array>
 8001956:	f7ff fc9f 	bl	8001298 <main>
 800195a:	4770      	bx	lr
 800195c:	20000000 	.word	0x20000000
 8001960:	200001e0 	.word	0x200001e0
 8001964:	08009af4 	.word	0x08009af4
 8001968:	200001e0 	.word	0x200001e0
 800196c:	20002234 	.word	0x20002234

08001970 <ADC1_2_IRQHandler>:
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>
	...

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_InitTick+0x3c>)
{
 8001978:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197a:	7818      	ldrb	r0, [r3, #0]
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	fbb3 f3f0 	udiv	r3, r3, r0
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <HAL_InitTick+0x40>)
 8001986:	6810      	ldr	r0, [r2, #0]
 8001988:	fbb0 f0f3 	udiv	r0, r0, r3
 800198c:	f000 fac4 	bl	8001f18 <HAL_SYSTICK_Config>
 8001990:	4604      	mov	r4, r0
 8001992:	b958      	cbnz	r0, 80019ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001994:	2d0f      	cmp	r5, #15
 8001996:	d809      	bhi.n	80019ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	4602      	mov	r2, r0
 800199a:	4629      	mov	r1, r5
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 fa7a 	bl	8001e98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4620      	mov	r0, r4
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_InitTick+0x44>)
 80019a8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019ac:	2001      	movs	r0, #1
 80019ae:	e7fc      	b.n	80019aa <HAL_InitTick+0x36>
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000008 	.word	0x20000008

080019bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x20>)
{
 80019be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ca:	f000 fa53 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ce:	200f      	movs	r0, #15
 80019d0:	f7ff ffd0 	bl	8001974 <HAL_InitTick>
  HAL_MspInit();
 80019d4:	f7ff fe2a 	bl	800162c <HAL_MspInit>
}
 80019d8:	2000      	movs	r0, #0
 80019da:	bd08      	pop	{r3, pc}
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_IncTick+0x10>)
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_IncTick+0x14>)
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	440b      	add	r3, r1
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200003a4 	.word	0x200003a4
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019f8:	4b01      	ldr	r3, [pc, #4]	; (8001a00 <HAL_GetTick+0x8>)
 80019fa:	6818      	ldr	r0, [r3, #0]
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200003a4 	.word	0x200003a4

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff fff6 	bl	80019f8 <HAL_GetTick>
 8001a0c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001a10:	bf1e      	ittt	ne
 8001a12:	4b04      	ldrne	r3, [pc, #16]	; (8001a24 <HAL_Delay+0x20>)
 8001a14:	781b      	ldrbne	r3, [r3, #0]
 8001a16:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	1b43      	subs	r3, r0, r5
 8001a1e:	42a3      	cmp	r3, r4
 8001a20:	d3fa      	bcc.n	8001a18 <HAL_Delay+0x14>
  {
  }
}
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	20000004 	.word	0x20000004

08001a28 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a28:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001a2a:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a2e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001a32:	d11b      	bne.n	8001a6c <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	6892      	ldr	r2, [r2, #8]
 8001a40:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001a44:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001a48:	d10c      	bne.n	8001a64 <ADC_DMAConvCplt+0x3c>
 8001a4a:	7b1a      	ldrb	r2, [r3, #12]
 8001a4c:	b952      	cbnz	r2, 8001a64 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a58:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5a:	bf5e      	ittt	pl
 8001a5c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001a5e:	f042 0201 	orrpl.w	r2, r2, #1
 8001a62:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fc34 	bl	80042d2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a6a:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
}
 8001a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4718      	bx	r3

08001a76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a76:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a78:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a7a:	f002 fc29 	bl	80042d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a7e:	bd08      	pop	{r3, pc}

08001a80 <HAL_ADC_ErrorCallback>:
 8001a80:	4770      	bx	lr

08001a82 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a82:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001a84:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8c:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a96:	f7ff fff3 	bl	8001a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9a:	bd08      	pop	{r3, pc}

08001a9c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001a9c:	2300      	movs	r3, #0
{ 
 8001a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001aa0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001aa2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001aa6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d06c      	beq.n	8001b86 <HAL_ADC_ConfigChannel+0xea>
 8001aac:	2301      	movs	r3, #1
 8001aae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001ab2:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab4:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8001ab6:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab8:	6808      	ldr	r0, [r1, #0]
 8001aba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8001abe:	d822      	bhi.n	8001b06 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac0:	261f      	movs	r6, #31
 8001ac2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001ac4:	3b05      	subs	r3, #5
 8001ac6:	409e      	lsls	r6, r3
 8001ac8:	ea25 0506 	bic.w	r5, r5, r6
 8001acc:	fa00 f303 	lsl.w	r3, r0, r3
 8001ad0:	432b      	orrs	r3, r5
 8001ad2:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ad4:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ad6:	688b      	ldr	r3, [r1, #8]
 8001ad8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001adc:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ae0:	d929      	bls.n	8001b36 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ae2:	68d6      	ldr	r6, [r2, #12]
 8001ae4:	3d1e      	subs	r5, #30
 8001ae6:	40a9      	lsls	r1, r5
 8001ae8:	ea26 0101 	bic.w	r1, r6, r1
 8001aec:	40ab      	lsls	r3, r5
 8001aee:	430b      	orrs	r3, r1
 8001af0:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001af2:	f1a0 0310 	sub.w	r3, r0, #16
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d925      	bls.n	8001b46 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afa:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001afc:	2300      	movs	r3, #0
 8001afe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001b02:	b002      	add	sp, #8
 8001b04:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001b06:	2d0c      	cmp	r5, #12
 8001b08:	f04f 051f 	mov.w	r5, #31
 8001b0c:	d809      	bhi.n	8001b22 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b0e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001b10:	3b23      	subs	r3, #35	; 0x23
 8001b12:	409d      	lsls	r5, r3
 8001b14:	ea26 0505 	bic.w	r5, r6, r5
 8001b18:	fa00 f303 	lsl.w	r3, r0, r3
 8001b1c:	432b      	orrs	r3, r5
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	e7d8      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b22:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001b24:	3b41      	subs	r3, #65	; 0x41
 8001b26:	409d      	lsls	r5, r3
 8001b28:	ea26 0505 	bic.w	r5, r6, r5
 8001b2c:	fa00 f303 	lsl.w	r3, r0, r3
 8001b30:	432b      	orrs	r3, r5
 8001b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b34:	e7ce      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b36:	6910      	ldr	r0, [r2, #16]
 8001b38:	40a9      	lsls	r1, r5
 8001b3a:	ea20 0101 	bic.w	r1, r0, r1
 8001b3e:	40ab      	lsls	r3, r5
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6113      	str	r3, [r2, #16]
 8001b44:	e7d9      	b.n	8001afa <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_ADC_ConfigChannel+0xf0>)
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d116      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b4c:	6893      	ldr	r3, [r2, #8]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d4d3      	bmi.n	8001afa <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b52:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b54:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b5a:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5c:	d1cd      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_ADC_ConfigChannel+0xf4>)
 8001b60:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <HAL_ADC_ConfigChannel+0xf8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b68:	220a      	movs	r2, #10
 8001b6a:	4353      	muls	r3, r2
            wait_loop_index--;
 8001b6c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0c2      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001b74:	9b01      	ldr	r3, [sp, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	e7f8      	b.n	8001b6c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7e:	f043 0320 	orr.w	r3, r3, #32
 8001b82:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001b84:	e7ba      	b.n	8001afc <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001b86:	2002      	movs	r0, #2
 8001b88:	e7bb      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x66>
 8001b8a:	bf00      	nop
 8001b8c:	40012400 	.word	0x40012400
 8001b90:	20000000 	.word	0x20000000
 8001b94:	000f4240 	.word	0x000f4240

08001b98 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001b98:	2300      	movs	r3, #0
{
 8001b9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001b9c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b9e:	6803      	ldr	r3, [r0, #0]
{
 8001ba0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	07d2      	lsls	r2, r2, #31
 8001ba6:	d502      	bpl.n	8001bae <ADC_Enable+0x16>
  return HAL_OK;
 8001ba8:	2000      	movs	r0, #0
}
 8001baa:	b003      	add	sp, #12
 8001bac:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <ADC_Enable+0x70>)
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <ADC_Enable+0x74>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001bc0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001bc2:	9b01      	ldr	r3, [sp, #4]
 8001bc4:	b9e3      	cbnz	r3, 8001c00 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8001bc6:	f7ff ff17 	bl	80019f8 <HAL_GetTick>
 8001bca:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	07db      	lsls	r3, r3, #31
 8001bd2:	d4e9      	bmi.n	8001ba8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bd4:	f7ff ff10 	bl	80019f8 <HAL_GetTick>
 8001bd8:	1b40      	subs	r0, r0, r5
 8001bda:	2802      	cmp	r0, #2
 8001bdc:	d9f6      	bls.n	8001bcc <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f013 0301 	ands.w	r3, r3, #1
 8001be6:	d1f1      	bne.n	8001bcc <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bec:	f042 0210 	orr.w	r2, r2, #16
 8001bf0:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001bf4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001bfe:	e7d4      	b.n	8001baa <ADC_Enable+0x12>
      wait_loop_index--;
 8001c00:	9b01      	ldr	r3, [sp, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	e7dc      	b.n	8001bc0 <ADC_Enable+0x28>
 8001c06:	bf00      	nop
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	000f4240 	.word	0x000f4240

08001c10 <HAL_ADC_Start_DMA>:
{
 8001c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_ADC_Start_DMA+0x108>)
{
 8001c16:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c18:	6802      	ldr	r2, [r0, #0]
{
 8001c1a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c1c:	429a      	cmp	r2, r3
{
 8001c1e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c20:	d002      	beq.n	8001c28 <HAL_ADC_Start_DMA+0x18>
 8001c22:	493e      	ldr	r1, [pc, #248]	; (8001d1c <HAL_ADC_Start_DMA+0x10c>)
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d103      	bne.n	8001c30 <HAL_ADC_Start_DMA+0x20>
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001c2e:	d16e      	bne.n	8001d0e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001c30:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d06c      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x102>
 8001c38:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001c3a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001c3c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001c40:	f7ff ffaa 	bl	8001b98 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001c44:	4606      	mov	r6, r0
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d15d      	bne.n	8001d06 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c4c:	6821      	ldr	r1, [r4, #0]
 8001c4e:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001c50:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8001c54:	f025 0501 	bic.w	r5, r5, #1
 8001c58:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c5c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c60:	d104      	bne.n	8001c6c <HAL_ADC_Start_DMA+0x5c>
 8001c62:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <HAL_ADC_Start_DMA+0x108>)
 8001c64:	6853      	ldr	r3, [r2, #4]
 8001c66:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001c6a:	d13e      	bne.n	8001cea <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c72:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c74:	684b      	ldr	r3, [r1, #4]
 8001c76:	055a      	lsls	r2, r3, #21
 8001c78:	d505      	bpl.n	8001c86 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c84:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c88:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c8e:	bf18      	it	ne
 8001c90:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c92:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c94:	bf18      	it	ne
 8001c96:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ca4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ca6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_ADC_Start_DMA+0x114>)
 8001caa:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_ADC_Start_DMA+0x118>)
 8001cae:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cb0:	f06f 0302 	mvn.w	r3, #2
 8001cb4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cb8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	f000 f969 	bl	8001f9c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001cd2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	bf0c      	ite	eq
 8001cda:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cde:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001ce2:	609a      	str	r2, [r3, #8]
}
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cf0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cf2:	6853      	ldr	r3, [r2, #4]
 8001cf4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cf6:	bf41      	itttt	mi
 8001cf8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001cfa:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001cfe:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001d02:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001d04:	e7bf      	b.n	8001c86 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001d06:	2300      	movs	r3, #0
 8001d08:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001d0c:	e7ea      	b.n	8001ce4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001d0e:	2601      	movs	r6, #1
 8001d10:	e7e8      	b.n	8001ce4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001d12:	2602      	movs	r6, #2
 8001d14:	e7e6      	b.n	8001ce4 <HAL_ADC_Start_DMA+0xd4>
 8001d16:	bf00      	nop
 8001d18:	40012400 	.word	0x40012400
 8001d1c:	40012800 	.word	0x40012800
 8001d20:	08001a29 	.word	0x08001a29
 8001d24:	08001a77 	.word	0x08001a77
 8001d28:	08001a83 	.word	0x08001a83

08001d2c <ADC_ConversionStop_Disable>:
{
 8001d2c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d2e:	6803      	ldr	r3, [r0, #0]
{
 8001d30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	07d1      	lsls	r1, r2, #31
 8001d36:	d401      	bmi.n	8001d3c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001d38:	2000      	movs	r0, #0
}
 8001d3a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001d44:	f7ff fe58 	bl	80019f8 <HAL_GetTick>
 8001d48:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	07db      	lsls	r3, r3, #31
 8001d50:	d5f2      	bpl.n	8001d38 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d52:	f7ff fe51 	bl	80019f8 <HAL_GetTick>
 8001d56:	1b40      	subs	r0, r0, r5
 8001d58:	2802      	cmp	r0, #2
 8001d5a:	d9f6      	bls.n	8001d4a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	07da      	lsls	r2, r3, #31
 8001d62:	d5f2      	bpl.n	8001d4a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001d66:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001d76:	e7e0      	b.n	8001d3a <ADC_ConversionStop_Disable+0xe>

08001d78 <HAL_ADC_Init>:
{
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d06e      	beq.n	8001e5e <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d82:	b923      	cbnz	r3, 8001d8e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001d86:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001d8a:	f7ff fc71 	bl	8001670 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f7ff ffcc 	bl	8001d2c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d96:	f013 0310 	ands.w	r3, r3, #16
 8001d9a:	d162      	bne.n	8001e62 <HAL_ADC_Init+0xea>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d160      	bne.n	8001e62 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8001da0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da2:	69e5      	ldr	r5, [r4, #28]
 8001da4:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001da6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001daa:	f022 0202 	bic.w	r2, r2, #2
 8001dae:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001db2:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001db4:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001db6:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001db8:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dbe:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dc2:	d037      	beq.n	8001e34 <HAL_ADC_Init+0xbc>
 8001dc4:	2d01      	cmp	r5, #1
 8001dc6:	bf14      	ite	ne
 8001dc8:	2700      	movne	r7, #0
 8001dca:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dce:	7d26      	ldrb	r6, [r4, #20]
 8001dd0:	2e01      	cmp	r6, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd4:	bb82      	cbnz	r2, 8001e38 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001dd6:	69a2      	ldr	r2, [r4, #24]
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8001dde:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001de2:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001de4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001de8:	6856      	ldr	r6, [r2, #4]
 8001dea:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001dee:	ea46 0607 	orr.w	r6, r6, r7
 8001df2:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001df4:	6897      	ldr	r7, [r2, #8]
 8001df6:	4e1d      	ldr	r6, [pc, #116]	; (8001e6c <HAL_ADC_Init+0xf4>)
 8001df8:	ea06 0607 	and.w	r6, r6, r7
 8001dfc:	ea46 0601 	orr.w	r6, r6, r1
 8001e00:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e02:	d001      	beq.n	8001e08 <HAL_ADC_Init+0x90>
 8001e04:	2d01      	cmp	r5, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001e0e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001e10:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001e14:	432b      	orrs	r3, r5
 8001e16:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e18:	6892      	ldr	r2, [r2, #8]
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_ADC_Init+0xf8>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	4299      	cmp	r1, r3
 8001e20:	d113      	bne.n	8001e4a <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8001e22:	2300      	movs	r3, #0
 8001e24:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e28:	f023 0303 	bic.w	r3, r3, #3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e34:	462f      	mov	r7, r5
 8001e36:	e7ca      	b.n	8001dce <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001e48:	e7cb      	b.n	8001de2 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e4c:	f023 0312 	bic.w	r3, r3, #18
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
 8001e60:	e7e7      	b.n	8001e32 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e64:	f043 0310 	orr.w	r3, r3, #16
 8001e68:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001e6a:	e7f8      	b.n	8001e5e <HAL_ADC_Init+0xe6>
 8001e6c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e70:	ff1f0efe 	.word	0xff1f0efe

08001e74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4907      	ldr	r1, [pc, #28]	; (8001e94 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e76:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e82:	0412      	lsls	r2, r2, #16
 8001e84:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e90:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b530      	push	{r4, r5, lr}
 8001e9c:	68dc      	ldr	r4, [r3, #12]
 8001e9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	bf28      	it	cs
 8001eac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb4:	bf98      	it	ls
 8001eb6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebc:	bf88      	it	hi
 8001ebe:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	ea21 0303 	bic.w	r3, r1, r3
 8001ec4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec6:	fa05 f404 	lsl.w	r4, r5, r4
 8001eca:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001ece:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	bfac      	ite	ge
 8001ed6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	4a07      	ldrlt	r2, [pc, #28]	; (8001ef8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	bfab      	itete	ge
 8001ee4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ef2:	bd30      	pop	{r4, r5, pc}
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	e000ed14 	.word	0xe000ed14

08001efc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001efc:	2800      	cmp	r0, #0
 8001efe:	db08      	blt.n	8001f12 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f00:	2301      	movs	r3, #1
 8001f02:	0942      	lsrs	r2, r0, #5
 8001f04:	f000 001f 	and.w	r0, r0, #31
 8001f08:	fa03 f000 	lsl.w	r0, r3, r0
 8001f0c:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <HAL_NVIC_EnableIRQ+0x18>)
 8001f0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f18:	3801      	subs	r0, #1
 8001f1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f1e:	d20b      	bcs.n	8001f38 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	21f0      	movs	r1, #240	; 0xf0
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f28:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f30:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f32:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f34:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f36:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f38:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f40:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f42:	b320      	cbz	r0, 8001f8e <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f44:	2214      	movs	r2, #20
 8001f46:	6801      	ldr	r1, [r0, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_DMA_Init+0x54>)
 8001f4a:	440b      	add	r3, r1
 8001f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f56:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001f58:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f5a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001f5e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f60:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f62:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f66:	4323      	orrs	r3, r4
 8001f68:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f6a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f70:	6944      	ldr	r4, [r0, #20]
 8001f72:	4323      	orrs	r3, r4
 8001f74:	6984      	ldr	r4, [r0, #24]
 8001f76:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f78:	69c4      	ldr	r4, [r0, #28]
 8001f7a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001f7c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f7e:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f80:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f84:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8001f86:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f88:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001f8a:	4618      	mov	r0, r3
}
 8001f8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f8e:	2001      	movs	r0, #1
 8001f90:	e7fc      	b.n	8001f8c <HAL_DMA_Init+0x4c>
 8001f92:	bf00      	nop
 8001f94:	bffdfff8 	.word	0xbffdfff8
 8001f98:	40020000 	.word	0x40020000

08001f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f9e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001fa2:	2c01      	cmp	r4, #1
 8001fa4:	d034      	beq.n	8002010 <HAL_DMA_Start_IT+0x74>
 8001fa6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001fac:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fb0:	42a5      	cmp	r5, r4
 8001fb2:	f04f 0600 	mov.w	r6, #0
 8001fb6:	f04f 0402 	mov.w	r4, #2
 8001fba:	d127      	bne.n	800200c <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001fc4:	6826      	ldr	r6, [r4, #0]
 8001fc6:	f026 0601 	bic.w	r6, r6, #1
 8001fca:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fcc:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001fd0:	40bd      	lsls	r5, r7
 8001fd2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fd4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd6:	6843      	ldr	r3, [r0, #4]
 8001fd8:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001fda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fdc:	bf0b      	itete	eq
 8001fde:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001fe0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001fe2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001fe4:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001fe6:	b14b      	cbz	r3, 8001ffc <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001fee:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ff0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6023      	str	r3, [r4, #0]
}
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	f023 0304 	bic.w	r3, r3, #4
 8002002:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	f043 030a 	orr.w	r3, r3, #10
 800200a:	e7f0      	b.n	8001fee <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 800200c:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8002010:	2002      	movs	r0, #2
 8002012:	e7f2      	b.n	8001ffa <HAL_DMA_Start_IT+0x5e>

08002014 <HAL_DMA_IRQHandler>:
{
 8002014:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002016:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002018:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800201a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800201c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800201e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002020:	4095      	lsls	r5, r2
 8002022:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002024:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002026:	d032      	beq.n	800208e <HAL_DMA_IRQHandler+0x7a>
 8002028:	074d      	lsls	r5, r1, #29
 800202a:	d530      	bpl.n	800208e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002030:	bf5e      	ittt	pl
 8002032:	681a      	ldrpl	r2, [r3, #0]
 8002034:	f022 0204 	bicpl.w	r2, r2, #4
 8002038:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_DMA_IRQHandler+0x11c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d019      	beq.n	8002074 <HAL_DMA_IRQHandler+0x60>
 8002040:	3214      	adds	r2, #20
 8002042:	4293      	cmp	r3, r2
 8002044:	d018      	beq.n	8002078 <HAL_DMA_IRQHandler+0x64>
 8002046:	3214      	adds	r2, #20
 8002048:	4293      	cmp	r3, r2
 800204a:	d017      	beq.n	800207c <HAL_DMA_IRQHandler+0x68>
 800204c:	3214      	adds	r2, #20
 800204e:	4293      	cmp	r3, r2
 8002050:	d017      	beq.n	8002082 <HAL_DMA_IRQHandler+0x6e>
 8002052:	3214      	adds	r2, #20
 8002054:	4293      	cmp	r3, r2
 8002056:	d017      	beq.n	8002088 <HAL_DMA_IRQHandler+0x74>
 8002058:	3214      	adds	r2, #20
 800205a:	4293      	cmp	r3, r2
 800205c:	bf0c      	ite	eq
 800205e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002062:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002066:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_DMA_IRQHandler+0x120>)
 8002068:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800206a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05c      	beq.n	800212a <HAL_DMA_IRQHandler+0x116>
}
 8002070:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002072:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002074:	2304      	movs	r3, #4
 8002076:	e7f6      	b.n	8002066 <HAL_DMA_IRQHandler+0x52>
 8002078:	2340      	movs	r3, #64	; 0x40
 800207a:	e7f4      	b.n	8002066 <HAL_DMA_IRQHandler+0x52>
 800207c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002080:	e7f1      	b.n	8002066 <HAL_DMA_IRQHandler+0x52>
 8002082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002086:	e7ee      	b.n	8002066 <HAL_DMA_IRQHandler+0x52>
 8002088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800208c:	e7eb      	b.n	8002066 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800208e:	2502      	movs	r5, #2
 8002090:	4095      	lsls	r5, r2
 8002092:	4225      	tst	r5, r4
 8002094:	d035      	beq.n	8002102 <HAL_DMA_IRQHandler+0xee>
 8002096:	078d      	lsls	r5, r1, #30
 8002098:	d533      	bpl.n	8002102 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	0694      	lsls	r4, r2, #26
 800209e:	d406      	bmi.n	80020ae <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f022 020a 	bic.w	r2, r2, #10
 80020a6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80020a8:	2201      	movs	r2, #1
 80020aa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020ae:	4a20      	ldr	r2, [pc, #128]	; (8002130 <HAL_DMA_IRQHandler+0x11c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d019      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xd4>
 80020b4:	3214      	adds	r2, #20
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_IRQHandler+0xd8>
 80020ba:	3214      	adds	r2, #20
 80020bc:	4293      	cmp	r3, r2
 80020be:	d017      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xdc>
 80020c0:	3214      	adds	r2, #20
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d017      	beq.n	80020f6 <HAL_DMA_IRQHandler+0xe2>
 80020c6:	3214      	adds	r2, #20
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d017      	beq.n	80020fc <HAL_DMA_IRQHandler+0xe8>
 80020cc:	3214      	adds	r2, #20
 80020ce:	4293      	cmp	r3, r2
 80020d0:	bf0c      	ite	eq
 80020d2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80020d6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80020da:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_DMA_IRQHandler+0x120>)
 80020dc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80020de:	2300      	movs	r3, #0
 80020e0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80020e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020e6:	e7c1      	b.n	800206c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020e8:	2302      	movs	r3, #2
 80020ea:	e7f6      	b.n	80020da <HAL_DMA_IRQHandler+0xc6>
 80020ec:	2320      	movs	r3, #32
 80020ee:	e7f4      	b.n	80020da <HAL_DMA_IRQHandler+0xc6>
 80020f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f4:	e7f1      	b.n	80020da <HAL_DMA_IRQHandler+0xc6>
 80020f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fa:	e7ee      	b.n	80020da <HAL_DMA_IRQHandler+0xc6>
 80020fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002100:	e7eb      	b.n	80020da <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002102:	2508      	movs	r5, #8
 8002104:	4095      	lsls	r5, r2
 8002106:	4225      	tst	r5, r4
 8002108:	d00f      	beq.n	800212a <HAL_DMA_IRQHandler+0x116>
 800210a:	0709      	lsls	r1, r1, #28
 800210c:	d50d      	bpl.n	800212a <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	f021 010e 	bic.w	r1, r1, #14
 8002114:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002116:	2301      	movs	r3, #1
 8002118:	fa03 f202 	lsl.w	r2, r3, r2
 800211c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800211e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002124:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002126:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002128:	e7a0      	b.n	800206c <HAL_DMA_IRQHandler+0x58>
}
 800212a:	bc70      	pop	{r4, r5, r6}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40020008 	.word	0x40020008
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800213e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002140:	4f64      	ldr	r7, [pc, #400]	; (80022d4 <HAL_GPIO_Init+0x19c>)
 8002142:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002144:	f8df c194 	ldr.w	ip, [pc, #404]	; 80022dc <HAL_GPIO_Init+0x1a4>
 8002148:	f8df e194 	ldr.w	lr, [pc, #404]	; 80022e0 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214c:	680d      	ldr	r5, [r1, #0]
 800214e:	fa35 f406 	lsrs.w	r4, r5, r6
 8002152:	d102      	bne.n	800215a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002154:	b003      	add	sp, #12
 8002156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800215a:	f04f 0801 	mov.w	r8, #1
 800215e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002166:	ea38 0505 	bics.w	r5, r8, r5
 800216a:	d17b      	bne.n	8002264 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 800216c:	684d      	ldr	r5, [r1, #4]
 800216e:	2d03      	cmp	r5, #3
 8002170:	d807      	bhi.n	8002182 <HAL_GPIO_Init+0x4a>
 8002172:	3d01      	subs	r5, #1
 8002174:	2d02      	cmp	r5, #2
 8002176:	f200 8088 	bhi.w	800228a <HAL_GPIO_Init+0x152>
 800217a:	e8df f005 	tbb	[pc, r5]
 800217e:	9b96      	.short	0x9b96
 8002180:	a1          	.byte	0xa1
 8002181:	00          	.byte	0x00
 8002182:	2d12      	cmp	r5, #18
 8002184:	f000 8099 	beq.w	80022ba <HAL_GPIO_Init+0x182>
 8002188:	d86e      	bhi.n	8002268 <HAL_GPIO_Init+0x130>
 800218a:	2d11      	cmp	r5, #17
 800218c:	f000 808f 	beq.w	80022ae <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002190:	2cff      	cmp	r4, #255	; 0xff
 8002192:	bf98      	it	ls
 8002194:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002196:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800219a:	bf88      	it	hi
 800219c:	f100 0a04 	addhi.w	sl, r0, #4
 80021a0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a4:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a8:	bf88      	it	hi
 80021aa:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ac:	fa09 fb05 	lsl.w	fp, r9, r5
 80021b0:	ea28 080b 	bic.w	r8, r8, fp
 80021b4:	fa02 f505 	lsl.w	r5, r2, r5
 80021b8:	ea48 0505 	orr.w	r5, r8, r5
 80021bc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80021c4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80021c8:	d04c      	beq.n	8002264 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ca:	69bd      	ldr	r5, [r7, #24]
 80021cc:	f026 0803 	bic.w	r8, r6, #3
 80021d0:	f045 0501 	orr.w	r5, r5, #1
 80021d4:	61bd      	str	r5, [r7, #24]
 80021d6:	69bd      	ldr	r5, [r7, #24]
 80021d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80021dc:	f005 0501 	and.w	r5, r5, #1
 80021e0:	9501      	str	r5, [sp, #4]
 80021e2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021e6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ea:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80021f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f4:	fa09 f90b 	lsl.w	r9, r9, fp
 80021f8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021fc:	4d39      	ldr	r5, [pc, #228]	; (80022e4 <HAL_GPIO_Init+0x1ac>)
 80021fe:	42a8      	cmp	r0, r5
 8002200:	d062      	beq.n	80022c8 <HAL_GPIO_Init+0x190>
 8002202:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002206:	42a8      	cmp	r0, r5
 8002208:	d060      	beq.n	80022cc <HAL_GPIO_Init+0x194>
 800220a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800220e:	42a8      	cmp	r0, r5
 8002210:	d05e      	beq.n	80022d0 <HAL_GPIO_Init+0x198>
 8002212:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002216:	42a8      	cmp	r0, r5
 8002218:	bf0c      	ite	eq
 800221a:	2503      	moveq	r5, #3
 800221c:	2504      	movne	r5, #4
 800221e:	fa05 f50b 	lsl.w	r5, r5, fp
 8002222:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002226:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800222a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002230:	bf14      	ite	ne
 8002232:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002234:	43a5      	biceq	r5, r4
 8002236:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002238:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800223a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800223e:	bf14      	ite	ne
 8002240:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002242:	43a5      	biceq	r5, r4
 8002244:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002246:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002248:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800224c:	bf14      	ite	ne
 800224e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002250:	43a5      	biceq	r5, r4
 8002252:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002254:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002256:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800225a:	bf14      	ite	ne
 800225c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800225e:	ea25 0404 	biceq.w	r4, r5, r4
 8002262:	60dc      	str	r4, [r3, #12]
	position++;
 8002264:	3601      	adds	r6, #1
 8002266:	e771      	b.n	800214c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002268:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80022e8 <HAL_GPIO_Init+0x1b0>
 800226c:	454d      	cmp	r5, r9
 800226e:	d00c      	beq.n	800228a <HAL_GPIO_Init+0x152>
 8002270:	d817      	bhi.n	80022a2 <HAL_GPIO_Init+0x16a>
 8002272:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002276:	454d      	cmp	r5, r9
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x152>
 800227a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800227e:	454d      	cmp	r5, r9
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x152>
 8002282:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002286:	454d      	cmp	r5, r9
 8002288:	d182      	bne.n	8002190 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800228a:	688a      	ldr	r2, [r1, #8]
 800228c:	b1d2      	cbz	r2, 80022c4 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800228e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002290:	bf08      	it	eq
 8002292:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002296:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800229a:	bf18      	it	ne
 800229c:	f8c0 8014 	strne.w	r8, [r0, #20]
 80022a0:	e776      	b.n	8002190 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80022a2:	4565      	cmp	r5, ip
 80022a4:	d0f1      	beq.n	800228a <HAL_GPIO_Init+0x152>
 80022a6:	4575      	cmp	r5, lr
 80022a8:	e7ee      	b.n	8002288 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022aa:	68ca      	ldr	r2, [r1, #12]
          break;
 80022ac:	e770      	b.n	8002190 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022ae:	68ca      	ldr	r2, [r1, #12]
 80022b0:	3204      	adds	r2, #4
          break;
 80022b2:	e76d      	b.n	8002190 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022b4:	68ca      	ldr	r2, [r1, #12]
 80022b6:	3208      	adds	r2, #8
          break;
 80022b8:	e76a      	b.n	8002190 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022ba:	68ca      	ldr	r2, [r1, #12]
 80022bc:	320c      	adds	r2, #12
          break;
 80022be:	e767      	b.n	8002190 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80022c0:	2200      	movs	r2, #0
 80022c2:	e765      	b.n	8002190 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022c4:	2204      	movs	r2, #4
 80022c6:	e763      	b.n	8002190 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022c8:	2500      	movs	r5, #0
 80022ca:	e7a8      	b.n	800221e <HAL_GPIO_Init+0xe6>
 80022cc:	2501      	movs	r5, #1
 80022ce:	e7a6      	b.n	800221e <HAL_GPIO_Init+0xe6>
 80022d0:	2502      	movs	r5, #2
 80022d2:	e7a4      	b.n	800221e <HAL_GPIO_Init+0xe6>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010400 	.word	0x40010400
 80022dc:	10310000 	.word	0x10310000
 80022e0:	10320000 	.word	0x10320000
 80022e4:	40010800 	.word	0x40010800
 80022e8:	10220000 	.word	0x10220000

080022ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ec:	b10a      	cbz	r2, 80022f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ee:	6101      	str	r1, [r0, #16]
  }
}
 80022f0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f2:	0409      	lsls	r1, r1, #16
 80022f4:	e7fb      	b.n	80022ee <HAL_GPIO_WritePin+0x2>
	...

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022fc:	4605      	mov	r5, r0
 80022fe:	b338      	cbz	r0, 8002350 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002300:	6803      	ldr	r3, [r0, #0]
 8002302:	07db      	lsls	r3, r3, #31
 8002304:	d410      	bmi.n	8002328 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	682b      	ldr	r3, [r5, #0]
 8002308:	079f      	lsls	r7, r3, #30
 800230a:	d45e      	bmi.n	80023ca <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	0719      	lsls	r1, r3, #28
 8002310:	f100 8095 	bmi.w	800243e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	682b      	ldr	r3, [r5, #0]
 8002316:	075a      	lsls	r2, r3, #29
 8002318:	f100 80c1 	bmi.w	800249e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231c:	69e8      	ldr	r0, [r5, #28]
 800231e:	2800      	cmp	r0, #0
 8002320:	f040 812c 	bne.w	800257c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002324:	2000      	movs	r0, #0
 8002326:	e029      	b.n	800237c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	4c90      	ldr	r4, [pc, #576]	; (800256c <HAL_RCC_OscConfig+0x274>)
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d007      	beq.n	8002344 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002334:	6863      	ldr	r3, [r4, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b08      	cmp	r3, #8
 800233c:	d10a      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	03de      	lsls	r6, r3, #15
 8002342:	d507      	bpl.n	8002354 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	039c      	lsls	r4, r3, #14
 8002348:	d5dd      	bpl.n	8002306 <HAL_RCC_OscConfig+0xe>
 800234a:	686b      	ldr	r3, [r5, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1da      	bne.n	8002306 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002350:	2001      	movs	r0, #1
 8002352:	e013      	b.n	800237c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	686b      	ldr	r3, [r5, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d112      	bne.n	8002382 <HAL_RCC_OscConfig+0x8a>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002364:	f7ff fb48 	bl	80019f8 <HAL_GetTick>
 8002368:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	0398      	lsls	r0, r3, #14
 800236e:	d4ca      	bmi.n	8002306 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fb42 	bl	80019f8 <HAL_GetTick>
 8002374:	1b80      	subs	r0, r0, r6
 8002376:	2864      	cmp	r0, #100	; 0x64
 8002378:	d9f7      	bls.n	800236a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800237a:	2003      	movs	r0, #3
}
 800237c:	b002      	add	sp, #8
 800237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	b99b      	cbnz	r3, 80023ac <HAL_RCC_OscConfig+0xb4>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002394:	f7ff fb30 	bl	80019f8 <HAL_GetTick>
 8002398:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	0399      	lsls	r1, r3, #14
 800239e:	d5b2      	bpl.n	8002306 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fb2a 	bl	80019f8 <HAL_GetTick>
 80023a4:	1b80      	subs	r0, r0, r6
 80023a6:	2864      	cmp	r0, #100	; 0x64
 80023a8:	d9f7      	bls.n	800239a <HAL_RCC_OscConfig+0xa2>
 80023aa:	e7e6      	b.n	800237a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	d103      	bne.n	80023bc <HAL_RCC_OscConfig+0xc4>
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	e7cf      	b.n	800235c <HAL_RCC_OscConfig+0x64>
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c0:	6023      	str	r3, [r4, #0]
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c8:	e7cb      	b.n	8002362 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ca:	4c68      	ldr	r4, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x274>)
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	f013 0f0c 	tst.w	r3, #12
 80023d2:	d007      	beq.n	80023e4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023d4:	6863      	ldr	r3, [r4, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d110      	bne.n	8002400 <HAL_RCC_OscConfig+0x108>
 80023de:	6863      	ldr	r3, [r4, #4]
 80023e0:	03da      	lsls	r2, r3, #15
 80023e2:	d40d      	bmi.n	8002400 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	079b      	lsls	r3, r3, #30
 80023e8:	d502      	bpl.n	80023f0 <HAL_RCC_OscConfig+0xf8>
 80023ea:	692b      	ldr	r3, [r5, #16]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d1af      	bne.n	8002350 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	696a      	ldr	r2, [r5, #20]
 80023f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	e785      	b.n	800230c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002400:	692a      	ldr	r2, [r5, #16]
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x278>)
 8002404:	b16a      	cbz	r2, 8002422 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800240a:	f7ff faf5 	bl	80019f8 <HAL_GetTick>
 800240e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	079f      	lsls	r7, r3, #30
 8002414:	d4ec      	bmi.n	80023f0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff faef 	bl	80019f8 <HAL_GetTick>
 800241a:	1b80      	subs	r0, r0, r6
 800241c:	2802      	cmp	r0, #2
 800241e:	d9f7      	bls.n	8002410 <HAL_RCC_OscConfig+0x118>
 8002420:	e7ab      	b.n	800237a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002422:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002424:	f7ff fae8 	bl	80019f8 <HAL_GetTick>
 8002428:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	0798      	lsls	r0, r3, #30
 800242e:	f57f af6d 	bpl.w	800230c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002432:	f7ff fae1 	bl	80019f8 <HAL_GetTick>
 8002436:	1b80      	subs	r0, r0, r6
 8002438:	2802      	cmp	r0, #2
 800243a:	d9f6      	bls.n	800242a <HAL_RCC_OscConfig+0x132>
 800243c:	e79d      	b.n	800237a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243e:	69aa      	ldr	r2, [r5, #24]
 8002440:	4e4a      	ldr	r6, [pc, #296]	; (800256c <HAL_RCC_OscConfig+0x274>)
 8002442:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_RCC_OscConfig+0x278>)
 8002444:	b1e2      	cbz	r2, 8002480 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002446:	2201      	movs	r2, #1
 8002448:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800244c:	f7ff fad4 	bl	80019f8 <HAL_GetTick>
 8002450:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002454:	079b      	lsls	r3, r3, #30
 8002456:	d50d      	bpl.n	8002474 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002458:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800245c:	4b45      	ldr	r3, [pc, #276]	; (8002574 <HAL_RCC_OscConfig+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fbb3 f3f2 	udiv	r3, r3, r2
 8002464:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002466:	bf00      	nop
  }
  while (Delay --);
 8002468:	9b01      	ldr	r3, [sp, #4]
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	9201      	str	r2, [sp, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_RCC_OscConfig+0x16e>
 8002472:	e74f      	b.n	8002314 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7ff fac0 	bl	80019f8 <HAL_GetTick>
 8002478:	1b00      	subs	r0, r0, r4
 800247a:	2802      	cmp	r0, #2
 800247c:	d9e9      	bls.n	8002452 <HAL_RCC_OscConfig+0x15a>
 800247e:	e77c      	b.n	800237a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002480:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002484:	f7ff fab8 	bl	80019f8 <HAL_GetTick>
 8002488:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800248c:	079f      	lsls	r7, r3, #30
 800248e:	f57f af41 	bpl.w	8002314 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7ff fab1 	bl	80019f8 <HAL_GetTick>
 8002496:	1b00      	subs	r0, r0, r4
 8002498:	2802      	cmp	r0, #2
 800249a:	d9f6      	bls.n	800248a <HAL_RCC_OscConfig+0x192>
 800249c:	e76d      	b.n	800237a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4c33      	ldr	r4, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x274>)
 80024a0:	69e3      	ldr	r3, [r4, #28]
 80024a2:	00d8      	lsls	r0, r3, #3
 80024a4:	d424      	bmi.n	80024f0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80024a6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	69e3      	ldr	r3, [r4, #28]
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	61e3      	str	r3, [r4, #28]
 80024b0:	69e3      	ldr	r3, [r4, #28]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4e2f      	ldr	r6, [pc, #188]	; (8002578 <HAL_RCC_OscConfig+0x280>)
 80024bc:	6833      	ldr	r3, [r6, #0]
 80024be:	05d9      	lsls	r1, r3, #23
 80024c0:	d518      	bpl.n	80024f4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c2:	68eb      	ldr	r3, [r5, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d126      	bne.n	8002516 <HAL_RCC_OscConfig+0x21e>
 80024c8:	6a23      	ldr	r3, [r4, #32]
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80024d0:	f7ff fa92 	bl	80019f8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	6a23      	ldr	r3, [r4, #32]
 80024dc:	079b      	lsls	r3, r3, #30
 80024de:	d53f      	bpl.n	8002560 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80024e0:	2f00      	cmp	r7, #0
 80024e2:	f43f af1b 	beq.w	800231c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	69e3      	ldr	r3, [r4, #28]
 80024e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ec:	61e3      	str	r3, [r4, #28]
 80024ee:	e715      	b.n	800231c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80024f0:	2700      	movs	r7, #0
 80024f2:	e7e2      	b.n	80024ba <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f4:	6833      	ldr	r3, [r6, #0]
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80024fc:	f7ff fa7c 	bl	80019f8 <HAL_GetTick>
 8002500:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	6833      	ldr	r3, [r6, #0]
 8002504:	05da      	lsls	r2, r3, #23
 8002506:	d4dc      	bmi.n	80024c2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002508:	f7ff fa76 	bl	80019f8 <HAL_GetTick>
 800250c:	eba0 0008 	sub.w	r0, r0, r8
 8002510:	2864      	cmp	r0, #100	; 0x64
 8002512:	d9f6      	bls.n	8002502 <HAL_RCC_OscConfig+0x20a>
 8002514:	e731      	b.n	800237a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002516:	b9ab      	cbnz	r3, 8002544 <HAL_RCC_OscConfig+0x24c>
 8002518:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6223      	str	r3, [r4, #32]
 8002524:	6a23      	ldr	r3, [r4, #32]
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800252c:	f7ff fa64 	bl	80019f8 <HAL_GetTick>
 8002530:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	6a23      	ldr	r3, [r4, #32]
 8002534:	0798      	lsls	r0, r3, #30
 8002536:	d5d3      	bpl.n	80024e0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7ff fa5e 	bl	80019f8 <HAL_GetTick>
 800253c:	1b80      	subs	r0, r0, r6
 800253e:	4540      	cmp	r0, r8
 8002540:	d9f7      	bls.n	8002532 <HAL_RCC_OscConfig+0x23a>
 8002542:	e71a      	b.n	800237a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	2b05      	cmp	r3, #5
 8002546:	6a23      	ldr	r3, [r4, #32]
 8002548:	d103      	bne.n	8002552 <HAL_RCC_OscConfig+0x25a>
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6223      	str	r3, [r4, #32]
 8002550:	e7ba      	b.n	80024c8 <HAL_RCC_OscConfig+0x1d0>
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	6223      	str	r3, [r4, #32]
 8002558:	6a23      	ldr	r3, [r4, #32]
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	e7b6      	b.n	80024ce <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7ff fa4a 	bl	80019f8 <HAL_GetTick>
 8002564:	1b80      	subs	r0, r0, r6
 8002566:	4540      	cmp	r0, r8
 8002568:	d9b7      	bls.n	80024da <HAL_RCC_OscConfig+0x1e2>
 800256a:	e706      	b.n	800237a <HAL_RCC_OscConfig+0x82>
 800256c:	40021000 	.word	0x40021000
 8002570:	42420000 	.word	0x42420000
 8002574:	20000000 	.word	0x20000000
 8002578:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257c:	4c2a      	ldr	r4, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x330>)
 800257e:	6863      	ldr	r3, [r4, #4]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d03e      	beq.n	8002606 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002588:	2200      	movs	r2, #0
 800258a:	4b28      	ldr	r3, [pc, #160]	; (800262c <HAL_RCC_OscConfig+0x334>)
 800258c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800258e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	d12c      	bne.n	80025ec <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002592:	f7ff fa31 	bl	80019f8 <HAL_GetTick>
 8002596:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	0199      	lsls	r1, r3, #6
 800259c:	d420      	bmi.n	80025e0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800259e:	6a2b      	ldr	r3, [r5, #32]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	68a9      	ldr	r1, [r5, #8]
 80025aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025ae:	430a      	orrs	r2, r1
 80025b0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80025b4:	6862      	ldr	r2, [r4, #4]
 80025b6:	430b      	orrs	r3, r1
 80025b8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80025bc:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80025be:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_OscConfig+0x334>)
 80025c4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80025c6:	f7ff fa17 	bl	80019f8 <HAL_GetTick>
 80025ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	019a      	lsls	r2, r3, #6
 80025d0:	f53f aea8 	bmi.w	8002324 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7ff fa10 	bl	80019f8 <HAL_GetTick>
 80025d8:	1b40      	subs	r0, r0, r5
 80025da:	2802      	cmp	r0, #2
 80025dc:	d9f6      	bls.n	80025cc <HAL_RCC_OscConfig+0x2d4>
 80025de:	e6cc      	b.n	800237a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff fa0a 	bl	80019f8 <HAL_GetTick>
 80025e4:	1b80      	subs	r0, r0, r6
 80025e6:	2802      	cmp	r0, #2
 80025e8:	d9d6      	bls.n	8002598 <HAL_RCC_OscConfig+0x2a0>
 80025ea:	e6c6      	b.n	800237a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80025ec:	f7ff fa04 	bl	80019f8 <HAL_GetTick>
 80025f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	f57f ae95 	bpl.w	8002324 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff f9fd 	bl	80019f8 <HAL_GetTick>
 80025fe:	1b40      	subs	r0, r0, r5
 8002600:	2802      	cmp	r0, #2
 8002602:	d9f6      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2fa>
 8002604:	e6b9      	b.n	800237a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002606:	2801      	cmp	r0, #1
 8002608:	f43f aeb8 	beq.w	800237c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800260c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	6a2a      	ldr	r2, [r5, #32]
 8002610:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002614:	4291      	cmp	r1, r2
 8002616:	f47f ae9b 	bne.w	8002350 <HAL_RCC_OscConfig+0x58>
 800261a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800261c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002620:	4293      	cmp	r3, r2
 8002622:	f43f ae7f 	beq.w	8002324 <HAL_RCC_OscConfig+0x2c>
 8002626:	e693      	b.n	8002350 <HAL_RCC_OscConfig+0x58>
 8002628:	40021000 	.word	0x40021000
 800262c:	42420000 	.word	0x42420000

08002630 <HAL_RCC_GetSysClockFreq>:
{
 8002630:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002634:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002636:	ac02      	add	r4, sp, #8
 8002638:	f103 0510 	add.w	r5, r3, #16
 800263c:	4622      	mov	r2, r4
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	3308      	adds	r3, #8
 8002644:	c203      	stmia	r2!, {r0, r1}
 8002646:	42ab      	cmp	r3, r5
 8002648:	4614      	mov	r4, r2
 800264a:	d1f7      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800264c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002650:	4911      	ldr	r1, [pc, #68]	; (8002698 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002652:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002656:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002658:	f003 020c 	and.w	r2, r3, #12
 800265c:	2a08      	cmp	r2, #8
 800265e:	d117      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002660:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002664:	3218      	adds	r2, #24
 8002666:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002668:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800266a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266e:	d50c      	bpl.n	800268a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002670:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002674:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002678:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800267a:	3318      	adds	r3, #24
 800267c:	446b      	add	r3, sp
 800267e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002682:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002686:	b007      	add	sp, #28
 8002688:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x70>)
 800268c:	4358      	muls	r0, r3
 800268e:	e7fa      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002692:	e7f8      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x56>
 8002694:	08008f56 	.word	0x08008f56
 8002698:	40021000 	.word	0x40021000
 800269c:	007a1200 	.word	0x007a1200
 80026a0:	003d0900 	.word	0x003d0900

080026a4 <HAL_RCC_ClockConfig>:
{
 80026a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80026aa:	4604      	mov	r4, r0
 80026ac:	b910      	cbnz	r0, 80026b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
}
 80026b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4a44      	ldr	r2, [pc, #272]	; (80027c8 <HAL_RCC_ClockConfig+0x124>)
 80026b6:	6813      	ldr	r3, [r2, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	428b      	cmp	r3, r1
 80026be:	d328      	bcc.n	8002712 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	6821      	ldr	r1, [r4, #0]
 80026c2:	078e      	lsls	r6, r1, #30
 80026c4:	d430      	bmi.n	8002728 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	07ca      	lsls	r2, r1, #31
 80026c8:	d443      	bmi.n	8002752 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ca:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <HAL_RCC_ClockConfig+0x124>)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	42ab      	cmp	r3, r5
 80026d4:	d865      	bhi.n	80027a2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	4d3c      	ldr	r5, [pc, #240]	; (80027cc <HAL_RCC_ClockConfig+0x128>)
 80026da:	f012 0f04 	tst.w	r2, #4
 80026de:	d16c      	bne.n	80027ba <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	0713      	lsls	r3, r2, #28
 80026e2:	d506      	bpl.n	80026f2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e4:	686b      	ldr	r3, [r5, #4]
 80026e6:	6922      	ldr	r2, [r4, #16]
 80026e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026f0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f2:	f7ff ff9d 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80026f6:	686b      	ldr	r3, [r5, #4]
 80026f8:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <HAL_RCC_ClockConfig+0x12c>)
 80026fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	40d8      	lsrs	r0, r3
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_ClockConfig+0x130>)
 8002704:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x134>)
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f7ff f933 	bl	8001974 <HAL_InitTick>
  return HAL_OK;
 800270e:	2000      	movs	r0, #0
 8002710:	e7ce      	b.n	80026b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	f023 0307 	bic.w	r3, r3, #7
 8002718:	430b      	orrs	r3, r1
 800271a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	428b      	cmp	r3, r1
 8002724:	d1c3      	bne.n	80026ae <HAL_RCC_ClockConfig+0xa>
 8002726:	e7cb      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_RCC_ClockConfig+0x128>)
 800272a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272e:	bf1e      	ittt	ne
 8002730:	685a      	ldrne	r2, [r3, #4]
 8002732:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002736:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273a:	bf42      	ittt	mi
 800273c:	685a      	ldrmi	r2, [r3, #4]
 800273e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002742:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68a0      	ldr	r0, [r4, #8]
 8002748:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800274c:	4302      	orrs	r2, r0
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	e7b9      	b.n	80026c6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	6862      	ldr	r2, [r4, #4]
 8002754:	4e1d      	ldr	r6, [pc, #116]	; (80027cc <HAL_RCC_ClockConfig+0x128>)
 8002756:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002758:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	d11a      	bne.n	8002792 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	d0a5      	beq.n	80026ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002768:	f023 0303 	bic.w	r3, r3, #3
 800276c:	4313      	orrs	r3, r2
 800276e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002770:	f7ff f942 	bl	80019f8 <HAL_GetTick>
 8002774:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	6873      	ldr	r3, [r6, #4]
 8002778:	6862      	ldr	r2, [r4, #4]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002782:	d0a2      	beq.n	80026ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7ff f938 	bl	80019f8 <HAL_GetTick>
 8002788:	1bc0      	subs	r0, r0, r7
 800278a:	4540      	cmp	r0, r8
 800278c:	d9f3      	bls.n	8002776 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800278e:	2003      	movs	r0, #3
 8002790:	e78e      	b.n	80026b0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	2a02      	cmp	r2, #2
 8002794:	d102      	bne.n	800279c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800279a:	e7e1      	b.n	8002760 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	f013 0f02 	tst.w	r3, #2
 80027a0:	e7de      	b.n	8002760 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	6813      	ldr	r3, [r2, #0]
 80027a4:	f023 0307 	bic.w	r3, r3, #7
 80027a8:	432b      	orrs	r3, r5
 80027aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	42ab      	cmp	r3, r5
 80027b4:	f47f af7b 	bne.w	80026ae <HAL_RCC_ClockConfig+0xa>
 80027b8:	e78d      	b.n	80026d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ba:	686b      	ldr	r3, [r5, #4]
 80027bc:	68e1      	ldr	r1, [r4, #12]
 80027be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027c2:	430b      	orrs	r3, r1
 80027c4:	606b      	str	r3, [r5, #4]
 80027c6:	e78b      	b.n	80026e0 <HAL_RCC_ClockConfig+0x3c>
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08008f46 	.word	0x08008f46
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000008 	.word	0x20000008

080027dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027dc:	6803      	ldr	r3, [r0, #0]
{
 80027de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027e2:	07d9      	lsls	r1, r3, #31
{
 80027e4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027e6:	d520      	bpl.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e8:	4c36      	ldr	r4, [pc, #216]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80027ea:	69e3      	ldr	r3, [r4, #28]
 80027ec:	00da      	lsls	r2, r3, #3
 80027ee:	d432      	bmi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80027f0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	69e3      	ldr	r3, [r4, #28]
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	61e3      	str	r3, [r4, #28]
 80027fa:	69e3      	ldr	r3, [r4, #28]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4f30      	ldr	r7, [pc, #192]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	05db      	lsls	r3, r3, #23
 800280a:	d526      	bpl.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800280c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800280e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002812:	d136      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002814:	6a23      	ldr	r3, [r4, #32]
 8002816:	686a      	ldr	r2, [r5, #4]
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	4313      	orrs	r3, r2
 800281e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002820:	b11e      	cbz	r6, 800282a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	69e3      	ldr	r3, [r4, #28]
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002828:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800282a:	6828      	ldr	r0, [r5, #0]
 800282c:	0783      	lsls	r3, r0, #30
 800282e:	d506      	bpl.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002830:	4924      	ldr	r1, [pc, #144]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002832:	68ab      	ldr	r3, [r5, #8]
 8002834:	684a      	ldr	r2, [r1, #4]
 8002836:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800283a:	431a      	orrs	r2, r3
 800283c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800283e:	f010 0010 	ands.w	r0, r0, #16
 8002842:	d01b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002846:	68e9      	ldr	r1, [r5, #12]
 8002848:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800284a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800284c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002850:	430b      	orrs	r3, r1
 8002852:	6053      	str	r3, [r2, #4]
 8002854:	e012      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8002856:	2600      	movs	r6, #0
 8002858:	e7d4      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002860:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002862:	f7ff f8c9 	bl	80019f8 <HAL_GetTick>
 8002866:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	05d8      	lsls	r0, r3, #23
 800286c:	d4ce      	bmi.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7ff f8c3 	bl	80019f8 <HAL_GetTick>
 8002872:	eba0 0008 	sub.w	r0, r0, r8
 8002876:	2864      	cmp	r0, #100	; 0x64
 8002878:	d9f6      	bls.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800287a:	2003      	movs	r0, #3
}
 800287c:	b002      	add	sp, #8
 800287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002882:	686a      	ldr	r2, [r5, #4]
 8002884:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002888:	429a      	cmp	r2, r3
 800288a:	d0c3      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800288c:	2001      	movs	r0, #1
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002890:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002892:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002896:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002898:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289c:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80028a0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028a2:	07d9      	lsls	r1, r3, #31
 80028a4:	d5b6      	bpl.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80028a6:	f7ff f8a7 	bl	80019f8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80028ae:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	6a23      	ldr	r3, [r4, #32]
 80028b2:	079a      	lsls	r2, r3, #30
 80028b4:	d4ae      	bmi.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7ff f89f 	bl	80019f8 <HAL_GetTick>
 80028ba:	1bc0      	subs	r0, r0, r7
 80028bc:	4540      	cmp	r0, r8
 80028be:	d9f7      	bls.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028c0:	e7db      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420000 	.word	0x42420000

080028d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80028d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80028d4:	461c      	mov	r4, r3
 80028d6:	4616      	mov	r6, r2
 80028d8:	460f      	mov	r7, r1
 80028da:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028dc:	f7ff f88c 	bl	80019f8 <HAL_GetTick>
 80028e0:	4434      	add	r4, r6
 80028e2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80028e4:	f7ff f888 	bl	80019f8 <HAL_GetTick>
 80028e8:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80028f2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f4:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80028f6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f8:	6893      	ldr	r3, [r2, #8]
 80028fa:	ea37 0303 	bics.w	r3, r7, r3
 80028fe:	d001      	beq.n	8002904 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002900:	2000      	movs	r0, #0
 8002902:	e02e      	b.n	8002962 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002904:	1c73      	adds	r3, r6, #1
 8002906:	d0f7      	beq.n	80028f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002908:	f7ff f876 	bl	80019f8 <HAL_GetTick>
 800290c:	eba0 0008 	sub.w	r0, r0, r8
 8002910:	42a0      	cmp	r0, r4
 8002912:	d329      	bcc.n	8002968 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800291c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800291e:	686a      	ldr	r2, [r5, #4]
 8002920:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002924:	d10a      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8002926:	68aa      	ldr	r2, [r5, #8]
 8002928:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800292c:	d002      	beq.n	8002934 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800292e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002932:	d103      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800293c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800293e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002942:	d107      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002952:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002954:	2301      	movs	r3, #1
 8002956:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800295a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800295c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800295e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002962:	b002      	add	sp, #8
 8002964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002968:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800296a:	2b00      	cmp	r3, #0
      count--;
 800296c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800296e:	bf08      	it	eq
 8002970:	2400      	moveq	r4, #0
      count--;
 8002972:	3b01      	subs	r3, #1
 8002974:	e7be      	b.n	80028f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b510      	push	{r4, lr}
 800297e:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	460a      	mov	r2, r1
 8002982:	2180      	movs	r1, #128	; 0x80
{
 8002984:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002986:	f7ff ffa3 	bl	80028d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800298a:	b120      	cbz	r0, 8002996 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800298c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800298e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002990:	f043 0320 	orr.w	r3, r3, #32
 8002994:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002996:	bd10      	pop	{r4, pc}

08002998 <HAL_SPI_Init>:
{
 8002998:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800299a:	4604      	mov	r4, r0
 800299c:	2800      	cmp	r0, #0
 800299e:	d051      	beq.n	8002a44 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d14a      	bne.n	8002a3c <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029a6:	6842      	ldr	r2, [r0, #4]
 80029a8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80029ac:	d000      	beq.n	80029b0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ae:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029b4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80029b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029bc:	b923      	cbnz	r3, 80029c8 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80029be:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80029c0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80029c4:	f7fe fea0 	bl	8001708 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80029c8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80029ca:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80029cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80029d0:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d2:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80029d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029da:	6863      	ldr	r3, [r4, #4]
 80029dc:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80029e0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80029e4:	4303      	orrs	r3, r0
 80029e6:	68e0      	ldr	r0, [r4, #12]
 80029e8:	69a1      	ldr	r1, [r4, #24]
 80029ea:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80029ee:	4303      	orrs	r3, r0
 80029f0:	6920      	ldr	r0, [r4, #16]
 80029f2:	f000 0002 	and.w	r0, r0, #2
 80029f6:	4303      	orrs	r3, r0
 80029f8:	6960      	ldr	r0, [r4, #20]
 80029fa:	f000 0001 	and.w	r0, r0, #1
 80029fe:	4303      	orrs	r3, r0
 8002a00:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002a04:	4303      	orrs	r3, r0
 8002a06:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a08:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a0a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a12:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a16:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002a1a:	4303      	orrs	r3, r0
 8002a1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a1e:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002a22:	4303      	orrs	r3, r0
 8002a24:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a26:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a28:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a2a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a30:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002a32:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a34:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a36:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002a3a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a3c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a42:	e7b5      	b.n	80029b0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
 8002a46:	e7f8      	b.n	8002a3a <HAL_SPI_Init+0xa2>

08002a48 <HAL_SPI_Transmit>:
{
 8002a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a4c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002a4e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002a52:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002a54:	2b01      	cmp	r3, #1
{
 8002a56:	460d      	mov	r5, r1
 8002a58:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8002a5a:	f000 80a0 	beq.w	8002b9e <HAL_SPI_Transmit+0x156>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002a64:	f7fe ffc8 	bl	80019f8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a68:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002a6c:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	b2d8      	uxtb	r0, r3
 8002a72:	f040 8092 	bne.w	8002b9a <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8002a76:	2d00      	cmp	r5, #0
 8002a78:	d05d      	beq.n	8002b36 <HAL_SPI_Transmit+0xee>
 8002a7a:	2f00      	cmp	r7, #0
 8002a7c:	d05b      	beq.n	8002b36 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a84:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a86:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a88:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8002a8e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002a92:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a94:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a96:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a98:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a9a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8002a9c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002a9e:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa0:	d107      	bne.n	8002ab2 <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab0:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab2:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ab4:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab6:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002ab8:	bf5e      	ittt	pl
 8002aba:	681a      	ldrpl	r2, [r3, #0]
 8002abc:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002ac0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac8:	d141      	bne.n	8002b4e <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aca:	b10a      	cbz	r2, 8002ad0 <HAL_SPI_Transmit+0x88>
 8002acc:	2f01      	cmp	r7, #1
 8002ace:	d107      	bne.n	8002ae0 <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad0:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002ad4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad6:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ad8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002ae0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b9a3      	cbnz	r3, 8002b10 <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae6:	4642      	mov	r2, r8
 8002ae8:	4631      	mov	r1, r6
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ff46 	bl	800297c <SPI_EndRxTxTransaction>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d14f      	bne.n	8002b94 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002af4:	68a3      	ldr	r3, [r4, #8]
 8002af6:	b933      	cbnz	r3, 8002b06 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002b08:	3800      	subs	r0, #0
 8002b0a:	bf18      	it	ne
 8002b0c:	2001      	movne	r0, #1
error:
 8002b0e:	e012      	b.n	8002b36 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b10:	6822      	ldr	r2, [r4, #0]
 8002b12:	6893      	ldr	r3, [r2, #8]
 8002b14:	0798      	lsls	r0, r3, #30
 8002b16:	d505      	bpl.n	8002b24 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b1a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b1e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b20:	6323      	str	r3, [r4, #48]	; 0x30
 8002b22:	e7d9      	b.n	8002ad8 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b24:	f7fe ff68 	bl	80019f8 <HAL_GetTick>
 8002b28:	eba0 0008 	sub.w	r0, r0, r8
 8002b2c:	42b0      	cmp	r0, r6
 8002b2e:	d30b      	bcc.n	8002b48 <HAL_SPI_Transmit+0x100>
 8002b30:	1c71      	adds	r1, r6, #1
 8002b32:	d0d5      	beq.n	8002ae0 <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 8002b34:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b42:	b002      	add	sp, #8
 8002b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b48:	2e00      	cmp	r6, #0
 8002b4a:	d1c9      	bne.n	8002ae0 <HAL_SPI_Transmit+0x98>
 8002b4c:	e7f2      	b.n	8002b34 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b4e:	b10a      	cbz	r2, 8002b54 <HAL_SPI_Transmit+0x10c>
 8002b50:	2f01      	cmp	r7, #1
 8002b52:	d108      	bne.n	8002b66 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b54:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b56:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002b66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0bb      	beq.n	8002ae6 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	0792      	lsls	r2, r2, #30
 8002b74:	d502      	bpl.n	8002b7c <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b78:	7812      	ldrb	r2, [r2, #0]
 8002b7a:	e7ec      	b.n	8002b56 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b7c:	f7fe ff3c 	bl	80019f8 <HAL_GetTick>
 8002b80:	eba0 0008 	sub.w	r0, r0, r8
 8002b84:	42b0      	cmp	r0, r6
 8002b86:	d302      	bcc.n	8002b8e <HAL_SPI_Transmit+0x146>
 8002b88:	1c73      	adds	r3, r6, #1
 8002b8a:	d0ec      	beq.n	8002b66 <HAL_SPI_Transmit+0x11e>
 8002b8c:	e7d2      	b.n	8002b34 <HAL_SPI_Transmit+0xec>
 8002b8e:	2e00      	cmp	r6, #0
 8002b90:	d1e9      	bne.n	8002b66 <HAL_SPI_Transmit+0x11e>
 8002b92:	e7cf      	b.n	8002b34 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b94:	2320      	movs	r3, #32
 8002b96:	6563      	str	r3, [r4, #84]	; 0x54
 8002b98:	e7ac      	b.n	8002af4 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8002b9a:	2002      	movs	r0, #2
 8002b9c:	e7cb      	b.n	8002b36 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	e7cf      	b.n	8002b42 <HAL_SPI_Transmit+0xfa>
	...

08002ba4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba4:	6a03      	ldr	r3, [r0, #32]
{
 8002ba6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002bba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bbc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002bbe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002bc2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bc4:	4d0a      	ldr	r5, [pc, #40]	; (8002bf0 <TIM_OC1_SetConfig+0x4c>)
 8002bc6:	42a8      	cmp	r0, r5
 8002bc8:	d10b      	bne.n	8002be2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bcc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002bd0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bd2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bd6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002bda:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002be0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002be4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002be6:	684a      	ldr	r2, [r1, #4]
 8002be8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bea:	6203      	str	r3, [r0, #32]
}
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
 8002bee:	bf00      	nop
 8002bf0:	40012c00 	.word	0x40012c00

08002bf4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf4:	6a03      	ldr	r3, [r0, #32]
{
 8002bf6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bfc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c00:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c02:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c04:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c06:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c0a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c0c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002c0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c16:	4d0b      	ldr	r5, [pc, #44]	; (8002c44 <TIM_OC3_SetConfig+0x50>)
 8002c18:	42a8      	cmp	r0, r5
 8002c1a:	d10d      	bne.n	8002c38 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c1c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c26:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c2a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002c2e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c34:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c3a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c3c:	684a      	ldr	r2, [r1, #4]
 8002c3e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c40:	6203      	str	r3, [r0, #32]
}
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	40012c00 	.word	0x40012c00

08002c48 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c48:	6a03      	ldr	r3, [r0, #32]
{
 8002c4a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c52:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c56:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c5a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c62:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6c:	4d06      	ldr	r5, [pc, #24]	; (8002c88 <TIM_OC4_SetConfig+0x40>)
 8002c6e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c70:	bf02      	ittt	eq
 8002c72:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c74:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c78:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c80:	684a      	ldr	r2, [r1, #4]
 8002c82:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c84:	6203      	str	r3, [r0, #32]
}
 8002c86:	bd30      	pop	{r4, r5, pc}
 8002c88:	40012c00 	.word	0x40012c00

08002c8c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002c8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d11c      	bne.n	8002cce <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9c:	6803      	ldr	r3, [r0, #0]
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_TIM_Base_Start+0x2c>
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d007      	beq.n	8002cb8 <HAL_TIM_Base_Start+0x2c>
 8002ca8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <HAL_TIM_Base_Start+0x2c>
 8002cb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	2a06      	cmp	r2, #6
 8002cc0:	d003      	beq.n	8002cca <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002cca:	2000      	movs	r0, #0
}
 8002ccc:	4770      	bx	lr
    return HAL_ERROR;
 8002cce:	2001      	movs	r0, #1
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40012c00 	.word	0x40012c00

08002cd8 <HAL_TIM_PWM_MspInit>:
 8002cd8:	4770      	bx	lr

08002cda <TIM_DMADelayPulseCplt>:
{
 8002cda:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cdc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002cde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ce0:	4282      	cmp	r2, r0
 8002ce2:	d10b      	bne.n	8002cfc <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002ce8:	6992      	ldr	r2, [r2, #24]
 8002cea:	b90a      	cbnz	r2, 8002cf0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f001 fb07 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	7723      	strb	r3, [r4, #28]
}
 8002cfa:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002cfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cfe:	4283      	cmp	r3, r0
 8002d00:	d108      	bne.n	8002d14 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d02:	2202      	movs	r2, #2
 8002d04:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f1      	bne.n	8002cf0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d12:	e7ed      	b.n	8002cf0 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d16:	4283      	cmp	r3, r0
 8002d18:	d108      	bne.n	8002d2c <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e5      	bne.n	8002cf0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	2301      	movs	r3, #1
 8002d26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d2a:	e7e1      	b.n	8002cf0 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	d1de      	bne.n	8002cf0 <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d32:	2208      	movs	r2, #8
 8002d34:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1d9      	bne.n	8002cf0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002d42:	e7d5      	b.n	8002cf0 <TIM_DMADelayPulseCplt+0x16>

08002d44 <TIM_DMADelayPulseHalfCplt>:
{
 8002d44:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d46:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d4a:	4283      	cmp	r3, r0
 8002d4c:	d107      	bne.n	8002d5e <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d50:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002d52:	4620      	mov	r0, r4
 8002d54:	f001 fabe 	bl	80042d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	7723      	strb	r3, [r4, #28]
}
 8002d5c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d60:	4283      	cmp	r3, r0
 8002d62:	d101      	bne.n	8002d68 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	e7f3      	b.n	8002d50 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d6a:	4283      	cmp	r3, r0
 8002d6c:	d101      	bne.n	8002d72 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e7ee      	b.n	8002d50 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d74:	4283      	cmp	r3, r0
 8002d76:	d1ec      	bne.n	8002d52 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	e7e9      	b.n	8002d50 <TIM_DMADelayPulseHalfCplt+0xc>

08002d7c <HAL_TIM_ErrorCallback>:
 8002d7c:	4770      	bx	lr

08002d7e <TIM_DMAError>:
{
 8002d7e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d80:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d84:	4283      	cmp	r3, r0
 8002d86:	d109      	bne.n	8002d9c <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8002d90:	4620      	mov	r0, r4
 8002d92:	f7ff fff3 	bl	8002d7c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	2300      	movs	r3, #0
 8002d98:	7723      	strb	r3, [r4, #28]
}
 8002d9a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d9e:	4283      	cmp	r3, r0
 8002da0:	d105      	bne.n	8002dae <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da2:	2302      	movs	r3, #2
 8002da4:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	2301      	movs	r3, #1
 8002da8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002dac:	e7f0      	b.n	8002d90 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002db0:	4283      	cmp	r3, r0
 8002db2:	f04f 0301 	mov.w	r3, #1
 8002db6:	d104      	bne.n	8002dc2 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002db8:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002dba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dbe:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	e7e6      	b.n	8002d90 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002dc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002dc4:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc6:	bf03      	ittte	eq
 8002dc8:	2208      	moveq	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dce:	7722      	strbeq	r2, [r4, #28]
    htim->State = HAL_TIM_STATE_READY;
 8002dd0:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8002dd4:	e7dc      	b.n	8002d90 <TIM_DMAError+0x12>
	...

08002dd8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002dda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	4290      	cmp	r0, r2
 8002dde:	d00a      	beq.n	8002df6 <TIM_Base_SetConfig+0x1e>
 8002de0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0x1e>
 8002de6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dea:	4290      	cmp	r0, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0x1e>
 8002dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002df2:	4290      	cmp	r0, r2
 8002df4:	d115      	bne.n	8002e22 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002df6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002dfc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfe:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <TIM_Base_SetConfig+0x6c>)
 8002e00:	4290      	cmp	r0, r2
 8002e02:	d00a      	beq.n	8002e1a <TIM_Base_SetConfig+0x42>
 8002e04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e08:	d007      	beq.n	8002e1a <TIM_Base_SetConfig+0x42>
 8002e0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e0e:	4290      	cmp	r0, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_Base_SetConfig+0x42>
 8002e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e16:	4290      	cmp	r0, r2
 8002e18:	d103      	bne.n	8002e22 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e22:	694a      	ldr	r2, [r1, #20]
 8002e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2c:	688b      	ldr	r3, [r1, #8]
 8002e2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e30:	680b      	ldr	r3, [r1, #0]
 8002e32:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <TIM_Base_SetConfig+0x6c>)
 8002e36:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002e38:	bf04      	itt	eq
 8002e3a:	690b      	ldreq	r3, [r1, #16]
 8002e3c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	6143      	str	r3, [r0, #20]
}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <HAL_TIM_Base_Init>:
{
 8002e48:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	b330      	cbz	r0, 8002e9c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e56:	b91b      	cbnz	r3, 8002e60 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002e58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e5c:	f7fe fc84 	bl	8001768 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e62:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	1d21      	adds	r1, r4, #4
 8002e6a:	f7ff ffb5 	bl	8002dd8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6e:	2301      	movs	r3, #1
  return HAL_OK;
 8002e70:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e7a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	e7fc      	b.n	8002e9a <HAL_TIM_Base_Init+0x52>

08002ea0 <HAL_TIM_PWM_Init>:
{
 8002ea0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	b330      	cbz	r0, 8002ef4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002eaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eae:	b91b      	cbnz	r3, 8002eb8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002eb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002eb4:	f7ff ff10 	bl	8002cd8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	1d21      	adds	r1, r4, #4
 8002ec2:	f7ff ff89 	bl	8002dd8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec6:	2301      	movs	r3, #1
  return HAL_OK;
 8002ec8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ece:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ed2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002ed6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002eda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ee6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002eee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002ef2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	e7fc      	b.n	8002ef2 <HAL_TIM_PWM_Init+0x52>

08002ef8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef8:	6a03      	ldr	r3, [r0, #32]
{
 8002efa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efc:	f023 0310 	bic.w	r3, r3, #16
 8002f00:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f02:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002f04:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f06:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f0a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f12:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002f14:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f1c:	4d0b      	ldr	r5, [pc, #44]	; (8002f4c <TIM_OC2_SetConfig+0x54>)
 8002f1e:	42a8      	cmp	r0, r5
 8002f20:	d10d      	bne.n	8002f3e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f22:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f2c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f30:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002f34:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f3a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002f3e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f40:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002f42:	684a      	ldr	r2, [r1, #4]
 8002f44:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002f46:	6203      	str	r3, [r0, #32]
}
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00

08002f50 <HAL_TIM_PWM_ConfigChannel>:
{
 8002f50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002f52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f56:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d052      	beq.n	8003002 <HAL_TIM_PWM_ConfigChannel+0xb2>
 8002f5c:	2301      	movs	r3, #1
  switch (Channel)
 8002f5e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002f60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002f64:	d03c      	beq.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8002f66:	d806      	bhi.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x26>
 8002f68:	b1c2      	cbz	r2, 8002f9c <HAL_TIM_PWM_ConfigChannel+0x4c>
 8002f6a:	2a04      	cmp	r2, #4
 8002f6c:	d027      	beq.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f74:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002f76:	2a0c      	cmp	r2, #12
 8002f78:	d1f9      	bne.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	f7ff fe64 	bl	8002c48 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f80:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f9a:	e030      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f9c:	6800      	ldr	r0, [r0, #0]
 8002f9e:	f7ff fe01 	bl	8002ba4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fa4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	f042 0208 	orr.w	r2, r2, #8
 8002fac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	f022 0204 	bic.w	r2, r2, #4
 8002fb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fba:	619a      	str	r2, [r3, #24]
      break;
 8002fbc:	e7d7      	b.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fbe:	6800      	ldr	r0, [r0, #0]
 8002fc0:	f7ff ff9a 	bl	8002ef8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fc4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fde:	e7ec      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe0:	6800      	ldr	r0, [r0, #0]
 8002fe2:	f7ff fe07 	bl	8002bf4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fe6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fe8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	f022 0204 	bic.w	r2, r2, #4
 8002ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ffe:	61da      	str	r2, [r3, #28]
      break;
 8003000:	e7b5      	b.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8003002:	2002      	movs	r0, #2
 8003004:	e7b6      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x24>

08003006 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003006:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003008:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800300a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003010:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003014:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003016:	6082      	str	r2, [r0, #8]
}
 8003018:	bd10      	pop	{r4, pc}

0800301a <HAL_TIM_ConfigClockSource>:
{
 800301a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800301c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003020:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003022:	2b01      	cmp	r3, #1
 8003024:	f04f 0002 	mov.w	r0, #2
 8003028:	d027      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x60>
 800302a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003030:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003032:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003036:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003040:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003042:	680b      	ldr	r3, [r1, #0]
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d04d      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0xca>
 8003048:	d832      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x96>
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d062      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0xfa>
 800304e:	d815      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x62>
 8003050:	2b20      	cmp	r3, #32
 8003052:	d003      	beq.n	800305c <HAL_TIM_ConfigClockSource+0x42>
 8003054:	d809      	bhi.n	800306a <HAL_TIM_ConfigClockSource+0x50>
 8003056:	f033 0210 	bics.w	r2, r3, #16
 800305a:	d108      	bne.n	800306e <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800305c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800305e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	4313      	orrs	r3, r2
 8003064:	f043 0307 	orr.w	r3, r3, #7
 8003068:	e020      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800306a:	2b30      	cmp	r3, #48	; 0x30
 800306c:	d0f6      	beq.n	800305c <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800306e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003070:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003076:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800307a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d1f6      	bne.n	800306e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003080:	684a      	ldr	r2, [r1, #4]
 8003082:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003084:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003088:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308c:	f025 0501 	bic.w	r5, r5, #1
 8003090:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003092:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003094:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800309a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800309e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030a0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80030a2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80030ac:	6083      	str	r3, [r0, #8]
}
 80030ae:	e7de      	b.n	800306e <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80030b0:	2b70      	cmp	r3, #112	; 0x70
 80030b2:	d00c      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xb4>
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d1d9      	bne.n	800306e <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	68cb      	ldr	r3, [r1, #12]
 80030bc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80030c0:	f7ff ffa1 	bl	8003006 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	6893      	ldr	r3, [r2, #8]
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030cc:	e008      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80030ce:	68cb      	ldr	r3, [r1, #12]
 80030d0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80030d4:	f7ff ff97 	bl	8003006 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e0:	6093      	str	r3, [r2, #8]
      break;
 80030e2:	e7c4      	b.n	800306e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e4:	684d      	ldr	r5, [r1, #4]
 80030e6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e8:	6a01      	ldr	r1, [r0, #32]
 80030ea:	f021 0110 	bic.w	r1, r1, #16
 80030ee:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80030f2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80030fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003100:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003104:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003106:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003108:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800310e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003112:	e7cb      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003114:	684a      	ldr	r2, [r1, #4]
 8003116:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003118:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003120:	f025 0501 	bic.w	r5, r5, #1
 8003124:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003128:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800312e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003132:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003134:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003136:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800313c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003140:	e7b4      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x92>

08003142 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8003142:	6800      	ldr	r0, [r0, #0]
{
 8003144:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003146:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003148:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800314e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003150:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003152:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003156:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 8003158:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800315a:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800315c:	d02e      	beq.n	80031bc <TIM_SlaveTimer_SetConfig+0x7a>
 800315e:	d805      	bhi.n	800316c <TIM_SlaveTimer_SetConfig+0x2a>
 8003160:	2a40      	cmp	r2, #64	; 0x40
 8003162:	d00b      	beq.n	800317c <TIM_SlaveTimer_SetConfig+0x3a>
 8003164:	2a50      	cmp	r2, #80	; 0x50
 8003166:	d019      	beq.n	800319c <TIM_SlaveTimer_SetConfig+0x5a>
  return HAL_OK;
 8003168:	2000      	movs	r0, #0
}
 800316a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800316c:	2a70      	cmp	r2, #112	; 0x70
 800316e:	d1fb      	bne.n	8003168 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_ETR_SetConfig(htim->Instance,
 8003170:	690b      	ldr	r3, [r1, #16]
 8003172:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8003176:	f7ff ff46 	bl	8003006 <TIM_ETR_SetConfig>
      break;
 800317a:	e7f5      	b.n	8003168 <TIM_SlaveTimer_SetConfig+0x26>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800317c:	2c05      	cmp	r4, #5
 800317e:	d030      	beq.n	80031e2 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8003180:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003182:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003184:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800318c:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800318e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003192:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003196:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8003198:	6202      	str	r2, [r0, #32]
 800319a:	e7e5      	b.n	8003168 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319c:	688a      	ldr	r2, [r1, #8]
 800319e:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80031a0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a2:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a8:	f024 0401 	bic.w	r4, r4, #1
 80031ac:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ae:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80031b0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80031ba:	e7ec      	b.n	8003196 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031bc:	688c      	ldr	r4, [r1, #8]
 80031be:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c0:	6a01      	ldr	r1, [r0, #32]
 80031c2:	f021 0110 	bic.w	r1, r1, #16
 80031c6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80031ca:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031cc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80031d8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80031dc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80031de:	6203      	str	r3, [r0, #32]
 80031e0:	e7c2      	b.n	8003168 <TIM_SlaveTimer_SetConfig+0x26>
        return HAL_ERROR;
 80031e2:	2001      	movs	r0, #1
 80031e4:	e7c1      	b.n	800316a <TIM_SlaveTimer_SetConfig+0x28>

080031e6 <HAL_TIM_SlaveConfigSynchro>:
{
 80031e6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80031e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80031ec:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	f04f 0302 	mov.w	r3, #2
 80031f4:	d01c      	beq.n	8003230 <HAL_TIM_SlaveConfigSynchro+0x4a>
 80031f6:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80031fc:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003200:	f7ff ff9f 	bl	8003142 <TIM_SlaveTimer_SetConfig>
 8003204:	b130      	cbz	r0, 8003214 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8003206:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003208:	4628      	mov	r0, r5
    htim->State = HAL_TIM_STATE_READY;
 800320a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800320e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003212:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003224:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003226:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800322a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800322e:	e7f0      	b.n	8003212 <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 8003230:	4618      	mov	r0, r3
 8003232:	e7ee      	b.n	8003212 <HAL_TIM_SlaveConfigSynchro+0x2c>

08003234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003234:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003236:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003238:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800323a:	f001 011f 	and.w	r1, r1, #31
 800323e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003240:	ea23 0304 	bic.w	r3, r3, r4
 8003244:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003246:	6a03      	ldr	r3, [r0, #32]
 8003248:	408a      	lsls	r2, r1
 800324a:	431a      	orrs	r2, r3
 800324c:	6202      	str	r2, [r0, #32]
}
 800324e:	bd10      	pop	{r4, pc}

08003250 <HAL_TIM_OC_Start>:
{
 8003250:	b510      	push	{r4, lr}
 8003252:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003254:	b929      	cbnz	r1, 8003262 <HAL_TIM_OC_Start+0x12>
 8003256:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800325a:	2b01      	cmp	r3, #1
 800325c:	d021      	beq.n	80032a2 <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800325e:	2001      	movs	r0, #1
}
 8003260:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003262:	2904      	cmp	r1, #4
 8003264:	d107      	bne.n	8003276 <HAL_TIM_OC_Start+0x26>
 8003266:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800326a:	2b01      	cmp	r3, #1
 800326c:	d1f7      	bne.n	800325e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326e:	2302      	movs	r3, #2
 8003270:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003274:	e018      	b.n	80032a8 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003276:	2908      	cmp	r1, #8
 8003278:	d107      	bne.n	800328a <HAL_TIM_OC_Start+0x3a>
 800327a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800327e:	2b01      	cmp	r3, #1
 8003280:	d1ed      	bne.n	800325e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003282:	2302      	movs	r3, #2
 8003284:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003288:	e00e      	b.n	80032a8 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800328a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800328e:	2b01      	cmp	r3, #1
 8003290:	d1e5      	bne.n	800325e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003292:	2904      	cmp	r1, #4
 8003294:	d0eb      	beq.n	800326e <HAL_TIM_OC_Start+0x1e>
 8003296:	2908      	cmp	r1, #8
 8003298:	d0f3      	beq.n	8003282 <HAL_TIM_OC_Start+0x32>
 800329a:	2302      	movs	r3, #2
 800329c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80032a0:	e002      	b.n	80032a8 <HAL_TIM_OC_Start+0x58>
 80032a2:	2302      	movs	r3, #2
 80032a4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a8:	2201      	movs	r2, #1
 80032aa:	6820      	ldr	r0, [r4, #0]
 80032ac:	f7ff ffc2 	bl	8003234 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <HAL_TIM_OC_Start+0x9c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d10a      	bne.n	80032ce <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 80032b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	2a06      	cmp	r2, #6
 80032c8:	d10b      	bne.n	80032e2 <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 80032ca:	2000      	movs	r0, #0
 80032cc:	e7c8      	b.n	8003260 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d0f5      	beq.n	80032c0 <HAL_TIM_OC_Start+0x70>
 80032d4:	4a06      	ldr	r2, [pc, #24]	; (80032f0 <HAL_TIM_OC_Start+0xa0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d0f2      	beq.n	80032c0 <HAL_TIM_OC_Start+0x70>
 80032da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032de:	4293      	cmp	r3, r2
 80032e0:	d0ee      	beq.n	80032c0 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e7ee      	b.n	80032ca <HAL_TIM_OC_Start+0x7a>
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400

080032f4 <HAL_TIM_PWM_Start>:
 80032f4:	f7ff bfac 	b.w	8003250 <HAL_TIM_OC_Start>

080032f8 <HAL_TIM_OC_Start_DMA>:
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	460d      	mov	r5, r1
 80032fc:	4604      	mov	r4, r0
 80032fe:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003300:	b92d      	cbnz	r5, 800330e <HAL_TIM_OC_Start_DMA+0x16>
 8003302:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003306:	2a02      	cmp	r2, #2
 8003308:	b2d0      	uxtb	r0, r2
 800330a:	d112      	bne.n	8003332 <HAL_TIM_OC_Start_DMA+0x3a>
}
 800330c:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800330e:	2d04      	cmp	r5, #4
 8003310:	d107      	bne.n	8003322 <HAL_TIM_OC_Start_DMA+0x2a>
 8003312:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8003316:	1e86      	subs	r6, r0, #2
 8003318:	4270      	negs	r0, r6
 800331a:	4170      	adcs	r0, r6
 800331c:	b140      	cbz	r0, 8003330 <HAL_TIM_OC_Start_DMA+0x38>
    return HAL_BUSY;
 800331e:	2002      	movs	r0, #2
 8003320:	e7f4      	b.n	800330c <HAL_TIM_OC_Start_DMA+0x14>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003322:	2d08      	cmp	r5, #8
 8003324:	bf0c      	ite	eq
 8003326:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 800332a:	f894 0041 	ldrbne.w	r0, [r4, #65]	; 0x41
 800332e:	e7f2      	b.n	8003316 <HAL_TIM_OC_Start_DMA+0x1e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003330:	b93d      	cbnz	r5, 8003342 <HAL_TIM_OC_Start_DMA+0x4a>
 8003332:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003336:	1e50      	subs	r0, r2, #1
 8003338:	4242      	negs	r2, r0
 800333a:	4142      	adcs	r2, r0
 800333c:	bb4a      	cbnz	r2, 8003392 <HAL_TIM_OC_Start_DMA+0x9a>
      return HAL_ERROR;
 800333e:	2001      	movs	r0, #1
 8003340:	e7e4      	b.n	800330c <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003342:	2d04      	cmp	r5, #4
 8003344:	d102      	bne.n	800334c <HAL_TIM_OC_Start_DMA+0x54>
 8003346:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800334a:	e7f4      	b.n	8003336 <HAL_TIM_OC_Start_DMA+0x3e>
 800334c:	2d08      	cmp	r5, #8
 800334e:	bf0c      	ite	eq
 8003350:	f894 2040 	ldrbeq.w	r2, [r4, #64]	; 0x40
 8003354:	f894 2041 	ldrbne.w	r2, [r4, #65]	; 0x41
 8003358:	2a01      	cmp	r2, #1
 800335a:	d1f0      	bne.n	800333e <HAL_TIM_OC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800335c:	b909      	cbnz	r1, 8003362 <HAL_TIM_OC_Start_DMA+0x6a>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ed      	bne.n	800333e <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003362:	2d08      	cmp	r5, #8
 8003364:	f04f 0002 	mov.w	r0, #2
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003368:	6822      	ldr	r2, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800336a:	d142      	bne.n	80033f2 <HAL_TIM_OC_Start_DMA+0xfa>
 800336c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003370:	4e40      	ldr	r6, [pc, #256]	; (8003474 <HAL_TIM_OC_Start_DMA+0x17c>)
 8003372:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003374:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003376:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003378:	4e3f      	ldr	r6, [pc, #252]	; (8003478 <HAL_TIM_OC_Start_DMA+0x180>)
 800337a:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800337c:	4e3f      	ldr	r6, [pc, #252]	; (800347c <HAL_TIM_OC_Start_DMA+0x184>)
 800337e:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003380:	f7fe fe0c 	bl	8001f9c <HAL_DMA_Start_IT>
 8003384:	2800      	cmp	r0, #0
 8003386:	d1da      	bne.n	800333e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003388:	6822      	ldr	r2, [r4, #0]
 800338a:	68d3      	ldr	r3, [r2, #12]
 800338c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003390:	e017      	b.n	80033c2 <HAL_TIM_OC_Start_DMA+0xca>
    if ((pData == NULL) && (Length > 0U))
 8003392:	b909      	cbnz	r1, 8003398 <HAL_TIM_OC_Start_DMA+0xa0>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1d2      	bne.n	800333e <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003398:	2202      	movs	r2, #2
 800339a:	b9a5      	cbnz	r5, 80033c6 <HAL_TIM_OC_Start_DMA+0xce>
 800339c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80033a2:	4a34      	ldr	r2, [pc, #208]	; (8003474 <HAL_TIM_OC_Start_DMA+0x17c>)
 80033a4:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033a6:	4a34      	ldr	r2, [pc, #208]	; (8003478 <HAL_TIM_OC_Start_DMA+0x180>)
 80033a8:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80033aa:	4a34      	ldr	r2, [pc, #208]	; (800347c <HAL_TIM_OC_Start_DMA+0x184>)
 80033ac:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	3234      	adds	r2, #52	; 0x34
 80033b2:	f7fe fdf3 	bl	8001f9c <HAL_DMA_Start_IT>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d1c1      	bne.n	800333e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	68d3      	ldr	r3, [r2, #12]
 80033be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80033c2:	60d3      	str	r3, [r2, #12]
      break;
 80033c4:	e020      	b.n	8003408 <HAL_TIM_OC_Start_DMA+0x110>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c6:	2d04      	cmp	r5, #4
 80033c8:	d1cb      	bne.n	8003362 <HAL_TIM_OC_Start_DMA+0x6a>
 80033ca:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80033d0:	4a28      	ldr	r2, [pc, #160]	; (8003474 <HAL_TIM_OC_Start_DMA+0x17c>)
 80033d2:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_TIM_OC_Start_DMA+0x180>)
 80033d6:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80033d8:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_TIM_OC_Start_DMA+0x184>)
 80033da:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80033dc:	6822      	ldr	r2, [r4, #0]
 80033de:	3238      	adds	r2, #56	; 0x38
 80033e0:	f7fe fddc 	bl	8001f9c <HAL_DMA_Start_IT>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d1aa      	bne.n	800333e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80033e8:	6822      	ldr	r2, [r4, #0]
 80033ea:	68d3      	ldr	r3, [r2, #12]
 80033ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f0:	e7e7      	b.n	80033c2 <HAL_TIM_OC_Start_DMA+0xca>
  switch (Channel)
 80033f2:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  switch (Channel)
 80033f8:	d01a      	beq.n	8003430 <HAL_TIM_OC_Start_DMA+0x138>
 80033fa:	d805      	bhi.n	8003408 <HAL_TIM_OC_Start_DMA+0x110>
 80033fc:	2d08      	cmp	r5, #8
 80033fe:	d803      	bhi.n	8003408 <HAL_TIM_OC_Start_DMA+0x110>
 8003400:	2d00      	cmp	r5, #0
 8003402:	d0cd      	beq.n	80033a0 <HAL_TIM_OC_Start_DMA+0xa8>
 8003404:	2d04      	cmp	r5, #4
 8003406:	d0e2      	beq.n	80033ce <HAL_TIM_OC_Start_DMA+0xd6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003408:	2201      	movs	r2, #1
 800340a:	4629      	mov	r1, r5
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	f7ff ff11 	bl	8003234 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_TIM_OC_Start_DMA+0x188>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d11c      	bne.n	8003454 <HAL_TIM_OC_Start_DMA+0x15c>
    __HAL_TIM_MOE_ENABLE(htim);
 800341a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	2a06      	cmp	r2, #6
 800342a:	d11d      	bne.n	8003468 <HAL_TIM_OC_Start_DMA+0x170>
  return HAL_OK;
 800342c:	2000      	movs	r0, #0
 800342e:	e76d      	b.n	800330c <HAL_TIM_OC_Start_DMA+0x14>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003430:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003432:	4e10      	ldr	r6, [pc, #64]	; (8003474 <HAL_TIM_OC_Start_DMA+0x17c>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003434:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003436:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003438:	4e0f      	ldr	r6, [pc, #60]	; (8003478 <HAL_TIM_OC_Start_DMA+0x180>)
 800343a:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800343c:	4e0f      	ldr	r6, [pc, #60]	; (800347c <HAL_TIM_OC_Start_DMA+0x184>)
 800343e:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003440:	f7fe fdac 	bl	8001f9c <HAL_DMA_Start_IT>
 8003444:	2800      	cmp	r0, #0
 8003446:	f47f af7a 	bne.w	800333e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	68d3      	ldr	r3, [r2, #12]
 800344e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003452:	e7b6      	b.n	80033c2 <HAL_TIM_OC_Start_DMA+0xca>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d0e3      	beq.n	8003422 <HAL_TIM_OC_Start_DMA+0x12a>
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_TIM_OC_Start_DMA+0x18c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d0e0      	beq.n	8003422 <HAL_TIM_OC_Start_DMA+0x12a>
 8003460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003464:	4293      	cmp	r3, r2
 8003466:	d0dc      	beq.n	8003422 <HAL_TIM_OC_Start_DMA+0x12a>
    __HAL_TIM_ENABLE(htim);
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e7dc      	b.n	800342c <HAL_TIM_OC_Start_DMA+0x134>
 8003472:	bf00      	nop
 8003474:	08002cdb 	.word	0x08002cdb
 8003478:	08002d45 	.word	0x08002d45
 800347c:	08002d7f 	.word	0x08002d7f
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40000400 	.word	0x40000400

08003488 <HAL_TIM_PWM_Start_DMA>:
 8003488:	f7ff bf36 	b.w	80032f8 <HAL_TIM_OC_Start_DMA>

0800348c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800348c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003492:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003494:	2b01      	cmp	r3, #1
 8003496:	f04f 0002 	mov.w	r0, #2
 800349a:	d022      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800349c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800349e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80034a2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034aa:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ae:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	4c0c      	ldr	r4, [pc, #48]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80034b2:	42a3      	cmp	r3, r4
 80034b4:	d00a      	beq.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d007      	beq.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80034bc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80034c0:	42a3      	cmp	r3, r4
 80034c2:	d003      	beq.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80034c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	d104      	bne.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034cc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ce:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034d2:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d4:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80034d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034da:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034de:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80034e2:	bd30      	pop	{r4, r5, pc}
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d01f      	beq.n	8003530 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034f0:	68cb      	ldr	r3, [r1, #12]
 80034f2:	688a      	ldr	r2, [r1, #8]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034fa:	684a      	ldr	r2, [r1, #4]
 80034fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003500:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003502:	680a      	ldr	r2, [r1, #0]
 8003504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003508:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800350a:	690a      	ldr	r2, [r1, #16]
 800350c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003510:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003512:	694a      	ldr	r2, [r1, #20]
 8003514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003518:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800351a:	69ca      	ldr	r2, [r1, #28]
 800351c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003520:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003522:	6802      	ldr	r2, [r0, #0]
 8003524:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003526:	2300      	movs	r3, #0
 8003528:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800352c:	4618      	mov	r0, r3
 800352e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003530:	2002      	movs	r0, #2
}
 8003532:	4770      	bx	lr

08003534 <ClearPixel.part.0>:
  {
		GLCD_Buf[(x)+((y/8)*128)]|=0x01<<y%8;

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
    if (endRow <= y)  { endRow = y + 1; }
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <ClearPixel.part.0+0x24>)
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	428a      	cmp	r2, r1
 800353a:	bf9c      	itt	ls
 800353c:	3101      	addls	r1, #1
 800353e:	7019      	strbls	r1, [r3, #0]
    if (startCol > x) { startCol = x; }
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <ClearPixel.part.0+0x28>)
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	4282      	cmp	r2, r0
 8003546:	bf88      	it	hi
 8003548:	7018      	strbhi	r0, [r3, #0]
    if (endCol <= x)  { endCol = x + 1; }
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <ClearPixel.part.0+0x2c>)
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	4282      	cmp	r2, r0
 8003550:	bf9c      	itt	ls
 8003552:	3001      	addls	r0, #1
 8003554:	7018      	strbls	r0, [r3, #0]
  }
}
 8003556:	4770      	bx	lr
 8003558:	200007aa 	.word	0x200007aa
 800355c:	200007ac 	.word	0x200007ac
 8003560:	200007a9 	.word	0x200007a9

08003564 <ST7920_SendCmd>:
	data[0] = 0xf8 + (0<<1);
 8003564:	23f8      	movs	r3, #248	; 0xf8
{
 8003566:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8003568:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <ST7920_SendCmd+0x3c>)
	data[0] = 0xf8 + (0<<1);
 800356a:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = cmd & 0xf0;
 800356e:	f020 030f 	bic.w	r3, r0, #15
	data[2] = (cmd << 4) & 0xf0;
 8003572:	0100      	lsls	r0, r0, #4
 8003574:	f88d 0006 	strb.w	r0, [sp, #6]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8003578:	2201      	movs	r2, #1
 800357a:	4620      	mov	r0, r4
 800357c:	2140      	movs	r1, #64	; 0x40
	data[1] = cmd & 0xf0;
 800357e:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8003582:	f7fe feb3 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 3, 2);
 8003586:	2302      	movs	r3, #2
 8003588:	a901      	add	r1, sp, #4
 800358a:	2203      	movs	r2, #3
 800358c:	4805      	ldr	r0, [pc, #20]	; (80035a4 <ST7920_SendCmd+0x40>)
 800358e:	f7ff fa5b 	bl	8002a48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8003592:	2200      	movs	r2, #0
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	4620      	mov	r0, r4
 8003598:	f7fe fea8 	bl	80022ec <HAL_GPIO_WritePin>
}
 800359c:	b002      	add	sp, #8
 800359e:	bd10      	pop	{r4, pc}
 80035a0:	40010800 	.word	0x40010800
 80035a4:	200002b8 	.word	0x200002b8

080035a8 <ST7920_SendData>:
	dat[0] = 0xf8+(1<<1);
 80035a8:	23fa      	movs	r3, #250	; 0xfa
{
 80035aa:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80035ac:	4c0d      	ldr	r4, [pc, #52]	; (80035e4 <ST7920_SendData+0x3c>)
	dat[0] = 0xf8+(1<<1);
 80035ae:	f88d 3004 	strb.w	r3, [sp, #4]
	dat[1] = data&0xf0;
 80035b2:	f020 030f 	bic.w	r3, r0, #15
	dat[2] = (data<<4)&0xf0;
 80035b6:	0100      	lsls	r0, r0, #4
 80035b8:	f88d 0006 	strb.w	r0, [sp, #6]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80035bc:	2201      	movs	r2, #1
 80035be:	4620      	mov	r0, r4
 80035c0:	2140      	movs	r1, #64	; 0x40
	dat[1] = data&0xf0;
 80035c2:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80035c6:	f7fe fe91 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&dat, 3, 2);
 80035ca:	2302      	movs	r3, #2
 80035cc:	a901      	add	r1, sp, #4
 80035ce:	2203      	movs	r2, #3
 80035d0:	4805      	ldr	r0, [pc, #20]	; (80035e8 <ST7920_SendData+0x40>)
 80035d2:	f7ff fa39 	bl	8002a48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80035d6:	2200      	movs	r2, #0
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	4620      	mov	r0, r4
 80035dc:	f7fe fe86 	bl	80022ec <HAL_GPIO_WritePin>
}
 80035e0:	b002      	add	sp, #8
 80035e2:	bd10      	pop	{r4, pc}
 80035e4:	40010800 	.word	0x40010800
 80035e8:	200002b8 	.word	0x200002b8

080035ec <ST7920_GraphicMode>:
	if (enable == 1)
 80035ec:	2801      	cmp	r0, #1
{
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
	if (enable == 1)
 80035f2:	d114      	bne.n	800361e <ST7920_GraphicMode+0x32>
		ST7920_SendCmd(0x30);  // 8 bit mode
 80035f4:	2030      	movs	r0, #48	; 0x30
 80035f6:	f7ff ffb5 	bl	8003564 <ST7920_SendCmd>
		HAL_Delay (1);
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7fe fa02 	bl	8001a04 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 8003600:	2034      	movs	r0, #52	; 0x34
 8003602:	f7ff ffaf 	bl	8003564 <ST7920_SendCmd>
		HAL_Delay (1);
 8003606:	4620      	mov	r0, r4
 8003608:	f7fe f9fc 	bl	8001a04 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 800360c:	2036      	movs	r0, #54	; 0x36
		ST7920_SendCmd(0x30);  // 8 bit mode
 800360e:	f7ff ffa9 	bl	8003564 <ST7920_SendCmd>
		HAL_Delay (1);
 8003612:	2001      	movs	r0, #1
 8003614:	f7fe f9f6 	bl	8001a04 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <ST7920_GraphicMode+0x3c>)
 800361a:	701c      	strb	r4, [r3, #0]
}
 800361c:	bd10      	pop	{r4, pc}
	else if (enable == 0)
 800361e:	2800      	cmp	r0, #0
 8003620:	d1fc      	bne.n	800361c <ST7920_GraphicMode+0x30>
		ST7920_SendCmd(0x30);  // 8 bit mode
 8003622:	2030      	movs	r0, #48	; 0x30
 8003624:	e7f3      	b.n	800360e <ST7920_GraphicMode+0x22>
 8003626:	bf00      	nop
 8003628:	200007a8 	.word	0x200007a8

0800362c <ST7920_DrawBitmap>:
	int Yend = 64+half*64;
 800362c:	2900      	cmp	r1, #0
 800362e:	bf14      	ite	ne
 8003630:	2380      	movne	r3, #128	; 0x80
 8003632:	2340      	moveq	r3, #64	; 0x40
{
 8003634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003638:	4680      	mov	r8, r0
 800363a:	b091      	sub	sp, #68	; 0x44
	int Yend = 64+half*64;
 800363c:	9301      	str	r3, [sp, #4]
	int Ystart = 0+half*64;
 800363e:	0189      	lsls	r1, r1, #6
	for(y=Ystart;y<Yend;y++)
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	b2cf      	uxtb	r7, r1
 8003644:	429f      	cmp	r7, r3
 8003646:	db02      	blt.n	800364e <ST7920_DrawBitmap+0x22>
}
 8003648:	b011      	add	sp, #68	; 0x44
 800364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Index=((y/8)*128)+(x*16);
 800364e:	08fb      	lsrs	r3, r7, #3
 8003650:	01dc      	lsls	r4, r3, #7
 8003652:	eb08 13c3 	add.w	r3, r8, r3, lsl #7
 8003656:	930f      	str	r3, [sp, #60]	; 0x3c
 8003658:	1c63      	adds	r3, r4, #1
 800365a:	4443      	add	r3, r8
 800365c:	930e      	str	r3, [sp, #56]	; 0x38
 800365e:	1ca3      	adds	r3, r4, #2
 8003660:	4443      	add	r3, r8
 8003662:	930d      	str	r3, [sp, #52]	; 0x34
 8003664:	1ce3      	adds	r3, r4, #3
 8003666:	4443      	add	r3, r8
 8003668:	930c      	str	r3, [sp, #48]	; 0x30
 800366a:	1d23      	adds	r3, r4, #4
 800366c:	4443      	add	r3, r8
 800366e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003670:	1d63      	adds	r3, r4, #5
 8003672:	4443      	add	r3, r8
 8003674:	930a      	str	r3, [sp, #40]	; 0x28
 8003676:	1da3      	adds	r3, r4, #6
 8003678:	4443      	add	r3, r8
 800367a:	9309      	str	r3, [sp, #36]	; 0x24
 800367c:	1de3      	adds	r3, r4, #7
 800367e:	4443      	add	r3, r8
 8003680:	9308      	str	r3, [sp, #32]
 8003682:	f104 0308 	add.w	r3, r4, #8
 8003686:	4443      	add	r3, r8
 8003688:	9307      	str	r3, [sp, #28]
 800368a:	f104 0309 	add.w	r3, r4, #9
 800368e:	4443      	add	r3, r8
 8003690:	9306      	str	r3, [sp, #24]
 8003692:	f104 030a 	add.w	r3, r4, #10
 8003696:	4443      	add	r3, r8
 8003698:	9305      	str	r3, [sp, #20]
 800369a:	f104 030d 	add.w	r3, r4, #13
 800369e:	4443      	add	r3, r8
 80036a0:	9304      	str	r3, [sp, #16]
 80036a2:	f104 030e 	add.w	r3, r4, #14
 80036a6:	f104 0a0b 	add.w	sl, r4, #11
 80036aa:	f104 090c 	add.w	r9, r4, #12
 80036ae:	4443      	add	r3, r8
 80036b0:	340f      	adds	r4, #15
 80036b2:	9303      	str	r3, [sp, #12]
 80036b4:	eb08 0304 	add.w	r3, r8, r4
 80036b8:	2400      	movs	r4, #0
 80036ba:	4626      	mov	r6, r4
				ST7920_SendCmd(0x80 | y-32);//Y(0-31)
 80036bc:	f1a7 0520 	sub.w	r5, r7, #32
 80036c0:	f065 057f 	orn	r5, r5, #127	; 0x7f
 80036c4:	44c2      	add	sl, r8
 80036c6:	44c1      	add	r9, r8
 80036c8:	9302      	str	r3, [sp, #8]
 80036ca:	b2ed      	uxtb	r5, r5
			if(y<32)//Up
 80036cc:	2f1f      	cmp	r7, #31
 80036ce:	fa5f fb86 	uxtb.w	fp, r6
 80036d2:	f200 80b1 	bhi.w	8003838 <ST7920_DrawBitmap+0x20c>
				ST7920_SendCmd(0x80 | y);										//Y(0-31)
 80036d6:	f047 0080 	orr.w	r0, r7, #128	; 0x80
 80036da:	f7ff ff43 	bl	8003564 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);										//X(0-8)
 80036de:	f04b 0080 	orr.w	r0, fp, #128	; 0x80
				ST7920_SendCmd(0x88 | x);//X(0-8)
 80036e2:	f7ff ff3f 	bl	8003564 <ST7920_SendCmd>
			Temp=	(((graphic[Index+0]>>Db)&0x01)<<7)|
 80036e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036e8:	f007 0b07 	and.w	fp, r7, #7
 80036ec:	5d18      	ldrb	r0, [r3, r4]
						(((graphic[Index+7]>>Db)&0x01)<<0);
 80036ee:	9b08      	ldr	r3, [sp, #32]
			Temp=	(((graphic[Index+0]>>Db)&0x01)<<7)|
 80036f0:	fa40 fc0b 	asr.w	ip, r0, fp
						(((graphic[Index+7]>>Db)&0x01)<<0);
 80036f4:	5d18      	ldrb	r0, [r3, r4]
						(((graphic[Index+1]>>Db)&0x01)<<6)|
 80036f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
						(((graphic[Index+7]>>Db)&0x01)<<0);
 80036f8:	fa40 f00b 	asr.w	r0, r0, fp
 80036fc:	f000 0001 	and.w	r0, r0, #1
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003700:	ea40 10cc 	orr.w	r0, r0, ip, lsl #7
						(((graphic[Index+1]>>Db)&0x01)<<6)|
 8003704:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+2]>>Db)&0x01)<<5)|
 8003708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
						(((graphic[Index+1]>>Db)&0x01)<<6)|
 800370a:	fa4c fc0b 	asr.w	ip, ip, fp
 800370e:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 8003712:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003716:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+2]>>Db)&0x01)<<5)|
 800371a:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+3]>>Db)&0x01)<<4)|
 800371e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
						(((graphic[Index+2]>>Db)&0x01)<<5)|
 8003720:	fa4c fc0b 	asr.w	ip, ip, fp
 8003724:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8003728:	f00c 0c20 	and.w	ip, ip, #32
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 800372c:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+3]>>Db)&0x01)<<4)|
 8003730:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+4]>>Db)&0x01)<<3)|
 8003734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
						(((graphic[Index+3]>>Db)&0x01)<<4)|
 8003736:	fa4c fc0b 	asr.w	ip, ip, fp
 800373a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800373e:	f00c 0c10 	and.w	ip, ip, #16
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003742:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+4]>>Db)&0x01)<<3)|
 8003746:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+5]>>Db)&0x01)<<2)|
 800374a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						(((graphic[Index+4]>>Db)&0x01)<<3)|
 800374c:	fa4c fc0b 	asr.w	ip, ip, fp
 8003750:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003754:	f00c 0c08 	and.w	ip, ip, #8
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003758:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+5]>>Db)&0x01)<<2)|
 800375c:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003760:	9b09      	ldr	r3, [sp, #36]	; 0x24
						(((graphic[Index+5]>>Db)&0x01)<<2)|
 8003762:	fa4c fc0b 	asr.w	ip, ip, fp
 8003766:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800376a:	f00c 0c04 	and.w	ip, ip, #4
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 800376e:	ea40 000c 	orr.w	r0, r0, ip
 8003772:	f813 c004 	ldrb.w	ip, [r3, r4]
		for(x=0;x<8;x++)
 8003776:	3601      	adds	r6, #1
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003778:	fa4c fc0b 	asr.w	ip, ip, fp
 800377c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003780:	f00c 0c02 	and.w	ip, ip, #2
 8003784:	ea40 000c 	orr.w	r0, r0, ip
			ST7920_SendData(Temp);
 8003788:	b2c0      	uxtb	r0, r0
 800378a:	f7ff ff0d 	bl	80035a8 <ST7920_SendData>
			Temp=	(((graphic[Index+8]>>Db)&0x01)<<7)|
 800378e:	9b07      	ldr	r3, [sp, #28]
 8003790:	5d18      	ldrb	r0, [r3, r4]
						(((graphic[Index+15]>>Db)&0x01)<<0);
 8003792:	9b02      	ldr	r3, [sp, #8]
			Temp=	(((graphic[Index+8]>>Db)&0x01)<<7)|
 8003794:	fa40 fc0b 	asr.w	ip, r0, fp
						(((graphic[Index+15]>>Db)&0x01)<<0);
 8003798:	5d18      	ldrb	r0, [r3, r4]
						(((graphic[Index+9]>>Db)&0x01)<<6)|
 800379a:	9b06      	ldr	r3, [sp, #24]
						(((graphic[Index+15]>>Db)&0x01)<<0);
 800379c:	fa40 f00b 	asr.w	r0, r0, fp
 80037a0:	f000 0001 	and.w	r0, r0, #1
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80037a4:	ea40 10cc 	orr.w	r0, r0, ip, lsl #7
						(((graphic[Index+9]>>Db)&0x01)<<6)|
 80037a8:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+10]>>Db)&0x01)<<5)|
 80037ac:	9b05      	ldr	r3, [sp, #20]
						(((graphic[Index+9]>>Db)&0x01)<<6)|
 80037ae:	fa4c fc0b 	asr.w	ip, ip, fp
 80037b2:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 80037b6:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80037ba:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+10]>>Db)&0x01)<<5)|
 80037be:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+13]>>Db)&0x01)<<2)|
 80037c2:	9b04      	ldr	r3, [sp, #16]
						(((graphic[Index+10]>>Db)&0x01)<<5)|
 80037c4:	fa4c fc0b 	asr.w	ip, ip, fp
 80037c8:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80037cc:	f00c 0c20 	and.w	ip, ip, #32
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80037d0:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+11]>>Db)&0x01)<<4)|
 80037d4:	f81a c004 	ldrb.w	ip, [sl, r4]
 80037d8:	fa4c fc0b 	asr.w	ip, ip, fp
 80037dc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80037e0:	f00c 0c10 	and.w	ip, ip, #16
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80037e4:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+12]>>Db)&0x01)<<3)|
 80037e8:	f819 c004 	ldrb.w	ip, [r9, r4]
 80037ec:	fa4c fc0b 	asr.w	ip, ip, fp
 80037f0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80037f4:	f00c 0c08 	and.w	ip, ip, #8
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80037f8:	ea40 000c 	orr.w	r0, r0, ip
						(((graphic[Index+13]>>Db)&0x01)<<2)|
 80037fc:	f813 c004 	ldrb.w	ip, [r3, r4]
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 8003800:	9b03      	ldr	r3, [sp, #12]
						(((graphic[Index+13]>>Db)&0x01)<<2)|
 8003802:	fa4c fc0b 	asr.w	ip, ip, fp
 8003806:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800380a:	f00c 0c04 	and.w	ip, ip, #4
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 800380e:	ea40 000c 	orr.w	r0, r0, ip
 8003812:	f813 c004 	ldrb.w	ip, [r3, r4]
		for(x=0;x<8;x++)
 8003816:	3410      	adds	r4, #16
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 8003818:	fa4c fb0b 	asr.w	fp, ip, fp
 800381c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8003820:	f00b 0b02 	and.w	fp, fp, #2
 8003824:	ea40 000b 	orr.w	r0, r0, fp
			ST7920_SendData(Temp);
 8003828:	b2c0      	uxtb	r0, r0
 800382a:	f7ff febd 	bl	80035a8 <ST7920_SendData>
		for(x=0;x<8;x++)
 800382e:	2e08      	cmp	r6, #8
 8003830:	f47f af4c 	bne.w	80036cc <ST7920_DrawBitmap+0xa0>
	for(y=Ystart;y<Yend;y++)
 8003834:	1c79      	adds	r1, r7, #1
 8003836:	e703      	b.n	8003640 <ST7920_DrawBitmap+0x14>
				ST7920_SendCmd(0x80 | y-32);//Y(0-31)
 8003838:	4628      	mov	r0, r5
 800383a:	f7ff fe93 	bl	8003564 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);//X(0-8)
 800383e:	f04b 0088 	orr.w	r0, fp, #136	; 0x88
 8003842:	e74e      	b.n	80036e2 <ST7920_DrawBitmap+0xb6>

08003844 <GLCD_Buf_Clear>:
	for(i=0;i<1024;i++)GLCD_Buf[i]=0;
 8003844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003848:	2100      	movs	r1, #0
 800384a:	4801      	ldr	r0, [pc, #4]	; (8003850 <GLCD_Buf_Clear+0xc>)
 800384c:	f001 bed8 	b.w	8005600 <memset>
 8003850:	200003a8 	.word	0x200003a8

08003854 <ST7920_Update>:
	ST7920_DrawBitmap(GLCD_Buf, lastHalf);
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <ST7920_Update+0xc>)
 8003856:	4803      	ldr	r0, [pc, #12]	; (8003864 <ST7920_Update+0x10>)
 8003858:	7819      	ldrb	r1, [r3, #0]
 800385a:	f7ff bee7 	b.w	800362c <ST7920_DrawBitmap>
 800385e:	bf00      	nop
 8003860:	200007ab 	.word	0x200007ab
 8003864:	200003a8 	.word	0x200003a8

08003868 <ST7920_Clear>:
{
 8003868:	b538      	push	{r3, r4, r5, lr}
	if (Graphic_Check == 1)  // if the graphic mode is set
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <ST7920_Clear+0x64>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d124      	bne.n	80038bc <ST7920_Clear+0x54>
 8003872:	2400      	movs	r4, #0
			if(y < 32)
 8003874:	2c1f      	cmp	r4, #31
 8003876:	b2e0      	uxtb	r0, r4
 8003878:	d818      	bhi.n	80038ac <ST7920_Clear+0x44>
				ST7920_SendCmd(0x80 | y);
 800387a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800387e:	f7ff fe71 	bl	8003564 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8003882:	2080      	movs	r0, #128	; 0x80
				ST7920_SendCmd(0x88);
 8003884:	f7ff fe6e 	bl	8003564 <ST7920_SendCmd>
 8003888:	2508      	movs	r5, #8
				ST7920_SendData(0);
 800388a:	2000      	movs	r0, #0
 800388c:	f7ff fe8c 	bl	80035a8 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8003890:	3d01      	subs	r5, #1
				ST7920_SendData(0);
 8003892:	2000      	movs	r0, #0
 8003894:	f7ff fe88 	bl	80035a8 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8003898:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800389c:	d1f5      	bne.n	800388a <ST7920_Clear+0x22>
		for(y = 0; y < 64; y++)
 800389e:	3401      	adds	r4, #1
 80038a0:	2c40      	cmp	r4, #64	; 0x40
 80038a2:	d1e7      	bne.n	8003874 <ST7920_Clear+0xc>
}
 80038a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		GLCD_Buf_Clear();
 80038a8:	f7ff bfcc 	b.w	8003844 <GLCD_Buf_Clear>
				ST7920_SendCmd(0x80 | (y-32));
 80038ac:	3820      	subs	r0, #32
 80038ae:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80038b2:	b2c0      	uxtb	r0, r0
 80038b4:	f7ff fe56 	bl	8003564 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 80038b8:	2088      	movs	r0, #136	; 0x88
 80038ba:	e7e3      	b.n	8003884 <ST7920_Clear+0x1c>
		ST7920_SendCmd(0x01);   // clear the display using command
 80038bc:	2001      	movs	r0, #1
 80038be:	f7ff fe51 	bl	8003564 <ST7920_SendCmd>
}
 80038c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_Delay(2); // delay >1.6 ms
 80038c6:	2002      	movs	r0, #2
 80038c8:	f7fe b89c 	b.w	8001a04 <HAL_Delay>
 80038cc:	200007a8 	.word	0x200007a8

080038d0 <ST7920_Init>:
{
 80038d0:	b508      	push	{r3, lr}
	HAL_Delay(50);   //wait for >40 ms
 80038d2:	2032      	movs	r0, #50	; 0x32
 80038d4:	f7fe f896 	bl	8001a04 <HAL_Delay>
	ST7920_SendCmd(LCD_BASIC);  // 8bit mode
 80038d8:	2030      	movs	r0, #48	; 0x30
 80038da:	f7ff fe43 	bl	8003564 <ST7920_SendCmd>
	HAL_Delay(1);
 80038de:	2001      	movs	r0, #1
 80038e0:	f7fe f890 	bl	8001a04 <HAL_Delay>
	ST7920_SendCmd(LCD_BASIC);  // 8bit mode
 80038e4:	2030      	movs	r0, #48	; 0x30
 80038e6:	f7ff fe3d 	bl	8003564 <ST7920_SendCmd>
	HAL_Delay(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f7fe f88a 	bl	8001a04 <HAL_Delay>
	ST7920_SendCmd(LCD_CLS);  // D=0, C=0, B=0
 80038f0:	2001      	movs	r0, #1
 80038f2:	f7ff fe37 	bl	8003564 <ST7920_SendCmd>
	HAL_Delay(1);
 80038f6:	2001      	movs	r0, #1
 80038f8:	f7fe f884 	bl	8001a04 <HAL_Delay>
	ST7920_SendCmd(LCD_ADDRINC);  // clear screen
 80038fc:	2006      	movs	r0, #6
 80038fe:	f7ff fe31 	bl	8003564 <ST7920_SendCmd>
	HAL_Delay(1);
 8003902:	2001      	movs	r0, #1
 8003904:	f7fe f87e 	bl	8001a04 <HAL_Delay>
	ST7920_SendCmd(LCD_DISPLAYON);  // cursor increment right no shift
 8003908:	200c      	movs	r0, #12
 800390a:	f7ff fe2b 	bl	8003564 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800390e:	2001      	movs	r0, #1
 8003910:	f7fe f878 	bl	8001a04 <HAL_Delay>
	ST7920_SendCmd(LCD_EXTEND);  // D=1, C=0, B=0
 8003914:	2034      	movs	r0, #52	; 0x34
 8003916:	f7ff fe25 	bl	8003564 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 800391a:	2001      	movs	r0, #1
 800391c:	f7fe f872 	bl	8001a04 <HAL_Delay>
    ST7920_SendCmd(LCD_GFXMODE);  // D=1, C=0, B=0
 8003920:	2036      	movs	r0, #54	; 0x36
 8003922:	f7ff fe1f 	bl	8003564 <ST7920_SendCmd>
}
 8003926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1);  // 1ms delay
 800392a:	2001      	movs	r0, #1
 800392c:	f7fe b86a 	b.w	8001a04 <HAL_Delay>

08003930 <SetPixel>:
{
 8003930:	b430      	push	{r4, r5}
  if (y < numRows && x < numCols)
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <SetPixel+0x3c>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	428b      	cmp	r3, r1
 8003938:	d916      	bls.n	8003968 <SetPixel+0x38>
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <SetPixel+0x40>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	4283      	cmp	r3, r0
 8003940:	d912      	bls.n	8003968 <SetPixel+0x38>
		GLCD_Buf[(x)+((y/8)*128)]|=0x01<<y%8;
 8003942:	2301      	movs	r3, #1
 8003944:	4c0b      	ldr	r4, [pc, #44]	; (8003974 <SetPixel+0x44>)
 8003946:	08ca      	lsrs	r2, r1, #3
 8003948:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 800394c:	f001 0507 	and.w	r5, r1, #7
 8003950:	40ab      	lsls	r3, r5
 8003952:	5ca5      	ldrb	r5, [r4, r2]
 8003954:	432b      	orrs	r3, r5
 8003956:	54a3      	strb	r3, [r4, r2]
    if (startRow > y) { startRow = y; }
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <SetPixel+0x48>)
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	428a      	cmp	r2, r1
 800395e:	bf88      	it	hi
 8003960:	7019      	strbhi	r1, [r3, #0]
}
 8003962:	bc30      	pop	{r4, r5}
 8003964:	f7ff bde6 	b.w	8003534 <ClearPixel.part.0>
 8003968:	bc30      	pop	{r4, r5}
 800396a:	4770      	bx	lr
 800396c:	2000000d 	.word	0x2000000d
 8003970:	2000000c 	.word	0x2000000c
 8003974:	200003a8 	.word	0x200003a8
 8003978:	200007ad 	.word	0x200007ad

0800397c <GLCD_Font_Print>:
}


//Print Fonted String x=0-15 y=0-7
void GLCD_Font_Print(uint8_t x,uint8_t y,char * String)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	4e0d      	ldr	r6, [pc, #52]	; (80039b4 <GLCD_Font_Print+0x38>)

	int i;
	while(*String)
	{
		for(i=0;i<8;i++)
			GLCD_Buf[i+(x*8)+(y*128)+shiftX/*+shiftY*32*/]=Font[(*String)*8+i-33*8];
 8003980:	4f0d      	ldr	r7, [pc, #52]	; (80039b8 <GLCD_Font_Print+0x3c>)
 8003982:	01c9      	lsls	r1, r1, #7
 8003984:	3a01      	subs	r2, #1
	while(*String)
 8003986:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800398a:	b903      	cbnz	r3, 800398e <GLCD_Font_Print+0x12>
			x=0;
			y++;
		}
		*/
	}
}
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(i=0;i<8;i++)
 800398e:	2400      	movs	r4, #0
 8003990:	eb01 05c0 	add.w	r5, r1, r0, lsl #3
 8003994:	4435      	add	r5, r6
			GLCD_Buf[i+(x*8)+(y*128)+shiftX/*+shiftY*32*/]=Font[(*String)*8+i-33*8];
 8003996:	7813      	ldrb	r3, [r2, #0]
 8003998:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800399c:	4423      	add	r3, r4
 800399e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039a2:	781b      	ldrb	r3, [r3, #0]
		for(i=0;i<8;i++)
 80039a4:	3401      	adds	r4, #1
 80039a6:	2c08      	cmp	r4, #8
			GLCD_Buf[i+(x*8)+(y*128)+shiftX/*+shiftY*32*/]=Font[(*String)*8+i-33*8];
 80039a8:	f805 3b01 	strb.w	r3, [r5], #1
		for(i=0;i<8;i++)
 80039ac:	d1f3      	bne.n	8003996 <GLCD_Font_Print+0x1a>
		x++;
 80039ae:	3001      	adds	r0, #1
 80039b0:	b2c0      	uxtb	r0, r0
 80039b2:	e7e8      	b.n	8003986 <GLCD_Font_Print+0xa>
 80039b4:	200003a8 	.word	0x200003a8
 80039b8:	08008f67 	.word	0x08008f67

080039bc <compInit>:
void compInit(void){
	// 1 sample = 1/96kHz = ~10us
	//Attack -> 30 ms -> 3000
	//Release -> 20 ms -> 2000
	//Hold -> 10ms -> 1000
	Attack = 3000;
 80039bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <compInit+0x38>)
	threshold = (0.01f * 2147483648);

	//compression ratio: 6:1 -> -6dB = 0.5
	gainreduce = (0.5f);

	gain_step_attack = ((1.0f - gainreduce) / Attack);
 80039c2:	490d      	ldr	r1, [pc, #52]	; (80039f8 <compInit+0x3c>)
	Attack = 3000;
 80039c4:	601a      	str	r2, [r3, #0]
	Release = 2000;
 80039c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <compInit+0x40>)
 80039cc:	601a      	str	r2, [r3, #0]
	Hold = 1000;
 80039ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <compInit+0x44>)
 80039d4:	601a      	str	r2, [r3, #0]
	threshold = (0.01f * 2147483648);
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <compInit+0x48>)
 80039d8:	4a0b      	ldr	r2, [pc, #44]	; (8003a08 <compInit+0x4c>)
 80039da:	601a      	str	r2, [r3, #0]
	gainreduce = (0.5f);
 80039dc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <compInit+0x50>)
 80039e2:	6013      	str	r3, [r2, #0]
	gain_step_attack = ((1.0f - gainreduce) / Attack);
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <compInit+0x54>)
 80039e6:	6011      	str	r1, [r2, #0]
	gain_step_release = ((1.0f - gainreduce) / Release);
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <compInit+0x58>)
 80039ea:	490b      	ldr	r1, [pc, #44]	; (8003a18 <compInit+0x5c>)
 80039ec:	6011      	str	r1, [r2, #0]

	//initial gain = 1.0 -> no compression
	gain = (0.5f);
 80039ee:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <compInit+0x60>)
 80039f0:	6013      	str	r3, [r2, #0]
}
 80039f2:	4770      	bx	lr
 80039f4:	200007b0 	.word	0x200007b0
 80039f8:	392ec33e 	.word	0x392ec33e
 80039fc:	200007b8 	.word	0x200007b8
 8003a00:	200007b4 	.word	0x200007b4
 8003a04:	20000bf4 	.word	0x20000bf4
 8003a08:	4ba3d70a 	.word	0x4ba3d70a
 8003a0c:	20000bf0 	.word	0x20000bf0
 8003a10:	20000be8 	.word	0x20000be8
 8003a14:	20000bec 	.word	0x20000bec
 8003a18:	3983126f 	.word	0x3983126f
 8003a1c:	20000be4 	.word	0x20000be4

08003a20 <compProcessFloat>:


q31_t compProcessFloat (q31_t inSample) {
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return ((float)i / 2147483648.0f);
 8003a24:	f7fd f99a 	bl	8000d5c <__aeabi_i2f>
 8003a28:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8003a2c:	f7fd f9ea 	bl	8000e04 <__aeabi_fmul>
	float inSampleF = Q31float(inSample);

	if (fabs(inSampleF) > threshold) {
 8003a30:	4b60      	ldr	r3, [pc, #384]	; (8003bb4 <compProcessFloat+0x194>)
 8003a32:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8003a36:	f8d3 9000 	ldr.w	r9, [r3]
	return ((float)i / 2147483648.0f);
 8003a3a:	4607      	mov	r7, r0
	if (fabs(inSampleF) > threshold) {
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f7fd fb9c 	bl	800117c <__aeabi_fcmpgt>
		if (gain >=  gainreduce) {
 8003a44:	4e5c      	ldr	r6, [pc, #368]	; (8003bb8 <compProcessFloat+0x198>)
 8003a46:	4c5d      	ldr	r4, [pc, #372]	; (8003bbc <compProcessFloat+0x19c>)
 8003a48:	6835      	ldr	r5, [r6, #0]
	if (fabs(inSampleF) > threshold) {
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	f000 8096 	beq.w	8003b7c <compProcessFloat+0x15c>
		if (gain >=  gainreduce) {
 8003a50:	4b5b      	ldr	r3, [pc, #364]	; (8003bc0 <compProcessFloat+0x1a0>)
 8003a52:	4629      	mov	r1, r5
 8003a54:	6818      	ldr	r0, [r3, #0]
			if (State == S_NoOperation) {
 8003a56:	f894 a000 	ldrb.w	sl, [r4]
		if (gain >=  gainreduce) {
 8003a5a:	f7fd fb7b 	bl	8001154 <__aeabi_fcmple>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d035      	beq.n	8003ace <compProcessFloat+0xae>
			if (State == S_NoOperation) {
 8003a62:	f1ba 0f00 	cmp.w	sl, #0
 8003a66:	d12f      	bne.n	8003ac8 <compProcessFloat+0xa8>
				State = S_Attack;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	7023      	strb	r3, [r4, #0]
				TimeOut = Attack;
 8003a6c:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <compProcessFloat+0x1a4>)
		}
		if (State == S_GainReduction)
			TimeOut = Hold;
	}

	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003a6e:	4649      	mov	r1, r9
				TimeOut = Attack;
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <compProcessFloat+0x1a8>)
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003a74:	4640      	mov	r0, r8
				TimeOut = Attack;
 8003a76:	601a      	str	r2, [r3, #0]
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003a78:	f7fd fb62 	bl	8001140 <__aeabi_fcmplt>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d140      	bne.n	8003b02 <compProcessFloat+0xe2>
		}
	}

	switch (State) {
		case S_Attack:
			if (TimeOut > 0 && gain > gainreduce) {
 8003a80:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8003bc8 <compProcessFloat+0x1a8>
 8003a84:	f8d9 8000 	ldr.w	r8, [r9]
 8003a88:	f1b8 0f00 	cmp.w	r8, #0
 8003a8c:	dd64      	ble.n	8003b58 <compProcessFloat+0x138>
 8003a8e:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <compProcessFloat+0x1a0>)
 8003a90:	4629      	mov	r1, r5
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	f7fd fb54 	bl	8001140 <__aeabi_fcmplt>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d05d      	beq.n	8003b58 <compProcessFloat+0x138>
				gain -= gain_step_attack;
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <compProcessFloat+0x1ac>)
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	f7fd f8a5 	bl	8000bf0 <__aeabi_fsub>
				TimeOut--;
 8003aa6:	f108 33ff 	add.w	r3, r8, #4294967295
				gain -= gain_step_attack;
 8003aaa:	6030      	str	r0, [r6, #0]
			}
			else {
				State=S_GainReduction;
				TimeOut = Hold;
 8003aac:	f8c9 3000 	str.w	r3, [r9]

		default:
			break;
	}

	float outSampleF = inSampleF * gain;
 8003ab0:	6831      	ldr	r1, [r6, #0]
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	f7fd f9a6 	bl	8000e04 <__aeabi_fmul>
	return (q31_t)(f * 2147483648.0f);
 8003ab8:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
 8003abc:	f7fd f9a2 	bl	8000e04 <__aeabi_fmul>
 8003ac0:	f7fd fb7c 	bl	80011bc <__aeabi_f2iz>

	//return (int) outSampleF;
	return (floatQ31(outSampleF));
}
 8003ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			else if (State == S_Release) {
 8003ac8:	f1ba 0f03 	cmp.w	sl, #3
 8003acc:	d0cc      	beq.n	8003a68 <compProcessFloat+0x48>
		if (State == S_GainReduction)
 8003ace:	f1ba 0f02 	cmp.w	sl, #2
 8003ad2:	d153      	bne.n	8003b7c <compProcessFloat+0x15c>
			TimeOut = Hold;
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <compProcessFloat+0x1b0>)
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003ad6:	4649      	mov	r1, r9
			TimeOut = Hold;
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <compProcessFloat+0x1a8>)
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003adc:	4640      	mov	r0, r8
			TimeOut = Hold;
 8003ade:	601a      	str	r2, [r3, #0]
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003ae0:	f7fd fb2e 	bl	8001140 <__aeabi_fcmplt>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d15d      	bne.n	8003ba4 <compProcessFloat+0x184>
			if (TimeOut>0) TimeOut--;
 8003ae8:	4a37      	ldr	r2, [pc, #220]	; (8003bc8 <compProcessFloat+0x1a8>)
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	2b00      	cmp	r3, #0
				State=S_Release;
 8003aee:	bfdd      	ittte	le
 8003af0:	2303      	movle	r3, #3
 8003af2:	7023      	strble	r3, [r4, #0]
				TimeOut = Release;
 8003af4:	4b37      	ldrle	r3, [pc, #220]	; (8003bd4 <compProcessFloat+0x1b4>)
			if (TimeOut>0) TimeOut--;
 8003af6:	f103 33ff 	addgt.w	r3, r3, #4294967295
				TimeOut = Release;
 8003afa:	bfd8      	it	le
 8003afc:	681b      	ldrle	r3, [r3, #0]
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e7d6      	b.n	8003ab0 <compProcessFloat+0x90>
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003b02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7fd fb24 	bl	8001154 <__aeabi_fcmple>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d03b      	beq.n	8003b88 <compProcessFloat+0x168>
		if (TimeOut == 0 && State == S_GainReduction) {
 8003b10:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <compProcessFloat+0x1a8>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	d137      	bne.n	8003b88 <compProcessFloat+0x168>
 8003b18:	7822      	ldrb	r2, [r4, #0]
 8003b1a:	2a02      	cmp	r2, #2
 8003b1c:	d134      	bne.n	8003b88 <compProcessFloat+0x168>
			State = S_Release;
 8003b1e:	2203      	movs	r2, #3
 8003b20:	7022      	strb	r2, [r4, #0]
			TimeOut = Release;
 8003b22:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <compProcessFloat+0x1b4>)
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	601a      	str	r2, [r3, #0]
			if (TimeOut>0 && gain<1.0f) {
 8003b28:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8003bc8 <compProcessFloat+0x1a8>
 8003b2c:	f8d9 5000 	ldr.w	r5, [r9]
 8003b30:	2d00      	cmp	r5, #0
 8003b32:	dd16      	ble.n	8003b62 <compProcessFloat+0x142>
 8003b34:	f8d6 8000 	ldr.w	r8, [r6]
 8003b38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	f7fd faff 	bl	8001140 <__aeabi_fcmplt>
 8003b42:	b170      	cbz	r0, 8003b62 <compProcessFloat+0x142>
				gain += gain_step_release;
 8003b44:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <compProcessFloat+0x1b8>)
				TimeOut--;
 8003b46:	3d01      	subs	r5, #1
				gain += gain_step_release;
 8003b48:	4641      	mov	r1, r8
 8003b4a:	6818      	ldr	r0, [r3, #0]
				TimeOut--;
 8003b4c:	f8c9 5000 	str.w	r5, [r9]
				gain += gain_step_release;
 8003b50:	f7fd f850 	bl	8000bf4 <__addsf3>
 8003b54:	6030      	str	r0, [r6, #0]
 8003b56:	e7ab      	b.n	8003ab0 <compProcessFloat+0x90>
				State=S_GainReduction;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	7023      	strb	r3, [r4, #0]
				TimeOut = Hold;
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <compProcessFloat+0x1b0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	e7a4      	b.n	8003aac <compProcessFloat+0x8c>
				State=S_NoOperation;
 8003b62:	2300      	movs	r3, #0
 8003b64:	7023      	strb	r3, [r4, #0]
 8003b66:	e7a3      	b.n	8003ab0 <compProcessFloat+0x90>
			if (gain < 1.0f)
 8003b68:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	4621      	mov	r1, r4
 8003b70:	f7fd fae6 	bl	8001140 <__aeabi_fcmplt>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d09b      	beq.n	8003ab0 <compProcessFloat+0x90>
				gain = 1.0f;
 8003b78:	6034      	str	r4, [r6, #0]
 8003b7a:	e799      	b.n	8003ab0 <compProcessFloat+0x90>
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f7fd fade 	bl	8001140 <__aeabi_fcmplt>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d1bc      	bne.n	8003b02 <compProcessFloat+0xe2>
	switch (State) {
 8003b88:	7823      	ldrb	r3, [r4, #0]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d890      	bhi.n	8003ab0 <compProcessFloat+0x90>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <compProcessFloat+0x174>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003b69 	.word	0x08003b69
 8003b98:	08003a81 	.word	0x08003a81
 8003b9c:	08003ae9 	.word	0x08003ae9
 8003ba0:	08003b29 	.word	0x08003b29
	if (fabs(inSampleF) < threshold && gain <= 1.0f) {
 8003ba4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f7fd fad3 	bl	8001154 <__aeabi_fcmple>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d09a      	beq.n	8003ae8 <compProcessFloat+0xc8>
 8003bb2:	e7ad      	b.n	8003b10 <compProcessFloat+0xf0>
 8003bb4:	20000bf4 	.word	0x20000bf4
 8003bb8:	20000be4 	.word	0x20000be4
 8003bbc:	200007bc 	.word	0x200007bc
 8003bc0:	20000bf0 	.word	0x20000bf0
 8003bc4:	200007b0 	.word	0x200007b0
 8003bc8:	200007c0 	.word	0x200007c0
 8003bcc:	20000be8 	.word	0x20000be8
 8003bd0:	200007b4 	.word	0x200007b4
 8003bd4:	200007b8 	.word	0x200007b8
 8003bd8:	20000bec 	.word	0x20000bec

08003bdc <AudioAgc_AgcWdsp_Init>:
void AudioAgc_AgcWdsp_Init()
{
    // the values below are all loaded from
    // EEPROM, which happens BEFORE we get here
    // so there is no point in setting these.
	agc_wdsp_conf.mode = 2;
 8003bdc:	f244 6202 	movw	r2, #17922	; 0x4602
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <AudioAgc_AgcWdsp_Init+0x44>)
	agc_wdsp_conf.slope = 70;
	agc_wdsp_conf.hang_enable = 0;
	agc_wdsp_conf.tau_decay[0] = 4000;
	agc_wdsp_conf.tau_decay[1] = 2000;
 8003be2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
	agc_wdsp_conf.mode = 2;
 8003be6:	801a      	strh	r2, [r3, #0]
	agc_wdsp_conf.tau_decay[1] = 2000;
 8003be8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bec:	e9c3 0205 	strd	r0, r2, [r3, #20]
	agc_wdsp_conf.tau_decay[2] = 500;
	agc_wdsp_conf.tau_decay[3] = 250;
 8003bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf4:	20fa      	movs	r0, #250	; 0xfa
	agc_wdsp_conf.tau_decay[4] = 50;
	agc_wdsp_conf.thresh = 20;
	agc_wdsp_conf.tau_hang_decay = 500;
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
	agc_wdsp_conf.tau_decay[3] = 250;
 8003bf8:	e9c3 2007 	strd	r2, r0, [r3, #28]

    // these are not stored in volatile memory
    // so let us initialize them here.
	agc_wdsp_conf.hang_time = 	500;
 8003bfc:	60da      	str	r2, [r3, #12]
	agc_wdsp_conf.tau_decay[4] = 50;
 8003bfe:	2032      	movs	r0, #50	; 0x32
	agc_wdsp_conf.hang_thresh = 45;
	agc_wdsp_conf.action = 0;
 8003c00:	f44f 7280 	mov.w	r2, #256	; 0x100
	agc_wdsp_conf.hang_enable = 0;
 8003c04:	2100      	movs	r1, #0
	agc_wdsp_conf.hang_thresh = 45;
 8003c06:	f04f 0c14 	mov.w	ip, #20
	agc_wdsp_conf.tau_decay[4] = 50;
 8003c0a:	6258      	str	r0, [r3, #36]	; 0x24
	agc_wdsp_conf.action = 0;
 8003c0c:	821a      	strh	r2, [r3, #16]
	agc_wdsp_conf.hang_thresh = 45;
 8003c0e:	202d      	movs	r0, #45	; 0x2d
	agc_wdsp_conf.switch_mode = 1;
	agc_wdsp_conf.hang_action = 0;
	agc_wdsp_conf.tau_decay[5] = 1; // this is the OFF-Mode
 8003c10:	2201      	movs	r2, #1
	agc_wdsp_conf.hang_thresh = 45;
 8003c12:	e9c3 c001 	strd	ip, r0, [r3, #4]
	agc_wdsp_conf.hang_enable = 0;
 8003c16:	7099      	strb	r1, [r3, #2]
	agc_wdsp_conf.hang_action = 0;
 8003c18:	7499      	strb	r1, [r3, #18]
	agc_wdsp_conf.tau_decay[5] = 1; // this is the OFF-Mode
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000bb4 	.word	0x20000bb4
 8003c24:	00000000 	.word	0x00000000

08003c28 <AudioAgc_SetupAgcWdsp>:
 *
 * @param sample_rate audio sample rate
 * @param remove_dc Should be set for AM demodulation (AM,SAM,DSB) If set to true, remove DC in output
 */
void AudioAgc_SetupAgcWdsp(float32_t sample_rate, bool remove_dc)
{
 8003c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // this should prevent confusion between the distance of in_index and out_index variables
    // because these are freshly initialised
    // in_index and out_index have a distance of 48 (sample rate 12000) or 96 (sample rate 24000)
    // so that has to be defined very well when filter from 4k8 to 5k0 (changing decimation rate from 4 to 2)

    agc_wdsp.remove_dc = remove_dc;
 8003c2c:	4c41      	ldr	r4, [pc, #260]	; (8003d34 <AudioAgc_SetupAgcWdsp+0x10c>)
{
 8003c2e:	4605      	mov	r5, r0
    agc_wdsp.remove_dc = remove_dc;
 8003c30:	f884 13e4 	strb.w	r1, [r4, #996]	; 0x3e4

    if(agc_wdsp.sample_rate != sample_rate)
 8003c34:	4601      	mov	r1, r0
 8003c36:	f8d4 03e8 	ldr.w	r0, [r4, #1000]	; 0x3e8
 8003c3a:	f7fd fa77 	bl	800112c <__aeabi_fcmpeq>
 8003c3e:	b918      	cbnz	r0, 8003c48 <AudioAgc_SetupAgcWdsp+0x20>
    {
        agc_wdsp.initialised = false; // force initialisation
 8003c40:	f884 03ec 	strb.w	r0, [r4, #1004]	; 0x3ec
        agc_wdsp.sample_rate = sample_rate; // remember decimation rate for next time
 8003c44:	f8c4 53e8 	str.w	r5, [r4, #1000]	; 0x3e8
    }


    agc_wdsp.tau_attack = 0.001f;
 8003c48:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <AudioAgc_SetupAgcWdsp+0x110>)
    agc_wdsp.tau_decay = 0.250f;
 8003c4a:	f04f 587a 	mov.w	r8, #1048576000	; 0x3e800000
    agc_wdsp.tau_attack = 0.001f;
 8003c4e:	6123      	str	r3, [r4, #16]
    agc_wdsp.n_tau = 4;
 8003c50:	2304      	movs	r3, #4
    agc_wdsp.max_gain = 10000.0f;
    //agc_wdsp.var_gain = 1.5f
    agc_wdsp.fixed_gain = 1000.0f;
    agc_wdsp.max_input = 1.0f;
 8003c52:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    agc_wdsp.out_target = 1.0f;
    agc_wdsp.tau_fast_backaverage = 0.25f;
    agc_wdsp.tau_fast_decay = 0.005f;
    agc_wdsp.pop_ratio = 5.0f;
    //agc_wdsp.hang_enable = 1;
    agc_wdsp.tau_hang_backmult = 0.5f;
 8003c56:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
    agc_wdsp.n_tau = 4;
 8003c5a:	61a3      	str	r3, [r4, #24]
    agc_wdsp.max_gain = 10000.0f;
 8003c5c:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <AudioAgc_SetupAgcWdsp+0x114>)
    agc_wdsp.hangtime = 0.250f;
    agc_wdsp.hang_thresh = 0.250f;
    agc_wdsp.tau_hang_decay = 0.100;
 8003c5e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003d40 <AudioAgc_SetupAgcWdsp+0x118>
    agc_wdsp.max_gain = 10000.0f;
 8003c62:	61e3      	str	r3, [r4, #28]
    agc_wdsp.fixed_gain = 1000.0f;
 8003c64:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <AudioAgc_SetupAgcWdsp+0x11c>)
    agc_wdsp.tau_decay = 0.250f;
 8003c66:	f8c4 8014 	str.w	r8, [r4, #20]
    agc_wdsp.fixed_gain = 1000.0f;
 8003c6a:	6263      	str	r3, [r4, #36]	; 0x24
    agc_wdsp.tau_fast_decay = 0.005f;
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <AudioAgc_SetupAgcWdsp+0x120>)
    agc_wdsp.max_input = 1.0f;
 8003c6e:	62a7      	str	r7, [r4, #40]	; 0x28
    agc_wdsp.tau_fast_decay = 0.005f;
 8003c70:	6363      	str	r3, [r4, #52]	; 0x34
    agc_wdsp.pop_ratio = 5.0f;
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <AudioAgc_SetupAgcWdsp+0x124>)
    agc_wdsp.out_target = 1.0f;
 8003c74:	f8c4 73bc 	str.w	r7, [r4, #956]	; 0x3bc
    agc_wdsp.pop_ratio = 5.0f;
 8003c78:	63a3      	str	r3, [r4, #56]	; 0x38


    // one time initialization
    if(!agc_wdsp.initialised)
 8003c7a:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
    agc_wdsp.tau_fast_backaverage = 0.25f;
 8003c7e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    agc_wdsp.tau_hang_backmult = 0.5f;
 8003c82:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
    agc_wdsp.hangtime = 0.250f;
 8003c86:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    agc_wdsp.hang_thresh = 0.250f;
 8003c8a:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    agc_wdsp.tau_hang_decay = 0.100;
 8003c8e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
    if(!agc_wdsp.initialised)
 8003c92:	bb43      	cbnz	r3, 8003ce6 <AudioAgc_SetupAgcWdsp+0xbe>
         * */

        agc_wdsp.ring_buffsize = AGC_WDSP_RB_SIZE; //192; //96;

        //do one-time initialization
        agc_wdsp.out_index = -1; //agc_wdsp.ring_buffsize; // or -1 ??
 8003c94:	2144      	movs	r1, #68	; 0x44
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9a:	e9c4 12df 	strd	r1, r2, [r4, #892]	; 0x37c
        agc_wdsp.fixed_gain = 1.0;
        agc_wdsp.ring_max = 0.0;
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4924      	ldr	r1, [pc, #144]	; (8003d34 <AudioAgc_SetupAgcWdsp+0x10c>)
        agc_wdsp.fixed_gain = 1.0;
 8003ca2:	6267      	str	r7, [r4, #36]	; 0x24
        agc_wdsp.ring_max = 0.0;
 8003ca4:	f8c4 2384 	str.w	r2, [r4, #900]	; 0x384
        agc_wdsp.volts = 0.0;
 8003ca8:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
        agc_wdsp.save_volts = 0.0;
 8003cac:	f8c4 238c 	str.w	r2, [r4, #908]	; 0x38c
        agc_wdsp.fast_backaverage = 0.0;
 8003cb0:	f8c4 2390 	str.w	r2, [r4, #912]	; 0x390
        agc_wdsp.hang_backaverage = 0.0;
 8003cb4:	f8c4 2394 	str.w	r2, [r4, #916]	; 0x394
        agc_wdsp.hang_counter = 0;
 8003cb8:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
        agc_wdsp.decay_type = 0;
 8003cbc:	f8a4 339c 	strh.w	r3, [r4, #924]	; 0x39c
        agc_wdsp.state = 0;

        for(int idx = 0; idx < AGC_WDSP_RB_SIZE; idx++)
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	2b44      	cmp	r3, #68	; 0x44
        {
            agc_wdsp.ring[idx * 2 + 0] = 0.0;
 8003cc4:	64ca      	str	r2, [r1, #76]	; 0x4c
            agc_wdsp.ring[idx * 2 + 1] = 0.0;
 8003cc6:	650a      	str	r2, [r1, #80]	; 0x50
        for(int idx = 0; idx < AGC_WDSP_RB_SIZE; idx++)
 8003cc8:	f101 0108 	add.w	r1, r1, #8
 8003ccc:	d1f8      	bne.n	8003cc0 <AudioAgc_SetupAgcWdsp+0x98>
            agc_wdsp.abs_ring[idx] = 0.0;
 8003cce:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	481e      	ldr	r0, [pc, #120]	; (8003d50 <AudioAgc_SetupAgcWdsp+0x128>)
 8003cd6:	f001 fc93 	bl	8005600 <memset>
        }

        agc_wdsp.tau_attack = 0.001;
        agc_wdsp.n_tau = 4;
        agc_wdsp.max_input = (float32_t)ADC_CLIP_WARN_THRESHOLD; // which is 4096 at the moment
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <AudioAgc_SetupAgcWdsp+0x12c>)
 8003cdc:	62a3      	str	r3, [r4, #40]	; 0x28
        //32767.0; // maximum value of 16-bit audio //  1.0; //
        agc_wdsp.out_targ = (float32_t)ADC_CLIP_WARN_THRESHOLD; // 4096, tweaked, so that volume when switching between the two AGCs remains equal
 8003cde:	62e3      	str	r3, [r4, #44]	; 0x2c
        agc_wdsp.tau_fast_backaverage = 0.250;    // tau_fast_backaverage
        agc_wdsp.tau_fast_decay = 0.005;          // tau_fast_decay
        agc_wdsp.pop_ratio = 5.0;                 // pop_ratio
        //hang_enable = 1;                // hang_enable
        agc_wdsp.tau_hang_backmult = 0.500;       // tau_hang_backmult
        agc_wdsp.initialised = true;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f884 33ec 	strb.w	r3, [r4, #1004]	; 0x3ec
    }

	agc_wdsp.var_gain = pow10f((float32_t)agc_wdsp_conf.slope / 20.0 / 10.0); // 10^(slope / 200)
 8003ce6:	4e1c      	ldr	r6, [pc, #112]	; (8003d58 <AudioAgc_SetupAgcWdsp+0x130>)
 8003ce8:	7870      	ldrb	r0, [r6, #1]
 8003cea:	f7fd f833 	bl	8000d54 <__aeabi_ui2f>
 8003cee:	f7fc fbfb 	bl	80004e8 <__aeabi_f2d>
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <AudioAgc_SetupAgcWdsp+0x134>)
 8003cf6:	f7fc fd79 	bl	80007ec <__aeabi_ddiv>
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <AudioAgc_SetupAgcWdsp+0x138>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f7fc fd75 	bl	80007ec <__aeabi_ddiv>
 8003d02:	f7fc ff21 	bl	8000b48 <__aeabi_d2f>
 8003d06:	f004 f9cf 	bl	80080a8 <pow10f>
 8003d0a:	6220      	str	r0, [r4, #32]
    agc_wdsp.hangtime = (float32_t)agc_wdsp_conf.hang_time / 1000.0;
 8003d0c:	68f0      	ldr	r0, [r6, #12]
 8003d0e:	f7fd f825 	bl	8000d5c <__aeabi_i2f>
 8003d12:	490c      	ldr	r1, [pc, #48]	; (8003d44 <AudioAgc_SetupAgcWdsp+0x11c>)
 8003d14:	f7fd f92a 	bl	8000f6c <__aeabi_fdiv>

    //calculate internal parameters
    if(agc_wdsp_conf.switch_mode)
 8003d18:	7c73      	ldrb	r3, [r6, #17]
    agc_wdsp.hangtime = (float32_t)agc_wdsp_conf.hang_time / 1000.0;
 8003d1a:	6420      	str	r0, [r4, #64]	; 0x40
    if(agc_wdsp_conf.switch_mode)
 8003d1c:	b33b      	cbz	r3, 8003d6e <AudioAgc_SetupAgcWdsp+0x146>
    {
        switch (agc_wdsp_conf.mode)
 8003d1e:	7833      	ldrb	r3, [r6, #0]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d822      	bhi.n	8003d6a <AudioAgc_SetupAgcWdsp+0x142>
 8003d24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003d28:	001e01f5 	.word	0x001e01f5
 8003d2c:	01ef01ed 	.word	0x01ef01ed
 8003d30:	01f2      	.short	0x01f2
 8003d32:	bf00      	nop
 8003d34:	200007c4 	.word	0x200007c4
 8003d38:	3a83126f 	.word	0x3a83126f
 8003d3c:	461c4000 	.word	0x461c4000
 8003d40:	3dcccccd 	.word	0x3dcccccd
 8003d44:	447a0000 	.word	0x447a0000
 8003d48:	3ba3d70a 	.word	0x3ba3d70a
 8003d4c:	40a00000 	.word	0x40a00000
 8003d50:	20000a30 	.word	0x20000a30
 8003d54:	45960000 	.word	0x45960000
 8003d58:	20000bb4 	.word	0x20000bb4
 8003d5c:	40340000 	.word	0x40340000
 8003d60:	40240000 	.word	0x40240000
        {
        case 5: //agcOFF
            break;
        case 1: //agcLONG
            agc_wdsp.hangtime = 2.000;
 8003d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d68:	6423      	str	r3, [r4, #64]	; 0x40
            agc_wdsp.tau_fast_backaverage = 0.250; // time constant exponential averager
            break;
        default:
            break;
        }
        agc_wdsp_conf.switch_mode = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	7473      	strb	r3, [r6, #17]
    }

    agc_wdsp.tau_hang_decay = (float32_t)agc_wdsp_conf.tau_hang_decay / 1000.0;
 8003d6e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003d70:	f7fc fff4 	bl	8000d5c <__aeabi_i2f>
 8003d74:	49ce      	ldr	r1, [pc, #824]	; (80040b0 <AudioAgc_SetupAgcWdsp+0x488>)
 8003d76:	f7fd f8f9 	bl	8000f6c <__aeabi_fdiv>
    agc_wdsp.tau_decay = (float32_t)agc_wdsp_conf.tau_decay[agc_wdsp_conf.mode] / 1000.0;
 8003d7a:	7833      	ldrb	r3, [r6, #0]
    agc_wdsp.tau_hang_decay = (float32_t)agc_wdsp_conf.tau_hang_decay / 1000.0;
 8003d7c:	64a0      	str	r0, [r4, #72]	; 0x48
    agc_wdsp.tau_decay = (float32_t)agc_wdsp_conf.tau_decay[agc_wdsp_conf.mode] / 1000.0;
 8003d7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003d82:	6958      	ldr	r0, [r3, #20]
 8003d84:	f7fc ffea 	bl	8000d5c <__aeabi_i2f>
 8003d88:	49c9      	ldr	r1, [pc, #804]	; (80040b0 <AudioAgc_SetupAgcWdsp+0x488>)
 8003d8a:	f7fd f8ef 	bl	8000f6c <__aeabi_fdiv>
 8003d8e:	6160      	str	r0, [r4, #20]
    agc_wdsp.max_gain = pow10f ((float32_t)agc_wdsp_conf.thresh / 20.0);
 8003d90:	6870      	ldr	r0, [r6, #4]
 8003d92:	f7fc ffe3 	bl	8000d5c <__aeabi_i2f>
 8003d96:	49c7      	ldr	r1, [pc, #796]	; (80040b4 <AudioAgc_SetupAgcWdsp+0x48c>)
 8003d98:	f7fd f8e8 	bl	8000f6c <__aeabi_fdiv>
 8003d9c:	f004 f984 	bl	80080a8 <pow10f>
    agc_wdsp.fixed_gain = agc_wdsp.max_gain / 10.0;
 8003da0:	49c5      	ldr	r1, [pc, #788]	; (80040b8 <AudioAgc_SetupAgcWdsp+0x490>)
    agc_wdsp.max_gain = pow10f ((float32_t)agc_wdsp_conf.thresh / 20.0);
 8003da2:	61e0      	str	r0, [r4, #28]
    agc_wdsp.fixed_gain = agc_wdsp.max_gain / 10.0;
 8003da4:	f7fd f8e2 	bl	8000f6c <__aeabi_fdiv>
    // attack_buff_size is 48 for sample rate == 12000 and
    // 96 for sample rate == 24000
    // 192 for sample rate == 48000
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);
 8003da8:	f8d4 8010 	ldr.w	r8, [r4, #16]
    agc_wdsp.fixed_gain = agc_wdsp.max_gain / 10.0;
 8003dac:	6260      	str	r0, [r4, #36]	; 0x24
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);
 8003dae:	69a0      	ldr	r0, [r4, #24]
 8003db0:	f7fc ffd4 	bl	8000d5c <__aeabi_i2f>
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fd f825 	bl	8000e04 <__aeabi_fmul>
 8003dba:	4641      	mov	r1, r8
 8003dbc:	f7fd f822 	bl	8000e04 <__aeabi_fmul>
 8003dc0:	f004 f932 	bl	8008028 <ceilf>
 8003dc4:	f7fd f9fa 	bl	80011bc <__aeabi_f2iz>

    agc_wdsp.in_index = agc_wdsp.attack_buffsize + agc_wdsp.out_index; // attack_buffsize + out_index can be more than 2x ring_bufsize !!!
 8003dc8:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);
 8003dcc:	f8c4 03a0 	str.w	r0, [r4, #928]	; 0x3a0
    agc_wdsp.in_index = agc_wdsp.attack_buffsize + agc_wdsp.out_index; // attack_buffsize + out_index can be more than 2x ring_bufsize !!!
 8003dd0:	4418      	add	r0, r3
    agc_wdsp.in_index %= agc_wdsp.ring_buffsize; // need to keep this within the index boundaries
 8003dd2:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c

    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8003dd6:	4629      	mov	r1, r5
    agc_wdsp.in_index %= agc_wdsp.ring_buffsize; // need to keep this within the index boundaries
 8003dd8:	fbb0 f2f3 	udiv	r2, r0, r3
 8003ddc:	fb03 0012 	mls	r0, r3, r2, r0
 8003de0:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8003de4:	4640      	mov	r0, r8
 8003de6:	f7fd f80d 	bl	8000e04 <__aeabi_fmul>
 8003dea:	4601      	mov	r1, r0
 8003dec:	48b3      	ldr	r0, [pc, #716]	; (80040bc <AudioAgc_SetupAgcWdsp+0x494>)
 8003dee:	f7fd f8bd 	bl	8000f6c <__aeabi_fdiv>
 8003df2:	f004 f95f 	bl	80080b4 <expf>
 8003df6:	4601      	mov	r1, r0
 8003df8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003dfc:	f7fc fef8 	bl	8000bf0 <__aeabi_fsub>
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8003e00:	6961      	ldr	r1, [r4, #20]
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8003e02:	f8c4 03a8 	str.w	r0, [r4, #936]	; 0x3a8
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8003e06:	4628      	mov	r0, r5
 8003e08:	f7fc fffc 	bl	8000e04 <__aeabi_fmul>
 8003e0c:	4601      	mov	r1, r0
 8003e0e:	48ab      	ldr	r0, [pc, #684]	; (80040bc <AudioAgc_SetupAgcWdsp+0x494>)
 8003e10:	f7fd f8ac 	bl	8000f6c <__aeabi_fdiv>
 8003e14:	f004 f94e 	bl	80080b4 <expf>
 8003e18:	4601      	mov	r1, r0
 8003e1a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e1e:	f7fc fee7 	bl	8000bf0 <__aeabi_fsub>
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8003e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8003e24:	f8c4 03ac 	str.w	r0, [r4, #940]	; 0x3ac
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f7fc ffeb 	bl	8000e04 <__aeabi_fmul>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	48a2      	ldr	r0, [pc, #648]	; (80040bc <AudioAgc_SetupAgcWdsp+0x494>)
 8003e32:	f7fd f89b 	bl	8000f6c <__aeabi_fdiv>
 8003e36:	f004 f93d 	bl	80080b4 <expf>
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e40:	f7fc fed6 	bl	8000bf0 <__aeabi_fsub>
    agc_wdsp.fast_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_backaverage));
 8003e44:	6b21      	ldr	r1, [r4, #48]	; 0x30
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8003e46:	f8c4 03b0 	str.w	r0, [r4, #944]	; 0x3b0
    agc_wdsp.fast_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_backaverage));
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f7fc ffda 	bl	8000e04 <__aeabi_fmul>
 8003e50:	4601      	mov	r1, r0
 8003e52:	489a      	ldr	r0, [pc, #616]	; (80040bc <AudioAgc_SetupAgcWdsp+0x494>)
 8003e54:	f7fd f88a 	bl	8000f6c <__aeabi_fdiv>
 8003e58:	f004 f92c 	bl	80080b4 <expf>
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e62:	f7fc fec5 	bl	8000bf0 <__aeabi_fsub>
 8003e66:	4601      	mov	r1, r0
 8003e68:	f8c4 03b4 	str.w	r0, [r4, #948]	; 0x3b4
    agc_wdsp.onemfast_backmult = 1.0 - agc_wdsp.fast_backmult;
 8003e6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e70:	f7fc febe 	bl	8000bf0 <__aeabi_fsub>
 8003e74:	f8c4 03b8 	str.w	r0, [r4, #952]	; 0x3b8

    agc_wdsp.out_target = agc_wdsp.out_targ * (1.0 - expf(-(float32_t)agc_wdsp.n_tau)) * 0.9999;
 8003e78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003e7a:	f7fc fb35 	bl	80004e8 <__aeabi_f2d>
 8003e7e:	4680      	mov	r8, r0
 8003e80:	69a0      	ldr	r0, [r4, #24]
 8003e82:	4689      	mov	r9, r1
 8003e84:	f7fc ff6a 	bl	8000d5c <__aeabi_i2f>
 8003e88:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003e8c:	f004 f912 	bl	80080b4 <expf>
 8003e90:	f7fc fb2a 	bl	80004e8 <__aeabi_f2d>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4989      	ldr	r1, [pc, #548]	; (80040c0 <AudioAgc_SetupAgcWdsp+0x498>)
 8003e9c:	f7fc f9c4 	bl	8000228 <__aeabi_dsub>
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	f7fc fb78 	bl	8000598 <__aeabi_dmul>
 8003ea8:	a37b      	add	r3, pc, #492	; (adr r3, 8004098 <AudioAgc_SetupAgcWdsp+0x470>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc fb73 	bl	8000598 <__aeabi_dmul>
 8003eb2:	f7fc fe49 	bl	8000b48 <__aeabi_d2f>
    //  out_target = out_target * (1.0 - expf(-(float32_t)n_tau)) * 0.9999;
    agc_wdsp.min_volts = agc_wdsp.out_target / (agc_wdsp.var_gain * agc_wdsp.max_gain);
 8003eb6:	f8d4 a020 	ldr.w	sl, [r4, #32]
 8003eba:	f8d4 901c 	ldr.w	r9, [r4, #28]
    agc_wdsp.out_target = agc_wdsp.out_targ * (1.0 - expf(-(float32_t)agc_wdsp.n_tau)) * 0.9999;
 8003ebe:	4680      	mov	r8, r0
    agc_wdsp.min_volts = agc_wdsp.out_target / (agc_wdsp.var_gain * agc_wdsp.max_gain);
 8003ec0:	4649      	mov	r1, r9
    agc_wdsp.out_target = agc_wdsp.out_targ * (1.0 - expf(-(float32_t)agc_wdsp.n_tau)) * 0.9999;
 8003ec2:	f8c4 03bc 	str.w	r0, [r4, #956]	; 0x3bc
    agc_wdsp.min_volts = agc_wdsp.out_target / (agc_wdsp.var_gain * agc_wdsp.max_gain);
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	f7fc ff9c 	bl	8000e04 <__aeabi_fmul>
 8003ecc:	4601      	mov	r1, r0
 8003ece:	4640      	mov	r0, r8
 8003ed0:	f7fd f84c 	bl	8000f6c <__aeabi_fdiv>
    agc_wdsp.inv_out_target = 1.0 / agc_wdsp.out_target;
 8003ed4:	4641      	mov	r1, r8
    agc_wdsp.min_volts = agc_wdsp.out_target / (agc_wdsp.var_gain * agc_wdsp.max_gain);
 8003ed6:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
    agc_wdsp.inv_out_target = 1.0 / agc_wdsp.out_target;
 8003eda:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ede:	f7fd f845 	bl	8000f6c <__aeabi_fdiv>

    float32_t tmpA = log10f(agc_wdsp.out_target / (agc_wdsp.max_input * agc_wdsp.var_gain * agc_wdsp.max_gain));
 8003ee2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    agc_wdsp.inv_out_target = 1.0 / agc_wdsp.out_target;
 8003ee4:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
    float32_t tmpA = log10f(agc_wdsp.out_target / (agc_wdsp.max_input * agc_wdsp.var_gain * agc_wdsp.max_gain));
 8003ee8:	4650      	mov	r0, sl
 8003eea:	f7fc ff8b 	bl	8000e04 <__aeabi_fmul>
 8003eee:	4649      	mov	r1, r9
 8003ef0:	f7fc ff88 	bl	8000e04 <__aeabi_fmul>
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	f7fd f838 	bl	8000f6c <__aeabi_fdiv>
 8003efc:	f004 f900 	bl	8008100 <log10f>
    if (tmpA == 0.0)
 8003f00:	2100      	movs	r1, #0
    float32_t tmpA = log10f(agc_wdsp.out_target / (agc_wdsp.max_input * agc_wdsp.var_gain * agc_wdsp.max_gain));
 8003f02:	4682      	mov	sl, r0
    if (tmpA == 0.0)
 8003f04:	f7fd f912 	bl	800112c <__aeabi_fcmpeq>
 8003f08:	b108      	cbz	r0, 8003f0e <AudioAgc_SetupAgcWdsp+0x2e6>
    {
        tmpA = 1e-16;
 8003f0a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80040c4 <AudioAgc_SetupAgcWdsp+0x49c>
    }
    agc_wdsp.slope_constant = (agc_wdsp.out_target * (1.0 - 1.0 / agc_wdsp.var_gain)) / tmpA;
 8003f0e:	6a20      	ldr	r0, [r4, #32]
 8003f10:	f7fc faea 	bl	80004e8 <__aeabi_f2d>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	2000      	movs	r0, #0
 8003f1a:	4969      	ldr	r1, [pc, #420]	; (80040c0 <AudioAgc_SetupAgcWdsp+0x498>)
 8003f1c:	f7fc fc66 	bl	80007ec <__aeabi_ddiv>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	2000      	movs	r0, #0
 8003f26:	4966      	ldr	r1, [pc, #408]	; (80040c0 <AudioAgc_SetupAgcWdsp+0x498>)
 8003f28:	f7fc f97e 	bl	8000228 <__aeabi_dsub>
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	f8d4 03bc 	ldr.w	r0, [r4, #956]	; 0x3bc
 8003f32:	4689      	mov	r9, r1
 8003f34:	f7fc fad8 	bl	80004e8 <__aeabi_f2d>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4649      	mov	r1, r9
 8003f40:	f7fc fb2a 	bl	8000598 <__aeabi_dmul>
 8003f44:	4680      	mov	r8, r0
 8003f46:	4650      	mov	r0, sl
 8003f48:	4689      	mov	r9, r1
 8003f4a:	f7fc facd 	bl	80004e8 <__aeabi_f2d>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4640      	mov	r0, r8
 8003f54:	4649      	mov	r1, r9
 8003f56:	f7fc fc49 	bl	80007ec <__aeabi_ddiv>
 8003f5a:	f7fc fdf5 	bl	8000b48 <__aeabi_d2f>

    agc_wdsp.inv_max_input = 1.0 / agc_wdsp.max_input;
 8003f5e:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
    agc_wdsp.slope_constant = (agc_wdsp.out_target * (1.0 - 1.0 / agc_wdsp.var_gain)) / tmpA;
 8003f62:	f8c4 03cc 	str.w	r0, [r4, #972]	; 0x3cc
    agc_wdsp.inv_max_input = 1.0 / agc_wdsp.max_input;
 8003f66:	4641      	mov	r1, r8
 8003f68:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f6c:	f7fc fffe 	bl	8000f6c <__aeabi_fdiv>

    if (agc_wdsp.max_input > agc_wdsp.min_volts)
 8003f70:	f8d4 13c0 	ldr.w	r1, [r4, #960]	; 0x3c0
    agc_wdsp.inv_max_input = 1.0 / agc_wdsp.max_input;
 8003f74:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
    if (agc_wdsp.max_input > agc_wdsp.min_volts)
 8003f78:	4640      	mov	r0, r8
 8003f7a:	f7fd f8ff 	bl	800117c <__aeabi_fcmpgt>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	f000 80d0 	beq.w	8004124 <AudioAgc_SetupAgcWdsp+0x4fc>
    {
        float32_t convert
        = pow10f ((float32_t)agc_wdsp_conf.hang_thresh / 20.0);
 8003f84:	68b0      	ldr	r0, [r6, #8]
 8003f86:	f7fc fee9 	bl	8000d5c <__aeabi_i2f>
 8003f8a:	494a      	ldr	r1, [pc, #296]	; (80040b4 <AudioAgc_SetupAgcWdsp+0x48c>)
 8003f8c:	f7fc ffee 	bl	8000f6c <__aeabi_fdiv>
 8003f90:	f004 f88a 	bl	80080a8 <pow10f>
        float32_t tmpB = (convert - agc_wdsp.min_volts) / (agc_wdsp.max_input - agc_wdsp.min_volts);
 8003f94:	f8d4 73c0 	ldr.w	r7, [r4, #960]	; 0x3c0
 8003f98:	4639      	mov	r1, r7
 8003f9a:	f7fc fe29 	bl	8000bf0 <__aeabi_fsub>
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003fa4:	f7fc fe24 	bl	8000bf0 <__aeabi_fsub>
 8003fa8:	4601      	mov	r1, r0
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7fc ffde 	bl	8000f6c <__aeabi_fdiv>
 8003fb0:	4606      	mov	r6, r0
        if(tmpB < 1e-8)
 8003fb2:	f7fc fa99 	bl	80004e8 <__aeabi_f2d>
 8003fb6:	a33a      	add	r3, pc, #232	; (adr r3, 80040a0 <AudioAgc_SetupAgcWdsp+0x478>)
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f7fc fd5e 	bl	8000a7c <__aeabi_dcmplt>
 8003fc0:	b100      	cbz	r0, 8003fc4 <AudioAgc_SetupAgcWdsp+0x39c>
        {
            tmpB = 1e-8;
 8003fc2:	4e41      	ldr	r6, [pc, #260]	; (80040c8 <AudioAgc_SetupAgcWdsp+0x4a0>)
        }
        agc_wdsp.hang_thresh = 1.0 + 0.125 * log10f (tmpB);
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f004 f89b 	bl	8008100 <log10f>
 8003fca:	f7fc fa8d 	bl	80004e8 <__aeabi_f2d>
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003fd4:	f7fc fae0 	bl	8000598 <__aeabi_dmul>
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <AudioAgc_SetupAgcWdsp+0x498>)
 8003fdc:	f7fc f926 	bl	800022c <__adddf3>
 8003fe0:	f7fc fdb2 	bl	8000b48 <__aeabi_d2f>
 8003fe4:	6460      	str	r0, [r4, #68]	; 0x44
    else
    {
        agc_wdsp.hang_thresh = 1.0;
    }

    float32_t tmpC = pow10f ((agc_wdsp.hang_thresh - 1.0) / 0.125);
 8003fe6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003fe8:	f7fc fa7e 	bl	80004e8 <__aeabi_f2d>
 8003fec:	2200      	movs	r2, #0
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <AudioAgc_SetupAgcWdsp+0x498>)
 8003ff0:	f7fc f91a 	bl	8000228 <__aeabi_dsub>
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4b35      	ldr	r3, [pc, #212]	; (80040cc <AudioAgc_SetupAgcWdsp+0x4a4>)
 8003ff8:	f7fc face 	bl	8000598 <__aeabi_dmul>
 8003ffc:	f7fc fda4 	bl	8000b48 <__aeabi_d2f>
 8004000:	f004 f852 	bl	80080a8 <pow10f>
    agc_wdsp.hang_level = (agc_wdsp.max_input * tmpC + (agc_wdsp.out_target /
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 8004004:	69e1      	ldr	r1, [r4, #28]
    float32_t tmpC = pow10f ((agc_wdsp.hang_thresh - 1.0) / 0.125);
 8004006:	4606      	mov	r6, r0
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 8004008:	6a20      	ldr	r0, [r4, #32]
 800400a:	f7fc fefb 	bl	8000e04 <__aeabi_fmul>
 800400e:	4601      	mov	r1, r0
    agc_wdsp.hang_level = (agc_wdsp.max_input * tmpC + (agc_wdsp.out_target /
 8004010:	f8d4 03bc 	ldr.w	r0, [r4, #956]	; 0x3bc
 8004014:	f7fc ffaa 	bl	8000f6c <__aeabi_fdiv>
 8004018:	f7fc fa66 	bl	80004e8 <__aeabi_f2d>
 800401c:	4680      	mov	r8, r0
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 800401e:	4630      	mov	r0, r6
    agc_wdsp.hang_level = (agc_wdsp.max_input * tmpC + (agc_wdsp.out_target /
 8004020:	4689      	mov	r9, r1
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 8004022:	f7fc fa61 	bl	80004e8 <__aeabi_f2d>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	2000      	movs	r0, #0
 800402c:	4924      	ldr	r1, [pc, #144]	; (80040c0 <AudioAgc_SetupAgcWdsp+0x498>)
 800402e:	f7fc f8fb 	bl	8000228 <__aeabi_dsub>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4640      	mov	r0, r8
 8004038:	4649      	mov	r1, r9
 800403a:	f7fc faad 	bl	8000598 <__aeabi_dmul>
 800403e:	4680      	mov	r8, r0
 8004040:	4689      	mov	r9, r1
    agc_wdsp.hang_level = (agc_wdsp.max_input * tmpC + (agc_wdsp.out_target /
 8004042:	4630      	mov	r0, r6
 8004044:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004046:	f7fc fedd 	bl	8000e04 <__aeabi_fmul>
 800404a:	f7fc fa4d 	bl	80004e8 <__aeabi_f2d>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4640      	mov	r0, r8
 8004054:	4649      	mov	r1, r9
 8004056:	f7fc f8e9 	bl	800022c <__adddf3>
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 800405a:	a313      	add	r3, pc, #76	; (adr r3, 80040a8 <AudioAgc_SetupAgcWdsp+0x480>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc fa9a 	bl	8000598 <__aeabi_dmul>
 8004064:	f7fc fd70 	bl	8000b48 <__aeabi_d2f>

    agc_wdsp.hang_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_backmult));
 8004068:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 800406a:	f8c4 03d4 	str.w	r0, [r4, #980]	; 0x3d4
    agc_wdsp.hang_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_backmult));
 800406e:	4628      	mov	r0, r5
 8004070:	f7fc fec8 	bl	8000e04 <__aeabi_fmul>
 8004074:	4601      	mov	r1, r0
 8004076:	4811      	ldr	r0, [pc, #68]	; (80040bc <AudioAgc_SetupAgcWdsp+0x494>)
 8004078:	f7fc ff78 	bl	8000f6c <__aeabi_fdiv>
 800407c:	f004 f81a 	bl	80080b4 <expf>
 8004080:	4601      	mov	r1, r0
 8004082:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004086:	f7fc fdb3 	bl	8000bf0 <__aeabi_fsub>
 800408a:	4601      	mov	r1, r0
 800408c:	f8c4 03d8 	str.w	r0, [r4, #984]	; 0x3d8
 8004090:	e01e      	b.n	80040d0 <AudioAgc_SetupAgcWdsp+0x4a8>
 8004092:	bf00      	nop
 8004094:	f3af 8000 	nop.w
 8004098:	48e8a71e 	.word	0x48e8a71e
 800409c:	3fefff2e 	.word	0x3fefff2e
 80040a0:	e2308c3a 	.word	0xe2308c3a
 80040a4:	3e45798e 	.word	0x3e45798e
 80040a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80040ac:	3fe4624d 	.word	0x3fe4624d
 80040b0:	447a0000 	.word	0x447a0000
 80040b4:	41a00000 	.word	0x41a00000
 80040b8:	41200000 	.word	0x41200000
 80040bc:	bf800000 	.word	0xbf800000
 80040c0:	3ff00000 	.word	0x3ff00000
 80040c4:	24e69595 	.word	0x24e69595
 80040c8:	322bcc77 	.word	0x322bcc77
 80040cc:	40200000 	.word	0x40200000
    agc_wdsp.onemhang_backmult = 1.0 - agc_wdsp.hang_backmult;
 80040d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040d4:	f7fc fd8c 	bl	8000bf0 <__aeabi_fsub>

    agc_wdsp.hang_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_decay));
 80040d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    agc_wdsp.onemhang_backmult = 1.0 - agc_wdsp.hang_backmult;
 80040da:	f8c4 03dc 	str.w	r0, [r4, #988]	; 0x3dc
    agc_wdsp.hang_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_decay));
 80040de:	4628      	mov	r0, r5
 80040e0:	f7fc fe90 	bl	8000e04 <__aeabi_fmul>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4810      	ldr	r0, [pc, #64]	; (8004128 <AudioAgc_SetupAgcWdsp+0x500>)
 80040e8:	f7fc ff40 	bl	8000f6c <__aeabi_fdiv>
 80040ec:	f003 ffe2 	bl	80080b4 <expf>
 80040f0:	4601      	mov	r1, r0
 80040f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040f6:	f7fc fd7b 	bl	8000bf0 <__aeabi_fsub>
 80040fa:	f8c4 03e0 	str.w	r0, [r4, #992]	; 0x3e0
}
 80040fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            agc_wdsp.hangtime = 1.000;
 8004102:	6427      	str	r7, [r4, #64]	; 0x40
            break;
 8004104:	e631      	b.n	8003d6a <AudioAgc_SetupAgcWdsp+0x142>
            agc_wdsp.hangtime = 0.250;
 8004106:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
            break;
 800410a:	e62e      	b.n	8003d6a <AudioAgc_SetupAgcWdsp+0x142>
            agc_wdsp.hangtime = 0.100;
 800410c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
            break;
 8004110:	e62b      	b.n	8003d6a <AudioAgc_SetupAgcWdsp+0x142>
            agc_wdsp.hangtime = 3.000; // hang time, if enabled
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <AudioAgc_SetupAgcWdsp+0x504>)
            agc_wdsp.tau_hang_backmult = 0.500; // time constant exponential averager
 8004114:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
            agc_wdsp.hangtime = 3.000; // hang time, if enabled
 8004118:	6423      	str	r3, [r4, #64]	; 0x40
            agc_wdsp.tau_fast_decay = 0.05;          // tau_fast_decay
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <AudioAgc_SetupAgcWdsp+0x508>)
            agc_wdsp.tau_fast_backaverage = 0.250; // time constant exponential averager
 800411c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
            agc_wdsp.tau_fast_decay = 0.05;          // tau_fast_decay
 8004120:	6363      	str	r3, [r4, #52]	; 0x34
            break;
 8004122:	e622      	b.n	8003d6a <AudioAgc_SetupAgcWdsp+0x142>
        agc_wdsp.hang_thresh = 1.0;
 8004124:	6467      	str	r7, [r4, #68]	; 0x44
 8004126:	e75e      	b.n	8003fe6 <AudioAgc_SetupAgcWdsp+0x3be>
 8004128:	bf800000 	.word	0xbf800000
 800412c:	40400000 	.word	0x40400000
 8004130:	3d4ccccd 	.word	0x3d4ccccd

08004134 <dspInit>:
	//arm_rfft_fast_init_f32(&fftR, FFT_LEN);
}
*/

int outStarted = 0;
void dspInit(void){
 8004134:	b537      	push	{r0, r1, r2, r4, r5, lr}
	outStarted = 0;
	arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
 8004136:	2580      	movs	r5, #128	; 0x80
	outStarted = 0;
 8004138:	2200      	movs	r2, #0
	arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
 800413a:	4c09      	ldr	r4, [pc, #36]	; (8004160 <dspInit+0x2c>)
	outStarted = 0;
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <dspInit+0x30>)
	arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
 800413e:	2120      	movs	r1, #32
	outStarted = 0;
 8004140:	601a      	str	r2, [r3, #0]
	arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
 8004142:	4809      	ldr	r0, [pc, #36]	; (8004168 <dspInit+0x34>)
 8004144:	4622      	mov	r2, r4
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <dspInit+0x38>)
 8004148:	9500      	str	r5, [sp, #0]
 800414a:	f001 f851 	bl	80051f0 <arm_fir_init_q31>
	arm_fir_init_q31(&S2, NUM_TAPS, firCoeffs32, firState2, DSP_BLOCK_SIZE);
 800414e:	4622      	mov	r2, r4
 8004150:	2120      	movs	r1, #32
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <dspInit+0x3c>)
 8004154:	4807      	ldr	r0, [pc, #28]	; (8004174 <dspInit+0x40>)
 8004156:	9500      	str	r5, [sp, #0]
 8004158:	f001 f84a 	bl	80051f0 <arm_fir_init_q31>

	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
}
 800415c:	b003      	add	sp, #12
 800415e:	bd30      	pop	{r4, r5, pc}
 8004160:	08009660 	.word	0x08009660
 8004164:	20001d10 	.word	0x20001d10
 8004168:	20000bf8 	.word	0x20000bf8
 800416c:	20001218 	.word	0x20001218
 8004170:	20001494 	.word	0x20001494
 8004174:	20000c04 	.word	0x20000c04

08004178 <dspStart>:

void dspStart(void){
 8004178:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 800417a:	4c0b      	ldr	r4, [pc, #44]	; (80041a8 <dspStart+0x30>)
 800417c:	4620      	mov	r0, r4
 800417e:	f7fe fd85 	bl	8002c8c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004182:	2104      	movs	r1, #4
 8004184:	4620      	mov	r0, r4
 8004186:	f7ff f8b5 	bl	80032f4 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inBuf, ADC_BUFFER_LEN);
 800418a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800418e:	4907      	ldr	r1, [pc, #28]	; (80041ac <dspStart+0x34>)
 8004190:	4807      	ldr	r0, [pc, #28]	; (80041b0 <dspStart+0x38>)
 8004192:	f7fd fd3d 	bl	8001c10 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/2);
 8004196:	4620      	mov	r0, r4
}
 8004198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/2);
 800419c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a0:	2108      	movs	r1, #8
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <dspStart+0x3c>)
 80041a4:	f7ff b970 	b.w	8003488 <HAL_TIM_PWM_Start_DMA>
 80041a8:	20000310 	.word	0x20000310
 80041ac:	20001710 	.word	0x20001710
 80041b0:	20000200 	.word	0x20000200
 80041b4:	20001b10 	.word	0x20001b10

080041b8 <dspPrepareInput>:
//float debugInputF[ADC_BUFFER_LEN] = {555.0f};


void dspPrepareInput(void){
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,dspRingHalf);
	adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <dspPrepareInput+0x48>)
void dspPrepareInput(void){
 80041ba:	b510      	push	{r4, lr}
	adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4c11      	ldr	r4, [pc, #68]	; (8004204 <dspPrepareInput+0x4c>)
 80041c0:	f083 0201 	eor.w	r2, r3, #1
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <dspPrepareInput+0x50>)
 80041c6:	0211      	lsls	r1, r2, #8
 80041c8:	6019      	str	r1, [r3, #0]

	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80041ca:	2100      	movs	r1, #0
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <dspPrepareInput+0x54>)
 80041ce:	4810      	ldr	r0, [pc, #64]	; (8004210 <dspPrepareInput+0x58>)
 80041d0:	eb03 2342 	add.w	r3, r3, r2, lsl #9
	return ((input - ADC_HALF) << 20);
 80041d4:	f9b3 2000 	ldrsh.w	r2, [r3]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80041d8:	3101      	adds	r1, #1
	return ((input - ADC_HALF) << 20);
 80041da:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80041de:	0512      	lsls	r2, r2, #20
		//debugInput[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
		//debugInputF[i] = Q31float(adcToQ31(inBuf[i * 2 + adcBuffStart]));
		dspInI[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
 80041e0:	f844 2b04 	str.w	r2, [r4], #4
	return ((input - ADC_HALF) << 20);
 80041e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80041e8:	2980      	cmp	r1, #128	; 0x80
	return ((input - ADC_HALF) << 20);
 80041ea:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80041ee:	ea4f 5202 	mov.w	r2, r2, lsl #20
		dspInQ[i] = adcToQ31(inBuf[i * 2 + adcBuffStart + 1]);
 80041f2:	f840 2b04 	str.w	r2, [r0], #4
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80041f6:	f103 0304 	add.w	r3, r3, #4
 80041fa:	d1eb      	bne.n	80041d4 <dspPrepareInput+0x1c>
	}

	//done = 1;
}
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	bf00      	nop
 8004200:	20001215 	.word	0x20001215
 8004204:	20000c14 	.word	0x20000c14
 8004208:	20000c10 	.word	0x20000c10
 800420c:	20001710 	.word	0x20001710
 8004210:	20000e14 	.word	0x20000e14

08004214 <dspPrepareOutput>:

void dspPrepareOutput(void){
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,dspRingHalf);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, dspRingHalf);
	adcBuffStart = ADC_BUFFER_LEN/4 * (dspRingHalf == HALF_LOWER);
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <dspPrepareOutput+0x30>)
 8004216:	480c      	ldr	r0, [pc, #48]	; (8004248 <dspPrepareOutput+0x34>)
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	f082 0301 	eor.w	r3, r2, #1
 800421e:	4a0b      	ldr	r2, [pc, #44]	; (800424c <dspPrepareOutput+0x38>)
 8004220:	01d9      	lsls	r1, r3, #7
 8004222:	6011      	str	r1, [r2, #0]
	// если здесь /2, частота будет ниже

	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 8004224:	2100      	movs	r1, #0
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <dspPrepareOutput+0x3c>)
 8004228:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		outBuf[adcBuffStart + k] = 	q31toPwm(dspOut[k]);
 800422c:	f850 3b04 	ldr.w	r3, [r0], #4
	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 8004230:	3101      	adds	r1, #1
	return ((input >> 21) + PWM_HALF);
 8004232:	155b      	asrs	r3, r3, #21
 8004234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 8004238:	2980      	cmp	r1, #128	; 0x80
		outBuf[adcBuffStart + k] = 	q31toPwm(dspOut[k]);
 800423a:	f822 3b02 	strh.w	r3, [r2], #2
	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 800423e:	d1f5      	bne.n	800422c <dspPrepareOutput+0x18>
	}
}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20001215 	.word	0x20001215
 8004248:	20001014 	.word	0x20001014
 800424c:	20000c10 	.word	0x20000c10
 8004250:	20001b10 	.word	0x20001b10

08004254 <dspProc>:

#include <stdlib.h>

q31_t sinX = 0;
void dspProc(void){
 8004254:	b570      	push	{r4, r5, r6, lr}

	if (!dspProcDone){
 8004256:	4e17      	ldr	r6, [pc, #92]	; (80042b4 <dspProc+0x60>)
 8004258:	7833      	ldrb	r3, [r6, #0]
 800425a:	bb4b      	cbnz	r3, 80042b0 <dspProc+0x5c>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800425c:	2201      	movs	r2, #1
 800425e:	2110      	movs	r1, #16
 8004260:	4815      	ldr	r0, [pc, #84]	; (80042b8 <dspProc+0x64>)
 8004262:	f7fe f843 	bl	80022ec <HAL_GPIO_WritePin>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);

		//arm_scale_f32(blockIN, (1.0f/4096.0f), blockOUT, BUF_LEN/2);

		dspPrepareInput();
 8004266:	f7ff ffa7 	bl	80041b8 <dspPrepareInput>
			//arm_scale_q31(dspInI, floatQ31(2.0), 0, dspOut, BUF_LEN/2);
			//arm_copy_q31(dspInI, dspOut, DSP_BLOCK_SIZE);


			//arm_cfft_q31(&fftS, blockOUT, 0, 1);
			arm_fir_q31(&S1, dspInQ, dspOut, DSP_BLOCK_SIZE);
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <dspProc+0x68>)
 800426e:	4914      	ldr	r1, [pc, #80]	; (80042c0 <dspProc+0x6c>)
 8004270:	4814      	ldr	r0, [pc, #80]	; (80042c4 <dspProc+0x70>)
 8004272:	f000 fe6d 	bl	8004f50 <arm_fir_q31>
			arm_fir_q31(&S2, dspInI, dspOut, DSP_BLOCK_SIZE);
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	4a10      	ldr	r2, [pc, #64]	; (80042bc <dspProc+0x68>)
 800427a:	4913      	ldr	r1, [pc, #76]	; (80042c8 <dspProc+0x74>)
 800427c:	4813      	ldr	r0, [pc, #76]	; (80042cc <dspProc+0x78>)
 800427e:	f000 fe67 	bl	8004f50 <arm_fir_q31>

			//arm_fir_q31(&S1, dspInQ, dspOut, DSP_BLOCK_SIZE);
			//arm_fir_q31(&S2, dspInI, dspOut, DSP_BLOCK_SIZE);

			fftProcess(dspOut);
 8004282:	480e      	ldr	r0, [pc, #56]	; (80042bc <dspProc+0x68>)
 8004284:	f000 f856 	bl	8004334 <fftProcess>
 8004288:	2480      	movs	r4, #128	; 0x80
 800428a:	4d0c      	ldr	r5, [pc, #48]	; (80042bc <dspProc+0x68>)

			for (int z=0;z<DSP_BLOCK_SIZE; z++){
				q31_t in = dspOut[z];
				dspOut[z] = compProcessFloat(in);
 800428c:	6828      	ldr	r0, [r5, #0]
 800428e:	f7ff fbc7 	bl	8003a20 <compProcessFloat>
			for (int z=0;z<DSP_BLOCK_SIZE; z++){
 8004292:	3c01      	subs	r4, #1
				dspOut[z] = compProcessFloat(in);
 8004294:	f845 0b04 	str.w	r0, [r5], #4
			for (int z=0;z<DSP_BLOCK_SIZE; z++){
 8004298:	d1f8      	bne.n	800428c <dspProc+0x38>
*/


			//arm_q15_to_float(blockOUT, a, BUF_LEN/2);

		dspPrepareOutput();
 800429a:	f7ff ffbb 	bl	8004214 <dspPrepareOutput>
		dspProcDone = 1;
 800429e:	2301      	movs	r3, #1
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80042a0:	4622      	mov	r2, r4
		dspProcDone = 1;
 80042a2:	7033      	strb	r3, [r6, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80042a4:	2110      	movs	r1, #16
	}
}
 80042a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80042aa:	4803      	ldr	r0, [pc, #12]	; (80042b8 <dspProc+0x64>)
 80042ac:	f7fe b81e 	b.w	80022ec <HAL_GPIO_WritePin>
}
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
 80042b2:	bf00      	nop
 80042b4:	20001214 	.word	0x20001214
 80042b8:	40010c00 	.word	0x40010c00
 80042bc:	20001014 	.word	0x20001014
 80042c0:	20000e14 	.word	0x20000e14
 80042c4:	20000bf8 	.word	0x20000bf8
 80042c8:	20000c14 	.word	0x20000c14
 80042cc:	20000c04 	.word	0x20000c04

080042d0 <HAL_ADC_ConvHalfCpltCallback>:
 80042d0:	4770      	bx	lr

080042d2 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){



}
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);


	dspRingHalf = HALF_UPPER;
 80042d4:	2201      	movs	r2, #1
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){
 80042d6:	b510      	push	{r4, lr}
	dspProcDone = 0;
 80042d8:	2400      	movs	r4, #0
	dspRingHalf = HALF_UPPER;
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 80042dc:	2108      	movs	r1, #8
	dspRingHalf = HALF_UPPER;
 80042de:	701a      	strb	r2, [r3, #0]
	dspProcDone = 0;
 80042e0:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 80042e2:	4806      	ldr	r0, [pc, #24]	; (80042fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
	dspProcDone = 0;
 80042e4:	7014      	strb	r4, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	f7fe f800 	bl	80022ec <HAL_GPIO_WritePin>
	elseDone = 0;
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x2c>)
 80042ee:	701c      	strb	r4, [r3, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

};
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	bf00      	nop
 80042f4:	20001215 	.word	0x20001215
 80042f8:	20001214 	.word	0x20001214
 80042fc:	40010c00 	.word	0x40010c00
 8004300:	200001fc 	.word	0x200001fc

08004304 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim1){
 8004304:	b510      	push	{r4, lr}


	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

		dspRingHalf = HALF_LOWER;
 8004306:	2400      	movs	r4, #0
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
		dspProcDone = 0;
 800430a:	4a06      	ldr	r2, [pc, #24]	; (8004324 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
		dspRingHalf = HALF_LOWER;
 800430c:	701c      	strb	r4, [r3, #0]
		dspProcDone = 0;
 800430e:	7014      	strb	r4, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	2108      	movs	r1, #8
 8004314:	4804      	ldr	r0, [pc, #16]	; (8004328 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8004316:	f7fd ffe9 	bl	80022ec <HAL_GPIO_WritePin>
		elseDone = 0;
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800431c:	701c      	strb	r4, [r3, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

}
 800431e:	bd10      	pop	{r4, pc}
 8004320:	20001215 	.word	0x20001215
 8004324:	20001214 	.word	0x20001214
 8004328:	40010c00 	.word	0x40010c00
 800432c:	200001fc 	.word	0x200001fc

08004330 <fftInit>:

arm_cfft_instance_q31 fftS;

void fftInit(void) {
	//arm_cfft_radix4_init_q31(&fftS, FFT_LEN, 0, 1);
}
 8004330:	4770      	bx	lr
	...

08004334 <fftProcess>:

q31_t fftBuf[FFT_LEN*2];
q31_t magnitudes[FFT_LEN/2];

void fftProcess(q31_t *inputF32) {
 8004334:	b537      	push	{r0, r1, r2, r4, r5, lr}
	//arm_cfft_radix4_q31(&fftS, inputF32);

	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 8004336:	4c0e      	ldr	r4, [pc, #56]	; (8004370 <fftProcess+0x3c>)
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 8004338:	4d0e      	ldr	r5, [pc, #56]	; (8004374 <fftProcess+0x40>)
	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 800433a:	4621      	mov	r1, r4
 800433c:	2280      	movs	r2, #128	; 0x80
 800433e:	f000 f81f 	bl	8004380 <arm_copy_q31>
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
 8004342:	2301      	movs	r3, #1
 8004344:	4621      	mov	r1, r4
 8004346:	2200      	movs	r2, #0
 8004348:	480b      	ldr	r0, [pc, #44]	; (8004378 <fftProcess+0x44>)
 800434a:	f000 f993 	bl	8004674 <arm_cfft_q31>
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 800434e:	4629      	mov	r1, r5
 8004350:	4620      	mov	r0, r4
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	f000 ff5e 	bl	8005214 <arm_cmplx_mag_q31>

	arm_scale_q31(magnitudes, 2126008812, -24, magnitudes, FFT_LEN/2);
 8004358:	2340      	movs	r3, #64	; 0x40
 800435a:	f06f 0217 	mvn.w	r2, #23
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	4628      	mov	r0, r5
 8004362:	462b      	mov	r3, r5
 8004364:	4905      	ldr	r1, [pc, #20]	; (800437c <fftProcess+0x48>)
 8004366:	f001 f84b 	bl	8005400 <arm_scale_q31>



	//arm_max_f32(fftMagnitudesdB, FFT_LEN, &maxValue, &maxIndex);
}
 800436a:	b003      	add	sp, #12
 800436c:	bd30      	pop	{r4, r5, pc}
 800436e:	bf00      	nop
 8004370:	20001d14 	.word	0x20001d14
 8004374:	20002124 	.word	0x20002124
 8004378:	20002114 	.word	0x20002114
 800437c:	7eb851ec 	.word	0x7eb851ec

08004380 <arm_copy_q31>:
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004388:	4696      	mov	lr, r2
 800438a:	468c      	mov	ip, r1
 800438c:	d01e      	beq.n	80043cc <arm_copy_q31+0x4c>
 800438e:	4645      	mov	r5, r8
 8004390:	f100 0410 	add.w	r4, r0, #16
 8004394:	f101 0310 	add.w	r3, r1, #16
 8004398:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800439c:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80043a0:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80043a4:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80043a8:	3d01      	subs	r5, #1
 80043aa:	f843 1c10 	str.w	r1, [r3, #-16]
 80043ae:	f843 2c0c 	str.w	r2, [r3, #-12]
 80043b2:	f843 7c08 	str.w	r7, [r3, #-8]
 80043b6:	f843 6c04 	str.w	r6, [r3, #-4]
 80043ba:	f104 0410 	add.w	r4, r4, #16
 80043be:	f103 0310 	add.w	r3, r3, #16
 80043c2:	d1e9      	bne.n	8004398 <arm_copy_q31+0x18>
 80043c4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80043c8:	4440      	add	r0, r8
 80043ca:	44c4      	add	ip, r8
 80043cc:	f01e 0203 	ands.w	r2, lr, #3
 80043d0:	d007      	beq.n	80043e2 <arm_copy_q31+0x62>
 80043d2:	f1ac 0104 	sub.w	r1, ip, #4
 80043d6:	f850 3b04 	ldr.w	r3, [r0], #4
 80043da:	3a01      	subs	r2, #1
 80043dc:	f841 3f04 	str.w	r3, [r1, #4]!
 80043e0:	d1f9      	bne.n	80043d6 <arm_copy_q31+0x56>
 80043e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e6:	bf00      	nop

080043e8 <arm_cfft_radix4by2_q31>:
 80043e8:	460b      	mov	r3, r1
 80043ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	b08b      	sub	sp, #44	; 0x2c
 80043f2:	9107      	str	r1, [sp, #28]
 80043f4:	4682      	mov	sl, r0
 80043f6:	9205      	str	r2, [sp, #20]
 80043f8:	9306      	str	r3, [sp, #24]
 80043fa:	f000 8084 	beq.w	8004506 <arm_cfft_radix4by2_q31+0x11e>
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	eb00 0b03 	add.w	fp, r0, r3
 8004404:	46de      	mov	lr, fp
 8004406:	46d4      	mov	ip, sl
 8004408:	4691      	mov	r9, r2
 800440a:	9308      	str	r3, [sp, #32]
 800440c:	2500      	movs	r5, #0
 800440e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004412:	f85b 3035 	ldr.w	r3, [fp, r5, lsl #3]
 8004416:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 800441a:	109e      	asrs	r6, r3, #2
 800441c:	9b05      	ldr	r3, [sp, #20]
 800441e:	1092      	asrs	r2, r2, #2
 8004420:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8004424:	1991      	adds	r1, r2, r6
 8004426:	2700      	movs	r7, #0
 8004428:	1b92      	subs	r2, r2, r6
 800442a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800442e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8004432:	fbc3 6702 	smlal	r6, r7, r3, r2
 8004436:	f84a 1035 	str.w	r1, [sl, r5, lsl #3]
 800443a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800443e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8004442:	1080      	asrs	r0, r0, #2
 8004444:	1089      	asrs	r1, r1, #2
 8004446:	ebc1 0800 	rsb	r8, r1, r0
 800444a:	9701      	str	r7, [sp, #4]
 800444c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004450:	2700      	movs	r7, #0
 8004452:	fbc8 6703 	smlal	r6, r7, r8, r3
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	fb82 2304 	smull	r2, r3, r2, r4
 8004460:	9703      	str	r7, [sp, #12]
 8004462:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004466:	1ab6      	subs	r6, r6, r2
 8004468:	eb67 0703 	sbc.w	r7, r7, r3
 800446c:	4632      	mov	r2, r6
 800446e:	463b      	mov	r3, r7
 8004470:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004474:	fbc4 6708 	smlal	r6, r7, r4, r8
 8004478:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800447c:	f147 0700 	adc.w	r7, r7, #0
 8004480:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004484:	f143 0300 	adc.w	r3, r3, #0
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4401      	add	r1, r0
 800448c:	007a      	lsls	r2, r7, #1
 800448e:	f8cc 1004 	str.w	r1, [ip, #4]
 8004492:	f84b 2035 	str.w	r2, [fp, r5, lsl #3]
 8004496:	f8ce 3004 	str.w	r3, [lr, #4]
 800449a:	9b06      	ldr	r3, [sp, #24]
 800449c:	3501      	adds	r5, #1
 800449e:	429d      	cmp	r5, r3
 80044a0:	f109 0908 	add.w	r9, r9, #8
 80044a4:	f10c 0c08 	add.w	ip, ip, #8
 80044a8:	f10e 0e08 	add.w	lr, lr, #8
 80044ac:	d1b1      	bne.n	8004412 <arm_cfft_radix4by2_q31+0x2a>
 80044ae:	9e05      	ldr	r6, [sp, #20]
 80044b0:	4650      	mov	r0, sl
 80044b2:	4629      	mov	r1, r5
 80044b4:	4632      	mov	r2, r6
 80044b6:	2302      	movs	r3, #2
 80044b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80044ba:	f000 f939 	bl	8004730 <arm_radix4_butterfly_q31>
 80044be:	9b07      	ldr	r3, [sp, #28]
 80044c0:	4629      	mov	r1, r5
 80044c2:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 80044c6:	4632      	mov	r2, r6
 80044c8:	2302      	movs	r3, #2
 80044ca:	f000 f931 	bl	8004730 <arm_radix4_butterfly_q31>
 80044ce:	9b08      	ldr	r3, [sp, #32]
 80044d0:	f10a 0a04 	add.w	sl, sl, #4
 80044d4:	449b      	add	fp, r3
 80044d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80044da:	1d21      	adds	r1, r4, #4
 80044dc:	c90e      	ldmia	r1, {r1, r2, r3}
 80044de:	0040      	lsls	r0, r0, #1
 80044e0:	0049      	lsls	r1, r1, #1
 80044e2:	0052      	lsls	r2, r2, #1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	f84a 0c04 	str.w	r0, [sl, #-4]
 80044ea:	3410      	adds	r4, #16
 80044ec:	f844 1c0c 	str.w	r1, [r4, #-12]
 80044f0:	f844 2c08 	str.w	r2, [r4, #-8]
 80044f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80044f8:	455c      	cmp	r4, fp
 80044fa:	f10a 0a10 	add.w	sl, sl, #16
 80044fe:	d1ea      	bne.n	80044d6 <arm_cfft_radix4by2_q31+0xee>
 8004500:	b00b      	add	sp, #44	; 0x2c
 8004502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004506:	461c      	mov	r4, r3
 8004508:	4619      	mov	r1, r3
 800450a:	2302      	movs	r3, #2
 800450c:	f000 f910 	bl	8004730 <arm_radix4_butterfly_q31>
 8004510:	4621      	mov	r1, r4
 8004512:	9b07      	ldr	r3, [sp, #28]
 8004514:	9a05      	ldr	r2, [sp, #20]
 8004516:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 800451a:	2302      	movs	r3, #2
 800451c:	b00b      	add	sp, #44	; 0x2c
 800451e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004522:	f000 b905 	b.w	8004730 <arm_radix4_butterfly_q31>
 8004526:	bf00      	nop

08004528 <arm_cfft_radix4by2_inverse_q31>:
 8004528:	460b      	mov	r3, r1
 800452a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	b08b      	sub	sp, #44	; 0x2c
 8004532:	9107      	str	r1, [sp, #28]
 8004534:	4682      	mov	sl, r0
 8004536:	4611      	mov	r1, r2
 8004538:	9205      	str	r2, [sp, #20]
 800453a:	9306      	str	r3, [sp, #24]
 800453c:	f000 8089 	beq.w	8004652 <arm_cfft_radix4by2_inverse_q31+0x12a>
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	eb00 0b03 	add.w	fp, r0, r3
 8004546:	46de      	mov	lr, fp
 8004548:	4684      	mov	ip, r0
 800454a:	9308      	str	r3, [sp, #32]
 800454c:	2500      	movs	r5, #0
 800454e:	9009      	str	r0, [sp, #36]	; 0x24
 8004550:	f85b 2035 	ldr.w	r2, [fp, r5, lsl #3]
 8004554:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8004558:	9805      	ldr	r0, [sp, #20]
 800455a:	1096      	asrs	r6, r2, #2
 800455c:	f850 4035 	ldr.w	r4, [r0, r5, lsl #3]
 8004560:	109b      	asrs	r3, r3, #2
 8004562:	199a      	adds	r2, r3, r6
 8004564:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004568:	1b9b      	subs	r3, r3, r6
 800456a:	f04f 0900 	mov.w	r9, #0
 800456e:	6848      	ldr	r0, [r1, #4]
 8004570:	fbc4 8903 	smlal	r8, r9, r4, r3
 8004574:	f84a 2035 	str.w	r2, [sl, r5, lsl #3]
 8004578:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800457c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004580:	10be      	asrs	r6, r7, #2
 8004582:	1092      	asrs	r2, r2, #2
 8004584:	9604      	str	r6, [sp, #16]
 8004586:	f8cd 9004 	str.w	r9, [sp, #4]
 800458a:	1ab6      	subs	r6, r6, r2
 800458c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004590:	f04f 0900 	mov.w	r9, #0
 8004594:	fbc6 8904 	smlal	r8, r9, r6, r4
 8004598:	fb86 6700 	smull	r6, r7, r6, r0
 800459c:	2400      	movs	r4, #0
 800459e:	9400      	str	r4, [sp, #0]
 80045a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80045a4:	e9dd 8900 	ldrd	r8, r9, [sp]
 80045a8:	f8cd 8008 	str.w	r8, [sp, #8]
 80045ac:	ebb8 0806 	subs.w	r8, r8, r6
 80045b0:	eb69 0907 	sbc.w	r9, r9, r7
 80045b4:	4646      	mov	r6, r8
 80045b6:	464f      	mov	r7, r9
 80045b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80045bc:	fbc0 8903 	smlal	r8, r9, r0, r3
 80045c0:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 80045c4:	9b04      	ldr	r3, [sp, #16]
 80045c6:	f147 0700 	adc.w	r7, r7, #0
 80045ca:	441a      	add	r2, r3
 80045cc:	007b      	lsls	r3, r7, #1
 80045ce:	f8cc 2004 	str.w	r2, [ip, #4]
 80045d2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80045d6:	f84b 3035 	str.w	r3, [fp, r5, lsl #3]
 80045da:	9b06      	ldr	r3, [sp, #24]
 80045dc:	f149 0900 	adc.w	r9, r9, #0
 80045e0:	3501      	adds	r5, #1
 80045e2:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80045e6:	429d      	cmp	r5, r3
 80045e8:	f8ce 2004 	str.w	r2, [lr, #4]
 80045ec:	f101 0108 	add.w	r1, r1, #8
 80045f0:	f10c 0c08 	add.w	ip, ip, #8
 80045f4:	f10e 0e08 	add.w	lr, lr, #8
 80045f8:	d1aa      	bne.n	8004550 <arm_cfft_radix4by2_inverse_q31+0x28>
 80045fa:	9e05      	ldr	r6, [sp, #20]
 80045fc:	4650      	mov	r0, sl
 80045fe:	4629      	mov	r1, r5
 8004600:	4632      	mov	r2, r6
 8004602:	2302      	movs	r3, #2
 8004604:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004606:	f000 faa1 	bl	8004b4c <arm_radix4_butterfly_inverse_q31>
 800460a:	9b07      	ldr	r3, [sp, #28]
 800460c:	4629      	mov	r1, r5
 800460e:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004612:	4632      	mov	r2, r6
 8004614:	2302      	movs	r3, #2
 8004616:	f000 fa99 	bl	8004b4c <arm_radix4_butterfly_inverse_q31>
 800461a:	9b08      	ldr	r3, [sp, #32]
 800461c:	f10a 0a04 	add.w	sl, sl, #4
 8004620:	449b      	add	fp, r3
 8004622:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004626:	1d21      	adds	r1, r4, #4
 8004628:	c90e      	ldmia	r1, {r1, r2, r3}
 800462a:	0040      	lsls	r0, r0, #1
 800462c:	0049      	lsls	r1, r1, #1
 800462e:	0052      	lsls	r2, r2, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	f84a 0c04 	str.w	r0, [sl, #-4]
 8004636:	3410      	adds	r4, #16
 8004638:	f844 1c0c 	str.w	r1, [r4, #-12]
 800463c:	f844 2c08 	str.w	r2, [r4, #-8]
 8004640:	f844 3c04 	str.w	r3, [r4, #-4]
 8004644:	455c      	cmp	r4, fp
 8004646:	f10a 0a10 	add.w	sl, sl, #16
 800464a:	d1ea      	bne.n	8004622 <arm_cfft_radix4by2_inverse_q31+0xfa>
 800464c:	b00b      	add	sp, #44	; 0x2c
 800464e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004652:	461c      	mov	r4, r3
 8004654:	4619      	mov	r1, r3
 8004656:	2302      	movs	r3, #2
 8004658:	f000 fa78 	bl	8004b4c <arm_radix4_butterfly_inverse_q31>
 800465c:	4621      	mov	r1, r4
 800465e:	9b07      	ldr	r3, [sp, #28]
 8004660:	9a05      	ldr	r2, [sp, #20]
 8004662:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004666:	2302      	movs	r3, #2
 8004668:	b00b      	add	sp, #44	; 0x2c
 800466a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466e:	f000 ba6d 	b.w	8004b4c <arm_radix4_butterfly_inverse_q31>
 8004672:	bf00      	nop

08004674 <arm_cfft_q31>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	2a01      	cmp	r2, #1
 8004678:	460d      	mov	r5, r1
 800467a:	4604      	mov	r4, r0
 800467c:	461e      	mov	r6, r3
 800467e:	8801      	ldrh	r1, [r0, #0]
 8004680:	d024      	beq.n	80046cc <arm_cfft_q31+0x58>
 8004682:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004686:	d013      	beq.n	80046b0 <arm_cfft_q31+0x3c>
 8004688:	d808      	bhi.n	800469c <arm_cfft_q31+0x28>
 800468a:	2920      	cmp	r1, #32
 800468c:	d031      	beq.n	80046f2 <arm_cfft_q31+0x7e>
 800468e:	d945      	bls.n	800471c <arm_cfft_q31+0xa8>
 8004690:	2940      	cmp	r1, #64	; 0x40
 8004692:	d00d      	beq.n	80046b0 <arm_cfft_q31+0x3c>
 8004694:	2980      	cmp	r1, #128	; 0x80
 8004696:	d02c      	beq.n	80046f2 <arm_cfft_q31+0x7e>
 8004698:	b98e      	cbnz	r6, 80046be <arm_cfft_q31+0x4a>
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80046a0:	d006      	beq.n	80046b0 <arm_cfft_q31+0x3c>
 80046a2:	d923      	bls.n	80046ec <arm_cfft_q31+0x78>
 80046a4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80046a8:	d023      	beq.n	80046f2 <arm_cfft_q31+0x7e>
 80046aa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80046ae:	d1f3      	bne.n	8004698 <arm_cfft_q31+0x24>
 80046b0:	4628      	mov	r0, r5
 80046b2:	6862      	ldr	r2, [r4, #4]
 80046b4:	2301      	movs	r3, #1
 80046b6:	f000 f83b 	bl	8004730 <arm_radix4_butterfly_q31>
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	d0ed      	beq.n	800469a <arm_cfft_q31+0x26>
 80046be:	4628      	mov	r0, r5
 80046c0:	89a1      	ldrh	r1, [r4, #12]
 80046c2:	68a2      	ldr	r2, [r4, #8]
 80046c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046c8:	f7fb bd42 	b.w	8000150 <arm_bitreversal_32>
 80046cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80046d0:	d01e      	beq.n	8004710 <arm_cfft_q31+0x9c>
 80046d2:	d813      	bhi.n	80046fc <arm_cfft_q31+0x88>
 80046d4:	2920      	cmp	r1, #32
 80046d6:	d004      	beq.n	80046e2 <arm_cfft_q31+0x6e>
 80046d8:	d927      	bls.n	800472a <arm_cfft_q31+0xb6>
 80046da:	2940      	cmp	r1, #64	; 0x40
 80046dc:	d018      	beq.n	8004710 <arm_cfft_q31+0x9c>
 80046de:	2980      	cmp	r1, #128	; 0x80
 80046e0:	d1da      	bne.n	8004698 <arm_cfft_q31+0x24>
 80046e2:	4628      	mov	r0, r5
 80046e4:	6862      	ldr	r2, [r4, #4]
 80046e6:	f7ff ff1f 	bl	8004528 <arm_cfft_radix4by2_inverse_q31>
 80046ea:	e7d5      	b.n	8004698 <arm_cfft_q31+0x24>
 80046ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80046f0:	d1d2      	bne.n	8004698 <arm_cfft_q31+0x24>
 80046f2:	4628      	mov	r0, r5
 80046f4:	6862      	ldr	r2, [r4, #4]
 80046f6:	f7ff fe77 	bl	80043e8 <arm_cfft_radix4by2_q31>
 80046fa:	e7cd      	b.n	8004698 <arm_cfft_q31+0x24>
 80046fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004700:	d006      	beq.n	8004710 <arm_cfft_q31+0x9c>
 8004702:	d90e      	bls.n	8004722 <arm_cfft_q31+0xae>
 8004704:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004708:	d0eb      	beq.n	80046e2 <arm_cfft_q31+0x6e>
 800470a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800470e:	d1c3      	bne.n	8004698 <arm_cfft_q31+0x24>
 8004710:	4628      	mov	r0, r5
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	2301      	movs	r3, #1
 8004716:	f000 fa19 	bl	8004b4c <arm_radix4_butterfly_inverse_q31>
 800471a:	e7bd      	b.n	8004698 <arm_cfft_q31+0x24>
 800471c:	2910      	cmp	r1, #16
 800471e:	d1bb      	bne.n	8004698 <arm_cfft_q31+0x24>
 8004720:	e7c6      	b.n	80046b0 <arm_cfft_q31+0x3c>
 8004722:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004726:	d0dc      	beq.n	80046e2 <arm_cfft_q31+0x6e>
 8004728:	e7b6      	b.n	8004698 <arm_cfft_q31+0x24>
 800472a:	2910      	cmp	r1, #16
 800472c:	d1b4      	bne.n	8004698 <arm_cfft_q31+0x24>
 800472e:	e7ef      	b.n	8004710 <arm_cfft_q31+0x9c>

08004730 <arm_radix4_butterfly_q31>:
 8004730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	461e      	mov	r6, r3
 8004736:	b0a1      	sub	sp, #132	; 0x84
 8004738:	910f      	str	r1, [sp, #60]	; 0x3c
 800473a:	0889      	lsrs	r1, r1, #2
 800473c:	930d      	str	r3, [sp, #52]	; 0x34
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4605      	mov	r5, r0
 8004742:	901e      	str	r0, [sp, #120]	; 0x78
 8004744:	4418      	add	r0, r3
 8004746:	4690      	mov	r8, r2
 8004748:	9217      	str	r2, [sp, #92]	; 0x5c
 800474a:	911f      	str	r1, [sp, #124]	; 0x7c
 800474c:	9106      	str	r1, [sp, #24]
 800474e:	9202      	str	r2, [sp, #8]
 8004750:	9200      	str	r2, [sp, #0]
 8004752:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004756:	18c2      	adds	r2, r0, r3
 8004758:	3308      	adds	r3, #8
 800475a:	eb02 0c03 	add.w	ip, r2, r3
 800475e:	00cb      	lsls	r3, r1, #3
 8004760:	930a      	str	r3, [sp, #40]	; 0x28
 8004762:	0133      	lsls	r3, r6, #4
 8004764:	f102 0b08 	add.w	fp, r2, #8
 8004768:	9308      	str	r3, [sp, #32]
 800476a:	00f3      	lsls	r3, r6, #3
 800476c:	930c      	str	r3, [sp, #48]	; 0x30
 800476e:	465b      	mov	r3, fp
 8004770:	f105 0a08 	add.w	sl, r5, #8
 8004774:	46d3      	mov	fp, sl
 8004776:	469a      	mov	sl, r3
 8004778:	f100 0908 	add.w	r9, r0, #8
 800477c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004780:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8004784:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 8004788:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 800478c:	f859 1c08 	ldr.w	r1, [r9, #-8]
 8004790:	ea4f 1820 	mov.w	r8, r0, asr #4
 8004794:	1112      	asrs	r2, r2, #4
 8004796:	111b      	asrs	r3, r3, #4
 8004798:	eb08 0402 	add.w	r4, r8, r2
 800479c:	eb03 1521 	add.w	r5, r3, r1, asr #4
 80047a0:	1963      	adds	r3, r4, r5
 80047a2:	9204      	str	r2, [sp, #16]
 80047a4:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 80047a8:	f84b 3c08 	str.w	r3, [fp, #-8]
 80047ac:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 80047b0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80047b4:	f859 1c04 	ldr.w	r1, [r9, #-4]
 80047b8:	ea4f 1e22 	mov.w	lr, r2, asr #4
 80047bc:	1106      	asrs	r6, r0, #4
 80047be:	111b      	asrs	r3, r3, #4
 80047c0:	9607      	str	r6, [sp, #28]
 80047c2:	eb03 1121 	add.w	r1, r3, r1, asr #4
 80047c6:	4476      	add	r6, lr
 80047c8:	1873      	adds	r3, r6, r1
 80047ca:	f84b 3c04 	str.w	r3, [fp, #-4]
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	1a71      	subs	r1, r6, r1
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	fb81 6702 	smull	r6, r7, r1, r2
 80047da:	463e      	mov	r6, r7
 80047dc:	1b63      	subs	r3, r4, r5
 80047de:	fb83 4500 	smull	r4, r5, r3, r0
 80047e2:	fb80 0101 	smull	r0, r1, r0, r1
 80047e6:	fb83 2302 	smull	r2, r3, r3, r2
 80047ea:	442e      	add	r6, r5
 80047ec:	1acd      	subs	r5, r1, r3
 80047ee:	e91c 0006 	ldmdb	ip, {r1, r2}
 80047f2:	1110      	asrs	r0, r2, #4
 80047f4:	9a04      	ldr	r2, [sp, #16]
 80047f6:	e919 0018 	ldmdb	r9, {r3, r4}
 80047fa:	ebc2 0208 	rsb	r2, r2, r8
 80047fe:	0076      	lsls	r6, r6, #1
 8004800:	ebc0 1824 	rsb	r8, r0, r4, asr #4
 8004804:	006d      	lsls	r5, r5, #1
 8004806:	9800      	ldr	r0, [sp, #0]
 8004808:	f849 6c08 	str.w	r6, [r9, #-8]
 800480c:	f849 5c04 	str.w	r5, [r9, #-4]
 8004810:	6805      	ldr	r5, [r0, #0]
 8004812:	9e07      	ldr	r6, [sp, #28]
 8004814:	1109      	asrs	r1, r1, #4
 8004816:	ebc1 1323 	rsb	r3, r1, r3, asr #4
 800481a:	6841      	ldr	r1, [r0, #4]
 800481c:	eb02 0008 	add.w	r0, r2, r8
 8004820:	ebce 0e06 	rsb	lr, lr, r6
 8004824:	fb80 6705 	smull	r6, r7, r0, r5
 8004828:	ebc3 040e 	rsb	r4, r3, lr
 800482c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004830:	fb84 6701 	smull	r6, r7, r4, r1
 8004834:	463e      	mov	r6, r7
 8004836:	fb85 4504 	smull	r4, r5, r5, r4
 800483a:	fb80 0101 	smull	r0, r1, r0, r1
 800483e:	9f05      	ldr	r7, [sp, #20]
 8004840:	1a69      	subs	r1, r5, r1
 8004842:	443e      	add	r6, r7
 8004844:	0070      	lsls	r0, r6, #1
 8004846:	0049      	lsls	r1, r1, #1
 8004848:	e90a 0003 	stmdb	sl, {r0, r1}
 800484c:	9f02      	ldr	r7, [sp, #8]
 800484e:	ebc8 0202 	rsb	r2, r8, r2
 8004852:	6839      	ldr	r1, [r7, #0]
 8004854:	687e      	ldr	r6, [r7, #4]
 8004856:	fb82 4501 	smull	r4, r5, r2, r1
 800485a:	4473      	add	r3, lr
 800485c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004860:	fb81 0103 	smull	r0, r1, r1, r3
 8004864:	fb83 4506 	smull	r4, r5, r3, r6
 8004868:	fb82 2306 	smull	r2, r3, r2, r6
 800486c:	9e08      	ldr	r6, [sp, #32]
 800486e:	1acb      	subs	r3, r1, r3
 8004870:	9901      	ldr	r1, [sp, #4]
 8004872:	9c03      	ldr	r4, [sp, #12]
 8004874:	4431      	add	r1, r6
 8004876:	9800      	ldr	r0, [sp, #0]
 8004878:	9101      	str	r1, [sp, #4]
 800487a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800487c:	442c      	add	r4, r5
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	1841      	adds	r1, r0, r1
 8004882:	0062      	lsls	r2, r4, #1
 8004884:	e90c 000c 	stmdb	ip, {r2, r3}
 8004888:	9100      	str	r1, [sp, #0]
 800488a:	9b06      	ldr	r3, [sp, #24]
 800488c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	4439      	add	r1, r7
 8004892:	f10b 0b08 	add.w	fp, fp, #8
 8004896:	f109 0908 	add.w	r9, r9, #8
 800489a:	f10a 0a08 	add.w	sl, sl, #8
 800489e:	9102      	str	r1, [sp, #8]
 80048a0:	f10c 0c08 	add.w	ip, ip, #8
 80048a4:	9306      	str	r3, [sp, #24]
 80048a6:	f47f af6b 	bne.w	8004780 <arm_radix4_butterfly_q31+0x50>
 80048aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	9316      	str	r3, [sp, #88]	; 0x58
 80048b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	f240 80f9 	bls.w	8004aaa <arm_radix4_butterfly_q31+0x37a>
 80048b8:	931c      	str	r3, [sp, #112]	; 0x70
 80048ba:	930e      	str	r3, [sp, #56]	; 0x38
 80048bc:	2300      	movs	r3, #0
 80048be:	9312      	str	r3, [sp, #72]	; 0x48
 80048c0:	9315      	str	r3, [sp, #84]	; 0x54
 80048c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80048c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048c6:	9314      	str	r3, [sp, #80]	; 0x50
 80048c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048ca:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 80048ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80048d0:	0883      	lsrs	r3, r0, #2
 80048d2:	4619      	mov	r1, r3
 80048d4:	931d      	str	r3, [sp, #116]	; 0x74
 80048d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048d8:	1e4a      	subs	r2, r1, #1
 80048da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80048de:	9218      	str	r2, [sp, #96]	; 0x60
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	00ca      	lsls	r2, r1, #3
 80048e4:	9219      	str	r2, [sp, #100]	; 0x64
 80048e6:	931a      	str	r3, [sp, #104]	; 0x68
 80048e8:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 80048ec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80048ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048f0:	4622      	mov	r2, r4
 80048f2:	4618      	mov	r0, r3
 80048f4:	00d9      	lsls	r1, r3, #3
 80048f6:	440a      	add	r2, r1
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	4411      	add	r1, r2
 80048fc:	58e3      	ldr	r3, [r4, r3]
 80048fe:	6849      	ldr	r1, [r1, #4]
 8004900:	6852      	ldr	r2, [r2, #4]
 8004902:	9310      	str	r3, [sp, #64]	; 0x40
 8004904:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004906:	9104      	str	r1, [sp, #16]
 8004908:	9202      	str	r2, [sp, #8]
 800490a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800490c:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 8004910:	18c3      	adds	r3, r0, r3
 8004912:	9206      	str	r2, [sp, #24]
 8004914:	9315      	str	r3, [sp, #84]	; 0x54
 8004916:	680a      	ldr	r2, [r1, #0]
 8004918:	684b      	ldr	r3, [r1, #4]
 800491a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800491c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800491e:	9207      	str	r2, [sp, #28]
 8004920:	9311      	str	r3, [sp, #68]	; 0x44
 8004922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004926:	eb07 0a05 	add.w	sl, r7, r5
 800492a:	eb0a 0b05 	add.w	fp, sl, r5
 800492e:	4293      	cmp	r3, r2
 8004930:	eb0b 0e05 	add.w	lr, fp, r5
 8004934:	f240 80a0 	bls.w	8004a78 <arm_radix4_butterfly_q31+0x348>
 8004938:	4613      	mov	r3, r2
 800493a:	46d8      	mov	r8, fp
 800493c:	46d3      	mov	fp, sl
 800493e:	46ba      	mov	sl, r7
 8004940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004942:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8004946:	4413      	add	r3, r2
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	9b00      	ldr	r3, [sp, #0]
 800494c:	f8da c000 	ldr.w	ip, [sl]
 8004950:	f8d8 5000 	ldr.w	r5, [r8]
 8004954:	f8db 2000 	ldr.w	r2, [fp]
 8004958:	930c      	str	r3, [sp, #48]	; 0x30
 800495a:	f8de 3000 	ldr.w	r3, [lr]
 800495e:	eb0c 0705 	add.w	r7, ip, r5
 8004962:	441a      	add	r2, r3
 8004964:	18b9      	adds	r1, r7, r2
 8004966:	1089      	asrs	r1, r1, #2
 8004968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800496c:	f8ca 1000 	str.w	r1, [sl]
 8004970:	f8db 4004 	ldr.w	r4, [fp, #4]
 8004974:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004978:	f8de 0004 	ldr.w	r0, [lr, #4]
 800497c:	18ce      	adds	r6, r1, r3
 800497e:	4420      	add	r0, r4
 8004980:	1834      	adds	r4, r6, r0
 8004982:	10a4      	asrs	r4, r4, #2
 8004984:	f8ca 4004 	str.w	r4, [sl, #4]
 8004988:	1ac9      	subs	r1, r1, r3
 800498a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800498e:	ebc5 050c 	rsb	r5, r5, ip
 8004992:	469c      	mov	ip, r3
 8004994:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004998:	f8de 4000 	ldr.w	r4, [lr]
 800499c:	ebc3 0c0c 	rsb	ip, r3, ip
 80049a0:	f8db 3000 	ldr.w	r3, [fp]
 80049a4:	1aba      	subs	r2, r7, r2
 80049a6:	1b1b      	subs	r3, r3, r4
 80049a8:	eb05 040c 	add.w	r4, r5, ip
 80049ac:	ebcc 0c05 	rsb	ip, ip, r5
 80049b0:	1acd      	subs	r5, r1, r3
 80049b2:	440b      	add	r3, r1
 80049b4:	9906      	ldr	r1, [sp, #24]
 80049b6:	1a30      	subs	r0, r6, r0
 80049b8:	fb84 6701 	smull	r6, r7, r4, r1
 80049bc:	9902      	ldr	r1, [sp, #8]
 80049be:	9001      	str	r0, [sp, #4]
 80049c0:	fb85 0101 	smull	r0, r1, r5, r1
 80049c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049c8:	9801      	ldr	r0, [sp, #4]
 80049ca:	9904      	ldr	r1, [sp, #16]
 80049cc:	44ca      	add	sl, r9
 80049ce:	fb80 0101 	smull	r0, r1, r0, r1
 80049d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049d8:	19cf      	adds	r7, r1, r7
 80049da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80049dc:	970d      	str	r7, [sp, #52]	; 0x34
 80049de:	4608      	mov	r0, r1
 80049e0:	fb82 6701 	smull	r6, r7, r2, r1
 80049e4:	9901      	ldr	r1, [sp, #4]
 80049e6:	fb81 0100 	smull	r0, r1, r1, r0
 80049ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049f0:	19c6      	adds	r6, r0, r7
 80049f2:	9601      	str	r6, [sp, #4]
 80049f4:	9e04      	ldr	r6, [sp, #16]
 80049f6:	4630      	mov	r0, r6
 80049f8:	fb82 6700 	smull	r6, r7, r2, r0
 80049fc:	9a06      	ldr	r2, [sp, #24]
 80049fe:	fb85 0102 	smull	r0, r1, r5, r2
 8004a02:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a06:	9d02      	ldr	r5, [sp, #8]
 8004a08:	9907      	ldr	r1, [sp, #28]
 8004a0a:	fb84 4505 	smull	r4, r5, r4, r5
 8004a0e:	fb8c 0101 	smull	r0, r1, ip, r1
 8004a12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004a1c:	9c07      	ldr	r4, [sp, #28]
 8004a1e:	1b40      	subs	r0, r0, r5
 8004a20:	1bd2      	subs	r2, r2, r7
 8004a22:	fb83 4504 	smull	r4, r5, r3, r4
 8004a26:	fb83 6701 	smull	r6, r7, r3, r1
 8004a2a:	9008      	str	r0, [sp, #32]
 8004a2c:	fb8c 0101 	smull	r0, r1, ip, r1
 8004a30:	9e01      	ldr	r6, [sp, #4]
 8004a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a34:	1a69      	subs	r1, r5, r1
 8004a36:	1052      	asrs	r2, r2, #1
 8004a38:	1075      	asrs	r5, r6, #1
 8004a3a:	f8cb 5000 	str.w	r5, [fp]
 8004a3e:	f8cb 2004 	str.w	r2, [fp, #4]
 8004a42:	443b      	add	r3, r7
 8004a44:	9a00      	ldr	r2, [sp, #0]
 8004a46:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004a48:	9808      	ldr	r0, [sp, #32]
 8004a4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004a4c:	105b      	asrs	r3, r3, #1
 8004a4e:	442a      	add	r2, r5
 8004a50:	107c      	asrs	r4, r7, #1
 8004a52:	1040      	asrs	r0, r0, #1
 8004a54:	f8c8 4000 	str.w	r4, [r8]
 8004a58:	f8c8 0004 	str.w	r0, [r8, #4]
 8004a5c:	9200      	str	r2, [sp, #0]
 8004a5e:	f8ce 3000 	str.w	r3, [lr]
 8004a62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a66:	1049      	asrs	r1, r1, #1
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	f8ce 1004 	str.w	r1, [lr, #4]
 8004a6e:	44cb      	add	fp, r9
 8004a70:	44c8      	add	r8, r9
 8004a72:	44ce      	add	lr, r9
 8004a74:	f63f af69 	bhi.w	800494a <arm_radix4_butterfly_q31+0x21a>
 8004a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a7e:	440a      	add	r2, r1
 8004a80:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004a84:	3301      	adds	r3, #1
 8004a86:	3208      	adds	r2, #8
 8004a88:	9214      	str	r2, [sp, #80]	; 0x50
 8004a8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004a8c:	9312      	str	r3, [sp, #72]	; 0x48
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	f67f af2c 	bls.w	80048ec <arm_radix4_butterfly_q31+0x1bc>
 8004a94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004a96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	9216      	str	r2, [sp, #88]	; 0x58
 8004a9e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	931c      	str	r3, [sp, #112]	; 0x70
 8004aa4:	920e      	str	r2, [sp, #56]	; 0x38
 8004aa6:	f63f af09 	bhi.w	80048bc <arm_radix4_butterfly_q31+0x18c>
 8004aaa:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004aac:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8004ab0:	3020      	adds	r0, #32
 8004ab2:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8004ab6:	f850 3c18 	ldr.w	r3, [r0, #-24]
 8004aba:	f850 1c14 	ldr.w	r1, [r0, #-20]
 8004abe:	f850 8c1c 	ldr.w	r8, [r0, #-28]
 8004ac2:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8004ac6:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8004aca:	18d7      	adds	r7, r2, r3
 8004acc:	1ad6      	subs	r6, r2, r3
 8004ace:	1855      	adds	r5, r2, r1
 8004ad0:	1a52      	subs	r2, r2, r1
 8004ad2:	f850 ec08 	ldr.w	lr, [r0, #-8]
 8004ad6:	f850 bc04 	ldr.w	fp, [r0, #-4]
 8004ada:	eb08 0401 	add.w	r4, r8, r1
 8004ade:	4457      	add	r7, sl
 8004ae0:	ebc1 0108 	rsb	r1, r1, r8
 8004ae4:	4456      	add	r6, sl
 8004ae6:	ebca 0505 	rsb	r5, sl, r5
 8004aea:	ebca 0202 	rsb	r2, sl, r2
 8004aee:	ebc3 0a08 	rsb	sl, r3, r8
 8004af2:	4443      	add	r3, r8
 8004af4:	4461      	add	r1, ip
 8004af6:	4464      	add	r4, ip
 8004af8:	ebcc 080a 	rsb	r8, ip, sl
 8004afc:	ebcc 0303 	rsb	r3, ip, r3
 8004b00:	ebcb 0505 	rsb	r5, fp, r5
 8004b04:	445a      	add	r2, fp
 8004b06:	445c      	add	r4, fp
 8004b08:	4477      	add	r7, lr
 8004b0a:	ebcb 0b01 	rsb	fp, fp, r1
 8004b0e:	ebce 0606 	rsb	r6, lr, r6
 8004b12:	eb08 010e 	add.w	r1, r8, lr
 8004b16:	ebce 0303 	rsb	r3, lr, r3
 8004b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8004b1e:	f840 7c20 	str.w	r7, [r0, #-32]
 8004b22:	f840 6c18 	str.w	r6, [r0, #-24]
 8004b26:	f840 5c10 	str.w	r5, [r0, #-16]
 8004b2a:	f840 2c08 	str.w	r2, [r0, #-8]
 8004b2e:	f840 4c1c 	str.w	r4, [r0, #-28]
 8004b32:	f840 bc14 	str.w	fp, [r0, #-20]
 8004b36:	f840 1c0c 	str.w	r1, [r0, #-12]
 8004b3a:	f840 3c04 	str.w	r3, [r0, #-4]
 8004b3e:	f100 0020 	add.w	r0, r0, #32
 8004b42:	d1b6      	bne.n	8004ab2 <arm_radix4_butterfly_q31+0x382>
 8004b44:	b021      	add	sp, #132	; 0x84
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	bf00      	nop

08004b4c <arm_radix4_butterfly_inverse_q31>:
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	4605      	mov	r5, r0
 8004b52:	4617      	mov	r7, r2
 8004b54:	b0a1      	sub	sp, #132	; 0x84
 8004b56:	461e      	mov	r6, r3
 8004b58:	9111      	str	r1, [sp, #68]	; 0x44
 8004b5a:	0889      	lsrs	r1, r1, #2
 8004b5c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	901e      	str	r0, [sp, #120]	; 0x78
 8004b62:	4418      	add	r0, r3
 8004b64:	9218      	str	r2, [sp, #96]	; 0x60
 8004b66:	4694      	mov	ip, r2
 8004b68:	18c2      	adds	r2, r0, r3
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	eb02 0b03 	add.w	fp, r2, r3
 8004b70:	f102 0908 	add.w	r9, r2, #8
 8004b74:	f105 0a08 	add.w	sl, r5, #8
 8004b78:	46de      	mov	lr, fp
 8004b7a:	46d3      	mov	fp, sl
 8004b7c:	46ca      	mov	sl, r9
 8004b7e:	46b9      	mov	r9, r7
 8004b80:	911f      	str	r1, [sp, #124]	; 0x7c
 8004b82:	9102      	str	r1, [sp, #8]
 8004b84:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004b88:	00cb      	lsls	r3, r1, #3
 8004b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b8c:	0133      	lsls	r3, r6, #4
 8004b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b90:	00f3      	lsls	r3, r6, #3
 8004b92:	f100 0808 	add.w	r8, r0, #8
 8004b96:	9309      	str	r3, [sp, #36]	; 0x24
 8004b98:	9701      	str	r7, [sp, #4]
 8004b9a:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 8004b9e:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 8004ba2:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8004ba6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004baa:	1100      	asrs	r0, r0, #4
 8004bac:	1109      	asrs	r1, r1, #4
 8004bae:	111b      	asrs	r3, r3, #4
 8004bb0:	1846      	adds	r6, r0, r1
 8004bb2:	eb03 1722 	add.w	r7, r3, r2, asr #4
 8004bb6:	19f3      	adds	r3, r6, r7
 8004bb8:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8004bbc:	f84b 3c08 	str.w	r3, [fp, #-8]
 8004bc0:	9108      	str	r1, [sp, #32]
 8004bc2:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8004bc6:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8004bca:	f858 4c04 	ldr.w	r4, [r8, #-4]
 8004bce:	111b      	asrs	r3, r3, #4
 8004bd0:	1112      	asrs	r2, r2, #4
 8004bd2:	1109      	asrs	r1, r1, #4
 8004bd4:	9003      	str	r0, [sp, #12]
 8004bd6:	eb01 1424 	add.w	r4, r1, r4, asr #4
 8004bda:	1898      	adds	r0, r3, r2
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	1901      	adds	r1, r0, r4
 8004be0:	9b01      	ldr	r3, [sp, #4]
 8004be2:	f84b 1c04 	str.w	r1, [fp, #-4]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	460b      	mov	r3, r1
 8004bec:	1bf1      	subs	r1, r6, r7
 8004bee:	fb81 6705 	smull	r6, r7, r1, r5
 8004bf2:	1b04      	subs	r4, r0, r4
 8004bf4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004bf8:	fb81 0103 	smull	r0, r1, r1, r3
 8004bfc:	fb84 6703 	smull	r6, r7, r4, r3
 8004c00:	fb85 4504 	smull	r4, r5, r5, r4
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	194e      	adds	r6, r1, r5
 8004c08:	1bdf      	subs	r7, r3, r7
 8004c0a:	007f      	lsls	r7, r7, #1
 8004c0c:	0076      	lsls	r6, r6, #1
 8004c0e:	e91e 0003 	ldmdb	lr, {r0, r1}
 8004c12:	f858 5c08 	ldr.w	r5, [r8, #-8]
 8004c16:	f858 4c04 	ldr.w	r4, [r8, #-4]
 8004c1a:	f848 7c08 	str.w	r7, [r8, #-8]
 8004c1e:	f848 6c04 	str.w	r6, [r8, #-4]
 8004c22:	9b04      	ldr	r3, [sp, #16]
 8004c24:	9e03      	ldr	r6, [sp, #12]
 8004c26:	9f08      	ldr	r7, [sp, #32]
 8004c28:	1109      	asrs	r1, r1, #4
 8004c2a:	1bf7      	subs	r7, r6, r7
 8004c2c:	1a9a      	subs	r2, r3, r2
 8004c2e:	1100      	asrs	r0, r0, #4
 8004c30:	ebc1 1324 	rsb	r3, r1, r4, asr #4
 8004c34:	ebc0 1625 	rsb	r6, r0, r5, asr #4
 8004c38:	1afd      	subs	r5, r7, r3
 8004c3a:	e899 0011 	ldmia.w	r9, {r0, r4}
 8004c3e:	1991      	adds	r1, r2, r6
 8004c40:	9308      	str	r3, [sp, #32]
 8004c42:	9203      	str	r2, [sp, #12]
 8004c44:	fb85 2300 	smull	r2, r3, r5, r0
 8004c48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c4c:	fb81 2304 	smull	r2, r3, r1, r4
 8004c50:	fb85 4504 	smull	r4, r5, r5, r4
 8004c54:	fb80 0101 	smull	r0, r1, r0, r1
 8004c58:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c5c:	9c05      	ldr	r4, [sp, #20]
 8004c5e:	f10b 0b08 	add.w	fp, fp, #8
 8004c62:	1ae2      	subs	r2, r4, r3
 8004c64:	9c07      	ldr	r4, [sp, #28]
 8004c66:	0050      	lsls	r0, r2, #1
 8004c68:	4421      	add	r1, r4
 8004c6a:	0049      	lsls	r1, r1, #1
 8004c6c:	e90a 0003 	stmdb	sl, {r0, r1}
 8004c70:	9b08      	ldr	r3, [sp, #32]
 8004c72:	9a03      	ldr	r2, [sp, #12]
 8004c74:	f8dc 1000 	ldr.w	r1, [ip]
 8004c78:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004c7c:	1b92      	subs	r2, r2, r6
 8004c7e:	443b      	add	r3, r7
 8004c80:	fb83 6701 	smull	r6, r7, r3, r1
 8004c84:	fb82 4500 	smull	r4, r5, r2, r0
 8004c88:	fb81 0102 	smull	r0, r1, r1, r2
 8004c8c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c92:	fb83 2302 	smull	r2, r3, r3, r2
 8004c96:	440b      	add	r3, r1
 8004c98:	9901      	ldr	r1, [sp, #4]
 8004c9a:	1b7c      	subs	r4, r7, r5
 8004c9c:	4401      	add	r1, r0
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	0062      	lsls	r2, r4, #1
 8004ca2:	9101      	str	r1, [sp, #4]
 8004ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ca6:	e90e 000c 	stmdb	lr, {r2, r3}
 8004caa:	9b02      	ldr	r3, [sp, #8]
 8004cac:	4489      	add	r9, r1
 8004cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	f108 0808 	add.w	r8, r8, #8
 8004cb6:	f10a 0a08 	add.w	sl, sl, #8
 8004cba:	448c      	add	ip, r1
 8004cbc:	f10e 0e08 	add.w	lr, lr, #8
 8004cc0:	9302      	str	r3, [sp, #8]
 8004cc2:	f47f af6a 	bne.w	8004b9a <arm_radix4_butterfly_inverse_q31+0x4e>
 8004cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ccc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	f240 80ed 	bls.w	8004eae <arm_radix4_butterfly_inverse_q31+0x362>
 8004cd4:	931c      	str	r3, [sp, #112]	; 0x70
 8004cd6:	9310      	str	r3, [sp, #64]	; 0x40
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cdc:	9316      	str	r3, [sp, #88]	; 0x58
 8004cde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ce0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8004ce4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004ce6:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 8004cea:	9314      	str	r3, [sp, #80]	; 0x50
 8004cec:	0883      	lsrs	r3, r0, #2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	931d      	str	r3, [sp, #116]	; 0x74
 8004cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cf4:	1e4a      	subs	r2, r1, #1
 8004cf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cfa:	9219      	str	r2, [sp, #100]	; 0x64
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	00ca      	lsls	r2, r1, #3
 8004d00:	921a      	str	r2, [sp, #104]	; 0x68
 8004d02:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d04:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8004d08:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004d0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	00d9      	lsls	r1, r3, #3
 8004d12:	440a      	add	r2, r1
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4411      	add	r1, r2
 8004d18:	58e3      	ldr	r3, [r4, r3]
 8004d1a:	6849      	ldr	r1, [r1, #4]
 8004d1c:	6852      	ldr	r2, [r2, #4]
 8004d1e:	9304      	str	r3, [sp, #16]
 8004d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d22:	9106      	str	r1, [sp, #24]
 8004d24:	9208      	str	r2, [sp, #32]
 8004d26:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004d28:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 8004d2c:	18c3      	adds	r3, r0, r3
 8004d2e:	9203      	str	r2, [sp, #12]
 8004d30:	9316      	str	r3, [sp, #88]	; 0x58
 8004d32:	680a      	ldr	r2, [r1, #0]
 8004d34:	684b      	ldr	r3, [r1, #4]
 8004d36:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004d38:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8004d3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d42:	eb07 0a05 	add.w	sl, r7, r5
 8004d46:	eb0a 0b05 	add.w	fp, sl, r5
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	eb0b 0e05 	add.w	lr, fp, r5
 8004d50:	f240 8094 	bls.w	8004e7c <arm_radix4_butterfly_inverse_q31+0x330>
 8004d54:	4613      	mov	r3, r2
 8004d56:	f8cd b004 	str.w	fp, [sp, #4]
 8004d5a:	46d3      	mov	fp, sl
 8004d5c:	46ba      	mov	sl, r7
 8004d5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	9302      	str	r3, [sp, #8]
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	f8da c000 	ldr.w	ip, [sl]
 8004d6c:	6804      	ldr	r4, [r0, #0]
 8004d6e:	f8db 2000 	ldr.w	r2, [fp]
 8004d72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d74:	f8de 3000 	ldr.w	r3, [lr]
 8004d78:	eb0c 0704 	add.w	r7, ip, r4
 8004d7c:	441a      	add	r2, r3
 8004d7e:	18b9      	adds	r1, r7, r2
 8004d80:	1089      	asrs	r1, r1, #2
 8004d82:	6843      	ldr	r3, [r0, #4]
 8004d84:	f8ca 1000 	str.w	r1, [sl]
 8004d88:	f8db 5004 	ldr.w	r5, [fp, #4]
 8004d8c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004d90:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004d94:	18ce      	adds	r6, r1, r3
 8004d96:	4428      	add	r0, r5
 8004d98:	1835      	adds	r5, r6, r0
 8004d9a:	10ad      	asrs	r5, r5, #2
 8004d9c:	f8ca 5004 	str.w	r5, [sl, #4]
 8004da0:	1ac9      	subs	r1, r1, r3
 8004da2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004da6:	ebc4 040c 	rsb	r4, r4, ip
 8004daa:	469c      	mov	ip, r3
 8004dac:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004db0:	f8de 5000 	ldr.w	r5, [lr]
 8004db4:	ebc3 0c0c 	rsb	ip, r3, ip
 8004db8:	f8db 3000 	ldr.w	r3, [fp]
 8004dbc:	1aba      	subs	r2, r7, r2
 8004dbe:	1b5b      	subs	r3, r3, r5
 8004dc0:	ebcc 0504 	rsb	r5, ip, r4
 8004dc4:	44a4      	add	ip, r4
 8004dc6:	18cc      	adds	r4, r1, r3
 8004dc8:	1acb      	subs	r3, r1, r3
 8004dca:	9903      	ldr	r1, [sp, #12]
 8004dcc:	1a30      	subs	r0, r6, r0
 8004dce:	fb85 6701 	smull	r6, r7, r5, r1
 8004dd2:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8004dd6:	9e08      	ldr	r6, [sp, #32]
 8004dd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dda:	fb84 8906 	smull	r8, r9, r4, r6
 8004dde:	ebc9 0101 	rsb	r1, r9, r1
 8004de2:	910e      	str	r1, [sp, #56]	; 0x38
 8004de4:	9904      	ldr	r1, [sp, #16]
 8004de6:	9f06      	ldr	r7, [sp, #24]
 8004de8:	4688      	mov	r8, r1
 8004dea:	fb80 6707 	smull	r6, r7, r0, r7
 8004dee:	fb82 8908 	smull	r8, r9, r2, r8
 8004df2:	ebc7 0609 	rsb	r6, r7, r9
 8004df6:	9f06      	ldr	r7, [sp, #24]
 8004df8:	960c      	str	r6, [sp, #48]	; 0x30
 8004dfa:	fb82 6707 	smull	r6, r7, r2, r7
 8004dfe:	9a03      	ldr	r2, [sp, #12]
 8004e00:	fb80 0101 	smull	r0, r1, r0, r1
 8004e04:	fb84 8902 	smull	r8, r9, r4, r2
 8004e08:	9c08      	ldr	r4, [sp, #32]
 8004e0a:	187a      	adds	r2, r7, r1
 8004e0c:	fb85 4504 	smull	r4, r5, r5, r4
 8004e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e12:	eb05 0409 	add.w	r4, r5, r9
 8004e16:	fb8c 6701 	smull	r6, r7, ip, r1
 8004e1a:	940f      	str	r4, [sp, #60]	; 0x3c
 8004e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004e20:	fb83 0101 	smull	r0, r1, r3, r1
 8004e24:	fb83 4504 	smull	r4, r5, r3, r4
 8004e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004e2c:	4698      	mov	r8, r3
 8004e2e:	fb8c 8908 	smull	r8, r9, ip, r8
 8004e32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004e34:	1052      	asrs	r2, r2, #1
 8004e36:	f8cb 2004 	str.w	r2, [fp, #4]
 8004e3a:	1a7b      	subs	r3, r7, r1
 8004e3c:	9a02      	ldr	r2, [sp, #8]
 8004e3e:	eb09 0105 	add.w	r1, r9, r5
 8004e42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004e44:	1075      	asrs	r5, r6, #1
 8004e46:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004e48:	f8cb 5000 	str.w	r5, [fp]
 8004e4c:	9d01      	ldr	r5, [sp, #4]
 8004e4e:	1040      	asrs	r0, r0, #1
 8004e50:	105b      	asrs	r3, r3, #1
 8004e52:	4432      	add	r2, r6
 8004e54:	1064      	asrs	r4, r4, #1
 8004e56:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004e58:	6068      	str	r0, [r5, #4]
 8004e5a:	602c      	str	r4, [r5, #0]
 8004e5c:	9202      	str	r2, [sp, #8]
 8004e5e:	f8ce 3000 	str.w	r3, [lr]
 8004e62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e66:	1049      	asrs	r1, r1, #1
 8004e68:	19e8      	adds	r0, r5, r7
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f8ce 1004 	str.w	r1, [lr, #4]
 8004e70:	44ba      	add	sl, r7
 8004e72:	44bb      	add	fp, r7
 8004e74:	9001      	str	r0, [sp, #4]
 8004e76:	44be      	add	lr, r7
 8004e78:	f63f af75 	bhi.w	8004d66 <arm_radix4_butterfly_inverse_q31+0x21a>
 8004e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004e7e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e82:	440a      	add	r2, r1
 8004e84:	9214      	str	r2, [sp, #80]	; 0x50
 8004e86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e88:	3301      	adds	r3, #1
 8004e8a:	3208      	adds	r2, #8
 8004e8c:	9215      	str	r2, [sp, #84]	; 0x54
 8004e8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004e90:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e92:	4293      	cmp	r3, r2
 8004e94:	f67f af38 	bls.w	8004d08 <arm_radix4_butterfly_inverse_q31+0x1bc>
 8004e98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ea2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	931c      	str	r3, [sp, #112]	; 0x70
 8004ea8:	9210      	str	r2, [sp, #64]	; 0x40
 8004eaa:	f63f af15 	bhi.w	8004cd8 <arm_radix4_butterfly_inverse_q31+0x18c>
 8004eae:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004eb0:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8004eb4:	3020      	adds	r0, #32
 8004eb6:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8004eba:	f850 1c18 	ldr.w	r1, [r0, #-24]
 8004ebe:	f850 3c14 	ldr.w	r3, [r0, #-20]
 8004ec2:	f850 9c1c 	ldr.w	r9, [r0, #-28]
 8004ec6:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8004eca:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8004ece:	eb02 0e01 	add.w	lr, r2, r1
 8004ed2:	1a57      	subs	r7, r2, r1
 8004ed4:	1ad6      	subs	r6, r2, r3
 8004ed6:	441a      	add	r2, r3
 8004ed8:	f850 4c08 	ldr.w	r4, [r0, #-8]
 8004edc:	f850 bc04 	ldr.w	fp, [r0, #-4]
 8004ee0:	eb09 0503 	add.w	r5, r9, r3
 8004ee4:	44d6      	add	lr, sl
 8004ee6:	4457      	add	r7, sl
 8004ee8:	ebca 0606 	rsb	r6, sl, r6
 8004eec:	ebc3 0309 	rsb	r3, r3, r9
 8004ef0:	ebca 0a02 	rsb	sl, sl, r2
 8004ef4:	eb09 0201 	add.w	r2, r9, r1
 8004ef8:	ebc1 0109 	rsb	r1, r1, r9
 8004efc:	4463      	add	r3, ip
 8004efe:	4465      	add	r5, ip
 8004f00:	ebcc 0202 	rsb	r2, ip, r2
 8004f04:	ebcc 0c01 	rsb	ip, ip, r1
 8004f08:	445e      	add	r6, fp
 8004f0a:	ebcb 0a0a 	rsb	sl, fp, sl
 8004f0e:	445d      	add	r5, fp
 8004f10:	eb0e 0104 	add.w	r1, lr, r4
 8004f14:	ebcb 0b03 	rsb	fp, fp, r3
 8004f18:	1b3f      	subs	r7, r7, r4
 8004f1a:	1b12      	subs	r2, r2, r4
 8004f1c:	eb0c 0304 	add.w	r3, ip, r4
 8004f20:	f1b8 0801 	subs.w	r8, r8, #1
 8004f24:	f840 1c20 	str.w	r1, [r0, #-32]
 8004f28:	f840 7c18 	str.w	r7, [r0, #-24]
 8004f2c:	f840 6c10 	str.w	r6, [r0, #-16]
 8004f30:	f840 ac08 	str.w	sl, [r0, #-8]
 8004f34:	f840 5c1c 	str.w	r5, [r0, #-28]
 8004f38:	f840 bc14 	str.w	fp, [r0, #-20]
 8004f3c:	f840 2c0c 	str.w	r2, [r0, #-12]
 8004f40:	f840 3c04 	str.w	r3, [r0, #-4]
 8004f44:	f100 0020 	add.w	r0, r0, #32
 8004f48:	d1b5      	bne.n	8004eb6 <arm_radix4_butterfly_inverse_q31+0x36a>
 8004f4a:	b021      	add	sp, #132	; 0x84
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f50 <arm_fir_q31>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	4607      	mov	r7, r0
 8004f56:	883c      	ldrh	r4, [r7, #0]
 8004f58:	b095      	sub	sp, #84	; 0x54
 8004f5a:	4626      	mov	r6, r4
 8004f5c:	9012      	str	r0, [sp, #72]	; 0x48
 8004f5e:	48a3      	ldr	r0, [pc, #652]	; (80051ec <arm_fir_q31+0x29c>)
 8004f60:	940f      	str	r4, [sp, #60]	; 0x3c
 8004f62:	fba0 5403 	umull	r5, r4, r0, r3
 8004f66:	4635      	mov	r5, r6
 8004f68:	fba0 5005 	umull	r5, r0, r0, r5
 8004f6c:	0840      	lsrs	r0, r0, #1
 8004f6e:	0864      	lsrs	r4, r4, #1
 8004f70:	9006      	str	r0, [sp, #24]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	0065      	lsls	r5, r4, #1
 8004f76:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f78:	4628      	mov	r0, r5
 8004f7a:	9513      	str	r5, [sp, #76]	; 0x4c
 8004f7c:	4625      	mov	r5, r4
 8004f7e:	9411      	str	r4, [sp, #68]	; 0x44
 8004f80:	1904      	adds	r4, r0, r4
 8004f82:	9806      	ldr	r0, [sp, #24]
 8004f84:	1b1c      	subs	r4, r3, r4
 8004f86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004f8a:	f106 4c80 	add.w	ip, r6, #1073741824	; 0x40000000
 8004f8e:	9410      	str	r4, [sp, #64]	; 0x40
 8004f90:	1a34      	subs	r4, r6, r0
 8004f92:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004f98:	9408      	str	r4, [sp, #32]
 8004f9a:	68bc      	ldr	r4, [r7, #8]
 8004f9c:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 8004fa0:	910d      	str	r1, [sp, #52]	; 0x34
 8004fa2:	920e      	str	r2, [sp, #56]	; 0x38
 8004fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa6:	4627      	mov	r7, r4
 8004fa8:	9407      	str	r4, [sp, #28]
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	f000 80b2 	beq.w	8005114 <arm_fir_q31+0x1c4>
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	4633      	mov	r3, r6
 8004fbc:	0080      	lsls	r0, r0, #2
 8004fbe:	900a      	str	r0, [sp, #40]	; 0x28
 8004fc0:	f101 0b0c 	add.w	fp, r1, #12
 8004fc4:	1838      	adds	r0, r7, r0
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	9503      	str	r5, [sp, #12]
 8004fca:	9009      	str	r0, [sp, #36]	; 0x24
 8004fcc:	9302      	str	r3, [sp, #8]
 8004fce:	f8cd b004 	str.w	fp, [sp, #4]
 8004fd2:	9a01      	ldr	r2, [sp, #4]
 8004fd4:	9c00      	ldr	r4, [sp, #0]
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	f852 3c0c 	ldr.w	r3, [r2, #-12]
 8004fdc:	9d02      	ldr	r5, [sp, #8]
 8004fde:	f844 3c0c 	str.w	r3, [r4, #-12]
 8004fe2:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f844 3c08 	str.w	r3, [r4, #-8]
 8004fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff0:	9906      	ldr	r1, [sp, #24]
 8004ff2:	f844 3c04 	str.w	r3, [r4, #-4]
 8004ff6:	f855 9c08 	ldr.w	r9, [r5, #-8]
 8004ffa:	f855 8c04 	ldr.w	r8, [r5, #-4]
 8004ffe:	f04f 0a00 	mov.w	sl, #0
 8005002:	f04f 0b00 	mov.w	fp, #0
 8005006:	2900      	cmp	r1, #0
 8005008:	f000 80e5 	beq.w	80051d6 <arm_fir_q31+0x286>
 800500c:	f105 030c 	add.w	r3, r5, #12
 8005010:	468e      	mov	lr, r1
 8005012:	4654      	mov	r4, sl
 8005014:	465d      	mov	r5, fp
 8005016:	4656      	mov	r6, sl
 8005018:	465f      	mov	r7, fp
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	461a      	mov	r2, r3
 8005022:	9b07      	ldr	r3, [sp, #28]
 8005024:	330c      	adds	r3, #12
 8005026:	f853 8c0c 	ldr.w	r8, [r3, #-12]
 800502a:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 800502e:	fbc8 ab01 	smlal	sl, fp, r8, r1
 8005032:	fbc0 6708 	smlal	r6, r7, r0, r8
 8005036:	fbcc 4508 	smlal	r4, r5, ip, r8
 800503a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800503e:	f853 8c08 	ldr.w	r8, [r3, #-8]
 8005042:	f1be 0e01 	subs.w	lr, lr, #1
 8005046:	fbc8 ab00 	smlal	sl, fp, r8, r0
 800504a:	fbc8 670c 	smlal	r6, r7, r8, ip
 800504e:	fbc1 4508 	smlal	r4, r5, r1, r8
 8005052:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005056:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800505a:	f102 020c 	add.w	r2, r2, #12
 800505e:	fbc8 ab0c 	smlal	sl, fp, r8, ip
 8005062:	f103 030c 	add.w	r3, r3, #12
 8005066:	fbc8 6701 	smlal	r6, r7, r8, r1
 800506a:	fbc0 4508 	smlal	r4, r5, r0, r8
 800506e:	d1da      	bne.n	8005026 <arm_fir_q31+0xd6>
 8005070:	4622      	mov	r2, r4
 8005072:	462b      	mov	r3, r5
 8005074:	4634      	mov	r4, r6
 8005076:	463d      	mov	r5, r7
 8005078:	4656      	mov	r6, sl
 800507a:	465f      	mov	r7, fp
 800507c:	4692      	mov	sl, r2
 800507e:	469b      	mov	fp, r3
 8005080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005082:	9b02      	ldr	r3, [sp, #8]
 8005084:	4680      	mov	r8, r0
 8005086:	4413      	add	r3, r2
 8005088:	4689      	mov	r9, r1
 800508a:	4618      	mov	r0, r3
 800508c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8005090:	9b08      	ldr	r3, [sp, #32]
 8005092:	b173      	cbz	r3, 80050b2 <arm_fir_q31+0x162>
 8005094:	461a      	mov	r2, r3
 8005096:	f85e 3b04 	ldr.w	r3, [lr], #4
 800509a:	f850 1b04 	ldr.w	r1, [r0], #4
 800509e:	3a01      	subs	r2, #1
 80050a0:	fbc3 6709 	smlal	r6, r7, r3, r9
 80050a4:	fbc8 4503 	smlal	r4, r5, r8, r3
 80050a8:	46c1      	mov	r9, r8
 80050aa:	fbc1 ab03 	smlal	sl, fp, r1, r3
 80050ae:	4688      	mov	r8, r1
 80050b0:	d1f1      	bne.n	8005096 <arm_fir_q31+0x146>
 80050b2:	9800      	ldr	r0, [sp, #0]
 80050b4:	0fe2      	lsrs	r2, r4, #31
 80050b6:	300c      	adds	r0, #12
 80050b8:	9c04      	ldr	r4, [sp, #16]
 80050ba:	0ff3      	lsrs	r3, r6, #31
 80050bc:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 80050c0:	9000      	str	r0, [sp, #0]
 80050c2:	9801      	ldr	r0, [sp, #4]
 80050c4:	f844 3c0c 	str.w	r3, [r4, #-12]
 80050c8:	f104 030c 	add.w	r3, r4, #12
 80050cc:	300c      	adds	r0, #12
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	9b03      	ldr	r3, [sp, #12]
 80050d2:	ea4f 71da 	mov.w	r1, sl, lsr #31
 80050d6:	9001      	str	r0, [sp, #4]
 80050d8:	9805      	ldr	r0, [sp, #20]
 80050da:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80050de:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
 80050e2:	3b01      	subs	r3, #1
 80050e4:	9002      	str	r0, [sp, #8]
 80050e6:	f844 2c08 	str.w	r2, [r4, #-8]
 80050ea:	f844 1c04 	str.w	r1, [r4, #-4]
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	f47f af6f 	bne.w	8004fd2 <arm_fir_q31+0x82>
 80050f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80050f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050f8:	4413      	add	r3, r2
 80050fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	920c      	str	r2, [sp, #48]	; 0x30
 8005102:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005104:	441a      	add	r2, r3
 8005106:	920d      	str	r2, [sp, #52]	; 0x34
 8005108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800510a:	441a      	add	r2, r3
 800510c:	920b      	str	r2, [sp, #44]	; 0x2c
 800510e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005110:	441a      	add	r2, r3
 8005112:	920e      	str	r2, [sp, #56]	; 0x38
 8005114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005116:	b353      	cbz	r3, 800516e <arm_fir_q31+0x21e>
 8005118:	461f      	mov	r7, r3
 800511a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800511c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8005120:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005124:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8005128:	f1a3 0c04 	sub.w	ip, r3, #4
 800512c:	e898 0b00 	ldmia.w	r8, {r8, r9, fp}
 8005130:	465b      	mov	r3, fp
 8005132:	4654      	mov	r4, sl
 8005134:	4672      	mov	r2, lr
 8005136:	f858 5b04 	ldr.w	r5, [r8], #4
 800513a:	2000      	movs	r0, #0
 800513c:	2100      	movs	r1, #0
 800513e:	f84c 5f04 	str.w	r5, [ip, #4]!
 8005142:	f852 6b04 	ldr.w	r6, [r2], #4
 8005146:	f854 5b04 	ldr.w	r5, [r4], #4
 800514a:	3b01      	subs	r3, #1
 800514c:	fbc5 0106 	smlal	r0, r1, r5, r6
 8005150:	d1f7      	bne.n	8005142 <arm_fir_q31+0x1f2>
 8005152:	0fc3      	lsrs	r3, r0, #31
 8005154:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005158:	3f01      	subs	r7, #1
 800515a:	f10e 0e04 	add.w	lr, lr, #4
 800515e:	f849 3b04 	str.w	r3, [r9], #4
 8005162:	d1e5      	bne.n	8005130 <arm_fir_q31+0x1e0>
 8005164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005166:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005168:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800516c:	930b      	str	r3, [sp, #44]	; 0x2c
 800516e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005170:	1e59      	subs	r1, r3, #1
 8005172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005174:	088e      	lsrs	r6, r1, #2
 8005176:	685c      	ldr	r4, [r3, #4]
 8005178:	d01f      	beq.n	80051ba <arm_fir_q31+0x26a>
 800517a:	4630      	mov	r0, r6
 800517c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800517e:	f104 0210 	add.w	r2, r4, #16
 8005182:	3310      	adds	r3, #16
 8005184:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8005188:	3801      	subs	r0, #1
 800518a:	f842 5c10 	str.w	r5, [r2, #-16]
 800518e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005192:	f102 0210 	add.w	r2, r2, #16
 8005196:	f842 5c1c 	str.w	r5, [r2, #-28]
 800519a:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800519e:	f103 0310 	add.w	r3, r3, #16
 80051a2:	f842 5c18 	str.w	r5, [r2, #-24]
 80051a6:	f853 5c14 	ldr.w	r5, [r3, #-20]
 80051aa:	f842 5c14 	str.w	r5, [r2, #-20]
 80051ae:	d1e9      	bne.n	8005184 <arm_fir_q31+0x234>
 80051b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051b2:	0133      	lsls	r3, r6, #4
 80051b4:	441a      	add	r2, r3
 80051b6:	441c      	add	r4, r3
 80051b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80051ba:	f011 0303 	ands.w	r3, r1, #3
 80051be:	d007      	beq.n	80051d0 <arm_fir_q31+0x280>
 80051c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c2:	1f22      	subs	r2, r4, #4
 80051c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80051c8:	3b01      	subs	r3, #1
 80051ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80051ce:	d1f9      	bne.n	80051c4 <arm_fir_q31+0x274>
 80051d0:	b015      	add	sp, #84	; 0x54
 80051d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d6:	f100 030c 	add.w	r3, r0, #12
 80051da:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80051de:	4654      	mov	r4, sl
 80051e0:	465d      	mov	r5, fp
 80051e2:	4656      	mov	r6, sl
 80051e4:	465f      	mov	r7, fp
 80051e6:	9305      	str	r3, [sp, #20]
 80051e8:	e752      	b.n	8005090 <arm_fir_q31+0x140>
 80051ea:	bf00      	nop
 80051ec:	aaaaaaab 	.word	0xaaaaaaab

080051f0 <arm_fir_init_q31>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4604      	mov	r4, r0
 80051f4:	461d      	mov	r5, r3
 80051f6:	9804      	ldr	r0, [sp, #16]
 80051f8:	60a2      	str	r2, [r4, #8]
 80051fa:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80051fe:	3a01      	subs	r2, #1
 8005200:	440a      	add	r2, r1
 8005202:	8021      	strh	r1, [r4, #0]
 8005204:	0092      	lsls	r2, r2, #2
 8005206:	4618      	mov	r0, r3
 8005208:	2100      	movs	r1, #0
 800520a:	f000 f9f9 	bl	8005600 <memset>
 800520e:	6065      	str	r5, [r4, #4]
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	bf00      	nop

08005214 <arm_cmplx_mag_q31>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	0893      	lsrs	r3, r2, #2
 800521a:	b085      	sub	sp, #20
 800521c:	e88d 0005 	stmia.w	sp, {r0, r2}
 8005220:	460e      	mov	r6, r1
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	d053      	beq.n	80052ce <arm_cmplx_mag_q31+0xba>
 8005226:	461f      	mov	r7, r3
 8005228:	460d      	mov	r5, r1
 800522a:	46ba      	mov	sl, r7
 800522c:	f100 0420 	add.w	r4, r0, #32
 8005230:	9103      	str	r1, [sp, #12]
 8005232:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8005236:	f854 0c1c 	ldr.w	r0, [r4, #-28]
 800523a:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800523e:	f854 2c18 	ldr.w	r2, [r4, #-24]
 8005242:	fb83 8903 	smull	r8, r9, r3, r3
 8005246:	fb80 0100 	smull	r0, r1, r0, r0
 800524a:	fb82 2302 	smull	r2, r3, r2, r2
 800524e:	fb86 6706 	smull	r6, r7, r6, r6
 8005252:	ea4f 0269 	mov.w	r2, r9, asr #1
 8005256:	1048      	asrs	r0, r1, #1
 8005258:	f854 9c04 	ldr.w	r9, [r4, #-4]
 800525c:	f854 8c0c 	ldr.w	r8, [r4, #-12]
 8005260:	4629      	mov	r1, r5
 8005262:	eb00 0067 	add.w	r0, r0, r7, asr #1
 8005266:	eb02 0763 	add.w	r7, r2, r3, asr #1
 800526a:	f854 bc10 	ldr.w	fp, [r4, #-16]
 800526e:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8005272:	f000 f849 	bl	8005308 <arm_sqrt_q31>
 8005276:	1d29      	adds	r1, r5, #4
 8005278:	4638      	mov	r0, r7
 800527a:	f000 f845 	bl	8005308 <arm_sqrt_q31>
 800527e:	fb89 0109 	smull	r0, r1, r9, r9
 8005282:	fb88 8908 	smull	r8, r9, r8, r8
 8005286:	fb8b 230b 	smull	r2, r3, fp, fp
 800528a:	fb86 6706 	smull	r6, r7, r6, r6
 800528e:	ea4f 0069 	mov.w	r0, r9, asr #1
 8005292:	104e      	asrs	r6, r1, #1
 8005294:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8005298:	f105 0108 	add.w	r1, r5, #8
 800529c:	eb06 0667 	add.w	r6, r6, r7, asr #1
 80052a0:	f000 f832 	bl	8005308 <arm_sqrt_q31>
 80052a4:	f105 010c 	add.w	r1, r5, #12
 80052a8:	4630      	mov	r0, r6
 80052aa:	f000 f82d 	bl	8005308 <arm_sqrt_q31>
 80052ae:	f1ba 0a01 	subs.w	sl, sl, #1
 80052b2:	f104 0420 	add.w	r4, r4, #32
 80052b6:	f105 0510 	add.w	r5, r5, #16
 80052ba:	d1ba      	bne.n	8005232 <arm_cmplx_mag_q31+0x1e>
 80052bc:	9b00      	ldr	r3, [sp, #0]
 80052be:	9a02      	ldr	r2, [sp, #8]
 80052c0:	4619      	mov	r1, r3
 80052c2:	9e03      	ldr	r6, [sp, #12]
 80052c4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	eb06 1602 	add.w	r6, r6, r2, lsl #4
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	f013 0503 	ands.w	r5, r3, #3
 80052d4:	d015      	beq.n	8005302 <arm_cmplx_mag_q31+0xee>
 80052d6:	9c00      	ldr	r4, [sp, #0]
 80052d8:	3408      	adds	r4, #8
 80052da:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80052de:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80052e2:	fb80 0100 	smull	r0, r1, r0, r0
 80052e6:	fb82 2302 	smull	r2, r3, r2, r2
 80052ea:	1048      	asrs	r0, r1, #1
 80052ec:	eb00 0063 	add.w	r0, r0, r3, asr #1
 80052f0:	4631      	mov	r1, r6
 80052f2:	f000 f809 	bl	8005308 <arm_sqrt_q31>
 80052f6:	3d01      	subs	r5, #1
 80052f8:	f106 0604 	add.w	r6, r6, #4
 80052fc:	f104 0408 	add.w	r4, r4, #8
 8005300:	d1eb      	bne.n	80052da <arm_cmplx_mag_q31+0xc6>
 8005302:	b005      	add	sp, #20
 8005304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005308 <arm_sqrt_q31>:
 8005308:	2800      	cmp	r0, #0
 800530a:	dd71      	ble.n	80053f0 <arm_sqrt_q31+0xe8>
 800530c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8005310:	fab0 f580 	clz	r5, r0
 8005314:	1e6e      	subs	r6, r5, #1
 8005316:	f016 0701 	ands.w	r7, r6, #1
 800531a:	bf1a      	itte	ne
 800531c:	1eab      	subne	r3, r5, #2
 800531e:	fa00 f403 	lslne.w	r4, r0, r3
 8005322:	fa00 f406 	lsleq.w	r4, r0, r6
 8005326:	4620      	mov	r0, r4
 8005328:	4688      	mov	r8, r1
 800532a:	f7fb fd17 	bl	8000d5c <__aeabi_i2f>
 800532e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8005332:	f7fb fd67 	bl	8000e04 <__aeabi_fmul>
 8005336:	1043      	asrs	r3, r0, #1
 8005338:	4830      	ldr	r0, [pc, #192]	; (80053fc <arm_sqrt_q31+0xf4>)
 800533a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 800533e:	1ac0      	subs	r0, r0, r3
 8005340:	f7fb fd60 	bl	8000e04 <__aeabi_fmul>
 8005344:	f7fb ff3a 	bl	80011bc <__aeabi_f2iz>
 8005348:	fb80 ab00 	smull	sl, fp, r0, r0
 800534c:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8005350:	ea4f 0e64 	mov.w	lr, r4, asr #1
 8005354:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 8005358:	fb82 230e 	smull	r2, r3, r2, lr
 800535c:	0fd2      	lsrs	r2, r2, #31
 800535e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8005362:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8005366:	fb80 0102 	smull	r0, r1, r0, r2
 800536a:	0fc2      	lsrs	r2, r0, #31
 800536c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005370:	0093      	lsls	r3, r2, #2
 8005372:	fb83 ab03 	smull	sl, fp, r3, r3
 8005376:	ea4f 70da 	mov.w	r0, sl, lsr #31
 800537a:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
 800537e:	fb8e 0100 	smull	r0, r1, lr, r0
 8005382:	0fc2      	lsrs	r2, r0, #31
 8005384:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005388:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 800538c:	fb83 2302 	smull	r2, r3, r3, r2
 8005390:	0fd2      	lsrs	r2, r2, #31
 8005392:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8005396:	0093      	lsls	r3, r2, #2
 8005398:	fb83 0103 	smull	r0, r1, r3, r3
 800539c:	0fc0      	lsrs	r0, r0, #31
 800539e:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 80053a2:	fb8e 0100 	smull	r0, r1, lr, r0
 80053a6:	0fc2      	lsrs	r2, r0, #31
 80053a8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80053ac:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 80053b0:	fb83 2302 	smull	r2, r3, r3, r2
 80053b4:	0fd0      	lsrs	r0, r2, #31
 80053b6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80053ba:	0080      	lsls	r0, r0, #2
 80053bc:	fb84 0100 	smull	r0, r1, r4, r0
 80053c0:	0fc3      	lsrs	r3, r0, #31
 80053c2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	b157      	cbz	r7, 80053e0 <arm_sqrt_q31+0xd8>
 80053ca:	3d02      	subs	r5, #2
 80053cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053d0:	106d      	asrs	r5, r5, #1
 80053d2:	412b      	asrs	r3, r5
 80053d4:	f8c8 3000 	str.w	r3, [r8]
 80053d8:	2000      	movs	r0, #0
 80053da:	b240      	sxtb	r0, r0
 80053dc:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80053e0:	1076      	asrs	r6, r6, #1
 80053e2:	4133      	asrs	r3, r6
 80053e4:	f8c8 3000 	str.w	r3, [r8]
 80053e8:	2000      	movs	r0, #0
 80053ea:	b240      	sxtb	r0, r0
 80053ec:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80053f0:	2300      	movs	r3, #0
 80053f2:	20ff      	movs	r0, #255	; 0xff
 80053f4:	600b      	str	r3, [r1, #0]
 80053f6:	b240      	sxtb	r0, r0
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	5f3759df 	.word	0x5f3759df

08005400 <arm_scale_q31>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	b089      	sub	sp, #36	; 0x24
 8005406:	3201      	adds	r2, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800540c:	fa4f fc82 	sxtb.w	ip, r2
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	f1bc 0f00 	cmp.w	ip, #0
 8005416:	4683      	mov	fp, r0
 8005418:	468a      	mov	sl, r1
 800541a:	9306      	str	r3, [sp, #24]
 800541c:	da48      	bge.n	80054b0 <arm_scale_q31+0xb0>
 800541e:	b39b      	cbz	r3, 8005488 <arm_scale_q31+0x88>
 8005420:	9b05      	ldr	r3, [sp, #20]
 8005422:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005426:	f1cc 0100 	rsb	r1, ip, #0
 800542a:	f100 0210 	add.w	r2, r0, #16
 800542e:	3310      	adds	r3, #16
 8005430:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8005434:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8005438:	fb86 670a 	smull	r6, r7, r6, sl
 800543c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005440:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8005444:	fb85 890a 	smull	r8, r9, r5, sl
 8005448:	fb84 450a 	smull	r4, r5, r4, sl
 800544c:	fa47 f401 	asr.w	r4, r7, r1
 8005450:	fb80 670a 	smull	r6, r7, r0, sl
 8005454:	410d      	asrs	r5, r1
 8005456:	fa49 f601 	asr.w	r6, r9, r1
 800545a:	fa47 f001 	asr.w	r0, r7, r1
 800545e:	f1be 0e01 	subs.w	lr, lr, #1
 8005462:	f843 4c10 	str.w	r4, [r3, #-16]
 8005466:	f843 6c0c 	str.w	r6, [r3, #-12]
 800546a:	f843 5c08 	str.w	r5, [r3, #-8]
 800546e:	f843 0c04 	str.w	r0, [r3, #-4]
 8005472:	f102 0210 	add.w	r2, r2, #16
 8005476:	f103 0310 	add.w	r3, r3, #16
 800547a:	d1d9      	bne.n	8005430 <arm_scale_q31+0x30>
 800547c:	9b06      	ldr	r3, [sp, #24]
 800547e:	9a05      	ldr	r2, [sp, #20]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	441a      	add	r2, r3
 8005484:	449b      	add	fp, r3
 8005486:	9205      	str	r2, [sp, #20]
 8005488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800548a:	f013 0103 	ands.w	r1, r3, #3
 800548e:	d00c      	beq.n	80054aa <arm_scale_q31+0xaa>
 8005490:	9805      	ldr	r0, [sp, #20]
 8005492:	f1cc 0c00 	rsb	ip, ip, #0
 8005496:	f85b 2b04 	ldr.w	r2, [fp], #4
 800549a:	3901      	subs	r1, #1
 800549c:	fb82 230a 	smull	r2, r3, r2, sl
 80054a0:	fa43 f30c 	asr.w	r3, r3, ip
 80054a4:	f840 3b04 	str.w	r3, [r0], #4
 80054a8:	d1f5      	bne.n	8005496 <arm_scale_q31+0x96>
 80054aa:	b009      	add	sp, #36	; 0x24
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d060      	beq.n	8005576 <arm_scale_q31+0x176>
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	9b05      	ldr	r3, [sp, #20]
 80054b8:	f100 0210 	add.w	r2, r0, #16
 80054bc:	f103 0910 	add.w	r9, r3, #16
 80054c0:	9201      	str	r2, [sp, #4]
 80054c2:	9007      	str	r0, [sp, #28]
 80054c4:	9b01      	ldr	r3, [sp, #4]
 80054c6:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80054ca:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80054ce:	fb86 670a 	smull	r6, r7, r6, sl
 80054d2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80054d6:	fb84 450a 	smull	r4, r5, r4, sl
 80054da:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80054de:	fb80 010a 	smull	r0, r1, r0, sl
 80054e2:	17fe      	asrs	r6, r7, #31
 80054e4:	fb83 230a 	smull	r2, r3, r3, sl
 80054e8:	f086 4e00 	eor.w	lr, r6, #2147483648	; 0x80000000
 80054ec:	ea6f 0e0e 	mvn.w	lr, lr
 80054f0:	17ec      	asrs	r4, r5, #31
 80054f2:	17c8      	asrs	r0, r1, #31
 80054f4:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 80054f8:	43e4      	mvns	r4, r4
 80054fa:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80054fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005502:	43c0      	mvns	r0, r0
 8005504:	17db      	asrs	r3, r3, #31
 8005506:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800550a:	43db      	mvns	r3, r3
 800550c:	fa07 f60c 	lsl.w	r6, r7, ip
 8005510:	fa46 f80c 	asr.w	r8, r6, ip
 8005514:	45b8      	cmp	r8, r7
 8005516:	bf18      	it	ne
 8005518:	4676      	movne	r6, lr
 800551a:	fa05 f80c 	lsl.w	r8, r5, ip
 800551e:	fa01 fe0c 	lsl.w	lr, r1, ip
 8005522:	9f03      	ldr	r7, [sp, #12]
 8005524:	fa48 fb0c 	asr.w	fp, r8, ip
 8005528:	45ab      	cmp	fp, r5
 800552a:	bf08      	it	eq
 800552c:	4644      	moveq	r4, r8
 800552e:	fa4e f50c 	asr.w	r5, lr, ip
 8005532:	428d      	cmp	r5, r1
 8005534:	bf08      	it	eq
 8005536:	4670      	moveq	r0, lr
 8005538:	fa07 f70c 	lsl.w	r7, r7, ip
 800553c:	9d03      	ldr	r5, [sp, #12]
 800553e:	fa47 f10c 	asr.w	r1, r7, ip
 8005542:	42a9      	cmp	r1, r5
 8005544:	bf08      	it	eq
 8005546:	463b      	moveq	r3, r7
 8005548:	9a01      	ldr	r2, [sp, #4]
 800554a:	e909 0009 	stmdb	r9, {r0, r3}
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	3210      	adds	r2, #16
 8005552:	3b01      	subs	r3, #1
 8005554:	f849 6c10 	str.w	r6, [r9, #-16]
 8005558:	f849 4c0c 	str.w	r4, [r9, #-12]
 800555c:	9201      	str	r2, [sp, #4]
 800555e:	f109 0910 	add.w	r9, r9, #16
 8005562:	9304      	str	r3, [sp, #16]
 8005564:	d1ae      	bne.n	80054c4 <arm_scale_q31+0xc4>
 8005566:	9b06      	ldr	r3, [sp, #24]
 8005568:	9a05      	ldr	r2, [sp, #20]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005570:	441a      	add	r2, r3
 8005572:	449b      	add	fp, r3
 8005574:	9205      	str	r2, [sp, #20]
 8005576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005578:	f013 0003 	ands.w	r0, r3, #3
 800557c:	d095      	beq.n	80054aa <arm_scale_q31+0xaa>
 800557e:	9905      	ldr	r1, [sp, #20]
 8005580:	f85b 4b04 	ldr.w	r4, [fp], #4
 8005584:	fb84 450a 	smull	r4, r5, r4, sl
 8005588:	17eb      	asrs	r3, r5, #31
 800558a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800558e:	43db      	mvns	r3, r3
 8005590:	fa05 f20c 	lsl.w	r2, r5, ip
 8005594:	fa42 f40c 	asr.w	r4, r2, ip
 8005598:	42ac      	cmp	r4, r5
 800559a:	bf08      	it	eq
 800559c:	4613      	moveq	r3, r2
 800559e:	3801      	subs	r0, #1
 80055a0:	f841 3b04 	str.w	r3, [r1], #4
 80055a4:	d1ec      	bne.n	8005580 <arm_scale_q31+0x180>
 80055a6:	b009      	add	sp, #36	; 0x24
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055ac <__errno>:
 80055ac:	4b01      	ldr	r3, [pc, #4]	; (80055b4 <__errno+0x8>)
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000010 	.word	0x20000010

080055b8 <__libc_init_array>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	2600      	movs	r6, #0
 80055bc:	4d0c      	ldr	r5, [pc, #48]	; (80055f0 <__libc_init_array+0x38>)
 80055be:	4c0d      	ldr	r4, [pc, #52]	; (80055f4 <__libc_init_array+0x3c>)
 80055c0:	1b64      	subs	r4, r4, r5
 80055c2:	10a4      	asrs	r4, r4, #2
 80055c4:	42a6      	cmp	r6, r4
 80055c6:	d109      	bne.n	80055dc <__libc_init_array+0x24>
 80055c8:	f003 fcae 	bl	8008f28 <_init>
 80055cc:	2600      	movs	r6, #0
 80055ce:	4d0a      	ldr	r5, [pc, #40]	; (80055f8 <__libc_init_array+0x40>)
 80055d0:	4c0a      	ldr	r4, [pc, #40]	; (80055fc <__libc_init_array+0x44>)
 80055d2:	1b64      	subs	r4, r4, r5
 80055d4:	10a4      	asrs	r4, r4, #2
 80055d6:	42a6      	cmp	r6, r4
 80055d8:	d105      	bne.n	80055e6 <__libc_init_array+0x2e>
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e0:	4798      	blx	r3
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7ee      	b.n	80055c4 <__libc_init_array+0xc>
 80055e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ea:	4798      	blx	r3
 80055ec:	3601      	adds	r6, #1
 80055ee:	e7f2      	b.n	80055d6 <__libc_init_array+0x1e>
 80055f0:	08009aec 	.word	0x08009aec
 80055f4:	08009aec 	.word	0x08009aec
 80055f8:	08009aec 	.word	0x08009aec
 80055fc:	08009af0 	.word	0x08009af0

08005600 <memset>:
 8005600:	4603      	mov	r3, r0
 8005602:	4402      	add	r2, r0
 8005604:	4293      	cmp	r3, r2
 8005606:	d100      	bne.n	800560a <memset+0xa>
 8005608:	4770      	bx	lr
 800560a:	f803 1b01 	strb.w	r1, [r3], #1
 800560e:	e7f9      	b.n	8005604 <memset+0x4>

08005610 <__cvt>:
 8005610:	2b00      	cmp	r3, #0
 8005612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005616:	461f      	mov	r7, r3
 8005618:	bfbb      	ittet	lt
 800561a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800561e:	461f      	movlt	r7, r3
 8005620:	2300      	movge	r3, #0
 8005622:	232d      	movlt	r3, #45	; 0x2d
 8005624:	b088      	sub	sp, #32
 8005626:	4614      	mov	r4, r2
 8005628:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800562a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800562c:	7013      	strb	r3, [r2, #0]
 800562e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005630:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005634:	f023 0820 	bic.w	r8, r3, #32
 8005638:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800563c:	d005      	beq.n	800564a <__cvt+0x3a>
 800563e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005642:	d100      	bne.n	8005646 <__cvt+0x36>
 8005644:	3501      	adds	r5, #1
 8005646:	2302      	movs	r3, #2
 8005648:	e000      	b.n	800564c <__cvt+0x3c>
 800564a:	2303      	movs	r3, #3
 800564c:	aa07      	add	r2, sp, #28
 800564e:	9204      	str	r2, [sp, #16]
 8005650:	aa06      	add	r2, sp, #24
 8005652:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005656:	e9cd 3500 	strd	r3, r5, [sp]
 800565a:	4622      	mov	r2, r4
 800565c:	463b      	mov	r3, r7
 800565e:	f000 fcc3 	bl	8005fe8 <_dtoa_r>
 8005662:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005666:	4606      	mov	r6, r0
 8005668:	d102      	bne.n	8005670 <__cvt+0x60>
 800566a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800566c:	07db      	lsls	r3, r3, #31
 800566e:	d522      	bpl.n	80056b6 <__cvt+0xa6>
 8005670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005674:	eb06 0905 	add.w	r9, r6, r5
 8005678:	d110      	bne.n	800569c <__cvt+0x8c>
 800567a:	7833      	ldrb	r3, [r6, #0]
 800567c:	2b30      	cmp	r3, #48	; 0x30
 800567e:	d10a      	bne.n	8005696 <__cvt+0x86>
 8005680:	2200      	movs	r2, #0
 8005682:	2300      	movs	r3, #0
 8005684:	4620      	mov	r0, r4
 8005686:	4639      	mov	r1, r7
 8005688:	f7fb f9ee 	bl	8000a68 <__aeabi_dcmpeq>
 800568c:	b918      	cbnz	r0, 8005696 <__cvt+0x86>
 800568e:	f1c5 0501 	rsb	r5, r5, #1
 8005692:	f8ca 5000 	str.w	r5, [sl]
 8005696:	f8da 3000 	ldr.w	r3, [sl]
 800569a:	4499      	add	r9, r3
 800569c:	2200      	movs	r2, #0
 800569e:	2300      	movs	r3, #0
 80056a0:	4620      	mov	r0, r4
 80056a2:	4639      	mov	r1, r7
 80056a4:	f7fb f9e0 	bl	8000a68 <__aeabi_dcmpeq>
 80056a8:	b108      	cbz	r0, 80056ae <__cvt+0x9e>
 80056aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80056ae:	2230      	movs	r2, #48	; 0x30
 80056b0:	9b07      	ldr	r3, [sp, #28]
 80056b2:	454b      	cmp	r3, r9
 80056b4:	d307      	bcc.n	80056c6 <__cvt+0xb6>
 80056b6:	4630      	mov	r0, r6
 80056b8:	9b07      	ldr	r3, [sp, #28]
 80056ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80056bc:	1b9b      	subs	r3, r3, r6
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	b008      	add	sp, #32
 80056c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	9107      	str	r1, [sp, #28]
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e7f0      	b.n	80056b0 <__cvt+0xa0>

080056ce <__exponent>:
 80056ce:	4603      	mov	r3, r0
 80056d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d2:	2900      	cmp	r1, #0
 80056d4:	f803 2b02 	strb.w	r2, [r3], #2
 80056d8:	bfb6      	itet	lt
 80056da:	222d      	movlt	r2, #45	; 0x2d
 80056dc:	222b      	movge	r2, #43	; 0x2b
 80056de:	4249      	neglt	r1, r1
 80056e0:	2909      	cmp	r1, #9
 80056e2:	7042      	strb	r2, [r0, #1]
 80056e4:	dd2b      	ble.n	800573e <__exponent+0x70>
 80056e6:	f10d 0407 	add.w	r4, sp, #7
 80056ea:	46a4      	mov	ip, r4
 80056ec:	270a      	movs	r7, #10
 80056ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80056f2:	460a      	mov	r2, r1
 80056f4:	46a6      	mov	lr, r4
 80056f6:	fb07 1516 	mls	r5, r7, r6, r1
 80056fa:	2a63      	cmp	r2, #99	; 0x63
 80056fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005700:	4631      	mov	r1, r6
 8005702:	f104 34ff 	add.w	r4, r4, #4294967295
 8005706:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800570a:	dcf0      	bgt.n	80056ee <__exponent+0x20>
 800570c:	3130      	adds	r1, #48	; 0x30
 800570e:	f1ae 0502 	sub.w	r5, lr, #2
 8005712:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005716:	4629      	mov	r1, r5
 8005718:	1c44      	adds	r4, r0, #1
 800571a:	4561      	cmp	r1, ip
 800571c:	d30a      	bcc.n	8005734 <__exponent+0x66>
 800571e:	f10d 0209 	add.w	r2, sp, #9
 8005722:	eba2 020e 	sub.w	r2, r2, lr
 8005726:	4565      	cmp	r5, ip
 8005728:	bf88      	it	hi
 800572a:	2200      	movhi	r2, #0
 800572c:	4413      	add	r3, r2
 800572e:	1a18      	subs	r0, r3, r0
 8005730:	b003      	add	sp, #12
 8005732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005734:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005738:	f804 2f01 	strb.w	r2, [r4, #1]!
 800573c:	e7ed      	b.n	800571a <__exponent+0x4c>
 800573e:	2330      	movs	r3, #48	; 0x30
 8005740:	3130      	adds	r1, #48	; 0x30
 8005742:	7083      	strb	r3, [r0, #2]
 8005744:	70c1      	strb	r1, [r0, #3]
 8005746:	1d03      	adds	r3, r0, #4
 8005748:	e7f1      	b.n	800572e <__exponent+0x60>
	...

0800574c <_printf_float>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	b091      	sub	sp, #68	; 0x44
 8005752:	460c      	mov	r4, r1
 8005754:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005758:	4616      	mov	r6, r2
 800575a:	461f      	mov	r7, r3
 800575c:	4605      	mov	r5, r0
 800575e:	f001 fa31 	bl	8006bc4 <_localeconv_r>
 8005762:	6803      	ldr	r3, [r0, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	9309      	str	r3, [sp, #36]	; 0x24
 8005768:	f7fa fd52 	bl	8000210 <strlen>
 800576c:	2300      	movs	r3, #0
 800576e:	930e      	str	r3, [sp, #56]	; 0x38
 8005770:	f8d8 3000 	ldr.w	r3, [r8]
 8005774:	900a      	str	r0, [sp, #40]	; 0x28
 8005776:	3307      	adds	r3, #7
 8005778:	f023 0307 	bic.w	r3, r3, #7
 800577c:	f103 0208 	add.w	r2, r3, #8
 8005780:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005784:	f8d4 b000 	ldr.w	fp, [r4]
 8005788:	f8c8 2000 	str.w	r2, [r8]
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005794:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005798:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800579c:	930b      	str	r3, [sp, #44]	; 0x2c
 800579e:	f04f 32ff 	mov.w	r2, #4294967295
 80057a2:	4640      	mov	r0, r8
 80057a4:	4b9c      	ldr	r3, [pc, #624]	; (8005a18 <_printf_float+0x2cc>)
 80057a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057a8:	f7fb f990 	bl	8000acc <__aeabi_dcmpun>
 80057ac:	bb70      	cbnz	r0, 800580c <_printf_float+0xc0>
 80057ae:	f04f 32ff 	mov.w	r2, #4294967295
 80057b2:	4640      	mov	r0, r8
 80057b4:	4b98      	ldr	r3, [pc, #608]	; (8005a18 <_printf_float+0x2cc>)
 80057b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057b8:	f7fb f96a 	bl	8000a90 <__aeabi_dcmple>
 80057bc:	bb30      	cbnz	r0, 800580c <_printf_float+0xc0>
 80057be:	2200      	movs	r2, #0
 80057c0:	2300      	movs	r3, #0
 80057c2:	4640      	mov	r0, r8
 80057c4:	4651      	mov	r1, sl
 80057c6:	f7fb f959 	bl	8000a7c <__aeabi_dcmplt>
 80057ca:	b110      	cbz	r0, 80057d2 <_printf_float+0x86>
 80057cc:	232d      	movs	r3, #45	; 0x2d
 80057ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d2:	4b92      	ldr	r3, [pc, #584]	; (8005a1c <_printf_float+0x2d0>)
 80057d4:	4892      	ldr	r0, [pc, #584]	; (8005a20 <_printf_float+0x2d4>)
 80057d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80057da:	bf94      	ite	ls
 80057dc:	4698      	movls	r8, r3
 80057de:	4680      	movhi	r8, r0
 80057e0:	2303      	movs	r3, #3
 80057e2:	f04f 0a00 	mov.w	sl, #0
 80057e6:	6123      	str	r3, [r4, #16]
 80057e8:	f02b 0304 	bic.w	r3, fp, #4
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	4633      	mov	r3, r6
 80057f0:	4621      	mov	r1, r4
 80057f2:	4628      	mov	r0, r5
 80057f4:	9700      	str	r7, [sp, #0]
 80057f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80057f8:	f000 f9d4 	bl	8005ba4 <_printf_common>
 80057fc:	3001      	adds	r0, #1
 80057fe:	f040 8090 	bne.w	8005922 <_printf_float+0x1d6>
 8005802:	f04f 30ff 	mov.w	r0, #4294967295
 8005806:	b011      	add	sp, #68	; 0x44
 8005808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580c:	4642      	mov	r2, r8
 800580e:	4653      	mov	r3, sl
 8005810:	4640      	mov	r0, r8
 8005812:	4651      	mov	r1, sl
 8005814:	f7fb f95a 	bl	8000acc <__aeabi_dcmpun>
 8005818:	b148      	cbz	r0, 800582e <_printf_float+0xe2>
 800581a:	f1ba 0f00 	cmp.w	sl, #0
 800581e:	bfb8      	it	lt
 8005820:	232d      	movlt	r3, #45	; 0x2d
 8005822:	4880      	ldr	r0, [pc, #512]	; (8005a24 <_printf_float+0x2d8>)
 8005824:	bfb8      	it	lt
 8005826:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800582a:	4b7f      	ldr	r3, [pc, #508]	; (8005a28 <_printf_float+0x2dc>)
 800582c:	e7d3      	b.n	80057d6 <_printf_float+0x8a>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	d142      	bne.n	80058be <_printf_float+0x172>
 8005838:	2306      	movs	r3, #6
 800583a:	6063      	str	r3, [r4, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	9206      	str	r2, [sp, #24]
 8005840:	aa0e      	add	r2, sp, #56	; 0x38
 8005842:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005846:	aa0d      	add	r2, sp, #52	; 0x34
 8005848:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800584c:	9203      	str	r2, [sp, #12]
 800584e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005852:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	4642      	mov	r2, r8
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	4628      	mov	r0, r5
 8005860:	4653      	mov	r3, sl
 8005862:	910b      	str	r1, [sp, #44]	; 0x2c
 8005864:	f7ff fed4 	bl	8005610 <__cvt>
 8005868:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800586a:	4680      	mov	r8, r0
 800586c:	2947      	cmp	r1, #71	; 0x47
 800586e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005870:	d108      	bne.n	8005884 <_printf_float+0x138>
 8005872:	1cc8      	adds	r0, r1, #3
 8005874:	db02      	blt.n	800587c <_printf_float+0x130>
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	4299      	cmp	r1, r3
 800587a:	dd40      	ble.n	80058fe <_printf_float+0x1b2>
 800587c:	f1a9 0902 	sub.w	r9, r9, #2
 8005880:	fa5f f989 	uxtb.w	r9, r9
 8005884:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005888:	d81f      	bhi.n	80058ca <_printf_float+0x17e>
 800588a:	464a      	mov	r2, r9
 800588c:	3901      	subs	r1, #1
 800588e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005892:	910d      	str	r1, [sp, #52]	; 0x34
 8005894:	f7ff ff1b 	bl	80056ce <__exponent>
 8005898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800589a:	4682      	mov	sl, r0
 800589c:	1813      	adds	r3, r2, r0
 800589e:	2a01      	cmp	r2, #1
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	dc02      	bgt.n	80058aa <_printf_float+0x15e>
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	07d2      	lsls	r2, r2, #31
 80058a8:	d501      	bpl.n	80058ae <_printf_float+0x162>
 80058aa:	3301      	adds	r3, #1
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d09b      	beq.n	80057ee <_printf_float+0xa2>
 80058b6:	232d      	movs	r3, #45	; 0x2d
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	e797      	b.n	80057ee <_printf_float+0xa2>
 80058be:	2947      	cmp	r1, #71	; 0x47
 80058c0:	d1bc      	bne.n	800583c <_printf_float+0xf0>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1ba      	bne.n	800583c <_printf_float+0xf0>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e7b7      	b.n	800583a <_printf_float+0xee>
 80058ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80058ce:	d118      	bne.n	8005902 <_printf_float+0x1b6>
 80058d0:	2900      	cmp	r1, #0
 80058d2:	6863      	ldr	r3, [r4, #4]
 80058d4:	dd0b      	ble.n	80058ee <_printf_float+0x1a2>
 80058d6:	6121      	str	r1, [r4, #16]
 80058d8:	b913      	cbnz	r3, 80058e0 <_printf_float+0x194>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	07d0      	lsls	r0, r2, #31
 80058de:	d502      	bpl.n	80058e6 <_printf_float+0x19a>
 80058e0:	3301      	adds	r3, #1
 80058e2:	440b      	add	r3, r1
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	f04f 0a00 	mov.w	sl, #0
 80058ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80058ec:	e7df      	b.n	80058ae <_printf_float+0x162>
 80058ee:	b913      	cbnz	r3, 80058f6 <_printf_float+0x1aa>
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	07d2      	lsls	r2, r2, #31
 80058f4:	d501      	bpl.n	80058fa <_printf_float+0x1ae>
 80058f6:	3302      	adds	r3, #2
 80058f8:	e7f4      	b.n	80058e4 <_printf_float+0x198>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e7f2      	b.n	80058e4 <_printf_float+0x198>
 80058fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005904:	4299      	cmp	r1, r3
 8005906:	db05      	blt.n	8005914 <_printf_float+0x1c8>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	6121      	str	r1, [r4, #16]
 800590c:	07d8      	lsls	r0, r3, #31
 800590e:	d5ea      	bpl.n	80058e6 <_printf_float+0x19a>
 8005910:	1c4b      	adds	r3, r1, #1
 8005912:	e7e7      	b.n	80058e4 <_printf_float+0x198>
 8005914:	2900      	cmp	r1, #0
 8005916:	bfcc      	ite	gt
 8005918:	2201      	movgt	r2, #1
 800591a:	f1c1 0202 	rsble	r2, r1, #2
 800591e:	4413      	add	r3, r2
 8005920:	e7e0      	b.n	80058e4 <_printf_float+0x198>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	055a      	lsls	r2, r3, #21
 8005926:	d407      	bmi.n	8005938 <_printf_float+0x1ec>
 8005928:	6923      	ldr	r3, [r4, #16]
 800592a:	4642      	mov	r2, r8
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	d12b      	bne.n	800598e <_printf_float+0x242>
 8005936:	e764      	b.n	8005802 <_printf_float+0xb6>
 8005938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800593c:	f240 80dd 	bls.w	8005afa <_printf_float+0x3ae>
 8005940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005944:	2200      	movs	r2, #0
 8005946:	2300      	movs	r3, #0
 8005948:	f7fb f88e 	bl	8000a68 <__aeabi_dcmpeq>
 800594c:	2800      	cmp	r0, #0
 800594e:	d033      	beq.n	80059b8 <_printf_float+0x26c>
 8005950:	2301      	movs	r3, #1
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	4a35      	ldr	r2, [pc, #212]	; (8005a2c <_printf_float+0x2e0>)
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f af51 	beq.w	8005802 <_printf_float+0xb6>
 8005960:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005964:	429a      	cmp	r2, r3
 8005966:	db02      	blt.n	800596e <_printf_float+0x222>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07d8      	lsls	r0, r3, #31
 800596c:	d50f      	bpl.n	800598e <_printf_float+0x242>
 800596e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f af42 	beq.w	8005802 <_printf_float+0xb6>
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	f104 091a 	add.w	r9, r4, #26
 8005986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005988:	3b01      	subs	r3, #1
 800598a:	4543      	cmp	r3, r8
 800598c:	dc09      	bgt.n	80059a2 <_printf_float+0x256>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	079b      	lsls	r3, r3, #30
 8005992:	f100 8102 	bmi.w	8005b9a <_printf_float+0x44e>
 8005996:	68e0      	ldr	r0, [r4, #12]
 8005998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800599a:	4298      	cmp	r0, r3
 800599c:	bfb8      	it	lt
 800599e:	4618      	movlt	r0, r3
 80059a0:	e731      	b.n	8005806 <_printf_float+0xba>
 80059a2:	2301      	movs	r3, #1
 80059a4:	464a      	mov	r2, r9
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f af28 	beq.w	8005802 <_printf_float+0xb6>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	e7e6      	b.n	8005986 <_printf_float+0x23a>
 80059b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	dc38      	bgt.n	8005a30 <_printf_float+0x2e4>
 80059be:	2301      	movs	r3, #1
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <_printf_float+0x2e0>)
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f af1a 	beq.w	8005802 <_printf_float+0xb6>
 80059ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059d2:	4313      	orrs	r3, r2
 80059d4:	d102      	bne.n	80059dc <_printf_float+0x290>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	07d9      	lsls	r1, r3, #31
 80059da:	d5d8      	bpl.n	800598e <_printf_float+0x242>
 80059dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	f43f af0b 	beq.w	8005802 <_printf_float+0xb6>
 80059ec:	f04f 0900 	mov.w	r9, #0
 80059f0:	f104 0a1a 	add.w	sl, r4, #26
 80059f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059f6:	425b      	negs	r3, r3
 80059f8:	454b      	cmp	r3, r9
 80059fa:	dc01      	bgt.n	8005a00 <_printf_float+0x2b4>
 80059fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059fe:	e794      	b.n	800592a <_printf_float+0x1de>
 8005a00:	2301      	movs	r3, #1
 8005a02:	4652      	mov	r2, sl
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f43f aef9 	beq.w	8005802 <_printf_float+0xb6>
 8005a10:	f109 0901 	add.w	r9, r9, #1
 8005a14:	e7ee      	b.n	80059f4 <_printf_float+0x2a8>
 8005a16:	bf00      	nop
 8005a18:	7fefffff 	.word	0x7fefffff
 8005a1c:	080096e4 	.word	0x080096e4
 8005a20:	080096e8 	.word	0x080096e8
 8005a24:	080096f0 	.word	0x080096f0
 8005a28:	080096ec 	.word	0x080096ec
 8005a2c:	080096f4 	.word	0x080096f4
 8005a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a34:	429a      	cmp	r2, r3
 8005a36:	bfa8      	it	ge
 8005a38:	461a      	movge	r2, r3
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	4691      	mov	r9, r2
 8005a3e:	dc37      	bgt.n	8005ab0 <_printf_float+0x364>
 8005a40:	f04f 0b00 	mov.w	fp, #0
 8005a44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a48:	f104 021a 	add.w	r2, r4, #26
 8005a4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a50:	ebaa 0309 	sub.w	r3, sl, r9
 8005a54:	455b      	cmp	r3, fp
 8005a56:	dc33      	bgt.n	8005ac0 <_printf_float+0x374>
 8005a58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	db3b      	blt.n	8005ad8 <_printf_float+0x38c>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	07da      	lsls	r2, r3, #31
 8005a64:	d438      	bmi.n	8005ad8 <_printf_float+0x38c>
 8005a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a6a:	eba3 020a 	sub.w	r2, r3, sl
 8005a6e:	eba3 0901 	sub.w	r9, r3, r1
 8005a72:	4591      	cmp	r9, r2
 8005a74:	bfa8      	it	ge
 8005a76:	4691      	movge	r9, r2
 8005a78:	f1b9 0f00 	cmp.w	r9, #0
 8005a7c:	dc34      	bgt.n	8005ae8 <_printf_float+0x39c>
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a86:	f104 0a1a 	add.w	sl, r4, #26
 8005a8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	eba3 0309 	sub.w	r3, r3, r9
 8005a94:	4543      	cmp	r3, r8
 8005a96:	f77f af7a 	ble.w	800598e <_printf_float+0x242>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4652      	mov	r2, sl
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f43f aeac 	beq.w	8005802 <_printf_float+0xb6>
 8005aaa:	f108 0801 	add.w	r8, r8, #1
 8005aae:	e7ec      	b.n	8005a8a <_printf_float+0x33e>
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	d1c0      	bne.n	8005a40 <_printf_float+0x2f4>
 8005abe:	e6a0      	b.n	8005802 <_printf_float+0xb6>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f ae99 	beq.w	8005802 <_printf_float+0xb6>
 8005ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ad2:	f10b 0b01 	add.w	fp, fp, #1
 8005ad6:	e7b9      	b.n	8005a4c <_printf_float+0x300>
 8005ad8:	4631      	mov	r1, r6
 8005ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d1bf      	bne.n	8005a66 <_printf_float+0x31a>
 8005ae6:	e68c      	b.n	8005802 <_printf_float+0xb6>
 8005ae8:	464b      	mov	r3, r9
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	eb08 020a 	add.w	r2, r8, sl
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	d1c2      	bne.n	8005a7e <_printf_float+0x332>
 8005af8:	e683      	b.n	8005802 <_printf_float+0xb6>
 8005afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005afc:	2a01      	cmp	r2, #1
 8005afe:	dc01      	bgt.n	8005b04 <_printf_float+0x3b8>
 8005b00:	07db      	lsls	r3, r3, #31
 8005b02:	d537      	bpl.n	8005b74 <_printf_float+0x428>
 8005b04:	2301      	movs	r3, #1
 8005b06:	4642      	mov	r2, r8
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f43f ae77 	beq.w	8005802 <_printf_float+0xb6>
 8005b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f43f ae6f 	beq.w	8005802 <_printf_float+0xb6>
 8005b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f7fa ff9c 	bl	8000a68 <__aeabi_dcmpeq>
 8005b30:	b9d8      	cbnz	r0, 8005b6a <_printf_float+0x41e>
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	f108 0201 	add.w	r2, r8, #1
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	d10e      	bne.n	8005b62 <_printf_float+0x416>
 8005b44:	e65d      	b.n	8005802 <_printf_float+0xb6>
 8005b46:	2301      	movs	r3, #1
 8005b48:	464a      	mov	r2, r9
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f ae56 	beq.w	8005802 <_printf_float+0xb6>
 8005b56:	f108 0801 	add.w	r8, r8, #1
 8005b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	4543      	cmp	r3, r8
 8005b60:	dcf1      	bgt.n	8005b46 <_printf_float+0x3fa>
 8005b62:	4653      	mov	r3, sl
 8005b64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b68:	e6e0      	b.n	800592c <_printf_float+0x1e0>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	f104 091a 	add.w	r9, r4, #26
 8005b72:	e7f2      	b.n	8005b5a <_printf_float+0x40e>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4642      	mov	r2, r8
 8005b78:	e7df      	b.n	8005b3a <_printf_float+0x3ee>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	464a      	mov	r2, r9
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	f43f ae3c 	beq.w	8005802 <_printf_float+0xb6>
 8005b8a:	f108 0801 	add.w	r8, r8, #1
 8005b8e:	68e3      	ldr	r3, [r4, #12]
 8005b90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b92:	1a5b      	subs	r3, r3, r1
 8005b94:	4543      	cmp	r3, r8
 8005b96:	dcf0      	bgt.n	8005b7a <_printf_float+0x42e>
 8005b98:	e6fd      	b.n	8005996 <_printf_float+0x24a>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	f104 0919 	add.w	r9, r4, #25
 8005ba2:	e7f4      	b.n	8005b8e <_printf_float+0x442>

08005ba4 <_printf_common>:
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	4616      	mov	r6, r2
 8005baa:	4699      	mov	r9, r3
 8005bac:	688a      	ldr	r2, [r1, #8]
 8005bae:	690b      	ldr	r3, [r1, #16]
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	bfb8      	it	lt
 8005bb6:	4613      	movlt	r3, r2
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bc4:	b10a      	cbz	r2, 8005bca <_printf_common+0x26>
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	6033      	str	r3, [r6, #0]
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	0699      	lsls	r1, r3, #26
 8005bce:	bf42      	ittt	mi
 8005bd0:	6833      	ldrmi	r3, [r6, #0]
 8005bd2:	3302      	addmi	r3, #2
 8005bd4:	6033      	strmi	r3, [r6, #0]
 8005bd6:	6825      	ldr	r5, [r4, #0]
 8005bd8:	f015 0506 	ands.w	r5, r5, #6
 8005bdc:	d106      	bne.n	8005bec <_printf_common+0x48>
 8005bde:	f104 0a19 	add.w	sl, r4, #25
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	6832      	ldr	r2, [r6, #0]
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	42ab      	cmp	r3, r5
 8005bea:	dc28      	bgt.n	8005c3e <_printf_common+0x9a>
 8005bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf0:	1e13      	subs	r3, r2, #0
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	0692      	lsls	r2, r2, #26
 8005bfa:	d42d      	bmi.n	8005c58 <_printf_common+0xb4>
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d020      	beq.n	8005c4c <_printf_common+0xa8>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	68e5      	ldr	r5, [r4, #12]
 8005c0e:	f003 0306 	and.w	r3, r3, #6
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	bf18      	it	ne
 8005c16:	2500      	movne	r5, #0
 8005c18:	6832      	ldr	r2, [r6, #0]
 8005c1a:	f04f 0600 	mov.w	r6, #0
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	bf08      	it	eq
 8005c22:	1aad      	subeq	r5, r5, r2
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	bf08      	it	eq
 8005c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	bfc4      	itt	gt
 8005c30:	1a9b      	subgt	r3, r3, r2
 8005c32:	18ed      	addgt	r5, r5, r3
 8005c34:	341a      	adds	r4, #26
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	d11a      	bne.n	8005c70 <_printf_common+0xcc>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e008      	b.n	8005c50 <_printf_common+0xac>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4652      	mov	r2, sl
 8005c42:	4649      	mov	r1, r9
 8005c44:	4638      	mov	r0, r7
 8005c46:	47c0      	blx	r8
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d103      	bne.n	8005c54 <_printf_common+0xb0>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	3501      	adds	r5, #1
 8005c56:	e7c4      	b.n	8005be2 <_printf_common+0x3e>
 8005c58:	2030      	movs	r0, #48	; 0x30
 8005c5a:	18e1      	adds	r1, r4, r3
 8005c5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c66:	4422      	add	r2, r4
 8005c68:	3302      	adds	r3, #2
 8005c6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c6e:	e7c5      	b.n	8005bfc <_printf_common+0x58>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4622      	mov	r2, r4
 8005c74:	4649      	mov	r1, r9
 8005c76:	4638      	mov	r0, r7
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0e6      	beq.n	8005c4c <_printf_common+0xa8>
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7d9      	b.n	8005c36 <_printf_common+0x92>
	...

08005c84 <_printf_i>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	7e0f      	ldrb	r7, [r1, #24]
 8005c8a:	4691      	mov	r9, r2
 8005c8c:	2f78      	cmp	r7, #120	; 0x78
 8005c8e:	4680      	mov	r8, r0
 8005c90:	460c      	mov	r4, r1
 8005c92:	469a      	mov	sl, r3
 8005c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c9a:	d807      	bhi.n	8005cac <_printf_i+0x28>
 8005c9c:	2f62      	cmp	r7, #98	; 0x62
 8005c9e:	d80a      	bhi.n	8005cb6 <_printf_i+0x32>
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	f000 80d9 	beq.w	8005e58 <_printf_i+0x1d4>
 8005ca6:	2f58      	cmp	r7, #88	; 0x58
 8005ca8:	f000 80a4 	beq.w	8005df4 <_printf_i+0x170>
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb4:	e03a      	b.n	8005d2c <_printf_i+0xa8>
 8005cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cba:	2b15      	cmp	r3, #21
 8005cbc:	d8f6      	bhi.n	8005cac <_printf_i+0x28>
 8005cbe:	a101      	add	r1, pc, #4	; (adr r1, 8005cc4 <_printf_i+0x40>)
 8005cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d31 	.word	0x08005d31
 8005ccc:	08005cad 	.word	0x08005cad
 8005cd0:	08005cad 	.word	0x08005cad
 8005cd4:	08005cad 	.word	0x08005cad
 8005cd8:	08005cad 	.word	0x08005cad
 8005cdc:	08005d31 	.word	0x08005d31
 8005ce0:	08005cad 	.word	0x08005cad
 8005ce4:	08005cad 	.word	0x08005cad
 8005ce8:	08005cad 	.word	0x08005cad
 8005cec:	08005cad 	.word	0x08005cad
 8005cf0:	08005e3f 	.word	0x08005e3f
 8005cf4:	08005d61 	.word	0x08005d61
 8005cf8:	08005e21 	.word	0x08005e21
 8005cfc:	08005cad 	.word	0x08005cad
 8005d00:	08005cad 	.word	0x08005cad
 8005d04:	08005e61 	.word	0x08005e61
 8005d08:	08005cad 	.word	0x08005cad
 8005d0c:	08005d61 	.word	0x08005d61
 8005d10:	08005cad 	.word	0x08005cad
 8005d14:	08005cad 	.word	0x08005cad
 8005d18:	08005e29 	.word	0x08005e29
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	1d1a      	adds	r2, r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	602a      	str	r2, [r5, #0]
 8005d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0a4      	b.n	8005e7a <_printf_i+0x1f6>
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	6829      	ldr	r1, [r5, #0]
 8005d34:	0606      	lsls	r6, r0, #24
 8005d36:	f101 0304 	add.w	r3, r1, #4
 8005d3a:	d50a      	bpl.n	8005d52 <_printf_i+0xce>
 8005d3c:	680e      	ldr	r6, [r1, #0]
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	2e00      	cmp	r6, #0
 8005d42:	da03      	bge.n	8005d4c <_printf_i+0xc8>
 8005d44:	232d      	movs	r3, #45	; 0x2d
 8005d46:	4276      	negs	r6, r6
 8005d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4c:	230a      	movs	r3, #10
 8005d4e:	485e      	ldr	r0, [pc, #376]	; (8005ec8 <_printf_i+0x244>)
 8005d50:	e019      	b.n	8005d86 <_printf_i+0x102>
 8005d52:	680e      	ldr	r6, [r1, #0]
 8005d54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	bf18      	it	ne
 8005d5c:	b236      	sxthne	r6, r6
 8005d5e:	e7ef      	b.n	8005d40 <_printf_i+0xbc>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	6820      	ldr	r0, [r4, #0]
 8005d64:	1d19      	adds	r1, r3, #4
 8005d66:	6029      	str	r1, [r5, #0]
 8005d68:	0601      	lsls	r1, r0, #24
 8005d6a:	d501      	bpl.n	8005d70 <_printf_i+0xec>
 8005d6c:	681e      	ldr	r6, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <_printf_i+0xf2>
 8005d70:	0646      	lsls	r6, r0, #25
 8005d72:	d5fb      	bpl.n	8005d6c <_printf_i+0xe8>
 8005d74:	881e      	ldrh	r6, [r3, #0]
 8005d76:	2f6f      	cmp	r7, #111	; 0x6f
 8005d78:	bf0c      	ite	eq
 8005d7a:	2308      	moveq	r3, #8
 8005d7c:	230a      	movne	r3, #10
 8005d7e:	4852      	ldr	r0, [pc, #328]	; (8005ec8 <_printf_i+0x244>)
 8005d80:	2100      	movs	r1, #0
 8005d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d86:	6865      	ldr	r5, [r4, #4]
 8005d88:	2d00      	cmp	r5, #0
 8005d8a:	bfa8      	it	ge
 8005d8c:	6821      	ldrge	r1, [r4, #0]
 8005d8e:	60a5      	str	r5, [r4, #8]
 8005d90:	bfa4      	itt	ge
 8005d92:	f021 0104 	bicge.w	r1, r1, #4
 8005d96:	6021      	strge	r1, [r4, #0]
 8005d98:	b90e      	cbnz	r6, 8005d9e <_printf_i+0x11a>
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	d04d      	beq.n	8005e3a <_printf_i+0x1b6>
 8005d9e:	4615      	mov	r5, r2
 8005da0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005da4:	fb03 6711 	mls	r7, r3, r1, r6
 8005da8:	5dc7      	ldrb	r7, [r0, r7]
 8005daa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dae:	4637      	mov	r7, r6
 8005db0:	42bb      	cmp	r3, r7
 8005db2:	460e      	mov	r6, r1
 8005db4:	d9f4      	bls.n	8005da0 <_printf_i+0x11c>
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d10b      	bne.n	8005dd2 <_printf_i+0x14e>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	07de      	lsls	r6, r3, #31
 8005dbe:	d508      	bpl.n	8005dd2 <_printf_i+0x14e>
 8005dc0:	6923      	ldr	r3, [r4, #16]
 8005dc2:	6861      	ldr	r1, [r4, #4]
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	bfde      	ittt	le
 8005dc8:	2330      	movle	r3, #48	; 0x30
 8005dca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dd2:	1b52      	subs	r2, r2, r5
 8005dd4:	6122      	str	r2, [r4, #16]
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4640      	mov	r0, r8
 8005ddc:	f8cd a000 	str.w	sl, [sp]
 8005de0:	aa03      	add	r2, sp, #12
 8005de2:	f7ff fedf 	bl	8005ba4 <_printf_common>
 8005de6:	3001      	adds	r0, #1
 8005de8:	d14c      	bne.n	8005e84 <_printf_i+0x200>
 8005dea:	f04f 30ff 	mov.w	r0, #4294967295
 8005dee:	b004      	add	sp, #16
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	4834      	ldr	r0, [pc, #208]	; (8005ec8 <_printf_i+0x244>)
 8005df6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dfa:	6829      	ldr	r1, [r5, #0]
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e02:	6029      	str	r1, [r5, #0]
 8005e04:	061d      	lsls	r5, r3, #24
 8005e06:	d514      	bpl.n	8005e32 <_printf_i+0x1ae>
 8005e08:	07df      	lsls	r7, r3, #31
 8005e0a:	bf44      	itt	mi
 8005e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e10:	6023      	strmi	r3, [r4, #0]
 8005e12:	b91e      	cbnz	r6, 8005e1c <_printf_i+0x198>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	f023 0320 	bic.w	r3, r3, #32
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	e7af      	b.n	8005d80 <_printf_i+0xfc>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	f043 0320 	orr.w	r3, r3, #32
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	2378      	movs	r3, #120	; 0x78
 8005e2a:	4828      	ldr	r0, [pc, #160]	; (8005ecc <_printf_i+0x248>)
 8005e2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e30:	e7e3      	b.n	8005dfa <_printf_i+0x176>
 8005e32:	0659      	lsls	r1, r3, #25
 8005e34:	bf48      	it	mi
 8005e36:	b2b6      	uxthmi	r6, r6
 8005e38:	e7e6      	b.n	8005e08 <_printf_i+0x184>
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	e7bb      	b.n	8005db6 <_printf_i+0x132>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	6826      	ldr	r6, [r4, #0]
 8005e42:	1d18      	adds	r0, r3, #4
 8005e44:	6961      	ldr	r1, [r4, #20]
 8005e46:	6028      	str	r0, [r5, #0]
 8005e48:	0635      	lsls	r5, r6, #24
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	d501      	bpl.n	8005e52 <_printf_i+0x1ce>
 8005e4e:	6019      	str	r1, [r3, #0]
 8005e50:	e002      	b.n	8005e58 <_printf_i+0x1d4>
 8005e52:	0670      	lsls	r0, r6, #25
 8005e54:	d5fb      	bpl.n	8005e4e <_printf_i+0x1ca>
 8005e56:	8019      	strh	r1, [r3, #0]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4615      	mov	r5, r2
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	e7ba      	b.n	8005dd6 <_printf_i+0x152>
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	2100      	movs	r1, #0
 8005e64:	1d1a      	adds	r2, r3, #4
 8005e66:	602a      	str	r2, [r5, #0]
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	6862      	ldr	r2, [r4, #4]
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 feb5 	bl	8006bdc <memchr>
 8005e72:	b108      	cbz	r0, 8005e78 <_printf_i+0x1f4>
 8005e74:	1b40      	subs	r0, r0, r5
 8005e76:	6060      	str	r0, [r4, #4]
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e82:	e7a8      	b.n	8005dd6 <_printf_i+0x152>
 8005e84:	462a      	mov	r2, r5
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	47d0      	blx	sl
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d0ab      	beq.n	8005dea <_printf_i+0x166>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	079b      	lsls	r3, r3, #30
 8005e96:	d413      	bmi.n	8005ec0 <_printf_i+0x23c>
 8005e98:	68e0      	ldr	r0, [r4, #12]
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	bfb8      	it	lt
 8005ea0:	4618      	movlt	r0, r3
 8005ea2:	e7a4      	b.n	8005dee <_printf_i+0x16a>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	4640      	mov	r0, r8
 8005eac:	47d0      	blx	sl
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d09b      	beq.n	8005dea <_printf_i+0x166>
 8005eb2:	3501      	adds	r5, #1
 8005eb4:	68e3      	ldr	r3, [r4, #12]
 8005eb6:	9903      	ldr	r1, [sp, #12]
 8005eb8:	1a5b      	subs	r3, r3, r1
 8005eba:	42ab      	cmp	r3, r5
 8005ebc:	dcf2      	bgt.n	8005ea4 <_printf_i+0x220>
 8005ebe:	e7eb      	b.n	8005e98 <_printf_i+0x214>
 8005ec0:	2500      	movs	r5, #0
 8005ec2:	f104 0619 	add.w	r6, r4, #25
 8005ec6:	e7f5      	b.n	8005eb4 <_printf_i+0x230>
 8005ec8:	080096f6 	.word	0x080096f6
 8005ecc:	08009707 	.word	0x08009707

08005ed0 <quorem>:
 8005ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	6903      	ldr	r3, [r0, #16]
 8005ed6:	690c      	ldr	r4, [r1, #16]
 8005ed8:	4607      	mov	r7, r0
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	f2c0 8082 	blt.w	8005fe4 <quorem+0x114>
 8005ee0:	3c01      	subs	r4, #1
 8005ee2:	f100 0514 	add.w	r5, r0, #20
 8005ee6:	f101 0814 	add.w	r8, r1, #20
 8005eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	429a      	cmp	r2, r3
 8005efc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f08:	d331      	bcc.n	8005f6e <quorem+0x9e>
 8005f0a:	f04f 0e00 	mov.w	lr, #0
 8005f0e:	4640      	mov	r0, r8
 8005f10:	46ac      	mov	ip, r5
 8005f12:	46f2      	mov	sl, lr
 8005f14:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f18:	b293      	uxth	r3, r2
 8005f1a:	fb06 e303 	mla	r3, r6, r3, lr
 8005f1e:	0c12      	lsrs	r2, r2, #16
 8005f20:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	fb06 e202 	mla	r2, r6, r2, lr
 8005f2a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f2e:	f8dc a000 	ldr.w	sl, [ip]
 8005f32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f36:	fa1f fa8a 	uxth.w	sl, sl
 8005f3a:	4453      	add	r3, sl
 8005f3c:	f8dc a000 	ldr.w	sl, [ip]
 8005f40:	b292      	uxth	r2, r2
 8005f42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f50:	4581      	cmp	r9, r0
 8005f52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f56:	f84c 3b04 	str.w	r3, [ip], #4
 8005f5a:	d2db      	bcs.n	8005f14 <quorem+0x44>
 8005f5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f60:	b92b      	cbnz	r3, 8005f6e <quorem+0x9e>
 8005f62:	9b01      	ldr	r3, [sp, #4]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	429d      	cmp	r5, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	d32f      	bcc.n	8005fcc <quorem+0xfc>
 8005f6c:	613c      	str	r4, [r7, #16]
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f001 f8ce 	bl	8007110 <__mcmp>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	db25      	blt.n	8005fc4 <quorem+0xf4>
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f04f 0c00 	mov.w	ip, #0
 8005f7e:	3601      	adds	r6, #1
 8005f80:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f84:	f8d0 e000 	ldr.w	lr, [r0]
 8005f88:	b28b      	uxth	r3, r1
 8005f8a:	ebac 0303 	sub.w	r3, ip, r3
 8005f8e:	fa1f f28e 	uxth.w	r2, lr
 8005f92:	4413      	add	r3, r2
 8005f94:	0c0a      	lsrs	r2, r1, #16
 8005f96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fa4:	45c1      	cmp	r9, r8
 8005fa6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005faa:	f840 3b04 	str.w	r3, [r0], #4
 8005fae:	d2e7      	bcs.n	8005f80 <quorem+0xb0>
 8005fb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fb8:	b922      	cbnz	r2, 8005fc4 <quorem+0xf4>
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	429d      	cmp	r5, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	d30a      	bcc.n	8005fd8 <quorem+0x108>
 8005fc2:	613c      	str	r4, [r7, #16]
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	b003      	add	sp, #12
 8005fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	d1cb      	bne.n	8005f6c <quorem+0x9c>
 8005fd4:	3c01      	subs	r4, #1
 8005fd6:	e7c6      	b.n	8005f66 <quorem+0x96>
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	3b04      	subs	r3, #4
 8005fdc:	2a00      	cmp	r2, #0
 8005fde:	d1f0      	bne.n	8005fc2 <quorem+0xf2>
 8005fe0:	3c01      	subs	r4, #1
 8005fe2:	e7eb      	b.n	8005fbc <quorem+0xec>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e7ee      	b.n	8005fc6 <quorem+0xf6>

08005fe8 <_dtoa_r>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	4616      	mov	r6, r2
 8005fee:	461f      	mov	r7, r3
 8005ff0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ff2:	b099      	sub	sp, #100	; 0x64
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ffa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ffe:	b974      	cbnz	r4, 800601e <_dtoa_r+0x36>
 8006000:	2010      	movs	r0, #16
 8006002:	f000 fde3 	bl	8006bcc <malloc>
 8006006:	4602      	mov	r2, r0
 8006008:	6268      	str	r0, [r5, #36]	; 0x24
 800600a:	b920      	cbnz	r0, 8006016 <_dtoa_r+0x2e>
 800600c:	21ea      	movs	r1, #234	; 0xea
 800600e:	4ba8      	ldr	r3, [pc, #672]	; (80062b0 <_dtoa_r+0x2c8>)
 8006010:	48a8      	ldr	r0, [pc, #672]	; (80062b4 <_dtoa_r+0x2cc>)
 8006012:	f001 fa81 	bl	8007518 <__assert_func>
 8006016:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800601a:	6004      	str	r4, [r0, #0]
 800601c:	60c4      	str	r4, [r0, #12]
 800601e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	b151      	cbz	r1, 800603a <_dtoa_r+0x52>
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	2301      	movs	r3, #1
 8006028:	4093      	lsls	r3, r2
 800602a:	604a      	str	r2, [r1, #4]
 800602c:	608b      	str	r3, [r1, #8]
 800602e:	4628      	mov	r0, r5
 8006030:	f000 fe30 	bl	8006c94 <_Bfree>
 8006034:	2200      	movs	r2, #0
 8006036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	1e3b      	subs	r3, r7, #0
 800603c:	bfaf      	iteee	ge
 800603e:	2300      	movge	r3, #0
 8006040:	2201      	movlt	r2, #1
 8006042:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006046:	9305      	strlt	r3, [sp, #20]
 8006048:	bfa8      	it	ge
 800604a:	f8c8 3000 	strge.w	r3, [r8]
 800604e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006052:	4b99      	ldr	r3, [pc, #612]	; (80062b8 <_dtoa_r+0x2d0>)
 8006054:	bfb8      	it	lt
 8006056:	f8c8 2000 	strlt.w	r2, [r8]
 800605a:	ea33 0309 	bics.w	r3, r3, r9
 800605e:	d119      	bne.n	8006094 <_dtoa_r+0xac>
 8006060:	f242 730f 	movw	r3, #9999	; 0x270f
 8006064:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800606c:	4333      	orrs	r3, r6
 800606e:	f000 857f 	beq.w	8006b70 <_dtoa_r+0xb88>
 8006072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006074:	b953      	cbnz	r3, 800608c <_dtoa_r+0xa4>
 8006076:	4b91      	ldr	r3, [pc, #580]	; (80062bc <_dtoa_r+0x2d4>)
 8006078:	e022      	b.n	80060c0 <_dtoa_r+0xd8>
 800607a:	4b91      	ldr	r3, [pc, #580]	; (80062c0 <_dtoa_r+0x2d8>)
 800607c:	9303      	str	r3, [sp, #12]
 800607e:	3308      	adds	r3, #8
 8006080:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	9803      	ldr	r0, [sp, #12]
 8006086:	b019      	add	sp, #100	; 0x64
 8006088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608c:	4b8b      	ldr	r3, [pc, #556]	; (80062bc <_dtoa_r+0x2d4>)
 800608e:	9303      	str	r3, [sp, #12]
 8006090:	3303      	adds	r3, #3
 8006092:	e7f5      	b.n	8006080 <_dtoa_r+0x98>
 8006094:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006098:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800609c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	f7fa fce0 	bl	8000a68 <__aeabi_dcmpeq>
 80060a8:	4680      	mov	r8, r0
 80060aa:	b158      	cbz	r0, 80060c4 <_dtoa_r+0xdc>
 80060ac:	2301      	movs	r3, #1
 80060ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8558 	beq.w	8006b6a <_dtoa_r+0xb82>
 80060ba:	4882      	ldr	r0, [pc, #520]	; (80062c4 <_dtoa_r+0x2dc>)
 80060bc:	6018      	str	r0, [r3, #0]
 80060be:	1e43      	subs	r3, r0, #1
 80060c0:	9303      	str	r3, [sp, #12]
 80060c2:	e7df      	b.n	8006084 <_dtoa_r+0x9c>
 80060c4:	ab16      	add	r3, sp, #88	; 0x58
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	ab17      	add	r3, sp, #92	; 0x5c
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	4628      	mov	r0, r5
 80060ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060d2:	f001 f8c5 	bl	8007260 <__d2b>
 80060d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060da:	4683      	mov	fp, r0
 80060dc:	2c00      	cmp	r4, #0
 80060de:	d07f      	beq.n	80061e0 <_dtoa_r+0x1f8>
 80060e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80060f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80060f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060fa:	2200      	movs	r2, #0
 80060fc:	4b72      	ldr	r3, [pc, #456]	; (80062c8 <_dtoa_r+0x2e0>)
 80060fe:	f7fa f893 	bl	8000228 <__aeabi_dsub>
 8006102:	a365      	add	r3, pc, #404	; (adr r3, 8006298 <_dtoa_r+0x2b0>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa fa46 	bl	8000598 <__aeabi_dmul>
 800610c:	a364      	add	r3, pc, #400	; (adr r3, 80062a0 <_dtoa_r+0x2b8>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa f88b 	bl	800022c <__adddf3>
 8006116:	4606      	mov	r6, r0
 8006118:	4620      	mov	r0, r4
 800611a:	460f      	mov	r7, r1
 800611c:	f7fa f9d2 	bl	80004c4 <__aeabi_i2d>
 8006120:	a361      	add	r3, pc, #388	; (adr r3, 80062a8 <_dtoa_r+0x2c0>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f7fa fa37 	bl	8000598 <__aeabi_dmul>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4630      	mov	r0, r6
 8006130:	4639      	mov	r1, r7
 8006132:	f7fa f87b 	bl	800022c <__adddf3>
 8006136:	4606      	mov	r6, r0
 8006138:	460f      	mov	r7, r1
 800613a:	f7fa fcdd 	bl	8000af8 <__aeabi_d2iz>
 800613e:	2200      	movs	r2, #0
 8006140:	4682      	mov	sl, r0
 8006142:	2300      	movs	r3, #0
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa fc98 	bl	8000a7c <__aeabi_dcmplt>
 800614c:	b148      	cbz	r0, 8006162 <_dtoa_r+0x17a>
 800614e:	4650      	mov	r0, sl
 8006150:	f7fa f9b8 	bl	80004c4 <__aeabi_i2d>
 8006154:	4632      	mov	r2, r6
 8006156:	463b      	mov	r3, r7
 8006158:	f7fa fc86 	bl	8000a68 <__aeabi_dcmpeq>
 800615c:	b908      	cbnz	r0, 8006162 <_dtoa_r+0x17a>
 800615e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006162:	f1ba 0f16 	cmp.w	sl, #22
 8006166:	d858      	bhi.n	800621a <_dtoa_r+0x232>
 8006168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800616c:	4b57      	ldr	r3, [pc, #348]	; (80062cc <_dtoa_r+0x2e4>)
 800616e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fa fc81 	bl	8000a7c <__aeabi_dcmplt>
 800617a:	2800      	cmp	r0, #0
 800617c:	d04f      	beq.n	800621e <_dtoa_r+0x236>
 800617e:	2300      	movs	r3, #0
 8006180:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006184:	930f      	str	r3, [sp, #60]	; 0x3c
 8006186:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006188:	1b1c      	subs	r4, r3, r4
 800618a:	1e63      	subs	r3, r4, #1
 800618c:	9309      	str	r3, [sp, #36]	; 0x24
 800618e:	bf49      	itett	mi
 8006190:	f1c4 0301 	rsbmi	r3, r4, #1
 8006194:	2300      	movpl	r3, #0
 8006196:	9306      	strmi	r3, [sp, #24]
 8006198:	2300      	movmi	r3, #0
 800619a:	bf54      	ite	pl
 800619c:	9306      	strpl	r3, [sp, #24]
 800619e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80061a0:	f1ba 0f00 	cmp.w	sl, #0
 80061a4:	db3d      	blt.n	8006222 <_dtoa_r+0x23a>
 80061a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80061ac:	4453      	add	r3, sl
 80061ae:	9309      	str	r3, [sp, #36]	; 0x24
 80061b0:	2300      	movs	r3, #0
 80061b2:	930a      	str	r3, [sp, #40]	; 0x28
 80061b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061b6:	2b09      	cmp	r3, #9
 80061b8:	f200 808c 	bhi.w	80062d4 <_dtoa_r+0x2ec>
 80061bc:	2b05      	cmp	r3, #5
 80061be:	bfc4      	itt	gt
 80061c0:	3b04      	subgt	r3, #4
 80061c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80061c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061c6:	bfc8      	it	gt
 80061c8:	2400      	movgt	r4, #0
 80061ca:	f1a3 0302 	sub.w	r3, r3, #2
 80061ce:	bfd8      	it	le
 80061d0:	2401      	movle	r4, #1
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	f200 808a 	bhi.w	80062ec <_dtoa_r+0x304>
 80061d8:	e8df f003 	tbb	[pc, r3]
 80061dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80061e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061e4:	441c      	add	r4, r3
 80061e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	bfc3      	ittte	gt
 80061ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80061f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80061fa:	f1c3 0320 	rsble	r3, r3, #32
 80061fe:	bfc6      	itte	gt
 8006200:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006204:	4318      	orrgt	r0, r3
 8006206:	fa06 f003 	lslle.w	r0, r6, r3
 800620a:	f7fa f94b 	bl	80004a4 <__aeabi_ui2d>
 800620e:	2301      	movs	r3, #1
 8006210:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006214:	3c01      	subs	r4, #1
 8006216:	9313      	str	r3, [sp, #76]	; 0x4c
 8006218:	e76f      	b.n	80060fa <_dtoa_r+0x112>
 800621a:	2301      	movs	r3, #1
 800621c:	e7b2      	b.n	8006184 <_dtoa_r+0x19c>
 800621e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006220:	e7b1      	b.n	8006186 <_dtoa_r+0x19e>
 8006222:	9b06      	ldr	r3, [sp, #24]
 8006224:	eba3 030a 	sub.w	r3, r3, sl
 8006228:	9306      	str	r3, [sp, #24]
 800622a:	f1ca 0300 	rsb	r3, sl, #0
 800622e:	930a      	str	r3, [sp, #40]	; 0x28
 8006230:	2300      	movs	r3, #0
 8006232:	930e      	str	r3, [sp, #56]	; 0x38
 8006234:	e7be      	b.n	80061b4 <_dtoa_r+0x1cc>
 8006236:	2300      	movs	r3, #0
 8006238:	930b      	str	r3, [sp, #44]	; 0x2c
 800623a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800623c:	2b00      	cmp	r3, #0
 800623e:	dc58      	bgt.n	80062f2 <_dtoa_r+0x30a>
 8006240:	f04f 0901 	mov.w	r9, #1
 8006244:	464b      	mov	r3, r9
 8006246:	f8cd 9020 	str.w	r9, [sp, #32]
 800624a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800624e:	2200      	movs	r2, #0
 8006250:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006252:	6042      	str	r2, [r0, #4]
 8006254:	2204      	movs	r2, #4
 8006256:	f102 0614 	add.w	r6, r2, #20
 800625a:	429e      	cmp	r6, r3
 800625c:	6841      	ldr	r1, [r0, #4]
 800625e:	d94e      	bls.n	80062fe <_dtoa_r+0x316>
 8006260:	4628      	mov	r0, r5
 8006262:	f000 fcd7 	bl	8006c14 <_Balloc>
 8006266:	9003      	str	r0, [sp, #12]
 8006268:	2800      	cmp	r0, #0
 800626a:	d14c      	bne.n	8006306 <_dtoa_r+0x31e>
 800626c:	4602      	mov	r2, r0
 800626e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <_dtoa_r+0x2e8>)
 8006274:	e6cc      	b.n	8006010 <_dtoa_r+0x28>
 8006276:	2301      	movs	r3, #1
 8006278:	e7de      	b.n	8006238 <_dtoa_r+0x250>
 800627a:	2300      	movs	r3, #0
 800627c:	930b      	str	r3, [sp, #44]	; 0x2c
 800627e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006280:	eb0a 0903 	add.w	r9, sl, r3
 8006284:	f109 0301 	add.w	r3, r9, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	9308      	str	r3, [sp, #32]
 800628c:	bfb8      	it	lt
 800628e:	2301      	movlt	r3, #1
 8006290:	e7dd      	b.n	800624e <_dtoa_r+0x266>
 8006292:	2301      	movs	r3, #1
 8006294:	e7f2      	b.n	800627c <_dtoa_r+0x294>
 8006296:	bf00      	nop
 8006298:	636f4361 	.word	0x636f4361
 800629c:	3fd287a7 	.word	0x3fd287a7
 80062a0:	8b60c8b3 	.word	0x8b60c8b3
 80062a4:	3fc68a28 	.word	0x3fc68a28
 80062a8:	509f79fb 	.word	0x509f79fb
 80062ac:	3fd34413 	.word	0x3fd34413
 80062b0:	08009725 	.word	0x08009725
 80062b4:	0800973c 	.word	0x0800973c
 80062b8:	7ff00000 	.word	0x7ff00000
 80062bc:	08009721 	.word	0x08009721
 80062c0:	08009718 	.word	0x08009718
 80062c4:	080096f5 	.word	0x080096f5
 80062c8:	3ff80000 	.word	0x3ff80000
 80062cc:	08009830 	.word	0x08009830
 80062d0:	08009797 	.word	0x08009797
 80062d4:	2401      	movs	r4, #1
 80062d6:	2300      	movs	r3, #0
 80062d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80062da:	9322      	str	r3, [sp, #136]	; 0x88
 80062dc:	f04f 39ff 	mov.w	r9, #4294967295
 80062e0:	2200      	movs	r2, #0
 80062e2:	2312      	movs	r3, #18
 80062e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80062e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80062ea:	e7b0      	b.n	800624e <_dtoa_r+0x266>
 80062ec:	2301      	movs	r3, #1
 80062ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f0:	e7f4      	b.n	80062dc <_dtoa_r+0x2f4>
 80062f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80062f6:	464b      	mov	r3, r9
 80062f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80062fc:	e7a7      	b.n	800624e <_dtoa_r+0x266>
 80062fe:	3101      	adds	r1, #1
 8006300:	6041      	str	r1, [r0, #4]
 8006302:	0052      	lsls	r2, r2, #1
 8006304:	e7a7      	b.n	8006256 <_dtoa_r+0x26e>
 8006306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006308:	9a03      	ldr	r2, [sp, #12]
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	9b08      	ldr	r3, [sp, #32]
 800630e:	2b0e      	cmp	r3, #14
 8006310:	f200 80a8 	bhi.w	8006464 <_dtoa_r+0x47c>
 8006314:	2c00      	cmp	r4, #0
 8006316:	f000 80a5 	beq.w	8006464 <_dtoa_r+0x47c>
 800631a:	f1ba 0f00 	cmp.w	sl, #0
 800631e:	dd34      	ble.n	800638a <_dtoa_r+0x3a2>
 8006320:	4a9a      	ldr	r2, [pc, #616]	; (800658c <_dtoa_r+0x5a4>)
 8006322:	f00a 030f 	and.w	r3, sl, #15
 8006326:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800632a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800632e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006332:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006336:	ea4f 142a 	mov.w	r4, sl, asr #4
 800633a:	d016      	beq.n	800636a <_dtoa_r+0x382>
 800633c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006340:	4b93      	ldr	r3, [pc, #588]	; (8006590 <_dtoa_r+0x5a8>)
 8006342:	2703      	movs	r7, #3
 8006344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006348:	f7fa fa50 	bl	80007ec <__aeabi_ddiv>
 800634c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006350:	f004 040f 	and.w	r4, r4, #15
 8006354:	4e8e      	ldr	r6, [pc, #568]	; (8006590 <_dtoa_r+0x5a8>)
 8006356:	b954      	cbnz	r4, 800636e <_dtoa_r+0x386>
 8006358:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800635c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006360:	f7fa fa44 	bl	80007ec <__aeabi_ddiv>
 8006364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006368:	e029      	b.n	80063be <_dtoa_r+0x3d6>
 800636a:	2702      	movs	r7, #2
 800636c:	e7f2      	b.n	8006354 <_dtoa_r+0x36c>
 800636e:	07e1      	lsls	r1, r4, #31
 8006370:	d508      	bpl.n	8006384 <_dtoa_r+0x39c>
 8006372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006376:	e9d6 2300 	ldrd	r2, r3, [r6]
 800637a:	f7fa f90d 	bl	8000598 <__aeabi_dmul>
 800637e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006382:	3701      	adds	r7, #1
 8006384:	1064      	asrs	r4, r4, #1
 8006386:	3608      	adds	r6, #8
 8006388:	e7e5      	b.n	8006356 <_dtoa_r+0x36e>
 800638a:	f000 80a5 	beq.w	80064d8 <_dtoa_r+0x4f0>
 800638e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006392:	f1ca 0400 	rsb	r4, sl, #0
 8006396:	4b7d      	ldr	r3, [pc, #500]	; (800658c <_dtoa_r+0x5a4>)
 8006398:	f004 020f 	and.w	r2, r4, #15
 800639c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f7fa f8f8 	bl	8000598 <__aeabi_dmul>
 80063a8:	2702      	movs	r7, #2
 80063aa:	2300      	movs	r3, #0
 80063ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063b0:	4e77      	ldr	r6, [pc, #476]	; (8006590 <_dtoa_r+0x5a8>)
 80063b2:	1124      	asrs	r4, r4, #4
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	f040 8084 	bne.w	80064c2 <_dtoa_r+0x4da>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1d2      	bne.n	8006364 <_dtoa_r+0x37c>
 80063be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 808b 	beq.w	80064dc <_dtoa_r+0x4f4>
 80063c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063d2:	2200      	movs	r2, #0
 80063d4:	4b6f      	ldr	r3, [pc, #444]	; (8006594 <_dtoa_r+0x5ac>)
 80063d6:	f7fa fb51 	bl	8000a7c <__aeabi_dcmplt>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d07e      	beq.n	80064dc <_dtoa_r+0x4f4>
 80063de:	9b08      	ldr	r3, [sp, #32]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d07b      	beq.n	80064dc <_dtoa_r+0x4f4>
 80063e4:	f1b9 0f00 	cmp.w	r9, #0
 80063e8:	dd38      	ble.n	800645c <_dtoa_r+0x474>
 80063ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063ee:	2200      	movs	r2, #0
 80063f0:	4b69      	ldr	r3, [pc, #420]	; (8006598 <_dtoa_r+0x5b0>)
 80063f2:	f7fa f8d1 	bl	8000598 <__aeabi_dmul>
 80063f6:	464c      	mov	r4, r9
 80063f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006400:	3701      	adds	r7, #1
 8006402:	4638      	mov	r0, r7
 8006404:	f7fa f85e 	bl	80004c4 <__aeabi_i2d>
 8006408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640c:	f7fa f8c4 	bl	8000598 <__aeabi_dmul>
 8006410:	2200      	movs	r2, #0
 8006412:	4b62      	ldr	r3, [pc, #392]	; (800659c <_dtoa_r+0x5b4>)
 8006414:	f7f9 ff0a 	bl	800022c <__adddf3>
 8006418:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800641c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006420:	9611      	str	r6, [sp, #68]	; 0x44
 8006422:	2c00      	cmp	r4, #0
 8006424:	d15d      	bne.n	80064e2 <_dtoa_r+0x4fa>
 8006426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800642a:	2200      	movs	r2, #0
 800642c:	4b5c      	ldr	r3, [pc, #368]	; (80065a0 <_dtoa_r+0x5b8>)
 800642e:	f7f9 fefb 	bl	8000228 <__aeabi_dsub>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800643a:	4633      	mov	r3, r6
 800643c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800643e:	f7fa fb3b 	bl	8000ab8 <__aeabi_dcmpgt>
 8006442:	2800      	cmp	r0, #0
 8006444:	f040 829c 	bne.w	8006980 <_dtoa_r+0x998>
 8006448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800644c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800644e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006452:	f7fa fb13 	bl	8000a7c <__aeabi_dcmplt>
 8006456:	2800      	cmp	r0, #0
 8006458:	f040 8290 	bne.w	800697c <_dtoa_r+0x994>
 800645c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006460:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006466:	2b00      	cmp	r3, #0
 8006468:	f2c0 8152 	blt.w	8006710 <_dtoa_r+0x728>
 800646c:	f1ba 0f0e 	cmp.w	sl, #14
 8006470:	f300 814e 	bgt.w	8006710 <_dtoa_r+0x728>
 8006474:	4b45      	ldr	r3, [pc, #276]	; (800658c <_dtoa_r+0x5a4>)
 8006476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800647a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800647e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006484:	2b00      	cmp	r3, #0
 8006486:	f280 80db 	bge.w	8006640 <_dtoa_r+0x658>
 800648a:	9b08      	ldr	r3, [sp, #32]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f300 80d7 	bgt.w	8006640 <_dtoa_r+0x658>
 8006492:	f040 8272 	bne.w	800697a <_dtoa_r+0x992>
 8006496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800649a:	2200      	movs	r2, #0
 800649c:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <_dtoa_r+0x5b8>)
 800649e:	f7fa f87b 	bl	8000598 <__aeabi_dmul>
 80064a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064a6:	f7fa fafd 	bl	8000aa4 <__aeabi_dcmpge>
 80064aa:	9c08      	ldr	r4, [sp, #32]
 80064ac:	4626      	mov	r6, r4
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f040 8248 	bne.w	8006944 <_dtoa_r+0x95c>
 80064b4:	2331      	movs	r3, #49	; 0x31
 80064b6:	9f03      	ldr	r7, [sp, #12]
 80064b8:	f10a 0a01 	add.w	sl, sl, #1
 80064bc:	f807 3b01 	strb.w	r3, [r7], #1
 80064c0:	e244      	b.n	800694c <_dtoa_r+0x964>
 80064c2:	07e2      	lsls	r2, r4, #31
 80064c4:	d505      	bpl.n	80064d2 <_dtoa_r+0x4ea>
 80064c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064ca:	f7fa f865 	bl	8000598 <__aeabi_dmul>
 80064ce:	2301      	movs	r3, #1
 80064d0:	3701      	adds	r7, #1
 80064d2:	1064      	asrs	r4, r4, #1
 80064d4:	3608      	adds	r6, #8
 80064d6:	e76d      	b.n	80063b4 <_dtoa_r+0x3cc>
 80064d8:	2702      	movs	r7, #2
 80064da:	e770      	b.n	80063be <_dtoa_r+0x3d6>
 80064dc:	46d0      	mov	r8, sl
 80064de:	9c08      	ldr	r4, [sp, #32]
 80064e0:	e78f      	b.n	8006402 <_dtoa_r+0x41a>
 80064e2:	9903      	ldr	r1, [sp, #12]
 80064e4:	4b29      	ldr	r3, [pc, #164]	; (800658c <_dtoa_r+0x5a4>)
 80064e6:	4421      	add	r1, r4
 80064e8:	9112      	str	r1, [sp, #72]	; 0x48
 80064ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064f8:	2900      	cmp	r1, #0
 80064fa:	d055      	beq.n	80065a8 <_dtoa_r+0x5c0>
 80064fc:	2000      	movs	r0, #0
 80064fe:	4929      	ldr	r1, [pc, #164]	; (80065a4 <_dtoa_r+0x5bc>)
 8006500:	f7fa f974 	bl	80007ec <__aeabi_ddiv>
 8006504:	463b      	mov	r3, r7
 8006506:	4632      	mov	r2, r6
 8006508:	f7f9 fe8e 	bl	8000228 <__aeabi_dsub>
 800650c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006510:	9f03      	ldr	r7, [sp, #12]
 8006512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006516:	f7fa faef 	bl	8000af8 <__aeabi_d2iz>
 800651a:	4604      	mov	r4, r0
 800651c:	f7f9 ffd2 	bl	80004c4 <__aeabi_i2d>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006528:	f7f9 fe7e 	bl	8000228 <__aeabi_dsub>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	3430      	adds	r4, #48	; 0x30
 8006532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800653a:	f807 4b01 	strb.w	r4, [r7], #1
 800653e:	f7fa fa9d 	bl	8000a7c <__aeabi_dcmplt>
 8006542:	2800      	cmp	r0, #0
 8006544:	d174      	bne.n	8006630 <_dtoa_r+0x648>
 8006546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800654a:	2000      	movs	r0, #0
 800654c:	4911      	ldr	r1, [pc, #68]	; (8006594 <_dtoa_r+0x5ac>)
 800654e:	f7f9 fe6b 	bl	8000228 <__aeabi_dsub>
 8006552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006556:	f7fa fa91 	bl	8000a7c <__aeabi_dcmplt>
 800655a:	2800      	cmp	r0, #0
 800655c:	f040 80b7 	bne.w	80066ce <_dtoa_r+0x6e6>
 8006560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006562:	429f      	cmp	r7, r3
 8006564:	f43f af7a 	beq.w	800645c <_dtoa_r+0x474>
 8006568:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800656c:	2200      	movs	r2, #0
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <_dtoa_r+0x5b0>)
 8006570:	f7fa f812 	bl	8000598 <__aeabi_dmul>
 8006574:	2200      	movs	r2, #0
 8006576:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800657a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <_dtoa_r+0x5b0>)
 8006580:	f7fa f80a 	bl	8000598 <__aeabi_dmul>
 8006584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006588:	e7c3      	b.n	8006512 <_dtoa_r+0x52a>
 800658a:	bf00      	nop
 800658c:	08009830 	.word	0x08009830
 8006590:	08009808 	.word	0x08009808
 8006594:	3ff00000 	.word	0x3ff00000
 8006598:	40240000 	.word	0x40240000
 800659c:	401c0000 	.word	0x401c0000
 80065a0:	40140000 	.word	0x40140000
 80065a4:	3fe00000 	.word	0x3fe00000
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	f7f9 fff4 	bl	8000598 <__aeabi_dmul>
 80065b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065b6:	9c03      	ldr	r4, [sp, #12]
 80065b8:	9314      	str	r3, [sp, #80]	; 0x50
 80065ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065be:	f7fa fa9b 	bl	8000af8 <__aeabi_d2iz>
 80065c2:	9015      	str	r0, [sp, #84]	; 0x54
 80065c4:	f7f9 ff7e 	bl	80004c4 <__aeabi_i2d>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d0:	f7f9 fe2a 	bl	8000228 <__aeabi_dsub>
 80065d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065d6:	4606      	mov	r6, r0
 80065d8:	3330      	adds	r3, #48	; 0x30
 80065da:	f804 3b01 	strb.w	r3, [r4], #1
 80065de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065e0:	460f      	mov	r7, r1
 80065e2:	429c      	cmp	r4, r3
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	d124      	bne.n	8006634 <_dtoa_r+0x64c>
 80065ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ee:	4bb0      	ldr	r3, [pc, #704]	; (80068b0 <_dtoa_r+0x8c8>)
 80065f0:	f7f9 fe1c 	bl	800022c <__adddf3>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fa5c 	bl	8000ab8 <__aeabi_dcmpgt>
 8006600:	2800      	cmp	r0, #0
 8006602:	d163      	bne.n	80066cc <_dtoa_r+0x6e4>
 8006604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006608:	2000      	movs	r0, #0
 800660a:	49a9      	ldr	r1, [pc, #676]	; (80068b0 <_dtoa_r+0x8c8>)
 800660c:	f7f9 fe0c 	bl	8000228 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	f7fa fa30 	bl	8000a7c <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f43f af1d 	beq.w	800645c <_dtoa_r+0x474>
 8006622:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006624:	1e7b      	subs	r3, r7, #1
 8006626:	9314      	str	r3, [sp, #80]	; 0x50
 8006628:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800662c:	2b30      	cmp	r3, #48	; 0x30
 800662e:	d0f8      	beq.n	8006622 <_dtoa_r+0x63a>
 8006630:	46c2      	mov	sl, r8
 8006632:	e03b      	b.n	80066ac <_dtoa_r+0x6c4>
 8006634:	4b9f      	ldr	r3, [pc, #636]	; (80068b4 <_dtoa_r+0x8cc>)
 8006636:	f7f9 ffaf 	bl	8000598 <__aeabi_dmul>
 800663a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800663e:	e7bc      	b.n	80065ba <_dtoa_r+0x5d2>
 8006640:	9f03      	ldr	r7, [sp, #12]
 8006642:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	f7fa f8cd 	bl	80007ec <__aeabi_ddiv>
 8006652:	f7fa fa51 	bl	8000af8 <__aeabi_d2iz>
 8006656:	4604      	mov	r4, r0
 8006658:	f7f9 ff34 	bl	80004c4 <__aeabi_i2d>
 800665c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006660:	f7f9 ff9a 	bl	8000598 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	f7f9 fddc 	bl	8000228 <__aeabi_dsub>
 8006670:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006674:	f807 6b01 	strb.w	r6, [r7], #1
 8006678:	9e03      	ldr	r6, [sp, #12]
 800667a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800667e:	1bbe      	subs	r6, r7, r6
 8006680:	45b4      	cmp	ip, r6
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	d136      	bne.n	80066f6 <_dtoa_r+0x70e>
 8006688:	f7f9 fdd0 	bl	800022c <__adddf3>
 800668c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006690:	4680      	mov	r8, r0
 8006692:	4689      	mov	r9, r1
 8006694:	f7fa fa10 	bl	8000ab8 <__aeabi_dcmpgt>
 8006698:	bb58      	cbnz	r0, 80066f2 <_dtoa_r+0x70a>
 800669a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800669e:	4640      	mov	r0, r8
 80066a0:	4649      	mov	r1, r9
 80066a2:	f7fa f9e1 	bl	8000a68 <__aeabi_dcmpeq>
 80066a6:	b108      	cbz	r0, 80066ac <_dtoa_r+0x6c4>
 80066a8:	07e1      	lsls	r1, r4, #31
 80066aa:	d422      	bmi.n	80066f2 <_dtoa_r+0x70a>
 80066ac:	4628      	mov	r0, r5
 80066ae:	4659      	mov	r1, fp
 80066b0:	f000 faf0 	bl	8006c94 <_Bfree>
 80066b4:	2300      	movs	r3, #0
 80066b6:	703b      	strb	r3, [r7, #0]
 80066b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066ba:	f10a 0001 	add.w	r0, sl, #1
 80066be:	6018      	str	r0, [r3, #0]
 80066c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f43f acde 	beq.w	8006084 <_dtoa_r+0x9c>
 80066c8:	601f      	str	r7, [r3, #0]
 80066ca:	e4db      	b.n	8006084 <_dtoa_r+0x9c>
 80066cc:	4627      	mov	r7, r4
 80066ce:	463b      	mov	r3, r7
 80066d0:	461f      	mov	r7, r3
 80066d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066d6:	2a39      	cmp	r2, #57	; 0x39
 80066d8:	d107      	bne.n	80066ea <_dtoa_r+0x702>
 80066da:	9a03      	ldr	r2, [sp, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d1f7      	bne.n	80066d0 <_dtoa_r+0x6e8>
 80066e0:	2230      	movs	r2, #48	; 0x30
 80066e2:	9903      	ldr	r1, [sp, #12]
 80066e4:	f108 0801 	add.w	r8, r8, #1
 80066e8:	700a      	strb	r2, [r1, #0]
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	3201      	adds	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e79e      	b.n	8006630 <_dtoa_r+0x648>
 80066f2:	46d0      	mov	r8, sl
 80066f4:	e7eb      	b.n	80066ce <_dtoa_r+0x6e6>
 80066f6:	2200      	movs	r2, #0
 80066f8:	4b6e      	ldr	r3, [pc, #440]	; (80068b4 <_dtoa_r+0x8cc>)
 80066fa:	f7f9 ff4d 	bl	8000598 <__aeabi_dmul>
 80066fe:	2200      	movs	r2, #0
 8006700:	2300      	movs	r3, #0
 8006702:	4680      	mov	r8, r0
 8006704:	4689      	mov	r9, r1
 8006706:	f7fa f9af 	bl	8000a68 <__aeabi_dcmpeq>
 800670a:	2800      	cmp	r0, #0
 800670c:	d09b      	beq.n	8006646 <_dtoa_r+0x65e>
 800670e:	e7cd      	b.n	80066ac <_dtoa_r+0x6c4>
 8006710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006712:	2a00      	cmp	r2, #0
 8006714:	f000 80d0 	beq.w	80068b8 <_dtoa_r+0x8d0>
 8006718:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800671a:	2a01      	cmp	r2, #1
 800671c:	f300 80ae 	bgt.w	800687c <_dtoa_r+0x894>
 8006720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006722:	2a00      	cmp	r2, #0
 8006724:	f000 80a6 	beq.w	8006874 <_dtoa_r+0x88c>
 8006728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800672c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800672e:	9f06      	ldr	r7, [sp, #24]
 8006730:	9a06      	ldr	r2, [sp, #24]
 8006732:	2101      	movs	r1, #1
 8006734:	441a      	add	r2, r3
 8006736:	9206      	str	r2, [sp, #24]
 8006738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673a:	4628      	mov	r0, r5
 800673c:	441a      	add	r2, r3
 800673e:	9209      	str	r2, [sp, #36]	; 0x24
 8006740:	f000 fb5e 	bl	8006e00 <__i2b>
 8006744:	4606      	mov	r6, r0
 8006746:	2f00      	cmp	r7, #0
 8006748:	dd0c      	ble.n	8006764 <_dtoa_r+0x77c>
 800674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	dd09      	ble.n	8006764 <_dtoa_r+0x77c>
 8006750:	42bb      	cmp	r3, r7
 8006752:	bfa8      	it	ge
 8006754:	463b      	movge	r3, r7
 8006756:	9a06      	ldr	r2, [sp, #24]
 8006758:	1aff      	subs	r7, r7, r3
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	9206      	str	r2, [sp, #24]
 800675e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	9309      	str	r3, [sp, #36]	; 0x24
 8006764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006766:	b1f3      	cbz	r3, 80067a6 <_dtoa_r+0x7be>
 8006768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80a8 	beq.w	80068c0 <_dtoa_r+0x8d8>
 8006770:	2c00      	cmp	r4, #0
 8006772:	dd10      	ble.n	8006796 <_dtoa_r+0x7ae>
 8006774:	4631      	mov	r1, r6
 8006776:	4622      	mov	r2, r4
 8006778:	4628      	mov	r0, r5
 800677a:	f000 fbff 	bl	8006f7c <__pow5mult>
 800677e:	465a      	mov	r2, fp
 8006780:	4601      	mov	r1, r0
 8006782:	4606      	mov	r6, r0
 8006784:	4628      	mov	r0, r5
 8006786:	f000 fb51 	bl	8006e2c <__multiply>
 800678a:	4680      	mov	r8, r0
 800678c:	4659      	mov	r1, fp
 800678e:	4628      	mov	r0, r5
 8006790:	f000 fa80 	bl	8006c94 <_Bfree>
 8006794:	46c3      	mov	fp, r8
 8006796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006798:	1b1a      	subs	r2, r3, r4
 800679a:	d004      	beq.n	80067a6 <_dtoa_r+0x7be>
 800679c:	4659      	mov	r1, fp
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 fbec 	bl	8006f7c <__pow5mult>
 80067a4:	4683      	mov	fp, r0
 80067a6:	2101      	movs	r1, #1
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 fb29 	bl	8006e00 <__i2b>
 80067ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067b0:	4604      	mov	r4, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f340 8086 	ble.w	80068c4 <_dtoa_r+0x8dc>
 80067b8:	461a      	mov	r2, r3
 80067ba:	4601      	mov	r1, r0
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 fbdd 	bl	8006f7c <__pow5mult>
 80067c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067c4:	4604      	mov	r4, r0
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	dd7f      	ble.n	80068ca <_dtoa_r+0x8e2>
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067d4:	6918      	ldr	r0, [r3, #16]
 80067d6:	f000 fac5 	bl	8006d64 <__hi0bits>
 80067da:	f1c0 0020 	rsb	r0, r0, #32
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	4418      	add	r0, r3
 80067e2:	f010 001f 	ands.w	r0, r0, #31
 80067e6:	f000 8092 	beq.w	800690e <_dtoa_r+0x926>
 80067ea:	f1c0 0320 	rsb	r3, r0, #32
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	f340 808a 	ble.w	8006908 <_dtoa_r+0x920>
 80067f4:	f1c0 001c 	rsb	r0, r0, #28
 80067f8:	9b06      	ldr	r3, [sp, #24]
 80067fa:	4407      	add	r7, r0
 80067fc:	4403      	add	r3, r0
 80067fe:	9306      	str	r3, [sp, #24]
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	4403      	add	r3, r0
 8006804:	9309      	str	r3, [sp, #36]	; 0x24
 8006806:	9b06      	ldr	r3, [sp, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	dd05      	ble.n	8006818 <_dtoa_r+0x830>
 800680c:	4659      	mov	r1, fp
 800680e:	461a      	mov	r2, r3
 8006810:	4628      	mov	r0, r5
 8006812:	f000 fc0d 	bl	8007030 <__lshift>
 8006816:	4683      	mov	fp, r0
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	dd05      	ble.n	800682a <_dtoa_r+0x842>
 800681e:	4621      	mov	r1, r4
 8006820:	461a      	mov	r2, r3
 8006822:	4628      	mov	r0, r5
 8006824:	f000 fc04 	bl	8007030 <__lshift>
 8006828:	4604      	mov	r4, r0
 800682a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d070      	beq.n	8006912 <_dtoa_r+0x92a>
 8006830:	4621      	mov	r1, r4
 8006832:	4658      	mov	r0, fp
 8006834:	f000 fc6c 	bl	8007110 <__mcmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	da6a      	bge.n	8006912 <_dtoa_r+0x92a>
 800683c:	2300      	movs	r3, #0
 800683e:	4659      	mov	r1, fp
 8006840:	220a      	movs	r2, #10
 8006842:	4628      	mov	r0, r5
 8006844:	f000 fa48 	bl	8006cd8 <__multadd>
 8006848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684a:	4683      	mov	fp, r0
 800684c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8194 	beq.w	8006b7e <_dtoa_r+0xb96>
 8006856:	4631      	mov	r1, r6
 8006858:	2300      	movs	r3, #0
 800685a:	220a      	movs	r2, #10
 800685c:	4628      	mov	r0, r5
 800685e:	f000 fa3b 	bl	8006cd8 <__multadd>
 8006862:	f1b9 0f00 	cmp.w	r9, #0
 8006866:	4606      	mov	r6, r0
 8006868:	f300 8093 	bgt.w	8006992 <_dtoa_r+0x9aa>
 800686c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800686e:	2b02      	cmp	r3, #2
 8006870:	dc57      	bgt.n	8006922 <_dtoa_r+0x93a>
 8006872:	e08e      	b.n	8006992 <_dtoa_r+0x9aa>
 8006874:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800687a:	e757      	b.n	800672c <_dtoa_r+0x744>
 800687c:	9b08      	ldr	r3, [sp, #32]
 800687e:	1e5c      	subs	r4, r3, #1
 8006880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006882:	42a3      	cmp	r3, r4
 8006884:	bfb7      	itett	lt
 8006886:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006888:	1b1c      	subge	r4, r3, r4
 800688a:	1ae2      	sublt	r2, r4, r3
 800688c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800688e:	bfbe      	ittt	lt
 8006890:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006892:	189b      	addlt	r3, r3, r2
 8006894:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006896:	9b08      	ldr	r3, [sp, #32]
 8006898:	bfb8      	it	lt
 800689a:	2400      	movlt	r4, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	bfbb      	ittet	lt
 80068a0:	9b06      	ldrlt	r3, [sp, #24]
 80068a2:	9a08      	ldrlt	r2, [sp, #32]
 80068a4:	9f06      	ldrge	r7, [sp, #24]
 80068a6:	1a9f      	sublt	r7, r3, r2
 80068a8:	bfac      	ite	ge
 80068aa:	9b08      	ldrge	r3, [sp, #32]
 80068ac:	2300      	movlt	r3, #0
 80068ae:	e73f      	b.n	8006730 <_dtoa_r+0x748>
 80068b0:	3fe00000 	.word	0x3fe00000
 80068b4:	40240000 	.word	0x40240000
 80068b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068ba:	9f06      	ldr	r7, [sp, #24]
 80068bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80068be:	e742      	b.n	8006746 <_dtoa_r+0x75e>
 80068c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c2:	e76b      	b.n	800679c <_dtoa_r+0x7b4>
 80068c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	dc19      	bgt.n	80068fe <_dtoa_r+0x916>
 80068ca:	9b04      	ldr	r3, [sp, #16]
 80068cc:	b9bb      	cbnz	r3, 80068fe <_dtoa_r+0x916>
 80068ce:	9b05      	ldr	r3, [sp, #20]
 80068d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d4:	b99b      	cbnz	r3, 80068fe <_dtoa_r+0x916>
 80068d6:	9b05      	ldr	r3, [sp, #20]
 80068d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068dc:	0d1b      	lsrs	r3, r3, #20
 80068de:	051b      	lsls	r3, r3, #20
 80068e0:	b183      	cbz	r3, 8006904 <_dtoa_r+0x91c>
 80068e2:	f04f 0801 	mov.w	r8, #1
 80068e6:	9b06      	ldr	r3, [sp, #24]
 80068e8:	3301      	adds	r3, #1
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ee:	3301      	adds	r3, #1
 80068f0:	9309      	str	r3, [sp, #36]	; 0x24
 80068f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f47f af6a 	bne.w	80067ce <_dtoa_r+0x7e6>
 80068fa:	2001      	movs	r0, #1
 80068fc:	e76f      	b.n	80067de <_dtoa_r+0x7f6>
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	e7f6      	b.n	80068f2 <_dtoa_r+0x90a>
 8006904:	4698      	mov	r8, r3
 8006906:	e7f4      	b.n	80068f2 <_dtoa_r+0x90a>
 8006908:	f43f af7d 	beq.w	8006806 <_dtoa_r+0x81e>
 800690c:	4618      	mov	r0, r3
 800690e:	301c      	adds	r0, #28
 8006910:	e772      	b.n	80067f8 <_dtoa_r+0x810>
 8006912:	9b08      	ldr	r3, [sp, #32]
 8006914:	2b00      	cmp	r3, #0
 8006916:	dc36      	bgt.n	8006986 <_dtoa_r+0x99e>
 8006918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800691a:	2b02      	cmp	r3, #2
 800691c:	dd33      	ble.n	8006986 <_dtoa_r+0x99e>
 800691e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006922:	f1b9 0f00 	cmp.w	r9, #0
 8006926:	d10d      	bne.n	8006944 <_dtoa_r+0x95c>
 8006928:	4621      	mov	r1, r4
 800692a:	464b      	mov	r3, r9
 800692c:	2205      	movs	r2, #5
 800692e:	4628      	mov	r0, r5
 8006930:	f000 f9d2 	bl	8006cd8 <__multadd>
 8006934:	4601      	mov	r1, r0
 8006936:	4604      	mov	r4, r0
 8006938:	4658      	mov	r0, fp
 800693a:	f000 fbe9 	bl	8007110 <__mcmp>
 800693e:	2800      	cmp	r0, #0
 8006940:	f73f adb8 	bgt.w	80064b4 <_dtoa_r+0x4cc>
 8006944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006946:	9f03      	ldr	r7, [sp, #12]
 8006948:	ea6f 0a03 	mvn.w	sl, r3
 800694c:	f04f 0800 	mov.w	r8, #0
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f99e 	bl	8006c94 <_Bfree>
 8006958:	2e00      	cmp	r6, #0
 800695a:	f43f aea7 	beq.w	80066ac <_dtoa_r+0x6c4>
 800695e:	f1b8 0f00 	cmp.w	r8, #0
 8006962:	d005      	beq.n	8006970 <_dtoa_r+0x988>
 8006964:	45b0      	cmp	r8, r6
 8006966:	d003      	beq.n	8006970 <_dtoa_r+0x988>
 8006968:	4641      	mov	r1, r8
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f992 	bl	8006c94 <_Bfree>
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	f000 f98e 	bl	8006c94 <_Bfree>
 8006978:	e698      	b.n	80066ac <_dtoa_r+0x6c4>
 800697a:	2400      	movs	r4, #0
 800697c:	4626      	mov	r6, r4
 800697e:	e7e1      	b.n	8006944 <_dtoa_r+0x95c>
 8006980:	46c2      	mov	sl, r8
 8006982:	4626      	mov	r6, r4
 8006984:	e596      	b.n	80064b4 <_dtoa_r+0x4cc>
 8006986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80fd 	beq.w	8006b8c <_dtoa_r+0xba4>
 8006992:	2f00      	cmp	r7, #0
 8006994:	dd05      	ble.n	80069a2 <_dtoa_r+0x9ba>
 8006996:	4631      	mov	r1, r6
 8006998:	463a      	mov	r2, r7
 800699a:	4628      	mov	r0, r5
 800699c:	f000 fb48 	bl	8007030 <__lshift>
 80069a0:	4606      	mov	r6, r0
 80069a2:	f1b8 0f00 	cmp.w	r8, #0
 80069a6:	d05c      	beq.n	8006a62 <_dtoa_r+0xa7a>
 80069a8:	4628      	mov	r0, r5
 80069aa:	6871      	ldr	r1, [r6, #4]
 80069ac:	f000 f932 	bl	8006c14 <_Balloc>
 80069b0:	4607      	mov	r7, r0
 80069b2:	b928      	cbnz	r0, 80069c0 <_dtoa_r+0x9d8>
 80069b4:	4602      	mov	r2, r0
 80069b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069ba:	4b7f      	ldr	r3, [pc, #508]	; (8006bb8 <_dtoa_r+0xbd0>)
 80069bc:	f7ff bb28 	b.w	8006010 <_dtoa_r+0x28>
 80069c0:	6932      	ldr	r2, [r6, #16]
 80069c2:	f106 010c 	add.w	r1, r6, #12
 80069c6:	3202      	adds	r2, #2
 80069c8:	0092      	lsls	r2, r2, #2
 80069ca:	300c      	adds	r0, #12
 80069cc:	f000 f914 	bl	8006bf8 <memcpy>
 80069d0:	2201      	movs	r2, #1
 80069d2:	4639      	mov	r1, r7
 80069d4:	4628      	mov	r0, r5
 80069d6:	f000 fb2b 	bl	8007030 <__lshift>
 80069da:	46b0      	mov	r8, r6
 80069dc:	4606      	mov	r6, r0
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	3301      	adds	r3, #1
 80069e2:	9308      	str	r3, [sp, #32]
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	444b      	add	r3, r9
 80069e8:	930a      	str	r3, [sp, #40]	; 0x28
 80069ea:	9b04      	ldr	r3, [sp, #16]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	9309      	str	r3, [sp, #36]	; 0x24
 80069f2:	9b08      	ldr	r3, [sp, #32]
 80069f4:	4621      	mov	r1, r4
 80069f6:	3b01      	subs	r3, #1
 80069f8:	4658      	mov	r0, fp
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	f7ff fa68 	bl	8005ed0 <quorem>
 8006a00:	4603      	mov	r3, r0
 8006a02:	4641      	mov	r1, r8
 8006a04:	3330      	adds	r3, #48	; 0x30
 8006a06:	9006      	str	r0, [sp, #24]
 8006a08:	4658      	mov	r0, fp
 8006a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a0c:	f000 fb80 	bl	8007110 <__mcmp>
 8006a10:	4632      	mov	r2, r6
 8006a12:	4681      	mov	r9, r0
 8006a14:	4621      	mov	r1, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 fb96 	bl	8007148 <__mdiff>
 8006a1c:	68c2      	ldr	r2, [r0, #12]
 8006a1e:	4607      	mov	r7, r0
 8006a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a22:	bb02      	cbnz	r2, 8006a66 <_dtoa_r+0xa7e>
 8006a24:	4601      	mov	r1, r0
 8006a26:	4658      	mov	r0, fp
 8006a28:	f000 fb72 	bl	8007110 <__mcmp>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a30:	4639      	mov	r1, r7
 8006a32:	4628      	mov	r0, r5
 8006a34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a38:	f000 f92c 	bl	8006c94 <_Bfree>
 8006a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a40:	9f08      	ldr	r7, [sp, #32]
 8006a42:	ea43 0102 	orr.w	r1, r3, r2
 8006a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4c:	d10d      	bne.n	8006a6a <_dtoa_r+0xa82>
 8006a4e:	2b39      	cmp	r3, #57	; 0x39
 8006a50:	d029      	beq.n	8006aa6 <_dtoa_r+0xabe>
 8006a52:	f1b9 0f00 	cmp.w	r9, #0
 8006a56:	dd01      	ble.n	8006a5c <_dtoa_r+0xa74>
 8006a58:	9b06      	ldr	r3, [sp, #24]
 8006a5a:	3331      	adds	r3, #49	; 0x31
 8006a5c:	9a04      	ldr	r2, [sp, #16]
 8006a5e:	7013      	strb	r3, [r2, #0]
 8006a60:	e776      	b.n	8006950 <_dtoa_r+0x968>
 8006a62:	4630      	mov	r0, r6
 8006a64:	e7b9      	b.n	80069da <_dtoa_r+0x9f2>
 8006a66:	2201      	movs	r2, #1
 8006a68:	e7e2      	b.n	8006a30 <_dtoa_r+0xa48>
 8006a6a:	f1b9 0f00 	cmp.w	r9, #0
 8006a6e:	db06      	blt.n	8006a7e <_dtoa_r+0xa96>
 8006a70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a72:	ea41 0909 	orr.w	r9, r1, r9
 8006a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a78:	ea59 0101 	orrs.w	r1, r9, r1
 8006a7c:	d120      	bne.n	8006ac0 <_dtoa_r+0xad8>
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	ddec      	ble.n	8006a5c <_dtoa_r+0xa74>
 8006a82:	4659      	mov	r1, fp
 8006a84:	2201      	movs	r2, #1
 8006a86:	4628      	mov	r0, r5
 8006a88:	9308      	str	r3, [sp, #32]
 8006a8a:	f000 fad1 	bl	8007030 <__lshift>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4683      	mov	fp, r0
 8006a92:	f000 fb3d 	bl	8007110 <__mcmp>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	9b08      	ldr	r3, [sp, #32]
 8006a9a:	dc02      	bgt.n	8006aa2 <_dtoa_r+0xaba>
 8006a9c:	d1de      	bne.n	8006a5c <_dtoa_r+0xa74>
 8006a9e:	07da      	lsls	r2, r3, #31
 8006aa0:	d5dc      	bpl.n	8006a5c <_dtoa_r+0xa74>
 8006aa2:	2b39      	cmp	r3, #57	; 0x39
 8006aa4:	d1d8      	bne.n	8006a58 <_dtoa_r+0xa70>
 8006aa6:	2339      	movs	r3, #57	; 0x39
 8006aa8:	9a04      	ldr	r2, [sp, #16]
 8006aaa:	7013      	strb	r3, [r2, #0]
 8006aac:	463b      	mov	r3, r7
 8006aae:	461f      	mov	r7, r3
 8006ab0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	2a39      	cmp	r2, #57	; 0x39
 8006ab8:	d050      	beq.n	8006b5c <_dtoa_r+0xb74>
 8006aba:	3201      	adds	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e747      	b.n	8006950 <_dtoa_r+0x968>
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	dd03      	ble.n	8006acc <_dtoa_r+0xae4>
 8006ac4:	2b39      	cmp	r3, #57	; 0x39
 8006ac6:	d0ee      	beq.n	8006aa6 <_dtoa_r+0xabe>
 8006ac8:	3301      	adds	r3, #1
 8006aca:	e7c7      	b.n	8006a5c <_dtoa_r+0xa74>
 8006acc:	9a08      	ldr	r2, [sp, #32]
 8006ace:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ad0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ad4:	428a      	cmp	r2, r1
 8006ad6:	d02a      	beq.n	8006b2e <_dtoa_r+0xb46>
 8006ad8:	4659      	mov	r1, fp
 8006ada:	2300      	movs	r3, #0
 8006adc:	220a      	movs	r2, #10
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 f8fa 	bl	8006cd8 <__multadd>
 8006ae4:	45b0      	cmp	r8, r6
 8006ae6:	4683      	mov	fp, r0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	f04f 020a 	mov.w	r2, #10
 8006af0:	4641      	mov	r1, r8
 8006af2:	4628      	mov	r0, r5
 8006af4:	d107      	bne.n	8006b06 <_dtoa_r+0xb1e>
 8006af6:	f000 f8ef 	bl	8006cd8 <__multadd>
 8006afa:	4680      	mov	r8, r0
 8006afc:	4606      	mov	r6, r0
 8006afe:	9b08      	ldr	r3, [sp, #32]
 8006b00:	3301      	adds	r3, #1
 8006b02:	9308      	str	r3, [sp, #32]
 8006b04:	e775      	b.n	80069f2 <_dtoa_r+0xa0a>
 8006b06:	f000 f8e7 	bl	8006cd8 <__multadd>
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	2300      	movs	r3, #0
 8006b10:	220a      	movs	r2, #10
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 f8e0 	bl	8006cd8 <__multadd>
 8006b18:	4606      	mov	r6, r0
 8006b1a:	e7f0      	b.n	8006afe <_dtoa_r+0xb16>
 8006b1c:	f1b9 0f00 	cmp.w	r9, #0
 8006b20:	bfcc      	ite	gt
 8006b22:	464f      	movgt	r7, r9
 8006b24:	2701      	movle	r7, #1
 8006b26:	f04f 0800 	mov.w	r8, #0
 8006b2a:	9a03      	ldr	r2, [sp, #12]
 8006b2c:	4417      	add	r7, r2
 8006b2e:	4659      	mov	r1, fp
 8006b30:	2201      	movs	r2, #1
 8006b32:	4628      	mov	r0, r5
 8006b34:	9308      	str	r3, [sp, #32]
 8006b36:	f000 fa7b 	bl	8007030 <__lshift>
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4683      	mov	fp, r0
 8006b3e:	f000 fae7 	bl	8007110 <__mcmp>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	dcb2      	bgt.n	8006aac <_dtoa_r+0xac4>
 8006b46:	d102      	bne.n	8006b4e <_dtoa_r+0xb66>
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	07db      	lsls	r3, r3, #31
 8006b4c:	d4ae      	bmi.n	8006aac <_dtoa_r+0xac4>
 8006b4e:	463b      	mov	r3, r7
 8006b50:	461f      	mov	r7, r3
 8006b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b56:	2a30      	cmp	r2, #48	; 0x30
 8006b58:	d0fa      	beq.n	8006b50 <_dtoa_r+0xb68>
 8006b5a:	e6f9      	b.n	8006950 <_dtoa_r+0x968>
 8006b5c:	9a03      	ldr	r2, [sp, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d1a5      	bne.n	8006aae <_dtoa_r+0xac6>
 8006b62:	2331      	movs	r3, #49	; 0x31
 8006b64:	f10a 0a01 	add.w	sl, sl, #1
 8006b68:	e779      	b.n	8006a5e <_dtoa_r+0xa76>
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <_dtoa_r+0xbd4>)
 8006b6c:	f7ff baa8 	b.w	80060c0 <_dtoa_r+0xd8>
 8006b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f47f aa81 	bne.w	800607a <_dtoa_r+0x92>
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <_dtoa_r+0xbd8>)
 8006b7a:	f7ff baa1 	b.w	80060c0 <_dtoa_r+0xd8>
 8006b7e:	f1b9 0f00 	cmp.w	r9, #0
 8006b82:	dc03      	bgt.n	8006b8c <_dtoa_r+0xba4>
 8006b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	f73f aecb 	bgt.w	8006922 <_dtoa_r+0x93a>
 8006b8c:	9f03      	ldr	r7, [sp, #12]
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4658      	mov	r0, fp
 8006b92:	f7ff f99d 	bl	8005ed0 <quorem>
 8006b96:	9a03      	ldr	r2, [sp, #12]
 8006b98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b9c:	f807 3b01 	strb.w	r3, [r7], #1
 8006ba0:	1aba      	subs	r2, r7, r2
 8006ba2:	4591      	cmp	r9, r2
 8006ba4:	ddba      	ble.n	8006b1c <_dtoa_r+0xb34>
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	2300      	movs	r3, #0
 8006baa:	220a      	movs	r2, #10
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 f893 	bl	8006cd8 <__multadd>
 8006bb2:	4683      	mov	fp, r0
 8006bb4:	e7eb      	b.n	8006b8e <_dtoa_r+0xba6>
 8006bb6:	bf00      	nop
 8006bb8:	08009797 	.word	0x08009797
 8006bbc:	080096f4 	.word	0x080096f4
 8006bc0:	08009718 	.word	0x08009718

08006bc4 <_localeconv_r>:
 8006bc4:	4800      	ldr	r0, [pc, #0]	; (8006bc8 <_localeconv_r+0x4>)
 8006bc6:	4770      	bx	lr
 8006bc8:	20000164 	.word	0x20000164

08006bcc <malloc>:
 8006bcc:	4b02      	ldr	r3, [pc, #8]	; (8006bd8 <malloc+0xc>)
 8006bce:	4601      	mov	r1, r0
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	f000 bc1d 	b.w	8007410 <_malloc_r>
 8006bd6:	bf00      	nop
 8006bd8:	20000010 	.word	0x20000010

08006bdc <memchr>:
 8006bdc:	4603      	mov	r3, r0
 8006bde:	b510      	push	{r4, lr}
 8006be0:	b2c9      	uxtb	r1, r1
 8006be2:	4402      	add	r2, r0
 8006be4:	4293      	cmp	r3, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	d101      	bne.n	8006bee <memchr+0x12>
 8006bea:	2000      	movs	r0, #0
 8006bec:	e003      	b.n	8006bf6 <memchr+0x1a>
 8006bee:	7804      	ldrb	r4, [r0, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	428c      	cmp	r4, r1
 8006bf4:	d1f6      	bne.n	8006be4 <memchr+0x8>
 8006bf6:	bd10      	pop	{r4, pc}

08006bf8 <memcpy>:
 8006bf8:	440a      	add	r2, r1
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c00:	d100      	bne.n	8006c04 <memcpy+0xc>
 8006c02:	4770      	bx	lr
 8006c04:	b510      	push	{r4, lr}
 8006c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c10:	d1f9      	bne.n	8006c06 <memcpy+0xe>
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <_Balloc>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	b976      	cbnz	r6, 8006c3c <_Balloc+0x28>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f7ff ffd4 	bl	8006bcc <malloc>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6260      	str	r0, [r4, #36]	; 0x24
 8006c28:	b920      	cbnz	r0, 8006c34 <_Balloc+0x20>
 8006c2a:	2166      	movs	r1, #102	; 0x66
 8006c2c:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <_Balloc+0x78>)
 8006c2e:	4818      	ldr	r0, [pc, #96]	; (8006c90 <_Balloc+0x7c>)
 8006c30:	f000 fc72 	bl	8007518 <__assert_func>
 8006c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c38:	6006      	str	r6, [r0, #0]
 8006c3a:	60c6      	str	r6, [r0, #12]
 8006c3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c3e:	68f3      	ldr	r3, [r6, #12]
 8006c40:	b183      	cbz	r3, 8006c64 <_Balloc+0x50>
 8006c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c4a:	b9b8      	cbnz	r0, 8006c7c <_Balloc+0x68>
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c52:	1d72      	adds	r2, r6, #5
 8006c54:	4620      	mov	r0, r4
 8006c56:	0092      	lsls	r2, r2, #2
 8006c58:	f000 fb5e 	bl	8007318 <_calloc_r>
 8006c5c:	b160      	cbz	r0, 8006c78 <_Balloc+0x64>
 8006c5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c62:	e00e      	b.n	8006c82 <_Balloc+0x6e>
 8006c64:	2221      	movs	r2, #33	; 0x21
 8006c66:	2104      	movs	r1, #4
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 fb55 	bl	8007318 <_calloc_r>
 8006c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c70:	60f0      	str	r0, [r6, #12]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e4      	bne.n	8006c42 <_Balloc+0x2e>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	6802      	ldr	r2, [r0, #0]
 8006c7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c82:	2300      	movs	r3, #0
 8006c84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c88:	e7f7      	b.n	8006c7a <_Balloc+0x66>
 8006c8a:	bf00      	nop
 8006c8c:	08009725 	.word	0x08009725
 8006c90:	080097a8 	.word	0x080097a8

08006c94 <_Bfree>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c98:	4605      	mov	r5, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	b976      	cbnz	r6, 8006cbc <_Bfree+0x28>
 8006c9e:	2010      	movs	r0, #16
 8006ca0:	f7ff ff94 	bl	8006bcc <malloc>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6268      	str	r0, [r5, #36]	; 0x24
 8006ca8:	b920      	cbnz	r0, 8006cb4 <_Bfree+0x20>
 8006caa:	218a      	movs	r1, #138	; 0x8a
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <_Bfree+0x3c>)
 8006cae:	4809      	ldr	r0, [pc, #36]	; (8006cd4 <_Bfree+0x40>)
 8006cb0:	f000 fc32 	bl	8007518 <__assert_func>
 8006cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cb8:	6006      	str	r6, [r0, #0]
 8006cba:	60c6      	str	r6, [r0, #12]
 8006cbc:	b13c      	cbz	r4, 8006cce <_Bfree+0x3a>
 8006cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cc0:	6862      	ldr	r2, [r4, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cc8:	6021      	str	r1, [r4, #0]
 8006cca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	08009725 	.word	0x08009725
 8006cd4:	080097a8 	.word	0x080097a8

08006cd8 <__multadd>:
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	4607      	mov	r7, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	461e      	mov	r6, r3
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	690d      	ldr	r5, [r1, #16]
 8006ce6:	f101 0c14 	add.w	ip, r1, #20
 8006cea:	f8dc 3000 	ldr.w	r3, [ip]
 8006cee:	3001      	adds	r0, #1
 8006cf0:	b299      	uxth	r1, r3
 8006cf2:	fb02 6101 	mla	r1, r2, r1, r6
 8006cf6:	0c1e      	lsrs	r6, r3, #16
 8006cf8:	0c0b      	lsrs	r3, r1, #16
 8006cfa:	fb02 3306 	mla	r3, r2, r6, r3
 8006cfe:	b289      	uxth	r1, r1
 8006d00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d04:	4285      	cmp	r5, r0
 8006d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d0e:	dcec      	bgt.n	8006cea <__multadd+0x12>
 8006d10:	b30e      	cbz	r6, 8006d56 <__multadd+0x7e>
 8006d12:	68a3      	ldr	r3, [r4, #8]
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	dc19      	bgt.n	8006d4c <__multadd+0x74>
 8006d18:	6861      	ldr	r1, [r4, #4]
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	3101      	adds	r1, #1
 8006d1e:	f7ff ff79 	bl	8006c14 <_Balloc>
 8006d22:	4680      	mov	r8, r0
 8006d24:	b928      	cbnz	r0, 8006d32 <__multadd+0x5a>
 8006d26:	4602      	mov	r2, r0
 8006d28:	21b5      	movs	r1, #181	; 0xb5
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <__multadd+0x84>)
 8006d2c:	480c      	ldr	r0, [pc, #48]	; (8006d60 <__multadd+0x88>)
 8006d2e:	f000 fbf3 	bl	8007518 <__assert_func>
 8006d32:	6922      	ldr	r2, [r4, #16]
 8006d34:	f104 010c 	add.w	r1, r4, #12
 8006d38:	3202      	adds	r2, #2
 8006d3a:	0092      	lsls	r2, r2, #2
 8006d3c:	300c      	adds	r0, #12
 8006d3e:	f7ff ff5b 	bl	8006bf8 <memcpy>
 8006d42:	4621      	mov	r1, r4
 8006d44:	4638      	mov	r0, r7
 8006d46:	f7ff ffa5 	bl	8006c94 <_Bfree>
 8006d4a:	4644      	mov	r4, r8
 8006d4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d50:	3501      	adds	r5, #1
 8006d52:	615e      	str	r6, [r3, #20]
 8006d54:	6125      	str	r5, [r4, #16]
 8006d56:	4620      	mov	r0, r4
 8006d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d5c:	08009797 	.word	0x08009797
 8006d60:	080097a8 	.word	0x080097a8

08006d64 <__hi0bits>:
 8006d64:	0c02      	lsrs	r2, r0, #16
 8006d66:	0412      	lsls	r2, r2, #16
 8006d68:	4603      	mov	r3, r0
 8006d6a:	b9ca      	cbnz	r2, 8006da0 <__hi0bits+0x3c>
 8006d6c:	0403      	lsls	r3, r0, #16
 8006d6e:	2010      	movs	r0, #16
 8006d70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d74:	bf04      	itt	eq
 8006d76:	021b      	lsleq	r3, r3, #8
 8006d78:	3008      	addeq	r0, #8
 8006d7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d7e:	bf04      	itt	eq
 8006d80:	011b      	lsleq	r3, r3, #4
 8006d82:	3004      	addeq	r0, #4
 8006d84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d88:	bf04      	itt	eq
 8006d8a:	009b      	lsleq	r3, r3, #2
 8006d8c:	3002      	addeq	r0, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	db05      	blt.n	8006d9e <__hi0bits+0x3a>
 8006d92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006d96:	f100 0001 	add.w	r0, r0, #1
 8006d9a:	bf08      	it	eq
 8006d9c:	2020      	moveq	r0, #32
 8006d9e:	4770      	bx	lr
 8006da0:	2000      	movs	r0, #0
 8006da2:	e7e5      	b.n	8006d70 <__hi0bits+0xc>

08006da4 <__lo0bits>:
 8006da4:	6803      	ldr	r3, [r0, #0]
 8006da6:	4602      	mov	r2, r0
 8006da8:	f013 0007 	ands.w	r0, r3, #7
 8006dac:	d00b      	beq.n	8006dc6 <__lo0bits+0x22>
 8006dae:	07d9      	lsls	r1, r3, #31
 8006db0:	d421      	bmi.n	8006df6 <__lo0bits+0x52>
 8006db2:	0798      	lsls	r0, r3, #30
 8006db4:	bf49      	itett	mi
 8006db6:	085b      	lsrmi	r3, r3, #1
 8006db8:	089b      	lsrpl	r3, r3, #2
 8006dba:	2001      	movmi	r0, #1
 8006dbc:	6013      	strmi	r3, [r2, #0]
 8006dbe:	bf5c      	itt	pl
 8006dc0:	2002      	movpl	r0, #2
 8006dc2:	6013      	strpl	r3, [r2, #0]
 8006dc4:	4770      	bx	lr
 8006dc6:	b299      	uxth	r1, r3
 8006dc8:	b909      	cbnz	r1, 8006dce <__lo0bits+0x2a>
 8006dca:	2010      	movs	r0, #16
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	b2d9      	uxtb	r1, r3
 8006dd0:	b909      	cbnz	r1, 8006dd6 <__lo0bits+0x32>
 8006dd2:	3008      	adds	r0, #8
 8006dd4:	0a1b      	lsrs	r3, r3, #8
 8006dd6:	0719      	lsls	r1, r3, #28
 8006dd8:	bf04      	itt	eq
 8006dda:	091b      	lsreq	r3, r3, #4
 8006ddc:	3004      	addeq	r0, #4
 8006dde:	0799      	lsls	r1, r3, #30
 8006de0:	bf04      	itt	eq
 8006de2:	089b      	lsreq	r3, r3, #2
 8006de4:	3002      	addeq	r0, #2
 8006de6:	07d9      	lsls	r1, r3, #31
 8006de8:	d403      	bmi.n	8006df2 <__lo0bits+0x4e>
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	f100 0001 	add.w	r0, r0, #1
 8006df0:	d003      	beq.n	8006dfa <__lo0bits+0x56>
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	4770      	bx	lr
 8006df6:	2000      	movs	r0, #0
 8006df8:	4770      	bx	lr
 8006dfa:	2020      	movs	r0, #32
 8006dfc:	4770      	bx	lr
	...

08006e00 <__i2b>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	460c      	mov	r4, r1
 8006e04:	2101      	movs	r1, #1
 8006e06:	f7ff ff05 	bl	8006c14 <_Balloc>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	b928      	cbnz	r0, 8006e1a <__i2b+0x1a>
 8006e0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <__i2b+0x24>)
 8006e14:	4804      	ldr	r0, [pc, #16]	; (8006e28 <__i2b+0x28>)
 8006e16:	f000 fb7f 	bl	8007518 <__assert_func>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	6144      	str	r4, [r0, #20]
 8006e1e:	6103      	str	r3, [r0, #16]
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	bf00      	nop
 8006e24:	08009797 	.word	0x08009797
 8006e28:	080097a8 	.word	0x080097a8

08006e2c <__multiply>:
 8006e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	4691      	mov	r9, r2
 8006e32:	690a      	ldr	r2, [r1, #16]
 8006e34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e38:	460c      	mov	r4, r1
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	bfbe      	ittt	lt
 8006e3e:	460b      	movlt	r3, r1
 8006e40:	464c      	movlt	r4, r9
 8006e42:	4699      	movlt	r9, r3
 8006e44:	6927      	ldr	r7, [r4, #16]
 8006e46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	6861      	ldr	r1, [r4, #4]
 8006e4e:	eb07 060a 	add.w	r6, r7, sl
 8006e52:	42b3      	cmp	r3, r6
 8006e54:	b085      	sub	sp, #20
 8006e56:	bfb8      	it	lt
 8006e58:	3101      	addlt	r1, #1
 8006e5a:	f7ff fedb 	bl	8006c14 <_Balloc>
 8006e5e:	b930      	cbnz	r0, 8006e6e <__multiply+0x42>
 8006e60:	4602      	mov	r2, r0
 8006e62:	f240 115d 	movw	r1, #349	; 0x15d
 8006e66:	4b43      	ldr	r3, [pc, #268]	; (8006f74 <__multiply+0x148>)
 8006e68:	4843      	ldr	r0, [pc, #268]	; (8006f78 <__multiply+0x14c>)
 8006e6a:	f000 fb55 	bl	8007518 <__assert_func>
 8006e6e:	f100 0514 	add.w	r5, r0, #20
 8006e72:	462b      	mov	r3, r5
 8006e74:	2200      	movs	r2, #0
 8006e76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e7a:	4543      	cmp	r3, r8
 8006e7c:	d321      	bcc.n	8006ec2 <__multiply+0x96>
 8006e7e:	f104 0314 	add.w	r3, r4, #20
 8006e82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e86:	f109 0314 	add.w	r3, r9, #20
 8006e8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e8e:	9202      	str	r2, [sp, #8]
 8006e90:	1b3a      	subs	r2, r7, r4
 8006e92:	3a15      	subs	r2, #21
 8006e94:	f022 0203 	bic.w	r2, r2, #3
 8006e98:	3204      	adds	r2, #4
 8006e9a:	f104 0115 	add.w	r1, r4, #21
 8006e9e:	428f      	cmp	r7, r1
 8006ea0:	bf38      	it	cc
 8006ea2:	2204      	movcc	r2, #4
 8006ea4:	9201      	str	r2, [sp, #4]
 8006ea6:	9a02      	ldr	r2, [sp, #8]
 8006ea8:	9303      	str	r3, [sp, #12]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d80c      	bhi.n	8006ec8 <__multiply+0x9c>
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	dd03      	ble.n	8006eba <__multiply+0x8e>
 8006eb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d059      	beq.n	8006f6e <__multiply+0x142>
 8006eba:	6106      	str	r6, [r0, #16]
 8006ebc:	b005      	add	sp, #20
 8006ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec2:	f843 2b04 	str.w	r2, [r3], #4
 8006ec6:	e7d8      	b.n	8006e7a <__multiply+0x4e>
 8006ec8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ecc:	f1ba 0f00 	cmp.w	sl, #0
 8006ed0:	d023      	beq.n	8006f1a <__multiply+0xee>
 8006ed2:	46a9      	mov	r9, r5
 8006ed4:	f04f 0c00 	mov.w	ip, #0
 8006ed8:	f104 0e14 	add.w	lr, r4, #20
 8006edc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ee0:	f8d9 1000 	ldr.w	r1, [r9]
 8006ee4:	fa1f fb82 	uxth.w	fp, r2
 8006ee8:	b289      	uxth	r1, r1
 8006eea:	fb0a 110b 	mla	r1, sl, fp, r1
 8006eee:	4461      	add	r1, ip
 8006ef0:	f8d9 c000 	ldr.w	ip, [r9]
 8006ef4:	0c12      	lsrs	r2, r2, #16
 8006ef6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006efa:	fb0a c202 	mla	r2, sl, r2, ip
 8006efe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f02:	b289      	uxth	r1, r1
 8006f04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f08:	4577      	cmp	r7, lr
 8006f0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f0e:	f849 1b04 	str.w	r1, [r9], #4
 8006f12:	d8e3      	bhi.n	8006edc <__multiply+0xb0>
 8006f14:	9a01      	ldr	r2, [sp, #4]
 8006f16:	f845 c002 	str.w	ip, [r5, r2]
 8006f1a:	9a03      	ldr	r2, [sp, #12]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f22:	f1b9 0f00 	cmp.w	r9, #0
 8006f26:	d020      	beq.n	8006f6a <__multiply+0x13e>
 8006f28:	46ae      	mov	lr, r5
 8006f2a:	f04f 0a00 	mov.w	sl, #0
 8006f2e:	6829      	ldr	r1, [r5, #0]
 8006f30:	f104 0c14 	add.w	ip, r4, #20
 8006f34:	f8bc b000 	ldrh.w	fp, [ip]
 8006f38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f3c:	b289      	uxth	r1, r1
 8006f3e:	fb09 220b 	mla	r2, r9, fp, r2
 8006f42:	4492      	add	sl, r2
 8006f44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f48:	f84e 1b04 	str.w	r1, [lr], #4
 8006f4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f50:	f8be 1000 	ldrh.w	r1, [lr]
 8006f54:	0c12      	lsrs	r2, r2, #16
 8006f56:	fb09 1102 	mla	r1, r9, r2, r1
 8006f5a:	4567      	cmp	r7, ip
 8006f5c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f64:	d8e6      	bhi.n	8006f34 <__multiply+0x108>
 8006f66:	9a01      	ldr	r2, [sp, #4]
 8006f68:	50a9      	str	r1, [r5, r2]
 8006f6a:	3504      	adds	r5, #4
 8006f6c:	e79b      	b.n	8006ea6 <__multiply+0x7a>
 8006f6e:	3e01      	subs	r6, #1
 8006f70:	e79d      	b.n	8006eae <__multiply+0x82>
 8006f72:	bf00      	nop
 8006f74:	08009797 	.word	0x08009797
 8006f78:	080097a8 	.word	0x080097a8

08006f7c <__pow5mult>:
 8006f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	4615      	mov	r5, r2
 8006f82:	f012 0203 	ands.w	r2, r2, #3
 8006f86:	4606      	mov	r6, r0
 8006f88:	460f      	mov	r7, r1
 8006f8a:	d007      	beq.n	8006f9c <__pow5mult+0x20>
 8006f8c:	4c25      	ldr	r4, [pc, #148]	; (8007024 <__pow5mult+0xa8>)
 8006f8e:	3a01      	subs	r2, #1
 8006f90:	2300      	movs	r3, #0
 8006f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f96:	f7ff fe9f 	bl	8006cd8 <__multadd>
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	10ad      	asrs	r5, r5, #2
 8006f9e:	d03d      	beq.n	800701c <__pow5mult+0xa0>
 8006fa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fa2:	b97c      	cbnz	r4, 8006fc4 <__pow5mult+0x48>
 8006fa4:	2010      	movs	r0, #16
 8006fa6:	f7ff fe11 	bl	8006bcc <malloc>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6270      	str	r0, [r6, #36]	; 0x24
 8006fae:	b928      	cbnz	r0, 8006fbc <__pow5mult+0x40>
 8006fb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006fb4:	4b1c      	ldr	r3, [pc, #112]	; (8007028 <__pow5mult+0xac>)
 8006fb6:	481d      	ldr	r0, [pc, #116]	; (800702c <__pow5mult+0xb0>)
 8006fb8:	f000 faae 	bl	8007518 <__assert_func>
 8006fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fc0:	6004      	str	r4, [r0, #0]
 8006fc2:	60c4      	str	r4, [r0, #12]
 8006fc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fcc:	b94c      	cbnz	r4, 8006fe2 <__pow5mult+0x66>
 8006fce:	f240 2171 	movw	r1, #625	; 0x271
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff ff14 	bl	8006e00 <__i2b>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fe0:	6003      	str	r3, [r0, #0]
 8006fe2:	f04f 0900 	mov.w	r9, #0
 8006fe6:	07eb      	lsls	r3, r5, #31
 8006fe8:	d50a      	bpl.n	8007000 <__pow5mult+0x84>
 8006fea:	4639      	mov	r1, r7
 8006fec:	4622      	mov	r2, r4
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f7ff ff1c 	bl	8006e2c <__multiply>
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7ff fe4b 	bl	8006c94 <_Bfree>
 8006ffe:	4647      	mov	r7, r8
 8007000:	106d      	asrs	r5, r5, #1
 8007002:	d00b      	beq.n	800701c <__pow5mult+0xa0>
 8007004:	6820      	ldr	r0, [r4, #0]
 8007006:	b938      	cbnz	r0, 8007018 <__pow5mult+0x9c>
 8007008:	4622      	mov	r2, r4
 800700a:	4621      	mov	r1, r4
 800700c:	4630      	mov	r0, r6
 800700e:	f7ff ff0d 	bl	8006e2c <__multiply>
 8007012:	6020      	str	r0, [r4, #0]
 8007014:	f8c0 9000 	str.w	r9, [r0]
 8007018:	4604      	mov	r4, r0
 800701a:	e7e4      	b.n	8006fe6 <__pow5mult+0x6a>
 800701c:	4638      	mov	r0, r7
 800701e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007022:	bf00      	nop
 8007024:	080098f8 	.word	0x080098f8
 8007028:	08009725 	.word	0x08009725
 800702c:	080097a8 	.word	0x080097a8

08007030 <__lshift>:
 8007030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	460c      	mov	r4, r1
 8007036:	4607      	mov	r7, r0
 8007038:	4691      	mov	r9, r2
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	6849      	ldr	r1, [r1, #4]
 800703e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007042:	68a3      	ldr	r3, [r4, #8]
 8007044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007048:	f108 0601 	add.w	r6, r8, #1
 800704c:	42b3      	cmp	r3, r6
 800704e:	db0b      	blt.n	8007068 <__lshift+0x38>
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff fddf 	bl	8006c14 <_Balloc>
 8007056:	4605      	mov	r5, r0
 8007058:	b948      	cbnz	r0, 800706e <__lshift+0x3e>
 800705a:	4602      	mov	r2, r0
 800705c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007060:	4b29      	ldr	r3, [pc, #164]	; (8007108 <__lshift+0xd8>)
 8007062:	482a      	ldr	r0, [pc, #168]	; (800710c <__lshift+0xdc>)
 8007064:	f000 fa58 	bl	8007518 <__assert_func>
 8007068:	3101      	adds	r1, #1
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	e7ee      	b.n	800704c <__lshift+0x1c>
 800706e:	2300      	movs	r3, #0
 8007070:	f100 0114 	add.w	r1, r0, #20
 8007074:	f100 0210 	add.w	r2, r0, #16
 8007078:	4618      	mov	r0, r3
 800707a:	4553      	cmp	r3, sl
 800707c:	db37      	blt.n	80070ee <__lshift+0xbe>
 800707e:	6920      	ldr	r0, [r4, #16]
 8007080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007084:	f104 0314 	add.w	r3, r4, #20
 8007088:	f019 091f 	ands.w	r9, r9, #31
 800708c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007090:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007094:	d02f      	beq.n	80070f6 <__lshift+0xc6>
 8007096:	468a      	mov	sl, r1
 8007098:	f04f 0c00 	mov.w	ip, #0
 800709c:	f1c9 0e20 	rsb	lr, r9, #32
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	fa02 f209 	lsl.w	r2, r2, r9
 80070a6:	ea42 020c 	orr.w	r2, r2, ip
 80070aa:	f84a 2b04 	str.w	r2, [sl], #4
 80070ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b2:	4298      	cmp	r0, r3
 80070b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80070b8:	d8f2      	bhi.n	80070a0 <__lshift+0x70>
 80070ba:	1b03      	subs	r3, r0, r4
 80070bc:	3b15      	subs	r3, #21
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	3304      	adds	r3, #4
 80070c4:	f104 0215 	add.w	r2, r4, #21
 80070c8:	4290      	cmp	r0, r2
 80070ca:	bf38      	it	cc
 80070cc:	2304      	movcc	r3, #4
 80070ce:	f841 c003 	str.w	ip, [r1, r3]
 80070d2:	f1bc 0f00 	cmp.w	ip, #0
 80070d6:	d001      	beq.n	80070dc <__lshift+0xac>
 80070d8:	f108 0602 	add.w	r6, r8, #2
 80070dc:	3e01      	subs	r6, #1
 80070de:	4638      	mov	r0, r7
 80070e0:	4621      	mov	r1, r4
 80070e2:	612e      	str	r6, [r5, #16]
 80070e4:	f7ff fdd6 	bl	8006c94 <_Bfree>
 80070e8:	4628      	mov	r0, r5
 80070ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80070f2:	3301      	adds	r3, #1
 80070f4:	e7c1      	b.n	800707a <__lshift+0x4a>
 80070f6:	3904      	subs	r1, #4
 80070f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fc:	4298      	cmp	r0, r3
 80070fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007102:	d8f9      	bhi.n	80070f8 <__lshift+0xc8>
 8007104:	e7ea      	b.n	80070dc <__lshift+0xac>
 8007106:	bf00      	nop
 8007108:	08009797 	.word	0x08009797
 800710c:	080097a8 	.word	0x080097a8

08007110 <__mcmp>:
 8007110:	4603      	mov	r3, r0
 8007112:	690a      	ldr	r2, [r1, #16]
 8007114:	6900      	ldr	r0, [r0, #16]
 8007116:	b530      	push	{r4, r5, lr}
 8007118:	1a80      	subs	r0, r0, r2
 800711a:	d10d      	bne.n	8007138 <__mcmp+0x28>
 800711c:	3314      	adds	r3, #20
 800711e:	3114      	adds	r1, #20
 8007120:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007124:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007128:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800712c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007130:	4295      	cmp	r5, r2
 8007132:	d002      	beq.n	800713a <__mcmp+0x2a>
 8007134:	d304      	bcc.n	8007140 <__mcmp+0x30>
 8007136:	2001      	movs	r0, #1
 8007138:	bd30      	pop	{r4, r5, pc}
 800713a:	42a3      	cmp	r3, r4
 800713c:	d3f4      	bcc.n	8007128 <__mcmp+0x18>
 800713e:	e7fb      	b.n	8007138 <__mcmp+0x28>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	e7f8      	b.n	8007138 <__mcmp+0x28>
	...

08007148 <__mdiff>:
 8007148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	460d      	mov	r5, r1
 800714e:	4607      	mov	r7, r0
 8007150:	4611      	mov	r1, r2
 8007152:	4628      	mov	r0, r5
 8007154:	4614      	mov	r4, r2
 8007156:	f7ff ffdb 	bl	8007110 <__mcmp>
 800715a:	1e06      	subs	r6, r0, #0
 800715c:	d111      	bne.n	8007182 <__mdiff+0x3a>
 800715e:	4631      	mov	r1, r6
 8007160:	4638      	mov	r0, r7
 8007162:	f7ff fd57 	bl	8006c14 <_Balloc>
 8007166:	4602      	mov	r2, r0
 8007168:	b928      	cbnz	r0, 8007176 <__mdiff+0x2e>
 800716a:	f240 2132 	movw	r1, #562	; 0x232
 800716e:	4b3a      	ldr	r3, [pc, #232]	; (8007258 <__mdiff+0x110>)
 8007170:	483a      	ldr	r0, [pc, #232]	; (800725c <__mdiff+0x114>)
 8007172:	f000 f9d1 	bl	8007518 <__assert_func>
 8007176:	2301      	movs	r3, #1
 8007178:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800717c:	4610      	mov	r0, r2
 800717e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	bfa4      	itt	ge
 8007184:	4623      	movge	r3, r4
 8007186:	462c      	movge	r4, r5
 8007188:	4638      	mov	r0, r7
 800718a:	6861      	ldr	r1, [r4, #4]
 800718c:	bfa6      	itte	ge
 800718e:	461d      	movge	r5, r3
 8007190:	2600      	movge	r6, #0
 8007192:	2601      	movlt	r6, #1
 8007194:	f7ff fd3e 	bl	8006c14 <_Balloc>
 8007198:	4602      	mov	r2, r0
 800719a:	b918      	cbnz	r0, 80071a4 <__mdiff+0x5c>
 800719c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071a0:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <__mdiff+0x110>)
 80071a2:	e7e5      	b.n	8007170 <__mdiff+0x28>
 80071a4:	f102 0814 	add.w	r8, r2, #20
 80071a8:	46c2      	mov	sl, r8
 80071aa:	f04f 0c00 	mov.w	ip, #0
 80071ae:	6927      	ldr	r7, [r4, #16]
 80071b0:	60c6      	str	r6, [r0, #12]
 80071b2:	692e      	ldr	r6, [r5, #16]
 80071b4:	f104 0014 	add.w	r0, r4, #20
 80071b8:	f105 0914 	add.w	r9, r5, #20
 80071bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80071c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071c4:	3410      	adds	r4, #16
 80071c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80071ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80071ce:	fa1f f18b 	uxth.w	r1, fp
 80071d2:	448c      	add	ip, r1
 80071d4:	b299      	uxth	r1, r3
 80071d6:	0c1b      	lsrs	r3, r3, #16
 80071d8:	ebac 0101 	sub.w	r1, ip, r1
 80071dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80071e4:	b289      	uxth	r1, r1
 80071e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80071ea:	454e      	cmp	r6, r9
 80071ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80071f0:	f84a 3b04 	str.w	r3, [sl], #4
 80071f4:	d8e7      	bhi.n	80071c6 <__mdiff+0x7e>
 80071f6:	1b73      	subs	r3, r6, r5
 80071f8:	3b15      	subs	r3, #21
 80071fa:	f023 0303 	bic.w	r3, r3, #3
 80071fe:	3515      	adds	r5, #21
 8007200:	3304      	adds	r3, #4
 8007202:	42ae      	cmp	r6, r5
 8007204:	bf38      	it	cc
 8007206:	2304      	movcc	r3, #4
 8007208:	4418      	add	r0, r3
 800720a:	4443      	add	r3, r8
 800720c:	461e      	mov	r6, r3
 800720e:	4605      	mov	r5, r0
 8007210:	4575      	cmp	r5, lr
 8007212:	d30e      	bcc.n	8007232 <__mdiff+0xea>
 8007214:	f10e 0103 	add.w	r1, lr, #3
 8007218:	1a09      	subs	r1, r1, r0
 800721a:	f021 0103 	bic.w	r1, r1, #3
 800721e:	3803      	subs	r0, #3
 8007220:	4586      	cmp	lr, r0
 8007222:	bf38      	it	cc
 8007224:	2100      	movcc	r1, #0
 8007226:	4419      	add	r1, r3
 8007228:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800722c:	b18b      	cbz	r3, 8007252 <__mdiff+0x10a>
 800722e:	6117      	str	r7, [r2, #16]
 8007230:	e7a4      	b.n	800717c <__mdiff+0x34>
 8007232:	f855 8b04 	ldr.w	r8, [r5], #4
 8007236:	fa1f f188 	uxth.w	r1, r8
 800723a:	4461      	add	r1, ip
 800723c:	140c      	asrs	r4, r1, #16
 800723e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007242:	b289      	uxth	r1, r1
 8007244:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007248:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800724c:	f846 1b04 	str.w	r1, [r6], #4
 8007250:	e7de      	b.n	8007210 <__mdiff+0xc8>
 8007252:	3f01      	subs	r7, #1
 8007254:	e7e8      	b.n	8007228 <__mdiff+0xe0>
 8007256:	bf00      	nop
 8007258:	08009797 	.word	0x08009797
 800725c:	080097a8 	.word	0x080097a8

08007260 <__d2b>:
 8007260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007264:	2101      	movs	r1, #1
 8007266:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800726a:	4690      	mov	r8, r2
 800726c:	461d      	mov	r5, r3
 800726e:	f7ff fcd1 	bl	8006c14 <_Balloc>
 8007272:	4604      	mov	r4, r0
 8007274:	b930      	cbnz	r0, 8007284 <__d2b+0x24>
 8007276:	4602      	mov	r2, r0
 8007278:	f240 310a 	movw	r1, #778	; 0x30a
 800727c:	4b24      	ldr	r3, [pc, #144]	; (8007310 <__d2b+0xb0>)
 800727e:	4825      	ldr	r0, [pc, #148]	; (8007314 <__d2b+0xb4>)
 8007280:	f000 f94a 	bl	8007518 <__assert_func>
 8007284:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007288:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800728c:	bb2d      	cbnz	r5, 80072da <__d2b+0x7a>
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	f1b8 0300 	subs.w	r3, r8, #0
 8007294:	d026      	beq.n	80072e4 <__d2b+0x84>
 8007296:	4668      	mov	r0, sp
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	f7ff fd83 	bl	8006da4 <__lo0bits>
 800729e:	9900      	ldr	r1, [sp, #0]
 80072a0:	b1f0      	cbz	r0, 80072e0 <__d2b+0x80>
 80072a2:	9a01      	ldr	r2, [sp, #4]
 80072a4:	f1c0 0320 	rsb	r3, r0, #32
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	430b      	orrs	r3, r1
 80072ae:	40c2      	lsrs	r2, r0
 80072b0:	6163      	str	r3, [r4, #20]
 80072b2:	9201      	str	r2, [sp, #4]
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	bf14      	ite	ne
 80072ba:	2102      	movne	r1, #2
 80072bc:	2101      	moveq	r1, #1
 80072be:	61a3      	str	r3, [r4, #24]
 80072c0:	6121      	str	r1, [r4, #16]
 80072c2:	b1c5      	cbz	r5, 80072f6 <__d2b+0x96>
 80072c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072c8:	4405      	add	r5, r0
 80072ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072ce:	603d      	str	r5, [r7, #0]
 80072d0:	6030      	str	r0, [r6, #0]
 80072d2:	4620      	mov	r0, r4
 80072d4:	b002      	add	sp, #8
 80072d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072de:	e7d6      	b.n	800728e <__d2b+0x2e>
 80072e0:	6161      	str	r1, [r4, #20]
 80072e2:	e7e7      	b.n	80072b4 <__d2b+0x54>
 80072e4:	a801      	add	r0, sp, #4
 80072e6:	f7ff fd5d 	bl	8006da4 <__lo0bits>
 80072ea:	2101      	movs	r1, #1
 80072ec:	9b01      	ldr	r3, [sp, #4]
 80072ee:	6121      	str	r1, [r4, #16]
 80072f0:	6163      	str	r3, [r4, #20]
 80072f2:	3020      	adds	r0, #32
 80072f4:	e7e5      	b.n	80072c2 <__d2b+0x62>
 80072f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80072fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072fe:	6038      	str	r0, [r7, #0]
 8007300:	6918      	ldr	r0, [r3, #16]
 8007302:	f7ff fd2f 	bl	8006d64 <__hi0bits>
 8007306:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800730a:	6031      	str	r1, [r6, #0]
 800730c:	e7e1      	b.n	80072d2 <__d2b+0x72>
 800730e:	bf00      	nop
 8007310:	08009797 	.word	0x08009797
 8007314:	080097a8 	.word	0x080097a8

08007318 <_calloc_r>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	fba1 5402 	umull	r5, r4, r1, r2
 800731e:	b934      	cbnz	r4, 800732e <_calloc_r+0x16>
 8007320:	4629      	mov	r1, r5
 8007322:	f000 f875 	bl	8007410 <_malloc_r>
 8007326:	4606      	mov	r6, r0
 8007328:	b928      	cbnz	r0, 8007336 <_calloc_r+0x1e>
 800732a:	4630      	mov	r0, r6
 800732c:	bd70      	pop	{r4, r5, r6, pc}
 800732e:	220c      	movs	r2, #12
 8007330:	2600      	movs	r6, #0
 8007332:	6002      	str	r2, [r0, #0]
 8007334:	e7f9      	b.n	800732a <_calloc_r+0x12>
 8007336:	462a      	mov	r2, r5
 8007338:	4621      	mov	r1, r4
 800733a:	f7fe f961 	bl	8005600 <memset>
 800733e:	e7f4      	b.n	800732a <_calloc_r+0x12>

08007340 <_free_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4605      	mov	r5, r0
 8007344:	2900      	cmp	r1, #0
 8007346:	d040      	beq.n	80073ca <_free_r+0x8a>
 8007348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734c:	1f0c      	subs	r4, r1, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	18e4      	addlt	r4, r4, r3
 8007354:	f000 f922 	bl	800759c <__malloc_lock>
 8007358:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <_free_r+0x8c>)
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	b933      	cbnz	r3, 800736c <_free_r+0x2c>
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	6014      	str	r4, [r2, #0]
 8007362:	4628      	mov	r0, r5
 8007364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007368:	f000 b91e 	b.w	80075a8 <__malloc_unlock>
 800736c:	42a3      	cmp	r3, r4
 800736e:	d908      	bls.n	8007382 <_free_r+0x42>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	1821      	adds	r1, r4, r0
 8007374:	428b      	cmp	r3, r1
 8007376:	bf01      	itttt	eq
 8007378:	6819      	ldreq	r1, [r3, #0]
 800737a:	685b      	ldreq	r3, [r3, #4]
 800737c:	1809      	addeq	r1, r1, r0
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	e7ed      	b.n	800735e <_free_r+0x1e>
 8007382:	461a      	mov	r2, r3
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b10b      	cbz	r3, 800738c <_free_r+0x4c>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d9fa      	bls.n	8007382 <_free_r+0x42>
 800738c:	6811      	ldr	r1, [r2, #0]
 800738e:	1850      	adds	r0, r2, r1
 8007390:	42a0      	cmp	r0, r4
 8007392:	d10b      	bne.n	80073ac <_free_r+0x6c>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	4401      	add	r1, r0
 8007398:	1850      	adds	r0, r2, r1
 800739a:	4283      	cmp	r3, r0
 800739c:	6011      	str	r1, [r2, #0]
 800739e:	d1e0      	bne.n	8007362 <_free_r+0x22>
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4401      	add	r1, r0
 80073a6:	6011      	str	r1, [r2, #0]
 80073a8:	6053      	str	r3, [r2, #4]
 80073aa:	e7da      	b.n	8007362 <_free_r+0x22>
 80073ac:	d902      	bls.n	80073b4 <_free_r+0x74>
 80073ae:	230c      	movs	r3, #12
 80073b0:	602b      	str	r3, [r5, #0]
 80073b2:	e7d6      	b.n	8007362 <_free_r+0x22>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	1821      	adds	r1, r4, r0
 80073b8:	428b      	cmp	r3, r1
 80073ba:	bf01      	itttt	eq
 80073bc:	6819      	ldreq	r1, [r3, #0]
 80073be:	685b      	ldreq	r3, [r3, #4]
 80073c0:	1809      	addeq	r1, r1, r0
 80073c2:	6021      	streq	r1, [r4, #0]
 80073c4:	6063      	str	r3, [r4, #4]
 80073c6:	6054      	str	r4, [r2, #4]
 80073c8:	e7cb      	b.n	8007362 <_free_r+0x22>
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20002224 	.word	0x20002224

080073d0 <sbrk_aligned>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4e0e      	ldr	r6, [pc, #56]	; (800740c <sbrk_aligned+0x3c>)
 80073d4:	460c      	mov	r4, r1
 80073d6:	6831      	ldr	r1, [r6, #0]
 80073d8:	4605      	mov	r5, r0
 80073da:	b911      	cbnz	r1, 80073e2 <sbrk_aligned+0x12>
 80073dc:	f000 f88c 	bl	80074f8 <_sbrk_r>
 80073e0:	6030      	str	r0, [r6, #0]
 80073e2:	4621      	mov	r1, r4
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 f887 	bl	80074f8 <_sbrk_r>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	d00a      	beq.n	8007404 <sbrk_aligned+0x34>
 80073ee:	1cc4      	adds	r4, r0, #3
 80073f0:	f024 0403 	bic.w	r4, r4, #3
 80073f4:	42a0      	cmp	r0, r4
 80073f6:	d007      	beq.n	8007408 <sbrk_aligned+0x38>
 80073f8:	1a21      	subs	r1, r4, r0
 80073fa:	4628      	mov	r0, r5
 80073fc:	f000 f87c 	bl	80074f8 <_sbrk_r>
 8007400:	3001      	adds	r0, #1
 8007402:	d101      	bne.n	8007408 <sbrk_aligned+0x38>
 8007404:	f04f 34ff 	mov.w	r4, #4294967295
 8007408:	4620      	mov	r0, r4
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	20002228 	.word	0x20002228

08007410 <_malloc_r>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	1ccd      	adds	r5, r1, #3
 8007416:	f025 0503 	bic.w	r5, r5, #3
 800741a:	3508      	adds	r5, #8
 800741c:	2d0c      	cmp	r5, #12
 800741e:	bf38      	it	cc
 8007420:	250c      	movcc	r5, #12
 8007422:	2d00      	cmp	r5, #0
 8007424:	4607      	mov	r7, r0
 8007426:	db01      	blt.n	800742c <_malloc_r+0x1c>
 8007428:	42a9      	cmp	r1, r5
 800742a:	d905      	bls.n	8007438 <_malloc_r+0x28>
 800742c:	230c      	movs	r3, #12
 800742e:	2600      	movs	r6, #0
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	4630      	mov	r0, r6
 8007434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007438:	4e2e      	ldr	r6, [pc, #184]	; (80074f4 <_malloc_r+0xe4>)
 800743a:	f000 f8af 	bl	800759c <__malloc_lock>
 800743e:	6833      	ldr	r3, [r6, #0]
 8007440:	461c      	mov	r4, r3
 8007442:	bb34      	cbnz	r4, 8007492 <_malloc_r+0x82>
 8007444:	4629      	mov	r1, r5
 8007446:	4638      	mov	r0, r7
 8007448:	f7ff ffc2 	bl	80073d0 <sbrk_aligned>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	4604      	mov	r4, r0
 8007450:	d14d      	bne.n	80074ee <_malloc_r+0xde>
 8007452:	6834      	ldr	r4, [r6, #0]
 8007454:	4626      	mov	r6, r4
 8007456:	2e00      	cmp	r6, #0
 8007458:	d140      	bne.n	80074dc <_malloc_r+0xcc>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	4631      	mov	r1, r6
 800745e:	4638      	mov	r0, r7
 8007460:	eb04 0803 	add.w	r8, r4, r3
 8007464:	f000 f848 	bl	80074f8 <_sbrk_r>
 8007468:	4580      	cmp	r8, r0
 800746a:	d13a      	bne.n	80074e2 <_malloc_r+0xd2>
 800746c:	6821      	ldr	r1, [r4, #0]
 800746e:	3503      	adds	r5, #3
 8007470:	1a6d      	subs	r5, r5, r1
 8007472:	f025 0503 	bic.w	r5, r5, #3
 8007476:	3508      	adds	r5, #8
 8007478:	2d0c      	cmp	r5, #12
 800747a:	bf38      	it	cc
 800747c:	250c      	movcc	r5, #12
 800747e:	4638      	mov	r0, r7
 8007480:	4629      	mov	r1, r5
 8007482:	f7ff ffa5 	bl	80073d0 <sbrk_aligned>
 8007486:	3001      	adds	r0, #1
 8007488:	d02b      	beq.n	80074e2 <_malloc_r+0xd2>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	442b      	add	r3, r5
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	e00e      	b.n	80074b0 <_malloc_r+0xa0>
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	1b52      	subs	r2, r2, r5
 8007496:	d41e      	bmi.n	80074d6 <_malloc_r+0xc6>
 8007498:	2a0b      	cmp	r2, #11
 800749a:	d916      	bls.n	80074ca <_malloc_r+0xba>
 800749c:	1961      	adds	r1, r4, r5
 800749e:	42a3      	cmp	r3, r4
 80074a0:	6025      	str	r5, [r4, #0]
 80074a2:	bf18      	it	ne
 80074a4:	6059      	strne	r1, [r3, #4]
 80074a6:	6863      	ldr	r3, [r4, #4]
 80074a8:	bf08      	it	eq
 80074aa:	6031      	streq	r1, [r6, #0]
 80074ac:	5162      	str	r2, [r4, r5]
 80074ae:	604b      	str	r3, [r1, #4]
 80074b0:	4638      	mov	r0, r7
 80074b2:	f104 060b 	add.w	r6, r4, #11
 80074b6:	f000 f877 	bl	80075a8 <__malloc_unlock>
 80074ba:	f026 0607 	bic.w	r6, r6, #7
 80074be:	1d23      	adds	r3, r4, #4
 80074c0:	1af2      	subs	r2, r6, r3
 80074c2:	d0b6      	beq.n	8007432 <_malloc_r+0x22>
 80074c4:	1b9b      	subs	r3, r3, r6
 80074c6:	50a3      	str	r3, [r4, r2]
 80074c8:	e7b3      	b.n	8007432 <_malloc_r+0x22>
 80074ca:	6862      	ldr	r2, [r4, #4]
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	bf0c      	ite	eq
 80074d0:	6032      	streq	r2, [r6, #0]
 80074d2:	605a      	strne	r2, [r3, #4]
 80074d4:	e7ec      	b.n	80074b0 <_malloc_r+0xa0>
 80074d6:	4623      	mov	r3, r4
 80074d8:	6864      	ldr	r4, [r4, #4]
 80074da:	e7b2      	b.n	8007442 <_malloc_r+0x32>
 80074dc:	4634      	mov	r4, r6
 80074de:	6876      	ldr	r6, [r6, #4]
 80074e0:	e7b9      	b.n	8007456 <_malloc_r+0x46>
 80074e2:	230c      	movs	r3, #12
 80074e4:	4638      	mov	r0, r7
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	f000 f85e 	bl	80075a8 <__malloc_unlock>
 80074ec:	e7a1      	b.n	8007432 <_malloc_r+0x22>
 80074ee:	6025      	str	r5, [r4, #0]
 80074f0:	e7de      	b.n	80074b0 <_malloc_r+0xa0>
 80074f2:	bf00      	nop
 80074f4:	20002224 	.word	0x20002224

080074f8 <_sbrk_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	2300      	movs	r3, #0
 80074fc:	4d05      	ldr	r5, [pc, #20]	; (8007514 <_sbrk_r+0x1c>)
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	f7fa f9ee 	bl	80018e4 <_sbrk>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_sbrk_r+0x1a>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_sbrk_r+0x1a>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	2000222c 	.word	0x2000222c

08007518 <__assert_func>:
 8007518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800751a:	4614      	mov	r4, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <__assert_func+0x2c>)
 8007520:	4605      	mov	r5, r0
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68d8      	ldr	r0, [r3, #12]
 8007526:	b14c      	cbz	r4, 800753c <__assert_func+0x24>
 8007528:	4b07      	ldr	r3, [pc, #28]	; (8007548 <__assert_func+0x30>)
 800752a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800752e:	9100      	str	r1, [sp, #0]
 8007530:	462b      	mov	r3, r5
 8007532:	4906      	ldr	r1, [pc, #24]	; (800754c <__assert_func+0x34>)
 8007534:	f000 f80e 	bl	8007554 <fiprintf>
 8007538:	f000 fa62 	bl	8007a00 <abort>
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <__assert_func+0x38>)
 800753e:	461c      	mov	r4, r3
 8007540:	e7f3      	b.n	800752a <__assert_func+0x12>
 8007542:	bf00      	nop
 8007544:	20000010 	.word	0x20000010
 8007548:	08009904 	.word	0x08009904
 800754c:	08009911 	.word	0x08009911
 8007550:	0800993f 	.word	0x0800993f

08007554 <fiprintf>:
 8007554:	b40e      	push	{r1, r2, r3}
 8007556:	b503      	push	{r0, r1, lr}
 8007558:	4601      	mov	r1, r0
 800755a:	ab03      	add	r3, sp, #12
 800755c:	4805      	ldr	r0, [pc, #20]	; (8007574 <fiprintf+0x20>)
 800755e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007562:	6800      	ldr	r0, [r0, #0]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	f000 f84d 	bl	8007604 <_vfiprintf_r>
 800756a:	b002      	add	sp, #8
 800756c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007570:	b003      	add	sp, #12
 8007572:	4770      	bx	lr
 8007574:	20000010 	.word	0x20000010

08007578 <__ascii_mbtowc>:
 8007578:	b082      	sub	sp, #8
 800757a:	b901      	cbnz	r1, 800757e <__ascii_mbtowc+0x6>
 800757c:	a901      	add	r1, sp, #4
 800757e:	b142      	cbz	r2, 8007592 <__ascii_mbtowc+0x1a>
 8007580:	b14b      	cbz	r3, 8007596 <__ascii_mbtowc+0x1e>
 8007582:	7813      	ldrb	r3, [r2, #0]
 8007584:	600b      	str	r3, [r1, #0]
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	1e10      	subs	r0, r2, #0
 800758a:	bf18      	it	ne
 800758c:	2001      	movne	r0, #1
 800758e:	b002      	add	sp, #8
 8007590:	4770      	bx	lr
 8007592:	4610      	mov	r0, r2
 8007594:	e7fb      	b.n	800758e <__ascii_mbtowc+0x16>
 8007596:	f06f 0001 	mvn.w	r0, #1
 800759a:	e7f8      	b.n	800758e <__ascii_mbtowc+0x16>

0800759c <__malloc_lock>:
 800759c:	4801      	ldr	r0, [pc, #4]	; (80075a4 <__malloc_lock+0x8>)
 800759e:	f000 bbeb 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 80075a2:	bf00      	nop
 80075a4:	20002230 	.word	0x20002230

080075a8 <__malloc_unlock>:
 80075a8:	4801      	ldr	r0, [pc, #4]	; (80075b0 <__malloc_unlock+0x8>)
 80075aa:	f000 bbe6 	b.w	8007d7a <__retarget_lock_release_recursive>
 80075ae:	bf00      	nop
 80075b0:	20002230 	.word	0x20002230

080075b4 <__sfputc_r>:
 80075b4:	6893      	ldr	r3, [r2, #8]
 80075b6:	b410      	push	{r4}
 80075b8:	3b01      	subs	r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	6093      	str	r3, [r2, #8]
 80075be:	da07      	bge.n	80075d0 <__sfputc_r+0x1c>
 80075c0:	6994      	ldr	r4, [r2, #24]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	db01      	blt.n	80075ca <__sfputc_r+0x16>
 80075c6:	290a      	cmp	r1, #10
 80075c8:	d102      	bne.n	80075d0 <__sfputc_r+0x1c>
 80075ca:	bc10      	pop	{r4}
 80075cc:	f000 b94a 	b.w	8007864 <__swbuf_r>
 80075d0:	6813      	ldr	r3, [r2, #0]
 80075d2:	1c58      	adds	r0, r3, #1
 80075d4:	6010      	str	r0, [r2, #0]
 80075d6:	7019      	strb	r1, [r3, #0]
 80075d8:	4608      	mov	r0, r1
 80075da:	bc10      	pop	{r4}
 80075dc:	4770      	bx	lr

080075de <__sfputs_r>:
 80075de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e0:	4606      	mov	r6, r0
 80075e2:	460f      	mov	r7, r1
 80075e4:	4614      	mov	r4, r2
 80075e6:	18d5      	adds	r5, r2, r3
 80075e8:	42ac      	cmp	r4, r5
 80075ea:	d101      	bne.n	80075f0 <__sfputs_r+0x12>
 80075ec:	2000      	movs	r0, #0
 80075ee:	e007      	b.n	8007600 <__sfputs_r+0x22>
 80075f0:	463a      	mov	r2, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f8:	f7ff ffdc 	bl	80075b4 <__sfputc_r>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d1f3      	bne.n	80075e8 <__sfputs_r+0xa>
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007604 <_vfiprintf_r>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	460d      	mov	r5, r1
 800760a:	4614      	mov	r4, r2
 800760c:	4698      	mov	r8, r3
 800760e:	4606      	mov	r6, r0
 8007610:	b09d      	sub	sp, #116	; 0x74
 8007612:	b118      	cbz	r0, 800761c <_vfiprintf_r+0x18>
 8007614:	6983      	ldr	r3, [r0, #24]
 8007616:	b90b      	cbnz	r3, 800761c <_vfiprintf_r+0x18>
 8007618:	f000 fb10 	bl	8007c3c <__sinit>
 800761c:	4b89      	ldr	r3, [pc, #548]	; (8007844 <_vfiprintf_r+0x240>)
 800761e:	429d      	cmp	r5, r3
 8007620:	d11b      	bne.n	800765a <_vfiprintf_r+0x56>
 8007622:	6875      	ldr	r5, [r6, #4]
 8007624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007626:	07d9      	lsls	r1, r3, #31
 8007628:	d405      	bmi.n	8007636 <_vfiprintf_r+0x32>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	059a      	lsls	r2, r3, #22
 800762e:	d402      	bmi.n	8007636 <_vfiprintf_r+0x32>
 8007630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007632:	f000 fba1 	bl	8007d78 <__retarget_lock_acquire_recursive>
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	071b      	lsls	r3, r3, #28
 800763a:	d501      	bpl.n	8007640 <_vfiprintf_r+0x3c>
 800763c:	692b      	ldr	r3, [r5, #16]
 800763e:	b9eb      	cbnz	r3, 800767c <_vfiprintf_r+0x78>
 8007640:	4629      	mov	r1, r5
 8007642:	4630      	mov	r0, r6
 8007644:	f000 f96e 	bl	8007924 <__swsetup_r>
 8007648:	b1c0      	cbz	r0, 800767c <_vfiprintf_r+0x78>
 800764a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800764c:	07dc      	lsls	r4, r3, #31
 800764e:	d50e      	bpl.n	800766e <_vfiprintf_r+0x6a>
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	b01d      	add	sp, #116	; 0x74
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765a:	4b7b      	ldr	r3, [pc, #492]	; (8007848 <_vfiprintf_r+0x244>)
 800765c:	429d      	cmp	r5, r3
 800765e:	d101      	bne.n	8007664 <_vfiprintf_r+0x60>
 8007660:	68b5      	ldr	r5, [r6, #8]
 8007662:	e7df      	b.n	8007624 <_vfiprintf_r+0x20>
 8007664:	4b79      	ldr	r3, [pc, #484]	; (800784c <_vfiprintf_r+0x248>)
 8007666:	429d      	cmp	r5, r3
 8007668:	bf08      	it	eq
 800766a:	68f5      	ldreq	r5, [r6, #12]
 800766c:	e7da      	b.n	8007624 <_vfiprintf_r+0x20>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	0598      	lsls	r0, r3, #22
 8007672:	d4ed      	bmi.n	8007650 <_vfiprintf_r+0x4c>
 8007674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007676:	f000 fb80 	bl	8007d7a <__retarget_lock_release_recursive>
 800767a:	e7e9      	b.n	8007650 <_vfiprintf_r+0x4c>
 800767c:	2300      	movs	r3, #0
 800767e:	9309      	str	r3, [sp, #36]	; 0x24
 8007680:	2320      	movs	r3, #32
 8007682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007686:	2330      	movs	r3, #48	; 0x30
 8007688:	f04f 0901 	mov.w	r9, #1
 800768c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007690:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007850 <_vfiprintf_r+0x24c>
 8007694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007698:	4623      	mov	r3, r4
 800769a:	469a      	mov	sl, r3
 800769c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076a0:	b10a      	cbz	r2, 80076a6 <_vfiprintf_r+0xa2>
 80076a2:	2a25      	cmp	r2, #37	; 0x25
 80076a4:	d1f9      	bne.n	800769a <_vfiprintf_r+0x96>
 80076a6:	ebba 0b04 	subs.w	fp, sl, r4
 80076aa:	d00b      	beq.n	80076c4 <_vfiprintf_r+0xc0>
 80076ac:	465b      	mov	r3, fp
 80076ae:	4622      	mov	r2, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ff93 	bl	80075de <__sfputs_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	f000 80aa 	beq.w	8007812 <_vfiprintf_r+0x20e>
 80076be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076c0:	445a      	add	r2, fp
 80076c2:	9209      	str	r2, [sp, #36]	; 0x24
 80076c4:	f89a 3000 	ldrb.w	r3, [sl]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 80a2 	beq.w	8007812 <_vfiprintf_r+0x20e>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d8:	f10a 0a01 	add.w	sl, sl, #1
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076e4:	931a      	str	r3, [sp, #104]	; 0x68
 80076e6:	4654      	mov	r4, sl
 80076e8:	2205      	movs	r2, #5
 80076ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ee:	4858      	ldr	r0, [pc, #352]	; (8007850 <_vfiprintf_r+0x24c>)
 80076f0:	f7ff fa74 	bl	8006bdc <memchr>
 80076f4:	9a04      	ldr	r2, [sp, #16]
 80076f6:	b9d8      	cbnz	r0, 8007730 <_vfiprintf_r+0x12c>
 80076f8:	06d1      	lsls	r1, r2, #27
 80076fa:	bf44      	itt	mi
 80076fc:	2320      	movmi	r3, #32
 80076fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007702:	0713      	lsls	r3, r2, #28
 8007704:	bf44      	itt	mi
 8007706:	232b      	movmi	r3, #43	; 0x2b
 8007708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b2a      	cmp	r3, #42	; 0x2a
 8007712:	d015      	beq.n	8007740 <_vfiprintf_r+0x13c>
 8007714:	4654      	mov	r4, sl
 8007716:	2000      	movs	r0, #0
 8007718:	f04f 0c0a 	mov.w	ip, #10
 800771c:	9a07      	ldr	r2, [sp, #28]
 800771e:	4621      	mov	r1, r4
 8007720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007724:	3b30      	subs	r3, #48	; 0x30
 8007726:	2b09      	cmp	r3, #9
 8007728:	d94e      	bls.n	80077c8 <_vfiprintf_r+0x1c4>
 800772a:	b1b0      	cbz	r0, 800775a <_vfiprintf_r+0x156>
 800772c:	9207      	str	r2, [sp, #28]
 800772e:	e014      	b.n	800775a <_vfiprintf_r+0x156>
 8007730:	eba0 0308 	sub.w	r3, r0, r8
 8007734:	fa09 f303 	lsl.w	r3, r9, r3
 8007738:	4313      	orrs	r3, r2
 800773a:	46a2      	mov	sl, r4
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	e7d2      	b.n	80076e6 <_vfiprintf_r+0xe2>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	1d19      	adds	r1, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	9103      	str	r1, [sp, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfbb      	ittet	lt
 800774c:	425b      	neglt	r3, r3
 800774e:	f042 0202 	orrlt.w	r2, r2, #2
 8007752:	9307      	strge	r3, [sp, #28]
 8007754:	9307      	strlt	r3, [sp, #28]
 8007756:	bfb8      	it	lt
 8007758:	9204      	strlt	r2, [sp, #16]
 800775a:	7823      	ldrb	r3, [r4, #0]
 800775c:	2b2e      	cmp	r3, #46	; 0x2e
 800775e:	d10c      	bne.n	800777a <_vfiprintf_r+0x176>
 8007760:	7863      	ldrb	r3, [r4, #1]
 8007762:	2b2a      	cmp	r3, #42	; 0x2a
 8007764:	d135      	bne.n	80077d2 <_vfiprintf_r+0x1ce>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	3402      	adds	r4, #2
 800776a:	1d1a      	adds	r2, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	9203      	str	r2, [sp, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfb8      	it	lt
 8007774:	f04f 33ff 	movlt.w	r3, #4294967295
 8007778:	9305      	str	r3, [sp, #20]
 800777a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007854 <_vfiprintf_r+0x250>
 800777e:	2203      	movs	r2, #3
 8007780:	4650      	mov	r0, sl
 8007782:	7821      	ldrb	r1, [r4, #0]
 8007784:	f7ff fa2a 	bl	8006bdc <memchr>
 8007788:	b140      	cbz	r0, 800779c <_vfiprintf_r+0x198>
 800778a:	2340      	movs	r3, #64	; 0x40
 800778c:	eba0 000a 	sub.w	r0, r0, sl
 8007790:	fa03 f000 	lsl.w	r0, r3, r0
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	3401      	adds	r4, #1
 8007798:	4303      	orrs	r3, r0
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a0:	2206      	movs	r2, #6
 80077a2:	482d      	ldr	r0, [pc, #180]	; (8007858 <_vfiprintf_r+0x254>)
 80077a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a8:	f7ff fa18 	bl	8006bdc <memchr>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d03f      	beq.n	8007830 <_vfiprintf_r+0x22c>
 80077b0:	4b2a      	ldr	r3, [pc, #168]	; (800785c <_vfiprintf_r+0x258>)
 80077b2:	bb1b      	cbnz	r3, 80077fc <_vfiprintf_r+0x1f8>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	3307      	adds	r3, #7
 80077b8:	f023 0307 	bic.w	r3, r3, #7
 80077bc:	3308      	adds	r3, #8
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	443b      	add	r3, r7
 80077c4:	9309      	str	r3, [sp, #36]	; 0x24
 80077c6:	e767      	b.n	8007698 <_vfiprintf_r+0x94>
 80077c8:	460c      	mov	r4, r1
 80077ca:	2001      	movs	r0, #1
 80077cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80077d0:	e7a5      	b.n	800771e <_vfiprintf_r+0x11a>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f04f 0c0a 	mov.w	ip, #10
 80077d8:	4619      	mov	r1, r3
 80077da:	3401      	adds	r4, #1
 80077dc:	9305      	str	r3, [sp, #20]
 80077de:	4620      	mov	r0, r4
 80077e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e4:	3a30      	subs	r2, #48	; 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d903      	bls.n	80077f2 <_vfiprintf_r+0x1ee>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c5      	beq.n	800777a <_vfiprintf_r+0x176>
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	e7c3      	b.n	800777a <_vfiprintf_r+0x176>
 80077f2:	4604      	mov	r4, r0
 80077f4:	2301      	movs	r3, #1
 80077f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077fa:	e7f0      	b.n	80077de <_vfiprintf_r+0x1da>
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	462a      	mov	r2, r5
 8007802:	4630      	mov	r0, r6
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <_vfiprintf_r+0x25c>)
 8007806:	a904      	add	r1, sp, #16
 8007808:	f7fd ffa0 	bl	800574c <_printf_float>
 800780c:	4607      	mov	r7, r0
 800780e:	1c78      	adds	r0, r7, #1
 8007810:	d1d6      	bne.n	80077c0 <_vfiprintf_r+0x1bc>
 8007812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007814:	07d9      	lsls	r1, r3, #31
 8007816:	d405      	bmi.n	8007824 <_vfiprintf_r+0x220>
 8007818:	89ab      	ldrh	r3, [r5, #12]
 800781a:	059a      	lsls	r2, r3, #22
 800781c:	d402      	bmi.n	8007824 <_vfiprintf_r+0x220>
 800781e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007820:	f000 faab 	bl	8007d7a <__retarget_lock_release_recursive>
 8007824:	89ab      	ldrh	r3, [r5, #12]
 8007826:	065b      	lsls	r3, r3, #25
 8007828:	f53f af12 	bmi.w	8007650 <_vfiprintf_r+0x4c>
 800782c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782e:	e711      	b.n	8007654 <_vfiprintf_r+0x50>
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	462a      	mov	r2, r5
 8007836:	4630      	mov	r0, r6
 8007838:	4b09      	ldr	r3, [pc, #36]	; (8007860 <_vfiprintf_r+0x25c>)
 800783a:	a904      	add	r1, sp, #16
 800783c:	f7fe fa22 	bl	8005c84 <_printf_i>
 8007840:	e7e4      	b.n	800780c <_vfiprintf_r+0x208>
 8007842:	bf00      	nop
 8007844:	08009a7c 	.word	0x08009a7c
 8007848:	08009a9c 	.word	0x08009a9c
 800784c:	08009a5c 	.word	0x08009a5c
 8007850:	0800994a 	.word	0x0800994a
 8007854:	08009950 	.word	0x08009950
 8007858:	08009954 	.word	0x08009954
 800785c:	0800574d 	.word	0x0800574d
 8007860:	080075df 	.word	0x080075df

08007864 <__swbuf_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	460e      	mov	r6, r1
 8007868:	4614      	mov	r4, r2
 800786a:	4605      	mov	r5, r0
 800786c:	b118      	cbz	r0, 8007876 <__swbuf_r+0x12>
 800786e:	6983      	ldr	r3, [r0, #24]
 8007870:	b90b      	cbnz	r3, 8007876 <__swbuf_r+0x12>
 8007872:	f000 f9e3 	bl	8007c3c <__sinit>
 8007876:	4b21      	ldr	r3, [pc, #132]	; (80078fc <__swbuf_r+0x98>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d12b      	bne.n	80078d4 <__swbuf_r+0x70>
 800787c:	686c      	ldr	r4, [r5, #4]
 800787e:	69a3      	ldr	r3, [r4, #24]
 8007880:	60a3      	str	r3, [r4, #8]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	071a      	lsls	r2, r3, #28
 8007886:	d52f      	bpl.n	80078e8 <__swbuf_r+0x84>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	b36b      	cbz	r3, 80078e8 <__swbuf_r+0x84>
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	b2f6      	uxtb	r6, r6
 8007892:	1ac0      	subs	r0, r0, r3
 8007894:	6963      	ldr	r3, [r4, #20]
 8007896:	4637      	mov	r7, r6
 8007898:	4283      	cmp	r3, r0
 800789a:	dc04      	bgt.n	80078a6 <__swbuf_r+0x42>
 800789c:	4621      	mov	r1, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 f938 	bl	8007b14 <_fflush_r>
 80078a4:	bb30      	cbnz	r0, 80078f4 <__swbuf_r+0x90>
 80078a6:	68a3      	ldr	r3, [r4, #8]
 80078a8:	3001      	adds	r0, #1
 80078aa:	3b01      	subs	r3, #1
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	701e      	strb	r6, [r3, #0]
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	4283      	cmp	r3, r0
 80078ba:	d004      	beq.n	80078c6 <__swbuf_r+0x62>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	07db      	lsls	r3, r3, #31
 80078c0:	d506      	bpl.n	80078d0 <__swbuf_r+0x6c>
 80078c2:	2e0a      	cmp	r6, #10
 80078c4:	d104      	bne.n	80078d0 <__swbuf_r+0x6c>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4628      	mov	r0, r5
 80078ca:	f000 f923 	bl	8007b14 <_fflush_r>
 80078ce:	b988      	cbnz	r0, 80078f4 <__swbuf_r+0x90>
 80078d0:	4638      	mov	r0, r7
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <__swbuf_r+0x9c>)
 80078d6:	429c      	cmp	r4, r3
 80078d8:	d101      	bne.n	80078de <__swbuf_r+0x7a>
 80078da:	68ac      	ldr	r4, [r5, #8]
 80078dc:	e7cf      	b.n	800787e <__swbuf_r+0x1a>
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <__swbuf_r+0xa0>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	bf08      	it	eq
 80078e4:	68ec      	ldreq	r4, [r5, #12]
 80078e6:	e7ca      	b.n	800787e <__swbuf_r+0x1a>
 80078e8:	4621      	mov	r1, r4
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f81a 	bl	8007924 <__swsetup_r>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d0cb      	beq.n	800788c <__swbuf_r+0x28>
 80078f4:	f04f 37ff 	mov.w	r7, #4294967295
 80078f8:	e7ea      	b.n	80078d0 <__swbuf_r+0x6c>
 80078fa:	bf00      	nop
 80078fc:	08009a7c 	.word	0x08009a7c
 8007900:	08009a9c 	.word	0x08009a9c
 8007904:	08009a5c 	.word	0x08009a5c

08007908 <__ascii_wctomb>:
 8007908:	4603      	mov	r3, r0
 800790a:	4608      	mov	r0, r1
 800790c:	b141      	cbz	r1, 8007920 <__ascii_wctomb+0x18>
 800790e:	2aff      	cmp	r2, #255	; 0xff
 8007910:	d904      	bls.n	800791c <__ascii_wctomb+0x14>
 8007912:	228a      	movs	r2, #138	; 0x8a
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	4770      	bx	lr
 800791c:	2001      	movs	r0, #1
 800791e:	700a      	strb	r2, [r1, #0]
 8007920:	4770      	bx	lr
	...

08007924 <__swsetup_r>:
 8007924:	4b32      	ldr	r3, [pc, #200]	; (80079f0 <__swsetup_r+0xcc>)
 8007926:	b570      	push	{r4, r5, r6, lr}
 8007928:	681d      	ldr	r5, [r3, #0]
 800792a:	4606      	mov	r6, r0
 800792c:	460c      	mov	r4, r1
 800792e:	b125      	cbz	r5, 800793a <__swsetup_r+0x16>
 8007930:	69ab      	ldr	r3, [r5, #24]
 8007932:	b913      	cbnz	r3, 800793a <__swsetup_r+0x16>
 8007934:	4628      	mov	r0, r5
 8007936:	f000 f981 	bl	8007c3c <__sinit>
 800793a:	4b2e      	ldr	r3, [pc, #184]	; (80079f4 <__swsetup_r+0xd0>)
 800793c:	429c      	cmp	r4, r3
 800793e:	d10f      	bne.n	8007960 <__swsetup_r+0x3c>
 8007940:	686c      	ldr	r4, [r5, #4]
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007948:	0719      	lsls	r1, r3, #28
 800794a:	d42c      	bmi.n	80079a6 <__swsetup_r+0x82>
 800794c:	06dd      	lsls	r5, r3, #27
 800794e:	d411      	bmi.n	8007974 <__swsetup_r+0x50>
 8007950:	2309      	movs	r3, #9
 8007952:	6033      	str	r3, [r6, #0]
 8007954:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	e03e      	b.n	80079de <__swsetup_r+0xba>
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <__swsetup_r+0xd4>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d101      	bne.n	800796a <__swsetup_r+0x46>
 8007966:	68ac      	ldr	r4, [r5, #8]
 8007968:	e7eb      	b.n	8007942 <__swsetup_r+0x1e>
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <__swsetup_r+0xd8>)
 800796c:	429c      	cmp	r4, r3
 800796e:	bf08      	it	eq
 8007970:	68ec      	ldreq	r4, [r5, #12]
 8007972:	e7e6      	b.n	8007942 <__swsetup_r+0x1e>
 8007974:	0758      	lsls	r0, r3, #29
 8007976:	d512      	bpl.n	800799e <__swsetup_r+0x7a>
 8007978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800797a:	b141      	cbz	r1, 800798e <__swsetup_r+0x6a>
 800797c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007980:	4299      	cmp	r1, r3
 8007982:	d002      	beq.n	800798a <__swsetup_r+0x66>
 8007984:	4630      	mov	r0, r6
 8007986:	f7ff fcdb 	bl	8007340 <_free_r>
 800798a:	2300      	movs	r3, #0
 800798c:	6363      	str	r3, [r4, #52]	; 0x34
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	2300      	movs	r3, #0
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f043 0308 	orr.w	r3, r3, #8
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	b94b      	cbnz	r3, 80079be <__swsetup_r+0x9a>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b4:	d003      	beq.n	80079be <__swsetup_r+0x9a>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 fa05 	bl	8007dc8 <__smakebuf_r>
 80079be:	89a0      	ldrh	r0, [r4, #12]
 80079c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079c4:	f010 0301 	ands.w	r3, r0, #1
 80079c8:	d00a      	beq.n	80079e0 <__swsetup_r+0xbc>
 80079ca:	2300      	movs	r3, #0
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	6963      	ldr	r3, [r4, #20]
 80079d0:	425b      	negs	r3, r3
 80079d2:	61a3      	str	r3, [r4, #24]
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	b943      	cbnz	r3, 80079ea <__swsetup_r+0xc6>
 80079d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079dc:	d1ba      	bne.n	8007954 <__swsetup_r+0x30>
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	0781      	lsls	r1, r0, #30
 80079e2:	bf58      	it	pl
 80079e4:	6963      	ldrpl	r3, [r4, #20]
 80079e6:	60a3      	str	r3, [r4, #8]
 80079e8:	e7f4      	b.n	80079d4 <__swsetup_r+0xb0>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e7f7      	b.n	80079de <__swsetup_r+0xba>
 80079ee:	bf00      	nop
 80079f0:	20000010 	.word	0x20000010
 80079f4:	08009a7c 	.word	0x08009a7c
 80079f8:	08009a9c 	.word	0x08009a9c
 80079fc:	08009a5c 	.word	0x08009a5c

08007a00 <abort>:
 8007a00:	2006      	movs	r0, #6
 8007a02:	b508      	push	{r3, lr}
 8007a04:	f000 fa48 	bl	8007e98 <raise>
 8007a08:	2001      	movs	r0, #1
 8007a0a:	f7f9 ff3d 	bl	8001888 <_exit>
	...

08007a10 <__sflush_r>:
 8007a10:	898a      	ldrh	r2, [r1, #12]
 8007a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a14:	4605      	mov	r5, r0
 8007a16:	0710      	lsls	r0, r2, #28
 8007a18:	460c      	mov	r4, r1
 8007a1a:	d457      	bmi.n	8007acc <__sflush_r+0xbc>
 8007a1c:	684b      	ldr	r3, [r1, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	dc04      	bgt.n	8007a2c <__sflush_r+0x1c>
 8007a22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dc01      	bgt.n	8007a2c <__sflush_r+0x1c>
 8007a28:	2000      	movs	r0, #0
 8007a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d0fa      	beq.n	8007a28 <__sflush_r+0x18>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a38:	682f      	ldr	r7, [r5, #0]
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	d032      	beq.n	8007aa4 <__sflush_r+0x94>
 8007a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	075a      	lsls	r2, r3, #29
 8007a44:	d505      	bpl.n	8007a52 <__sflush_r+0x42>
 8007a46:	6863      	ldr	r3, [r4, #4]
 8007a48:	1ac0      	subs	r0, r0, r3
 8007a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a4c:	b10b      	cbz	r3, 8007a52 <__sflush_r+0x42>
 8007a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a50:	1ac0      	subs	r0, r0, r3
 8007a52:	2300      	movs	r3, #0
 8007a54:	4602      	mov	r2, r0
 8007a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a58:	4628      	mov	r0, r5
 8007a5a:	6a21      	ldr	r1, [r4, #32]
 8007a5c:	47b0      	blx	r6
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	d106      	bne.n	8007a72 <__sflush_r+0x62>
 8007a64:	6829      	ldr	r1, [r5, #0]
 8007a66:	291d      	cmp	r1, #29
 8007a68:	d82c      	bhi.n	8007ac4 <__sflush_r+0xb4>
 8007a6a:	4a29      	ldr	r2, [pc, #164]	; (8007b10 <__sflush_r+0x100>)
 8007a6c:	40ca      	lsrs	r2, r1
 8007a6e:	07d6      	lsls	r6, r2, #31
 8007a70:	d528      	bpl.n	8007ac4 <__sflush_r+0xb4>
 8007a72:	2200      	movs	r2, #0
 8007a74:	6062      	str	r2, [r4, #4]
 8007a76:	6922      	ldr	r2, [r4, #16]
 8007a78:	04d9      	lsls	r1, r3, #19
 8007a7a:	6022      	str	r2, [r4, #0]
 8007a7c:	d504      	bpl.n	8007a88 <__sflush_r+0x78>
 8007a7e:	1c42      	adds	r2, r0, #1
 8007a80:	d101      	bne.n	8007a86 <__sflush_r+0x76>
 8007a82:	682b      	ldr	r3, [r5, #0]
 8007a84:	b903      	cbnz	r3, 8007a88 <__sflush_r+0x78>
 8007a86:	6560      	str	r0, [r4, #84]	; 0x54
 8007a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a8a:	602f      	str	r7, [r5, #0]
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	d0cb      	beq.n	8007a28 <__sflush_r+0x18>
 8007a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a94:	4299      	cmp	r1, r3
 8007a96:	d002      	beq.n	8007a9e <__sflush_r+0x8e>
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f7ff fc51 	bl	8007340 <_free_r>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8007aa2:	e7c2      	b.n	8007a2a <__sflush_r+0x1a>
 8007aa4:	6a21      	ldr	r1, [r4, #32]
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b0      	blx	r6
 8007aac:	1c41      	adds	r1, r0, #1
 8007aae:	d1c7      	bne.n	8007a40 <__sflush_r+0x30>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0c4      	beq.n	8007a40 <__sflush_r+0x30>
 8007ab6:	2b1d      	cmp	r3, #29
 8007ab8:	d001      	beq.n	8007abe <__sflush_r+0xae>
 8007aba:	2b16      	cmp	r3, #22
 8007abc:	d101      	bne.n	8007ac2 <__sflush_r+0xb2>
 8007abe:	602f      	str	r7, [r5, #0]
 8007ac0:	e7b2      	b.n	8007a28 <__sflush_r+0x18>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	e7ae      	b.n	8007a2a <__sflush_r+0x1a>
 8007acc:	690f      	ldr	r7, [r1, #16]
 8007ace:	2f00      	cmp	r7, #0
 8007ad0:	d0aa      	beq.n	8007a28 <__sflush_r+0x18>
 8007ad2:	0793      	lsls	r3, r2, #30
 8007ad4:	bf18      	it	ne
 8007ad6:	2300      	movne	r3, #0
 8007ad8:	680e      	ldr	r6, [r1, #0]
 8007ada:	bf08      	it	eq
 8007adc:	694b      	ldreq	r3, [r1, #20]
 8007ade:	1bf6      	subs	r6, r6, r7
 8007ae0:	600f      	str	r7, [r1, #0]
 8007ae2:	608b      	str	r3, [r1, #8]
 8007ae4:	2e00      	cmp	r6, #0
 8007ae6:	dd9f      	ble.n	8007a28 <__sflush_r+0x18>
 8007ae8:	4633      	mov	r3, r6
 8007aea:	463a      	mov	r2, r7
 8007aec:	4628      	mov	r0, r5
 8007aee:	6a21      	ldr	r1, [r4, #32]
 8007af0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007af4:	47e0      	blx	ip
 8007af6:	2800      	cmp	r0, #0
 8007af8:	dc06      	bgt.n	8007b08 <__sflush_r+0xf8>
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	e790      	b.n	8007a2a <__sflush_r+0x1a>
 8007b08:	4407      	add	r7, r0
 8007b0a:	1a36      	subs	r6, r6, r0
 8007b0c:	e7ea      	b.n	8007ae4 <__sflush_r+0xd4>
 8007b0e:	bf00      	nop
 8007b10:	20400001 	.word	0x20400001

08007b14 <_fflush_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	690b      	ldr	r3, [r1, #16]
 8007b18:	4605      	mov	r5, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b913      	cbnz	r3, 8007b24 <_fflush_r+0x10>
 8007b1e:	2500      	movs	r5, #0
 8007b20:	4628      	mov	r0, r5
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	b118      	cbz	r0, 8007b2e <_fflush_r+0x1a>
 8007b26:	6983      	ldr	r3, [r0, #24]
 8007b28:	b90b      	cbnz	r3, 8007b2e <_fflush_r+0x1a>
 8007b2a:	f000 f887 	bl	8007c3c <__sinit>
 8007b2e:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <_fflush_r+0x6c>)
 8007b30:	429c      	cmp	r4, r3
 8007b32:	d11b      	bne.n	8007b6c <_fflush_r+0x58>
 8007b34:	686c      	ldr	r4, [r5, #4]
 8007b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0ef      	beq.n	8007b1e <_fflush_r+0xa>
 8007b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b40:	07d0      	lsls	r0, r2, #31
 8007b42:	d404      	bmi.n	8007b4e <_fflush_r+0x3a>
 8007b44:	0599      	lsls	r1, r3, #22
 8007b46:	d402      	bmi.n	8007b4e <_fflush_r+0x3a>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f000 f915 	bl	8007d78 <__retarget_lock_acquire_recursive>
 8007b4e:	4628      	mov	r0, r5
 8007b50:	4621      	mov	r1, r4
 8007b52:	f7ff ff5d 	bl	8007a10 <__sflush_r>
 8007b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b58:	4605      	mov	r5, r0
 8007b5a:	07da      	lsls	r2, r3, #31
 8007b5c:	d4e0      	bmi.n	8007b20 <_fflush_r+0xc>
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	059b      	lsls	r3, r3, #22
 8007b62:	d4dd      	bmi.n	8007b20 <_fflush_r+0xc>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f000 f908 	bl	8007d7a <__retarget_lock_release_recursive>
 8007b6a:	e7d9      	b.n	8007b20 <_fflush_r+0xc>
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <_fflush_r+0x70>)
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d101      	bne.n	8007b76 <_fflush_r+0x62>
 8007b72:	68ac      	ldr	r4, [r5, #8]
 8007b74:	e7df      	b.n	8007b36 <_fflush_r+0x22>
 8007b76:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <_fflush_r+0x74>)
 8007b78:	429c      	cmp	r4, r3
 8007b7a:	bf08      	it	eq
 8007b7c:	68ec      	ldreq	r4, [r5, #12]
 8007b7e:	e7da      	b.n	8007b36 <_fflush_r+0x22>
 8007b80:	08009a7c 	.word	0x08009a7c
 8007b84:	08009a9c 	.word	0x08009a9c
 8007b88:	08009a5c 	.word	0x08009a5c

08007b8c <std>:
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	4604      	mov	r4, r0
 8007b92:	e9c0 3300 	strd	r3, r3, [r0]
 8007b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b9a:	6083      	str	r3, [r0, #8]
 8007b9c:	8181      	strh	r1, [r0, #12]
 8007b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ba0:	81c2      	strh	r2, [r0, #14]
 8007ba2:	6183      	str	r3, [r0, #24]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	305c      	adds	r0, #92	; 0x5c
 8007baa:	f7fd fd29 	bl	8005600 <memset>
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <std+0x38>)
 8007bb0:	6224      	str	r4, [r4, #32]
 8007bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <std+0x3c>)
 8007bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <std+0x40>)
 8007bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bbc:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <std+0x44>)
 8007bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08007ed1 	.word	0x08007ed1
 8007bc8:	08007ef3 	.word	0x08007ef3
 8007bcc:	08007f2b 	.word	0x08007f2b
 8007bd0:	08007f4f 	.word	0x08007f4f

08007bd4 <_cleanup_r>:
 8007bd4:	4901      	ldr	r1, [pc, #4]	; (8007bdc <_cleanup_r+0x8>)
 8007bd6:	f000 b8af 	b.w	8007d38 <_fwalk_reent>
 8007bda:	bf00      	nop
 8007bdc:	08007b15 	.word	0x08007b15

08007be0 <__sfmoreglue>:
 8007be0:	2268      	movs	r2, #104	; 0x68
 8007be2:	b570      	push	{r4, r5, r6, lr}
 8007be4:	1e4d      	subs	r5, r1, #1
 8007be6:	4355      	muls	r5, r2
 8007be8:	460e      	mov	r6, r1
 8007bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bee:	f7ff fc0f 	bl	8007410 <_malloc_r>
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	b140      	cbz	r0, 8007c08 <__sfmoreglue+0x28>
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bfc:	300c      	adds	r0, #12
 8007bfe:	60a0      	str	r0, [r4, #8]
 8007c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c04:	f7fd fcfc 	bl	8005600 <memset>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}

08007c0c <__sfp_lock_acquire>:
 8007c0c:	4801      	ldr	r0, [pc, #4]	; (8007c14 <__sfp_lock_acquire+0x8>)
 8007c0e:	f000 b8b3 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007c12:	bf00      	nop
 8007c14:	20002231 	.word	0x20002231

08007c18 <__sfp_lock_release>:
 8007c18:	4801      	ldr	r0, [pc, #4]	; (8007c20 <__sfp_lock_release+0x8>)
 8007c1a:	f000 b8ae 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007c1e:	bf00      	nop
 8007c20:	20002231 	.word	0x20002231

08007c24 <__sinit_lock_acquire>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__sinit_lock_acquire+0x8>)
 8007c26:	f000 b8a7 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	20002232 	.word	0x20002232

08007c30 <__sinit_lock_release>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sinit_lock_release+0x8>)
 8007c32:	f000 b8a2 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007c36:	bf00      	nop
 8007c38:	20002232 	.word	0x20002232

08007c3c <__sinit>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	4604      	mov	r4, r0
 8007c40:	f7ff fff0 	bl	8007c24 <__sinit_lock_acquire>
 8007c44:	69a3      	ldr	r3, [r4, #24]
 8007c46:	b11b      	cbz	r3, 8007c50 <__sinit+0x14>
 8007c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4c:	f7ff bff0 	b.w	8007c30 <__sinit_lock_release>
 8007c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c54:	6523      	str	r3, [r4, #80]	; 0x50
 8007c56:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <__sinit+0x68>)
 8007c58:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <__sinit+0x6c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	bf08      	it	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	4620      	mov	r0, r4
 8007c66:	bf08      	it	eq
 8007c68:	61a3      	streq	r3, [r4, #24]
 8007c6a:	f000 f81f 	bl	8007cac <__sfp>
 8007c6e:	6060      	str	r0, [r4, #4]
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f81b 	bl	8007cac <__sfp>
 8007c76:	60a0      	str	r0, [r4, #8]
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 f817 	bl	8007cac <__sfp>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2104      	movs	r1, #4
 8007c82:	60e0      	str	r0, [r4, #12]
 8007c84:	6860      	ldr	r0, [r4, #4]
 8007c86:	f7ff ff81 	bl	8007b8c <std>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	2109      	movs	r1, #9
 8007c8e:	68a0      	ldr	r0, [r4, #8]
 8007c90:	f7ff ff7c 	bl	8007b8c <std>
 8007c94:	2202      	movs	r2, #2
 8007c96:	2112      	movs	r1, #18
 8007c98:	68e0      	ldr	r0, [r4, #12]
 8007c9a:	f7ff ff77 	bl	8007b8c <std>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61a3      	str	r3, [r4, #24]
 8007ca2:	e7d1      	b.n	8007c48 <__sinit+0xc>
 8007ca4:	080096e0 	.word	0x080096e0
 8007ca8:	08007bd5 	.word	0x08007bd5

08007cac <__sfp>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	f7ff ffac 	bl	8007c0c <__sfp_lock_acquire>
 8007cb4:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <__sfp+0x84>)
 8007cb6:	681e      	ldr	r6, [r3, #0]
 8007cb8:	69b3      	ldr	r3, [r6, #24]
 8007cba:	b913      	cbnz	r3, 8007cc2 <__sfp+0x16>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff ffbd 	bl	8007c3c <__sinit>
 8007cc2:	3648      	adds	r6, #72	; 0x48
 8007cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	d503      	bpl.n	8007cd4 <__sfp+0x28>
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	b30b      	cbz	r3, 8007d14 <__sfp+0x68>
 8007cd0:	6836      	ldr	r6, [r6, #0]
 8007cd2:	e7f7      	b.n	8007cc4 <__sfp+0x18>
 8007cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cd8:	b9d5      	cbnz	r5, 8007d10 <__sfp+0x64>
 8007cda:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <__sfp+0x88>)
 8007cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ce0:	60e3      	str	r3, [r4, #12]
 8007ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ce4:	f000 f847 	bl	8007d76 <__retarget_lock_init_recursive>
 8007ce8:	f7ff ff96 	bl	8007c18 <__sfp_lock_release>
 8007cec:	2208      	movs	r2, #8
 8007cee:	4629      	mov	r1, r5
 8007cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cf8:	6025      	str	r5, [r4, #0]
 8007cfa:	61a5      	str	r5, [r4, #24]
 8007cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d00:	f7fd fc7e 	bl	8005600 <memset>
 8007d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d10:	3468      	adds	r4, #104	; 0x68
 8007d12:	e7d9      	b.n	8007cc8 <__sfp+0x1c>
 8007d14:	2104      	movs	r1, #4
 8007d16:	4638      	mov	r0, r7
 8007d18:	f7ff ff62 	bl	8007be0 <__sfmoreglue>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	6030      	str	r0, [r6, #0]
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d1d5      	bne.n	8007cd0 <__sfp+0x24>
 8007d24:	f7ff ff78 	bl	8007c18 <__sfp_lock_release>
 8007d28:	230c      	movs	r3, #12
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	e7ee      	b.n	8007d0c <__sfp+0x60>
 8007d2e:	bf00      	nop
 8007d30:	080096e0 	.word	0x080096e0
 8007d34:	ffff0001 	.word	0xffff0001

08007d38 <_fwalk_reent>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	4688      	mov	r8, r1
 8007d40:	2700      	movs	r7, #0
 8007d42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d4e:	d505      	bpl.n	8007d5c <_fwalk_reent+0x24>
 8007d50:	6824      	ldr	r4, [r4, #0]
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d1f7      	bne.n	8007d46 <_fwalk_reent+0xe>
 8007d56:	4638      	mov	r0, r7
 8007d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5c:	89ab      	ldrh	r3, [r5, #12]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d907      	bls.n	8007d72 <_fwalk_reent+0x3a>
 8007d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d66:	3301      	adds	r3, #1
 8007d68:	d003      	beq.n	8007d72 <_fwalk_reent+0x3a>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	47c0      	blx	r8
 8007d70:	4307      	orrs	r7, r0
 8007d72:	3568      	adds	r5, #104	; 0x68
 8007d74:	e7e9      	b.n	8007d4a <_fwalk_reent+0x12>

08007d76 <__retarget_lock_init_recursive>:
 8007d76:	4770      	bx	lr

08007d78 <__retarget_lock_acquire_recursive>:
 8007d78:	4770      	bx	lr

08007d7a <__retarget_lock_release_recursive>:
 8007d7a:	4770      	bx	lr

08007d7c <__swhatbuf_r>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	460e      	mov	r6, r1
 8007d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d84:	4614      	mov	r4, r2
 8007d86:	2900      	cmp	r1, #0
 8007d88:	461d      	mov	r5, r3
 8007d8a:	b096      	sub	sp, #88	; 0x58
 8007d8c:	da08      	bge.n	8007da0 <__swhatbuf_r+0x24>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d94:	602a      	str	r2, [r5, #0]
 8007d96:	061a      	lsls	r2, r3, #24
 8007d98:	d410      	bmi.n	8007dbc <__swhatbuf_r+0x40>
 8007d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9e:	e00e      	b.n	8007dbe <__swhatbuf_r+0x42>
 8007da0:	466a      	mov	r2, sp
 8007da2:	f000 f8fb 	bl	8007f9c <_fstat_r>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	dbf1      	blt.n	8007d8e <__swhatbuf_r+0x12>
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007db0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007db4:	425a      	negs	r2, r3
 8007db6:	415a      	adcs	r2, r3
 8007db8:	602a      	str	r2, [r5, #0]
 8007dba:	e7ee      	b.n	8007d9a <__swhatbuf_r+0x1e>
 8007dbc:	2340      	movs	r3, #64	; 0x40
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	b016      	add	sp, #88	; 0x58
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007dc8 <__smakebuf_r>:
 8007dc8:	898b      	ldrh	r3, [r1, #12]
 8007dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dcc:	079d      	lsls	r5, r3, #30
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	d507      	bpl.n	8007de4 <__smakebuf_r+0x1c>
 8007dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	6123      	str	r3, [r4, #16]
 8007ddc:	2301      	movs	r3, #1
 8007dde:	6163      	str	r3, [r4, #20]
 8007de0:	b002      	add	sp, #8
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	466a      	mov	r2, sp
 8007de6:	ab01      	add	r3, sp, #4
 8007de8:	f7ff ffc8 	bl	8007d7c <__swhatbuf_r>
 8007dec:	9900      	ldr	r1, [sp, #0]
 8007dee:	4605      	mov	r5, r0
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff fb0d 	bl	8007410 <_malloc_r>
 8007df6:	b948      	cbnz	r0, 8007e0c <__smakebuf_r+0x44>
 8007df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfc:	059a      	lsls	r2, r3, #22
 8007dfe:	d4ef      	bmi.n	8007de0 <__smakebuf_r+0x18>
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	f043 0302 	orr.w	r3, r3, #2
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	e7e3      	b.n	8007dd4 <__smakebuf_r+0xc>
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <__smakebuf_r+0x7c>)
 8007e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	6020      	str	r0, [r4, #0]
 8007e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e18:	81a3      	strh	r3, [r4, #12]
 8007e1a:	9b00      	ldr	r3, [sp, #0]
 8007e1c:	6120      	str	r0, [r4, #16]
 8007e1e:	6163      	str	r3, [r4, #20]
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	b15b      	cbz	r3, 8007e3c <__smakebuf_r+0x74>
 8007e24:	4630      	mov	r0, r6
 8007e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e2a:	f000 f8c9 	bl	8007fc0 <_isatty_r>
 8007e2e:	b128      	cbz	r0, 8007e3c <__smakebuf_r+0x74>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	89a0      	ldrh	r0, [r4, #12]
 8007e3e:	4305      	orrs	r5, r0
 8007e40:	81a5      	strh	r5, [r4, #12]
 8007e42:	e7cd      	b.n	8007de0 <__smakebuf_r+0x18>
 8007e44:	08007bd5 	.word	0x08007bd5

08007e48 <_raise_r>:
 8007e48:	291f      	cmp	r1, #31
 8007e4a:	b538      	push	{r3, r4, r5, lr}
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	d904      	bls.n	8007e5c <_raise_r+0x14>
 8007e52:	2316      	movs	r3, #22
 8007e54:	6003      	str	r3, [r0, #0]
 8007e56:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e5e:	b112      	cbz	r2, 8007e66 <_raise_r+0x1e>
 8007e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e64:	b94b      	cbnz	r3, 8007e7a <_raise_r+0x32>
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f830 	bl	8007ecc <_getpid_r>
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	4601      	mov	r1, r0
 8007e70:	4620      	mov	r0, r4
 8007e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e76:	f000 b817 	b.w	8007ea8 <_kill_r>
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d00a      	beq.n	8007e94 <_raise_r+0x4c>
 8007e7e:	1c59      	adds	r1, r3, #1
 8007e80:	d103      	bne.n	8007e8a <_raise_r+0x42>
 8007e82:	2316      	movs	r3, #22
 8007e84:	6003      	str	r3, [r0, #0]
 8007e86:	2001      	movs	r0, #1
 8007e88:	e7e7      	b.n	8007e5a <_raise_r+0x12>
 8007e8a:	2400      	movs	r4, #0
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e92:	4798      	blx	r3
 8007e94:	2000      	movs	r0, #0
 8007e96:	e7e0      	b.n	8007e5a <_raise_r+0x12>

08007e98 <raise>:
 8007e98:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <raise+0xc>)
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f7ff bfd3 	b.w	8007e48 <_raise_r>
 8007ea2:	bf00      	nop
 8007ea4:	20000010 	.word	0x20000010

08007ea8 <_kill_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4d06      	ldr	r5, [pc, #24]	; (8007ec8 <_kill_r+0x20>)
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	602b      	str	r3, [r5, #0]
 8007eb6:	f7f9 fcdf 	bl	8001878 <_kill>
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	d102      	bne.n	8007ec4 <_kill_r+0x1c>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	b103      	cbz	r3, 8007ec4 <_kill_r+0x1c>
 8007ec2:	6023      	str	r3, [r4, #0]
 8007ec4:	bd38      	pop	{r3, r4, r5, pc}
 8007ec6:	bf00      	nop
 8007ec8:	2000222c 	.word	0x2000222c

08007ecc <_getpid_r>:
 8007ecc:	f7f9 bcd2 	b.w	8001874 <_getpid>

08007ed0 <__sread>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	f000 f894 	bl	8008004 <_read_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	bfab      	itete	ge
 8007ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee4:	181b      	addge	r3, r3, r0
 8007ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eea:	bfac      	ite	ge
 8007eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eee:	81a3      	strhlt	r3, [r4, #12]
 8007ef0:	bd10      	pop	{r4, pc}

08007ef2 <__swrite>:
 8007ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	898b      	ldrh	r3, [r1, #12]
 8007efa:	4605      	mov	r5, r0
 8007efc:	05db      	lsls	r3, r3, #23
 8007efe:	460c      	mov	r4, r1
 8007f00:	4616      	mov	r6, r2
 8007f02:	d505      	bpl.n	8007f10 <__swrite+0x1e>
 8007f04:	2302      	movs	r3, #2
 8007f06:	2200      	movs	r2, #0
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	f000 f868 	bl	8007fe0 <_lseek_r>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	4632      	mov	r2, r6
 8007f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f26:	f000 b817 	b.w	8007f58 <_write_r>

08007f2a <__sseek>:
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f32:	f000 f855 	bl	8007fe0 <_lseek_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	bf15      	itete	ne
 8007f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f46:	81a3      	strheq	r3, [r4, #12]
 8007f48:	bf18      	it	ne
 8007f4a:	81a3      	strhne	r3, [r4, #12]
 8007f4c:	bd10      	pop	{r4, pc}

08007f4e <__sclose>:
 8007f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f52:	f000 b813 	b.w	8007f7c <_close_r>
	...

08007f58 <_write_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	2200      	movs	r2, #0
 8007f62:	4d05      	ldr	r5, [pc, #20]	; (8007f78 <_write_r+0x20>)
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7f9 fca2 	bl	80018b0 <_write>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_write_r+0x1e>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_write_r+0x1e>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	2000222c 	.word	0x2000222c

08007f7c <_close_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4d05      	ldr	r5, [pc, #20]	; (8007f98 <_close_r+0x1c>)
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f9 fca0 	bl	80018cc <_close>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_close_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_close_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	2000222c 	.word	0x2000222c

08007f9c <_fstat_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4d06      	ldr	r5, [pc, #24]	; (8007fbc <_fstat_r+0x20>)
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	f7f9 fc92 	bl	80018d2 <_fstat>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d102      	bne.n	8007fb8 <_fstat_r+0x1c>
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	b103      	cbz	r3, 8007fb8 <_fstat_r+0x1c>
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop
 8007fbc:	2000222c 	.word	0x2000222c

08007fc0 <_isatty_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4d05      	ldr	r5, [pc, #20]	; (8007fdc <_isatty_r+0x1c>)
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	602b      	str	r3, [r5, #0]
 8007fcc:	f7f9 fc86 	bl	80018dc <_isatty>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_isatty_r+0x1a>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_isatty_r+0x1a>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	2000222c 	.word	0x2000222c

08007fe0 <_lseek_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4d05      	ldr	r5, [pc, #20]	; (8008000 <_lseek_r+0x20>)
 8007fec:	602a      	str	r2, [r5, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f7f9 fc76 	bl	80018e0 <_lseek>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_lseek_r+0x1e>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_lseek_r+0x1e>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	2000222c 	.word	0x2000222c

08008004 <_read_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	2200      	movs	r2, #0
 800800e:	4d05      	ldr	r5, [pc, #20]	; (8008024 <_read_r+0x20>)
 8008010:	602a      	str	r2, [r5, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	f7f9 fc3e 	bl	8001894 <_read>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_read_r+0x1e>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_read_r+0x1e>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	2000222c 	.word	0x2000222c

08008028 <ceilf>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800802e:	3d7f      	subs	r5, #127	; 0x7f
 8008030:	2d16      	cmp	r5, #22
 8008032:	4601      	mov	r1, r0
 8008034:	4604      	mov	r4, r0
 8008036:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800803a:	dc26      	bgt.n	800808a <ceilf+0x62>
 800803c:	2d00      	cmp	r5, #0
 800803e:	da0e      	bge.n	800805e <ceilf+0x36>
 8008040:	4917      	ldr	r1, [pc, #92]	; (80080a0 <ceilf+0x78>)
 8008042:	f7f8 fdd7 	bl	8000bf4 <__addsf3>
 8008046:	2100      	movs	r1, #0
 8008048:	f7f9 f898 	bl	800117c <__aeabi_fcmpgt>
 800804c:	b128      	cbz	r0, 800805a <ceilf+0x32>
 800804e:	2c00      	cmp	r4, #0
 8008050:	db23      	blt.n	800809a <ceilf+0x72>
 8008052:	2e00      	cmp	r6, #0
 8008054:	bf18      	it	ne
 8008056:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800805a:	4621      	mov	r1, r4
 800805c:	e01b      	b.n	8008096 <ceilf+0x6e>
 800805e:	4e11      	ldr	r6, [pc, #68]	; (80080a4 <ceilf+0x7c>)
 8008060:	412e      	asrs	r6, r5
 8008062:	4230      	tst	r0, r6
 8008064:	d017      	beq.n	8008096 <ceilf+0x6e>
 8008066:	490e      	ldr	r1, [pc, #56]	; (80080a0 <ceilf+0x78>)
 8008068:	f7f8 fdc4 	bl	8000bf4 <__addsf3>
 800806c:	2100      	movs	r1, #0
 800806e:	f7f9 f885 	bl	800117c <__aeabi_fcmpgt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d0f1      	beq.n	800805a <ceilf+0x32>
 8008076:	2c00      	cmp	r4, #0
 8008078:	bfc2      	ittt	gt
 800807a:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800807e:	fa43 f505 	asrgt.w	r5, r3, r5
 8008082:	1964      	addgt	r4, r4, r5
 8008084:	ea24 0406 	bic.w	r4, r4, r6
 8008088:	e7e7      	b.n	800805a <ceilf+0x32>
 800808a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800808e:	d302      	bcc.n	8008096 <ceilf+0x6e>
 8008090:	f7f8 fdb0 	bl	8000bf4 <__addsf3>
 8008094:	4601      	mov	r1, r0
 8008096:	4608      	mov	r0, r1
 8008098:	bd70      	pop	{r4, r5, r6, pc}
 800809a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800809e:	e7dc      	b.n	800805a <ceilf+0x32>
 80080a0:	7149f2ca 	.word	0x7149f2ca
 80080a4:	007fffff 	.word	0x007fffff

080080a8 <pow10f>:
 80080a8:	4601      	mov	r1, r0
 80080aa:	4801      	ldr	r0, [pc, #4]	; (80080b0 <pow10f+0x8>)
 80080ac:	f000 b850 	b.w	8008150 <powf>
 80080b0:	41200000 	.word	0x41200000

080080b4 <expf>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4605      	mov	r5, r0
 80080b8:	f000 f898 	bl	80081ec <__ieee754_expf>
 80080bc:	4604      	mov	r4, r0
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 fdb5 	bl	8008c2e <finitef>
 80080c4:	b150      	cbz	r0, 80080dc <expf+0x28>
 80080c6:	4628      	mov	r0, r5
 80080c8:	490b      	ldr	r1, [pc, #44]	; (80080f8 <expf+0x44>)
 80080ca:	f7f9 f857 	bl	800117c <__aeabi_fcmpgt>
 80080ce:	b138      	cbz	r0, 80080e0 <expf+0x2c>
 80080d0:	f7fd fa6c 	bl	80055ac <__errno>
 80080d4:	2322      	movs	r3, #34	; 0x22
 80080d6:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 80080da:	6003      	str	r3, [r0, #0]
 80080dc:	4620      	mov	r0, r4
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	4628      	mov	r0, r5
 80080e2:	4906      	ldr	r1, [pc, #24]	; (80080fc <expf+0x48>)
 80080e4:	f7f9 f82c 	bl	8001140 <__aeabi_fcmplt>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d0f7      	beq.n	80080dc <expf+0x28>
 80080ec:	f7fd fa5e 	bl	80055ac <__errno>
 80080f0:	2322      	movs	r3, #34	; 0x22
 80080f2:	2400      	movs	r4, #0
 80080f4:	6003      	str	r3, [r0, #0]
 80080f6:	e7f1      	b.n	80080dc <expf+0x28>
 80080f8:	42b17180 	.word	0x42b17180
 80080fc:	c2cff1b5 	.word	0xc2cff1b5

08008100 <log10f>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4604      	mov	r4, r0
 8008104:	f000 f968 	bl	80083d8 <__ieee754_log10f>
 8008108:	4621      	mov	r1, r4
 800810a:	4605      	mov	r5, r0
 800810c:	4620      	mov	r0, r4
 800810e:	f7f9 f83f 	bl	8001190 <__aeabi_fcmpun>
 8008112:	b970      	cbnz	r0, 8008132 <log10f+0x32>
 8008114:	2100      	movs	r1, #0
 8008116:	4620      	mov	r0, r4
 8008118:	f7f9 f81c 	bl	8001154 <__aeabi_fcmple>
 800811c:	b148      	cbz	r0, 8008132 <log10f+0x32>
 800811e:	2100      	movs	r1, #0
 8008120:	4620      	mov	r0, r4
 8008122:	f7f9 f803 	bl	800112c <__aeabi_fcmpeq>
 8008126:	b130      	cbz	r0, 8008136 <log10f+0x36>
 8008128:	f7fd fa40 	bl	80055ac <__errno>
 800812c:	2322      	movs	r3, #34	; 0x22
 800812e:	4d06      	ldr	r5, [pc, #24]	; (8008148 <log10f+0x48>)
 8008130:	6003      	str	r3, [r0, #0]
 8008132:	4628      	mov	r0, r5
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	f7fd fa39 	bl	80055ac <__errno>
 800813a:	2321      	movs	r3, #33	; 0x21
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	4803      	ldr	r0, [pc, #12]	; (800814c <log10f+0x4c>)
 8008140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008144:	f000 bd7c 	b.w	8008c40 <nanf>
 8008148:	ff800000 	.word	0xff800000
 800814c:	0800993f 	.word	0x0800993f

08008150 <powf>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	460c      	mov	r4, r1
 8008154:	4606      	mov	r6, r0
 8008156:	f000 f991 	bl	800847c <__ieee754_powf>
 800815a:	4621      	mov	r1, r4
 800815c:	4605      	mov	r5, r0
 800815e:	4620      	mov	r0, r4
 8008160:	f7f9 f816 	bl	8001190 <__aeabi_fcmpun>
 8008164:	bb68      	cbnz	r0, 80081c2 <powf+0x72>
 8008166:	2100      	movs	r1, #0
 8008168:	4630      	mov	r0, r6
 800816a:	f7f8 ffdf 	bl	800112c <__aeabi_fcmpeq>
 800816e:	b190      	cbz	r0, 8008196 <powf+0x46>
 8008170:	2100      	movs	r1, #0
 8008172:	4620      	mov	r0, r4
 8008174:	f7f8 ffda 	bl	800112c <__aeabi_fcmpeq>
 8008178:	2800      	cmp	r0, #0
 800817a:	d133      	bne.n	80081e4 <powf+0x94>
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fd56 	bl	8008c2e <finitef>
 8008182:	b1f0      	cbz	r0, 80081c2 <powf+0x72>
 8008184:	2100      	movs	r1, #0
 8008186:	4620      	mov	r0, r4
 8008188:	f7f8 ffda 	bl	8001140 <__aeabi_fcmplt>
 800818c:	b1c8      	cbz	r0, 80081c2 <powf+0x72>
 800818e:	f7fd fa0d 	bl	80055ac <__errno>
 8008192:	2322      	movs	r3, #34	; 0x22
 8008194:	e014      	b.n	80081c0 <powf+0x70>
 8008196:	4628      	mov	r0, r5
 8008198:	f000 fd49 	bl	8008c2e <finitef>
 800819c:	b998      	cbnz	r0, 80081c6 <powf+0x76>
 800819e:	4630      	mov	r0, r6
 80081a0:	f000 fd45 	bl	8008c2e <finitef>
 80081a4:	b178      	cbz	r0, 80081c6 <powf+0x76>
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 fd41 	bl	8008c2e <finitef>
 80081ac:	b158      	cbz	r0, 80081c6 <powf+0x76>
 80081ae:	4629      	mov	r1, r5
 80081b0:	4628      	mov	r0, r5
 80081b2:	f7f8 ffed 	bl	8001190 <__aeabi_fcmpun>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d0e9      	beq.n	800818e <powf+0x3e>
 80081ba:	f7fd f9f7 	bl	80055ac <__errno>
 80081be:	2321      	movs	r3, #33	; 0x21
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	4628      	mov	r0, r5
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	2100      	movs	r1, #0
 80081c8:	4628      	mov	r0, r5
 80081ca:	f7f8 ffaf 	bl	800112c <__aeabi_fcmpeq>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0f7      	beq.n	80081c2 <powf+0x72>
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 fd2b 	bl	8008c2e <finitef>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d0f2      	beq.n	80081c2 <powf+0x72>
 80081dc:	4620      	mov	r0, r4
 80081de:	f000 fd26 	bl	8008c2e <finitef>
 80081e2:	e7d3      	b.n	800818c <powf+0x3c>
 80081e4:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80081e8:	e7eb      	b.n	80081c2 <powf+0x72>
	...

080081ec <__ieee754_expf>:
 80081ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80081f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80081f8:	4604      	mov	r4, r0
 80081fa:	d904      	bls.n	8008206 <__ieee754_expf+0x1a>
 80081fc:	4601      	mov	r1, r0
 80081fe:	f7f8 fcf9 	bl	8000bf4 <__addsf3>
 8008202:	4604      	mov	r4, r0
 8008204:	e004      	b.n	8008210 <__ieee754_expf+0x24>
 8008206:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800820a:	d104      	bne.n	8008216 <__ieee754_expf+0x2a>
 800820c:	b106      	cbz	r6, 8008210 <__ieee754_expf+0x24>
 800820e:	2400      	movs	r4, #0
 8008210:	4620      	mov	r0, r4
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	4960      	ldr	r1, [pc, #384]	; (8008398 <__ieee754_expf+0x1ac>)
 8008218:	4288      	cmp	r0, r1
 800821a:	dd04      	ble.n	8008226 <__ieee754_expf+0x3a>
 800821c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	2000      	movs	r0, #0
 8008222:	f000 bcfd 	b.w	8008c20 <__math_oflowf>
 8008226:	2800      	cmp	r0, #0
 8008228:	da07      	bge.n	800823a <__ieee754_expf+0x4e>
 800822a:	4a5c      	ldr	r2, [pc, #368]	; (800839c <__ieee754_expf+0x1b0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d904      	bls.n	800823a <__ieee754_expf+0x4e>
 8008230:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	2000      	movs	r0, #0
 8008236:	f000 bcef 	b.w	8008c18 <__math_uflowf>
 800823a:	4a59      	ldr	r2, [pc, #356]	; (80083a0 <__ieee754_expf+0x1b4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d971      	bls.n	8008324 <__ieee754_expf+0x138>
 8008240:	4a58      	ldr	r2, [pc, #352]	; (80083a4 <__ieee754_expf+0x1b8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d851      	bhi.n	80082ea <__ieee754_expf+0xfe>
 8008246:	4b58      	ldr	r3, [pc, #352]	; (80083a8 <__ieee754_expf+0x1bc>)
 8008248:	4620      	mov	r0, r4
 800824a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800824e:	f7f8 fccf 	bl	8000bf0 <__aeabi_fsub>
 8008252:	4605      	mov	r5, r0
 8008254:	4b55      	ldr	r3, [pc, #340]	; (80083ac <__ieee754_expf+0x1c0>)
 8008256:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800825a:	f1c6 0301 	rsb	r3, r6, #1
 800825e:	eba3 0906 	sub.w	r9, r3, r6
 8008262:	4639      	mov	r1, r7
 8008264:	4628      	mov	r0, r5
 8008266:	f7f8 fcc3 	bl	8000bf0 <__aeabi_fsub>
 800826a:	4604      	mov	r4, r0
 800826c:	4621      	mov	r1, r4
 800826e:	4620      	mov	r0, r4
 8008270:	f7f8 fdc8 	bl	8000e04 <__aeabi_fmul>
 8008274:	4606      	mov	r6, r0
 8008276:	494e      	ldr	r1, [pc, #312]	; (80083b0 <__ieee754_expf+0x1c4>)
 8008278:	f7f8 fdc4 	bl	8000e04 <__aeabi_fmul>
 800827c:	494d      	ldr	r1, [pc, #308]	; (80083b4 <__ieee754_expf+0x1c8>)
 800827e:	f7f8 fcb7 	bl	8000bf0 <__aeabi_fsub>
 8008282:	4631      	mov	r1, r6
 8008284:	f7f8 fdbe 	bl	8000e04 <__aeabi_fmul>
 8008288:	494b      	ldr	r1, [pc, #300]	; (80083b8 <__ieee754_expf+0x1cc>)
 800828a:	f7f8 fcb3 	bl	8000bf4 <__addsf3>
 800828e:	4631      	mov	r1, r6
 8008290:	f7f8 fdb8 	bl	8000e04 <__aeabi_fmul>
 8008294:	4949      	ldr	r1, [pc, #292]	; (80083bc <__ieee754_expf+0x1d0>)
 8008296:	f7f8 fcab 	bl	8000bf0 <__aeabi_fsub>
 800829a:	4631      	mov	r1, r6
 800829c:	f7f8 fdb2 	bl	8000e04 <__aeabi_fmul>
 80082a0:	4947      	ldr	r1, [pc, #284]	; (80083c0 <__ieee754_expf+0x1d4>)
 80082a2:	f7f8 fca7 	bl	8000bf4 <__addsf3>
 80082a6:	4631      	mov	r1, r6
 80082a8:	f7f8 fdac 	bl	8000e04 <__aeabi_fmul>
 80082ac:	4601      	mov	r1, r0
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7f8 fc9e 	bl	8000bf0 <__aeabi_fsub>
 80082b4:	4601      	mov	r1, r0
 80082b6:	4680      	mov	r8, r0
 80082b8:	4620      	mov	r0, r4
 80082ba:	f7f8 fda3 	bl	8000e04 <__aeabi_fmul>
 80082be:	4606      	mov	r6, r0
 80082c0:	f1b9 0f00 	cmp.w	r9, #0
 80082c4:	d143      	bne.n	800834e <__ieee754_expf+0x162>
 80082c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7f8 fc90 	bl	8000bf0 <__aeabi_fsub>
 80082d0:	4601      	mov	r1, r0
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7f8 fe4a 	bl	8000f6c <__aeabi_fdiv>
 80082d8:	4621      	mov	r1, r4
 80082da:	f7f8 fc89 	bl	8000bf0 <__aeabi_fsub>
 80082de:	4601      	mov	r1, r0
 80082e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80082e4:	f7f8 fc84 	bl	8000bf0 <__aeabi_fsub>
 80082e8:	e78b      	b.n	8008202 <__ieee754_expf+0x16>
 80082ea:	4936      	ldr	r1, [pc, #216]	; (80083c4 <__ieee754_expf+0x1d8>)
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7f8 fd89 	bl	8000e04 <__aeabi_fmul>
 80082f2:	4b35      	ldr	r3, [pc, #212]	; (80083c8 <__ieee754_expf+0x1dc>)
 80082f4:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80082f8:	f7f8 fc7c 	bl	8000bf4 <__addsf3>
 80082fc:	f7f8 ff5e 	bl	80011bc <__aeabi_f2iz>
 8008300:	4681      	mov	r9, r0
 8008302:	f7f8 fd2b 	bl	8000d5c <__aeabi_i2f>
 8008306:	4931      	ldr	r1, [pc, #196]	; (80083cc <__ieee754_expf+0x1e0>)
 8008308:	4606      	mov	r6, r0
 800830a:	f7f8 fd7b 	bl	8000e04 <__aeabi_fmul>
 800830e:	4601      	mov	r1, r0
 8008310:	4620      	mov	r0, r4
 8008312:	f7f8 fc6d 	bl	8000bf0 <__aeabi_fsub>
 8008316:	492e      	ldr	r1, [pc, #184]	; (80083d0 <__ieee754_expf+0x1e4>)
 8008318:	4605      	mov	r5, r0
 800831a:	4630      	mov	r0, r6
 800831c:	f7f8 fd72 	bl	8000e04 <__aeabi_fmul>
 8008320:	4607      	mov	r7, r0
 8008322:	e79e      	b.n	8008262 <__ieee754_expf+0x76>
 8008324:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8008328:	d20c      	bcs.n	8008344 <__ieee754_expf+0x158>
 800832a:	492a      	ldr	r1, [pc, #168]	; (80083d4 <__ieee754_expf+0x1e8>)
 800832c:	4620      	mov	r0, r4
 800832e:	f7f8 fc61 	bl	8000bf4 <__addsf3>
 8008332:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008336:	f7f8 ff21 	bl	800117c <__aeabi_fcmpgt>
 800833a:	b130      	cbz	r0, 800834a <__ieee754_expf+0x15e>
 800833c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008340:	4620      	mov	r0, r4
 8008342:	e75c      	b.n	80081fe <__ieee754_expf+0x12>
 8008344:	f04f 0900 	mov.w	r9, #0
 8008348:	e790      	b.n	800826c <__ieee754_expf+0x80>
 800834a:	4681      	mov	r9, r0
 800834c:	e78e      	b.n	800826c <__ieee754_expf+0x80>
 800834e:	4641      	mov	r1, r8
 8008350:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008354:	f7f8 fc4c 	bl	8000bf0 <__aeabi_fsub>
 8008358:	4601      	mov	r1, r0
 800835a:	4630      	mov	r0, r6
 800835c:	f7f8 fe06 	bl	8000f6c <__aeabi_fdiv>
 8008360:	4601      	mov	r1, r0
 8008362:	4638      	mov	r0, r7
 8008364:	f7f8 fc44 	bl	8000bf0 <__aeabi_fsub>
 8008368:	4629      	mov	r1, r5
 800836a:	f7f8 fc41 	bl	8000bf0 <__aeabi_fsub>
 800836e:	4601      	mov	r1, r0
 8008370:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008374:	f7f8 fc3c 	bl	8000bf0 <__aeabi_fsub>
 8008378:	f119 0f7d 	cmn.w	r9, #125	; 0x7d
 800837c:	db02      	blt.n	8008384 <__ieee754_expf+0x198>
 800837e:	eb00 54c9 	add.w	r4, r0, r9, lsl #23
 8008382:	e745      	b.n	8008210 <__ieee754_expf+0x24>
 8008384:	f109 0964 	add.w	r9, r9, #100	; 0x64
 8008388:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
 800838c:	eb00 50c9 	add.w	r0, r0, r9, lsl #23
 8008390:	f7f8 fd38 	bl	8000e04 <__aeabi_fmul>
 8008394:	e735      	b.n	8008202 <__ieee754_expf+0x16>
 8008396:	bf00      	nop
 8008398:	42b17217 	.word	0x42b17217
 800839c:	42cff1b5 	.word	0x42cff1b5
 80083a0:	3eb17218 	.word	0x3eb17218
 80083a4:	3f851591 	.word	0x3f851591
 80083a8:	08009ac4 	.word	0x08009ac4
 80083ac:	08009acc 	.word	0x08009acc
 80083b0:	3331bb4c 	.word	0x3331bb4c
 80083b4:	35ddea0e 	.word	0x35ddea0e
 80083b8:	388ab355 	.word	0x388ab355
 80083bc:	3b360b61 	.word	0x3b360b61
 80083c0:	3e2aaaab 	.word	0x3e2aaaab
 80083c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80083c8:	08009abc 	.word	0x08009abc
 80083cc:	3f317180 	.word	0x3f317180
 80083d0:	3717f7d1 	.word	0x3717f7d1
 80083d4:	7149f2ca 	.word	0x7149f2ca

080083d8 <__ieee754_log10f>:
 80083d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80083dc:	4601      	mov	r1, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	d105      	bne.n	80083f0 <__ieee754_log10f+0x18>
 80083e4:	2100      	movs	r1, #0
 80083e6:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80083ea:	f7f8 fdbf 	bl	8000f6c <__aeabi_fdiv>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	2800      	cmp	r0, #0
 80083f2:	da03      	bge.n	80083fc <__ieee754_log10f+0x24>
 80083f4:	f7f8 fbfc 	bl	8000bf0 <__aeabi_fsub>
 80083f8:	2100      	movs	r1, #0
 80083fa:	e7f6      	b.n	80083ea <__ieee754_log10f+0x12>
 80083fc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008400:	db02      	blt.n	8008408 <__ieee754_log10f+0x30>
 8008402:	f7f8 fbf7 	bl	8000bf4 <__addsf3>
 8008406:	e7f2      	b.n	80083ee <__ieee754_log10f+0x16>
 8008408:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800840c:	da2d      	bge.n	800846a <__ieee754_log10f+0x92>
 800840e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008412:	f7f8 fcf7 	bl	8000e04 <__aeabi_fmul>
 8008416:	f06f 0218 	mvn.w	r2, #24
 800841a:	4603      	mov	r3, r0
 800841c:	15d8      	asrs	r0, r3, #23
 800841e:	387f      	subs	r0, #127	; 0x7f
 8008420:	4410      	add	r0, r2
 8008422:	0fc6      	lsrs	r6, r0, #31
 8008424:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008428:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800842c:	f7f8 fc96 	bl	8000d5c <__aeabi_i2f>
 8008430:	4605      	mov	r5, r0
 8008432:	f1c6 007f 	rsb	r0, r6, #127	; 0x7f
 8008436:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800843a:	f000 fc51 	bl	8008ce0 <__ieee754_logf>
 800843e:	490c      	ldr	r1, [pc, #48]	; (8008470 <__ieee754_log10f+0x98>)
 8008440:	4606      	mov	r6, r0
 8008442:	4628      	mov	r0, r5
 8008444:	f7f8 fcde 	bl	8000e04 <__aeabi_fmul>
 8008448:	490a      	ldr	r1, [pc, #40]	; (8008474 <__ieee754_log10f+0x9c>)
 800844a:	4604      	mov	r4, r0
 800844c:	4630      	mov	r0, r6
 800844e:	f7f8 fcd9 	bl	8000e04 <__aeabi_fmul>
 8008452:	4601      	mov	r1, r0
 8008454:	4620      	mov	r0, r4
 8008456:	f7f8 fbcd 	bl	8000bf4 <__addsf3>
 800845a:	4907      	ldr	r1, [pc, #28]	; (8008478 <__ieee754_log10f+0xa0>)
 800845c:	4604      	mov	r4, r0
 800845e:	4628      	mov	r0, r5
 8008460:	f7f8 fcd0 	bl	8000e04 <__aeabi_fmul>
 8008464:	4601      	mov	r1, r0
 8008466:	4620      	mov	r0, r4
 8008468:	e7cb      	b.n	8008402 <__ieee754_log10f+0x2a>
 800846a:	2200      	movs	r2, #0
 800846c:	e7d6      	b.n	800841c <__ieee754_log10f+0x44>
 800846e:	bf00      	nop
 8008470:	355427db 	.word	0x355427db
 8008474:	3ede5bd9 	.word	0x3ede5bd9
 8008478:	3e9a2080 	.word	0x3e9a2080

0800847c <__ieee754_powf>:
 800847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8008484:	4681      	mov	r9, r0
 8008486:	460f      	mov	r7, r1
 8008488:	4680      	mov	r8, r0
 800848a:	460c      	mov	r4, r1
 800848c:	b087      	sub	sp, #28
 800848e:	d10d      	bne.n	80084ac <__ieee754_powf+0x30>
 8008490:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8008494:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008498:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 800849c:	f240 8338 	bls.w	8008b10 <__ieee754_powf+0x694>
 80084a0:	4639      	mov	r1, r7
 80084a2:	4648      	mov	r0, r9
 80084a4:	f7f8 fba6 	bl	8000bf4 <__addsf3>
 80084a8:	4601      	mov	r1, r0
 80084aa:	e040      	b.n	800852e <__ieee754_powf+0xb2>
 80084ac:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80084b0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80084b4:	dcf4      	bgt.n	80084a0 <__ieee754_powf+0x24>
 80084b6:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 80084ba:	dd08      	ble.n	80084ce <__ieee754_powf+0x52>
 80084bc:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 80084c0:	d1ee      	bne.n	80084a0 <__ieee754_powf+0x24>
 80084c2:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 80084c6:	0064      	lsls	r4, r4, #1
 80084c8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80084cc:	e7e6      	b.n	800849c <__ieee754_powf+0x20>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	da20      	bge.n	8008514 <__ieee754_powf+0x98>
 80084d2:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 80084d6:	da2e      	bge.n	8008536 <__ieee754_powf+0xba>
 80084d8:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 80084dc:	f2c0 831d 	blt.w	8008b1a <__ieee754_powf+0x69e>
 80084e0:	ea4f 53ea 	mov.w	r3, sl, asr #23
 80084e4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80084e8:	fa4a f503 	asr.w	r5, sl, r3
 80084ec:	fa05 f303 	lsl.w	r3, r5, r3
 80084f0:	4553      	cmp	r3, sl
 80084f2:	f040 8312 	bne.w	8008b1a <__ieee754_powf+0x69e>
 80084f6:	f005 0501 	and.w	r5, r5, #1
 80084fa:	f1c5 0502 	rsb	r5, r5, #2
 80084fe:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8008502:	d120      	bne.n	8008546 <__ieee754_powf+0xca>
 8008504:	2c00      	cmp	r4, #0
 8008506:	4649      	mov	r1, r9
 8008508:	da11      	bge.n	800852e <__ieee754_powf+0xb2>
 800850a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800850e:	f7f8 fd2d 	bl	8000f6c <__aeabi_fdiv>
 8008512:	e7c9      	b.n	80084a8 <__ieee754_powf+0x2c>
 8008514:	2500      	movs	r5, #0
 8008516:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800851a:	d1f0      	bne.n	80084fe <__ieee754_powf+0x82>
 800851c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8008520:	f000 82f6 	beq.w	8008b10 <__ieee754_powf+0x694>
 8008524:	dd09      	ble.n	800853a <__ieee754_powf+0xbe>
 8008526:	2c00      	cmp	r4, #0
 8008528:	f2c0 82f5 	blt.w	8008b16 <__ieee754_powf+0x69a>
 800852c:	4639      	mov	r1, r7
 800852e:	4608      	mov	r0, r1
 8008530:	b007      	add	sp, #28
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008536:	2502      	movs	r5, #2
 8008538:	e7ed      	b.n	8008516 <__ieee754_powf+0x9a>
 800853a:	2c00      	cmp	r4, #0
 800853c:	f280 82eb 	bge.w	8008b16 <__ieee754_powf+0x69a>
 8008540:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8008544:	e7f3      	b.n	800852e <__ieee754_powf+0xb2>
 8008546:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800854a:	d104      	bne.n	8008556 <__ieee754_powf+0xda>
 800854c:	4649      	mov	r1, r9
 800854e:	4648      	mov	r0, r9
 8008550:	f7f8 fc58 	bl	8000e04 <__aeabi_fmul>
 8008554:	e7a8      	b.n	80084a8 <__ieee754_powf+0x2c>
 8008556:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800855a:	4648      	mov	r0, r9
 800855c:	d107      	bne.n	800856e <__ieee754_powf+0xf2>
 800855e:	f1b8 0f00 	cmp.w	r8, #0
 8008562:	db04      	blt.n	800856e <__ieee754_powf+0xf2>
 8008564:	b007      	add	sp, #28
 8008566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	f000 baef 	b.w	8008b4c <__ieee754_sqrtf>
 800856e:	f000 fb5b 	bl	8008c28 <fabsf>
 8008572:	4601      	mov	r1, r0
 8008574:	b126      	cbz	r6, 8008580 <__ieee754_powf+0x104>
 8008576:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800857a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800857e:	d118      	bne.n	80085b2 <__ieee754_powf+0x136>
 8008580:	2c00      	cmp	r4, #0
 8008582:	da04      	bge.n	800858e <__ieee754_powf+0x112>
 8008584:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008588:	f7f8 fcf0 	bl	8000f6c <__aeabi_fdiv>
 800858c:	4601      	mov	r1, r0
 800858e:	f1b8 0f00 	cmp.w	r8, #0
 8008592:	dacc      	bge.n	800852e <__ieee754_powf+0xb2>
 8008594:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 8008598:	ea56 0305 	orrs.w	r3, r6, r5
 800859c:	d104      	bne.n	80085a8 <__ieee754_powf+0x12c>
 800859e:	4608      	mov	r0, r1
 80085a0:	f7f8 fb26 	bl	8000bf0 <__aeabi_fsub>
 80085a4:	4601      	mov	r1, r0
 80085a6:	e7b2      	b.n	800850e <__ieee754_powf+0x92>
 80085a8:	2d01      	cmp	r5, #1
 80085aa:	d1c0      	bne.n	800852e <__ieee754_powf+0xb2>
 80085ac:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 80085b0:	e77a      	b.n	80084a8 <__ieee754_powf+0x2c>
 80085b2:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80085b6:	3b01      	subs	r3, #1
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	432b      	orrs	r3, r5
 80085bc:	d101      	bne.n	80085c2 <__ieee754_powf+0x146>
 80085be:	4649      	mov	r1, r9
 80085c0:	e7ed      	b.n	800859e <__ieee754_powf+0x122>
 80085c2:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 80085c6:	f340 809f 	ble.w	8008708 <__ieee754_powf+0x28c>
 80085ca:	4b48      	ldr	r3, [pc, #288]	; (80086ec <__ieee754_powf+0x270>)
 80085cc:	429e      	cmp	r6, r3
 80085ce:	dc07      	bgt.n	80085e0 <__ieee754_powf+0x164>
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	da0a      	bge.n	80085ea <__ieee754_powf+0x16e>
 80085d4:	2000      	movs	r0, #0
 80085d6:	b007      	add	sp, #28
 80085d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	f000 bb20 	b.w	8008c20 <__math_oflowf>
 80085e0:	4b43      	ldr	r3, [pc, #268]	; (80086f0 <__ieee754_powf+0x274>)
 80085e2:	429e      	cmp	r6, r3
 80085e4:	dd07      	ble.n	80085f6 <__ieee754_powf+0x17a>
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	dcf4      	bgt.n	80085d4 <__ieee754_powf+0x158>
 80085ea:	2000      	movs	r0, #0
 80085ec:	b007      	add	sp, #28
 80085ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f2:	f000 bb11 	b.w	8008c18 <__math_uflowf>
 80085f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80085fa:	f7f8 faf9 	bl	8000bf0 <__aeabi_fsub>
 80085fe:	493d      	ldr	r1, [pc, #244]	; (80086f4 <__ieee754_powf+0x278>)
 8008600:	4606      	mov	r6, r0
 8008602:	f7f8 fbff 	bl	8000e04 <__aeabi_fmul>
 8008606:	493c      	ldr	r1, [pc, #240]	; (80086f8 <__ieee754_powf+0x27c>)
 8008608:	4680      	mov	r8, r0
 800860a:	4630      	mov	r0, r6
 800860c:	f7f8 fbfa 	bl	8000e04 <__aeabi_fmul>
 8008610:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8008614:	4681      	mov	r9, r0
 8008616:	4630      	mov	r0, r6
 8008618:	f7f8 fbf4 	bl	8000e04 <__aeabi_fmul>
 800861c:	4601      	mov	r1, r0
 800861e:	4837      	ldr	r0, [pc, #220]	; (80086fc <__ieee754_powf+0x280>)
 8008620:	f7f8 fae6 	bl	8000bf0 <__aeabi_fsub>
 8008624:	4631      	mov	r1, r6
 8008626:	f7f8 fbed 	bl	8000e04 <__aeabi_fmul>
 800862a:	4601      	mov	r1, r0
 800862c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008630:	f7f8 fade 	bl	8000bf0 <__aeabi_fsub>
 8008634:	4631      	mov	r1, r6
 8008636:	4682      	mov	sl, r0
 8008638:	4630      	mov	r0, r6
 800863a:	f7f8 fbe3 	bl	8000e04 <__aeabi_fmul>
 800863e:	4601      	mov	r1, r0
 8008640:	4650      	mov	r0, sl
 8008642:	f7f8 fbdf 	bl	8000e04 <__aeabi_fmul>
 8008646:	492e      	ldr	r1, [pc, #184]	; (8008700 <__ieee754_powf+0x284>)
 8008648:	f7f8 fbdc 	bl	8000e04 <__aeabi_fmul>
 800864c:	4601      	mov	r1, r0
 800864e:	4648      	mov	r0, r9
 8008650:	f7f8 face 	bl	8000bf0 <__aeabi_fsub>
 8008654:	4601      	mov	r1, r0
 8008656:	4606      	mov	r6, r0
 8008658:	4640      	mov	r0, r8
 800865a:	f7f8 facb 	bl	8000bf4 <__addsf3>
 800865e:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008662:	f029 090f 	bic.w	r9, r9, #15
 8008666:	4641      	mov	r1, r8
 8008668:	4648      	mov	r0, r9
 800866a:	f7f8 fac1 	bl	8000bf0 <__aeabi_fsub>
 800866e:	4601      	mov	r1, r0
 8008670:	4630      	mov	r0, r6
 8008672:	f7f8 fabd 	bl	8000bf0 <__aeabi_fsub>
 8008676:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	3d01      	subs	r5, #1
 800867e:	f024 040f 	bic.w	r4, r4, #15
 8008682:	432b      	orrs	r3, r5
 8008684:	4606      	mov	r6, r0
 8008686:	4621      	mov	r1, r4
 8008688:	4638      	mov	r0, r7
 800868a:	bf14      	ite	ne
 800868c:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8008690:	4d1c      	ldreq	r5, [pc, #112]	; (8008704 <__ieee754_powf+0x288>)
 8008692:	f7f8 faad 	bl	8000bf0 <__aeabi_fsub>
 8008696:	4649      	mov	r1, r9
 8008698:	f7f8 fbb4 	bl	8000e04 <__aeabi_fmul>
 800869c:	4639      	mov	r1, r7
 800869e:	4680      	mov	r8, r0
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7f8 fbaf 	bl	8000e04 <__aeabi_fmul>
 80086a6:	4601      	mov	r1, r0
 80086a8:	4640      	mov	r0, r8
 80086aa:	f7f8 faa3 	bl	8000bf4 <__addsf3>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4606      	mov	r6, r0
 80086b2:	4648      	mov	r0, r9
 80086b4:	f7f8 fba6 	bl	8000e04 <__aeabi_fmul>
 80086b8:	4601      	mov	r1, r0
 80086ba:	4607      	mov	r7, r0
 80086bc:	4681      	mov	r9, r0
 80086be:	4630      	mov	r0, r6
 80086c0:	f7f8 fa98 	bl	8000bf4 <__addsf3>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	4682      	mov	sl, r0
 80086c8:	4680      	mov	r8, r0
 80086ca:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80086ce:	f340 8201 	ble.w	8008ad4 <__ieee754_powf+0x658>
 80086d2:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 80086d6:	f340 814f 	ble.w	8008978 <__ieee754_powf+0x4fc>
 80086da:	2100      	movs	r1, #0
 80086dc:	4628      	mov	r0, r5
 80086de:	f7f8 fd2f 	bl	8001140 <__aeabi_fcmplt>
 80086e2:	3800      	subs	r0, #0
 80086e4:	bf18      	it	ne
 80086e6:	2001      	movne	r0, #1
 80086e8:	e775      	b.n	80085d6 <__ieee754_powf+0x15a>
 80086ea:	bf00      	nop
 80086ec:	3f7ffff3 	.word	0x3f7ffff3
 80086f0:	3f800007 	.word	0x3f800007
 80086f4:	3fb8aa00 	.word	0x3fb8aa00
 80086f8:	36eca570 	.word	0x36eca570
 80086fc:	3eaaaaab 	.word	0x3eaaaaab
 8008700:	3fb8aa3b 	.word	0x3fb8aa3b
 8008704:	bf800000 	.word	0xbf800000
 8008708:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800870c:	f040 8111 	bne.w	8008932 <__ieee754_powf+0x4b6>
 8008710:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8008714:	f7f8 fb76 	bl	8000e04 <__aeabi_fmul>
 8008718:	f06f 0217 	mvn.w	r2, #23
 800871c:	4606      	mov	r6, r0
 800871e:	15f3      	asrs	r3, r6, #23
 8008720:	3b7f      	subs	r3, #127	; 0x7f
 8008722:	4413      	add	r3, r2
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	4b85      	ldr	r3, [pc, #532]	; (800893c <__ieee754_powf+0x4c0>)
 8008728:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800872c:	4298      	cmp	r0, r3
 800872e:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8008732:	dd08      	ble.n	8008746 <__ieee754_powf+0x2ca>
 8008734:	4b82      	ldr	r3, [pc, #520]	; (8008940 <__ieee754_powf+0x4c4>)
 8008736:	4298      	cmp	r0, r3
 8008738:	f340 80fd 	ble.w	8008936 <__ieee754_powf+0x4ba>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8008742:	3301      	adds	r3, #1
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	2300      	movs	r3, #0
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	9900      	ldr	r1, [sp, #0]
 800874c:	4a7d      	ldr	r2, [pc, #500]	; (8008944 <__ieee754_powf+0x4c8>)
 800874e:	4630      	mov	r0, r6
 8008750:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008754:	9603      	str	r6, [sp, #12]
 8008756:	4611      	mov	r1, r2
 8008758:	9205      	str	r2, [sp, #20]
 800875a:	f7f8 fa49 	bl	8000bf0 <__aeabi_fsub>
 800875e:	9a05      	ldr	r2, [sp, #20]
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	4683      	mov	fp, r0
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	9203      	str	r2, [sp, #12]
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	f7f8 fa42 	bl	8000bf4 <__addsf3>
 8008770:	4601      	mov	r1, r0
 8008772:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008776:	f7f8 fbf9 	bl	8000f6c <__aeabi_fdiv>
 800877a:	4682      	mov	sl, r0
 800877c:	4601      	mov	r1, r0
 800877e:	4658      	mov	r0, fp
 8008780:	f7f8 fb40 	bl	8000e04 <__aeabi_fmul>
 8008784:	1076      	asrs	r6, r6, #1
 8008786:	9b00      	ldr	r3, [sp, #0]
 8008788:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800878c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008790:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8008794:	f029 090f 	bic.w	r9, r9, #15
 8008798:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800879c:	4680      	mov	r8, r0
 800879e:	4631      	mov	r1, r6
 80087a0:	4648      	mov	r0, r9
 80087a2:	f7f8 fb2f 	bl	8000e04 <__aeabi_fmul>
 80087a6:	4601      	mov	r1, r0
 80087a8:	4658      	mov	r0, fp
 80087aa:	f7f8 fa21 	bl	8000bf0 <__aeabi_fsub>
 80087ae:	9a03      	ldr	r2, [sp, #12]
 80087b0:	4683      	mov	fp, r0
 80087b2:	4611      	mov	r1, r2
 80087b4:	4630      	mov	r0, r6
 80087b6:	f7f8 fa1b 	bl	8000bf0 <__aeabi_fsub>
 80087ba:	9b04      	ldr	r3, [sp, #16]
 80087bc:	4601      	mov	r1, r0
 80087be:	4618      	mov	r0, r3
 80087c0:	f7f8 fa16 	bl	8000bf0 <__aeabi_fsub>
 80087c4:	4649      	mov	r1, r9
 80087c6:	f7f8 fb1d 	bl	8000e04 <__aeabi_fmul>
 80087ca:	4601      	mov	r1, r0
 80087cc:	4658      	mov	r0, fp
 80087ce:	f7f8 fa0f 	bl	8000bf0 <__aeabi_fsub>
 80087d2:	4651      	mov	r1, sl
 80087d4:	f7f8 fb16 	bl	8000e04 <__aeabi_fmul>
 80087d8:	4641      	mov	r1, r8
 80087da:	4682      	mov	sl, r0
 80087dc:	4640      	mov	r0, r8
 80087de:	f7f8 fb11 	bl	8000e04 <__aeabi_fmul>
 80087e2:	4606      	mov	r6, r0
 80087e4:	4958      	ldr	r1, [pc, #352]	; (8008948 <__ieee754_powf+0x4cc>)
 80087e6:	f7f8 fb0d 	bl	8000e04 <__aeabi_fmul>
 80087ea:	4958      	ldr	r1, [pc, #352]	; (800894c <__ieee754_powf+0x4d0>)
 80087ec:	f7f8 fa02 	bl	8000bf4 <__addsf3>
 80087f0:	4631      	mov	r1, r6
 80087f2:	f7f8 fb07 	bl	8000e04 <__aeabi_fmul>
 80087f6:	4956      	ldr	r1, [pc, #344]	; (8008950 <__ieee754_powf+0x4d4>)
 80087f8:	f7f8 f9fc 	bl	8000bf4 <__addsf3>
 80087fc:	4631      	mov	r1, r6
 80087fe:	f7f8 fb01 	bl	8000e04 <__aeabi_fmul>
 8008802:	4954      	ldr	r1, [pc, #336]	; (8008954 <__ieee754_powf+0x4d8>)
 8008804:	f7f8 f9f6 	bl	8000bf4 <__addsf3>
 8008808:	4631      	mov	r1, r6
 800880a:	f7f8 fafb 	bl	8000e04 <__aeabi_fmul>
 800880e:	4952      	ldr	r1, [pc, #328]	; (8008958 <__ieee754_powf+0x4dc>)
 8008810:	f7f8 f9f0 	bl	8000bf4 <__addsf3>
 8008814:	4631      	mov	r1, r6
 8008816:	f7f8 faf5 	bl	8000e04 <__aeabi_fmul>
 800881a:	4950      	ldr	r1, [pc, #320]	; (800895c <__ieee754_powf+0x4e0>)
 800881c:	f7f8 f9ea 	bl	8000bf4 <__addsf3>
 8008820:	4631      	mov	r1, r6
 8008822:	4683      	mov	fp, r0
 8008824:	4630      	mov	r0, r6
 8008826:	f7f8 faed 	bl	8000e04 <__aeabi_fmul>
 800882a:	4601      	mov	r1, r0
 800882c:	4658      	mov	r0, fp
 800882e:	f7f8 fae9 	bl	8000e04 <__aeabi_fmul>
 8008832:	4606      	mov	r6, r0
 8008834:	4649      	mov	r1, r9
 8008836:	4640      	mov	r0, r8
 8008838:	f7f8 f9dc 	bl	8000bf4 <__addsf3>
 800883c:	4651      	mov	r1, sl
 800883e:	f7f8 fae1 	bl	8000e04 <__aeabi_fmul>
 8008842:	4631      	mov	r1, r6
 8008844:	f7f8 f9d6 	bl	8000bf4 <__addsf3>
 8008848:	4649      	mov	r1, r9
 800884a:	4683      	mov	fp, r0
 800884c:	4648      	mov	r0, r9
 800884e:	f7f8 fad9 	bl	8000e04 <__aeabi_fmul>
 8008852:	4943      	ldr	r1, [pc, #268]	; (8008960 <__ieee754_powf+0x4e4>)
 8008854:	9003      	str	r0, [sp, #12]
 8008856:	f7f8 f9cd 	bl	8000bf4 <__addsf3>
 800885a:	4659      	mov	r1, fp
 800885c:	f7f8 f9ca 	bl	8000bf4 <__addsf3>
 8008860:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008864:	f026 060f 	bic.w	r6, r6, #15
 8008868:	4631      	mov	r1, r6
 800886a:	4648      	mov	r0, r9
 800886c:	f7f8 faca 	bl	8000e04 <__aeabi_fmul>
 8008870:	493b      	ldr	r1, [pc, #236]	; (8008960 <__ieee754_powf+0x4e4>)
 8008872:	4681      	mov	r9, r0
 8008874:	4630      	mov	r0, r6
 8008876:	f7f8 f9bb 	bl	8000bf0 <__aeabi_fsub>
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	4619      	mov	r1, r3
 800887e:	f7f8 f9b7 	bl	8000bf0 <__aeabi_fsub>
 8008882:	4601      	mov	r1, r0
 8008884:	4658      	mov	r0, fp
 8008886:	f7f8 f9b3 	bl	8000bf0 <__aeabi_fsub>
 800888a:	4641      	mov	r1, r8
 800888c:	f7f8 faba 	bl	8000e04 <__aeabi_fmul>
 8008890:	4631      	mov	r1, r6
 8008892:	4680      	mov	r8, r0
 8008894:	4650      	mov	r0, sl
 8008896:	f7f8 fab5 	bl	8000e04 <__aeabi_fmul>
 800889a:	4601      	mov	r1, r0
 800889c:	4640      	mov	r0, r8
 800889e:	f7f8 f9a9 	bl	8000bf4 <__addsf3>
 80088a2:	4682      	mov	sl, r0
 80088a4:	4601      	mov	r1, r0
 80088a6:	4648      	mov	r0, r9
 80088a8:	f7f8 f9a4 	bl	8000bf4 <__addsf3>
 80088ac:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80088b0:	f026 060f 	bic.w	r6, r6, #15
 80088b4:	4630      	mov	r0, r6
 80088b6:	492b      	ldr	r1, [pc, #172]	; (8008964 <__ieee754_powf+0x4e8>)
 80088b8:	f7f8 faa4 	bl	8000e04 <__aeabi_fmul>
 80088bc:	4649      	mov	r1, r9
 80088be:	4680      	mov	r8, r0
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7f8 f995 	bl	8000bf0 <__aeabi_fsub>
 80088c6:	4601      	mov	r1, r0
 80088c8:	4650      	mov	r0, sl
 80088ca:	f7f8 f991 	bl	8000bf0 <__aeabi_fsub>
 80088ce:	4926      	ldr	r1, [pc, #152]	; (8008968 <__ieee754_powf+0x4ec>)
 80088d0:	f7f8 fa98 	bl	8000e04 <__aeabi_fmul>
 80088d4:	4925      	ldr	r1, [pc, #148]	; (800896c <__ieee754_powf+0x4f0>)
 80088d6:	4681      	mov	r9, r0
 80088d8:	4630      	mov	r0, r6
 80088da:	f7f8 fa93 	bl	8000e04 <__aeabi_fmul>
 80088de:	4601      	mov	r1, r0
 80088e0:	4648      	mov	r0, r9
 80088e2:	f7f8 f987 	bl	8000bf4 <__addsf3>
 80088e6:	4b22      	ldr	r3, [pc, #136]	; (8008970 <__ieee754_powf+0x4f4>)
 80088e8:	9a00      	ldr	r2, [sp, #0]
 80088ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088ee:	f7f8 f981 	bl	8000bf4 <__addsf3>
 80088f2:	4606      	mov	r6, r0
 80088f4:	9801      	ldr	r0, [sp, #4]
 80088f6:	f7f8 fa31 	bl	8000d5c <__aeabi_i2f>
 80088fa:	4682      	mov	sl, r0
 80088fc:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <__ieee754_powf+0x4f8>)
 80088fe:	9a00      	ldr	r2, [sp, #0]
 8008900:	4631      	mov	r1, r6
 8008902:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8008906:	4640      	mov	r0, r8
 8008908:	f7f8 f974 	bl	8000bf4 <__addsf3>
 800890c:	4659      	mov	r1, fp
 800890e:	f7f8 f971 	bl	8000bf4 <__addsf3>
 8008912:	4651      	mov	r1, sl
 8008914:	f7f8 f96e 	bl	8000bf4 <__addsf3>
 8008918:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800891c:	f029 090f 	bic.w	r9, r9, #15
 8008920:	4651      	mov	r1, sl
 8008922:	4648      	mov	r0, r9
 8008924:	f7f8 f964 	bl	8000bf0 <__aeabi_fsub>
 8008928:	4659      	mov	r1, fp
 800892a:	f7f8 f961 	bl	8000bf0 <__aeabi_fsub>
 800892e:	4641      	mov	r1, r8
 8008930:	e69b      	b.n	800866a <__ieee754_powf+0x1ee>
 8008932:	2200      	movs	r2, #0
 8008934:	e6f3      	b.n	800871e <__ieee754_powf+0x2a2>
 8008936:	2301      	movs	r3, #1
 8008938:	e706      	b.n	8008748 <__ieee754_powf+0x2cc>
 800893a:	bf00      	nop
 800893c:	001cc471 	.word	0x001cc471
 8008940:	005db3d6 	.word	0x005db3d6
 8008944:	08009ad4 	.word	0x08009ad4
 8008948:	3e53f142 	.word	0x3e53f142
 800894c:	3e6c3255 	.word	0x3e6c3255
 8008950:	3e8ba305 	.word	0x3e8ba305
 8008954:	3eaaaaab 	.word	0x3eaaaaab
 8008958:	3edb6db7 	.word	0x3edb6db7
 800895c:	3f19999a 	.word	0x3f19999a
 8008960:	40400000 	.word	0x40400000
 8008964:	3f763800 	.word	0x3f763800
 8008968:	3f76384f 	.word	0x3f76384f
 800896c:	369dc3a0 	.word	0x369dc3a0
 8008970:	08009ae4 	.word	0x08009ae4
 8008974:	08009adc 	.word	0x08009adc
 8008978:	f040 80c2 	bne.w	8008b00 <__ieee754_powf+0x684>
 800897c:	4968      	ldr	r1, [pc, #416]	; (8008b20 <__ieee754_powf+0x6a4>)
 800897e:	4630      	mov	r0, r6
 8008980:	f7f8 f938 	bl	8000bf4 <__addsf3>
 8008984:	4639      	mov	r1, r7
 8008986:	4681      	mov	r9, r0
 8008988:	4650      	mov	r0, sl
 800898a:	f7f8 f931 	bl	8000bf0 <__aeabi_fsub>
 800898e:	4601      	mov	r1, r0
 8008990:	4648      	mov	r0, r9
 8008992:	f7f8 fbf3 	bl	800117c <__aeabi_fcmpgt>
 8008996:	2800      	cmp	r0, #0
 8008998:	f47f ae9f 	bne.w	80086da <__ieee754_powf+0x25e>
 800899c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80089a0:	15e4      	asrs	r4, r4, #23
 80089a2:	3c7e      	subs	r4, #126	; 0x7e
 80089a4:	4123      	asrs	r3, r4
 80089a6:	4443      	add	r3, r8
 80089a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80089ac:	495d      	ldr	r1, [pc, #372]	; (8008b24 <__ieee754_powf+0x6a8>)
 80089ae:	3a7f      	subs	r2, #127	; 0x7f
 80089b0:	f3c3 0416 	ubfx	r4, r3, #0, #23
 80089b4:	4111      	asrs	r1, r2
 80089b6:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80089ba:	f1c2 0217 	rsb	r2, r2, #23
 80089be:	4114      	asrs	r4, r2
 80089c0:	f1b8 0f00 	cmp.w	r8, #0
 80089c4:	4638      	mov	r0, r7
 80089c6:	ea23 0101 	bic.w	r1, r3, r1
 80089ca:	bfb8      	it	lt
 80089cc:	4264      	neglt	r4, r4
 80089ce:	f7f8 f90f 	bl	8000bf0 <__aeabi_fsub>
 80089d2:	4681      	mov	r9, r0
 80089d4:	4631      	mov	r1, r6
 80089d6:	4648      	mov	r0, r9
 80089d8:	f7f8 f90c 	bl	8000bf4 <__addsf3>
 80089dc:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 80089e0:	f027 070f 	bic.w	r7, r7, #15
 80089e4:	4638      	mov	r0, r7
 80089e6:	4950      	ldr	r1, [pc, #320]	; (8008b28 <__ieee754_powf+0x6ac>)
 80089e8:	f7f8 fa0c 	bl	8000e04 <__aeabi_fmul>
 80089ec:	4649      	mov	r1, r9
 80089ee:	4680      	mov	r8, r0
 80089f0:	4638      	mov	r0, r7
 80089f2:	f7f8 f8fd 	bl	8000bf0 <__aeabi_fsub>
 80089f6:	4601      	mov	r1, r0
 80089f8:	4630      	mov	r0, r6
 80089fa:	f7f8 f8f9 	bl	8000bf0 <__aeabi_fsub>
 80089fe:	494b      	ldr	r1, [pc, #300]	; (8008b2c <__ieee754_powf+0x6b0>)
 8008a00:	f7f8 fa00 	bl	8000e04 <__aeabi_fmul>
 8008a04:	494a      	ldr	r1, [pc, #296]	; (8008b30 <__ieee754_powf+0x6b4>)
 8008a06:	4606      	mov	r6, r0
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7f8 f9fb 	bl	8000e04 <__aeabi_fmul>
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7f8 f8ef 	bl	8000bf4 <__addsf3>
 8008a16:	4607      	mov	r7, r0
 8008a18:	4601      	mov	r1, r0
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	f7f8 f8ea 	bl	8000bf4 <__addsf3>
 8008a20:	4641      	mov	r1, r8
 8008a22:	4606      	mov	r6, r0
 8008a24:	f7f8 f8e4 	bl	8000bf0 <__aeabi_fsub>
 8008a28:	4601      	mov	r1, r0
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7f8 f8e0 	bl	8000bf0 <__aeabi_fsub>
 8008a30:	4631      	mov	r1, r6
 8008a32:	4680      	mov	r8, r0
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7f8 f9e5 	bl	8000e04 <__aeabi_fmul>
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	493d      	ldr	r1, [pc, #244]	; (8008b34 <__ieee754_powf+0x6b8>)
 8008a3e:	f7f8 f9e1 	bl	8000e04 <__aeabi_fmul>
 8008a42:	493d      	ldr	r1, [pc, #244]	; (8008b38 <__ieee754_powf+0x6bc>)
 8008a44:	f7f8 f8d4 	bl	8000bf0 <__aeabi_fsub>
 8008a48:	4639      	mov	r1, r7
 8008a4a:	f7f8 f9db 	bl	8000e04 <__aeabi_fmul>
 8008a4e:	493b      	ldr	r1, [pc, #236]	; (8008b3c <__ieee754_powf+0x6c0>)
 8008a50:	f7f8 f8d0 	bl	8000bf4 <__addsf3>
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f8 f9d5 	bl	8000e04 <__aeabi_fmul>
 8008a5a:	4939      	ldr	r1, [pc, #228]	; (8008b40 <__ieee754_powf+0x6c4>)
 8008a5c:	f7f8 f8c8 	bl	8000bf0 <__aeabi_fsub>
 8008a60:	4639      	mov	r1, r7
 8008a62:	f7f8 f9cf 	bl	8000e04 <__aeabi_fmul>
 8008a66:	4937      	ldr	r1, [pc, #220]	; (8008b44 <__ieee754_powf+0x6c8>)
 8008a68:	f7f8 f8c4 	bl	8000bf4 <__addsf3>
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	f7f8 f9c9 	bl	8000e04 <__aeabi_fmul>
 8008a72:	4601      	mov	r1, r0
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7f8 f8bb 	bl	8000bf0 <__aeabi_fsub>
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7f8 f9c0 	bl	8000e04 <__aeabi_fmul>
 8008a84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008a88:	4681      	mov	r9, r0
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	f7f8 f8b0 	bl	8000bf0 <__aeabi_fsub>
 8008a90:	4601      	mov	r1, r0
 8008a92:	4648      	mov	r0, r9
 8008a94:	f7f8 fa6a 	bl	8000f6c <__aeabi_fdiv>
 8008a98:	4641      	mov	r1, r8
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7f8 f9b1 	bl	8000e04 <__aeabi_fmul>
 8008aa2:	4641      	mov	r1, r8
 8008aa4:	f7f8 f8a6 	bl	8000bf4 <__addsf3>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7f8 f8a0 	bl	8000bf0 <__aeabi_fsub>
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	f7f8 f89d 	bl	8000bf0 <__aeabi_fsub>
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008abc:	f7f8 f898 	bl	8000bf0 <__aeabi_fsub>
 8008ac0:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008ac4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ac8:	da20      	bge.n	8008b0c <__ieee754_powf+0x690>
 8008aca:	4621      	mov	r1, r4
 8008acc:	f000 f8bc 	bl	8008c48 <scalbnf>
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	e53d      	b.n	8008550 <__ieee754_powf+0xd4>
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	; (8008b48 <__ieee754_powf+0x6cc>)
 8008ad6:	429c      	cmp	r4, r3
 8008ad8:	dd07      	ble.n	8008aea <__ieee754_powf+0x66e>
 8008ada:	2100      	movs	r1, #0
 8008adc:	4628      	mov	r0, r5
 8008ade:	f7f8 fb2f 	bl	8001140 <__aeabi_fcmplt>
 8008ae2:	3800      	subs	r0, #0
 8008ae4:	bf18      	it	ne
 8008ae6:	2001      	movne	r0, #1
 8008ae8:	e580      	b.n	80085ec <__ieee754_powf+0x170>
 8008aea:	d109      	bne.n	8008b00 <__ieee754_powf+0x684>
 8008aec:	4639      	mov	r1, r7
 8008aee:	f7f8 f87f 	bl	8000bf0 <__aeabi_fsub>
 8008af2:	4631      	mov	r1, r6
 8008af4:	f7f8 fb38 	bl	8001168 <__aeabi_fcmpge>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	f43f af4f 	beq.w	800899c <__ieee754_powf+0x520>
 8008afe:	e7ec      	b.n	8008ada <__ieee754_powf+0x65e>
 8008b00:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008b04:	f73f af4a 	bgt.w	800899c <__ieee754_powf+0x520>
 8008b08:	2400      	movs	r4, #0
 8008b0a:	e763      	b.n	80089d4 <__ieee754_powf+0x558>
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	e7df      	b.n	8008ad0 <__ieee754_powf+0x654>
 8008b10:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008b14:	e50b      	b.n	800852e <__ieee754_powf+0xb2>
 8008b16:	2100      	movs	r1, #0
 8008b18:	e509      	b.n	800852e <__ieee754_powf+0xb2>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	e4ef      	b.n	80084fe <__ieee754_powf+0x82>
 8008b1e:	bf00      	nop
 8008b20:	3338aa3c 	.word	0x3338aa3c
 8008b24:	007fffff 	.word	0x007fffff
 8008b28:	3f317200 	.word	0x3f317200
 8008b2c:	3f317218 	.word	0x3f317218
 8008b30:	35bfbe8c 	.word	0x35bfbe8c
 8008b34:	3331bb4c 	.word	0x3331bb4c
 8008b38:	35ddea0e 	.word	0x35ddea0e
 8008b3c:	388ab355 	.word	0x388ab355
 8008b40:	3b360b61 	.word	0x3b360b61
 8008b44:	3e2aaaab 	.word	0x3e2aaaab
 8008b48:	43160000 	.word	0x43160000

08008b4c <__ieee754_sqrtf>:
 8008b4c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008b50:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4603      	mov	r3, r0
 8008b58:	4604      	mov	r4, r0
 8008b5a:	d309      	bcc.n	8008b70 <__ieee754_sqrtf+0x24>
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	f7f8 f951 	bl	8000e04 <__aeabi_fmul>
 8008b62:	4601      	mov	r1, r0
 8008b64:	4620      	mov	r0, r4
 8008b66:	f7f8 f845 	bl	8000bf4 <__addsf3>
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	d0fb      	beq.n	8008b6c <__ieee754_sqrtf+0x20>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	da06      	bge.n	8008b86 <__ieee754_sqrtf+0x3a>
 8008b78:	4601      	mov	r1, r0
 8008b7a:	f7f8 f839 	bl	8000bf0 <__aeabi_fsub>
 8008b7e:	4601      	mov	r1, r0
 8008b80:	f7f8 f9f4 	bl	8000f6c <__aeabi_fdiv>
 8008b84:	e7f1      	b.n	8008b6a <__ieee754_sqrtf+0x1e>
 8008b86:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008b8a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008b8e:	d029      	beq.n	8008be4 <__ieee754_sqrtf+0x98>
 8008b90:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008b94:	07cb      	lsls	r3, r1, #31
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008b9e:	f04f 0419 	mov.w	r4, #25
 8008ba2:	461e      	mov	r6, r3
 8008ba4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008ba8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008bac:	bf58      	it	pl
 8008bae:	0052      	lslpl	r2, r2, #1
 8008bb0:	1040      	asrs	r0, r0, #1
 8008bb2:	0052      	lsls	r2, r2, #1
 8008bb4:	1875      	adds	r5, r6, r1
 8008bb6:	4295      	cmp	r5, r2
 8008bb8:	bfde      	ittt	le
 8008bba:	186e      	addle	r6, r5, r1
 8008bbc:	1b52      	suble	r2, r2, r5
 8008bbe:	185b      	addle	r3, r3, r1
 8008bc0:	3c01      	subs	r4, #1
 8008bc2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008bc6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008bca:	d1f3      	bne.n	8008bb4 <__ieee754_sqrtf+0x68>
 8008bcc:	b112      	cbz	r2, 8008bd4 <__ieee754_sqrtf+0x88>
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	105c      	asrs	r4, r3, #1
 8008bd6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008bda:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008bde:	e7c5      	b.n	8008b6c <__ieee754_sqrtf+0x20>
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	3201      	adds	r2, #1
 8008be4:	0218      	lsls	r0, r3, #8
 8008be6:	d5fb      	bpl.n	8008be0 <__ieee754_sqrtf+0x94>
 8008be8:	3a01      	subs	r2, #1
 8008bea:	1a89      	subs	r1, r1, r2
 8008bec:	e7d0      	b.n	8008b90 <__ieee754_sqrtf+0x44>

08008bee <with_errnof>:
 8008bee:	b538      	push	{r3, r4, r5, lr}
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	f7fc fcda 	bl	80055ac <__errno>
 8008bf8:	6005      	str	r5, [r0, #0]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	bd38      	pop	{r3, r4, r5, pc}

08008bfe <xflowf>:
 8008bfe:	b508      	push	{r3, lr}
 8008c00:	b140      	cbz	r0, 8008c14 <xflowf+0x16>
 8008c02:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008c06:	f7f8 f8fd 	bl	8000e04 <__aeabi_fmul>
 8008c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c0e:	2122      	movs	r1, #34	; 0x22
 8008c10:	f7ff bfed 	b.w	8008bee <with_errnof>
 8008c14:	4608      	mov	r0, r1
 8008c16:	e7f6      	b.n	8008c06 <xflowf+0x8>

08008c18 <__math_uflowf>:
 8008c18:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008c1c:	f7ff bfef 	b.w	8008bfe <xflowf>

08008c20 <__math_oflowf>:
 8008c20:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8008c24:	f7ff bfeb 	b.w	8008bfe <xflowf>

08008c28 <fabsf>:
 8008c28:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008c2c:	4770      	bx	lr

08008c2e <finitef>:
 8008c2e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008c32:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008c36:	bfac      	ite	ge
 8008c38:	2000      	movge	r0, #0
 8008c3a:	2001      	movlt	r0, #1
 8008c3c:	4770      	bx	lr
	...

08008c40 <nanf>:
 8008c40:	4800      	ldr	r0, [pc, #0]	; (8008c44 <nanf+0x4>)
 8008c42:	4770      	bx	lr
 8008c44:	7fc00000 	.word	0x7fc00000

08008c48 <scalbnf>:
 8008c48:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4603      	mov	r3, r0
 8008c50:	460d      	mov	r5, r1
 8008c52:	4604      	mov	r4, r0
 8008c54:	d02a      	beq.n	8008cac <scalbnf+0x64>
 8008c56:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008c5a:	d304      	bcc.n	8008c66 <scalbnf+0x1e>
 8008c5c:	4601      	mov	r1, r0
 8008c5e:	f7f7 ffc9 	bl	8000bf4 <__addsf3>
 8008c62:	4603      	mov	r3, r0
 8008c64:	e022      	b.n	8008cac <scalbnf+0x64>
 8008c66:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8008c6a:	d117      	bne.n	8008c9c <scalbnf+0x54>
 8008c6c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008c70:	f7f8 f8c8 	bl	8000e04 <__aeabi_fmul>
 8008c74:	4a17      	ldr	r2, [pc, #92]	; (8008cd4 <scalbnf+0x8c>)
 8008c76:	4603      	mov	r3, r0
 8008c78:	4295      	cmp	r5, r2
 8008c7a:	db0b      	blt.n	8008c94 <scalbnf+0x4c>
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008c82:	3a19      	subs	r2, #25
 8008c84:	442a      	add	r2, r5
 8008c86:	2afe      	cmp	r2, #254	; 0xfe
 8008c88:	dd0a      	ble.n	8008ca0 <scalbnf+0x58>
 8008c8a:	4913      	ldr	r1, [pc, #76]	; (8008cd8 <scalbnf+0x90>)
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f361 001e 	bfi	r0, r1, #0, #31
 8008c92:	e000      	b.n	8008c96 <scalbnf+0x4e>
 8008c94:	4911      	ldr	r1, [pc, #68]	; (8008cdc <scalbnf+0x94>)
 8008c96:	f7f8 f8b5 	bl	8000e04 <__aeabi_fmul>
 8008c9a:	e7e2      	b.n	8008c62 <scalbnf+0x1a>
 8008c9c:	0dd2      	lsrs	r2, r2, #23
 8008c9e:	e7f1      	b.n	8008c84 <scalbnf+0x3c>
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	dd05      	ble.n	8008cb0 <scalbnf+0x68>
 8008ca4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8008ca8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8008cac:	4618      	mov	r0, r3
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	f112 0f16 	cmn.w	r2, #22
 8008cb4:	da05      	bge.n	8008cc2 <scalbnf+0x7a>
 8008cb6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008cba:	4295      	cmp	r5, r2
 8008cbc:	dce5      	bgt.n	8008c8a <scalbnf+0x42>
 8008cbe:	4907      	ldr	r1, [pc, #28]	; (8008cdc <scalbnf+0x94>)
 8008cc0:	e7e4      	b.n	8008c8c <scalbnf+0x44>
 8008cc2:	3219      	adds	r2, #25
 8008cc4:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008cc8:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8008ccc:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8008cd0:	e7e1      	b.n	8008c96 <scalbnf+0x4e>
 8008cd2:	bf00      	nop
 8008cd4:	ffff3cb0 	.word	0xffff3cb0
 8008cd8:	7149f2ca 	.word	0x7149f2ca
 8008cdc:	0da24260 	.word	0x0da24260

08008ce0 <__ieee754_logf>:
 8008ce0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4601      	mov	r1, r0
 8008cea:	4603      	mov	r3, r0
 8008cec:	d106      	bne.n	8008cfc <__ieee754_logf+0x1c>
 8008cee:	2100      	movs	r1, #0
 8008cf0:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8008cf4:	f7f8 f93a 	bl	8000f6c <__aeabi_fdiv>
 8008cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	da03      	bge.n	8008d08 <__ieee754_logf+0x28>
 8008d00:	f7f7 ff76 	bl	8000bf0 <__aeabi_fsub>
 8008d04:	2100      	movs	r1, #0
 8008d06:	e7f5      	b.n	8008cf4 <__ieee754_logf+0x14>
 8008d08:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008d0c:	db02      	blt.n	8008d14 <__ieee754_logf+0x34>
 8008d0e:	f7f7 ff71 	bl	8000bf4 <__addsf3>
 8008d12:	e7f1      	b.n	8008cf8 <__ieee754_logf+0x18>
 8008d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008d18:	da35      	bge.n	8008d86 <__ieee754_logf+0xa6>
 8008d1a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008d1e:	f7f8 f871 	bl	8000e04 <__aeabi_fmul>
 8008d22:	f06f 0218 	mvn.w	r2, #24
 8008d26:	4603      	mov	r3, r0
 8008d28:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008d2c:	15de      	asrs	r6, r3, #23
 8008d2e:	4b71      	ldr	r3, [pc, #452]	; (8008ef4 <__ieee754_logf+0x214>)
 8008d30:	3e7f      	subs	r6, #127	; 0x7f
 8008d32:	4423      	add	r3, r4
 8008d34:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8008d38:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 8008d3c:	4416      	add	r6, r2
 8008d3e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d42:	4320      	orrs	r0, r4
 8008d44:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8008d48:	f7f7 ff52 	bl	8000bf0 <__aeabi_fsub>
 8008d4c:	4b6a      	ldr	r3, [pc, #424]	; (8008ef8 <__ieee754_logf+0x218>)
 8008d4e:	f104 020f 	add.w	r2, r4, #15
 8008d52:	4013      	ands	r3, r2
 8008d54:	4605      	mov	r5, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d13a      	bne.n	8008dd0 <__ieee754_logf+0xf0>
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	f7f8 f9e6 	bl	800112c <__aeabi_fcmpeq>
 8008d60:	b198      	cbz	r0, 8008d8a <__ieee754_logf+0xaa>
 8008d62:	2e00      	cmp	r6, #0
 8008d64:	f000 80c4 	beq.w	8008ef0 <__ieee754_logf+0x210>
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7f7 fff7 	bl	8000d5c <__aeabi_i2f>
 8008d6e:	4963      	ldr	r1, [pc, #396]	; (8008efc <__ieee754_logf+0x21c>)
 8008d70:	4605      	mov	r5, r0
 8008d72:	f7f8 f847 	bl	8000e04 <__aeabi_fmul>
 8008d76:	4962      	ldr	r1, [pc, #392]	; (8008f00 <__ieee754_logf+0x220>)
 8008d78:	4604      	mov	r4, r0
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f7f8 f842 	bl	8000e04 <__aeabi_fmul>
 8008d80:	4601      	mov	r1, r0
 8008d82:	4620      	mov	r0, r4
 8008d84:	e7c3      	b.n	8008d0e <__ieee754_logf+0x2e>
 8008d86:	2200      	movs	r2, #0
 8008d88:	e7ce      	b.n	8008d28 <__ieee754_logf+0x48>
 8008d8a:	495e      	ldr	r1, [pc, #376]	; (8008f04 <__ieee754_logf+0x224>)
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f7f8 f839 	bl	8000e04 <__aeabi_fmul>
 8008d92:	4601      	mov	r1, r0
 8008d94:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008d98:	f7f7 ff2a 	bl	8000bf0 <__aeabi_fsub>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4628      	mov	r0, r5
 8008da2:	f7f8 f82f 	bl	8000e04 <__aeabi_fmul>
 8008da6:	4601      	mov	r1, r0
 8008da8:	4620      	mov	r0, r4
 8008daa:	f7f8 f82b 	bl	8000e04 <__aeabi_fmul>
 8008dae:	4604      	mov	r4, r0
 8008db0:	b90e      	cbnz	r6, 8008db6 <__ieee754_logf+0xd6>
 8008db2:	4621      	mov	r1, r4
 8008db4:	e06f      	b.n	8008e96 <__ieee754_logf+0x1b6>
 8008db6:	4630      	mov	r0, r6
 8008db8:	f7f7 ffd0 	bl	8000d5c <__aeabi_i2f>
 8008dbc:	494f      	ldr	r1, [pc, #316]	; (8008efc <__ieee754_logf+0x21c>)
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	f7f8 f820 	bl	8000e04 <__aeabi_fmul>
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	494d      	ldr	r1, [pc, #308]	; (8008f00 <__ieee754_logf+0x220>)
 8008dca:	f7f8 f81b 	bl	8000e04 <__aeabi_fmul>
 8008dce:	e072      	b.n	8008eb6 <__ieee754_logf+0x1d6>
 8008dd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008dd4:	f7f7 ff0e 	bl	8000bf4 <__addsf3>
 8008dd8:	4601      	mov	r1, r0
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f7f8 f8c6 	bl	8000f6c <__aeabi_fdiv>
 8008de0:	4681      	mov	r9, r0
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7f7 ffba 	bl	8000d5c <__aeabi_i2f>
 8008de8:	4649      	mov	r1, r9
 8008dea:	4680      	mov	r8, r0
 8008dec:	4648      	mov	r0, r9
 8008dee:	f7f8 f809 	bl	8000e04 <__aeabi_fmul>
 8008df2:	4601      	mov	r1, r0
 8008df4:	4683      	mov	fp, r0
 8008df6:	f7f8 f805 	bl	8000e04 <__aeabi_fmul>
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	4942      	ldr	r1, [pc, #264]	; (8008f08 <__ieee754_logf+0x228>)
 8008dfe:	f7f8 f801 	bl	8000e04 <__aeabi_fmul>
 8008e02:	4942      	ldr	r1, [pc, #264]	; (8008f0c <__ieee754_logf+0x22c>)
 8008e04:	f7f7 fef6 	bl	8000bf4 <__addsf3>
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 fffb 	bl	8000e04 <__aeabi_fmul>
 8008e0e:	4940      	ldr	r1, [pc, #256]	; (8008f10 <__ieee754_logf+0x230>)
 8008e10:	f7f7 fef0 	bl	8000bf4 <__addsf3>
 8008e14:	4639      	mov	r1, r7
 8008e16:	f7f7 fff5 	bl	8000e04 <__aeabi_fmul>
 8008e1a:	493e      	ldr	r1, [pc, #248]	; (8008f14 <__ieee754_logf+0x234>)
 8008e1c:	f7f7 feea 	bl	8000bf4 <__addsf3>
 8008e20:	4659      	mov	r1, fp
 8008e22:	f7f7 ffef 	bl	8000e04 <__aeabi_fmul>
 8008e26:	493c      	ldr	r1, [pc, #240]	; (8008f18 <__ieee754_logf+0x238>)
 8008e28:	4683      	mov	fp, r0
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f7f7 ffea 	bl	8000e04 <__aeabi_fmul>
 8008e30:	493a      	ldr	r1, [pc, #232]	; (8008f1c <__ieee754_logf+0x23c>)
 8008e32:	f7f7 fedf 	bl	8000bf4 <__addsf3>
 8008e36:	4639      	mov	r1, r7
 8008e38:	f7f7 ffe4 	bl	8000e04 <__aeabi_fmul>
 8008e3c:	4938      	ldr	r1, [pc, #224]	; (8008f20 <__ieee754_logf+0x240>)
 8008e3e:	f7f7 fed9 	bl	8000bf4 <__addsf3>
 8008e42:	4639      	mov	r1, r7
 8008e44:	f7f7 ffde 	bl	8000e04 <__aeabi_fmul>
 8008e48:	4601      	mov	r1, r0
 8008e4a:	4658      	mov	r0, fp
 8008e4c:	f7f7 fed2 	bl	8000bf4 <__addsf3>
 8008e50:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8008f24 <__ieee754_logf+0x244>
 8008e54:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 8008e58:	44a2      	add	sl, r4
 8008e5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008e5e:	ea43 030a 	orr.w	r3, r3, sl
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	4607      	mov	r7, r0
 8008e66:	dd30      	ble.n	8008eca <__ieee754_logf+0x1ea>
 8008e68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f7f7 ffc9 	bl	8000e04 <__aeabi_fmul>
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 ffc6 	bl	8000e04 <__aeabi_fmul>
 8008e78:	4601      	mov	r1, r0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f7f7 feb9 	bl	8000bf4 <__addsf3>
 8008e82:	4649      	mov	r1, r9
 8008e84:	f7f7 ffbe 	bl	8000e04 <__aeabi_fmul>
 8008e88:	4607      	mov	r7, r0
 8008e8a:	b946      	cbnz	r6, 8008e9e <__ieee754_logf+0x1be>
 8008e8c:	4601      	mov	r1, r0
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7f7 feae 	bl	8000bf0 <__aeabi_fsub>
 8008e94:	4601      	mov	r1, r0
 8008e96:	4628      	mov	r0, r5
 8008e98:	f7f7 feaa 	bl	8000bf0 <__aeabi_fsub>
 8008e9c:	e72c      	b.n	8008cf8 <__ieee754_logf+0x18>
 8008e9e:	4917      	ldr	r1, [pc, #92]	; (8008efc <__ieee754_logf+0x21c>)
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	f7f7 ffaf 	bl	8000e04 <__aeabi_fmul>
 8008ea6:	4916      	ldr	r1, [pc, #88]	; (8008f00 <__ieee754_logf+0x220>)
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	4640      	mov	r0, r8
 8008eac:	f7f7 ffaa 	bl	8000e04 <__aeabi_fmul>
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	f7f7 fe9f 	bl	8000bf4 <__addsf3>
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7f7 fe99 	bl	8000bf0 <__aeabi_fsub>
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	f7f7 fe96 	bl	8000bf0 <__aeabi_fsub>
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	e7e6      	b.n	8008e98 <__ieee754_logf+0x1b8>
 8008eca:	4601      	mov	r1, r0
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f7f7 fe8f 	bl	8000bf0 <__aeabi_fsub>
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	f7f7 ff96 	bl	8000e04 <__aeabi_fmul>
 8008ed8:	4604      	mov	r4, r0
 8008eda:	2e00      	cmp	r6, #0
 8008edc:	f43f af69 	beq.w	8008db2 <__ieee754_logf+0xd2>
 8008ee0:	4906      	ldr	r1, [pc, #24]	; (8008efc <__ieee754_logf+0x21c>)
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7f7 ff8e 	bl	8000e04 <__aeabi_fmul>
 8008ee8:	4905      	ldr	r1, [pc, #20]	; (8008f00 <__ieee754_logf+0x220>)
 8008eea:	4606      	mov	r6, r0
 8008eec:	4640      	mov	r0, r8
 8008eee:	e76c      	b.n	8008dca <__ieee754_logf+0xea>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e701      	b.n	8008cf8 <__ieee754_logf+0x18>
 8008ef4:	004afb20 	.word	0x004afb20
 8008ef8:	007ffff0 	.word	0x007ffff0
 8008efc:	3f317180 	.word	0x3f317180
 8008f00:	3717f7d1 	.word	0x3717f7d1
 8008f04:	3eaaaaab 	.word	0x3eaaaaab
 8008f08:	3e178897 	.word	0x3e178897
 8008f0c:	3e3a3325 	.word	0x3e3a3325
 8008f10:	3e924925 	.word	0x3e924925
 8008f14:	3f2aaaab 	.word	0x3f2aaaab
 8008f18:	3e1cd04f 	.word	0x3e1cd04f
 8008f1c:	3e638e29 	.word	0x3e638e29
 8008f20:	3ecccccd 	.word	0x3ecccccd
 8008f24:	ffcf5c30 	.word	0xffcf5c30

08008f28 <_init>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	bf00      	nop
 8008f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2e:	bc08      	pop	{r3}
 8008f30:	469e      	mov	lr, r3
 8008f32:	4770      	bx	lr

08008f34 <_fini>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr


raydio103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e34  08005e34  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08005e34  08005e34  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e34  08005e34  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08005e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bec  20000128  08005f64  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d14  08005f64  00021d14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c15e  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004654  00000000  00000000  0003c2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00040908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e28  00000000  00000000  000419e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b37d  00000000  00000000  00043810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffbb  00000000  00000000  0005eb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009601f  00000000  00000000  0007eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00114b67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  00114c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00012166  00000000  00000000  00118858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000128 	.word	0x20000128
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c7c 	.word	0x08005c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000012c 	.word	0x2000012c
 8000148:	08005c7c 	.word	0x08005c7c

0800014c <arm_bitreversal_32>:
 800014c:	1c4b      	adds	r3, r1, #1
 800014e:	2b01      	cmp	r3, #1
 8000150:	bf98      	it	ls
 8000152:	4770      	bxls	lr
 8000154:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000158:	1c91      	adds	r1, r2, #2
 800015a:	089b      	lsrs	r3, r3, #2

0800015c <arm_bitreversal_32_0>:
 800015c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000160:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000164:	880a      	ldrh	r2, [r1, #0]
 8000166:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800016a:	4480      	add	r8, r0
 800016c:	4481      	add	r9, r0
 800016e:	4402      	add	r2, r0
 8000170:	4484      	add	ip, r0
 8000172:	f8d9 7000 	ldr.w	r7, [r9]
 8000176:	f8d8 6000 	ldr.w	r6, [r8]
 800017a:	6815      	ldr	r5, [r2, #0]
 800017c:	f8dc 4000 	ldr.w	r4, [ip]
 8000180:	f8c9 6000 	str.w	r6, [r9]
 8000184:	f8c8 7000 	str.w	r7, [r8]
 8000188:	f8cc 5000 	str.w	r5, [ip]
 800018c:	6014      	str	r4, [r2, #0]
 800018e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000192:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000196:	6855      	ldr	r5, [r2, #4]
 8000198:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800019c:	f8c9 6004 	str.w	r6, [r9, #4]
 80001a0:	f8c8 7004 	str.w	r7, [r8, #4]
 80001a4:	f8cc 5004 	str.w	r5, [ip, #4]
 80001a8:	6054      	str	r4, [r2, #4]
 80001aa:	3108      	adds	r1, #8
 80001ac:	3b01      	subs	r3, #1
 80001ae:	d1d5      	bne.n	800015c <arm_bitreversal_32_0>
 80001b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80001b4:	4770      	bx	lr

080001b6 <arm_bitreversal_16>:
 80001b6:	1c4b      	adds	r3, r1, #1
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	bf98      	it	ls
 80001bc:	4770      	bxls	lr
 80001be:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001c2:	1c91      	adds	r1, r2, #2
 80001c4:	089b      	lsrs	r3, r3, #2

080001c6 <arm_bitreversal_16_0>:
 80001c6:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ca:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001ce:	880a      	ldrh	r2, [r1, #0]
 80001d0:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001d4:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80001d8:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80001dc:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80001e0:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80001e4:	f8d9 7000 	ldr.w	r7, [r9]
 80001e8:	f8d8 6000 	ldr.w	r6, [r8]
 80001ec:	6815      	ldr	r5, [r2, #0]
 80001ee:	f8dc 4000 	ldr.w	r4, [ip]
 80001f2:	f8c9 6000 	str.w	r6, [r9]
 80001f6:	f8c8 7000 	str.w	r7, [r8]
 80001fa:	f8cc 5000 	str.w	r5, [ip]
 80001fe:	6014      	str	r4, [r2, #0]
 8000200:	3108      	adds	r1, #8
 8000202:	3b01      	subs	r3, #1
 8000204:	d1df      	bne.n	80001c6 <arm_bitreversal_16_0>
 8000206:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800020a:	4770      	bx	lr

0800020c <strlen>:
 800020c:	4603      	mov	r3, r0
 800020e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000212:	2a00      	cmp	r2, #0
 8000214:	d1fb      	bne.n	800020e <strlen+0x2>
 8000216:	1a18      	subs	r0, r3, r0
 8000218:	3801      	subs	r0, #1
 800021a:	4770      	bx	lr

0800021c <__aeabi_dmul>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000222:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000226:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800022a:	bf1d      	ittte	ne
 800022c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000230:	ea94 0f0c 	teqne	r4, ip
 8000234:	ea95 0f0c 	teqne	r5, ip
 8000238:	f000 f8de 	bleq	80003f8 <__aeabi_dmul+0x1dc>
 800023c:	442c      	add	r4, r5
 800023e:	ea81 0603 	eor.w	r6, r1, r3
 8000242:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000246:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800024a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024e:	bf18      	it	ne
 8000250:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800025c:	d038      	beq.n	80002d0 <__aeabi_dmul+0xb4>
 800025e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000262:	f04f 0500 	mov.w	r5, #0
 8000266:	fbe1 e502 	umlal	lr, r5, r1, r2
 800026a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000272:	f04f 0600 	mov.w	r6, #0
 8000276:	fbe1 5603 	umlal	r5, r6, r1, r3
 800027a:	f09c 0f00 	teq	ip, #0
 800027e:	bf18      	it	ne
 8000280:	f04e 0e01 	orrne.w	lr, lr, #1
 8000284:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000288:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800028c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000290:	d204      	bcs.n	800029c <__aeabi_dmul+0x80>
 8000292:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000296:	416d      	adcs	r5, r5
 8000298:	eb46 0606 	adc.w	r6, r6, r6
 800029c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b4:	bf88      	it	hi
 80002b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ba:	d81e      	bhi.n	80002fa <__aeabi_dmul+0xde>
 80002bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d4:	ea46 0101 	orr.w	r1, r6, r1
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	ea81 0103 	eor.w	r1, r1, r3
 80002e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e4:	bfc2      	ittt	gt
 80002e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ee:	bd70      	popgt	{r4, r5, r6, pc}
 80002f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f4:	f04f 0e00 	mov.w	lr, #0
 80002f8:	3c01      	subs	r4, #1
 80002fa:	f300 80ab 	bgt.w	8000454 <__aeabi_dmul+0x238>
 80002fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000302:	bfde      	ittt	le
 8000304:	2000      	movle	r0, #0
 8000306:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800030a:	bd70      	pople	{r4, r5, r6, pc}
 800030c:	f1c4 0400 	rsb	r4, r4, #0
 8000310:	3c20      	subs	r4, #32
 8000312:	da35      	bge.n	8000380 <__aeabi_dmul+0x164>
 8000314:	340c      	adds	r4, #12
 8000316:	dc1b      	bgt.n	8000350 <__aeabi_dmul+0x134>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0520 	rsb	r5, r4, #32
 8000320:	fa00 f305 	lsl.w	r3, r0, r5
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f205 	lsl.w	r2, r1, r5
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	fa21 f604 	lsr.w	r6, r1, r4
 8000340:	eb42 0106 	adc.w	r1, r2, r6
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 040c 	rsb	r4, r4, #12
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f304 	lsl.w	r3, r0, r4
 800035c:	fa20 f005 	lsr.w	r0, r0, r5
 8000360:	fa01 f204 	lsl.w	r2, r1, r4
 8000364:	ea40 0002 	orr.w	r0, r0, r2
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000378:	bf08      	it	eq
 800037a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f205 	lsl.w	r2, r0, r5
 8000388:	ea4e 0e02 	orr.w	lr, lr, r2
 800038c:	fa20 f304 	lsr.w	r3, r0, r4
 8000390:	fa01 f205 	lsl.w	r2, r1, r5
 8000394:	ea43 0302 	orr.w	r3, r3, r2
 8000398:	fa21 f004 	lsr.w	r0, r1, r4
 800039c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a0:	fa21 f204 	lsr.w	r2, r1, r4
 80003a4:	ea20 0002 	bic.w	r0, r0, r2
 80003a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b0:	bf08      	it	eq
 80003b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f094 0f00 	teq	r4, #0
 80003bc:	d10f      	bne.n	80003de <__aeabi_dmul+0x1c2>
 80003be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003c2:	0040      	lsls	r0, r0, #1
 80003c4:	eb41 0101 	adc.w	r1, r1, r1
 80003c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003cc:	bf08      	it	eq
 80003ce:	3c01      	subeq	r4, #1
 80003d0:	d0f7      	beq.n	80003c2 <__aeabi_dmul+0x1a6>
 80003d2:	ea41 0106 	orr.w	r1, r1, r6
 80003d6:	f095 0f00 	teq	r5, #0
 80003da:	bf18      	it	ne
 80003dc:	4770      	bxne	lr
 80003de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	eb43 0303 	adc.w	r3, r3, r3
 80003e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003ec:	bf08      	it	eq
 80003ee:	3d01      	subeq	r5, #1
 80003f0:	d0f7      	beq.n	80003e2 <__aeabi_dmul+0x1c6>
 80003f2:	ea43 0306 	orr.w	r3, r3, r6
 80003f6:	4770      	bx	lr
 80003f8:	ea94 0f0c 	teq	r4, ip
 80003fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000400:	bf18      	it	ne
 8000402:	ea95 0f0c 	teqne	r5, ip
 8000406:	d00c      	beq.n	8000422 <__aeabi_dmul+0x206>
 8000408:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040c:	bf18      	it	ne
 800040e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000412:	d1d1      	bne.n	80003b8 <__aeabi_dmul+0x19c>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000426:	bf06      	itte	eq
 8000428:	4610      	moveq	r0, r2
 800042a:	4619      	moveq	r1, r3
 800042c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000430:	d019      	beq.n	8000466 <__aeabi_dmul+0x24a>
 8000432:	ea94 0f0c 	teq	r4, ip
 8000436:	d102      	bne.n	800043e <__aeabi_dmul+0x222>
 8000438:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800043c:	d113      	bne.n	8000466 <__aeabi_dmul+0x24a>
 800043e:	ea95 0f0c 	teq	r5, ip
 8000442:	d105      	bne.n	8000450 <__aeabi_dmul+0x234>
 8000444:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000448:	bf1c      	itt	ne
 800044a:	4610      	movne	r0, r2
 800044c:	4619      	movne	r1, r3
 800044e:	d10a      	bne.n	8000466 <__aeabi_dmul+0x24a>
 8000450:	ea81 0103 	eor.w	r1, r1, r3
 8000454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000458:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800045c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000460:	f04f 0000 	mov.w	r0, #0
 8000464:	bd70      	pop	{r4, r5, r6, pc}
 8000466:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800046a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046e:	bd70      	pop	{r4, r5, r6, pc}

08000470 <__aeabi_drsub>:
 8000470:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e002      	b.n	800047c <__adddf3>
 8000476:	bf00      	nop

08000478 <__aeabi_dsub>:
 8000478:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800047c <__adddf3>:
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000482:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	bf1f      	itttt	ne
 8000492:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000496:	ea55 0c02 	orrsne.w	ip, r5, r2
 800049a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a2:	f000 80e2 	beq.w	800066a <__adddf3+0x1ee>
 80004a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ae:	bfb8      	it	lt
 80004b0:	426d      	neglt	r5, r5
 80004b2:	dd0c      	ble.n	80004ce <__adddf3+0x52>
 80004b4:	442c      	add	r4, r5
 80004b6:	ea80 0202 	eor.w	r2, r0, r2
 80004ba:	ea81 0303 	eor.w	r3, r1, r3
 80004be:	ea82 0000 	eor.w	r0, r2, r0
 80004c2:	ea83 0101 	eor.w	r1, r3, r1
 80004c6:	ea80 0202 	eor.w	r2, r0, r2
 80004ca:	ea81 0303 	eor.w	r3, r1, r3
 80004ce:	2d36      	cmp	r5, #54	; 0x36
 80004d0:	bf88      	it	hi
 80004d2:	bd30      	pophi	{r4, r5, pc}
 80004d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x70>
 80004e6:	4240      	negs	r0, r0
 80004e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x84>
 80004fa:	4252      	negs	r2, r2
 80004fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000500:	ea94 0f05 	teq	r4, r5
 8000504:	f000 80a7 	beq.w	8000656 <__adddf3+0x1da>
 8000508:	f1a4 0401 	sub.w	r4, r4, #1
 800050c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000510:	db0d      	blt.n	800052e <__adddf3+0xb2>
 8000512:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000516:	fa22 f205 	lsr.w	r2, r2, r5
 800051a:	1880      	adds	r0, r0, r2
 800051c:	f141 0100 	adc.w	r1, r1, #0
 8000520:	fa03 f20e 	lsl.w	r2, r3, lr
 8000524:	1880      	adds	r0, r0, r2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	4159      	adcs	r1, r3
 800052c:	e00e      	b.n	800054c <__adddf3+0xd0>
 800052e:	f1a5 0520 	sub.w	r5, r5, #32
 8000532:	f10e 0e20 	add.w	lr, lr, #32
 8000536:	2a01      	cmp	r2, #1
 8000538:	fa03 fc0e 	lsl.w	ip, r3, lr
 800053c:	bf28      	it	cs
 800053e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	18c0      	adds	r0, r0, r3
 8000548:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	d507      	bpl.n	8000562 <__adddf3+0xe6>
 8000552:	f04f 0e00 	mov.w	lr, #0
 8000556:	f1dc 0c00 	rsbs	ip, ip, #0
 800055a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000562:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000566:	d31b      	bcc.n	80005a0 <__adddf3+0x124>
 8000568:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800056c:	d30c      	bcc.n	8000588 <__adddf3+0x10c>
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	ea5f 0030 	movs.w	r0, r0, rrx
 8000574:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000578:	f104 0401 	add.w	r4, r4, #1
 800057c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000580:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000584:	f080 809a 	bcs.w	80006bc <__adddf3+0x240>
 8000588:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	ea41 0105 	orr.w	r1, r1, r5
 800059e:	bd30      	pop	{r4, r5, pc}
 80005a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a4:	4140      	adcs	r0, r0
 80005a6:	eb41 0101 	adc.w	r1, r1, r1
 80005aa:	3c01      	subs	r4, #1
 80005ac:	bf28      	it	cs
 80005ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005b2:	d2e9      	bcs.n	8000588 <__adddf3+0x10c>
 80005b4:	f091 0f00 	teq	r1, #0
 80005b8:	bf04      	itt	eq
 80005ba:	4601      	moveq	r1, r0
 80005bc:	2000      	moveq	r0, #0
 80005be:	fab1 f381 	clz	r3, r1
 80005c2:	bf08      	it	eq
 80005c4:	3320      	addeq	r3, #32
 80005c6:	f1a3 030b 	sub.w	r3, r3, #11
 80005ca:	f1b3 0220 	subs.w	r2, r3, #32
 80005ce:	da0c      	bge.n	80005ea <__adddf3+0x16e>
 80005d0:	320c      	adds	r2, #12
 80005d2:	dd08      	ble.n	80005e6 <__adddf3+0x16a>
 80005d4:	f102 0c14 	add.w	ip, r2, #20
 80005d8:	f1c2 020c 	rsb	r2, r2, #12
 80005dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e0:	fa21 f102 	lsr.w	r1, r1, r2
 80005e4:	e00c      	b.n	8000600 <__adddf3+0x184>
 80005e6:	f102 0214 	add.w	r2, r2, #20
 80005ea:	bfd8      	it	le
 80005ec:	f1c2 0c20 	rsble	ip, r2, #32
 80005f0:	fa01 f102 	lsl.w	r1, r1, r2
 80005f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f8:	bfdc      	itt	le
 80005fa:	ea41 010c 	orrle.w	r1, r1, ip
 80005fe:	4090      	lslle	r0, r2
 8000600:	1ae4      	subs	r4, r4, r3
 8000602:	bfa2      	ittt	ge
 8000604:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000608:	4329      	orrge	r1, r5
 800060a:	bd30      	popge	{r4, r5, pc}
 800060c:	ea6f 0404 	mvn.w	r4, r4
 8000610:	3c1f      	subs	r4, #31
 8000612:	da1c      	bge.n	800064e <__adddf3+0x1d2>
 8000614:	340c      	adds	r4, #12
 8000616:	dc0e      	bgt.n	8000636 <__adddf3+0x1ba>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0220 	rsb	r2, r4, #32
 8000620:	fa20 f004 	lsr.w	r0, r0, r4
 8000624:	fa01 f302 	lsl.w	r3, r1, r2
 8000628:	ea40 0003 	orr.w	r0, r0, r3
 800062c:	fa21 f304 	lsr.w	r3, r1, r4
 8000630:	ea45 0103 	orr.w	r1, r5, r3
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f1c4 040c 	rsb	r4, r4, #12
 800063a:	f1c4 0220 	rsb	r2, r4, #32
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 f304 	lsl.w	r3, r1, r4
 8000646:	ea40 0003 	orr.w	r0, r0, r3
 800064a:	4629      	mov	r1, r5
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	fa21 f004 	lsr.w	r0, r1, r4
 8000652:	4629      	mov	r1, r5
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	f094 0f00 	teq	r4, #0
 800065a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065e:	bf06      	itte	eq
 8000660:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000664:	3401      	addeq	r4, #1
 8000666:	3d01      	subne	r5, #1
 8000668:	e74e      	b.n	8000508 <__adddf3+0x8c>
 800066a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066e:	bf18      	it	ne
 8000670:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000674:	d029      	beq.n	80006ca <__adddf3+0x24e>
 8000676:	ea94 0f05 	teq	r4, r5
 800067a:	bf08      	it	eq
 800067c:	ea90 0f02 	teqeq	r0, r2
 8000680:	d005      	beq.n	800068e <__adddf3+0x212>
 8000682:	ea54 0c00 	orrs.w	ip, r4, r0
 8000686:	bf04      	itt	eq
 8000688:	4619      	moveq	r1, r3
 800068a:	4610      	moveq	r0, r2
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea91 0f03 	teq	r1, r3
 8000692:	bf1e      	ittt	ne
 8000694:	2100      	movne	r1, #0
 8000696:	2000      	movne	r0, #0
 8000698:	bd30      	popne	{r4, r5, pc}
 800069a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069e:	d105      	bne.n	80006ac <__adddf3+0x230>
 80006a0:	0040      	lsls	r0, r0, #1
 80006a2:	4149      	adcs	r1, r1
 80006a4:	bf28      	it	cs
 80006a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd30      	pop	{r4, r5, pc}
 80006ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006b0:	bf3c      	itt	cc
 80006b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b6:	bd30      	popcc	{r4, r5, pc}
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ce:	bf1a      	itte	ne
 80006d0:	4619      	movne	r1, r3
 80006d2:	4610      	movne	r0, r2
 80006d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d8:	bf1c      	itt	ne
 80006da:	460b      	movne	r3, r1
 80006dc:	4602      	movne	r2, r0
 80006de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006e2:	bf06      	itte	eq
 80006e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e8:	ea91 0f03 	teqeq	r1, r3
 80006ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	bf00      	nop

080006f4 <__aeabi_ui2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000708:	f04f 0500 	mov.w	r5, #0
 800070c:	f04f 0100 	mov.w	r1, #0
 8000710:	e750      	b.n	80005b4 <__adddf3+0x138>
 8000712:	bf00      	nop

08000714 <__aeabi_i2d>:
 8000714:	f090 0f00 	teq	r0, #0
 8000718:	bf04      	itt	eq
 800071a:	2100      	moveq	r1, #0
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000724:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000728:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800072c:	bf48      	it	mi
 800072e:	4240      	negmi	r0, r0
 8000730:	f04f 0100 	mov.w	r1, #0
 8000734:	e73e      	b.n	80005b4 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_f2d>:
 8000738:	0042      	lsls	r2, r0, #1
 800073a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000742:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000746:	bf1f      	itttt	ne
 8000748:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800074c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000750:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000754:	4770      	bxne	lr
 8000756:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800075a:	bf08      	it	eq
 800075c:	4770      	bxeq	lr
 800075e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000762:	bf04      	itt	eq
 8000764:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000768:	4770      	bxeq	lr
 800076a:	b530      	push	{r4, r5, lr}
 800076c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	e71c      	b.n	80005b4 <__adddf3+0x138>
 800077a:	bf00      	nop

0800077c <__aeabi_ul2d>:
 800077c:	ea50 0201 	orrs.w	r2, r0, r1
 8000780:	bf08      	it	eq
 8000782:	4770      	bxeq	lr
 8000784:	b530      	push	{r4, r5, lr}
 8000786:	f04f 0500 	mov.w	r5, #0
 800078a:	e00a      	b.n	80007a2 <__aeabi_l2d+0x16>

0800078c <__aeabi_l2d>:
 800078c:	ea50 0201 	orrs.w	r2, r0, r1
 8000790:	bf08      	it	eq
 8000792:	4770      	bxeq	lr
 8000794:	b530      	push	{r4, r5, lr}
 8000796:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800079a:	d502      	bpl.n	80007a2 <__aeabi_l2d+0x16>
 800079c:	4240      	negs	r0, r0
 800079e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ae:	f43f aed8 	beq.w	8000562 <__adddf3+0xe6>
 80007b2:	f04f 0203 	mov.w	r2, #3
 80007b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ba:	bf18      	it	ne
 80007bc:	3203      	addne	r2, #3
 80007be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c2:	bf18      	it	ne
 80007c4:	3203      	addne	r2, #3
 80007c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ca:	f1c2 0320 	rsb	r3, r2, #32
 80007ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80007d2:	fa20 f002 	lsr.w	r0, r0, r2
 80007d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007da:	ea40 000e 	orr.w	r0, r0, lr
 80007de:	fa21 f102 	lsr.w	r1, r1, r2
 80007e2:	4414      	add	r4, r2
 80007e4:	e6bd      	b.n	8000562 <__adddf3+0xe6>
 80007e6:	bf00      	nop

080007e8 <__aeabi_d2f>:
 80007e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007f0:	bf24      	itt	cs
 80007f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007fa:	d90d      	bls.n	8000818 <__aeabi_d2f+0x30>
 80007fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000800:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000804:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000808:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800080c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000810:	bf08      	it	eq
 8000812:	f020 0001 	biceq.w	r0, r0, #1
 8000816:	4770      	bx	lr
 8000818:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800081c:	d121      	bne.n	8000862 <__aeabi_d2f+0x7a>
 800081e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000822:	bfbc      	itt	lt
 8000824:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000828:	4770      	bxlt	lr
 800082a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000832:	f1c2 0218 	rsb	r2, r2, #24
 8000836:	f1c2 0c20 	rsb	ip, r2, #32
 800083a:	fa10 f30c 	lsls.w	r3, r0, ip
 800083e:	fa20 f002 	lsr.w	r0, r0, r2
 8000842:	bf18      	it	ne
 8000844:	f040 0001 	orrne.w	r0, r0, #1
 8000848:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800084c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000850:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000854:	ea40 000c 	orr.w	r0, r0, ip
 8000858:	fa23 f302 	lsr.w	r3, r3, r2
 800085c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000860:	e7cc      	b.n	80007fc <__aeabi_d2f+0x14>
 8000862:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000866:	d107      	bne.n	8000878 <__aeabi_d2f+0x90>
 8000868:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800086c:	bf1e      	ittt	ne
 800086e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000872:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000876:	4770      	bxne	lr
 8000878:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800087c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <__aeabi_frsub>:
 8000888:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800088c:	e002      	b.n	8000894 <__addsf3>
 800088e:	bf00      	nop

08000890 <__aeabi_fsub>:
 8000890:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000894 <__addsf3>:
 8000894:	0042      	lsls	r2, r0, #1
 8000896:	bf1f      	itttt	ne
 8000898:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800089c:	ea92 0f03 	teqne	r2, r3
 80008a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008a8:	d06a      	beq.n	8000980 <__addsf3+0xec>
 80008aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008b2:	bfc1      	itttt	gt
 80008b4:	18d2      	addgt	r2, r2, r3
 80008b6:	4041      	eorgt	r1, r0
 80008b8:	4048      	eorgt	r0, r1
 80008ba:	4041      	eorgt	r1, r0
 80008bc:	bfb8      	it	lt
 80008be:	425b      	neglt	r3, r3
 80008c0:	2b19      	cmp	r3, #25
 80008c2:	bf88      	it	hi
 80008c4:	4770      	bxhi	lr
 80008c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80008ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80008d2:	bf18      	it	ne
 80008d4:	4240      	negne	r0, r0
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80008de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80008e2:	bf18      	it	ne
 80008e4:	4249      	negne	r1, r1
 80008e6:	ea92 0f03 	teq	r2, r3
 80008ea:	d03f      	beq.n	800096c <__addsf3+0xd8>
 80008ec:	f1a2 0201 	sub.w	r2, r2, #1
 80008f0:	fa41 fc03 	asr.w	ip, r1, r3
 80008f4:	eb10 000c 	adds.w	r0, r0, ip
 80008f8:	f1c3 0320 	rsb	r3, r3, #32
 80008fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000900:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000904:	d502      	bpl.n	800090c <__addsf3+0x78>
 8000906:	4249      	negs	r1, r1
 8000908:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800090c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000910:	d313      	bcc.n	800093a <__addsf3+0xa6>
 8000912:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000916:	d306      	bcc.n	8000926 <__addsf3+0x92>
 8000918:	0840      	lsrs	r0, r0, #1
 800091a:	ea4f 0131 	mov.w	r1, r1, rrx
 800091e:	f102 0201 	add.w	r2, r2, #1
 8000922:	2afe      	cmp	r2, #254	; 0xfe
 8000924:	d251      	bcs.n	80009ca <__addsf3+0x136>
 8000926:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800092a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800092e:	bf08      	it	eq
 8000930:	f020 0001 	biceq.w	r0, r0, #1
 8000934:	ea40 0003 	orr.w	r0, r0, r3
 8000938:	4770      	bx	lr
 800093a:	0049      	lsls	r1, r1, #1
 800093c:	eb40 0000 	adc.w	r0, r0, r0
 8000940:	3a01      	subs	r2, #1
 8000942:	bf28      	it	cs
 8000944:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000948:	d2ed      	bcs.n	8000926 <__addsf3+0x92>
 800094a:	fab0 fc80 	clz	ip, r0
 800094e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000952:	ebb2 020c 	subs.w	r2, r2, ip
 8000956:	fa00 f00c 	lsl.w	r0, r0, ip
 800095a:	bfaa      	itet	ge
 800095c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000960:	4252      	neglt	r2, r2
 8000962:	4318      	orrge	r0, r3
 8000964:	bfbc      	itt	lt
 8000966:	40d0      	lsrlt	r0, r2
 8000968:	4318      	orrlt	r0, r3
 800096a:	4770      	bx	lr
 800096c:	f092 0f00 	teq	r2, #0
 8000970:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000974:	bf06      	itte	eq
 8000976:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800097a:	3201      	addeq	r2, #1
 800097c:	3b01      	subne	r3, #1
 800097e:	e7b5      	b.n	80008ec <__addsf3+0x58>
 8000980:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000984:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000988:	bf18      	it	ne
 800098a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800098e:	d021      	beq.n	80009d4 <__addsf3+0x140>
 8000990:	ea92 0f03 	teq	r2, r3
 8000994:	d004      	beq.n	80009a0 <__addsf3+0x10c>
 8000996:	f092 0f00 	teq	r2, #0
 800099a:	bf08      	it	eq
 800099c:	4608      	moveq	r0, r1
 800099e:	4770      	bx	lr
 80009a0:	ea90 0f01 	teq	r0, r1
 80009a4:	bf1c      	itt	ne
 80009a6:	2000      	movne	r0, #0
 80009a8:	4770      	bxne	lr
 80009aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80009ae:	d104      	bne.n	80009ba <__addsf3+0x126>
 80009b0:	0040      	lsls	r0, r0, #1
 80009b2:	bf28      	it	cs
 80009b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80009b8:	4770      	bx	lr
 80009ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80009be:	bf3c      	itt	cc
 80009c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80009c4:	4770      	bxcc	lr
 80009c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	4770      	bx	lr
 80009d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009d8:	bf16      	itet	ne
 80009da:	4608      	movne	r0, r1
 80009dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009e0:	4601      	movne	r1, r0
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	bf06      	itte	eq
 80009e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009ea:	ea90 0f01 	teqeq	r0, r1
 80009ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_ui2f>:
 80009f4:	f04f 0300 	mov.w	r3, #0
 80009f8:	e004      	b.n	8000a04 <__aeabi_i2f+0x8>
 80009fa:	bf00      	nop

080009fc <__aeabi_i2f>:
 80009fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a00:	bf48      	it	mi
 8000a02:	4240      	negmi	r0, r0
 8000a04:	ea5f 0c00 	movs.w	ip, r0
 8000a08:	bf08      	it	eq
 8000a0a:	4770      	bxeq	lr
 8000a0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a10:	4601      	mov	r1, r0
 8000a12:	f04f 0000 	mov.w	r0, #0
 8000a16:	e01c      	b.n	8000a52 <__aeabi_l2f+0x2a>

08000a18 <__aeabi_ul2f>:
 8000a18:	ea50 0201 	orrs.w	r2, r0, r1
 8000a1c:	bf08      	it	eq
 8000a1e:	4770      	bxeq	lr
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e00a      	b.n	8000a3c <__aeabi_l2f+0x14>
 8000a26:	bf00      	nop

08000a28 <__aeabi_l2f>:
 8000a28:	ea50 0201 	orrs.w	r2, r0, r1
 8000a2c:	bf08      	it	eq
 8000a2e:	4770      	bxeq	lr
 8000a30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a34:	d502      	bpl.n	8000a3c <__aeabi_l2f+0x14>
 8000a36:	4240      	negs	r0, r0
 8000a38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a3c:	ea5f 0c01 	movs.w	ip, r1
 8000a40:	bf02      	ittt	eq
 8000a42:	4684      	moveq	ip, r0
 8000a44:	4601      	moveq	r1, r0
 8000a46:	2000      	moveq	r0, #0
 8000a48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a56:	fabc f28c 	clz	r2, ip
 8000a5a:	3a08      	subs	r2, #8
 8000a5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a60:	db10      	blt.n	8000a84 <__aeabi_l2f+0x5c>
 8000a62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a66:	4463      	add	r3, ip
 8000a68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a6c:	f1c2 0220 	rsb	r2, r2, #32
 8000a70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a74:	fa20 f202 	lsr.w	r2, r0, r2
 8000a78:	eb43 0002 	adc.w	r0, r3, r2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f102 0220 	add.w	r2, r2, #32
 8000a88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a8c:	f1c2 0220 	rsb	r2, r2, #32
 8000a90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a94:	fa21 f202 	lsr.w	r2, r1, r2
 8000a98:	eb43 0002 	adc.w	r0, r3, r2
 8000a9c:	bf08      	it	eq
 8000a9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_fmul>:
 8000aa4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aa8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000aac:	bf1e      	ittt	ne
 8000aae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ab2:	ea92 0f0c 	teqne	r2, ip
 8000ab6:	ea93 0f0c 	teqne	r3, ip
 8000aba:	d06f      	beq.n	8000b9c <__aeabi_fmul+0xf8>
 8000abc:	441a      	add	r2, r3
 8000abe:	ea80 0c01 	eor.w	ip, r0, r1
 8000ac2:	0240      	lsls	r0, r0, #9
 8000ac4:	bf18      	it	ne
 8000ac6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000aca:	d01e      	beq.n	8000b0a <__aeabi_fmul+0x66>
 8000acc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ad0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ad4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ad8:	fba0 3101 	umull	r3, r1, r0, r1
 8000adc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ae0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ae4:	bf3e      	ittt	cc
 8000ae6:	0049      	lslcc	r1, r1, #1
 8000ae8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000aec:	005b      	lslcc	r3, r3, #1
 8000aee:	ea40 0001 	orr.w	r0, r0, r1
 8000af2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000af6:	2afd      	cmp	r2, #253	; 0xfd
 8000af8:	d81d      	bhi.n	8000b36 <__aeabi_fmul+0x92>
 8000afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	4770      	bx	lr
 8000b0a:	f090 0f00 	teq	r0, #0
 8000b0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b12:	bf08      	it	eq
 8000b14:	0249      	lsleq	r1, r1, #9
 8000b16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b1e:	3a7f      	subs	r2, #127	; 0x7f
 8000b20:	bfc2      	ittt	gt
 8000b22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b2a:	4770      	bxgt	lr
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	3a01      	subs	r2, #1
 8000b36:	dc5d      	bgt.n	8000bf4 <__aeabi_fmul+0x150>
 8000b38:	f112 0f19 	cmn.w	r2, #25
 8000b3c:	bfdc      	itt	le
 8000b3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b42:	4770      	bxle	lr
 8000b44:	f1c2 0200 	rsb	r2, r2, #0
 8000b48:	0041      	lsls	r1, r0, #1
 8000b4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000b4e:	f1c2 0220 	rsb	r2, r2, #32
 8000b52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b5a:	f140 0000 	adc.w	r0, r0, #0
 8000b5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b62:	bf08      	it	eq
 8000b64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b68:	4770      	bx	lr
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b72:	bf02      	ittt	eq
 8000b74:	0040      	lsleq	r0, r0, #1
 8000b76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b7a:	3a01      	subeq	r2, #1
 8000b7c:	d0f9      	beq.n	8000b72 <__aeabi_fmul+0xce>
 8000b7e:	ea40 000c 	orr.w	r0, r0, ip
 8000b82:	f093 0f00 	teq	r3, #0
 8000b86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b8a:	bf02      	ittt	eq
 8000b8c:	0049      	lsleq	r1, r1, #1
 8000b8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b92:	3b01      	subeq	r3, #1
 8000b94:	d0f9      	beq.n	8000b8a <__aeabi_fmul+0xe6>
 8000b96:	ea41 010c 	orr.w	r1, r1, ip
 8000b9a:	e78f      	b.n	8000abc <__aeabi_fmul+0x18>
 8000b9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ba0:	ea92 0f0c 	teq	r2, ip
 8000ba4:	bf18      	it	ne
 8000ba6:	ea93 0f0c 	teqne	r3, ip
 8000baa:	d00a      	beq.n	8000bc2 <__aeabi_fmul+0x11e>
 8000bac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bb0:	bf18      	it	ne
 8000bb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bb6:	d1d8      	bne.n	8000b6a <__aeabi_fmul+0xc6>
 8000bb8:	ea80 0001 	eor.w	r0, r0, r1
 8000bbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f090 0f00 	teq	r0, #0
 8000bc6:	bf17      	itett	ne
 8000bc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	f091 0f00 	teqne	r1, #0
 8000bd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000bd6:	d014      	beq.n	8000c02 <__aeabi_fmul+0x15e>
 8000bd8:	ea92 0f0c 	teq	r2, ip
 8000bdc:	d101      	bne.n	8000be2 <__aeabi_fmul+0x13e>
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	d10f      	bne.n	8000c02 <__aeabi_fmul+0x15e>
 8000be2:	ea93 0f0c 	teq	r3, ip
 8000be6:	d103      	bne.n	8000bf0 <__aeabi_fmul+0x14c>
 8000be8:	024b      	lsls	r3, r1, #9
 8000bea:	bf18      	it	ne
 8000bec:	4608      	movne	r0, r1
 8000bee:	d108      	bne.n	8000c02 <__aeabi_fmul+0x15e>
 8000bf0:	ea80 0001 	eor.w	r0, r0, r1
 8000bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bx	lr
 8000c02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_fdiv>:
 8000c0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c14:	bf1e      	ittt	ne
 8000c16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c1a:	ea92 0f0c 	teqne	r2, ip
 8000c1e:	ea93 0f0c 	teqne	r3, ip
 8000c22:	d069      	beq.n	8000cf8 <__aeabi_fdiv+0xec>
 8000c24:	eba2 0203 	sub.w	r2, r2, r3
 8000c28:	ea80 0c01 	eor.w	ip, r0, r1
 8000c2c:	0249      	lsls	r1, r1, #9
 8000c2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c32:	d037      	beq.n	8000ca4 <__aeabi_fdiv+0x98>
 8000c34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	428b      	cmp	r3, r1
 8000c46:	bf38      	it	cc
 8000c48:	005b      	lslcc	r3, r3, #1
 8000c4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c52:	428b      	cmp	r3, r1
 8000c54:	bf24      	itt	cs
 8000c56:	1a5b      	subcs	r3, r3, r1
 8000c58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c60:	bf24      	itt	cs
 8000c62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c6e:	bf24      	itt	cs
 8000c70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c7c:	bf24      	itt	cs
 8000c7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	bf18      	it	ne
 8000c8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c8e:	d1e0      	bne.n	8000c52 <__aeabi_fdiv+0x46>
 8000c90:	2afd      	cmp	r2, #253	; 0xfd
 8000c92:	f63f af50 	bhi.w	8000b36 <__aeabi_fmul+0x92>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cac:	327f      	adds	r2, #127	; 0x7f
 8000cae:	bfc2      	ittt	gt
 8000cb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cb8:	4770      	bxgt	lr
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	3a01      	subs	r2, #1
 8000cc4:	e737      	b.n	8000b36 <__aeabi_fmul+0x92>
 8000cc6:	f092 0f00 	teq	r2, #0
 8000cca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0040      	lsleq	r0, r0, #1
 8000cd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cd6:	3a01      	subeq	r2, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fdiv+0xc2>
 8000cda:	ea40 000c 	orr.w	r0, r0, ip
 8000cde:	f093 0f00 	teq	r3, #0
 8000ce2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0049      	lsleq	r1, r1, #1
 8000cea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cee:	3b01      	subeq	r3, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fdiv+0xda>
 8000cf2:	ea41 010c 	orr.w	r1, r1, ip
 8000cf6:	e795      	b.n	8000c24 <__aeabi_fdiv+0x18>
 8000cf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cfc:	ea92 0f0c 	teq	r2, ip
 8000d00:	d108      	bne.n	8000d14 <__aeabi_fdiv+0x108>
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	f47f af7d 	bne.w	8000c02 <__aeabi_fmul+0x15e>
 8000d08:	ea93 0f0c 	teq	r3, ip
 8000d0c:	f47f af70 	bne.w	8000bf0 <__aeabi_fmul+0x14c>
 8000d10:	4608      	mov	r0, r1
 8000d12:	e776      	b.n	8000c02 <__aeabi_fmul+0x15e>
 8000d14:	ea93 0f0c 	teq	r3, ip
 8000d18:	d104      	bne.n	8000d24 <__aeabi_fdiv+0x118>
 8000d1a:	024b      	lsls	r3, r1, #9
 8000d1c:	f43f af4c 	beq.w	8000bb8 <__aeabi_fmul+0x114>
 8000d20:	4608      	mov	r0, r1
 8000d22:	e76e      	b.n	8000c02 <__aeabi_fmul+0x15e>
 8000d24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d28:	bf18      	it	ne
 8000d2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2e:	d1ca      	bne.n	8000cc6 <__aeabi_fdiv+0xba>
 8000d30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d34:	f47f af5c 	bne.w	8000bf0 <__aeabi_fmul+0x14c>
 8000d38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	f47f af3c 	bne.w	8000bb8 <__aeabi_fmul+0x114>
 8000d40:	e75f      	b.n	8000c02 <__aeabi_fmul+0x15e>
 8000d42:	bf00      	nop

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <everythingElse>:
#include "fft.h"

int time1 = 3000;

bool elseDone = 0;
void everythingElse(void){
 8000d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}





	if (!elseDone){
 8000d92:	4d13      	ldr	r5, [pc, #76]	; (8000de0 <everythingElse+0x50>)
 8000d94:	782c      	ldrb	r4, [r5, #0]
 8000d96:	bb04      	cbnz	r4, 8000dda <everythingElse+0x4a>
	//char str[64] = "hello!\r\n";


		if (HAL_GetTick() >= (time1 + 1000)){
 8000d98:	f000 fd6c 	bl	8001874 <HAL_GetTick>
 8000d9c:	4e11      	ldr	r6, [pc, #68]	; (8000de4 <everythingElse+0x54>)
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000da4:	4298      	cmp	r0, r3
 8000da6:	d316      	bcc.n	8000dd6 <everythingElse+0x46>
			uint8_t str[16] = "";

			sprintf(str, "total = %lu\r\n", metrics.metric[METRIC_DSP_TOTAL].time);
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <everythingElse+0x58>)
 8000daa:	4910      	ldr	r1, [pc, #64]	; (8000dec <everythingElse+0x5c>)
 8000dac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000db0:	4668      	mov	r0, sp
			uint8_t str[16] = "";
 8000db2:	e9cd 4400 	strd	r4, r4, [sp]
 8000db6:	e9cd 4402 	strd	r4, r4, [sp, #8]
			sprintf(str, "total = %lu\r\n", metrics.metric[METRIC_DSP_TOTAL].time);
 8000dba:	f004 fb81 	bl	80054c0 <siprintf>
			HAL_UART_Transmit(&huart1, str, strlen(str), 2);
 8000dbe:	4668      	mov	r0, sp
 8000dc0:	f7ff fa24 	bl	800020c <strlen>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	b282      	uxth	r2, r0
 8000dc8:	4669      	mov	r1, sp
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <everythingElse+0x60>)
 8000dcc:	f002 fbb0 	bl	8003530 <HAL_UART_Transmit>

			time1 = HAL_GetTick();
 8000dd0:	f000 fd50 	bl	8001874 <HAL_GetTick>
 8000dd4:	6030      	str	r0, [r6, #0]
		//sprintf(txt,"%.3f", gaine);
		//GLCD_Font_Print(1, 1, txt);
		// ST7920_Update();
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	 //ST7920_Update();
	elseDone = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	702b      	strb	r3, [r5, #0]

	}



}
 8000dda:	b004      	add	sp, #16
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
 8000dde:	bf00      	nop
 8000de0:	20000144 	.word	0x20000144
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000018 	.word	0x20000018
 8000dec:	08005c94 	.word	0x08005c94
 8000df0:	20000438 	.word	0x20000438

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b510      	push	{r4, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df8:	2214      	movs	r2, #20
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	a80c      	add	r0, sp, #48	; 0x30
 8000dfe:	f004 fa6b 	bl	80052d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e02:	2214      	movs	r2, #20
 8000e04:	2100      	movs	r1, #0
 8000e06:	eb0d 0002 	add.w	r0, sp, r2
 8000e0a:	f004 fa65 	bl	80052d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0e:	2210      	movs	r2, #16
 8000e10:	2100      	movs	r1, #0
 8000e12:	a801      	add	r0, sp, #4
 8000e14:	f004 fa60 	bl	80052d8 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e20:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e28:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e30:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f001 faab 	bl	800238c <HAL_RCC_OscConfig>
 8000e36:	b108      	cbz	r0, 8000e3c <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	e9cd 0007 	strd	r0, r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e42:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e44:	4621      	mov	r1, r4
 8000e46:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	e9cd 3405 	strd	r3, r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e4c:	f001 fc74 	bl	8002738 <HAL_RCC_ClockConfig>
 8000e50:	b108      	cbz	r0, 8000e56 <SystemClock_Config+0x62>
 8000e52:	b672      	cpsid	i
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000e56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e5c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000e5e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	f001 fd26 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	b108      	cbz	r0, 8000e6a <SystemClock_Config+0x76>
 8000e66:	b672      	cpsid	i
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <SystemClock_Config+0x74>
}
 8000e6a:	b014      	add	sp, #80	; 0x50
 8000e6c:	bd10      	pop	{r4, pc}
	...

08000e70 <main>:
{
 8000e70:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	2710      	movs	r7, #16
{
 8000e74:	b09a      	sub	sp, #104	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4dad      	ldr	r5, [pc, #692]	; (800112c <main+0x2bc>)
  HAL_Init();
 8000e78:	f000 fcde 	bl	8001838 <HAL_Init>
  SystemClock_Config();
 8000e7c:	f7ff ffba 	bl	8000df4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	463a      	mov	r2, r7
 8000e82:	2100      	movs	r1, #0
 8000e84:	a812      	add	r0, sp, #72	; 0x48
 8000e86:	f004 fa27 	bl	80052d8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	433b      	orrs	r3, r7
 8000e90:	61ab      	str	r3, [r5, #24]
 8000e92:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	403b      	ands	r3, r7
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000ea0:	48a3      	ldr	r0, [pc, #652]	; (8001130 <main+0x2c0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	61ab      	str	r3, [r5, #24]
 8000ea8:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	61ab      	str	r3, [r5, #24]
 8000ebe:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = PIN_LCD_CS_2_Pin;
 8000ece:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	61ab      	str	r3, [r5, #24]
 8000ed8:	69ab      	ldr	r3, [r5, #24]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	9304      	str	r3, [sp, #16]
 8000ee0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000ee2:	f001 f9a5 	bl	8002230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PIN_LCD_CS_Pin|PIN_LCD_DC_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f240 3103 	movw	r1, #771	; 0x303
 8000eec:	4891      	ldr	r0, [pc, #580]	; (8001134 <main+0x2c4>)
 8000eee:	f001 f99f 	bl	8002230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_CS_EXT_Pin|PIN_LCD_CS_2_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000ef8:	488f      	ldr	r0, [pc, #572]	; (8001138 <main+0x2c8>)
 8000efa:	f001 f999 	bl	8002230 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000f02:	488b      	ldr	r0, [pc, #556]	; (8001130 <main+0x2c0>)
 8000f04:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	e9cd 4914 	strd	r4, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f001 f8b5 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PIN_LCD_CS_Pin|PIN_LCD_DC_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000f12:	f240 3303 	movw	r3, #771	; 0x303
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	4887      	ldr	r0, [pc, #540]	; (8001134 <main+0x2c4>)
 8000f18:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	e9cd 4914 	strd	r4, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f001 f8ab 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PIN_CS_EXT_Pin;
 8000f26:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(PIN_CS_EXT_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	4883      	ldr	r0, [pc, #524]	; (8001138 <main+0x2c8>)
 8000f2c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	e9cd 4914 	strd	r4, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(PIN_CS_EXT_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f001 f8a1 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3a:	2303      	movs	r3, #3
  HAL_GPIO_Init(PIN_LCD_CS_2_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	487e      	ldr	r0, [pc, #504]	; (8001138 <main+0x2c8>)
 8000f3e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	e9cd 8612 	strd	r8, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	9614      	str	r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(PIN_LCD_CS_2_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f001 f898 	bl	800207c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f4e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f50:	4333      	orrs	r3, r6
 8000f52:	616b      	str	r3, [r5, #20]
 8000f54:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f56:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f58:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f5a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f60:	f000 fed8 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f64:	200b      	movs	r0, #11
 8000f66:	f000 ff07 	bl	8001d78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f6a:	4622      	mov	r2, r4
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	200c      	movs	r0, #12
 8000f70:	f000 fed0 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f74:	200c      	movs	r0, #12
 8000f76:	f000 feff 	bl	8001d78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	200d      	movs	r0, #13
 8000f80:	f000 fec8 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f84:	200d      	movs	r0, #13
 8000f86:	f000 fef7 	bl	8001d78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f8a:	4622      	mov	r2, r4
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	200e      	movs	r0, #14
 8000f90:	f000 fec0 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f94:	200e      	movs	r0, #14
 8000f96:	f000 feef 	bl	8001d78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f9a:	4622      	mov	r2, r4
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	f000 feb8 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fa4:	4638      	mov	r0, r7
 8000fa6:	f000 fee7 	bl	8001d78 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000faa:	4d64      	ldr	r5, [pc, #400]	; (800113c <main+0x2cc>)
 8000fac:	4b64      	ldr	r3, [pc, #400]	; (8001140 <main+0x2d0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fae:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8000fb0:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb6:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 8000fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbc:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000fc0:	9414      	str	r4, [sp, #80]	; 0x50
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc2:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc4:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 8000fc6:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000fca:	f8c5 9010 	str.w	r9, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fce:	f000 fe11 	bl	8001bf4 <HAL_ADC_Init>
 8000fd2:	b108      	cbz	r0, 8000fd8 <main+0x168>
 8000fd4:	b672      	cpsid	i
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <main+0x166>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000fd8:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fda:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	a912      	add	r1, sp, #72	; 0x48
 8000fe0:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000fe2:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	f000 fc98 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000fe8:	b108      	cbz	r0, 8000fee <main+0x17e>
 8000fea:	b672      	cpsid	i
  while (1)
 8000fec:	e7fe      	b.n	8000fec <main+0x17c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fee:	4628      	mov	r0, r5
 8000ff0:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ff2:	e9cd 6912 	strd	r6, r9, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	f000 fc8f 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	b108      	cbz	r0, 8001002 <main+0x192>
 8000ffe:	b672      	cpsid	i
  while (1)
 8001000:	e7fe      	b.n	8001000 <main+0x190>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	4601      	mov	r1, r0
 8001004:	463a      	mov	r2, r7
 8001006:	a807      	add	r0, sp, #28
 8001008:	f004 f966 	bl	80052d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100c:	221c      	movs	r2, #28
 800100e:	4629      	mov	r1, r5
 8001010:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001016:	f004 f95f 	bl	80052d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800101a:	2220      	movs	r2, #32
 800101c:	4629      	mov	r1, r5
 800101e:	a812      	add	r0, sp, #72	; 0x48
 8001020:	f004 f95a 	bl	80052d8 <memset>
  htim1.Instance = TIM1;
 8001024:	4c47      	ldr	r4, [pc, #284]	; (8001144 <main+0x2d4>)
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <main+0x2d8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001028:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 2-1;
 800102a:	e9c4 3600 	strd	r3, r6, [r4]
  htim1.Init.Period = 2048-1;
 800102e:	f240 73ff 	movw	r3, #2047	; 0x7ff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001036:	2380      	movs	r3, #128	; 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 800103a:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103e:	f001 fe5b 	bl	8002cf8 <HAL_TIM_Base_Init>
 8001042:	b108      	cbz	r0, 8001048 <main+0x1d8>
 8001044:	b672      	cpsid	i
  while (1)
 8001046:	e7fe      	b.n	8001046 <main+0x1d6>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001048:	4620      	mov	r0, r4
 800104a:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104c:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001050:	f001 ff3b 	bl	8002eca <HAL_TIM_ConfigClockSource>
 8001054:	b108      	cbz	r0, 800105a <main+0x1ea>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x1e8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800105a:	4620      	mov	r0, r4
 800105c:	f001 fe78 	bl	8002d50 <HAL_TIM_PWM_Init>
 8001060:	b108      	cbz	r0, 8001066 <main+0x1f6>
 8001062:	b672      	cpsid	i
  while (1)
 8001064:	e7fe      	b.n	8001064 <main+0x1f4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	e9cd 7005 	strd	r7, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106a:	a905      	add	r1, sp, #20
 800106c:	4620      	mov	r0, r4
 800106e:	f002 f965 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4602      	mov	r2, r0
 8001074:	b108      	cbz	r0, 800107a <main+0x20a>
 8001076:	b672      	cpsid	i
  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x208>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107c:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001080:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001084:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001088:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108a:	a90b      	add	r1, sp, #44	; 0x2c
 800108c:	4620      	mov	r0, r4
 800108e:	f001 feb7 	bl	8002e00 <HAL_TIM_PWM_ConfigChannel>
 8001092:	b108      	cbz	r0, 8001098 <main+0x228>
 8001094:	b672      	cpsid	i
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x226>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001098:	2204      	movs	r2, #4
 800109a:	4620      	mov	r0, r4
 800109c:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 1;
 800109e:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a0:	f001 feae 	bl	8002e00 <HAL_TIM_PWM_ConfigChannel>
 80010a4:	b108      	cbz	r0, 80010aa <main+0x23a>
 80010a6:	b672      	cpsid	i
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <main+0x238>
  sConfigOC.Pulse = 0;
 80010aa:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ac:	2208      	movs	r2, #8
 80010ae:	4620      	mov	r0, r4
 80010b0:	a90b      	add	r1, sp, #44	; 0x2c
 80010b2:	f001 fea5 	bl	8002e00 <HAL_TIM_PWM_ConfigChannel>
 80010b6:	b108      	cbz	r0, 80010bc <main+0x24c>
 80010b8:	b672      	cpsid	i
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0x24a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010bc:	220c      	movs	r2, #12
 80010be:	4821      	ldr	r0, [pc, #132]	; (8001144 <main+0x2d4>)
 80010c0:	a90b      	add	r1, sp, #44	; 0x2c
 80010c2:	f001 fe9d 	bl	8002e00 <HAL_TIM_PWM_ConfigChannel>
 80010c6:	b108      	cbz	r0, 80010cc <main+0x25c>
 80010c8:	b672      	cpsid	i
  while (1)
 80010ca:	e7fe      	b.n	80010ca <main+0x25a>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d0:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d4:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d8:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010da:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010dc:	a912      	add	r1, sp, #72	; 0x48
 80010de:	4819      	ldr	r0, [pc, #100]	; (8001144 <main+0x2d4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010e2:	f002 f959 	bl	8003398 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e6:	4604      	mov	r4, r0
 80010e8:	b108      	cbz	r0, 80010ee <main+0x27e>
 80010ea:	b672      	cpsid	i
  while (1)
 80010ec:	e7fe      	b.n	80010ec <main+0x27c>
  HAL_TIM_MspPostInit(&htim1);
 80010ee:	4815      	ldr	r0, [pc, #84]	; (8001144 <main+0x2d4>)
 80010f0:	f000 fa96 	bl	8001620 <HAL_TIM_MspPostInit>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f4:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80010f8:	4814      	ldr	r0, [pc, #80]	; (800114c <main+0x2dc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4d15      	ldr	r5, [pc, #84]	; (8001150 <main+0x2e0>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010fc:	2601      	movs	r6, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fe:	e9c0 5300 	strd	r5, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001106:	e9c0 6305 	strd	r6, r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800110a:	2338      	movs	r3, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110c:	e9c0 3407 	strd	r3, r4, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001110:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001112:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CRCPolynomial = 10;
 8001116:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001118:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111c:	6104      	str	r4, [r0, #16]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800111e:	f001 fc41 	bl	80029a4 <HAL_SPI_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	b1b0      	cbz	r0, 8001154 <main+0x2e4>
 8001126:	b672      	cpsid	i
  while (1)
 8001128:	e7fe      	b.n	8001128 <main+0x2b8>
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40011000 	.word	0x40011000
 8001134:	40010c00 	.word	0x40010c00
 8001138:	40010800 	.word	0x40010800
 800113c:	20000148 	.word	0x20000148
 8001140:	40012400 	.word	0x40012400
 8001144:	200003a8 	.word	0x200003a8
 8001148:	40012c00 	.word	0x40012c00
 800114c:	20000350 	.word	0x20000350
 8001150:	40013000 	.word	0x40013000
  huart1.Init.BaudRate = 115200;
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001158:	4857      	ldr	r0, [pc, #348]	; (80012b8 <main+0x448>)
  huart1.Init.BaudRate = 115200;
 800115a:	4c58      	ldr	r4, [pc, #352]	; (80012bc <main+0x44c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001160:	e9c0 4200 	strd	r4, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001164:	220c      	movs	r2, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8001166:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001168:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116e:	f002 f9b1 	bl	80034d4 <HAL_UART_Init>
 8001172:	4605      	mov	r5, r0
 8001174:	b108      	cbz	r0, 800117a <main+0x30a>
 8001176:	b672      	cpsid	i
  while (1)
 8001178:	e7fe      	b.n	8001178 <main+0x308>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	2710      	movs	r7, #16
 800117c:	4601      	mov	r1, r0
 800117e:	463a      	mov	r2, r7
 8001180:	a807      	add	r0, sp, #28
 8001182:	f004 f8a9 	bl	80052d8 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001186:	2214      	movs	r2, #20
 8001188:	4629      	mov	r1, r5
 800118a:	a80b      	add	r0, sp, #44	; 0x2c
 800118c:	f004 f8a4 	bl	80052d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	221c      	movs	r2, #28
 8001192:	4629      	mov	r1, r5
 8001194:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119a:	f004 f89d 	bl	80052d8 <memset>
  htim2.Instance = TIM2;
 800119e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a2:	4c47      	ldr	r4, [pc, #284]	; (80012c0 <main+0x450>)
  htim2.Init.Prescaler = 2-1;
 80011a4:	e9c4 3600 	strd	r3, r6, [r4]
  htim2.Init.Period = 2048-1;
 80011a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	f001 fd9f 	bl	8002cf8 <HAL_TIM_Base_Init>
 80011ba:	b108      	cbz	r0, 80011c0 <main+0x350>
 80011bc:	b672      	cpsid	i
  while (1)
 80011be:	e7fe      	b.n	80011be <main+0x34e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c4:	4620      	mov	r0, r4
 80011c6:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ca:	f001 fe7e 	bl	8002eca <HAL_TIM_ConfigClockSource>
 80011ce:	b108      	cbz	r0, 80011d4 <main+0x364>
 80011d0:	b672      	cpsid	i
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <main+0x362>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011d4:	4620      	mov	r0, r4
 80011d6:	f001 fdbb 	bl	8002d50 <HAL_TIM_PWM_Init>
 80011da:	b108      	cbz	r0, 80011e0 <main+0x370>
 80011dc:	b672      	cpsid	i
  while (1)
 80011de:	e7fe      	b.n	80011de <main+0x36e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80011e0:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011e2:	a90b      	add	r1, sp, #44	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80011e4:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011e8:	4620      	mov	r0, r4
 80011ea:	f001 ff54 	bl	8003096 <HAL_TIM_SlaveConfigSynchro>
 80011ee:	b108      	cbz	r0, 80011f4 <main+0x384>
 80011f0:	b672      	cpsid	i
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <main+0x382>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011f4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f6:	4620      	mov	r0, r4
 80011f8:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80011fa:	9705      	str	r7, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011fc:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fe:	f002 f89d 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	b108      	cbz	r0, 8001208 <main+0x398>
 8001204:	b672      	cpsid	i
  while (1)
 8001206:	e7fe      	b.n	8001206 <main+0x396>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001208:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120a:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800120e:	2204      	movs	r2, #4
 8001210:	4620      	mov	r0, r4
 8001212:	a912      	add	r1, sp, #72	; 0x48
  sConfigOC.Pulse = 1;
 8001214:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	f001 fdf2 	bl	8002e00 <HAL_TIM_PWM_ConfigChannel>
 800121c:	b108      	cbz	r0, 8001222 <main+0x3b2>
 800121e:	b672      	cpsid	i
  while (1)
 8001220:	e7fe      	b.n	8001220 <main+0x3b0>
  hadc2.Instance = ADC2;
 8001222:	4c28      	ldr	r4, [pc, #160]	; (80012c4 <main+0x454>)
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <main+0x458>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	2300      	movs	r3, #0
  hadc2.Init.NbrOfConversion = 1;
 8001228:	2501      	movs	r5, #1
  hadc2.Instance = ADC2;
 800122a:	6022      	str	r2, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8001236:	9314      	str	r3, [sp, #80]	; 0x50
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001238:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800123a:	7323      	strb	r3, [r4, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800123c:	7523      	strb	r3, [r4, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123e:	61e2      	str	r2, [r4, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001240:	6063      	str	r3, [r4, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001242:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001244:	f000 fcd6 	bl	8001bf4 <HAL_ADC_Init>
 8001248:	b108      	cbz	r0, 800124e <main+0x3de>
 800124a:	b672      	cpsid	i
  while (1)
 800124c:	e7fe      	b.n	800124c <main+0x3dc>
  sConfig.Channel = ADC_CHANNEL_4;
 800124e:	2304      	movs	r3, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001250:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001252:	a912      	add	r1, sp, #72	; 0x48
 8001254:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001256:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800125a:	f000 fb5d 	bl	8001918 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	b108      	cbz	r0, 8001266 <main+0x3f6>
 8001262:	b672      	cpsid	i
  while (1)
 8001264:	e7fe      	b.n	8001264 <main+0x3f4>
  hi2c2.Instance = I2C2;
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <main+0x45c>)
  hi2c2.Init.ClockSpeed = 100000;
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <main+0x460>)
 800126a:	491a      	ldr	r1, [pc, #104]	; (80012d4 <main+0x464>)
  hi2c2.Init.OwnAddress1 = 0;
 800126c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8001270:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001278:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001282:	f000 ffdb 	bl	800223c <HAL_I2C_Init>
 8001286:	b108      	cbz	r0, 800128c <main+0x41c>
 8001288:	b672      	cpsid	i
  while (1)
 800128a:	e7fe      	b.n	800128a <main+0x41a>
  HAL_Delay(500);
 800128c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001290:	f000 faf6 	bl	8001880 <HAL_Delay>
  debugInit();
 8001294:	f002 fe34 	bl	8003f00 <debugInit>
  dspInit();
 8001298:	f002 fc18 	bl	8003acc <dspInit>
  HAL_Delay(10);
 800129c:	200a      	movs	r0, #10
 800129e:	f000 faef 	bl	8001880 <HAL_Delay>
  dspStart();
 80012a2:	f002 fc4f 	bl	8003b44 <dspStart>
  time1=HAL_GetTick();
 80012a6:	f000 fae5 	bl	8001874 <HAL_GetTick>
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <main+0x468>)
 80012ac:	6018      	str	r0, [r3, #0]
	 dspProc();
 80012ae:	f002 fcaf 	bl	8003c10 <dspProc>
	 everythingElse();
 80012b2:	f7ff fd6d 	bl	8000d90 <everythingElse>
  while (1)
 80012b6:	e7fa      	b.n	80012ae <main+0x43e>
 80012b8:	20000438 	.word	0x20000438
 80012bc:	40013800 	.word	0x40013800
 80012c0:	200003f0 	.word	0x200003f0
 80012c4:	20000178 	.word	0x20000178
 80012c8:	40012800 	.word	0x40012800
 80012cc:	200002fc 	.word	0x200002fc
 80012d0:	000186a0 	.word	0x000186a0
 80012d4:	40005800 	.word	0x40005800
 80012d8:	20000000 	.word	0x20000000

080012dc <Error_Handler>:
 80012dc:	b672      	cpsid	i
  while (1)
 80012de:	e7fe      	b.n	80012de <Error_Handler+0x2>

080012e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_MspInit+0x3c>)
{
 80012e2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	f002 0201 	and.w	r2, r2, #1
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012fc:	61da      	str	r2, [r3, #28]
 80012fe:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800130a:	6853      	ldr	r3, [r2, #4]
 800130c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	b002      	add	sp, #8
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000

08001324 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	2210      	movs	r2, #16
{
 8001326:	b530      	push	{r4, r5, lr}
 8001328:	4605      	mov	r5, r0
 800132a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	eb0d 0002 	add.w	r0, sp, r2
 8001330:	2100      	movs	r1, #0
 8001332:	f003 ffd1 	bl	80052d8 <memset>
  if(hadc->Instance==ADC1)
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	4a2c      	ldr	r2, [pc, #176]	; (80013ec <HAL_ADC_MspInit+0xc8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d136      	bne.n	80013ac <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <HAL_ADC_MspInit+0xcc>)
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_RX_I_Pin|ADC_RX_Q_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001342:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134a:	619a      	str	r2, [r3, #24]
 800134c:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800134e:	4c2a      	ldr	r4, [pc, #168]	; (80013f8 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001350:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	f042 0204 	orr.w	r2, r2, #4
 800135e:	619a      	str	r2, [r3, #24]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_RX_I_Pin|ADC_RX_Q_Pin;
 800136a:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f000 fe84 	bl	800207c <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001374:	2300      	movs	r3, #0
 8001376:	4921      	ldr	r1, [pc, #132]	; (80013fc <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001378:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800137e:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001384:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001388:	e9c4 0303 	strd	r0, r3, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800138c:	2320      	movs	r3, #32
 800138e:	e9c4 c305 	strd	ip, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001392:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001396:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001398:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800139a:	f000 fd0f 	bl	8001dbc <HAL_DMA_Init>
 800139e:	b108      	cbz	r0, 80013a4 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80013a0:	f7ff ff9c 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013a4:	622c      	str	r4, [r5, #32]
 80013a6:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013a8:	b009      	add	sp, #36	; 0x24
 80013aa:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_ADC_MspInit+0xdc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d1fa      	bne.n	80013a8 <HAL_ADC_MspInit+0x84>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_ADC_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	480f      	ldr	r0, [pc, #60]	; (80013f4 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013b6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80013c6:	9202      	str	r2, [sp, #8]
 80013c8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	22fc      	movs	r2, #252	; 0xfc
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	9303      	str	r3, [sp, #12]
 80013dc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f000 fe4a 	bl	800207c <HAL_GPIO_Init>
}
 80013e8:	e7de      	b.n	80013a8 <HAL_ADC_MspInit+0x84>
 80013ea:	bf00      	nop
 80013ec:	40012400 	.word	0x40012400
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	200001a8 	.word	0x200001a8
 80013fc:	40020008 	.word	0x40020008
 8001400:	40012800 	.word	0x40012800

08001404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001404:	b510      	push	{r4, lr}
 8001406:	4604      	mov	r4, r0
 8001408:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	2210      	movs	r2, #16
 800140c:	2100      	movs	r1, #0
 800140e:	a802      	add	r0, sp, #8
 8001410:	f003 ff62 	bl	80052d8 <memset>
  if(hi2c->Instance==I2C2)
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_I2C_MspInit+0x58>)
 8001418:	429a      	cmp	r2, r3
 800141a:	d11d      	bne.n	8001458 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4c10      	ldr	r4, [pc, #64]	; (8001460 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	480f      	ldr	r0, [pc, #60]	; (8001464 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	61a3      	str	r3, [r4, #24]
 800142c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f000 fe1b 	bl	800207c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001446:	69e3      	ldr	r3, [r4, #28]
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800144c:	61e3      	str	r3, [r4, #28]
 800144e:	69e3      	ldr	r3, [r4, #28]
 8001450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001458:	b006      	add	sp, #24
 800145a:	bd10      	pop	{r4, pc}
 800145c:	40005800 	.word	0x40005800
 8001460:	40021000 	.word	0x40021000
 8001464:	40010c00 	.word	0x40010c00

08001468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	2710      	movs	r7, #16
{
 800146c:	4606      	mov	r6, r0
 800146e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	463a      	mov	r2, r7
 8001472:	2100      	movs	r1, #0
 8001474:	a802      	add	r0, sp, #8
 8001476:	f003 ff2f 	bl	80052d8 <memset>
  if(hspi->Instance==SPI1)
 800147a:	6832      	ldr	r2, [r6, #0]
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_SPI_MspInit+0xa0>)
 800147e:	429a      	cmp	r2, r3
 8001480:	d13f      	bne.n	8001502 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001482:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001486:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800148a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	481e      	ldr	r0, [pc, #120]	; (800150c <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001494:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	f042 0208 	orr.w	r2, r2, #8
 80014a4:	619a      	str	r2, [r3, #24]
 80014a6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2228      	movs	r2, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f000 fdde 	bl	800207c <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <HAL_SPI_MspInit+0xa4>)
 80014c2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	e9cd 5503 	strd	r5, r5, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c8:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f000 fdd7 	bl	800207c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_SPI_MspInit+0xa8>)

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80014d0:	4c10      	ldr	r4, [pc, #64]	; (8001514 <HAL_SPI_MspInit+0xac>)
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80014d2:	6853      	ldr	r3, [r2, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014d4:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80014d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6053      	str	r3, [r2, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_SPI_MspInit+0xb0>)
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014e2:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e6:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	60a5      	str	r5, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ee:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f2:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014f4:	f000 fc62 	bl	8001dbc <HAL_DMA_Init>
 80014f8:	b108      	cbz	r0, 80014fe <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 80014fa:	f7ff feef 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014fe:	64b4      	str	r4, [r6, #72]	; 0x48
 8001500:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001502:	b007      	add	sp, #28
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001506:	bf00      	nop
 8001508:	40013000 	.word	0x40013000
 800150c:	40010c00 	.word	0x40010c00
 8001510:	40010000 	.word	0x40010000
 8001514:	200001ec 	.word	0x200001ec
 8001518:	40020030 	.word	0x40020030

0800151c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800151c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM1)
 800151e:	6803      	ldr	r3, [r0, #0]
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <HAL_TIM_Base_MspInit+0xe4>)
{
 8001522:	4605      	mov	r5, r0
  if(htim_base->Instance==TIM1)
 8001524:	4293      	cmp	r3, r2
 8001526:	d15c      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_TIM_Base_MspInit+0xe8>)

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 800152a:	4c37      	ldr	r4, [pc, #220]	; (8001608 <HAL_TIM_Base_MspInit+0xec>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152c:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152e:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800160c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001536:	619a      	str	r2, [r3, #24]
 8001538:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800153c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001544:	2310      	movs	r3, #16
 8001546:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800154a:	2380      	movs	r3, #128	; 0x80
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001554:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001558:	2020      	movs	r0, #32
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155a:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	e9c4 0306 	strd	r0, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001566:	4620      	mov	r0, r4
 8001568:	f000 fc28 	bl	8001dbc <HAL_DMA_Init>
 800156c:	b108      	cbz	r0, 8001572 <HAL_TIM_Base_MspInit+0x56>
    {
      Error_Handler();
 800156e:	f7ff feb5 	bl	80012dc <Error_Handler>

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001572:	2310      	movs	r3, #16
 8001574:	4826      	ldr	r0, [pc, #152]	; (8001610 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001576:	62ec      	str	r4, [r5, #44]	; 0x2c
 8001578:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 800157a:	4c26      	ldr	r4, [pc, #152]	; (8001614 <HAL_TIM_Base_MspInit+0xf8>)
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800157c:	2280      	movs	r2, #128	; 0x80
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157e:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001582:	2300      	movs	r3, #0
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001584:	f44f 7c80 	mov.w	ip, #256	; 0x100
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001588:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800158c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001590:	4620      	mov	r0, r4
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001592:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001596:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800159a:	f000 fc0f 	bl	8001dbc <HAL_DMA_Init>
 800159e:	b108      	cbz	r0, 80015a4 <HAL_TIM_Base_MspInit+0x88>
    {
      Error_Handler();
 80015a0:	f7ff fe9c 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015a4:	2310      	movs	r3, #16
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_TIM_Base_MspInit+0xfc>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80015a8:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80015ac:	632c      	str	r4, [r5, #48]	; 0x30
 80015ae:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80015b0:	4c1a      	ldr	r4, [pc, #104]	; (800161c <HAL_TIM_Base_MspInit+0x100>)
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b6:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80015c6:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015c8:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80015d0:	f000 fbf4 	bl	8001dbc <HAL_DMA_Init>
 80015d4:	b108      	cbz	r0, 80015da <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 80015d6:	f7ff fe81 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80015da:	626c      	str	r4, [r5, #36]	; 0x24
 80015dc:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015de:	b003      	add	sp, #12
 80015e0:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM2)
 80015e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e6:	d1fa      	bne.n	80015de <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	61da      	str	r2, [r3, #28]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	9b01      	ldr	r3, [sp, #4]
}
 80015fe:	e7ee      	b.n	80015de <HAL_TIM_Base_MspInit+0xc2>
 8001600:	40012c00 	.word	0x40012c00
 8001604:	40021000 	.word	0x40021000
 8001608:	20000274 	.word	0x20000274
 800160c:	4002006c 	.word	0x4002006c
 8001610:	40020044 	.word	0x40020044
 8001614:	200002b8 	.word	0x200002b8
 8001618:	4002001c 	.word	0x4002001c
 800161c:	20000230 	.word	0x20000230

08001620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001620:	b510      	push	{r4, lr}
 8001622:	4604      	mov	r4, r0
 8001624:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	2210      	movs	r2, #16
 8001628:	2100      	movs	r1, #0
 800162a:	a802      	add	r0, sp, #8
 800162c:	f003 fe54 	bl	80052d8 <memset>
  if(htim->Instance==TIM1)
 8001630:	6822      	ldr	r2, [r4, #0]
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_TIM_MspPostInit+0x48>)
 8001634:	429a      	cmp	r2, r3
 8001636:	d114      	bne.n	8001662 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800163c:	699a      	ldr	r2, [r3, #24]
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TX_Q_PWM_Pin|AUDIO_PWM_Pin|TX_Q_PWMA11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	480b      	ldr	r0, [pc, #44]	; (800166c <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	619a      	str	r2, [r3, #24]
 8001646:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	f44f 6250 	mov.w	r2, #3328	; 0xd00
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f000 fd0d 	bl	800207c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001662:	b006      	add	sp, #24
 8001664:	bd10      	pop	{r4, pc}
 8001666:	bf00      	nop
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40010800 	.word	0x40010800

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b510      	push	{r4, lr}
 8001672:	4604      	mov	r4, r0
 8001674:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	2210      	movs	r2, #16
 8001678:	2100      	movs	r1, #0
 800167a:	a802      	add	r0, sp, #8
 800167c:	f003 fe2c 	bl	80052d8 <memset>
  if(huart->Instance==USART1)
 8001680:	6822      	ldr	r2, [r4, #0]
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_UART_MspInit+0x88>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d135      	bne.n	80016f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001688:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800168c:	699a      	ldr	r2, [r3, #24]
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	481b      	ldr	r0, [pc, #108]	; (80016fc <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001690:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001694:	619a      	str	r2, [r3, #24]
 8001696:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800169a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	f042 0208 	orr.w	r2, r2, #8
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f000 fcdb 	bl	800207c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016ca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f000 fcd3 	bl	800207c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_UART_MspInit+0x90>)

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016d8:	2025      	movs	r0, #37	; 0x25
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80016da:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016dc:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80016de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016e8:	4622      	mov	r2, r4
 80016ea:	f000 fb13 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ee:	2025      	movs	r0, #37	; 0x25
 80016f0:	f000 fb42 	bl	8001d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016f4:	b006      	add	sp, #24
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	40010000 	.word	0x40010000

08001704 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler>

08001706 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler>

08001708 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler>

0800170a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler>

0800170c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler>

0800170e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001714:	f000 b8a2 	b.w	800185c <HAL_IncTick>

08001718 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001718:	4801      	ldr	r0, [pc, #4]	; (8001720 <DMA1_Channel1_IRQHandler+0x8>)
 800171a:	f000 bc1d 	b.w	8001f58 <HAL_DMA_IRQHandler>
 800171e:	bf00      	nop
 8001720:	200001a8 	.word	0x200001a8

08001724 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001724:	4801      	ldr	r0, [pc, #4]	; (800172c <DMA1_Channel2_IRQHandler+0x8>)
 8001726:	f000 bc17 	b.w	8001f58 <HAL_DMA_IRQHandler>
 800172a:	bf00      	nop
 800172c:	20000230 	.word	0x20000230

08001730 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001730:	4801      	ldr	r0, [pc, #4]	; (8001738 <DMA1_Channel3_IRQHandler+0x8>)
 8001732:	f000 bc11 	b.w	8001f58 <HAL_DMA_IRQHandler>
 8001736:	bf00      	nop
 8001738:	200001ec 	.word	0x200001ec

0800173c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 800173c:	4801      	ldr	r0, [pc, #4]	; (8001744 <DMA1_Channel4_IRQHandler+0x8>)
 800173e:	f000 bc0b 	b.w	8001f58 <HAL_DMA_IRQHandler>
 8001742:	bf00      	nop
 8001744:	200002b8 	.word	0x200002b8

08001748 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001748:	4801      	ldr	r0, [pc, #4]	; (8001750 <DMA1_Channel6_IRQHandler+0x8>)
 800174a:	f000 bc05 	b.w	8001f58 <HAL_DMA_IRQHandler>
 800174e:	bf00      	nop
 8001750:	20000274 	.word	0x20000274

08001754 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001754:	4801      	ldr	r0, [pc, #4]	; (800175c <USART1_IRQHandler+0x8>)
 8001756:	f002 b815 	b.w	8003784 <HAL_UART_IRQHandler>
 800175a:	bf00      	nop
 800175c:	20000438 	.word	0x20000438

08001760 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <_sbrk+0x30>)
{
 8001762:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001764:	6811      	ldr	r1, [r2, #0]
{
 8001766:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001768:	b909      	cbnz	r1, 800176e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800176a:	490a      	ldr	r1, [pc, #40]	; (8001794 <_sbrk+0x34>)
 800176c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	6810      	ldr	r0, [r2, #0]
 8001770:	4909      	ldr	r1, [pc, #36]	; (8001798 <_sbrk+0x38>)
 8001772:	4c0a      	ldr	r4, [pc, #40]	; (800179c <_sbrk+0x3c>)
 8001774:	4403      	add	r3, r0
 8001776:	1b09      	subs	r1, r1, r4
 8001778:	428b      	cmp	r3, r1
 800177a:	d906      	bls.n	800178a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800177c:	f003 fd7a 	bl	8005274 <__errno>
 8001780:	230c      	movs	r3, #12
 8001782:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001784:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001788:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800178a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800178c:	e7fc      	b.n	8001788 <_sbrk+0x28>
 800178e:	bf00      	nop
 8001790:	2000047c 	.word	0x2000047c
 8001794:	20001d18 	.word	0x20001d18
 8001798:	20005000 	.word	0x20005000
 800179c:	00000400 	.word	0x00000400

080017a0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	4770      	bx	lr
	...

080017a4 <Reset_Handler>:
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopFillZerobss+0x16>)
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopFillZerobss+0x1a>)
 80017aa:	2300      	movs	r3, #0
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:
 80017ae:	58d4      	ldr	r4, [r2, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:
 80017b4:	18c4      	adds	r4, r0, r3
 80017b6:	428c      	cmp	r4, r1
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopFillZerobss+0x1e>)
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopFillZerobss+0x22>)
 80017be:	2300      	movs	r3, #0
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:
 80017c6:	42a2      	cmp	r2, r4
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>
 80017ca:	f7ff ffe9 	bl	80017a0 <SystemInit>
 80017ce:	f003 fd57 	bl	8005280 <__libc_init_array>
 80017d2:	f7ff fb4d 	bl	8000e70 <main>
 80017d6:	4770      	bx	lr
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000128 	.word	0x20000128
 80017e0:	08005e3c 	.word	0x08005e3c
 80017e4:	20000128 	.word	0x20000128
 80017e8:	20001d14 	.word	0x20001d14

080017ec <ADC1_2_IRQHandler>:
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_InitTick+0x3c>)
{
 80017f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f6:	7818      	ldrb	r0, [r3, #0]
 80017f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_InitTick+0x40>)
 8001802:	6810      	ldr	r0, [r2, #0]
 8001804:	fbb0 f0f3 	udiv	r0, r0, r3
 8001808:	f000 fac4 	bl	8001d94 <HAL_SYSTICK_Config>
 800180c:	4604      	mov	r4, r0
 800180e:	b958      	cbnz	r0, 8001828 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001810:	2d0f      	cmp	r5, #15
 8001812:	d809      	bhi.n	8001828 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	4602      	mov	r2, r0
 8001816:	4629      	mov	r1, r5
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 fa7a 	bl	8001d14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4620      	mov	r0, r4
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_InitTick+0x44>)
 8001824:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001826:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
 800182a:	e7fc      	b.n	8001826 <HAL_InitTick+0x36>
 800182c:	20000008 	.word	0x20000008
 8001830:	20000004 	.word	0x20000004
 8001834:	2000000c 	.word	0x2000000c

08001838 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x20>)
{
 800183a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001846:	f000 fa53 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f7ff ffd0 	bl	80017f0 <HAL_InitTick>
  HAL_MspInit();
 8001850:	f7ff fd46 	bl	80012e0 <HAL_MspInit>
}
 8001854:	2000      	movs	r0, #0
 8001856:	bd08      	pop	{r3, pc}
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <HAL_IncTick+0x10>)
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <HAL_IncTick+0x14>)
 8001860:	6811      	ldr	r1, [r2, #0]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	440b      	add	r3, r1
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000480 	.word	0x20000480
 8001870:	20000008 	.word	0x20000008

08001874 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001874:	4b01      	ldr	r3, [pc, #4]	; (800187c <HAL_GetTick+0x8>)
 8001876:	6818      	ldr	r0, [r3, #0]
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000480 	.word	0x20000480

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff fff6 	bl	8001874 <HAL_GetTick>
 8001888:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800188c:	bf1e      	ittt	ne
 800188e:	4b04      	ldrne	r3, [pc, #16]	; (80018a0 <HAL_Delay+0x20>)
 8001890:	781b      	ldrbne	r3, [r3, #0]
 8001892:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	1b43      	subs	r3, r0, r5
 800189a:	42a3      	cmp	r3, r4
 800189c:	d3fa      	bcc.n	8001894 <HAL_Delay+0x14>
  {
  }
}
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	20000008 	.word	0x20000008

080018a4 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80018a6:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018aa:	f012 0f50 	tst.w	r2, #80	; 0x50
 80018ae:	d11b      	bne.n	80018e8 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	6892      	ldr	r2, [r2, #8]
 80018bc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80018c0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80018c4:	d10c      	bne.n	80018e0 <ADC_DMAConvCplt+0x3c>
 80018c6:	7b1a      	ldrb	r2, [r3, #12]
 80018c8:	b952      	cbnz	r2, 80018e0 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d4:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d6:	bf5e      	ittt	pl
 80018d8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80018da:	f042 0201 	orrpl.w	r2, r2, #1
 80018de:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f9f8 	bl	8003cd6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018e6:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018e8:	6a1b      	ldr	r3, [r3, #32]
}
 80018ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	4718      	bx	r3

080018f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018f2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80018f6:	f002 f9ed 	bl	8003cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018fa:	bd08      	pop	{r3, pc}

080018fc <HAL_ADC_ErrorCallback>:
 80018fc:	4770      	bx	lr

080018fe <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001900:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001902:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001908:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800190a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001912:	f7ff fff3 	bl	80018fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001916:	bd08      	pop	{r3, pc}

08001918 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001918:	2300      	movs	r3, #0
{ 
 800191a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800191c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800191e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001922:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001924:	2b01      	cmp	r3, #1
 8001926:	d06c      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0xea>
 8001928:	2301      	movs	r3, #1
 800192a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800192e:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001930:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8001932:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001934:	6808      	ldr	r0, [r1, #0]
 8001936:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800193a:	d822      	bhi.n	8001982 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800193c:	261f      	movs	r6, #31
 800193e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001940:	3b05      	subs	r3, #5
 8001942:	409e      	lsls	r6, r3
 8001944:	ea25 0506 	bic.w	r5, r5, r6
 8001948:	fa00 f303 	lsl.w	r3, r0, r3
 800194c:	432b      	orrs	r3, r5
 800194e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001950:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001952:	688b      	ldr	r3, [r1, #8]
 8001954:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001958:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800195c:	d929      	bls.n	80019b2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800195e:	68d6      	ldr	r6, [r2, #12]
 8001960:	3d1e      	subs	r5, #30
 8001962:	40a9      	lsls	r1, r5
 8001964:	ea26 0101 	bic.w	r1, r6, r1
 8001968:	40ab      	lsls	r3, r5
 800196a:	430b      	orrs	r3, r1
 800196c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800196e:	f1a0 0310 	sub.w	r3, r0, #16
 8001972:	2b01      	cmp	r3, #1
 8001974:	d925      	bls.n	80019c2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001976:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001978:	2300      	movs	r3, #0
 800197a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800197e:	b002      	add	sp, #8
 8001980:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001982:	2d0c      	cmp	r5, #12
 8001984:	f04f 051f 	mov.w	r5, #31
 8001988:	d809      	bhi.n	800199e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800198a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800198c:	3b23      	subs	r3, #35	; 0x23
 800198e:	409d      	lsls	r5, r3
 8001990:	ea26 0505 	bic.w	r5, r6, r5
 8001994:	fa00 f303 	lsl.w	r3, r0, r3
 8001998:	432b      	orrs	r3, r5
 800199a:	6313      	str	r3, [r2, #48]	; 0x30
 800199c:	e7d8      	b.n	8001950 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800199e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80019a0:	3b41      	subs	r3, #65	; 0x41
 80019a2:	409d      	lsls	r5, r3
 80019a4:	ea26 0505 	bic.w	r5, r6, r5
 80019a8:	fa00 f303 	lsl.w	r3, r0, r3
 80019ac:	432b      	orrs	r3, r5
 80019ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019b0:	e7ce      	b.n	8001950 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019b2:	6910      	ldr	r0, [r2, #16]
 80019b4:	40a9      	lsls	r1, r5
 80019b6:	ea20 0101 	bic.w	r1, r0, r1
 80019ba:	40ab      	lsls	r3, r5
 80019bc:	430b      	orrs	r3, r1
 80019be:	6113      	str	r3, [r2, #16]
 80019c0:	e7d9      	b.n	8001976 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_ADC_ConfigChannel+0xf0>)
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d116      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c8:	6893      	ldr	r3, [r2, #8]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	d4d3      	bmi.n	8001976 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019ce:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d0:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019d6:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d8:	d1cd      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_ADC_ConfigChannel+0xf4>)
 80019dc:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_ADC_ConfigChannel+0xf8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80019e4:	220a      	movs	r2, #10
 80019e6:	4353      	muls	r3, r2
            wait_loop_index--;
 80019e8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80019ea:	9b01      	ldr	r3, [sp, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0c2      	beq.n	8001976 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80019f0:	9b01      	ldr	r3, [sp, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	e7f8      	b.n	80019e8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80019f8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001a00:	e7ba      	b.n	8001978 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001a02:	2002      	movs	r0, #2
 8001a04:	e7bb      	b.n	800197e <HAL_ADC_ConfigChannel+0x66>
 8001a06:	bf00      	nop
 8001a08:	40012400 	.word	0x40012400
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	000f4240 	.word	0x000f4240

08001a14 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001a14:	2300      	movs	r3, #0
{
 8001a16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001a18:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a1a:	6803      	ldr	r3, [r0, #0]
{
 8001a1c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	07d2      	lsls	r2, r2, #31
 8001a22:	d502      	bpl.n	8001a2a <ADC_Enable+0x16>
  return HAL_OK;
 8001a24:	2000      	movs	r0, #0
}
 8001a26:	b003      	add	sp, #12
 8001a28:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <ADC_Enable+0x70>)
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <ADC_Enable+0x74>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001a3c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001a3e:	9b01      	ldr	r3, [sp, #4]
 8001a40:	b9e3      	cbnz	r3, 8001a7c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8001a42:	f7ff ff17 	bl	8001874 <HAL_GetTick>
 8001a46:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	07db      	lsls	r3, r3, #31
 8001a4e:	d4e9      	bmi.n	8001a24 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a50:	f7ff ff10 	bl	8001874 <HAL_GetTick>
 8001a54:	1b40      	subs	r0, r0, r5
 8001a56:	2802      	cmp	r0, #2
 8001a58:	d9f6      	bls.n	8001a48 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f013 0301 	ands.w	r3, r3, #1
 8001a62:	d1f1      	bne.n	8001a48 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a68:	f042 0210 	orr.w	r2, r2, #16
 8001a6c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001a70:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001a7a:	e7d4      	b.n	8001a26 <ADC_Enable+0x12>
      wait_loop_index--;
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	e7dc      	b.n	8001a3c <ADC_Enable+0x28>
 8001a82:	bf00      	nop
 8001a84:	20000004 	.word	0x20000004
 8001a88:	000f4240 	.word	0x000f4240

08001a8c <HAL_ADC_Start_DMA>:
{
 8001a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a90:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_ADC_Start_DMA+0x108>)
{
 8001a92:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a94:	6802      	ldr	r2, [r0, #0]
{
 8001a96:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a98:	429a      	cmp	r2, r3
{
 8001a9a:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a9c:	d002      	beq.n	8001aa4 <HAL_ADC_Start_DMA+0x18>
 8001a9e:	493e      	ldr	r1, [pc, #248]	; (8001b98 <HAL_ADC_Start_DMA+0x10c>)
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	d103      	bne.n	8001aac <HAL_ADC_Start_DMA+0x20>
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001aaa:	d16e      	bne.n	8001b8a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001aac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d06c      	beq.n	8001b8e <HAL_ADC_Start_DMA+0x102>
 8001ab4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001ab6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001ab8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001abc:	f7ff ffaa 	bl	8001a14 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001ac0:	4606      	mov	r6, r0
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	d15d      	bne.n	8001b82 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ac8:	6821      	ldr	r1, [r4, #0]
 8001aca:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001acc:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8001ad0:	f025 0501 	bic.w	r5, r5, #1
 8001ad4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ad8:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001ada:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001adc:	d104      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0x5c>
 8001ade:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <HAL_ADC_Start_DMA+0x108>)
 8001ae0:	6853      	ldr	r3, [r2, #4]
 8001ae2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001ae6:	d13e      	bne.n	8001b66 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001aea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001aee:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af0:	684b      	ldr	r3, [r1, #4]
 8001af2:	055a      	lsls	r2, r3, #21
 8001af4:	d505      	bpl.n	8001b02 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001af8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b00:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b04:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b06:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b0a:	bf18      	it	ne
 8001b0c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b0e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b10:	bf18      	it	ne
 8001b12:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b20:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b22:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_ADC_Start_DMA+0x114>)
 8001b26:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_ADC_Start_DMA+0x118>)
 8001b2a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b2c:	f06f 0302 	mvn.w	r3, #2
 8001b30:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b34:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b40:	4643      	mov	r3, r8
 8001b42:	f000 f969 	bl	8001e18 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001b4e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	bf0c      	ite	eq
 8001b56:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b5a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001b5e:	609a      	str	r2, [r3, #8]
}
 8001b60:	4630      	mov	r0, r6
 8001b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b6c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b6e:	6853      	ldr	r3, [r2, #4]
 8001b70:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b72:	bf41      	itttt	mi
 8001b74:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001b76:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001b7a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001b7e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001b80:	e7bf      	b.n	8001b02 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001b82:	2300      	movs	r3, #0
 8001b84:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001b88:	e7ea      	b.n	8001b60 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001b8a:	2601      	movs	r6, #1
 8001b8c:	e7e8      	b.n	8001b60 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001b8e:	2602      	movs	r6, #2
 8001b90:	e7e6      	b.n	8001b60 <HAL_ADC_Start_DMA+0xd4>
 8001b92:	bf00      	nop
 8001b94:	40012400 	.word	0x40012400
 8001b98:	40012800 	.word	0x40012800
 8001b9c:	080018a5 	.word	0x080018a5
 8001ba0:	080018f3 	.word	0x080018f3
 8001ba4:	080018ff 	.word	0x080018ff

08001ba8 <ADC_ConversionStop_Disable>:
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001baa:	6803      	ldr	r3, [r0, #0]
{
 8001bac:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	07d1      	lsls	r1, r2, #31
 8001bb2:	d401      	bmi.n	8001bb8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001bb4:	2000      	movs	r0, #0
}
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fe58 	bl	8001874 <HAL_GetTick>
 8001bc4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	07db      	lsls	r3, r3, #31
 8001bcc:	d5f2      	bpl.n	8001bb4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bce:	f7ff fe51 	bl	8001874 <HAL_GetTick>
 8001bd2:	1b40      	subs	r0, r0, r5
 8001bd4:	2802      	cmp	r0, #2
 8001bd6:	d9f6      	bls.n	8001bc6 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	07da      	lsls	r2, r3, #31
 8001bde:	d5f2      	bpl.n	8001bc6 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001bf2:	e7e0      	b.n	8001bb6 <ADC_ConversionStop_Disable+0xe>

08001bf4 <HAL_ADC_Init>:
{
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d06e      	beq.n	8001cda <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bfe:	b923      	cbnz	r3, 8001c0a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c00:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001c02:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001c06:	f7ff fb8d 	bl	8001324 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff ffcc 	bl	8001ba8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c12:	f013 0310 	ands.w	r3, r3, #16
 8001c16:	d162      	bne.n	8001cde <HAL_ADC_Init+0xea>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d160      	bne.n	8001cde <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c1e:	69e5      	ldr	r5, [r4, #28]
 8001c20:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001c26:	f022 0202 	bic.w	r2, r2, #2
 8001c2a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c2e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c30:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c34:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c36:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c3a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c3e:	d037      	beq.n	8001cb0 <HAL_ADC_Init+0xbc>
 8001c40:	2d01      	cmp	r5, #1
 8001c42:	bf14      	ite	ne
 8001c44:	2700      	movne	r7, #0
 8001c46:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4a:	7d26      	ldrb	r6, [r4, #20]
 8001c4c:	2e01      	cmp	r6, #1
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c50:	bb82      	cbnz	r2, 8001cb4 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c52:	69a2      	ldr	r2, [r4, #24]
 8001c54:	3a01      	subs	r2, #1
 8001c56:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8001c5a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001c5e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c60:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001c64:	6856      	ldr	r6, [r2, #4]
 8001c66:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001c6a:	ea46 0607 	orr.w	r6, r6, r7
 8001c6e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001c70:	6897      	ldr	r7, [r2, #8]
 8001c72:	4e1d      	ldr	r6, [pc, #116]	; (8001ce8 <HAL_ADC_Init+0xf4>)
 8001c74:	ea06 0607 	and.w	r6, r6, r7
 8001c78:	ea46 0601 	orr.w	r6, r6, r1
 8001c7c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c7e:	d001      	beq.n	8001c84 <HAL_ADC_Init+0x90>
 8001c80:	2d01      	cmp	r5, #1
 8001c82:	d102      	bne.n	8001c8a <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c84:	6923      	ldr	r3, [r4, #16]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001c8a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001c8c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001c90:	432b      	orrs	r3, r5
 8001c92:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c94:	6892      	ldr	r2, [r2, #8]
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_ADC_Init+0xf8>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	4299      	cmp	r1, r3
 8001c9c:	d113      	bne.n	8001cc6 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ca4:	f023 0303 	bic.w	r3, r3, #3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cb0:	462f      	mov	r7, r5
 8001cb2:	e7ca      	b.n	8001c4a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cb6:	f042 0220 	orr.w	r2, r2, #32
 8001cba:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001cc4:	e7cb      	b.n	8001c5e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cc8:	f023 0312 	bic.w	r3, r3, #18
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e7e7      	b.n	8001cae <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ce0:	f043 0310 	orr.w	r3, r3, #16
 8001ce4:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001ce6:	e7f8      	b.n	8001cda <HAL_ADC_Init+0xe6>
 8001ce8:	ffe1f7fd 	.word	0xffe1f7fd
 8001cec:	ff1f0efe 	.word	0xff1f0efe

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cfe:	0412      	lsls	r2, r2, #16
 8001d00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001d0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b530      	push	{r4, r5, lr}
 8001d18:	68dc      	ldr	r4, [r3, #12]
 8001d1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	bf28      	it	cs
 8001d28:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d30:	bf98      	it	ls
 8001d32:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d38:	bf88      	it	hi
 8001d3a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	ea21 0303 	bic.w	r3, r1, r3
 8001d40:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d42:	fa05 f404 	lsl.w	r4, r5, r4
 8001d46:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	bfac      	ite	ge
 8001d52:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	4a07      	ldrlt	r2, [pc, #28]	; (8001d74 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	bfab      	itete	ge
 8001d60:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d6e:	bd30      	pop	{r4, r5, pc}
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	e000ed14 	.word	0xe000ed14

08001d78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	db08      	blt.n	8001d8e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	0942      	lsrs	r2, r0, #5
 8001d80:	f000 001f 	and.w	r0, r0, #31
 8001d84:	fa03 f000 	lsl.w	r0, r3, r0
 8001d88:	4b01      	ldr	r3, [pc, #4]	; (8001d90 <HAL_NVIC_EnableIRQ+0x18>)
 8001d8a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	3801      	subs	r0, #1
 8001d96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d9a:	d20b      	bcs.n	8001db4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	21f0      	movs	r1, #240	; 0xf0
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001daa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001db4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dbe:	b320      	cbz	r0, 8001e0a <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dc0:	2214      	movs	r2, #20
 8001dc2:	6801      	ldr	r1, [r0, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_DMA_Init+0x54>)
 8001dc6:	440b      	add	r3, r1
 8001dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dd2:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001dd4:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dd6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001dda:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dde:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	4323      	orrs	r3, r4
 8001de4:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001de6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dec:	6944      	ldr	r4, [r0, #20]
 8001dee:	4323      	orrs	r3, r4
 8001df0:	6984      	ldr	r4, [r0, #24]
 8001df2:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	69c4      	ldr	r4, [r0, #28]
 8001df6:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001df8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dfa:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8001e02:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e04:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001e06:	4618      	mov	r0, r3
}
 8001e08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e7fc      	b.n	8001e08 <HAL_DMA_Init+0x4c>
 8001e0e:	bf00      	nop
 8001e10:	bffdfff8 	.word	0xbffdfff8
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e1a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001e1e:	2c01      	cmp	r4, #1
 8001e20:	d034      	beq.n	8001e8c <HAL_DMA_Start_IT+0x74>
 8001e22:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e24:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001e28:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e2c:	42a5      	cmp	r5, r4
 8001e2e:	f04f 0600 	mov.w	r6, #0
 8001e32:	f04f 0402 	mov.w	r4, #2
 8001e36:	d127      	bne.n	8001e88 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e38:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e3c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001e40:	6826      	ldr	r6, [r4, #0]
 8001e42:	f026 0601 	bic.w	r6, r6, #1
 8001e46:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e48:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001e4c:	40bd      	lsls	r5, r7
 8001e4e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e50:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e52:	6843      	ldr	r3, [r0, #4]
 8001e54:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001e56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e58:	bf0b      	itete	eq
 8001e5a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001e5c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001e5e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001e60:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001e62:	b14b      	cbz	r3, 8001e78 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e6c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6023      	str	r3, [r4, #0]
}
 8001e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	f023 0304 	bic.w	r3, r3, #4
 8001e7e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	f043 030a 	orr.w	r3, r3, #10
 8001e86:	e7f0      	b.n	8001e6a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001e88:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	e7f2      	b.n	8001e76 <HAL_DMA_Start_IT+0x5e>

08001e90 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d006      	beq.n	8001ea6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea6:	6803      	ldr	r3, [r0, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f022 020e 	bic.w	r2, r2, #14
 8001eae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 8001ebe:	408b      	lsls	r3, r1
 8001ec0:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec6:	8403      	strh	r3, [r0, #32]
  return status; 
 8001ec8:	2000      	movs	r0, #0
}
 8001eca:	4770      	bx	lr

08001ecc <HAL_DMA_Abort_IT>:
{  
 8001ecc:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ece:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
}
 8001edc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ede:	6803      	ldr	r3, [r0, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ef0:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_DMA_Abort_IT+0x84>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01c      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x64>
 8001ef6:	3214      	adds	r2, #20
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d01b      	beq.n	8001f34 <HAL_DMA_Abort_IT+0x68>
 8001efc:	3214      	adds	r2, #20
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01a      	beq.n	8001f38 <HAL_DMA_Abort_IT+0x6c>
 8001f02:	3214      	adds	r2, #20
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d01a      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x72>
 8001f08:	3214      	adds	r2, #20
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x78>
 8001f0e:	3214      	adds	r2, #20
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf0c      	ite	eq
 8001f14:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001f18:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_DMA_Abort_IT+0x88>)
 8001f1e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f24:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001f26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f28:	b17b      	cbz	r3, 8001f4a <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8001f2a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7d5      	b.n	8001edc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f30:	2301      	movs	r3, #1
 8001f32:	e7f3      	b.n	8001f1c <HAL_DMA_Abort_IT+0x50>
 8001f34:	2310      	movs	r3, #16
 8001f36:	e7f1      	b.n	8001f1c <HAL_DMA_Abort_IT+0x50>
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	e7ee      	b.n	8001f1c <HAL_DMA_Abort_IT+0x50>
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	e7eb      	b.n	8001f1c <HAL_DMA_Abort_IT+0x50>
 8001f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f48:	e7e8      	b.n	8001f1c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	e7c6      	b.n	8001edc <HAL_DMA_Abort_IT+0x10>
 8001f4e:	bf00      	nop
 8001f50:	40020008 	.word	0x40020008
 8001f54:	40020000 	.word	0x40020000

08001f58 <HAL_DMA_IRQHandler>:
{
 8001f58:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f5a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f5c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f5e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f60:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f62:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f64:	4095      	lsls	r5, r2
 8001f66:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001f68:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f6a:	d032      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x7a>
 8001f6c:	074d      	lsls	r5, r1, #29
 8001f6e:	d530      	bpl.n	8001fd2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f74:	bf5e      	ittt	pl
 8001f76:	681a      	ldrpl	r2, [r3, #0]
 8001f78:	f022 0204 	bicpl.w	r2, r2, #4
 8001f7c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f7e:	4a3d      	ldr	r2, [pc, #244]	; (8002074 <HAL_DMA_IRQHandler+0x11c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d019      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x60>
 8001f84:	3214      	adds	r2, #20
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d018      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x64>
 8001f8a:	3214      	adds	r2, #20
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d017      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x68>
 8001f90:	3214      	adds	r2, #20
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d017      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x6e>
 8001f96:	3214      	adds	r2, #20
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d017      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x74>
 8001f9c:	3214      	adds	r2, #20
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	bf0c      	ite	eq
 8001fa2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001fa6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001faa:	4a33      	ldr	r2, [pc, #204]	; (8002078 <HAL_DMA_IRQHandler+0x120>)
 8001fac:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001fae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05c      	beq.n	800206e <HAL_DMA_IRQHandler+0x116>
}
 8001fb4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001fb6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e7f6      	b.n	8001faa <HAL_DMA_IRQHandler+0x52>
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	e7f4      	b.n	8001faa <HAL_DMA_IRQHandler+0x52>
 8001fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc4:	e7f1      	b.n	8001faa <HAL_DMA_IRQHandler+0x52>
 8001fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fca:	e7ee      	b.n	8001faa <HAL_DMA_IRQHandler+0x52>
 8001fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fd0:	e7eb      	b.n	8001faa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fd2:	2502      	movs	r5, #2
 8001fd4:	4095      	lsls	r5, r2
 8001fd6:	4225      	tst	r5, r4
 8001fd8:	d035      	beq.n	8002046 <HAL_DMA_IRQHandler+0xee>
 8001fda:	078d      	lsls	r5, r1, #30
 8001fdc:	d533      	bpl.n	8002046 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	0694      	lsls	r4, r2, #26
 8001fe2:	d406      	bmi.n	8001ff2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f022 020a 	bic.w	r2, r2, #10
 8001fea:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001fec:	2201      	movs	r2, #1
 8001fee:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ff2:	4a20      	ldr	r2, [pc, #128]	; (8002074 <HAL_DMA_IRQHandler+0x11c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d019      	beq.n	800202c <HAL_DMA_IRQHandler+0xd4>
 8001ff8:	3214      	adds	r2, #20
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d018      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
 8001ffe:	3214      	adds	r2, #20
 8002000:	4293      	cmp	r3, r2
 8002002:	d017      	beq.n	8002034 <HAL_DMA_IRQHandler+0xdc>
 8002004:	3214      	adds	r2, #20
 8002006:	4293      	cmp	r3, r2
 8002008:	d017      	beq.n	800203a <HAL_DMA_IRQHandler+0xe2>
 800200a:	3214      	adds	r2, #20
 800200c:	4293      	cmp	r3, r2
 800200e:	d017      	beq.n	8002040 <HAL_DMA_IRQHandler+0xe8>
 8002010:	3214      	adds	r2, #20
 8002012:	4293      	cmp	r3, r2
 8002014:	bf0c      	ite	eq
 8002016:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800201a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <HAL_DMA_IRQHandler+0x120>)
 8002020:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002022:	2300      	movs	r3, #0
 8002024:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002028:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800202a:	e7c1      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800202c:	2302      	movs	r3, #2
 800202e:	e7f6      	b.n	800201e <HAL_DMA_IRQHandler+0xc6>
 8002030:	2320      	movs	r3, #32
 8002032:	e7f4      	b.n	800201e <HAL_DMA_IRQHandler+0xc6>
 8002034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002038:	e7f1      	b.n	800201e <HAL_DMA_IRQHandler+0xc6>
 800203a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203e:	e7ee      	b.n	800201e <HAL_DMA_IRQHandler+0xc6>
 8002040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002044:	e7eb      	b.n	800201e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002046:	2508      	movs	r5, #8
 8002048:	4095      	lsls	r5, r2
 800204a:	4225      	tst	r5, r4
 800204c:	d00f      	beq.n	800206e <HAL_DMA_IRQHandler+0x116>
 800204e:	0709      	lsls	r1, r1, #28
 8002050:	d50d      	bpl.n	800206e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	f021 010e 	bic.w	r1, r1, #14
 8002058:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800205a:	2301      	movs	r3, #1
 800205c:	fa03 f202 	lsl.w	r2, r3, r2
 8002060:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002062:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002068:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800206a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800206c:	e7a0      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x58>
}
 800206e:	bc70      	pop	{r4, r5, r6}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40020008 	.word	0x40020008
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800207c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002080:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002082:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4f64      	ldr	r7, [pc, #400]	; (8002218 <HAL_GPIO_Init+0x19c>)
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002088:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002220 <HAL_GPIO_Init+0x1a4>
 800208c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002224 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002090:	680d      	ldr	r5, [r1, #0]
 8002092:	fa35 f406 	lsrs.w	r4, r5, r6
 8002096:	d102      	bne.n	800209e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002098:	b003      	add	sp, #12
 800209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800209e:	f04f 0801 	mov.w	r8, #1
 80020a2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80020aa:	ea38 0505 	bics.w	r5, r8, r5
 80020ae:	d17b      	bne.n	80021a8 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80020b0:	684d      	ldr	r5, [r1, #4]
 80020b2:	2d03      	cmp	r5, #3
 80020b4:	d807      	bhi.n	80020c6 <HAL_GPIO_Init+0x4a>
 80020b6:	3d01      	subs	r5, #1
 80020b8:	2d02      	cmp	r5, #2
 80020ba:	f200 8088 	bhi.w	80021ce <HAL_GPIO_Init+0x152>
 80020be:	e8df f005 	tbb	[pc, r5]
 80020c2:	9b96      	.short	0x9b96
 80020c4:	a1          	.byte	0xa1
 80020c5:	00          	.byte	0x00
 80020c6:	2d12      	cmp	r5, #18
 80020c8:	f000 8099 	beq.w	80021fe <HAL_GPIO_Init+0x182>
 80020cc:	d86e      	bhi.n	80021ac <HAL_GPIO_Init+0x130>
 80020ce:	2d11      	cmp	r5, #17
 80020d0:	f000 808f 	beq.w	80021f2 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020d4:	2cff      	cmp	r4, #255	; 0xff
 80020d6:	bf98      	it	ls
 80020d8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020da:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020de:	bf88      	it	hi
 80020e0:	f100 0a04 	addhi.w	sl, r0, #4
 80020e4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020e8:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ec:	bf88      	it	hi
 80020ee:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f0:	fa09 fb05 	lsl.w	fp, r9, r5
 80020f4:	ea28 080b 	bic.w	r8, r8, fp
 80020f8:	fa02 f505 	lsl.w	r5, r2, r5
 80020fc:	ea48 0505 	orr.w	r5, r8, r5
 8002100:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002104:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002108:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800210c:	d04c      	beq.n	80021a8 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800210e:	69bd      	ldr	r5, [r7, #24]
 8002110:	f026 0803 	bic.w	r8, r6, #3
 8002114:	f045 0501 	orr.w	r5, r5, #1
 8002118:	61bd      	str	r5, [r7, #24]
 800211a:	69bd      	ldr	r5, [r7, #24]
 800211c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002120:	f005 0501 	and.w	r5, r5, #1
 8002124:	9501      	str	r5, [sp, #4]
 8002126:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800212a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800212e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002130:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002134:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002138:	fa09 f90b 	lsl.w	r9, r9, fp
 800213c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002140:	4d39      	ldr	r5, [pc, #228]	; (8002228 <HAL_GPIO_Init+0x1ac>)
 8002142:	42a8      	cmp	r0, r5
 8002144:	d062      	beq.n	800220c <HAL_GPIO_Init+0x190>
 8002146:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800214a:	42a8      	cmp	r0, r5
 800214c:	d060      	beq.n	8002210 <HAL_GPIO_Init+0x194>
 800214e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002152:	42a8      	cmp	r0, r5
 8002154:	d05e      	beq.n	8002214 <HAL_GPIO_Init+0x198>
 8002156:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800215a:	42a8      	cmp	r0, r5
 800215c:	bf0c      	ite	eq
 800215e:	2503      	moveq	r5, #3
 8002160:	2504      	movne	r5, #4
 8002162:	fa05 f50b 	lsl.w	r5, r5, fp
 8002166:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800216a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800216e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002170:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002174:	bf14      	ite	ne
 8002176:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002178:	43a5      	biceq	r5, r4
 800217a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800217c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002182:	bf14      	ite	ne
 8002184:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002186:	43a5      	biceq	r5, r4
 8002188:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800218a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800218c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002190:	bf14      	ite	ne
 8002192:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002194:	43a5      	biceq	r5, r4
 8002196:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002198:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800219e:	bf14      	ite	ne
 80021a0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a2:	ea25 0404 	biceq.w	r4, r5, r4
 80021a6:	60dc      	str	r4, [r3, #12]
	position++;
 80021a8:	3601      	adds	r6, #1
 80021aa:	e771      	b.n	8002090 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80021ac:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800222c <HAL_GPIO_Init+0x1b0>
 80021b0:	454d      	cmp	r5, r9
 80021b2:	d00c      	beq.n	80021ce <HAL_GPIO_Init+0x152>
 80021b4:	d817      	bhi.n	80021e6 <HAL_GPIO_Init+0x16a>
 80021b6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80021ba:	454d      	cmp	r5, r9
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x152>
 80021be:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80021c2:	454d      	cmp	r5, r9
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x152>
 80021c6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80021ca:	454d      	cmp	r5, r9
 80021cc:	d182      	bne.n	80020d4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ce:	688a      	ldr	r2, [r1, #8]
 80021d0:	b1d2      	cbz	r2, 8002208 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021d2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80021d4:	bf08      	it	eq
 80021d6:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021da:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80021de:	bf18      	it	ne
 80021e0:	f8c0 8014 	strne.w	r8, [r0, #20]
 80021e4:	e776      	b.n	80020d4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80021e6:	4565      	cmp	r5, ip
 80021e8:	d0f1      	beq.n	80021ce <HAL_GPIO_Init+0x152>
 80021ea:	4575      	cmp	r5, lr
 80021ec:	e7ee      	b.n	80021cc <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ee:	68ca      	ldr	r2, [r1, #12]
          break;
 80021f0:	e770      	b.n	80020d4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f2:	68ca      	ldr	r2, [r1, #12]
 80021f4:	3204      	adds	r2, #4
          break;
 80021f6:	e76d      	b.n	80020d4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021f8:	68ca      	ldr	r2, [r1, #12]
 80021fa:	3208      	adds	r2, #8
          break;
 80021fc:	e76a      	b.n	80020d4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021fe:	68ca      	ldr	r2, [r1, #12]
 8002200:	320c      	adds	r2, #12
          break;
 8002202:	e767      	b.n	80020d4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002204:	2200      	movs	r2, #0
 8002206:	e765      	b.n	80020d4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002208:	2204      	movs	r2, #4
 800220a:	e763      	b.n	80020d4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800220c:	2500      	movs	r5, #0
 800220e:	e7a8      	b.n	8002162 <HAL_GPIO_Init+0xe6>
 8002210:	2501      	movs	r5, #1
 8002212:	e7a6      	b.n	8002162 <HAL_GPIO_Init+0xe6>
 8002214:	2502      	movs	r5, #2
 8002216:	e7a4      	b.n	8002162 <HAL_GPIO_Init+0xe6>
 8002218:	40021000 	.word	0x40021000
 800221c:	40010400 	.word	0x40010400
 8002220:	10310000 	.word	0x10310000
 8002224:	10320000 	.word	0x10320000
 8002228:	40010800 	.word	0x40010800
 800222c:	10220000 	.word	0x10220000

08002230 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002230:	b10a      	cbz	r2, 8002236 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002232:	6101      	str	r1, [r0, #16]
  }
}
 8002234:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002236:	0409      	lsls	r1, r1, #16
 8002238:	e7fb      	b.n	8002232 <HAL_GPIO_WritePin+0x2>
	...

0800223c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800223c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223e:	4604      	mov	r4, r0
 8002240:	b908      	cbnz	r0, 8002246 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8002242:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8002244:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800224a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800224e:	b91b      	cbnz	r3, 8002258 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002250:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002254:	f7ff f8d6 	bl	8001404 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002258:	2324      	movs	r3, #36	; 0x24
 800225a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002276:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002278:	f000 fafa 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800227c:	4a3f      	ldr	r2, [pc, #252]	; (800237c <HAL_I2C_Init+0x140>)
 800227e:	6863      	ldr	r3, [r4, #4]
 8002280:	4293      	cmp	r3, r2
 8002282:	bf94      	ite	ls
 8002284:	4a3e      	ldrls	r2, [pc, #248]	; (8002380 <HAL_I2C_Init+0x144>)
 8002286:	4a3f      	ldrhi	r2, [pc, #252]	; (8002384 <HAL_I2C_Init+0x148>)
 8002288:	4290      	cmp	r0, r2
 800228a:	bf8c      	ite	hi
 800228c:	2200      	movhi	r2, #0
 800228e:	2201      	movls	r2, #1
 8002290:	2a00      	cmp	r2, #0
 8002292:	d1d6      	bne.n	8002242 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002294:	4e39      	ldr	r6, [pc, #228]	; (800237c <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002296:	493c      	ldr	r1, [pc, #240]	; (8002388 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002298:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800229a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229e:	bf88      	it	hi
 80022a0:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a6:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022aa:	6855      	ldr	r5, [r2, #4]
 80022ac:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80022b0:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b4:	bf82      	ittt	hi
 80022b6:	4371      	mulhi	r1, r6
 80022b8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80022bc:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c0:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022c2:	6a15      	ldr	r5, [r2, #32]
 80022c4:	3101      	adds	r1, #1
 80022c6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80022ca:	4329      	orrs	r1, r5
 80022cc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ce:	69d1      	ldr	r1, [r2, #28]
 80022d0:	4d2a      	ldr	r5, [pc, #168]	; (800237c <HAL_I2C_Init+0x140>)
 80022d2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80022d6:	42ab      	cmp	r3, r5
 80022d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80022dc:	d832      	bhi.n	8002344 <HAL_I2C_Init+0x108>
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	f640 70fc 	movw	r0, #4092	; 0xffc
 80022ea:	4203      	tst	r3, r0
 80022ec:	d042      	beq.n	8002374 <HAL_I2C_Init+0x138>
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	430b      	orrs	r3, r1
 80022f4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f6:	6811      	ldr	r1, [r2, #0]
 80022f8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80022fc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002300:	4303      	orrs	r3, r0
 8002302:	430b      	orrs	r3, r1
 8002304:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002306:	6891      	ldr	r1, [r2, #8]
 8002308:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800230c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002310:	4303      	orrs	r3, r0
 8002312:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002316:	430b      	orrs	r3, r1
 8002318:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800231a:	68d1      	ldr	r1, [r2, #12]
 800231c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002320:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002324:	4303      	orrs	r3, r0
 8002326:	430b      	orrs	r3, r1
 8002328:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800232a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002334:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002336:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002338:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800233c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800233e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002342:	e77f      	b.n	8002244 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002344:	68a5      	ldr	r5, [r4, #8]
 8002346:	b955      	cbnz	r5, 800235e <HAL_I2C_Init+0x122>
 8002348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800234c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002356:	b17b      	cbz	r3, 8002378 <HAL_I2C_Init+0x13c>
 8002358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235c:	e7c9      	b.n	80022f2 <HAL_I2C_Init+0xb6>
 800235e:	2519      	movs	r5, #25
 8002360:	436b      	muls	r3, r5
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	b123      	cbz	r3, 8002378 <HAL_I2C_Init+0x13c>
 800236e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002372:	e7be      	b.n	80022f2 <HAL_I2C_Init+0xb6>
 8002374:	2304      	movs	r3, #4
 8002376:	e7bc      	b.n	80022f2 <HAL_I2C_Init+0xb6>
 8002378:	2301      	movs	r3, #1
 800237a:	e7ba      	b.n	80022f2 <HAL_I2C_Init+0xb6>
 800237c:	000186a0 	.word	0x000186a0
 8002380:	001e847f 	.word	0x001e847f
 8002384:	003d08ff 	.word	0x003d08ff
 8002388:	000f4240 	.word	0x000f4240

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	4605      	mov	r5, r0
 8002392:	b338      	cbz	r0, 80023e4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	07db      	lsls	r3, r3, #31
 8002398:	d410      	bmi.n	80023bc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	682b      	ldr	r3, [r5, #0]
 800239c:	079f      	lsls	r7, r3, #30
 800239e:	d45e      	bmi.n	800245e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	0719      	lsls	r1, r3, #28
 80023a4:	f100 8095 	bmi.w	80024d2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	075a      	lsls	r2, r3, #29
 80023ac:	f100 80c1 	bmi.w	8002532 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b0:	69e8      	ldr	r0, [r5, #28]
 80023b2:	2800      	cmp	r0, #0
 80023b4:	f040 812c 	bne.w	8002610 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80023b8:	2000      	movs	r0, #0
 80023ba:	e029      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	4c90      	ldr	r4, [pc, #576]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023be:	6863      	ldr	r3, [r4, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d10a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
 80023d2:	6863      	ldr	r3, [r4, #4]
 80023d4:	03de      	lsls	r6, r3, #15
 80023d6:	d507      	bpl.n	80023e8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	039c      	lsls	r4, r3, #14
 80023dc:	d5dd      	bpl.n	800239a <HAL_RCC_OscConfig+0xe>
 80023de:	686b      	ldr	r3, [r5, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1da      	bne.n	800239a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80023e4:	2001      	movs	r0, #1
 80023e6:	e013      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	686b      	ldr	r3, [r5, #4]
 80023ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ee:	d112      	bne.n	8002416 <HAL_RCC_OscConfig+0x8a>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023f8:	f7ff fa3c 	bl	8001874 <HAL_GetTick>
 80023fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	0398      	lsls	r0, r3, #14
 8002402:	d4ca      	bmi.n	800239a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff fa36 	bl	8001874 <HAL_GetTick>
 8002408:	1b80      	subs	r0, r0, r6
 800240a:	2864      	cmp	r0, #100	; 0x64
 800240c:	d9f7      	bls.n	80023fe <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
}
 8002410:	b002      	add	sp, #8
 8002412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	b99b      	cbnz	r3, 8002440 <HAL_RCC_OscConfig+0xb4>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002428:	f7ff fa24 	bl	8001874 <HAL_GetTick>
 800242c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	0399      	lsls	r1, r3, #14
 8002432:	d5b2      	bpl.n	800239a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fa1e 	bl	8001874 <HAL_GetTick>
 8002438:	1b80      	subs	r0, r0, r6
 800243a:	2864      	cmp	r0, #100	; 0x64
 800243c:	d9f7      	bls.n	800242e <HAL_RCC_OscConfig+0xa2>
 800243e:	e7e6      	b.n	800240e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	d103      	bne.n	8002450 <HAL_RCC_OscConfig+0xc4>
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	e7cf      	b.n	80023f0 <HAL_RCC_OscConfig+0x64>
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245c:	e7cb      	b.n	80023f6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800245e:	4c68      	ldr	r4, [pc, #416]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	f013 0f0c 	tst.w	r3, #12
 8002466:	d007      	beq.n	8002478 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002468:	6863      	ldr	r3, [r4, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d110      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
 8002472:	6863      	ldr	r3, [r4, #4]
 8002474:	03da      	lsls	r2, r3, #15
 8002476:	d40d      	bmi.n	8002494 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	079b      	lsls	r3, r3, #30
 800247c:	d502      	bpl.n	8002484 <HAL_RCC_OscConfig+0xf8>
 800247e:	692b      	ldr	r3, [r5, #16]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d1af      	bne.n	80023e4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	696a      	ldr	r2, [r5, #20]
 8002488:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800248c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002490:	6023      	str	r3, [r4, #0]
 8002492:	e785      	b.n	80023a0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002494:	692a      	ldr	r2, [r5, #16]
 8002496:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <HAL_RCC_OscConfig+0x278>)
 8002498:	b16a      	cbz	r2, 80024b6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800249e:	f7ff f9e9 	bl	8001874 <HAL_GetTick>
 80024a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	079f      	lsls	r7, r3, #30
 80024a8:	d4ec      	bmi.n	8002484 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff f9e3 	bl	8001874 <HAL_GetTick>
 80024ae:	1b80      	subs	r0, r0, r6
 80024b0:	2802      	cmp	r0, #2
 80024b2:	d9f7      	bls.n	80024a4 <HAL_RCC_OscConfig+0x118>
 80024b4:	e7ab      	b.n	800240e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80024b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024b8:	f7ff f9dc 	bl	8001874 <HAL_GetTick>
 80024bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	0798      	lsls	r0, r3, #30
 80024c2:	f57f af6d 	bpl.w	80023a0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c6:	f7ff f9d5 	bl	8001874 <HAL_GetTick>
 80024ca:	1b80      	subs	r0, r0, r6
 80024cc:	2802      	cmp	r0, #2
 80024ce:	d9f6      	bls.n	80024be <HAL_RCC_OscConfig+0x132>
 80024d0:	e79d      	b.n	800240e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d2:	69aa      	ldr	r2, [r5, #24]
 80024d4:	4e4a      	ldr	r6, [pc, #296]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCC_OscConfig+0x278>)
 80024d8:	b1e2      	cbz	r2, 8002514 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80024da:	2201      	movs	r2, #1
 80024dc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80024e0:	f7ff f9c8 	bl	8001874 <HAL_GetTick>
 80024e4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80024e8:	079b      	lsls	r3, r3, #30
 80024ea:	d50d      	bpl.n	8002508 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80024f0:	4b45      	ldr	r3, [pc, #276]	; (8002608 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024f8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80024fa:	bf00      	nop
  }
  while (Delay --);
 80024fc:	9b01      	ldr	r3, [sp, #4]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	9201      	str	r2, [sp, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_RCC_OscConfig+0x16e>
 8002506:	e74f      	b.n	80023a8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002508:	f7ff f9b4 	bl	8001874 <HAL_GetTick>
 800250c:	1b00      	subs	r0, r0, r4
 800250e:	2802      	cmp	r0, #2
 8002510:	d9e9      	bls.n	80024e6 <HAL_RCC_OscConfig+0x15a>
 8002512:	e77c      	b.n	800240e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002514:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002518:	f7ff f9ac 	bl	8001874 <HAL_GetTick>
 800251c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002520:	079f      	lsls	r7, r3, #30
 8002522:	f57f af41 	bpl.w	80023a8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7ff f9a5 	bl	8001874 <HAL_GetTick>
 800252a:	1b00      	subs	r0, r0, r4
 800252c:	2802      	cmp	r0, #2
 800252e:	d9f6      	bls.n	800251e <HAL_RCC_OscConfig+0x192>
 8002530:	e76d      	b.n	800240e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4c33      	ldr	r4, [pc, #204]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002534:	69e3      	ldr	r3, [r4, #28]
 8002536:	00d8      	lsls	r0, r3, #3
 8002538:	d424      	bmi.n	8002584 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800253a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	69e3      	ldr	r3, [r4, #28]
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	61e3      	str	r3, [r4, #28]
 8002544:	69e3      	ldr	r3, [r4, #28]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4e2f      	ldr	r6, [pc, #188]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002550:	6833      	ldr	r3, [r6, #0]
 8002552:	05d9      	lsls	r1, r3, #23
 8002554:	d518      	bpl.n	8002588 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002556:	68eb      	ldr	r3, [r5, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d126      	bne.n	80025aa <HAL_RCC_OscConfig+0x21e>
 800255c:	6a23      	ldr	r3, [r4, #32]
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002564:	f7ff f986 	bl	8001874 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800256c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	6a23      	ldr	r3, [r4, #32]
 8002570:	079b      	lsls	r3, r3, #30
 8002572:	d53f      	bpl.n	80025f4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002574:	2f00      	cmp	r7, #0
 8002576:	f43f af1b 	beq.w	80023b0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800257a:	69e3      	ldr	r3, [r4, #28]
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	61e3      	str	r3, [r4, #28]
 8002582:	e715      	b.n	80023b0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002584:	2700      	movs	r7, #0
 8002586:	e7e2      	b.n	800254e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002588:	6833      	ldr	r3, [r6, #0]
 800258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002590:	f7ff f970 	bl	8001874 <HAL_GetTick>
 8002594:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	6833      	ldr	r3, [r6, #0]
 8002598:	05da      	lsls	r2, r3, #23
 800259a:	d4dc      	bmi.n	8002556 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7ff f96a 	bl	8001874 <HAL_GetTick>
 80025a0:	eba0 0008 	sub.w	r0, r0, r8
 80025a4:	2864      	cmp	r0, #100	; 0x64
 80025a6:	d9f6      	bls.n	8002596 <HAL_RCC_OscConfig+0x20a>
 80025a8:	e731      	b.n	800240e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025aa:	b9ab      	cbnz	r3, 80025d8 <HAL_RCC_OscConfig+0x24c>
 80025ac:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6223      	str	r3, [r4, #32]
 80025b8:	6a23      	ldr	r3, [r4, #32]
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80025c0:	f7ff f958 	bl	8001874 <HAL_GetTick>
 80025c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c6:	6a23      	ldr	r3, [r4, #32]
 80025c8:	0798      	lsls	r0, r3, #30
 80025ca:	d5d3      	bpl.n	8002574 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7ff f952 	bl	8001874 <HAL_GetTick>
 80025d0:	1b80      	subs	r0, r0, r6
 80025d2:	4540      	cmp	r0, r8
 80025d4:	d9f7      	bls.n	80025c6 <HAL_RCC_OscConfig+0x23a>
 80025d6:	e71a      	b.n	800240e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d8:	2b05      	cmp	r3, #5
 80025da:	6a23      	ldr	r3, [r4, #32]
 80025dc:	d103      	bne.n	80025e6 <HAL_RCC_OscConfig+0x25a>
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6223      	str	r3, [r4, #32]
 80025e4:	e7ba      	b.n	800255c <HAL_RCC_OscConfig+0x1d0>
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6223      	str	r3, [r4, #32]
 80025ec:	6a23      	ldr	r3, [r4, #32]
 80025ee:	f023 0304 	bic.w	r3, r3, #4
 80025f2:	e7b6      	b.n	8002562 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7ff f93e 	bl	8001874 <HAL_GetTick>
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	4540      	cmp	r0, r8
 80025fc:	d9b7      	bls.n	800256e <HAL_RCC_OscConfig+0x1e2>
 80025fe:	e706      	b.n	800240e <HAL_RCC_OscConfig+0x82>
 8002600:	40021000 	.word	0x40021000
 8002604:	42420000 	.word	0x42420000
 8002608:	20000004 	.word	0x20000004
 800260c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4c2a      	ldr	r4, [pc, #168]	; (80026bc <HAL_RCC_OscConfig+0x330>)
 8002612:	6863      	ldr	r3, [r4, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d03e      	beq.n	800269a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	2200      	movs	r2, #0
 800261e:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x334>)
 8002620:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002622:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002624:	d12c      	bne.n	8002680 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002626:	f7ff f925 	bl	8001874 <HAL_GetTick>
 800262a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	0199      	lsls	r1, r3, #6
 8002630:	d420      	bmi.n	8002674 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002632:	6a2b      	ldr	r3, [r5, #32]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263a:	6862      	ldr	r2, [r4, #4]
 800263c:	68a9      	ldr	r1, [r5, #8]
 800263e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002642:	430a      	orrs	r2, r1
 8002644:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002646:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002648:	6862      	ldr	r2, [r4, #4]
 800264a:	430b      	orrs	r3, r1
 800264c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002650:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002652:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCC_OscConfig+0x334>)
 8002658:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800265a:	f7ff f90b 	bl	8001874 <HAL_GetTick>
 800265e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	019a      	lsls	r2, r3, #6
 8002664:	f53f aea8 	bmi.w	80023b8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff f904 	bl	8001874 <HAL_GetTick>
 800266c:	1b40      	subs	r0, r0, r5
 800266e:	2802      	cmp	r0, #2
 8002670:	d9f6      	bls.n	8002660 <HAL_RCC_OscConfig+0x2d4>
 8002672:	e6cc      	b.n	800240e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff f8fe 	bl	8001874 <HAL_GetTick>
 8002678:	1b80      	subs	r0, r0, r6
 800267a:	2802      	cmp	r0, #2
 800267c:	d9d6      	bls.n	800262c <HAL_RCC_OscConfig+0x2a0>
 800267e:	e6c6      	b.n	800240e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002680:	f7ff f8f8 	bl	8001874 <HAL_GetTick>
 8002684:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	f57f ae95 	bpl.w	80023b8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7ff f8f1 	bl	8001874 <HAL_GetTick>
 8002692:	1b40      	subs	r0, r0, r5
 8002694:	2802      	cmp	r0, #2
 8002696:	d9f6      	bls.n	8002686 <HAL_RCC_OscConfig+0x2fa>
 8002698:	e6b9      	b.n	800240e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269a:	2801      	cmp	r0, #1
 800269c:	f43f aeb8 	beq.w	8002410 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80026a0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	6a2a      	ldr	r2, [r5, #32]
 80026a4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80026a8:	4291      	cmp	r1, r2
 80026aa:	f47f ae9b 	bne.w	80023e4 <HAL_RCC_OscConfig+0x58>
 80026ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	f43f ae7f 	beq.w	80023b8 <HAL_RCC_OscConfig+0x2c>
 80026ba:	e693      	b.n	80023e4 <HAL_RCC_OscConfig+0x58>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	42420000 	.word	0x42420000

080026c4 <HAL_RCC_GetSysClockFreq>:
{
 80026c4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80026c8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ca:	ac02      	add	r4, sp, #8
 80026cc:	f103 0510 	add.w	r5, r3, #16
 80026d0:	4622      	mov	r2, r4
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	3308      	adds	r3, #8
 80026d8:	c203      	stmia	r2!, {r0, r1}
 80026da:	42ab      	cmp	r3, r5
 80026dc:	4614      	mov	r4, r2
 80026de:	d1f7      	bne.n	80026d0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026e0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80026e4:	4911      	ldr	r1, [pc, #68]	; (800272c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026e6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80026ea:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80026ec:	f003 020c 	and.w	r2, r3, #12
 80026f0:	2a08      	cmp	r2, #8
 80026f2:	d117      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80026f8:	3218      	adds	r2, #24
 80026fa:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026fc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fe:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002702:	d50c      	bpl.n	800271e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002704:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002708:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800270c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270e:	3318      	adds	r3, #24
 8002710:	446b      	add	r3, sp
 8002712:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002716:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800271a:	b007      	add	sp, #28
 800271c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetSysClockFreq+0x70>)
 8002720:	4358      	muls	r0, r3
 8002722:	e7fa      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002726:	e7f8      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x56>
 8002728:	08005cba 	.word	0x08005cba
 800272c:	40021000 	.word	0x40021000
 8002730:	007a1200 	.word	0x007a1200
 8002734:	003d0900 	.word	0x003d0900

08002738 <HAL_RCC_ClockConfig>:
{
 8002738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800273e:	4604      	mov	r4, r0
 8002740:	b910      	cbnz	r0, 8002748 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002742:	2001      	movs	r0, #1
}
 8002744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4a44      	ldr	r2, [pc, #272]	; (800285c <HAL_RCC_ClockConfig+0x124>)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	428b      	cmp	r3, r1
 8002752:	d328      	bcc.n	80027a6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	6821      	ldr	r1, [r4, #0]
 8002756:	078e      	lsls	r6, r1, #30
 8002758:	d430      	bmi.n	80027bc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	07ca      	lsls	r2, r1, #31
 800275c:	d443      	bmi.n	80027e6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800275e:	4a3f      	ldr	r2, [pc, #252]	; (800285c <HAL_RCC_ClockConfig+0x124>)
 8002760:	6813      	ldr	r3, [r2, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	42ab      	cmp	r3, r5
 8002768:	d865      	bhi.n	8002836 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	4d3c      	ldr	r5, [pc, #240]	; (8002860 <HAL_RCC_ClockConfig+0x128>)
 800276e:	f012 0f04 	tst.w	r2, #4
 8002772:	d16c      	bne.n	800284e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	0713      	lsls	r3, r2, #28
 8002776:	d506      	bpl.n	8002786 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002778:	686b      	ldr	r3, [r5, #4]
 800277a:	6922      	ldr	r2, [r4, #16]
 800277c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002780:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002784:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002786:	f7ff ff9d 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 800278a:	686b      	ldr	r3, [r5, #4]
 800278c:	4a35      	ldr	r2, [pc, #212]	; (8002864 <HAL_RCC_ClockConfig+0x12c>)
 800278e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	40d8      	lsrs	r0, r3
 8002796:	4b34      	ldr	r3, [pc, #208]	; (8002868 <HAL_RCC_ClockConfig+0x130>)
 8002798:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_ClockConfig+0x134>)
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	f7ff f827 	bl	80017f0 <HAL_InitTick>
  return HAL_OK;
 80027a2:	2000      	movs	r0, #0
 80027a4:	e7ce      	b.n	8002744 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	f023 0307 	bic.w	r3, r3, #7
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	428b      	cmp	r3, r1
 80027b8:	d1c3      	bne.n	8002742 <HAL_RCC_ClockConfig+0xa>
 80027ba:	e7cb      	b.n	8002754 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_RCC_ClockConfig+0x128>)
 80027be:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c2:	bf1e      	ittt	ne
 80027c4:	685a      	ldrne	r2, [r3, #4]
 80027c6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80027ca:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ce:	bf42      	ittt	mi
 80027d0:	685a      	ldrmi	r2, [r3, #4]
 80027d2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80027d6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	68a0      	ldr	r0, [r4, #8]
 80027dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027e0:	4302      	orrs	r2, r0
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	e7b9      	b.n	800275a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	6862      	ldr	r2, [r4, #4]
 80027e8:	4e1d      	ldr	r6, [pc, #116]	; (8002860 <HAL_RCC_ClockConfig+0x128>)
 80027ea:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ec:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	d11a      	bne.n	8002826 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	d0a5      	beq.n	8002742 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fc:	f023 0303 	bic.w	r3, r3, #3
 8002800:	4313      	orrs	r3, r2
 8002802:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002804:	f7ff f836 	bl	8001874 <HAL_GetTick>
 8002808:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	6873      	ldr	r3, [r6, #4]
 800280c:	6862      	ldr	r2, [r4, #4]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002816:	d0a2      	beq.n	800275e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7ff f82c 	bl	8001874 <HAL_GetTick>
 800281c:	1bc0      	subs	r0, r0, r7
 800281e:	4540      	cmp	r0, r8
 8002820:	d9f3      	bls.n	800280a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002822:	2003      	movs	r0, #3
 8002824:	e78e      	b.n	8002744 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	2a02      	cmp	r2, #2
 8002828:	d102      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800282e:	e7e1      	b.n	80027f4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	f013 0f02 	tst.w	r3, #2
 8002834:	e7de      	b.n	80027f4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	f023 0307 	bic.w	r3, r3, #7
 800283c:	432b      	orrs	r3, r5
 800283e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002840:	6813      	ldr	r3, [r2, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	42ab      	cmp	r3, r5
 8002848:	f47f af7b 	bne.w	8002742 <HAL_RCC_ClockConfig+0xa>
 800284c:	e78d      	b.n	800276a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284e:	686b      	ldr	r3, [r5, #4]
 8002850:	68e1      	ldr	r1, [r4, #12]
 8002852:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002856:	430b      	orrs	r3, r1
 8002858:	606b      	str	r3, [r5, #4]
 800285a:	e78b      	b.n	8002774 <HAL_RCC_ClockConfig+0x3c>
 800285c:	40022000 	.word	0x40022000
 8002860:	40021000 	.word	0x40021000
 8002864:	08005ca2 	.word	0x08005ca2
 8002868:	20000004 	.word	0x20000004
 800286c:	2000000c 	.word	0x2000000c

08002870 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	4a03      	ldr	r2, [pc, #12]	; (800288c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800287e:	6810      	ldr	r0, [r2, #0]
}
 8002880:	40d8      	lsrs	r0, r3
 8002882:	4770      	bx	lr
 8002884:	40021000 	.word	0x40021000
 8002888:	08005cb2 	.word	0x08005cb2
 800288c:	20000004 	.word	0x20000004

08002890 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800289e:	6810      	ldr	r0, [r2, #0]
}
 80028a0:	40d8      	lsrs	r0, r3
 80028a2:	4770      	bx	lr
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08005cb2 	.word	0x08005cb2
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b0:	6803      	ldr	r3, [r0, #0]
{
 80028b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b6:	07d9      	lsls	r1, r3, #31
{
 80028b8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028ba:	d520      	bpl.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028bc:	4c36      	ldr	r4, [pc, #216]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028be:	69e3      	ldr	r3, [r4, #28]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	d432      	bmi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80028c4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	69e3      	ldr	r3, [r4, #28]
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	61e3      	str	r3, [r4, #28]
 80028ce:	69e3      	ldr	r3, [r4, #28]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4f30      	ldr	r7, [pc, #192]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	d526      	bpl.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028e6:	d136      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e8:	6a23      	ldr	r3, [r4, #32]
 80028ea:	686a      	ldr	r2, [r5, #4]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	4313      	orrs	r3, r2
 80028f2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028f4:	b11e      	cbz	r6, 80028fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f6:	69e3      	ldr	r3, [r4, #28]
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028fe:	6828      	ldr	r0, [r5, #0]
 8002900:	0783      	lsls	r3, r0, #30
 8002902:	d506      	bpl.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002904:	4924      	ldr	r1, [pc, #144]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002906:	68ab      	ldr	r3, [r5, #8]
 8002908:	684a      	ldr	r2, [r1, #4]
 800290a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800290e:	431a      	orrs	r2, r3
 8002910:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002912:	f010 0010 	ands.w	r0, r0, #16
 8002916:	d01b      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002918:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800291a:	68e9      	ldr	r1, [r5, #12]
 800291c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800291e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002920:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002924:	430b      	orrs	r3, r1
 8002926:	6053      	str	r3, [r2, #4]
 8002928:	e012      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800292a:	2600      	movs	r6, #0
 800292c:	e7d4      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002936:	f7fe ff9d 	bl	8001874 <HAL_GetTick>
 800293a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	05d8      	lsls	r0, r3, #23
 8002940:	d4ce      	bmi.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe ff97 	bl	8001874 <HAL_GetTick>
 8002946:	eba0 0008 	sub.w	r0, r0, r8
 800294a:	2864      	cmp	r0, #100	; 0x64
 800294c:	d9f6      	bls.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800294e:	2003      	movs	r0, #3
}
 8002950:	b002      	add	sp, #8
 8002952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002956:	686a      	ldr	r2, [r5, #4]
 8002958:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800295c:	429a      	cmp	r2, r3
 800295e:	d0c3      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002960:	2001      	movs	r0, #1
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002964:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002966:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800296a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800296c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002970:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8002974:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002976:	07d9      	lsls	r1, r3, #31
 8002978:	d5b6      	bpl.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800297a:	f7fe ff7b 	bl	8001874 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002982:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	6a23      	ldr	r3, [r4, #32]
 8002986:	079a      	lsls	r2, r3, #30
 8002988:	d4ae      	bmi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe ff73 	bl	8001874 <HAL_GetTick>
 800298e:	1bc0      	subs	r0, r0, r7
 8002990:	4540      	cmp	r0, r8
 8002992:	d9f7      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002994:	e7db      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	40007000 	.word	0x40007000
 80029a0:	42420000 	.word	0x42420000

080029a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029a6:	4604      	mov	r4, r0
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d051      	beq.n	8002a50 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d14a      	bne.n	8002a48 <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029b2:	6842      	ldr	r2, [r0, #4]
 80029b4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80029b8:	d000      	beq.n	80029bc <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ba:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029c0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80029c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029c8:	b923      	cbnz	r3, 80029d4 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ca:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80029cc:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80029d0:	f7fe fd4a 	bl	8001468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d4:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029d6:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80029d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80029dc:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029de:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80029e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e6:	6863      	ldr	r3, [r4, #4]
 80029e8:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80029ec:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80029f0:	4303      	orrs	r3, r0
 80029f2:	68e0      	ldr	r0, [r4, #12]
 80029f4:	69a1      	ldr	r1, [r4, #24]
 80029f6:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80029fa:	4303      	orrs	r3, r0
 80029fc:	6920      	ldr	r0, [r4, #16]
 80029fe:	f000 0002 	and.w	r0, r0, #2
 8002a02:	4303      	orrs	r3, r0
 8002a04:	6960      	ldr	r0, [r4, #20]
 8002a06:	f000 0001 	and.w	r0, r0, #1
 8002a0a:	4303      	orrs	r3, r0
 8002a0c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002a10:	4303      	orrs	r3, r0
 8002a12:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a14:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a16:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002a1a:	4303      	orrs	r3, r0
 8002a1c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a1e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a22:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002a26:	4303      	orrs	r3, r0
 8002a28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a2a:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a32:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a34:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a36:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a3c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002a3e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a40:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a42:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002a46:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a48:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a4e:	e7b5      	b.n	80029bc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002a50:	2001      	movs	r0, #1
 8002a52:	e7f8      	b.n	8002a46 <HAL_SPI_Init+0xa2>

08002a54 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a54:	6a03      	ldr	r3, [r0, #32]
{
 8002a56:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a62:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a66:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002a6a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a6c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002a6e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002a72:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a74:	4d0a      	ldr	r5, [pc, #40]	; (8002aa0 <TIM_OC1_SetConfig+0x4c>)
 8002a76:	42a8      	cmp	r0, r5
 8002a78:	d10b      	bne.n	8002a92 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a7a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a7c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002a80:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a82:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a86:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002a8a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a90:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a92:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a94:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a96:	684a      	ldr	r2, [r1, #4]
 8002a98:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9a:	6203      	str	r3, [r0, #32]
}
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00

08002aa4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aa4:	6a03      	ldr	r3, [r0, #32]
{
 8002aa6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ab2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002aba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002abc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002abe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ac2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ac6:	4d0b      	ldr	r5, [pc, #44]	; (8002af4 <TIM_OC3_SetConfig+0x50>)
 8002ac8:	42a8      	cmp	r0, r5
 8002aca:	d10d      	bne.n	8002ae8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002acc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ad2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ada:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002ade:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ae4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aec:	684a      	ldr	r2, [r1, #4]
 8002aee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af0:	6203      	str	r3, [r0, #32]
}
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	40012c00 	.word	0x40012c00

08002af8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002af8:	6a03      	ldr	r3, [r0, #32]
{
 8002afa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b06:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b0a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b12:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002b14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1c:	4d06      	ldr	r5, [pc, #24]	; (8002b38 <TIM_OC4_SetConfig+0x40>)
 8002b1e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b20:	bf02      	ittt	eq
 8002b22:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b24:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b28:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b2e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b30:	684a      	ldr	r2, [r1, #4]
 8002b32:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b34:	6203      	str	r3, [r0, #32]
}
 8002b36:	bd30      	pop	{r4, r5, pc}
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002b3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d11c      	bne.n	8002b7e <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b46:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4c:	6803      	ldr	r3, [r0, #0]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00a      	beq.n	8002b68 <HAL_TIM_Base_Start+0x2c>
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b56:	d007      	beq.n	8002b68 <HAL_TIM_Base_Start+0x2c>
 8002b58:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <HAL_TIM_Base_Start+0x2c>
 8002b60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6e:	2a06      	cmp	r2, #6
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b7a:	2000      	movs	r0, #0
}
 8002b7c:	4770      	bx	lr
    return HAL_ERROR;
 8002b7e:	2001      	movs	r0, #1
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40012c00 	.word	0x40012c00

08002b88 <HAL_TIM_PWM_MspInit>:
 8002b88:	4770      	bx	lr

08002b8a <TIM_DMADelayPulseCplt>:
{
 8002b8a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b90:	4282      	cmp	r2, r0
 8002b92:	d10b      	bne.n	8002bac <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002b98:	6992      	ldr	r2, [r2, #24]
 8002b9a:	b90a      	cbnz	r2, 8002ba0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f001 f8b1 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	7723      	strb	r3, [r4, #28]
}
 8002baa:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bae:	4283      	cmp	r3, r0
 8002bb0:	d108      	bne.n	8002bc4 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f1      	bne.n	8002ba0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002bc2:	e7ed      	b.n	8002ba0 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bc6:	4283      	cmp	r3, r0
 8002bc8:	d108      	bne.n	8002bdc <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bca:	2204      	movs	r2, #4
 8002bcc:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e5      	bne.n	8002ba0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002bda:	e7e1      	b.n	8002ba0 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002bdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bde:	4283      	cmp	r3, r0
 8002be0:	d1de      	bne.n	8002ba0 <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be2:	2208      	movs	r2, #8
 8002be4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1d9      	bne.n	8002ba0 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	2301      	movs	r3, #1
 8002bee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002bf2:	e7d5      	b.n	8002ba0 <TIM_DMADelayPulseCplt+0x16>

08002bf4 <TIM_DMADelayPulseHalfCplt>:
{
 8002bf4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bfa:	4283      	cmp	r3, r0
 8002bfc:	d107      	bne.n	8002c0e <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfe:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c00:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002c02:	4620      	mov	r0, r4
 8002c04:	f001 f868 	bl	8003cd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	7723      	strb	r3, [r4, #28]
}
 8002c0c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c10:	4283      	cmp	r3, r0
 8002c12:	d101      	bne.n	8002c18 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c14:	2302      	movs	r3, #2
 8002c16:	e7f3      	b.n	8002c00 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c1a:	4283      	cmp	r3, r0
 8002c1c:	d101      	bne.n	8002c22 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e7ee      	b.n	8002c00 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c24:	4283      	cmp	r3, r0
 8002c26:	d1ec      	bne.n	8002c02 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	e7e9      	b.n	8002c00 <TIM_DMADelayPulseHalfCplt+0xc>

08002c2c <HAL_TIM_ErrorCallback>:
 8002c2c:	4770      	bx	lr

08002c2e <TIM_DMAError>:
{
 8002c2e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c30:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c34:	4283      	cmp	r3, r0
 8002c36:	d109      	bne.n	8002c4c <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff fff3 	bl	8002c2c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	2300      	movs	r3, #0
 8002c48:	7723      	strb	r3, [r4, #28]
}
 8002c4a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c4e:	4283      	cmp	r3, r0
 8002c50:	d105      	bne.n	8002c5e <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c52:	2302      	movs	r3, #2
 8002c54:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c56:	2301      	movs	r3, #1
 8002c58:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002c5c:	e7f0      	b.n	8002c40 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c60:	4283      	cmp	r3, r0
 8002c62:	f04f 0301 	mov.w	r3, #1
 8002c66:	d104      	bne.n	8002c72 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c68:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6e:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	e7e6      	b.n	8002c40 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c72:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c74:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c76:	bf03      	ittte	eq
 8002c78:	2208      	moveq	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c7a:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7e:	7722      	strbeq	r2, [r4, #28]
    htim->State = HAL_TIM_STATE_READY;
 8002c80:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8002c84:	e7dc      	b.n	8002c40 <TIM_DMAError+0x12>
	...

08002c88 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c88:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002c8a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	4290      	cmp	r0, r2
 8002c8e:	d00a      	beq.n	8002ca6 <TIM_Base_SetConfig+0x1e>
 8002c90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c94:	d007      	beq.n	8002ca6 <TIM_Base_SetConfig+0x1e>
 8002c96:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c9a:	4290      	cmp	r0, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_Base_SetConfig+0x1e>
 8002c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ca2:	4290      	cmp	r0, r2
 8002ca4:	d115      	bne.n	8002cd2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002ca6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cae:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <TIM_Base_SetConfig+0x6c>)
 8002cb0:	4290      	cmp	r0, r2
 8002cb2:	d00a      	beq.n	8002cca <TIM_Base_SetConfig+0x42>
 8002cb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cb8:	d007      	beq.n	8002cca <TIM_Base_SetConfig+0x42>
 8002cba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cbe:	4290      	cmp	r0, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_Base_SetConfig+0x42>
 8002cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cc6:	4290      	cmp	r0, r2
 8002cc8:	d103      	bne.n	8002cd2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd2:	694a      	ldr	r2, [r1, #20]
 8002cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002cda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	688b      	ldr	r3, [r1, #8]
 8002cde:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ce0:	680b      	ldr	r3, [r1, #0]
 8002ce2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <TIM_Base_SetConfig+0x6c>)
 8002ce6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce8:	bf04      	itt	eq
 8002cea:	690b      	ldreq	r3, [r1, #16]
 8002cec:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	6143      	str	r3, [r0, #20]
}
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00

08002cf8 <HAL_TIM_Base_Init>:
{
 8002cf8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	b330      	cbz	r0, 8002d4c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d06:	b91b      	cbnz	r3, 8002d10 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d0c:	f7fe fc06 	bl	800151c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d12:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	1d21      	adds	r1, r4, #4
 8002d1a:	f7ff ffb5 	bl	8002c88 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d1e:	2301      	movs	r3, #1
  return HAL_OK;
 8002d20:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d22:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002d2a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002d4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	e7fc      	b.n	8002d4a <HAL_TIM_Base_Init+0x52>

08002d50 <HAL_TIM_PWM_Init>:
{
 8002d50:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002d52:	4604      	mov	r4, r0
 8002d54:	b330      	cbz	r0, 8002da4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d5e:	b91b      	cbnz	r3, 8002d68 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002d64:	f7ff ff10 	bl	8002b88 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	1d21      	adds	r1, r4, #4
 8002d72:	f7ff ff89 	bl	8002c88 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d76:	2301      	movs	r3, #1
  return HAL_OK;
 8002d78:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002d82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002da2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002da4:	2001      	movs	r0, #1
 8002da6:	e7fc      	b.n	8002da2 <HAL_TIM_PWM_Init+0x52>

08002da8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da8:	6a03      	ldr	r3, [r0, #32]
{
 8002daa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dac:	f023 0310 	bic.w	r3, r3, #16
 8002db0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002db2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002db4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002db6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dcc:	4d0b      	ldr	r5, [pc, #44]	; (8002dfc <TIM_OC2_SetConfig+0x54>)
 8002dce:	42a8      	cmp	r0, r5
 8002dd0:	d10d      	bne.n	8002dee <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dd2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dd8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ddc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002de4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002dee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002df0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002df2:	684a      	ldr	r2, [r1, #4]
 8002df4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002df6:	6203      	str	r3, [r0, #32]
}
 8002df8:	bd70      	pop	{r4, r5, r6, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40012c00 	.word	0x40012c00

08002e00 <HAL_TIM_PWM_ConfigChannel>:
{
 8002e00:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002e06:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d052      	beq.n	8002eb2 <HAL_TIM_PWM_ConfigChannel+0xb2>
 8002e0c:	2301      	movs	r3, #1
  switch (Channel)
 8002e0e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002e10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002e14:	d03c      	beq.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x90>
 8002e16:	d806      	bhi.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x26>
 8002e18:	b1c2      	cbz	r2, 8002e4c <HAL_TIM_PWM_ConfigChannel+0x4c>
 8002e1a:	2a04      	cmp	r2, #4
 8002e1c:	d027      	beq.n	8002e6e <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e24:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002e26:	2a0c      	cmp	r2, #12
 8002e28:	d1f9      	bne.n	8002e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	f7ff fe64 	bl	8002af8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e4a:	e030      	b.n	8002eae <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e4c:	6800      	ldr	r0, [r0, #0]
 8002e4e:	f7ff fe01 	bl	8002a54 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e52:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e54:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	f042 0208 	orr.w	r2, r2, #8
 8002e5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	f022 0204 	bic.w	r2, r2, #4
 8002e64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e6a:	619a      	str	r2, [r3, #24]
      break;
 8002e6c:	e7d7      	b.n	8002e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e6e:	6800      	ldr	r0, [r0, #0]
 8002e70:	f7ff ff9a 	bl	8002da8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e74:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e76:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e8e:	e7ec      	b.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e90:	6800      	ldr	r0, [r0, #0]
 8002e92:	f7ff fe07 	bl	8002aa4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e96:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e98:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	f042 0208 	orr.w	r2, r2, #8
 8002ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	f022 0204 	bic.w	r2, r2, #4
 8002ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eae:	61da      	str	r2, [r3, #28]
      break;
 8002eb0:	e7b5      	b.n	8002e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	e7b6      	b.n	8002e24 <HAL_TIM_PWM_ConfigChannel+0x24>

08002eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb6:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eb8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eba:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ebc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002ec4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec6:	6082      	str	r2, [r0, #8]
}
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <HAL_TIM_ConfigClockSource>:
{
 8002eca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002ecc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002ed0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f04f 0002 	mov.w	r0, #2
 8002ed8:	d027      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x60>
 8002eda:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002ee0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002ee2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002ee6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002ef0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ef2:	680b      	ldr	r3, [r1, #0]
 8002ef4:	2b60      	cmp	r3, #96	; 0x60
 8002ef6:	d04d      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0xca>
 8002ef8:	d832      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x96>
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d062      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0xfa>
 8002efe:	d815      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x62>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d003      	beq.n	8002f0c <HAL_TIM_ConfigClockSource+0x42>
 8002f04:	d809      	bhi.n	8002f1a <HAL_TIM_ConfigClockSource+0x50>
 8002f06:	f033 0210 	bics.w	r2, r3, #16
 8002f0a:	d108      	bne.n	8002f1e <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8002f0c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f043 0307 	orr.w	r3, r3, #7
 8002f18:	e020      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002f1a:	2b30      	cmp	r3, #48	; 0x30
 8002f1c:	d0f6      	beq.n	8002f0c <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f20:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f26:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002f2c:	2b50      	cmp	r3, #80	; 0x50
 8002f2e:	d1f6      	bne.n	8002f1e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f30:	684a      	ldr	r2, [r1, #4]
 8002f32:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f34:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f36:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f38:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3c:	f025 0501 	bic.w	r5, r5, #1
 8002f40:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002f44:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f4a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f4e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f50:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f52:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f58:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002f5c:	6083      	str	r3, [r0, #8]
}
 8002f5e:	e7de      	b.n	8002f1e <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8002f60:	2b70      	cmp	r3, #112	; 0x70
 8002f62:	d00c      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0xb4>
 8002f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f68:	d1d9      	bne.n	8002f1e <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8002f6a:	68cb      	ldr	r3, [r1, #12]
 8002f6c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002f70:	f7ff ffa1 	bl	8002eb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	6893      	ldr	r3, [r2, #8]
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7c:	e008      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002f7e:	68cb      	ldr	r3, [r1, #12]
 8002f80:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002f84:	f7ff ff97 	bl	8002eb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f88:	6822      	ldr	r2, [r4, #0]
 8002f8a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f90:	6093      	str	r3, [r2, #8]
      break;
 8002f92:	e7c4      	b.n	8002f1e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f94:	684d      	ldr	r5, [r1, #4]
 8002f96:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f98:	6a01      	ldr	r1, [r0, #32]
 8002f9a:	f021 0110 	bic.w	r1, r1, #16
 8002f9e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002fa2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fb6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002fb8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fbe:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002fc2:	e7cb      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc4:	684a      	ldr	r2, [r1, #4]
 8002fc6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002fc8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fcc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd0:	f025 0501 	bic.w	r5, r5, #1
 8002fd4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd6:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002fd8:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fde:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002fe2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002fe6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fec:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002ff0:	e7b4      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x92>

08002ff2 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8002ff2:	6800      	ldr	r0, [r0, #0]
{
 8002ff4:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002ff6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002ff8:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002ffe:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003000:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003002:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003006:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 8003008:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800300a:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800300c:	d02e      	beq.n	800306c <TIM_SlaveTimer_SetConfig+0x7a>
 800300e:	d805      	bhi.n	800301c <TIM_SlaveTimer_SetConfig+0x2a>
 8003010:	2a40      	cmp	r2, #64	; 0x40
 8003012:	d00b      	beq.n	800302c <TIM_SlaveTimer_SetConfig+0x3a>
 8003014:	2a50      	cmp	r2, #80	; 0x50
 8003016:	d019      	beq.n	800304c <TIM_SlaveTimer_SetConfig+0x5a>
  return HAL_OK;
 8003018:	2000      	movs	r0, #0
}
 800301a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800301c:	2a70      	cmp	r2, #112	; 0x70
 800301e:	d1fb      	bne.n	8003018 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_ETR_SetConfig(htim->Instance,
 8003020:	690b      	ldr	r3, [r1, #16]
 8003022:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8003026:	f7ff ff46 	bl	8002eb6 <TIM_ETR_SetConfig>
      break;
 800302a:	e7f5      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x26>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800302c:	2c05      	cmp	r4, #5
 800302e:	d030      	beq.n	8003092 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8003030:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003032:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003034:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800303c:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800303e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003042:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003046:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8003048:	6202      	str	r2, [r0, #32]
 800304a:	e7e5      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304c:	688a      	ldr	r2, [r1, #8]
 800304e:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8003050:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003052:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003054:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003058:	f024 0401 	bic.w	r4, r4, #1
 800305c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003060:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003066:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800306a:	e7ec      	b.n	8003046 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800306c:	688c      	ldr	r4, [r1, #8]
 800306e:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003070:	6a01      	ldr	r1, [r0, #32]
 8003072:	f021 0110 	bic.w	r1, r1, #16
 8003076:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003078:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800307a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800307c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003084:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003088:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800308c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800308e:	6203      	str	r3, [r0, #32]
 8003090:	e7c2      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x26>
        return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e7c1      	b.n	800301a <TIM_SlaveTimer_SetConfig+0x28>

08003096 <HAL_TIM_SlaveConfigSynchro>:
{
 8003096:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003098:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800309c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800309e:	2b01      	cmp	r3, #1
 80030a0:	f04f 0302 	mov.w	r3, #2
 80030a4:	d01c      	beq.n	80030e0 <HAL_TIM_SlaveConfigSynchro+0x4a>
 80030a6:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80030ac:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80030b0:	f7ff ff9f 	bl	8002ff2 <TIM_SlaveTimer_SetConfig>
 80030b4:	b130      	cbz	r0, 80030c4 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 80030b6:	2300      	movs	r3, #0
    return HAL_ERROR;
 80030b8:	4628      	mov	r0, r5
    htim->State = HAL_TIM_STATE_READY;
 80030ba:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80030be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80030c2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030cc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030d4:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030da:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80030de:	e7f0      	b.n	80030c2 <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 80030e0:	4618      	mov	r0, r3
 80030e2:	e7ee      	b.n	80030c2 <HAL_TIM_SlaveConfigSynchro+0x2c>

080030e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030e8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030ea:	f001 011f 	and.w	r1, r1, #31
 80030ee:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80030f0:	ea23 0304 	bic.w	r3, r3, r4
 80030f4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030f6:	6a03      	ldr	r3, [r0, #32]
 80030f8:	408a      	lsls	r2, r1
 80030fa:	431a      	orrs	r2, r3
 80030fc:	6202      	str	r2, [r0, #32]
}
 80030fe:	bd10      	pop	{r4, pc}

08003100 <HAL_TIM_OC_Start>:
{
 8003100:	b510      	push	{r4, lr}
 8003102:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003104:	b929      	cbnz	r1, 8003112 <HAL_TIM_OC_Start+0x12>
 8003106:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800310a:	2b01      	cmp	r3, #1
 800310c:	d021      	beq.n	8003152 <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800310e:	2001      	movs	r0, #1
}
 8003110:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003112:	2904      	cmp	r1, #4
 8003114:	d107      	bne.n	8003126 <HAL_TIM_OC_Start+0x26>
 8003116:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800311a:	2b01      	cmp	r3, #1
 800311c:	d1f7      	bne.n	800310e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311e:	2302      	movs	r3, #2
 8003120:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003124:	e018      	b.n	8003158 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003126:	2908      	cmp	r1, #8
 8003128:	d107      	bne.n	800313a <HAL_TIM_OC_Start+0x3a>
 800312a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800312e:	2b01      	cmp	r3, #1
 8003130:	d1ed      	bne.n	800310e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003132:	2302      	movs	r3, #2
 8003134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003138:	e00e      	b.n	8003158 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800313a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800313e:	2b01      	cmp	r3, #1
 8003140:	d1e5      	bne.n	800310e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003142:	2904      	cmp	r1, #4
 8003144:	d0eb      	beq.n	800311e <HAL_TIM_OC_Start+0x1e>
 8003146:	2908      	cmp	r1, #8
 8003148:	d0f3      	beq.n	8003132 <HAL_TIM_OC_Start+0x32>
 800314a:	2302      	movs	r3, #2
 800314c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003150:	e002      	b.n	8003158 <HAL_TIM_OC_Start+0x58>
 8003152:	2302      	movs	r3, #2
 8003154:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003158:	2201      	movs	r2, #1
 800315a:	6820      	ldr	r0, [r4, #0]
 800315c:	f7ff ffc2 	bl	80030e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <HAL_TIM_OC_Start+0x9c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10a      	bne.n	800317e <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	2a06      	cmp	r2, #6
 8003178:	d10b      	bne.n	8003192 <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 800317a:	2000      	movs	r0, #0
 800317c:	e7c8      	b.n	8003110 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003182:	d0f5      	beq.n	8003170 <HAL_TIM_OC_Start+0x70>
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <HAL_TIM_OC_Start+0xa0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d0f2      	beq.n	8003170 <HAL_TIM_OC_Start+0x70>
 800318a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800318e:	4293      	cmp	r3, r2
 8003190:	d0ee      	beq.n	8003170 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e7ee      	b.n	800317a <HAL_TIM_OC_Start+0x7a>
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400

080031a4 <HAL_TIM_PWM_Start>:
 80031a4:	f7ff bfac 	b.w	8003100 <HAL_TIM_OC_Start>

080031a8 <HAL_TIM_OC_Start_DMA>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	460d      	mov	r5, r1
 80031ac:	4604      	mov	r4, r0
 80031ae:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80031b0:	b92d      	cbnz	r5, 80031be <HAL_TIM_OC_Start_DMA+0x16>
 80031b2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80031b6:	2a02      	cmp	r2, #2
 80031b8:	b2d0      	uxtb	r0, r2
 80031ba:	d112      	bne.n	80031e2 <HAL_TIM_OC_Start_DMA+0x3a>
}
 80031bc:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80031be:	2d04      	cmp	r5, #4
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_OC_Start_DMA+0x2a>
 80031c2:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 80031c6:	1e86      	subs	r6, r0, #2
 80031c8:	4270      	negs	r0, r6
 80031ca:	4170      	adcs	r0, r6
 80031cc:	b140      	cbz	r0, 80031e0 <HAL_TIM_OC_Start_DMA+0x38>
    return HAL_BUSY;
 80031ce:	2002      	movs	r0, #2
 80031d0:	e7f4      	b.n	80031bc <HAL_TIM_OC_Start_DMA+0x14>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80031d2:	2d08      	cmp	r5, #8
 80031d4:	bf0c      	ite	eq
 80031d6:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 80031da:	f894 0041 	ldrbne.w	r0, [r4, #65]	; 0x41
 80031de:	e7f2      	b.n	80031c6 <HAL_TIM_OC_Start_DMA+0x1e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80031e0:	b93d      	cbnz	r5, 80031f2 <HAL_TIM_OC_Start_DMA+0x4a>
 80031e2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80031e6:	1e50      	subs	r0, r2, #1
 80031e8:	4242      	negs	r2, r0
 80031ea:	4142      	adcs	r2, r0
 80031ec:	bb4a      	cbnz	r2, 8003242 <HAL_TIM_OC_Start_DMA+0x9a>
      return HAL_ERROR;
 80031ee:	2001      	movs	r0, #1
 80031f0:	e7e4      	b.n	80031bc <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80031f2:	2d04      	cmp	r5, #4
 80031f4:	d102      	bne.n	80031fc <HAL_TIM_OC_Start_DMA+0x54>
 80031f6:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80031fa:	e7f4      	b.n	80031e6 <HAL_TIM_OC_Start_DMA+0x3e>
 80031fc:	2d08      	cmp	r5, #8
 80031fe:	bf0c      	ite	eq
 8003200:	f894 2040 	ldrbeq.w	r2, [r4, #64]	; 0x40
 8003204:	f894 2041 	ldrbne.w	r2, [r4, #65]	; 0x41
 8003208:	2a01      	cmp	r2, #1
 800320a:	d1f0      	bne.n	80031ee <HAL_TIM_OC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800320c:	b909      	cbnz	r1, 8003212 <HAL_TIM_OC_Start_DMA+0x6a>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ed      	bne.n	80031ee <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003212:	2d08      	cmp	r5, #8
 8003214:	f04f 0002 	mov.w	r0, #2
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003218:	6822      	ldr	r2, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800321a:	d142      	bne.n	80032a2 <HAL_TIM_OC_Start_DMA+0xfa>
 800321c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003220:	4e40      	ldr	r6, [pc, #256]	; (8003324 <HAL_TIM_OC_Start_DMA+0x17c>)
 8003222:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003224:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003226:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003228:	4e3f      	ldr	r6, [pc, #252]	; (8003328 <HAL_TIM_OC_Start_DMA+0x180>)
 800322a:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800322c:	4e3f      	ldr	r6, [pc, #252]	; (800332c <HAL_TIM_OC_Start_DMA+0x184>)
 800322e:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003230:	f7fe fdf2 	bl	8001e18 <HAL_DMA_Start_IT>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1da      	bne.n	80031ee <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003238:	6822      	ldr	r2, [r4, #0]
 800323a:	68d3      	ldr	r3, [r2, #12]
 800323c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003240:	e017      	b.n	8003272 <HAL_TIM_OC_Start_DMA+0xca>
    if ((pData == NULL) && (Length > 0U))
 8003242:	b909      	cbnz	r1, 8003248 <HAL_TIM_OC_Start_DMA+0xa0>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1d2      	bne.n	80031ee <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003248:	2202      	movs	r2, #2
 800324a:	b9a5      	cbnz	r5, 8003276 <HAL_TIM_OC_Start_DMA+0xce>
 800324c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003250:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003252:	4a34      	ldr	r2, [pc, #208]	; (8003324 <HAL_TIM_OC_Start_DMA+0x17c>)
 8003254:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003256:	4a34      	ldr	r2, [pc, #208]	; (8003328 <HAL_TIM_OC_Start_DMA+0x180>)
 8003258:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800325a:	4a34      	ldr	r2, [pc, #208]	; (800332c <HAL_TIM_OC_Start_DMA+0x184>)
 800325c:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	3234      	adds	r2, #52	; 0x34
 8003262:	f7fe fdd9 	bl	8001e18 <HAL_DMA_Start_IT>
 8003266:	2800      	cmp	r0, #0
 8003268:	d1c1      	bne.n	80031ee <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	68d3      	ldr	r3, [r2, #12]
 800326e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003272:	60d3      	str	r3, [r2, #12]
      break;
 8003274:	e020      	b.n	80032b8 <HAL_TIM_OC_Start_DMA+0x110>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003276:	2d04      	cmp	r5, #4
 8003278:	d1cb      	bne.n	8003212 <HAL_TIM_OC_Start_DMA+0x6a>
 800327a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800327e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <HAL_TIM_OC_Start_DMA+0x17c>)
 8003282:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <HAL_TIM_OC_Start_DMA+0x180>)
 8003286:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <HAL_TIM_OC_Start_DMA+0x184>)
 800328a:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	3238      	adds	r2, #56	; 0x38
 8003290:	f7fe fdc2 	bl	8001e18 <HAL_DMA_Start_IT>
 8003294:	2800      	cmp	r0, #0
 8003296:	d1aa      	bne.n	80031ee <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003298:	6822      	ldr	r2, [r4, #0]
 800329a:	68d3      	ldr	r3, [r2, #12]
 800329c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032a0:	e7e7      	b.n	8003272 <HAL_TIM_OC_Start_DMA+0xca>
  switch (Channel)
 80032a2:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  switch (Channel)
 80032a8:	d01a      	beq.n	80032e0 <HAL_TIM_OC_Start_DMA+0x138>
 80032aa:	d805      	bhi.n	80032b8 <HAL_TIM_OC_Start_DMA+0x110>
 80032ac:	2d08      	cmp	r5, #8
 80032ae:	d803      	bhi.n	80032b8 <HAL_TIM_OC_Start_DMA+0x110>
 80032b0:	2d00      	cmp	r5, #0
 80032b2:	d0cd      	beq.n	8003250 <HAL_TIM_OC_Start_DMA+0xa8>
 80032b4:	2d04      	cmp	r5, #4
 80032b6:	d0e2      	beq.n	800327e <HAL_TIM_OC_Start_DMA+0xd6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032b8:	2201      	movs	r2, #1
 80032ba:	4629      	mov	r1, r5
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	f7ff ff11 	bl	80030e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_TIM_OC_Start_DMA+0x188>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d11c      	bne.n	8003304 <HAL_TIM_OC_Start_DMA+0x15c>
    __HAL_TIM_MOE_ENABLE(htim);
 80032ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d8:	2a06      	cmp	r2, #6
 80032da:	d11d      	bne.n	8003318 <HAL_TIM_OC_Start_DMA+0x170>
  return HAL_OK;
 80032dc:	2000      	movs	r0, #0
 80032de:	e76d      	b.n	80031bc <HAL_TIM_OC_Start_DMA+0x14>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80032e2:	4e10      	ldr	r6, [pc, #64]	; (8003324 <HAL_TIM_OC_Start_DMA+0x17c>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80032e4:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032e6:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032e8:	4e0f      	ldr	r6, [pc, #60]	; (8003328 <HAL_TIM_OC_Start_DMA+0x180>)
 80032ea:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80032ec:	4e0f      	ldr	r6, [pc, #60]	; (800332c <HAL_TIM_OC_Start_DMA+0x184>)
 80032ee:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80032f0:	f7fe fd92 	bl	8001e18 <HAL_DMA_Start_IT>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	f47f af7a 	bne.w	80031ee <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	68d3      	ldr	r3, [r2, #12]
 80032fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003302:	e7b6      	b.n	8003272 <HAL_TIM_OC_Start_DMA+0xca>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d0e3      	beq.n	80032d2 <HAL_TIM_OC_Start_DMA+0x12a>
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_TIM_OC_Start_DMA+0x18c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d0e0      	beq.n	80032d2 <HAL_TIM_OC_Start_DMA+0x12a>
 8003310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003314:	4293      	cmp	r3, r2
 8003316:	d0dc      	beq.n	80032d2 <HAL_TIM_OC_Start_DMA+0x12a>
    __HAL_TIM_ENABLE(htim);
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e7dc      	b.n	80032dc <HAL_TIM_OC_Start_DMA+0x134>
 8003322:	bf00      	nop
 8003324:	08002b8b 	.word	0x08002b8b
 8003328:	08002bf5 	.word	0x08002bf5
 800332c:	08002c2f 	.word	0x08002c2f
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400

08003338 <HAL_TIM_PWM_Start_DMA>:
 8003338:	f7ff bf36 	b.w	80031a8 <HAL_TIM_OC_Start_DMA>

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003342:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003344:	2b01      	cmp	r3, #1
 8003346:	f04f 0002 	mov.w	r0, #2
 800334a:	d022      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800334c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800334e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003352:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003354:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003356:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800335a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800335c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003360:	4c0c      	ldr	r4, [pc, #48]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003362:	42a3      	cmp	r3, r4
 8003364:	d00a      	beq.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d007      	beq.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800336c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003370:	42a3      	cmp	r3, r4
 8003372:	d003      	beq.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003374:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003378:	42a3      	cmp	r3, r4
 800337a:	d104      	bne.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800337c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003382:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003384:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003386:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003388:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800338a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800338e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003392:	bd30      	pop	{r4, r5, pc}
 8003394:	40012c00 	.word	0x40012c00

08003398 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003398:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d01f      	beq.n	80033e0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033a0:	68cb      	ldr	r3, [r1, #12]
 80033a2:	688a      	ldr	r2, [r1, #8]
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033aa:	684a      	ldr	r2, [r1, #4]
 80033ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033b2:	680a      	ldr	r2, [r1, #0]
 80033b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033ba:	690a      	ldr	r2, [r1, #16]
 80033bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033c2:	694a      	ldr	r2, [r1, #20]
 80033c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033ca:	69ca      	ldr	r2, [r1, #28]
 80033cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033d0:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033d2:	6802      	ldr	r2, [r0, #0]
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033d6:	2300      	movs	r3, #0
 80033d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80033dc:	4618      	mov	r0, r3
 80033de:	4770      	bx	lr
  __HAL_LOCK(htim);
 80033e0:	2002      	movs	r0, #2
}
 80033e2:	4770      	bx	lr

080033e4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e4:	6803      	ldr	r3, [r0, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80033f8:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	bf02      	ittt	eq
 80033fc:	68da      	ldreq	r2, [r3, #12]
 80033fe:	f022 0210 	biceq.w	r2, r2, #16
 8003402:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	2320      	movs	r3, #32
 8003406:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	2300      	movs	r3, #0
 800340c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800340e:	4770      	bx	lr

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	b510      	push	{r4, lr}
 8003412:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	6803      	ldr	r3, [r0, #0]
 8003416:	68c1      	ldr	r1, [r0, #12]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800341e:	430a      	orrs	r2, r1
 8003420:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003422:	6882      	ldr	r2, [r0, #8]
 8003424:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003426:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003428:	4302      	orrs	r2, r0
 800342a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800342c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003430:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003434:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003436:	430a      	orrs	r2, r1
 8003438:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	69a1      	ldr	r1, [r4, #24]
 800343e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003442:	430a      	orrs	r2, r1
 8003444:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <UART_SetConfig+0x70>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d115      	bne.n	8003478 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800344c:	f7ff fa20 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003450:	2319      	movs	r3, #25
 8003452:	4343      	muls	r3, r0
 8003454:	6862      	ldr	r2, [r4, #4]
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	fbb3 f3f2 	udiv	r3, r3, r2
 800345e:	2264      	movs	r2, #100	; 0x64
 8003460:	fbb3 f1f2 	udiv	r1, r3, r2
 8003464:	fb02 3311 	mls	r3, r2, r1, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	; 0x32
 800346c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003470:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003474:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003476:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003478:	f7ff f9fa 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 800347c:	e7e8      	b.n	8003450 <UART_SetConfig+0x40>
 800347e:	bf00      	nop
 8003480:	40013800 	.word	0x40013800

08003484 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	4604      	mov	r4, r0
 8003488:	460e      	mov	r6, r1
 800348a:	4617      	mov	r7, r2
 800348c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348e:	6822      	ldr	r2, [r4, #0]
 8003490:	6813      	ldr	r3, [r2, #0]
 8003492:	ea36 0303 	bics.w	r3, r6, r3
 8003496:	d101      	bne.n	800349c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003498:	2000      	movs	r0, #0
 800349a:	e014      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800349c:	1c6b      	adds	r3, r5, #1
 800349e:	d0f7      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034a0:	b995      	cbnz	r5, 80034c8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80034a4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80034b6:	2320      	movs	r3, #32
 80034b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80034c0:	2300      	movs	r3, #0
 80034c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80034c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034c8:	f7fe f9d4 	bl	8001874 <HAL_GetTick>
 80034cc:	1bc0      	subs	r0, r0, r7
 80034ce:	4285      	cmp	r5, r0
 80034d0:	d2dd      	bcs.n	800348e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80034d2:	e7e6      	b.n	80034a2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

080034d4 <HAL_UART_Init>:
{
 80034d4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80034d6:	4604      	mov	r4, r0
 80034d8:	b340      	cbz	r0, 800352c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80034da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034e2:	b91b      	cbnz	r3, 80034ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80034e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80034e8:	f7fe f8c2 	bl	8001670 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80034ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80034f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80034f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80034f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80034fe:	f7ff ff87 	bl	8003410 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003502:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800350c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003514:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800351c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800351e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003526:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800352a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800352c:	2001      	movs	r0, #1
 800352e:	e7fc      	b.n	800352a <HAL_UART_Init+0x56>

08003530 <HAL_UART_Transmit>:
{
 8003530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003534:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003536:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800353a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800353c:	2b20      	cmp	r3, #32
{
 800353e:	460e      	mov	r6, r1
 8003540:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003542:	d148      	bne.n	80035d6 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8003544:	2900      	cmp	r1, #0
 8003546:	d044      	beq.n	80035d2 <HAL_UART_Transmit+0xa2>
 8003548:	2a00      	cmp	r2, #0
 800354a:	d042      	beq.n	80035d2 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800354c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d040      	beq.n	80035d6 <HAL_UART_Transmit+0xa6>
 8003554:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003556:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003558:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800355c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003560:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003564:	f7fe f986 	bl	8001874 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003568:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800356a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003570:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003572:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003574:	d103      	bne.n	800357e <HAL_UART_Transmit+0x4e>
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	b90b      	cbnz	r3, 800357e <HAL_UART_Transmit+0x4e>
 800357a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800357c:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800357e:	2300      	movs	r3, #0
 8003580:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003584:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	b953      	cbnz	r3, 80035a0 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	464b      	mov	r3, r9
 800358c:	4642      	mov	r2, r8
 800358e:	2140      	movs	r1, #64	; 0x40
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff ff77 	bl	8003484 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003596:	b950      	cbnz	r0, 80035ae <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003598:	2320      	movs	r3, #32
 800359a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800359e:	e007      	b.n	80035b0 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a0:	464b      	mov	r3, r9
 80035a2:	4642      	mov	r2, r8
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7ff ff6c 	bl	8003484 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80035ac:	b110      	cbz	r0, 80035b4 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80035ae:	2003      	movs	r0, #3
}
 80035b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80035b6:	b94e      	cbnz	r6, 80035cc <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80035bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80035c2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80035c4:	3901      	subs	r1, #1
 80035c6:	b289      	uxth	r1, r1
 80035c8:	84e1      	strh	r1, [r4, #38]	; 0x26
 80035ca:	e7db      	b.n	8003584 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035cc:	f816 3b01 	ldrb.w	r3, [r6], #1
 80035d0:	e7f6      	b.n	80035c0 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80035d2:	2001      	movs	r0, #1
 80035d4:	e7ec      	b.n	80035b0 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80035d6:	2002      	movs	r0, #2
 80035d8:	e7ea      	b.n	80035b0 <HAL_UART_Transmit+0x80>
	...

080035dc <HAL_UART_Transmit_DMA>:
{
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	4604      	mov	r4, r0
 80035e0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80035e2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80035e6:	2a20      	cmp	r2, #32
 80035e8:	d12a      	bne.n	8003640 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 80035ea:	b339      	cbz	r1, 800363c <HAL_UART_Transmit_DMA+0x60>
 80035ec:	b333      	cbz	r3, 800363c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80035ee:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80035f2:	2a01      	cmp	r2, #1
 80035f4:	d024      	beq.n	8003640 <HAL_UART_Transmit_DMA+0x64>
 80035f6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80035fa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fe:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003600:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003602:	6b60      	ldr	r0, [r4, #52]	; 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	6425      	str	r5, [r4, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003606:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800360a:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 800360c:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800360e:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003610:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003612:	4a0d      	ldr	r2, [pc, #52]	; (8003648 <HAL_UART_Transmit_DMA+0x6c>)
 8003614:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003616:	4a0d      	ldr	r2, [pc, #52]	; (800364c <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003618:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	3204      	adds	r2, #4
 8003620:	f7fe fbfa 	bl	8001e18 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003624:	f06f 0240 	mvn.w	r2, #64	; 0x40
    return HAL_OK;
 8003628:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800362e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003638:	615a      	str	r2, [r3, #20]
}
 800363a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
 800363e:	e7fc      	b.n	800363a <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8003640:	2002      	movs	r0, #2
 8003642:	e7fa      	b.n	800363a <HAL_UART_Transmit_DMA+0x5e>
 8003644:	08003653 	.word	0x08003653
 8003648:	08003681 	.word	0x08003681
 800364c:	0800368f 	.word	0x0800368f

08003650 <HAL_UART_TxCpltCallback>:
 8003650:	4770      	bx	lr

08003652 <UART_DMATransmitCplt>:
{
 8003652:	b508      	push	{r3, lr}
 8003654:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003656:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003658:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f013 0320 	ands.w	r3, r3, #32
 8003660:	d10a      	bne.n	8003678 <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0x00U;
 8003662:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003664:	6803      	ldr	r3, [r0, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003674:	60da      	str	r2, [r3, #12]
}
 8003676:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003678:	f7ff ffea 	bl	8003650 <HAL_UART_TxCpltCallback>
}
 800367c:	e7fb      	b.n	8003676 <UART_DMATransmitCplt+0x24>

0800367e <HAL_UART_TxHalfCpltCallback>:
 800367e:	4770      	bx	lr

08003680 <UART_DMATxHalfCplt>:
{
 8003680:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003682:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003684:	f7ff fffb 	bl	800367e <HAL_UART_TxHalfCpltCallback>
}
 8003688:	bd08      	pop	{r3, pc}

0800368a <HAL_UART_RxCpltCallback>:
 800368a:	4770      	bx	lr

0800368c <HAL_UART_ErrorCallback>:
 800368c:	4770      	bx	lr

0800368e <UART_DMAError>:
{
 800368e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003690:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003692:	6803      	ldr	r3, [r0, #0]
 8003694:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003696:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800369a:	2921      	cmp	r1, #33	; 0x21
 800369c:	d10a      	bne.n	80036b4 <UART_DMAError+0x26>
 800369e:	0612      	lsls	r2, r2, #24
 80036a0:	d508      	bpl.n	80036b4 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 80036a2:	2200      	movs	r2, #0
 80036a4:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036ac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80036ae:	2220      	movs	r2, #32
 80036b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036b4:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036b6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80036ba:	2a22      	cmp	r2, #34	; 0x22
 80036bc:	d105      	bne.n	80036ca <UART_DMAError+0x3c>
 80036be:	065b      	lsls	r3, r3, #25
 80036c0:	d503      	bpl.n	80036ca <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80036c6:	f7ff fe8d 	bl	80033e4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80036cc:	f043 0310 	orr.w	r3, r3, #16
 80036d0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80036d2:	f7ff ffdb 	bl	800368c <HAL_UART_ErrorCallback>
}
 80036d6:	bd08      	pop	{r3, pc}

080036d8 <UART_DMAAbortOnError>:
{
 80036d8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80036da:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80036de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80036e2:	f7ff ffd3 	bl	800368c <HAL_UART_ErrorCallback>
}
 80036e6:	bd08      	pop	{r3, pc}

080036e8 <HAL_UARTEx_RxEventCallback>:
}
 80036e8:	4770      	bx	lr

080036ea <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80036ea:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ec:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036f4:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f6:	d134      	bne.n	8003762 <UART_Receive_IT.part.0.isra.0+0x78>
 80036f8:	6901      	ldr	r1, [r0, #16]
 80036fa:	2900      	cmp	r1, #0
 80036fc:	d134      	bne.n	8003768 <UART_Receive_IT.part.0.isra.0+0x7e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036fe:	6852      	ldr	r2, [r2, #4]
 8003700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003704:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8003708:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 800370a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800370c:	3a01      	subs	r2, #1
 800370e:	b292      	uxth	r2, r2
 8003710:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8003712:	bb1a      	cbnz	r2, 800375c <UART_Receive_IT.part.0.isra.0+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003714:	6803      	ldr	r3, [r0, #0]
 8003716:	68d9      	ldr	r1, [r3, #12]
 8003718:	f021 0120 	bic.w	r1, r1, #32
 800371c:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003724:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003726:	6959      	ldr	r1, [r3, #20]
 8003728:	f021 0101 	bic.w	r1, r1, #1
 800372c:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800372e:	2120      	movs	r1, #32
 8003730:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003736:	2901      	cmp	r1, #1
 8003738:	d120      	bne.n	800377c <UART_Receive_IT.part.0.isra.0+0x92>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	6302      	str	r2, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	68d9      	ldr	r1, [r3, #12]
 800373e:	f021 0110 	bic.w	r1, r1, #16
 8003742:	60d9      	str	r1, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	06c9      	lsls	r1, r1, #27
 8003748:	d505      	bpl.n	8003756 <UART_Receive_IT.part.0.isra.0+0x6c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800374a:	9201      	str	r2, [sp, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	9201      	str	r2, [sp, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003756:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003758:	f7ff ffc6 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
}
 800375c:	b003      	add	sp, #12
 800375e:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003762:	b939      	cbnz	r1, 8003774 <UART_Receive_IT.part.0.isra.0+0x8a>
 8003764:	6901      	ldr	r1, [r0, #16]
 8003766:	b929      	cbnz	r1, 8003774 <UART_Receive_IT.part.0.isra.0+0x8a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003768:	6852      	ldr	r2, [r2, #4]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 800376e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003770:	3301      	adds	r3, #1
 8003772:	e7c9      	b.n	8003708 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003774:	6852      	ldr	r2, [r2, #4]
 8003776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800377a:	e7f7      	b.n	800376c <UART_Receive_IT.part.0.isra.0+0x82>
       HAL_UART_RxCpltCallback(huart);
 800377c:	f7ff ff85 	bl	800368a <HAL_UART_RxCpltCallback>
 8003780:	e7ec      	b.n	800375c <UART_Receive_IT.part.0.isra.0+0x72>
	...

08003784 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003784:	6803      	ldr	r3, [r0, #0]
{
 8003786:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003788:	681a      	ldr	r2, [r3, #0]
{
 800378a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800378c:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003790:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003792:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003794:	d10c      	bne.n	80037b0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003796:	0695      	lsls	r5, r2, #26
 8003798:	d567      	bpl.n	800386a <HAL_UART_IRQHandler+0xe6>
 800379a:	068d      	lsls	r5, r1, #26
 800379c:	d565      	bpl.n	800386a <HAL_UART_IRQHandler+0xe6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800379e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80037a2:	2b22      	cmp	r3, #34	; 0x22
 80037a4:	d15b      	bne.n	800385e <HAL_UART_IRQHandler+0xda>
}
 80037a6:	b003      	add	sp, #12
 80037a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037ac:	f7ff bf9d 	b.w	80036ea <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037b0:	f005 0001 	and.w	r0, r5, #1
 80037b4:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80037b8:	4305      	orrs	r5, r0
 80037ba:	d056      	beq.n	800386a <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037bc:	07d5      	lsls	r5, r2, #31
 80037be:	d505      	bpl.n	80037cc <HAL_UART_IRQHandler+0x48>
 80037c0:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c2:	bf42      	ittt	mi
 80037c4:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80037c6:	f043 0301 	orrmi.w	r3, r3, #1
 80037ca:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037cc:	0755      	lsls	r5, r2, #29
 80037ce:	d504      	bpl.n	80037da <HAL_UART_IRQHandler+0x56>
 80037d0:	b118      	cbz	r0, 80037da <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037da:	0793      	lsls	r3, r2, #30
 80037dc:	d504      	bpl.n	80037e8 <HAL_UART_IRQHandler+0x64>
 80037de:	b118      	cbz	r0, 80037e8 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80037e8:	0715      	lsls	r5, r2, #28
 80037ea:	d507      	bpl.n	80037fc <HAL_UART_IRQHandler+0x78>
 80037ec:	f001 0320 	and.w	r3, r1, #32
 80037f0:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f2:	bf1e      	ittt	ne
 80037f4:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 80037f6:	f043 0308 	orrne.w	r3, r3, #8
 80037fa:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037fe:	b373      	cbz	r3, 800385e <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003800:	0692      	lsls	r2, r2, #26
 8003802:	d508      	bpl.n	8003816 <HAL_UART_IRQHandler+0x92>
 8003804:	068b      	lsls	r3, r1, #26
 8003806:	d506      	bpl.n	8003816 <HAL_UART_IRQHandler+0x92>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003808:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800380c:	2b22      	cmp	r3, #34	; 0x22
 800380e:	d102      	bne.n	8003816 <HAL_UART_IRQHandler+0x92>
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff ff6a 	bl	80036ea <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003818:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800381c:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003822:	f005 0508 	and.w	r5, r5, #8
 8003826:	431d      	orrs	r5, r3
 8003828:	d01b      	beq.n	8003862 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 800382a:	f7ff fddb 	bl	80033e4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	0655      	lsls	r5, r2, #25
 8003834:	d510      	bpl.n	8003858 <HAL_UART_IRQHandler+0xd4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003836:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003838:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003840:	b150      	cbz	r0, 8003858 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_UART_IRQHandler+0x20c>)
 8003844:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003846:	f7fe fb41 	bl	8001ecc <HAL_DMA_Abort_IT>
 800384a:	b140      	cbz	r0, 800385e <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800384c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800384e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003850:	b003      	add	sp, #12
 8003852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003856:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003858:	4620      	mov	r0, r4
 800385a:	f7ff ff17 	bl	800368c <HAL_UART_ErrorCallback>
}
 800385e:	b003      	add	sp, #12
 8003860:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003862:	f7ff ff13 	bl	800368c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003866:	6425      	str	r5, [r4, #64]	; 0x40
 8003868:	e7f9      	b.n	800385e <HAL_UART_IRQHandler+0xda>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800386c:	2801      	cmp	r0, #1
 800386e:	d155      	bne.n	800391c <HAL_UART_IRQHandler+0x198>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003870:	06d0      	lsls	r0, r2, #27
 8003872:	d553      	bpl.n	800391c <HAL_UART_IRQHandler+0x198>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003874:	06cd      	lsls	r5, r1, #27
 8003876:	d551      	bpl.n	800391c <HAL_UART_IRQHandler+0x198>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003878:	2100      	movs	r1, #0
 800387a:	9101      	str	r1, [sp, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	9201      	str	r2, [sp, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	9201      	str	r2, [sp, #4]
 8003884:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800388c:	d02a      	beq.n	80038e4 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800388e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003890:	6802      	ldr	r2, [r0, #0]
 8003892:	6852      	ldr	r2, [r2, #4]
 8003894:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8003896:	2a00      	cmp	r2, #0
 8003898:	d0e1      	beq.n	800385e <HAL_UART_IRQHandler+0xda>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800389a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800389c:	4295      	cmp	r5, r2
 800389e:	d9de      	bls.n	800385e <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 80038a0:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a2:	6982      	ldr	r2, [r0, #24]
 80038a4:	2a20      	cmp	r2, #32
 80038a6:	d015      	beq.n	80038d4 <HAL_UART_IRQHandler+0x150>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038be:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80038c0:	2220      	movs	r2, #32
 80038c2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	f022 0210 	bic.w	r2, r2, #16
 80038ce:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038d0:	f7fe fade 	bl	8001e90 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038d4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80038d6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80038d8:	1ac9      	subs	r1, r1, r3
 80038da:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038dc:	4620      	mov	r0, r4
 80038de:	f7ff ff03 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
 80038e2:	e7bc      	b.n	800385e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038e4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80038e6:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 80038e8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80038ea:	b289      	uxth	r1, r1
 80038ec:	2900      	cmp	r1, #0
 80038ee:	d0b6      	beq.n	800385e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80038f2:	1a09      	subs	r1, r1, r0
 80038f4:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80038f6:	2900      	cmp	r1, #0
 80038f8:	d0b1      	beq.n	800385e <HAL_UART_IRQHandler+0xda>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fa:	68d8      	ldr	r0, [r3, #12]
 80038fc:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003900:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	6958      	ldr	r0, [r3, #20]
 8003904:	f020 0001 	bic.w	r0, r0, #1
 8003908:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800390a:	2020      	movs	r0, #32
 800390c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003910:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	f022 0210 	bic.w	r2, r2, #16
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	e7df      	b.n	80038dc <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800391c:	0610      	lsls	r0, r2, #24
 800391e:	d526      	bpl.n	800396e <HAL_UART_IRQHandler+0x1ea>
 8003920:	060d      	lsls	r5, r1, #24
 8003922:	d524      	bpl.n	800396e <HAL_UART_IRQHandler+0x1ea>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003924:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003928:	2a21      	cmp	r2, #33	; 0x21
 800392a:	d198      	bne.n	800385e <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392c:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800392e:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003934:	d116      	bne.n	8003964 <HAL_UART_IRQHandler+0x1e0>
 8003936:	6921      	ldr	r1, [r4, #16]
 8003938:	b9a1      	cbnz	r1, 8003964 <HAL_UART_IRQHandler+0x1e0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800393a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800393e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003942:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003944:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003946:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003948:	3a01      	subs	r2, #1
 800394a:	b292      	uxth	r2, r2
 800394c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800394e:	2a00      	cmp	r2, #0
 8003950:	d185      	bne.n	800385e <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003958:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	e77c      	b.n	800385e <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003964:	1c51      	adds	r1, r2, #1
 8003966:	6221      	str	r1, [r4, #32]
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	e7eb      	b.n	8003946 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800396e:	0650      	lsls	r0, r2, #25
 8003970:	f57f af75 	bpl.w	800385e <HAL_UART_IRQHandler+0xda>
 8003974:	064a      	lsls	r2, r1, #25
 8003976:	f57f af72 	bpl.w	800385e <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800397a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800397c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800397e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003982:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003984:	2320      	movs	r3, #32
 8003986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800398a:	f7ff fe61 	bl	8003650 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800398e:	e766      	b.n	800385e <HAL_UART_IRQHandler+0xda>
 8003990:	080036d9 	.word	0x080036d9

08003994 <agcPrasolovFloat>:

float Falpha = 0.02f;
float FR = 0.7f;
float FAn = 0;

void agcPrasolovFloat(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i=0; i<blockSize; i++){
 8003998:	2500      	movs	r5, #0
		float input = Q31toF(source[i]);
		input = input * FAn;

		//float Anew =;
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <agcPrasolovFloat+0xd0>)
void agcPrasolovFloat(q31_t* source, q31_t* destination, uint16_t blockSize){
 800399c:	b085      	sub	sp, #20
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 800399e:	681f      	ldr	r7, [r3, #0]
 80039a0:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <agcPrasolovFloat+0xd4>)
		destination[i] = FtoQ31(input);
 80039a2:	f04f 4b9e 	mov.w	fp, #1325400064	; 0x4f000000
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8003a6c <agcPrasolovFloat+0xd8>
 80039ac:	9300      	str	r3, [sp, #0]
	for (uint16_t i=0; i<blockSize; i++){
 80039ae:	462b      	mov	r3, r5
void agcPrasolovFloat(q31_t* source, q31_t* destination, uint16_t blockSize){
 80039b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80039b4:	f8da 4000 	ldr.w	r4, [sl]
 80039b8:	9203      	str	r2, [sp, #12]
	for (uint16_t i=0; i<blockSize; i++){
 80039ba:	9903      	ldr	r1, [sp, #12]
 80039bc:	b2aa      	uxth	r2, r5
 80039be:	4291      	cmp	r1, r2
 80039c0:	d805      	bhi.n	80039ce <agcPrasolovFloat+0x3a>
 80039c2:	b10b      	cbz	r3, 80039c8 <agcPrasolovFloat+0x34>
 80039c4:	f8ca 4000 	str.w	r4, [sl]
	}
}
 80039c8:	b005      	add	sp, #20
 80039ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float input = Q31toF(source[i]);
 80039ce:	9b01      	ldr	r3, [sp, #4]
 80039d0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80039d4:	f7fd f812 	bl	80009fc <__aeabi_i2f>
 80039d8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 80039dc:	f7fd f862 	bl	8000aa4 <__aeabi_fmul>
		input = input * FAn;
 80039e0:	4621      	mov	r1, r4
 80039e2:	f7fd f85f 	bl	8000aa4 <__aeabi_fmul>
 80039e6:	4606      	mov	r6, r0
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 80039e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80039ec:	f7fc fea4 	bl	8000738 <__aeabi_f2d>
 80039f0:	4680      	mov	r8, r0
 80039f2:	4638      	mov	r0, r7
 80039f4:	4689      	mov	r9, r1
 80039f6:	f7fc fe9f 	bl	8000738 <__aeabi_f2d>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4640      	mov	r0, r8
 8003a00:	4649      	mov	r1, r9
 8003a02:	f7fc fc0b 	bl	800021c <__aeabi_dmul>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	4918      	ldr	r1, [pc, #96]	; (8003a70 <agcPrasolovFloat+0xdc>)
 8003a0e:	f7fc fd33 	bl	8000478 <__aeabi_dsub>
 8003a12:	4680      	mov	r8, r0
 8003a14:	4620      	mov	r0, r4
 8003a16:	4689      	mov	r9, r1
 8003a18:	f7fc fe8e 	bl	8000738 <__aeabi_f2d>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4640      	mov	r0, r8
 8003a22:	4649      	mov	r1, r9
 8003a24:	f7fc fbfa 	bl	800021c <__aeabi_dmul>
 8003a28:	4680      	mov	r8, r0
 8003a2a:	4689      	mov	r9, r1
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	9900      	ldr	r1, [sp, #0]
 8003a30:	f7fd f838 	bl	8000aa4 <__aeabi_fmul>
 8003a34:	f7fc fe80 	bl	8000738 <__aeabi_f2d>
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f7fc fd1c 	bl	800047c <__adddf3>
 8003a44:	f7fc fed0 	bl	80007e8 <__aeabi_d2f>
		destination[i] = FtoQ31(input);
 8003a48:	4659      	mov	r1, fp
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 8003a4a:	4604      	mov	r4, r0
		destination[i] = FtoQ31(input);
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7fd f829 	bl	8000aa4 <__aeabi_fmul>
 8003a52:	f7fd f977 	bl	8000d44 <__aeabi_f2iz>
 8003a56:	9b02      	ldr	r3, [sp, #8]
 8003a58:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	3501      	adds	r5, #1
 8003a60:	e7ab      	b.n	80039ba <agcPrasolovFloat+0x26>
 8003a62:	bf00      	nop
 8003a64:	20000014 	.word	0x20000014
 8003a68:	20000010 	.word	0x20000010
 8003a6c:	20000484 	.word	0x20000484
 8003a70:	3ff00000 	.word	0x3ff00000

08003a74 <softClip>:
#include "audio.h"
#include "arm_math.h"
#include <stdbool.h>
#include <stdint.h>

q31_t softClip(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	4614      	mov	r4, r2
	//in = in - 0.33333333333333f * in * in * in;
	//if (in > 0.999) in = 0.999;
	//if (in < -0.999) in = -0.999;

	q31_t multResult[blockSize];
 8003a7c:	0093      	lsls	r3, r2, #2
 8003a7e:	466a      	mov	r2, sp
 8003a80:	3307      	adds	r3, #7
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
q31_t softClip(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003a88:	af02      	add	r7, sp, #8
	q31_t multResult[blockSize];
 8003a8a:	469d      	mov	sp, r3
q31_t softClip(q31_t* source, q31_t* destination, uint16_t blockSize){
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	4688      	mov	r8, r1
	q31_t multResult[blockSize];
 8003a90:	ad02      	add	r5, sp, #8
	q31_t cilpA = FtoQ31(0.333333333f);

	arm_mult_q31(source, source, multResult, blockSize); // in^2
 8003a92:	4623      	mov	r3, r4
 8003a94:	462a      	mov	r2, r5
 8003a96:	4601      	mov	r1, r0
 8003a98:	f001 fb84 	bl	80051a4 <arm_mult_q31>
	arm_mult_q31(source, multResult, multResult, blockSize); // in^3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	462a      	mov	r2, r5
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f001 fb7e 	bl	80051a4 <arm_mult_q31>
	arm_scale_q31(multResult, cilpA, 0, multResult, blockSize); // in^3 * 1/3
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	4628      	mov	r0, r5
 8003aac:	2200      	movs	r2, #0
 8003aae:	4906      	ldr	r1, [pc, #24]	; (8003ac8 <softClip+0x54>)
 8003ab0:	9400      	str	r4, [sp, #0]
 8003ab2:	f001 faa1 	bl	8004ff8 <arm_scale_q31>
	//arm_negate_q31(multResult, multResult, blockSize); // - (in^3 * 1/3)
	//arm_add_q31(source, multResult, destination, blockSize); // in - (in^3 * 1/3)
	arm_sub_q31(source, multResult, destination, blockSize); // in - (in^3 * 1/3)
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	4623      	mov	r3, r4
 8003aba:	4642      	mov	r2, r8
 8003abc:	4629      	mov	r1, r5
 8003abe:	f001 fa0f 	bl	8004ee0 <arm_sub_q31>

		destination[i] = input - cube;

	}
	*/
}
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac8:	2aaaaac0 	.word	0x2aaaaac0

08003acc <dspInit>:
arm_fir_decimate_instance_q31	firInstanceDecQ;
arm_fir_interpolate_instance_q31 firInstanceInter;

int outStarted = 0;
void dspInit(void){
	outStarted = 0;
 8003acc:	2300      	movs	r3, #0
void dspInit(void){
 8003ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
	firInit();


#ifdef DSP_DECIMATED
	arm_fir_decimate_init_q31(&firInstanceDecI, 	FIR_NUM_TAPS, 			DSP_DECIMATION_RATE, 	firCoeffs, 		firStateI, 		DSP_BLOCK_SIZE);
 8003ad0:	2480      	movs	r4, #128	; 0x80
	outStarted = 0;
 8003ad2:	4d13      	ldr	r5, [pc, #76]	; (8003b20 <dspInit+0x54>)
	arm_fir_decimate_init_q31(&firInstanceDecI, 	FIR_NUM_TAPS, 			DSP_DECIMATION_RATE, 	firCoeffs, 		firStateI, 		DSP_BLOCK_SIZE);
 8003ad4:	4e13      	ldr	r6, [pc, #76]	; (8003b24 <dspInit+0x58>)
	outStarted = 0;
 8003ad6:	602b      	str	r3, [r5, #0]
	firInit();
 8003ad8:	f000 f956 	bl	8003d88 <firInit>
	arm_fir_decimate_init_q31(&firInstanceDecI, 	FIR_NUM_TAPS, 			DSP_DECIMATION_RATE, 	firCoeffs, 		firStateI, 		DSP_BLOCK_SIZE);
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <dspInit+0x5c>)
 8003ade:	2202      	movs	r2, #2
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2120      	movs	r1, #32
 8003ae4:	4633      	mov	r3, r6
 8003ae6:	9401      	str	r4, [sp, #4]
 8003ae8:	4810      	ldr	r0, [pc, #64]	; (8003b2c <dspInit+0x60>)
 8003aea:	f001 f8e7 	bl	8004cbc <arm_fir_decimate_init_q31>
	arm_fir_decimate_init_q31(&firInstanceDecQ, 	FIR_NUM_TAPS, 			DSP_DECIMATION_RATE, 	firCoeffs, 		firStateQ,		DSP_BLOCK_SIZE);
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <dspInit+0x64>)
 8003af0:	2202      	movs	r2, #2
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2120      	movs	r1, #32
 8003af6:	4633      	mov	r3, r6
 8003af8:	9401      	str	r4, [sp, #4]
 8003afa:	480e      	ldr	r0, [pc, #56]	; (8003b34 <dspInit+0x68>)
 8003afc:	f001 f8de 	bl	8004cbc <arm_fir_decimate_init_q31>
	arm_fir_interpolate_init_q31(&firInstanceInter, DSP_DECIMATION_RATE, 	FIR_NUM_TAPS_INTER, 	firCoeffsInter, firStateInter, 	DSP_BLOCK_SIZE);
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <dspInit+0x6c>)
 8003b02:	2208      	movs	r2, #8
 8003b04:	2102      	movs	r1, #2
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	9401      	str	r4, [sp, #4]
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <dspInit+0x70>)
 8003b0c:	480c      	ldr	r0, [pc, #48]	; (8003b40 <dspInit+0x74>)
 8003b0e:	f000 fffd 	bl	8004b0c <arm_fir_interpolate_init_q31>
#ifndef DSP_DECIMATED
	arm_fir_init_q31(&firInstanceI, FIR_NUM_TAPS, firCoeffs, firStateI, DSP_BLOCK_SIZE);
	arm_fir_init_q31(&firInstanceQ, FIR_NUM_TAPS, firCoeffs, firStateQ, DSP_BLOCK_SIZE);
#endif

	 fftInit();
 8003b12:	f000 f911 	bl	8003d38 <fftInit>
	//arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	//arm_fir_init_q31(&S2, NUM_TAPS, firCoeffs32, firState2, DSP_BLOCK_SIZE);

	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	 outStarted = 1;
 8003b16:	2301      	movs	r3, #1
 8003b18:	602b      	str	r3, [r5, #0]

}
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	bf00      	nop
 8003b20:	200017dc 	.word	0x200017dc
 8003b24:	08005ccc 	.word	0x08005ccc
 8003b28:	20000ab0 	.word	0x20000ab0
 8003b2c:	20000a8c 	.word	0x20000a8c
 8003b30:	20000f58 	.word	0x20000f58
 8003b34:	20000a98 	.word	0x20000a98
 8003b38:	20000d34 	.word	0x20000d34
 8003b3c:	08005d4c 	.word	0x08005d4c
 8003b40:	20000aa4 	.word	0x20000aa4

08003b44 <dspStart>:

void dspStart(void){
 8003b44:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 8003b46:	4c0b      	ldr	r4, [pc, #44]	; (8003b74 <dspStart+0x30>)
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7fe fff7 	bl	8002b3c <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // TIM1 CH2 = ADC trigger
 8003b4e:	2104      	movs	r1, #4
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7ff fb27 	bl	80031a4 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inBuf, ADC_BUFFER_LEN); // CH3 = audio output
 8003b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5a:	4907      	ldr	r1, [pc, #28]	; (8003b78 <dspStart+0x34>)
 8003b5c:	4807      	ldr	r0, [pc, #28]	; (8003b7c <dspStart+0x38>)
 8003b5e:	f7fd ff95 	bl	8001a8c <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
 8003b62:	4620      	mov	r0, r4


}
 8003b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
 8003b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6c:	2108      	movs	r1, #8
 8003b6e:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <dspStart+0x3c>)
 8003b70:	f7ff bbe2 	b.w	8003338 <HAL_TIM_PWM_Start_DMA>
 8003b74:	200003a8 	.word	0x200003a8
 8003b78:	200011dc 	.word	0x200011dc
 8003b7c:	20000148 	.word	0x20000148
 8003b80:	200015dc 	.word	0x200015dc

08003b84 <dspPrepareInput>:
//int adcBuffStart = 0;

void dspPrepareInput(void){
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);

	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003b84:	2100      	movs	r1, #0
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <dspPrepareInput+0x40>)
void dspPrepareInput(void){
 8003b88:	b510      	push	{r4, lr}
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003b8a:	781b      	ldrb	r3, [r3, #0]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003b8c:	4c0e      	ldr	r4, [pc, #56]	; (8003bc8 <dspPrepareInput+0x44>)
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003b8e:	f083 0201 	eor.w	r2, r3, #1
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <dspPrepareInput+0x48>)
 8003b94:	480e      	ldr	r0, [pc, #56]	; (8003bd0 <dspPrepareInput+0x4c>)
 8003b96:	eb03 2342 	add.w	r3, r3, r2, lsl #9
#define FtoQ31(x) 			(q31_t)(x * 2147483648.0f) //2147483648.0f
#define Q31toF(x) 			(float)(x / 2147483648.0f)	//2147483648.0f
//#define q31ToPwm(x)			(uint16_t)((x >> 21) + PWM_HALF)
//#define adcToQ31(x)			(q31_t)((x - ADC_HALF) << 20)
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
inline q31_t	adcToQ31(int16_t input)	{return ((input - ADC_HALF) << 20);}
 8003b9a:	f9b3 2000 	ldrsh.w	r2, [r3]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003b9e:	3101      	adds	r1, #1
 8003ba0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003ba4:	0512      	lsls	r2, r2, #20
		int ptr = i * ADC_DMA_CHANNELS + adcBuffStart;
		dspInI[i] = adcToQ31(inBuf[ptr]);
 8003ba6:	f844 2b04 	str.w	r2, [r4], #4
 8003baa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003bae:	2980      	cmp	r1, #128	; 0x80
 8003bb0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003bb4:	ea4f 5202 	mov.w	r2, r2, lsl #20
		dspInQ[i] = adcToQ31(inBuf[ptr + 1]);
 8003bb8:	f840 2b04 	str.w	r2, [r0], #4
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003bbc:	f103 0304 	add.w	r3, r3, #4
 8003bc0:	d1eb      	bne.n	8003b9a <dspPrepareInput+0x16>
	}
}
 8003bc2:	bd10      	pop	{r4, pc}
 8003bc4:	20000a89 	.word	0x20000a89
 8003bc8:	20000488 	.word	0x20000488
 8003bcc:	200011dc 	.word	0x200011dc
 8003bd0:	20000688 	.word	0x20000688

08003bd4 <dspPrepareOutput>:
void dspPrepareOutput(void){

	#ifdef DSP_DECIMATED_NO_INTERPOLATION
			int adcBuffStart = ADC_BUFFER_LEN/(ADC_DMA_CHANNELS*2) * (dspRingHalf == HALF_LOWER);

			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8003bd4:	2100      	movs	r1, #0
			int adcBuffStart = ADC_BUFFER_LEN/(ADC_DMA_CHANNELS*2) * (dspRingHalf == HALF_LOWER);
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <dspPrepareOutput+0x30>)
 8003bd8:	480b      	ldr	r0, [pc, #44]	; (8003c08 <dspPrepareOutput+0x34>)
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	f082 0301 	eor.w	r3, r2, #1
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <dspPrepareOutput+0x38>)
 8003be2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
				int ptr = adcBuffStart + k*2;
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8003be6:	f850 3b04 	ldr.w	r3, [r0], #4
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8003bea:	3101      	adds	r1, #1
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
 8003bec:	155b      	asrs	r3, r3, #21
 8003bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2940      	cmp	r1, #64	; 0x40
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8003bf6:	8013      	strh	r3, [r2, #0]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8003bf8:	8053      	strh	r3, [r2, #2]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8003bfa:	f102 0204 	add.w	r2, r2, #4
 8003bfe:	d1f2      	bne.n	8003be6 <dspPrepareOutput+0x12>

		for (int k=0; k < DSP_BLOCK_SIZE; k++)
			outBuf[adcBuffStart + k] = 		q31toPwm(dspOut[k]);
	#endif

}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000a89 	.word	0x20000a89
 8003c08:	20000888 	.word	0x20000888
 8003c0c:	200015dc 	.word	0x200015dc

08003c10 <dspProc>:

#ifndef M_PI
#    define M_PI 3.14159265358979323846
#endif

void dspProc(void){
 8003c10:	b570      	push	{r4, r5, r6, lr}
	if (!dspProcDone){
 8003c12:	4e29      	ldr	r6, [pc, #164]	; (8003cb8 <dspProc+0xa8>)
void dspProc(void){
 8003c14:	b0c0      	sub	sp, #256	; 0x100
	if (!dspProcDone){
 8003c16:	7833      	ldrb	r3, [r6, #0]
 8003c18:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d148      	bne.n	8003cb2 <dspProc+0xa2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);

		// fill dspInI[], dspInQ
		dspPrepareInput();
		metricsSet(METRIC_DSP_PREP_IN, (uint32_t)TIM2->CCR1);
 8003c20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003c24:	2201      	movs	r2, #1
 8003c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c2a:	4824      	ldr	r0, [pc, #144]	; (8003cbc <dspProc+0xac>)
 8003c2c:	f7fe fb00 	bl	8002230 <HAL_GPIO_WritePin>
		dspPrepareInput();
 8003c30:	f7ff ffa8 	bl	8003b84 <dspPrepareInput>
		metricsSet(METRIC_DSP_PREP_IN, (uint32_t)TIM2->CCR1);
 8003c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c36:	4628      	mov	r0, r5
 8003c38:	f000 f8a8 	bl	8003d8c <metricsSet>

		// process FFT
		fftProcess(dspOut);
 8003c3c:	4820      	ldr	r0, [pc, #128]	; (8003cc0 <dspProc+0xb0>)
 8003c3e:	f000 f87d 	bl	8003d3c <fftProcess>
		metricsSet(METRIC_DSP_FFT, (uint32_t)TIM2->CCR1);
 8003c42:	2001      	movs	r0, #1
 8003c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c46:	f000 f8a1 	bl	8003d8c <metricsSet>
		q31_t processingBufferI[DSP_BLOCK_SIZE_DEC];
		q31_t processingBufferQ[DSP_BLOCK_SIZE_DEC];

		// main filter
	#ifdef DSP_DECIMATED
		arm_fir_decimate_q31(&firInstanceDecI, dspInI, dspOut, DSP_BLOCK_SIZE);
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <dspProc+0xb0>)
 8003c4e:	491d      	ldr	r1, [pc, #116]	; (8003cc4 <dspProc+0xb4>)
 8003c50:	481d      	ldr	r0, [pc, #116]	; (8003cc8 <dspProc+0xb8>)
 8003c52:	f000 ff77 	bl	8004b44 <arm_fir_decimate_q31>
		arm_fir_decimate_q31(&firInstanceDecQ, dspInQ, processingBufferQ, DSP_BLOCK_SIZE);
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	466a      	mov	r2, sp
 8003c5a:	491c      	ldr	r1, [pc, #112]	; (8003ccc <dspProc+0xbc>)
 8003c5c:	481c      	ldr	r0, [pc, #112]	; (8003cd0 <dspProc+0xc0>)
 8003c5e:	f000 ff71 	bl	8004b44 <arm_fir_decimate_q31>
	#else
		arm_fir_q31(&firInstanceI, dspInI, dspOut, DSP_BLOCK_SIZE);
		arm_fir_q31(&firInstanceQ, dspInQ, dspOut, DSP_BLOCK_SIZE);
	#endif

		metricsSet(METRIC_DSP_FIR, (uint32_t)TIM2->CCR1);
 8003c62:	2002      	movs	r0, #2
 8003c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c66:	f000 f891 	bl	8003d8c <metricsSet>
		agcPrasolovFloat(dspOut, dspOut, DSP_BLOCK_SIZE_DEC);
 8003c6a:	4915      	ldr	r1, [pc, #84]	; (8003cc0 <dspProc+0xb0>)
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	4608      	mov	r0, r1
 8003c70:	f7ff fe90 	bl	8003994 <agcPrasolovFloat>
		metricsSet(METRIC_DSP_AGC, (uint32_t)TIM2->CCR1);
 8003c74:	2003      	movs	r0, #3
 8003c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c78:	f000 f888 	bl	8003d8c <metricsSet>
		softClip(dspOut, dspOut, DSP_BLOCK_SIZE_DEC);
 8003c7c:	4910      	ldr	r1, [pc, #64]	; (8003cc0 <dspProc+0xb0>)
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	4608      	mov	r0, r1
 8003c82:	f7ff fef7 	bl	8003a74 <softClip>
		metricsSet(METRIC_DSP_CLIP, (uint32_t)TIM2->CCR1);
 8003c86:	2004      	movs	r0, #4
 8003c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c8a:	f000 f87f 	bl	8003d8c <metricsSet>

	#ifndef DSP_DECIMATED_NO_INTERPOLATION
		arm_fir_interpolate_q31(&firInstanceInter, processingBufferI, dspOut, DSP_BLOCK_SIZE_DEC);
	#endif

		dspPrepareOutput();
 8003c8e:	f7ff ffa1 	bl	8003bd4 <dspPrepareOutput>
		metricsSet(METRIC_DSP_PREP_OUT, (uint32_t)TIM2->CCR1);
 8003c92:	2005      	movs	r0, #5
 8003c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c96:	f000 f879 	bl	8003d8c <metricsSet>
		dspProcDone = 1;
 8003c9a:	2301      	movs	r3, #1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8003c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ca0:	4806      	ldr	r0, [pc, #24]	; (8003cbc <dspProc+0xac>)
 8003ca2:	462a      	mov	r2, r5
		dspProcDone = 1;
 8003ca4:	7033      	strb	r3, [r6, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8003ca6:	f7fe fac3 	bl	8002230 <HAL_GPIO_WritePin>
		metricsSet(METRIC_DSP_TOTAL, (uint32_t)TIM2->CCR1);
 8003caa:	2006      	movs	r0, #6
 8003cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cae:	f000 f86d 	bl	8003d8c <metricsSet>
	}
}
 8003cb2:	b040      	add	sp, #256	; 0x100
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000a88 	.word	0x20000a88
 8003cbc:	40010c00 	.word	0x40010c00
 8003cc0:	20000888 	.word	0x20000888
 8003cc4:	20000488 	.word	0x20000488
 8003cc8:	20000a8c 	.word	0x20000a8c
 8003ccc:	20000688 	.word	0x20000688
 8003cd0:	20000a98 	.word	0x20000a98

08003cd4 <HAL_ADC_ConvHalfCpltCallback>:
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){



}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){
 8003cd8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,dspRingHalf);
 8003cda:	4c07      	ldr	r4, [pc, #28]	; (8003cf8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>)
 8003cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce0:	7822      	ldrb	r2, [r4, #0]
 8003ce2:	4806      	ldr	r0, [pc, #24]	; (8003cfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>)
 8003ce4:	f7fe faa4 	bl	8002230 <HAL_GPIO_WritePin>
	dspRingHalf = HALF_UPPER;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	7023      	strb	r3, [r4, #0]
	dspProcDone = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
 8003cf0:	7013      	strb	r3, [r2, #0]

	elseDone = 0;
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x2c>)
 8003cf4:	7013      	strb	r3, [r2, #0]
};
 8003cf6:	bd10      	pop	{r4, pc}
 8003cf8:	20000a89 	.word	0x20000a89
 8003cfc:	40010c00 	.word	0x40010c00
 8003d00:	20000a88 	.word	0x20000a88
 8003d04:	20000144 	.word	0x20000144

08003d08 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim1){
 8003d08:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,dspRingHalf);
 8003d0a:	4c07      	ldr	r4, [pc, #28]	; (8003d28 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d10:	7822      	ldrb	r2, [r4, #0]
 8003d12:	4806      	ldr	r0, [pc, #24]	; (8003d2c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8003d14:	f7fe fa8c 	bl	8002230 <HAL_GPIO_WritePin>
		dspRingHalf = HALF_LOWER;
 8003d18:	2300      	movs	r3, #0
		dspProcDone = 0;
 8003d1a:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
		dspRingHalf = HALF_LOWER;
 8003d1c:	7023      	strb	r3, [r4, #0]
		dspProcDone = 0;
 8003d1e:	7013      	strb	r3, [r2, #0]
		elseDone = 0;
 8003d20:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8003d22:	7013      	strb	r3, [r2, #0]

}
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	bf00      	nop
 8003d28:	20000a89 	.word	0x20000a89
 8003d2c:	40010c00 	.word	0x40010c00
 8003d30:	20000a88 	.word	0x20000a88
 8003d34:	20000144 	.word	0x20000144

08003d38 <fftInit>:

arm_cfft_instance_q31 fftS;

void fftInit(void) {
	//arm_cfft_radix4_init_q31(&fftS, FFT_LEN, 0, 1);
}
 8003d38:	4770      	bx	lr
	...

08003d3c <fftProcess>:

q31_t fftBuf[FFT_LEN*2];
q31_t magnitudes[FFT_LEN/2];

void fftProcess(q31_t *inputF32) {
 8003d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	//arm_cfft_radix4_q31(&fftS, inputF32);

	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 8003d3e:	4c0e      	ldr	r4, [pc, #56]	; (8003d78 <fftProcess+0x3c>)
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 8003d40:	4d0e      	ldr	r5, [pc, #56]	; (8003d7c <fftProcess+0x40>)
	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 8003d42:	4621      	mov	r1, r4
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	f000 f8f9 	bl	8003f3c <arm_copy_q31>
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	2200      	movs	r2, #0
 8003d50:	480b      	ldr	r0, [pc, #44]	; (8003d80 <fftProcess+0x44>)
 8003d52:	f000 fa6d 	bl	8004230 <arm_cfft_q31>
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 8003d56:	4629      	mov	r1, r5
 8003d58:	4620      	mov	r0, r4
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	f000 ffca 	bl	8004cf4 <arm_cmplx_mag_q31>

	arm_scale_q31(magnitudes, 2126008812, -24, magnitudes, FFT_LEN/2);
 8003d60:	2340      	movs	r3, #64	; 0x40
 8003d62:	f06f 0217 	mvn.w	r2, #23
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4628      	mov	r0, r5
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	4905      	ldr	r1, [pc, #20]	; (8003d84 <fftProcess+0x48>)
 8003d6e:	f001 f943 	bl	8004ff8 <arm_scale_q31>



	//arm_max_f32(fftMagnitudesdB, FFT_LEN, &maxValue, &maxIndex);
}
 8003d72:	b003      	add	sp, #12
 8003d74:	bd30      	pop	{r4, r5, pc}
 8003d76:	bf00      	nop
 8003d78:	200017e0 	.word	0x200017e0
 8003d7c:	20001bf0 	.word	0x20001bf0
 8003d80:	20001be0 	.word	0x20001be0
 8003d84:	7eb851ec 	.word	0x7eb851ec

08003d88 <firInit>:


	//arm_fir_decimate_init_q31(&firInstanceI, FIR_NUM_TAPS, 2, firCoeffs, firStateI, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&firInstanceQ, FIR_NUM_TAPS, 2, firCoeffs, firStateQ, DSP_BLOCK_SIZE);

}
 8003d88:	4770      	bx	lr
	...

08003d8c <metricsSet>:
		.metric[METRIC_DSP_PREP_OUT] = {"prep out", 0, 0.0f},
		.metric[METRIC_DSP_TOTAL] = {"total", 0, 0.0f},
};

void metricsSet(int ID, uint32_t data){
	metrics.metric[ID].time = data;
 8003d8c:	2218      	movs	r2, #24
 8003d8e:	4b02      	ldr	r3, [pc, #8]	; (8003d98 <metricsSet+0xc>)
 8003d90:	fb02 3300 	mla	r3, r2, r0, r3
 8003d94:	6119      	str	r1, [r3, #16]
};
 8003d96:	4770      	bx	lr
 8003d98:	20000018 	.word	0x20000018

08003d9c <debugClearTerminal>:
UART_HandleTypeDef* dbgUartPtr = &huart1;

float audioLoad = 0;
float everythingElseLoad = 0;

void debugClearTerminal(void){
 8003d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[] = "\x1b[2J";//"\033[H";
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <debugClearTerminal+0x44>)
	char buffer2[] = "\x1b[H"; //"\x1b[H";

	int result;

#ifdef DBG_UART
	HAL_UART_Transmit_DMA(dbgUartPtr, buffer, strlen(buffer));
 8003da0:	4c10      	ldr	r4, [pc, #64]	; (8003de4 <debugClearTerminal+0x48>)
	char buffer[] = "\x1b[2J";//"\033[H";
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	791b      	ldrb	r3, [r3, #4]
 8003da6:	9002      	str	r0, [sp, #8]
 8003da8:	f88d 300c 	strb.w	r3, [sp, #12]
	char buffer2[] = "\x1b[H"; //"\x1b[H";
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <debugClearTerminal+0x4c>)
	HAL_UART_Transmit_DMA(dbgUartPtr, buffer, strlen(buffer));
 8003dae:	a802      	add	r0, sp, #8
	char buffer2[] = "\x1b[H"; //"\x1b[H";
 8003db0:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit_DMA(dbgUartPtr, buffer, strlen(buffer));
 8003db2:	f7fc fa2b 	bl	800020c <strlen>
 8003db6:	a902      	add	r1, sp, #8
 8003db8:	b282      	uxth	r2, r0
 8003dba:	6820      	ldr	r0, [r4, #0]
 8003dbc:	f7ff fc0e 	bl	80035dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7fd fd5d 	bl	8001880 <HAL_Delay>
	HAL_UART_Transmit_DMA(dbgUartPtr, buffer2, strlen(buffer2));
 8003dc6:	a801      	add	r0, sp, #4
 8003dc8:	f7fc fa20 	bl	800020c <strlen>
 8003dcc:	a901      	add	r1, sp, #4
 8003dce:	b282      	uxth	r2, r0
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	f7ff fc03 	bl	80035dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1);
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f7fd fd52 	bl	8001880 <HAL_Delay>
	do result = CDC_Transmit_FS((unsigned char*)buffer2, strlen(buffer2));
		while (result != USBD_OK);
#endif


}
 8003ddc:	b004      	add	sp, #16
 8003dde:	bd10      	pop	{r4, pc}
 8003de0:	08005d6c 	.word	0x08005d6c
 8003de4:	200000c0 	.word	0x200000c0
 8003de8:	00485b1b 	.word	0x00485b1b

08003dec <debugPrintColor>:
	free(output);
}



void debugPrintColor(int color, const char *fmt, ...){
 8003dec:	b40e      	push	{r1, r2, r3}
 8003dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df2:	b093      	sub	sp, #76	; 0x4c
 8003df4:	ac19      	add	r4, sp, #100	; 0x64
 8003df6:	f854 8b04 	ldr.w	r8, [r4], #4
 8003dfa:	4605      	mov	r5, r0
	
	uint32_t timeNow = HAL_GetTick();
 8003dfc:	f7fd fd3a 	bl	8001874 <HAL_GetTick>
	
	char timBuf[32];
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 8003e00:	4f28      	ldr	r7, [pc, #160]	; (8003ea4 <debugPrintColor+0xb8>)
 8003e02:	4929      	ldr	r1, [pc, #164]	; (8003ea8 <debugPrintColor+0xbc>)
 8003e04:	683a      	ldr	r2, [r7, #0]
	uint32_t timeNow = HAL_GetTick();
 8003e06:	4606      	mov	r6, r0
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 8003e08:	1a82      	subs	r2, r0, r2
 8003e0a:	a802      	add	r0, sp, #8
 8003e0c:	f001 fb58 	bl	80054c0 <siprintf>
	
	char txtBuf[32];
    va_list args;
    va_start(args, fmt);
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 8003e10:	2120      	movs	r1, #32
 8003e12:	4623      	mov	r3, r4
 8003e14:	4642      	mov	r2, r8
 8003e16:	a80a      	add	r0, sp, #40	; 0x28
    va_start(args, fmt);
 8003e18:	9401      	str	r4, [sp, #4]
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 8003e1a:	f001 fbb3 	bl	8005584 <vsniprintf>
    va_end(args);
	
	//CDC_Transmit_FS((unsigned char*)txtBuf, strlen(txtBuf));
	////HAL_Delay(100);
	char nlBuf[] = {"\r\n"};
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <debugPrintColor+0xc0>)

	char* output;
	output = malloc(10 + strlen(timBuf) + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
 8003e20:	a802      	add	r0, sp, #8
	char nlBuf[] = {"\r\n"};
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	f8ad 2000 	strh.w	r2, [sp]
 8003e2a:	f88d 3002 	strb.w	r3, [sp, #2]
	output = malloc(10 + strlen(timBuf) + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
 8003e2e:	f7fc f9ed 	bl	800020c <strlen>
 8003e32:	4604      	mov	r4, r0
 8003e34:	a80a      	add	r0, sp, #40	; 0x28
 8003e36:	f7fc f9e9 	bl	800020c <strlen>
 8003e3a:	4680      	mov	r8, r0
 8003e3c:	4668      	mov	r0, sp
 8003e3e:	f7fc f9e5 	bl	800020c <strlen>
 8003e42:	4444      	add	r4, r8
 8003e44:	340b      	adds	r4, #11
 8003e46:	4420      	add	r0, r4
 8003e48:	f001 fa3e 	bl	80052c8 <malloc>
		
	switch (color){
 8003e4c:	2d01      	cmp	r5, #1
	output = malloc(10 + strlen(timBuf) + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
 8003e4e:	4604      	mov	r4, r0
	switch (color){
 8003e50:	d024      	beq.n	8003e9c <debugPrintColor+0xb0>
 8003e52:	2d02      	cmp	r5, #2
 8003e54:	d024      	beq.n	8003ea0 <debugPrintColor+0xb4>
 8003e56:	b915      	cbnz	r5, 8003e5e <debugPrintColor+0x72>
		case COLOR_RED: {strcpy(output, "\033[0;31m"); break;}
 8003e58:	4915      	ldr	r1, [pc, #84]	; (8003eb0 <debugPrintColor+0xc4>)
		case COLOR_GREEN: {strcpy(output, "\033[0;32m"); break;}
		case COLOR_BLUE: {strcpy(output, "\033[1;34m"); break;}
 8003e5a:	f001 fb60 	bl	800551e <strcpy>
	}
	
	strcat(output, timBuf);
 8003e5e:	a902      	add	r1, sp, #8
 8003e60:	4620      	mov	r0, r4
 8003e62:	f001 fb4d 	bl	8005500 <strcat>
	strcat(output, txtBuf); 
 8003e66:	a90a      	add	r1, sp, #40	; 0x28
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f001 fb49 	bl	8005500 <strcat>
	strcat(output, nlBuf); 
 8003e6e:	4669      	mov	r1, sp
 8003e70:	4620      	mov	r0, r4
 8003e72:	f001 fb45 	bl	8005500 <strcat>
	strcat(output, "\033[0m");
 8003e76:	490f      	ldr	r1, [pc, #60]	; (8003eb4 <debugPrintColor+0xc8>)
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f001 fb41 	bl	8005500 <strcat>
	//((USBD_CDC_HandleTypeDef*)(USBD_Device.pClassData))->TxState
	
	lastTime = timeNow;
	
	#ifdef DBG_UART
		HAL_UART_Transmit_DMA(dbgUartPtr, output, strlen(output));
 8003e7e:	4620      	mov	r0, r4
	lastTime = timeNow;
 8003e80:	603e      	str	r6, [r7, #0]
		HAL_UART_Transmit_DMA(dbgUartPtr, output, strlen(output));
 8003e82:	f7fc f9c3 	bl	800020c <strlen>
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <debugPrintColor+0xcc>)
 8003e88:	b282      	uxth	r2, r0
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f7ff fba5 	bl	80035dc <HAL_UART_Transmit_DMA>
		while (result != USBD_OK);
	#endif
	*/

	//free(output);
}
 8003e92:	b013      	add	sp, #76	; 0x4c
 8003e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e98:	b003      	add	sp, #12
 8003e9a:	4770      	bx	lr
		case COLOR_GREEN: {strcpy(output, "\033[0;32m"); break;}
 8003e9c:	4907      	ldr	r1, [pc, #28]	; (8003ebc <debugPrintColor+0xd0>)
 8003e9e:	e7dc      	b.n	8003e5a <debugPrintColor+0x6e>
		case COLOR_BLUE: {strcpy(output, "\033[1;34m"); break;}
 8003ea0:	4907      	ldr	r1, [pc, #28]	; (8003ec0 <debugPrintColor+0xd4>)
 8003ea2:	e7da      	b.n	8003e5a <debugPrintColor+0x6e>
 8003ea4:	20001d00 	.word	0x20001d00
 8003ea8:	08005d71 	.word	0x08005d71
 8003eac:	08005c9f 	.word	0x08005c9f
 8003eb0:	08005d7a 	.word	0x08005d7a
 8003eb4:	08005d92 	.word	0x08005d92
 8003eb8:	200000c0 	.word	0x200000c0
 8003ebc:	08005d82 	.word	0x08005d82
 8003ec0:	08005d8a 	.word	0x08005d8a

08003ec4 <debugPinInit>:
#define DEBUG_PIN_PORT 	GPIOC

GPIO_InitTypeDef GPIO_InitStruct_ = {0};
	
void debugPinInit(void){
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <debugPinInit+0x30>)
void debugPinInit(void){
 8003ec6:	b082      	sub	sp, #8
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec8:	699a      	ldr	r2, [r3, #24]
	
	GPIO_InitStruct_.Pin = DEBUG_PIN;
 8003eca:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <debugPinInit+0x34>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ecc:	f042 0210 	orr.w	r2, r2, #16
 8003ed0:	619a      	str	r2, [r3, #24]
 8003ed2:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct_.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed4:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct_.Mode = GPIO_MODE_OUTPUT_PP;
 8003ede:	2301      	movs	r3, #1
  GPIO_InitStruct_.Pull = GPIO_NOPULL;
  GPIO_InitStruct_.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee0:	2000      	movs	r0, #0
  GPIO_InitStruct_.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee2:	e9c1 2300 	strd	r2, r3, [r1]
  GPIO_InitStruct_.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e9c1 0302 	strd	r0, r3, [r1, #8]

  HAL_GPIO_Init(DEBUG_PIN_PORT, &GPIO_InitStruct_);
 8003eec:	4803      	ldr	r0, [pc, #12]	; (8003efc <debugPinInit+0x38>)
}
 8003eee:	b002      	add	sp, #8
  HAL_GPIO_Init(DEBUG_PIN_PORT, &GPIO_InitStruct_);
 8003ef0:	f7fe b8c4 	b.w	800207c <HAL_GPIO_Init>
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	20001cf0 	.word	0x20001cf0
 8003efc:	40011000 	.word	0x40011000

08003f00 <debugInit>:

void debugPinSet(bool i){
	HAL_GPIO_WritePin(DEBUG_PIN_PORT, DEBUG_PIN, i); 
}

void debugInit(void){
 8003f00:	b508      	push	{r3, lr}
	HAL_Delay(500);
 8003f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f06:	f7fd fcbb 	bl	8001880 <HAL_Delay>
	debugClearTerminal();
 8003f0a:	f7ff ff47 	bl	8003d9c <debugClearTerminal>
	HAL_Delay(500);
 8003f0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f12:	f7fd fcb5 	bl	8001880 <HAL_Delay>
	debugPrintColor(COLOR_GREEN, "hello!");
 8003f16:	4907      	ldr	r1, [pc, #28]	; (8003f34 <debugInit+0x34>)
 8003f18:	2001      	movs	r0, #1
 8003f1a:	f7ff ff67 	bl	8003dec <debugPrintColor>
	debugPrintColor(COLOR_BLUE, "", HAL_RCC_GetSysClockFreq());
 8003f1e:	f7fe fbd1 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8003f22:	4905      	ldr	r1, [pc, #20]	; (8003f38 <debugInit+0x38>)
 8003f24:	4602      	mov	r2, r0
 8003f26:	2002      	movs	r0, #2
 8003f28:	f7ff ff60 	bl	8003dec <debugPrintColor>
	debugPinInit();
}
 8003f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	debugPinInit();
 8003f30:	f7ff bfc8 	b.w	8003ec4 <debugPinInit>
 8003f34:	08005d97 	.word	0x08005d97
 8003f38:	08005ca1 	.word	0x08005ca1

08003f3c <arm_copy_q31>:
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003f44:	4696      	mov	lr, r2
 8003f46:	468c      	mov	ip, r1
 8003f48:	d01e      	beq.n	8003f88 <arm_copy_q31+0x4c>
 8003f4a:	4645      	mov	r5, r8
 8003f4c:	f100 0410 	add.w	r4, r0, #16
 8003f50:	f101 0310 	add.w	r3, r1, #16
 8003f54:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8003f58:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8003f5c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8003f60:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8003f64:	3d01      	subs	r5, #1
 8003f66:	f843 1c10 	str.w	r1, [r3, #-16]
 8003f6a:	f843 2c0c 	str.w	r2, [r3, #-12]
 8003f6e:	f843 7c08 	str.w	r7, [r3, #-8]
 8003f72:	f843 6c04 	str.w	r6, [r3, #-4]
 8003f76:	f104 0410 	add.w	r4, r4, #16
 8003f7a:	f103 0310 	add.w	r3, r3, #16
 8003f7e:	d1e9      	bne.n	8003f54 <arm_copy_q31+0x18>
 8003f80:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003f84:	4440      	add	r0, r8
 8003f86:	44c4      	add	ip, r8
 8003f88:	f01e 0203 	ands.w	r2, lr, #3
 8003f8c:	d007      	beq.n	8003f9e <arm_copy_q31+0x62>
 8003f8e:	f1ac 0104 	sub.w	r1, ip, #4
 8003f92:	f850 3b04 	ldr.w	r3, [r0], #4
 8003f96:	3a01      	subs	r2, #1
 8003f98:	f841 3f04 	str.w	r3, [r1, #4]!
 8003f9c:	d1f9      	bne.n	8003f92 <arm_copy_q31+0x56>
 8003f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa2:	bf00      	nop

08003fa4 <arm_cfft_radix4by2_q31>:
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	b08b      	sub	sp, #44	; 0x2c
 8003fae:	9107      	str	r1, [sp, #28]
 8003fb0:	4682      	mov	sl, r0
 8003fb2:	9205      	str	r2, [sp, #20]
 8003fb4:	9306      	str	r3, [sp, #24]
 8003fb6:	f000 8084 	beq.w	80040c2 <arm_cfft_radix4by2_q31+0x11e>
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	eb00 0b03 	add.w	fp, r0, r3
 8003fc0:	46de      	mov	lr, fp
 8003fc2:	46d4      	mov	ip, sl
 8003fc4:	4691      	mov	r9, r2
 8003fc6:	9308      	str	r3, [sp, #32]
 8003fc8:	2500      	movs	r5, #0
 8003fca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003fce:	f85b 3035 	ldr.w	r3, [fp, r5, lsl #3]
 8003fd2:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8003fd6:	109e      	asrs	r6, r3, #2
 8003fd8:	9b05      	ldr	r3, [sp, #20]
 8003fda:	1092      	asrs	r2, r2, #2
 8003fdc:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8003fe0:	1991      	adds	r1, r2, r6
 8003fe2:	2700      	movs	r7, #0
 8003fe4:	1b92      	subs	r2, r2, r6
 8003fe6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003fea:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8003fee:	fbc3 6702 	smlal	r6, r7, r3, r2
 8003ff2:	f84a 1035 	str.w	r1, [sl, r5, lsl #3]
 8003ff6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003ffa:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003ffe:	1080      	asrs	r0, r0, #2
 8004000:	1089      	asrs	r1, r1, #2
 8004002:	ebc1 0800 	rsb	r8, r1, r0
 8004006:	9701      	str	r7, [sp, #4]
 8004008:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800400c:	2700      	movs	r7, #0
 800400e:	fbc8 6703 	smlal	r6, r7, r8, r3
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	9302      	str	r3, [sp, #8]
 8004018:	fb82 2304 	smull	r2, r3, r2, r4
 800401c:	9703      	str	r7, [sp, #12]
 800401e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004022:	1ab6      	subs	r6, r6, r2
 8004024:	eb67 0703 	sbc.w	r7, r7, r3
 8004028:	4632      	mov	r2, r6
 800402a:	463b      	mov	r3, r7
 800402c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004030:	fbc4 6708 	smlal	r6, r7, r4, r8
 8004034:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8004038:	f147 0700 	adc.w	r7, r7, #0
 800403c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004040:	f143 0300 	adc.w	r3, r3, #0
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4401      	add	r1, r0
 8004048:	007a      	lsls	r2, r7, #1
 800404a:	f8cc 1004 	str.w	r1, [ip, #4]
 800404e:	f84b 2035 	str.w	r2, [fp, r5, lsl #3]
 8004052:	f8ce 3004 	str.w	r3, [lr, #4]
 8004056:	9b06      	ldr	r3, [sp, #24]
 8004058:	3501      	adds	r5, #1
 800405a:	429d      	cmp	r5, r3
 800405c:	f109 0908 	add.w	r9, r9, #8
 8004060:	f10c 0c08 	add.w	ip, ip, #8
 8004064:	f10e 0e08 	add.w	lr, lr, #8
 8004068:	d1b1      	bne.n	8003fce <arm_cfft_radix4by2_q31+0x2a>
 800406a:	9e05      	ldr	r6, [sp, #20]
 800406c:	4650      	mov	r0, sl
 800406e:	4629      	mov	r1, r5
 8004070:	4632      	mov	r2, r6
 8004072:	2302      	movs	r3, #2
 8004074:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004076:	f000 f939 	bl	80042ec <arm_radix4_butterfly_q31>
 800407a:	9b07      	ldr	r3, [sp, #28]
 800407c:	4629      	mov	r1, r5
 800407e:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004082:	4632      	mov	r2, r6
 8004084:	2302      	movs	r3, #2
 8004086:	f000 f931 	bl	80042ec <arm_radix4_butterfly_q31>
 800408a:	9b08      	ldr	r3, [sp, #32]
 800408c:	f10a 0a04 	add.w	sl, sl, #4
 8004090:	449b      	add	fp, r3
 8004092:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004096:	1d21      	adds	r1, r4, #4
 8004098:	c90e      	ldmia	r1, {r1, r2, r3}
 800409a:	0040      	lsls	r0, r0, #1
 800409c:	0049      	lsls	r1, r1, #1
 800409e:	0052      	lsls	r2, r2, #1
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	f84a 0c04 	str.w	r0, [sl, #-4]
 80040a6:	3410      	adds	r4, #16
 80040a8:	f844 1c0c 	str.w	r1, [r4, #-12]
 80040ac:	f844 2c08 	str.w	r2, [r4, #-8]
 80040b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80040b4:	455c      	cmp	r4, fp
 80040b6:	f10a 0a10 	add.w	sl, sl, #16
 80040ba:	d1ea      	bne.n	8004092 <arm_cfft_radix4by2_q31+0xee>
 80040bc:	b00b      	add	sp, #44	; 0x2c
 80040be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c2:	461c      	mov	r4, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	2302      	movs	r3, #2
 80040c8:	f000 f910 	bl	80042ec <arm_radix4_butterfly_q31>
 80040cc:	4621      	mov	r1, r4
 80040ce:	9b07      	ldr	r3, [sp, #28]
 80040d0:	9a05      	ldr	r2, [sp, #20]
 80040d2:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 80040d6:	2302      	movs	r3, #2
 80040d8:	b00b      	add	sp, #44	; 0x2c
 80040da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040de:	f000 b905 	b.w	80042ec <arm_radix4_butterfly_q31>
 80040e2:	bf00      	nop

080040e4 <arm_cfft_radix4by2_inverse_q31>:
 80040e4:	460b      	mov	r3, r1
 80040e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	b08b      	sub	sp, #44	; 0x2c
 80040ee:	9107      	str	r1, [sp, #28]
 80040f0:	4682      	mov	sl, r0
 80040f2:	4611      	mov	r1, r2
 80040f4:	9205      	str	r2, [sp, #20]
 80040f6:	9306      	str	r3, [sp, #24]
 80040f8:	f000 8089 	beq.w	800420e <arm_cfft_radix4by2_inverse_q31+0x12a>
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	eb00 0b03 	add.w	fp, r0, r3
 8004102:	46de      	mov	lr, fp
 8004104:	4684      	mov	ip, r0
 8004106:	9308      	str	r3, [sp, #32]
 8004108:	2500      	movs	r5, #0
 800410a:	9009      	str	r0, [sp, #36]	; 0x24
 800410c:	f85b 2035 	ldr.w	r2, [fp, r5, lsl #3]
 8004110:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8004114:	9805      	ldr	r0, [sp, #20]
 8004116:	1096      	asrs	r6, r2, #2
 8004118:	f850 4035 	ldr.w	r4, [r0, r5, lsl #3]
 800411c:	109b      	asrs	r3, r3, #2
 800411e:	199a      	adds	r2, r3, r6
 8004120:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004124:	1b9b      	subs	r3, r3, r6
 8004126:	f04f 0900 	mov.w	r9, #0
 800412a:	6848      	ldr	r0, [r1, #4]
 800412c:	fbc4 8903 	smlal	r8, r9, r4, r3
 8004130:	f84a 2035 	str.w	r2, [sl, r5, lsl #3]
 8004134:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8004138:	f8de 2004 	ldr.w	r2, [lr, #4]
 800413c:	10be      	asrs	r6, r7, #2
 800413e:	1092      	asrs	r2, r2, #2
 8004140:	9604      	str	r6, [sp, #16]
 8004142:	f8cd 9004 	str.w	r9, [sp, #4]
 8004146:	1ab6      	subs	r6, r6, r2
 8004148:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800414c:	f04f 0900 	mov.w	r9, #0
 8004150:	fbc6 8904 	smlal	r8, r9, r6, r4
 8004154:	fb86 6700 	smull	r6, r7, r6, r0
 8004158:	2400      	movs	r4, #0
 800415a:	9400      	str	r4, [sp, #0]
 800415c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004160:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004164:	f8cd 8008 	str.w	r8, [sp, #8]
 8004168:	ebb8 0806 	subs.w	r8, r8, r6
 800416c:	eb69 0907 	sbc.w	r9, r9, r7
 8004170:	4646      	mov	r6, r8
 8004172:	464f      	mov	r7, r9
 8004174:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004178:	fbc0 8903 	smlal	r8, r9, r0, r3
 800417c:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8004180:	9b04      	ldr	r3, [sp, #16]
 8004182:	f147 0700 	adc.w	r7, r7, #0
 8004186:	441a      	add	r2, r3
 8004188:	007b      	lsls	r3, r7, #1
 800418a:	f8cc 2004 	str.w	r2, [ip, #4]
 800418e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004192:	f84b 3035 	str.w	r3, [fp, r5, lsl #3]
 8004196:	9b06      	ldr	r3, [sp, #24]
 8004198:	f149 0900 	adc.w	r9, r9, #0
 800419c:	3501      	adds	r5, #1
 800419e:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80041a2:	429d      	cmp	r5, r3
 80041a4:	f8ce 2004 	str.w	r2, [lr, #4]
 80041a8:	f101 0108 	add.w	r1, r1, #8
 80041ac:	f10c 0c08 	add.w	ip, ip, #8
 80041b0:	f10e 0e08 	add.w	lr, lr, #8
 80041b4:	d1aa      	bne.n	800410c <arm_cfft_radix4by2_inverse_q31+0x28>
 80041b6:	9e05      	ldr	r6, [sp, #20]
 80041b8:	4650      	mov	r0, sl
 80041ba:	4629      	mov	r1, r5
 80041bc:	4632      	mov	r2, r6
 80041be:	2302      	movs	r3, #2
 80041c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80041c2:	f000 faa1 	bl	8004708 <arm_radix4_butterfly_inverse_q31>
 80041c6:	9b07      	ldr	r3, [sp, #28]
 80041c8:	4629      	mov	r1, r5
 80041ca:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 80041ce:	4632      	mov	r2, r6
 80041d0:	2302      	movs	r3, #2
 80041d2:	f000 fa99 	bl	8004708 <arm_radix4_butterfly_inverse_q31>
 80041d6:	9b08      	ldr	r3, [sp, #32]
 80041d8:	f10a 0a04 	add.w	sl, sl, #4
 80041dc:	449b      	add	fp, r3
 80041de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80041e2:	1d21      	adds	r1, r4, #4
 80041e4:	c90e      	ldmia	r1, {r1, r2, r3}
 80041e6:	0040      	lsls	r0, r0, #1
 80041e8:	0049      	lsls	r1, r1, #1
 80041ea:	0052      	lsls	r2, r2, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	f84a 0c04 	str.w	r0, [sl, #-4]
 80041f2:	3410      	adds	r4, #16
 80041f4:	f844 1c0c 	str.w	r1, [r4, #-12]
 80041f8:	f844 2c08 	str.w	r2, [r4, #-8]
 80041fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8004200:	455c      	cmp	r4, fp
 8004202:	f10a 0a10 	add.w	sl, sl, #16
 8004206:	d1ea      	bne.n	80041de <arm_cfft_radix4by2_inverse_q31+0xfa>
 8004208:	b00b      	add	sp, #44	; 0x2c
 800420a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420e:	461c      	mov	r4, r3
 8004210:	4619      	mov	r1, r3
 8004212:	2302      	movs	r3, #2
 8004214:	f000 fa78 	bl	8004708 <arm_radix4_butterfly_inverse_q31>
 8004218:	4621      	mov	r1, r4
 800421a:	9b07      	ldr	r3, [sp, #28]
 800421c:	9a05      	ldr	r2, [sp, #20]
 800421e:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004222:	2302      	movs	r3, #2
 8004224:	b00b      	add	sp, #44	; 0x2c
 8004226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f000 ba6d 	b.w	8004708 <arm_radix4_butterfly_inverse_q31>
 800422e:	bf00      	nop

08004230 <arm_cfft_q31>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	2a01      	cmp	r2, #1
 8004234:	460d      	mov	r5, r1
 8004236:	4604      	mov	r4, r0
 8004238:	461e      	mov	r6, r3
 800423a:	8801      	ldrh	r1, [r0, #0]
 800423c:	d024      	beq.n	8004288 <arm_cfft_q31+0x58>
 800423e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004242:	d013      	beq.n	800426c <arm_cfft_q31+0x3c>
 8004244:	d808      	bhi.n	8004258 <arm_cfft_q31+0x28>
 8004246:	2920      	cmp	r1, #32
 8004248:	d031      	beq.n	80042ae <arm_cfft_q31+0x7e>
 800424a:	d945      	bls.n	80042d8 <arm_cfft_q31+0xa8>
 800424c:	2940      	cmp	r1, #64	; 0x40
 800424e:	d00d      	beq.n	800426c <arm_cfft_q31+0x3c>
 8004250:	2980      	cmp	r1, #128	; 0x80
 8004252:	d02c      	beq.n	80042ae <arm_cfft_q31+0x7e>
 8004254:	b98e      	cbnz	r6, 800427a <arm_cfft_q31+0x4a>
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800425c:	d006      	beq.n	800426c <arm_cfft_q31+0x3c>
 800425e:	d923      	bls.n	80042a8 <arm_cfft_q31+0x78>
 8004260:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004264:	d023      	beq.n	80042ae <arm_cfft_q31+0x7e>
 8004266:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800426a:	d1f3      	bne.n	8004254 <arm_cfft_q31+0x24>
 800426c:	4628      	mov	r0, r5
 800426e:	6862      	ldr	r2, [r4, #4]
 8004270:	2301      	movs	r3, #1
 8004272:	f000 f83b 	bl	80042ec <arm_radix4_butterfly_q31>
 8004276:	2e00      	cmp	r6, #0
 8004278:	d0ed      	beq.n	8004256 <arm_cfft_q31+0x26>
 800427a:	4628      	mov	r0, r5
 800427c:	89a1      	ldrh	r1, [r4, #12]
 800427e:	68a2      	ldr	r2, [r4, #8]
 8004280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004284:	f7fb bf62 	b.w	800014c <arm_bitreversal_32>
 8004288:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800428c:	d01e      	beq.n	80042cc <arm_cfft_q31+0x9c>
 800428e:	d813      	bhi.n	80042b8 <arm_cfft_q31+0x88>
 8004290:	2920      	cmp	r1, #32
 8004292:	d004      	beq.n	800429e <arm_cfft_q31+0x6e>
 8004294:	d927      	bls.n	80042e6 <arm_cfft_q31+0xb6>
 8004296:	2940      	cmp	r1, #64	; 0x40
 8004298:	d018      	beq.n	80042cc <arm_cfft_q31+0x9c>
 800429a:	2980      	cmp	r1, #128	; 0x80
 800429c:	d1da      	bne.n	8004254 <arm_cfft_q31+0x24>
 800429e:	4628      	mov	r0, r5
 80042a0:	6862      	ldr	r2, [r4, #4]
 80042a2:	f7ff ff1f 	bl	80040e4 <arm_cfft_radix4by2_inverse_q31>
 80042a6:	e7d5      	b.n	8004254 <arm_cfft_q31+0x24>
 80042a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80042ac:	d1d2      	bne.n	8004254 <arm_cfft_q31+0x24>
 80042ae:	4628      	mov	r0, r5
 80042b0:	6862      	ldr	r2, [r4, #4]
 80042b2:	f7ff fe77 	bl	8003fa4 <arm_cfft_radix4by2_q31>
 80042b6:	e7cd      	b.n	8004254 <arm_cfft_q31+0x24>
 80042b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80042bc:	d006      	beq.n	80042cc <arm_cfft_q31+0x9c>
 80042be:	d90e      	bls.n	80042de <arm_cfft_q31+0xae>
 80042c0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80042c4:	d0eb      	beq.n	800429e <arm_cfft_q31+0x6e>
 80042c6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80042ca:	d1c3      	bne.n	8004254 <arm_cfft_q31+0x24>
 80042cc:	4628      	mov	r0, r5
 80042ce:	6862      	ldr	r2, [r4, #4]
 80042d0:	2301      	movs	r3, #1
 80042d2:	f000 fa19 	bl	8004708 <arm_radix4_butterfly_inverse_q31>
 80042d6:	e7bd      	b.n	8004254 <arm_cfft_q31+0x24>
 80042d8:	2910      	cmp	r1, #16
 80042da:	d1bb      	bne.n	8004254 <arm_cfft_q31+0x24>
 80042dc:	e7c6      	b.n	800426c <arm_cfft_q31+0x3c>
 80042de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80042e2:	d0dc      	beq.n	800429e <arm_cfft_q31+0x6e>
 80042e4:	e7b6      	b.n	8004254 <arm_cfft_q31+0x24>
 80042e6:	2910      	cmp	r1, #16
 80042e8:	d1b4      	bne.n	8004254 <arm_cfft_q31+0x24>
 80042ea:	e7ef      	b.n	80042cc <arm_cfft_q31+0x9c>

080042ec <arm_radix4_butterfly_q31>:
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	461e      	mov	r6, r3
 80042f2:	b0a1      	sub	sp, #132	; 0x84
 80042f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80042f6:	0889      	lsrs	r1, r1, #2
 80042f8:	930d      	str	r3, [sp, #52]	; 0x34
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4605      	mov	r5, r0
 80042fe:	901e      	str	r0, [sp, #120]	; 0x78
 8004300:	4418      	add	r0, r3
 8004302:	4690      	mov	r8, r2
 8004304:	9217      	str	r2, [sp, #92]	; 0x5c
 8004306:	911f      	str	r1, [sp, #124]	; 0x7c
 8004308:	9106      	str	r1, [sp, #24]
 800430a:	9202      	str	r2, [sp, #8]
 800430c:	9200      	str	r2, [sp, #0]
 800430e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004312:	18c2      	adds	r2, r0, r3
 8004314:	3308      	adds	r3, #8
 8004316:	eb02 0c03 	add.w	ip, r2, r3
 800431a:	00cb      	lsls	r3, r1, #3
 800431c:	930a      	str	r3, [sp, #40]	; 0x28
 800431e:	0133      	lsls	r3, r6, #4
 8004320:	f102 0b08 	add.w	fp, r2, #8
 8004324:	9308      	str	r3, [sp, #32]
 8004326:	00f3      	lsls	r3, r6, #3
 8004328:	930c      	str	r3, [sp, #48]	; 0x30
 800432a:	465b      	mov	r3, fp
 800432c:	f105 0a08 	add.w	sl, r5, #8
 8004330:	46d3      	mov	fp, sl
 8004332:	469a      	mov	sl, r3
 8004334:	f100 0908 	add.w	r9, r0, #8
 8004338:	f8cd 8004 	str.w	r8, [sp, #4]
 800433c:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8004340:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 8004344:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 8004348:	f859 1c08 	ldr.w	r1, [r9, #-8]
 800434c:	ea4f 1820 	mov.w	r8, r0, asr #4
 8004350:	1112      	asrs	r2, r2, #4
 8004352:	111b      	asrs	r3, r3, #4
 8004354:	eb08 0402 	add.w	r4, r8, r2
 8004358:	eb03 1521 	add.w	r5, r3, r1, asr #4
 800435c:	1963      	adds	r3, r4, r5
 800435e:	9204      	str	r2, [sp, #16]
 8004360:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8004364:	f84b 3c08 	str.w	r3, [fp, #-8]
 8004368:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 800436c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8004370:	f859 1c04 	ldr.w	r1, [r9, #-4]
 8004374:	ea4f 1e22 	mov.w	lr, r2, asr #4
 8004378:	1106      	asrs	r6, r0, #4
 800437a:	111b      	asrs	r3, r3, #4
 800437c:	9607      	str	r6, [sp, #28]
 800437e:	eb03 1121 	add.w	r1, r3, r1, asr #4
 8004382:	4476      	add	r6, lr
 8004384:	1873      	adds	r3, r6, r1
 8004386:	f84b 3c04 	str.w	r3, [fp, #-4]
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	1a71      	subs	r1, r6, r1
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	fb81 6702 	smull	r6, r7, r1, r2
 8004396:	463e      	mov	r6, r7
 8004398:	1b63      	subs	r3, r4, r5
 800439a:	fb83 4500 	smull	r4, r5, r3, r0
 800439e:	fb80 0101 	smull	r0, r1, r0, r1
 80043a2:	fb83 2302 	smull	r2, r3, r3, r2
 80043a6:	442e      	add	r6, r5
 80043a8:	1acd      	subs	r5, r1, r3
 80043aa:	e91c 0006 	ldmdb	ip, {r1, r2}
 80043ae:	1110      	asrs	r0, r2, #4
 80043b0:	9a04      	ldr	r2, [sp, #16]
 80043b2:	e919 0018 	ldmdb	r9, {r3, r4}
 80043b6:	ebc2 0208 	rsb	r2, r2, r8
 80043ba:	0076      	lsls	r6, r6, #1
 80043bc:	ebc0 1824 	rsb	r8, r0, r4, asr #4
 80043c0:	006d      	lsls	r5, r5, #1
 80043c2:	9800      	ldr	r0, [sp, #0]
 80043c4:	f849 6c08 	str.w	r6, [r9, #-8]
 80043c8:	f849 5c04 	str.w	r5, [r9, #-4]
 80043cc:	6805      	ldr	r5, [r0, #0]
 80043ce:	9e07      	ldr	r6, [sp, #28]
 80043d0:	1109      	asrs	r1, r1, #4
 80043d2:	ebc1 1323 	rsb	r3, r1, r3, asr #4
 80043d6:	6841      	ldr	r1, [r0, #4]
 80043d8:	eb02 0008 	add.w	r0, r2, r8
 80043dc:	ebce 0e06 	rsb	lr, lr, r6
 80043e0:	fb80 6705 	smull	r6, r7, r0, r5
 80043e4:	ebc3 040e 	rsb	r4, r3, lr
 80043e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043ec:	fb84 6701 	smull	r6, r7, r4, r1
 80043f0:	463e      	mov	r6, r7
 80043f2:	fb85 4504 	smull	r4, r5, r5, r4
 80043f6:	fb80 0101 	smull	r0, r1, r0, r1
 80043fa:	9f05      	ldr	r7, [sp, #20]
 80043fc:	1a69      	subs	r1, r5, r1
 80043fe:	443e      	add	r6, r7
 8004400:	0070      	lsls	r0, r6, #1
 8004402:	0049      	lsls	r1, r1, #1
 8004404:	e90a 0003 	stmdb	sl, {r0, r1}
 8004408:	9f02      	ldr	r7, [sp, #8]
 800440a:	ebc8 0202 	rsb	r2, r8, r2
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	687e      	ldr	r6, [r7, #4]
 8004412:	fb82 4501 	smull	r4, r5, r2, r1
 8004416:	4473      	add	r3, lr
 8004418:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800441c:	fb81 0103 	smull	r0, r1, r1, r3
 8004420:	fb83 4506 	smull	r4, r5, r3, r6
 8004424:	fb82 2306 	smull	r2, r3, r2, r6
 8004428:	9e08      	ldr	r6, [sp, #32]
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	9901      	ldr	r1, [sp, #4]
 800442e:	9c03      	ldr	r4, [sp, #12]
 8004430:	4431      	add	r1, r6
 8004432:	9800      	ldr	r0, [sp, #0]
 8004434:	9101      	str	r1, [sp, #4]
 8004436:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004438:	442c      	add	r4, r5
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	1841      	adds	r1, r0, r1
 800443e:	0062      	lsls	r2, r4, #1
 8004440:	e90c 000c 	stmdb	ip, {r2, r3}
 8004444:	9100      	str	r1, [sp, #0]
 8004446:	9b06      	ldr	r3, [sp, #24]
 8004448:	990a      	ldr	r1, [sp, #40]	; 0x28
 800444a:	3b01      	subs	r3, #1
 800444c:	4439      	add	r1, r7
 800444e:	f10b 0b08 	add.w	fp, fp, #8
 8004452:	f109 0908 	add.w	r9, r9, #8
 8004456:	f10a 0a08 	add.w	sl, sl, #8
 800445a:	9102      	str	r1, [sp, #8]
 800445c:	f10c 0c08 	add.w	ip, ip, #8
 8004460:	9306      	str	r3, [sp, #24]
 8004462:	f47f af6b 	bne.w	800433c <arm_radix4_butterfly_q31+0x50>
 8004466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	9316      	str	r3, [sp, #88]	; 0x58
 800446c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800446e:	2b04      	cmp	r3, #4
 8004470:	f240 80f9 	bls.w	8004666 <arm_radix4_butterfly_q31+0x37a>
 8004474:	931c      	str	r3, [sp, #112]	; 0x70
 8004476:	930e      	str	r3, [sp, #56]	; 0x38
 8004478:	2300      	movs	r3, #0
 800447a:	9312      	str	r3, [sp, #72]	; 0x48
 800447c:	9315      	str	r3, [sp, #84]	; 0x54
 800447e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004480:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004482:	9314      	str	r3, [sp, #80]	; 0x50
 8004484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004486:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800448a:	9313      	str	r3, [sp, #76]	; 0x4c
 800448c:	0883      	lsrs	r3, r0, #2
 800448e:	4619      	mov	r1, r3
 8004490:	931d      	str	r3, [sp, #116]	; 0x74
 8004492:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004494:	1e4a      	subs	r2, r1, #1
 8004496:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800449a:	9218      	str	r2, [sp, #96]	; 0x60
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	00ca      	lsls	r2, r1, #3
 80044a0:	9219      	str	r2, [sp, #100]	; 0x64
 80044a2:	931a      	str	r3, [sp, #104]	; 0x68
 80044a4:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 80044a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80044aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044ac:	4622      	mov	r2, r4
 80044ae:	4618      	mov	r0, r3
 80044b0:	00d9      	lsls	r1, r3, #3
 80044b2:	440a      	add	r2, r1
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	4411      	add	r1, r2
 80044b8:	58e3      	ldr	r3, [r4, r3]
 80044ba:	6849      	ldr	r1, [r1, #4]
 80044bc:	6852      	ldr	r2, [r2, #4]
 80044be:	9310      	str	r3, [sp, #64]	; 0x40
 80044c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044c2:	9104      	str	r1, [sp, #16]
 80044c4:	9202      	str	r2, [sp, #8]
 80044c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80044c8:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 80044cc:	18c3      	adds	r3, r0, r3
 80044ce:	9206      	str	r2, [sp, #24]
 80044d0:	9315      	str	r3, [sp, #84]	; 0x54
 80044d2:	680a      	ldr	r2, [r1, #0]
 80044d4:	684b      	ldr	r3, [r1, #4]
 80044d6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80044d8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044da:	9207      	str	r2, [sp, #28]
 80044dc:	9311      	str	r3, [sp, #68]	; 0x44
 80044de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044e2:	eb07 0a05 	add.w	sl, r7, r5
 80044e6:	eb0a 0b05 	add.w	fp, sl, r5
 80044ea:	4293      	cmp	r3, r2
 80044ec:	eb0b 0e05 	add.w	lr, fp, r5
 80044f0:	f240 80a0 	bls.w	8004634 <arm_radix4_butterfly_q31+0x348>
 80044f4:	4613      	mov	r3, r2
 80044f6:	46d8      	mov	r8, fp
 80044f8:	46d3      	mov	fp, sl
 80044fa:	46ba      	mov	sl, r7
 80044fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044fe:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8004502:	4413      	add	r3, r2
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	9b00      	ldr	r3, [sp, #0]
 8004508:	f8da c000 	ldr.w	ip, [sl]
 800450c:	f8d8 5000 	ldr.w	r5, [r8]
 8004510:	f8db 2000 	ldr.w	r2, [fp]
 8004514:	930c      	str	r3, [sp, #48]	; 0x30
 8004516:	f8de 3000 	ldr.w	r3, [lr]
 800451a:	eb0c 0705 	add.w	r7, ip, r5
 800451e:	441a      	add	r2, r3
 8004520:	18b9      	adds	r1, r7, r2
 8004522:	1089      	asrs	r1, r1, #2
 8004524:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004528:	f8ca 1000 	str.w	r1, [sl]
 800452c:	f8db 4004 	ldr.w	r4, [fp, #4]
 8004530:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004534:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004538:	18ce      	adds	r6, r1, r3
 800453a:	4420      	add	r0, r4
 800453c:	1834      	adds	r4, r6, r0
 800453e:	10a4      	asrs	r4, r4, #2
 8004540:	f8ca 4004 	str.w	r4, [sl, #4]
 8004544:	1ac9      	subs	r1, r1, r3
 8004546:	f8db 3004 	ldr.w	r3, [fp, #4]
 800454a:	ebc5 050c 	rsb	r5, r5, ip
 800454e:	469c      	mov	ip, r3
 8004550:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004554:	f8de 4000 	ldr.w	r4, [lr]
 8004558:	ebc3 0c0c 	rsb	ip, r3, ip
 800455c:	f8db 3000 	ldr.w	r3, [fp]
 8004560:	1aba      	subs	r2, r7, r2
 8004562:	1b1b      	subs	r3, r3, r4
 8004564:	eb05 040c 	add.w	r4, r5, ip
 8004568:	ebcc 0c05 	rsb	ip, ip, r5
 800456c:	1acd      	subs	r5, r1, r3
 800456e:	440b      	add	r3, r1
 8004570:	9906      	ldr	r1, [sp, #24]
 8004572:	1a30      	subs	r0, r6, r0
 8004574:	fb84 6701 	smull	r6, r7, r4, r1
 8004578:	9902      	ldr	r1, [sp, #8]
 800457a:	9001      	str	r0, [sp, #4]
 800457c:	fb85 0101 	smull	r0, r1, r5, r1
 8004580:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004584:	9801      	ldr	r0, [sp, #4]
 8004586:	9904      	ldr	r1, [sp, #16]
 8004588:	44ca      	add	sl, r9
 800458a:	fb80 0101 	smull	r0, r1, r0, r1
 800458e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004594:	19cf      	adds	r7, r1, r7
 8004596:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004598:	970d      	str	r7, [sp, #52]	; 0x34
 800459a:	4608      	mov	r0, r1
 800459c:	fb82 6701 	smull	r6, r7, r2, r1
 80045a0:	9901      	ldr	r1, [sp, #4]
 80045a2:	fb81 0100 	smull	r0, r1, r1, r0
 80045a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ac:	19c6      	adds	r6, r0, r7
 80045ae:	9601      	str	r6, [sp, #4]
 80045b0:	9e04      	ldr	r6, [sp, #16]
 80045b2:	4630      	mov	r0, r6
 80045b4:	fb82 6700 	smull	r6, r7, r2, r0
 80045b8:	9a06      	ldr	r2, [sp, #24]
 80045ba:	fb85 0102 	smull	r0, r1, r5, r2
 80045be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80045c2:	9d02      	ldr	r5, [sp, #8]
 80045c4:	9907      	ldr	r1, [sp, #28]
 80045c6:	fb84 4505 	smull	r4, r5, r4, r5
 80045ca:	fb8c 0101 	smull	r0, r1, ip, r1
 80045ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80045d8:	9c07      	ldr	r4, [sp, #28]
 80045da:	1b40      	subs	r0, r0, r5
 80045dc:	1bd2      	subs	r2, r2, r7
 80045de:	fb83 4504 	smull	r4, r5, r3, r4
 80045e2:	fb83 6701 	smull	r6, r7, r3, r1
 80045e6:	9008      	str	r0, [sp, #32]
 80045e8:	fb8c 0101 	smull	r0, r1, ip, r1
 80045ec:	9e01      	ldr	r6, [sp, #4]
 80045ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f0:	1a69      	subs	r1, r5, r1
 80045f2:	1052      	asrs	r2, r2, #1
 80045f4:	1075      	asrs	r5, r6, #1
 80045f6:	f8cb 5000 	str.w	r5, [fp]
 80045fa:	f8cb 2004 	str.w	r2, [fp, #4]
 80045fe:	443b      	add	r3, r7
 8004600:	9a00      	ldr	r2, [sp, #0]
 8004602:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004604:	9808      	ldr	r0, [sp, #32]
 8004606:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004608:	105b      	asrs	r3, r3, #1
 800460a:	442a      	add	r2, r5
 800460c:	107c      	asrs	r4, r7, #1
 800460e:	1040      	asrs	r0, r0, #1
 8004610:	f8c8 4000 	str.w	r4, [r8]
 8004614:	f8c8 0004 	str.w	r0, [r8, #4]
 8004618:	9200      	str	r2, [sp, #0]
 800461a:	f8ce 3000 	str.w	r3, [lr]
 800461e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004622:	1049      	asrs	r1, r1, #1
 8004624:	429a      	cmp	r2, r3
 8004626:	f8ce 1004 	str.w	r1, [lr, #4]
 800462a:	44cb      	add	fp, r9
 800462c:	44c8      	add	r8, r9
 800462e:	44ce      	add	lr, r9
 8004630:	f63f af69 	bhi.w	8004506 <arm_radix4_butterfly_q31+0x21a>
 8004634:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004636:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800463a:	440a      	add	r2, r1
 800463c:	9213      	str	r2, [sp, #76]	; 0x4c
 800463e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004640:	3301      	adds	r3, #1
 8004642:	3208      	adds	r2, #8
 8004644:	9214      	str	r2, [sp, #80]	; 0x50
 8004646:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004648:	9312      	str	r3, [sp, #72]	; 0x48
 800464a:	4293      	cmp	r3, r2
 800464c:	f67f af2c 	bls.w	80044a8 <arm_radix4_butterfly_q31+0x1bc>
 8004650:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004652:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004654:	0092      	lsls	r2, r2, #2
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	9216      	str	r2, [sp, #88]	; 0x58
 800465a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800465c:	2b04      	cmp	r3, #4
 800465e:	931c      	str	r3, [sp, #112]	; 0x70
 8004660:	920e      	str	r2, [sp, #56]	; 0x38
 8004662:	f63f af09 	bhi.w	8004478 <arm_radix4_butterfly_q31+0x18c>
 8004666:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004668:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 800466c:	3020      	adds	r0, #32
 800466e:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8004672:	f850 3c18 	ldr.w	r3, [r0, #-24]
 8004676:	f850 1c14 	ldr.w	r1, [r0, #-20]
 800467a:	f850 8c1c 	ldr.w	r8, [r0, #-28]
 800467e:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8004682:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8004686:	18d7      	adds	r7, r2, r3
 8004688:	1ad6      	subs	r6, r2, r3
 800468a:	1855      	adds	r5, r2, r1
 800468c:	1a52      	subs	r2, r2, r1
 800468e:	f850 ec08 	ldr.w	lr, [r0, #-8]
 8004692:	f850 bc04 	ldr.w	fp, [r0, #-4]
 8004696:	eb08 0401 	add.w	r4, r8, r1
 800469a:	4457      	add	r7, sl
 800469c:	ebc1 0108 	rsb	r1, r1, r8
 80046a0:	4456      	add	r6, sl
 80046a2:	ebca 0505 	rsb	r5, sl, r5
 80046a6:	ebca 0202 	rsb	r2, sl, r2
 80046aa:	ebc3 0a08 	rsb	sl, r3, r8
 80046ae:	4443      	add	r3, r8
 80046b0:	4461      	add	r1, ip
 80046b2:	4464      	add	r4, ip
 80046b4:	ebcc 080a 	rsb	r8, ip, sl
 80046b8:	ebcc 0303 	rsb	r3, ip, r3
 80046bc:	ebcb 0505 	rsb	r5, fp, r5
 80046c0:	445a      	add	r2, fp
 80046c2:	445c      	add	r4, fp
 80046c4:	4477      	add	r7, lr
 80046c6:	ebcb 0b01 	rsb	fp, fp, r1
 80046ca:	ebce 0606 	rsb	r6, lr, r6
 80046ce:	eb08 010e 	add.w	r1, r8, lr
 80046d2:	ebce 0303 	rsb	r3, lr, r3
 80046d6:	f1b9 0901 	subs.w	r9, r9, #1
 80046da:	f840 7c20 	str.w	r7, [r0, #-32]
 80046de:	f840 6c18 	str.w	r6, [r0, #-24]
 80046e2:	f840 5c10 	str.w	r5, [r0, #-16]
 80046e6:	f840 2c08 	str.w	r2, [r0, #-8]
 80046ea:	f840 4c1c 	str.w	r4, [r0, #-28]
 80046ee:	f840 bc14 	str.w	fp, [r0, #-20]
 80046f2:	f840 1c0c 	str.w	r1, [r0, #-12]
 80046f6:	f840 3c04 	str.w	r3, [r0, #-4]
 80046fa:	f100 0020 	add.w	r0, r0, #32
 80046fe:	d1b6      	bne.n	800466e <arm_radix4_butterfly_q31+0x382>
 8004700:	b021      	add	sp, #132	; 0x84
 8004702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004706:	bf00      	nop

08004708 <arm_radix4_butterfly_inverse_q31>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	4605      	mov	r5, r0
 800470e:	4617      	mov	r7, r2
 8004710:	b0a1      	sub	sp, #132	; 0x84
 8004712:	461e      	mov	r6, r3
 8004714:	9111      	str	r1, [sp, #68]	; 0x44
 8004716:	0889      	lsrs	r1, r1, #2
 8004718:	930c      	str	r3, [sp, #48]	; 0x30
 800471a:	00cb      	lsls	r3, r1, #3
 800471c:	901e      	str	r0, [sp, #120]	; 0x78
 800471e:	4418      	add	r0, r3
 8004720:	9218      	str	r2, [sp, #96]	; 0x60
 8004722:	4694      	mov	ip, r2
 8004724:	18c2      	adds	r2, r0, r3
 8004726:	3308      	adds	r3, #8
 8004728:	eb02 0b03 	add.w	fp, r2, r3
 800472c:	f102 0908 	add.w	r9, r2, #8
 8004730:	f105 0a08 	add.w	sl, r5, #8
 8004734:	46de      	mov	lr, fp
 8004736:	46d3      	mov	fp, sl
 8004738:	46ca      	mov	sl, r9
 800473a:	46b9      	mov	r9, r7
 800473c:	911f      	str	r1, [sp, #124]	; 0x7c
 800473e:	9102      	str	r1, [sp, #8]
 8004740:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004744:	00cb      	lsls	r3, r1, #3
 8004746:	930b      	str	r3, [sp, #44]	; 0x2c
 8004748:	0133      	lsls	r3, r6, #4
 800474a:	930a      	str	r3, [sp, #40]	; 0x28
 800474c:	00f3      	lsls	r3, r6, #3
 800474e:	f100 0808 	add.w	r8, r0, #8
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	9701      	str	r7, [sp, #4]
 8004756:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 800475a:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 800475e:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8004762:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004766:	1100      	asrs	r0, r0, #4
 8004768:	1109      	asrs	r1, r1, #4
 800476a:	111b      	asrs	r3, r3, #4
 800476c:	1846      	adds	r6, r0, r1
 800476e:	eb03 1722 	add.w	r7, r3, r2, asr #4
 8004772:	19f3      	adds	r3, r6, r7
 8004774:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8004778:	f84b 3c08 	str.w	r3, [fp, #-8]
 800477c:	9108      	str	r1, [sp, #32]
 800477e:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8004782:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8004786:	f858 4c04 	ldr.w	r4, [r8, #-4]
 800478a:	111b      	asrs	r3, r3, #4
 800478c:	1112      	asrs	r2, r2, #4
 800478e:	1109      	asrs	r1, r1, #4
 8004790:	9003      	str	r0, [sp, #12]
 8004792:	eb01 1424 	add.w	r4, r1, r4, asr #4
 8004796:	1898      	adds	r0, r3, r2
 8004798:	9304      	str	r3, [sp, #16]
 800479a:	1901      	adds	r1, r0, r4
 800479c:	9b01      	ldr	r3, [sp, #4]
 800479e:	f84b 1c04 	str.w	r1, [fp, #-4]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	681d      	ldr	r5, [r3, #0]
 80047a6:	460b      	mov	r3, r1
 80047a8:	1bf1      	subs	r1, r6, r7
 80047aa:	fb81 6705 	smull	r6, r7, r1, r5
 80047ae:	1b04      	subs	r4, r0, r4
 80047b0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80047b4:	fb81 0103 	smull	r0, r1, r1, r3
 80047b8:	fb84 6703 	smull	r6, r7, r4, r3
 80047bc:	fb85 4504 	smull	r4, r5, r5, r4
 80047c0:	9b07      	ldr	r3, [sp, #28]
 80047c2:	194e      	adds	r6, r1, r5
 80047c4:	1bdf      	subs	r7, r3, r7
 80047c6:	007f      	lsls	r7, r7, #1
 80047c8:	0076      	lsls	r6, r6, #1
 80047ca:	e91e 0003 	ldmdb	lr, {r0, r1}
 80047ce:	f858 5c08 	ldr.w	r5, [r8, #-8]
 80047d2:	f858 4c04 	ldr.w	r4, [r8, #-4]
 80047d6:	f848 7c08 	str.w	r7, [r8, #-8]
 80047da:	f848 6c04 	str.w	r6, [r8, #-4]
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	9e03      	ldr	r6, [sp, #12]
 80047e2:	9f08      	ldr	r7, [sp, #32]
 80047e4:	1109      	asrs	r1, r1, #4
 80047e6:	1bf7      	subs	r7, r6, r7
 80047e8:	1a9a      	subs	r2, r3, r2
 80047ea:	1100      	asrs	r0, r0, #4
 80047ec:	ebc1 1324 	rsb	r3, r1, r4, asr #4
 80047f0:	ebc0 1625 	rsb	r6, r0, r5, asr #4
 80047f4:	1afd      	subs	r5, r7, r3
 80047f6:	e899 0011 	ldmia.w	r9, {r0, r4}
 80047fa:	1991      	adds	r1, r2, r6
 80047fc:	9308      	str	r3, [sp, #32]
 80047fe:	9203      	str	r2, [sp, #12]
 8004800:	fb85 2300 	smull	r2, r3, r5, r0
 8004804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004808:	fb81 2304 	smull	r2, r3, r1, r4
 800480c:	fb85 4504 	smull	r4, r5, r5, r4
 8004810:	fb80 0101 	smull	r0, r1, r0, r1
 8004814:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004818:	9c05      	ldr	r4, [sp, #20]
 800481a:	f10b 0b08 	add.w	fp, fp, #8
 800481e:	1ae2      	subs	r2, r4, r3
 8004820:	9c07      	ldr	r4, [sp, #28]
 8004822:	0050      	lsls	r0, r2, #1
 8004824:	4421      	add	r1, r4
 8004826:	0049      	lsls	r1, r1, #1
 8004828:	e90a 0003 	stmdb	sl, {r0, r1}
 800482c:	9b08      	ldr	r3, [sp, #32]
 800482e:	9a03      	ldr	r2, [sp, #12]
 8004830:	f8dc 1000 	ldr.w	r1, [ip]
 8004834:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004838:	1b92      	subs	r2, r2, r6
 800483a:	443b      	add	r3, r7
 800483c:	fb83 6701 	smull	r6, r7, r3, r1
 8004840:	fb82 4500 	smull	r4, r5, r2, r0
 8004844:	fb81 0102 	smull	r0, r1, r1, r2
 8004848:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800484c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800484e:	fb83 2302 	smull	r2, r3, r3, r2
 8004852:	440b      	add	r3, r1
 8004854:	9901      	ldr	r1, [sp, #4]
 8004856:	1b7c      	subs	r4, r7, r5
 8004858:	4401      	add	r1, r0
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	0062      	lsls	r2, r4, #1
 800485e:	9101      	str	r1, [sp, #4]
 8004860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004862:	e90e 000c 	stmdb	lr, {r2, r3}
 8004866:	9b02      	ldr	r3, [sp, #8]
 8004868:	4489      	add	r9, r1
 800486a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800486c:	3b01      	subs	r3, #1
 800486e:	f108 0808 	add.w	r8, r8, #8
 8004872:	f10a 0a08 	add.w	sl, sl, #8
 8004876:	448c      	add	ip, r1
 8004878:	f10e 0e08 	add.w	lr, lr, #8
 800487c:	9302      	str	r3, [sp, #8]
 800487e:	f47f af6a 	bne.w	8004756 <arm_radix4_butterfly_inverse_q31+0x4e>
 8004882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	9317      	str	r3, [sp, #92]	; 0x5c
 8004888:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800488a:	2b04      	cmp	r3, #4
 800488c:	f240 80ed 	bls.w	8004a6a <arm_radix4_butterfly_inverse_q31+0x362>
 8004890:	931c      	str	r3, [sp, #112]	; 0x70
 8004892:	9310      	str	r3, [sp, #64]	; 0x40
 8004894:	2300      	movs	r3, #0
 8004896:	9313      	str	r3, [sp, #76]	; 0x4c
 8004898:	9316      	str	r3, [sp, #88]	; 0x58
 800489a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800489c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800489e:	9315      	str	r3, [sp, #84]	; 0x54
 80048a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80048a2:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 80048a6:	9314      	str	r3, [sp, #80]	; 0x50
 80048a8:	0883      	lsrs	r3, r0, #2
 80048aa:	4619      	mov	r1, r3
 80048ac:	931d      	str	r3, [sp, #116]	; 0x74
 80048ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048b0:	1e4a      	subs	r2, r1, #1
 80048b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80048b6:	9219      	str	r2, [sp, #100]	; 0x64
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	00ca      	lsls	r2, r1, #3
 80048bc:	921a      	str	r2, [sp, #104]	; 0x68
 80048be:	931b      	str	r3, [sp, #108]	; 0x6c
 80048c0:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80048c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80048c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048c8:	4622      	mov	r2, r4
 80048ca:	4618      	mov	r0, r3
 80048cc:	00d9      	lsls	r1, r3, #3
 80048ce:	440a      	add	r2, r1
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	4411      	add	r1, r2
 80048d4:	58e3      	ldr	r3, [r4, r3]
 80048d6:	6849      	ldr	r1, [r1, #4]
 80048d8:	6852      	ldr	r2, [r2, #4]
 80048da:	9304      	str	r3, [sp, #16]
 80048dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048de:	9106      	str	r1, [sp, #24]
 80048e0:	9208      	str	r2, [sp, #32]
 80048e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80048e4:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 80048e8:	18c3      	adds	r3, r0, r3
 80048ea:	9203      	str	r2, [sp, #12]
 80048ec:	9316      	str	r3, [sp, #88]	; 0x58
 80048ee:	680a      	ldr	r2, [r1, #0]
 80048f0:	684b      	ldr	r3, [r1, #4]
 80048f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80048f4:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80048f6:	9209      	str	r2, [sp, #36]	; 0x24
 80048f8:	930a      	str	r3, [sp, #40]	; 0x28
 80048fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048fe:	eb07 0a05 	add.w	sl, r7, r5
 8004902:	eb0a 0b05 	add.w	fp, sl, r5
 8004906:	4293      	cmp	r3, r2
 8004908:	eb0b 0e05 	add.w	lr, fp, r5
 800490c:	f240 8094 	bls.w	8004a38 <arm_radix4_butterfly_inverse_q31+0x330>
 8004910:	4613      	mov	r3, r2
 8004912:	f8cd b004 	str.w	fp, [sp, #4]
 8004916:	46d3      	mov	fp, sl
 8004918:	46ba      	mov	sl, r7
 800491a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800491c:	9801      	ldr	r0, [sp, #4]
 800491e:	4413      	add	r3, r2
 8004920:	9302      	str	r3, [sp, #8]
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	f8da c000 	ldr.w	ip, [sl]
 8004928:	6804      	ldr	r4, [r0, #0]
 800492a:	f8db 2000 	ldr.w	r2, [fp]
 800492e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004930:	f8de 3000 	ldr.w	r3, [lr]
 8004934:	eb0c 0704 	add.w	r7, ip, r4
 8004938:	441a      	add	r2, r3
 800493a:	18b9      	adds	r1, r7, r2
 800493c:	1089      	asrs	r1, r1, #2
 800493e:	6843      	ldr	r3, [r0, #4]
 8004940:	f8ca 1000 	str.w	r1, [sl]
 8004944:	f8db 5004 	ldr.w	r5, [fp, #4]
 8004948:	f8da 1004 	ldr.w	r1, [sl, #4]
 800494c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004950:	18ce      	adds	r6, r1, r3
 8004952:	4428      	add	r0, r5
 8004954:	1835      	adds	r5, r6, r0
 8004956:	10ad      	asrs	r5, r5, #2
 8004958:	f8ca 5004 	str.w	r5, [sl, #4]
 800495c:	1ac9      	subs	r1, r1, r3
 800495e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004962:	ebc4 040c 	rsb	r4, r4, ip
 8004966:	469c      	mov	ip, r3
 8004968:	f8de 3004 	ldr.w	r3, [lr, #4]
 800496c:	f8de 5000 	ldr.w	r5, [lr]
 8004970:	ebc3 0c0c 	rsb	ip, r3, ip
 8004974:	f8db 3000 	ldr.w	r3, [fp]
 8004978:	1aba      	subs	r2, r7, r2
 800497a:	1b5b      	subs	r3, r3, r5
 800497c:	ebcc 0504 	rsb	r5, ip, r4
 8004980:	44a4      	add	ip, r4
 8004982:	18cc      	adds	r4, r1, r3
 8004984:	1acb      	subs	r3, r1, r3
 8004986:	9903      	ldr	r1, [sp, #12]
 8004988:	1a30      	subs	r0, r6, r0
 800498a:	fb85 6701 	smull	r6, r7, r5, r1
 800498e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8004992:	9e08      	ldr	r6, [sp, #32]
 8004994:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004996:	fb84 8906 	smull	r8, r9, r4, r6
 800499a:	ebc9 0101 	rsb	r1, r9, r1
 800499e:	910e      	str	r1, [sp, #56]	; 0x38
 80049a0:	9904      	ldr	r1, [sp, #16]
 80049a2:	9f06      	ldr	r7, [sp, #24]
 80049a4:	4688      	mov	r8, r1
 80049a6:	fb80 6707 	smull	r6, r7, r0, r7
 80049aa:	fb82 8908 	smull	r8, r9, r2, r8
 80049ae:	ebc7 0609 	rsb	r6, r7, r9
 80049b2:	9f06      	ldr	r7, [sp, #24]
 80049b4:	960c      	str	r6, [sp, #48]	; 0x30
 80049b6:	fb82 6707 	smull	r6, r7, r2, r7
 80049ba:	9a03      	ldr	r2, [sp, #12]
 80049bc:	fb80 0101 	smull	r0, r1, r0, r1
 80049c0:	fb84 8902 	smull	r8, r9, r4, r2
 80049c4:	9c08      	ldr	r4, [sp, #32]
 80049c6:	187a      	adds	r2, r7, r1
 80049c8:	fb85 4504 	smull	r4, r5, r5, r4
 80049cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ce:	eb05 0409 	add.w	r4, r5, r9
 80049d2:	fb8c 6701 	smull	r6, r7, ip, r1
 80049d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80049d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80049da:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80049dc:	fb83 0101 	smull	r0, r1, r3, r1
 80049e0:	fb83 4504 	smull	r4, r5, r3, r4
 80049e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80049e8:	4698      	mov	r8, r3
 80049ea:	fb8c 8908 	smull	r8, r9, ip, r8
 80049ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80049f0:	1052      	asrs	r2, r2, #1
 80049f2:	f8cb 2004 	str.w	r2, [fp, #4]
 80049f6:	1a7b      	subs	r3, r7, r1
 80049f8:	9a02      	ldr	r2, [sp, #8]
 80049fa:	eb09 0105 	add.w	r1, r9, r5
 80049fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a00:	1075      	asrs	r5, r6, #1
 8004a02:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004a04:	f8cb 5000 	str.w	r5, [fp]
 8004a08:	9d01      	ldr	r5, [sp, #4]
 8004a0a:	1040      	asrs	r0, r0, #1
 8004a0c:	105b      	asrs	r3, r3, #1
 8004a0e:	4432      	add	r2, r6
 8004a10:	1064      	asrs	r4, r4, #1
 8004a12:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004a14:	6068      	str	r0, [r5, #4]
 8004a16:	602c      	str	r4, [r5, #0]
 8004a18:	9202      	str	r2, [sp, #8]
 8004a1a:	f8ce 3000 	str.w	r3, [lr]
 8004a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a22:	1049      	asrs	r1, r1, #1
 8004a24:	19e8      	adds	r0, r5, r7
 8004a26:	429a      	cmp	r2, r3
 8004a28:	f8ce 1004 	str.w	r1, [lr, #4]
 8004a2c:	44ba      	add	sl, r7
 8004a2e:	44bb      	add	fp, r7
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	44be      	add	lr, r7
 8004a34:	f63f af75 	bhi.w	8004922 <arm_radix4_butterfly_inverse_q31+0x21a>
 8004a38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004a3a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a3e:	440a      	add	r2, r1
 8004a40:	9214      	str	r2, [sp, #80]	; 0x50
 8004a42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a44:	3301      	adds	r3, #1
 8004a46:	3208      	adds	r2, #8
 8004a48:	9215      	str	r2, [sp, #84]	; 0x54
 8004a4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004a4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f67f af38 	bls.w	80048c4 <arm_radix4_butterfly_inverse_q31+0x1bc>
 8004a54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004a58:	0092      	lsls	r2, r2, #2
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a5e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	931c      	str	r3, [sp, #112]	; 0x70
 8004a64:	9210      	str	r2, [sp, #64]	; 0x40
 8004a66:	f63f af15 	bhi.w	8004894 <arm_radix4_butterfly_inverse_q31+0x18c>
 8004a6a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004a6c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8004a70:	3020      	adds	r0, #32
 8004a72:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8004a76:	f850 1c18 	ldr.w	r1, [r0, #-24]
 8004a7a:	f850 3c14 	ldr.w	r3, [r0, #-20]
 8004a7e:	f850 9c1c 	ldr.w	r9, [r0, #-28]
 8004a82:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8004a86:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8004a8a:	eb02 0e01 	add.w	lr, r2, r1
 8004a8e:	1a57      	subs	r7, r2, r1
 8004a90:	1ad6      	subs	r6, r2, r3
 8004a92:	441a      	add	r2, r3
 8004a94:	f850 4c08 	ldr.w	r4, [r0, #-8]
 8004a98:	f850 bc04 	ldr.w	fp, [r0, #-4]
 8004a9c:	eb09 0503 	add.w	r5, r9, r3
 8004aa0:	44d6      	add	lr, sl
 8004aa2:	4457      	add	r7, sl
 8004aa4:	ebca 0606 	rsb	r6, sl, r6
 8004aa8:	ebc3 0309 	rsb	r3, r3, r9
 8004aac:	ebca 0a02 	rsb	sl, sl, r2
 8004ab0:	eb09 0201 	add.w	r2, r9, r1
 8004ab4:	ebc1 0109 	rsb	r1, r1, r9
 8004ab8:	4463      	add	r3, ip
 8004aba:	4465      	add	r5, ip
 8004abc:	ebcc 0202 	rsb	r2, ip, r2
 8004ac0:	ebcc 0c01 	rsb	ip, ip, r1
 8004ac4:	445e      	add	r6, fp
 8004ac6:	ebcb 0a0a 	rsb	sl, fp, sl
 8004aca:	445d      	add	r5, fp
 8004acc:	eb0e 0104 	add.w	r1, lr, r4
 8004ad0:	ebcb 0b03 	rsb	fp, fp, r3
 8004ad4:	1b3f      	subs	r7, r7, r4
 8004ad6:	1b12      	subs	r2, r2, r4
 8004ad8:	eb0c 0304 	add.w	r3, ip, r4
 8004adc:	f1b8 0801 	subs.w	r8, r8, #1
 8004ae0:	f840 1c20 	str.w	r1, [r0, #-32]
 8004ae4:	f840 7c18 	str.w	r7, [r0, #-24]
 8004ae8:	f840 6c10 	str.w	r6, [r0, #-16]
 8004aec:	f840 ac08 	str.w	sl, [r0, #-8]
 8004af0:	f840 5c1c 	str.w	r5, [r0, #-28]
 8004af4:	f840 bc14 	str.w	fp, [r0, #-20]
 8004af8:	f840 2c0c 	str.w	r2, [r0, #-12]
 8004afc:	f840 3c04 	str.w	r3, [r0, #-4]
 8004b00:	f100 0020 	add.w	r0, r0, #32
 8004b04:	d1b5      	bne.n	8004a72 <arm_radix4_butterfly_inverse_q31+0x36a>
 8004b06:	b021      	add	sp, #132	; 0x84
 8004b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b0c <arm_fir_interpolate_init_q31>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	fb92 f6f1 	sdiv	r6, r2, r1
 8004b12:	fb01 2416 	mls	r4, r1, r6, r2
 8004b16:	b994      	cbnz	r4, 8004b3e <arm_fir_interpolate_init_q31+0x32>
 8004b18:	9a05      	ldr	r2, [sp, #20]
 8004b1a:	6043      	str	r3, [r0, #4]
 8004b1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004b20:	3a01      	subs	r2, #1
 8004b22:	4432      	add	r2, r6
 8004b24:	7001      	strb	r1, [r0, #0]
 8004b26:	4605      	mov	r5, r0
 8004b28:	8046      	strh	r6, [r0, #2]
 8004b2a:	0092      	lsls	r2, r2, #2
 8004b2c:	9804      	ldr	r0, [sp, #16]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	f000 fbd2 	bl	80052d8 <memset>
 8004b34:	4620      	mov	r0, r4
 8004b36:	9b04      	ldr	r3, [sp, #16]
 8004b38:	60ab      	str	r3, [r5, #8]
 8004b3a:	b240      	sxtb	r0, r0
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
 8004b3e:	20fe      	movs	r0, #254	; 0xfe
 8004b40:	e7fb      	b.n	8004b3a <arm_fir_interpolate_init_q31+0x2e>
 8004b42:	bf00      	nop

08004b44 <arm_fir_decimate_q31>:
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	4680      	mov	r8, r0
 8004b4a:	7805      	ldrb	r5, [r0, #0]
 8004b4c:	8840      	ldrh	r0, [r0, #2]
 8004b4e:	fbb3 f9f5 	udiv	r9, r3, r5
 8004b52:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 8004b56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004b5a:	f8d8 e008 	ldr.w	lr, [r8, #8]
 8004b5e:	b087      	sub	sp, #28
 8004b60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b64:	9005      	str	r0, [sp, #20]
 8004b66:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 8004b6a:	461c      	mov	r4, r3
 8004b6c:	9302      	str	r3, [sp, #8]
 8004b6e:	f1b9 0f00 	cmp.w	r9, #0
 8004b72:	f000 80a0 	beq.w	8004cb6 <arm_fir_decimate_q31+0x172>
 8004b76:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 8004b7a:	4692      	mov	sl, r2
 8004b7c:	ea4f 120b 	mov.w	r2, fp, lsl #4
 8004b80:	4603      	mov	r3, r0
 8004b82:	9203      	str	r2, [sp, #12]
 8004b84:	4610      	mov	r0, r2
 8004b86:	4622      	mov	r2, r4
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	4402      	add	r2, r0
 8004b8e:	9204      	str	r2, [sp, #16]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	462b      	mov	r3, r5
 8004b94:	4608      	mov	r0, r1
 8004b96:	f1ac 0204 	sub.w	r2, ip, #4
 8004b9a:	f850 4b04 	ldr.w	r4, [r0], #4
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f842 4f04 	str.w	r4, [r2, #4]!
 8004ba4:	d1f9      	bne.n	8004b9a <arm_fir_decimate_q31+0x56>
 8004ba6:	00ad      	lsls	r5, r5, #2
 8004ba8:	44ac      	add	ip, r5
 8004baa:	4429      	add	r1, r5
 8004bac:	f1bb 0f00 	cmp.w	fp, #0
 8004bb0:	d04b      	beq.n	8004c4a <arm_fir_decimate_q31+0x106>
 8004bb2:	9b02      	ldr	r3, [sp, #8]
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	2700      	movs	r7, #0
 8004bb8:	f103 0410 	add.w	r4, r3, #16
 8004bbc:	465d      	mov	r5, fp
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	f10e 0010 	add.w	r0, lr, #16
 8004bc6:	9100      	str	r1, [sp, #0]
 8004bc8:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8004bcc:	f850 7c10 	ldr.w	r7, [r0, #-16]
 8004bd0:	3d01      	subs	r5, #1
 8004bd2:	fbc6 2307 	smlal	r2, r3, r6, r7
 8004bd6:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 8004bda:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 8004bde:	f100 0010 	add.w	r0, r0, #16
 8004be2:	fbc7 2306 	smlal	r2, r3, r7, r6
 8004be6:	e914 0082 	ldmdb	r4, {r1, r7}
 8004bea:	f850 6c18 	ldr.w	r6, [r0, #-24]
 8004bee:	f104 0410 	add.w	r4, r4, #16
 8004bf2:	fbc1 2306 	smlal	r2, r3, r1, r6
 8004bf6:	f850 6c14 	ldr.w	r6, [r0, #-20]
 8004bfa:	fbc7 2306 	smlal	r2, r3, r7, r6
 8004bfe:	d1e3      	bne.n	8004bc8 <arm_fir_decimate_q31+0x84>
 8004c00:	4616      	mov	r6, r2
 8004c02:	461f      	mov	r7, r3
 8004c04:	9b03      	ldr	r3, [sp, #12]
 8004c06:	9900      	ldr	r1, [sp, #0]
 8004c08:	9c04      	ldr	r4, [sp, #16]
 8004c0a:	eb0e 0503 	add.w	r5, lr, r3
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	b163      	cbz	r3, 8004c2c <arm_fir_decimate_q31+0xe8>
 8004c12:	4618      	mov	r0, r3
 8004c14:	4632      	mov	r2, r6
 8004c16:	463b      	mov	r3, r7
 8004c18:	f854 6b04 	ldr.w	r6, [r4], #4
 8004c1c:	f855 7b04 	ldr.w	r7, [r5], #4
 8004c20:	3801      	subs	r0, #1
 8004c22:	fbc6 2307 	smlal	r2, r3, r6, r7
 8004c26:	d1f7      	bne.n	8004c18 <arm_fir_decimate_q31+0xd4>
 8004c28:	4616      	mov	r6, r2
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	f898 0000 	ldrb.w	r0, [r8]
 8004c30:	0ff2      	lsrs	r2, r6, #31
 8004c32:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8004c36:	f1b9 0901 	subs.w	r9, r9, #1
 8004c3a:	f84a 2b04 	str.w	r2, [sl], #4
 8004c3e:	eb0e 0e80 	add.w	lr, lr, r0, lsl #2
 8004c42:	d007      	beq.n	8004c54 <arm_fir_decimate_q31+0x110>
 8004c44:	f898 5000 	ldrb.w	r5, [r8]
 8004c48:	e7a3      	b.n	8004b92 <arm_fir_decimate_q31+0x4e>
 8004c4a:	9c02      	ldr	r4, [sp, #8]
 8004c4c:	4675      	mov	r5, lr
 8004c4e:	2600      	movs	r6, #0
 8004c50:	2700      	movs	r7, #0
 8004c52:	e7dc      	b.n	8004c0e <arm_fir_decimate_q31+0xca>
 8004c54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c58:	9b05      	ldr	r3, [sp, #20]
 8004c5a:	1e59      	subs	r1, r3, #1
 8004c5c:	088e      	lsrs	r6, r1, #2
 8004c5e:	d01d      	beq.n	8004c9c <arm_fir_decimate_q31+0x158>
 8004c60:	4630      	mov	r0, r6
 8004c62:	f104 0210 	add.w	r2, r4, #16
 8004c66:	f10e 0310 	add.w	r3, lr, #16
 8004c6a:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8004c6e:	3801      	subs	r0, #1
 8004c70:	f842 5c10 	str.w	r5, [r2, #-16]
 8004c74:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8004c78:	f102 0210 	add.w	r2, r2, #16
 8004c7c:	f842 5c1c 	str.w	r5, [r2, #-28]
 8004c80:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004c84:	f103 0310 	add.w	r3, r3, #16
 8004c88:	f842 5c18 	str.w	r5, [r2, #-24]
 8004c8c:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8004c90:	f842 5c14 	str.w	r5, [r2, #-20]
 8004c94:	d1e9      	bne.n	8004c6a <arm_fir_decimate_q31+0x126>
 8004c96:	0133      	lsls	r3, r6, #4
 8004c98:	441c      	add	r4, r3
 8004c9a:	449e      	add	lr, r3
 8004c9c:	f011 0303 	ands.w	r3, r1, #3
 8004ca0:	d006      	beq.n	8004cb0 <arm_fir_decimate_q31+0x16c>
 8004ca2:	1f22      	subs	r2, r4, #4
 8004ca4:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	f842 1f04 	str.w	r1, [r2, #4]!
 8004cae:	d1f9      	bne.n	8004ca4 <arm_fir_decimate_q31+0x160>
 8004cb0:	b007      	add	sp, #28
 8004cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb6:	4674      	mov	r4, lr
 8004cb8:	e7ce      	b.n	8004c58 <arm_fir_decimate_q31+0x114>
 8004cba:	bf00      	nop

08004cbc <arm_fir_decimate_init_q31>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	4616      	mov	r6, r2
 8004cc0:	9a05      	ldr	r2, [sp, #20]
 8004cc2:	fbb2 f4f6 	udiv	r4, r2, r6
 8004cc6:	fb06 2414 	mls	r4, r6, r4, r2
 8004cca:	b98c      	cbnz	r4, 8004cf0 <arm_fir_decimate_init_q31+0x34>
 8004ccc:	4605      	mov	r5, r0
 8004cce:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 8004cd2:	3801      	subs	r0, #1
 8004cd4:	4402      	add	r2, r0
 8004cd6:	8069      	strh	r1, [r5, #2]
 8004cd8:	606b      	str	r3, [r5, #4]
 8004cda:	0092      	lsls	r2, r2, #2
 8004cdc:	9804      	ldr	r0, [sp, #16]
 8004cde:	4621      	mov	r1, r4
 8004ce0:	f000 fafa 	bl	80052d8 <memset>
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	702e      	strb	r6, [r5, #0]
 8004cea:	60ab      	str	r3, [r5, #8]
 8004cec:	b240      	sxtb	r0, r0
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	20fe      	movs	r0, #254	; 0xfe
 8004cf2:	e7fb      	b.n	8004cec <arm_fir_decimate_init_q31+0x30>

08004cf4 <arm_cmplx_mag_q31>:
 8004cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	0893      	lsrs	r3, r2, #2
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	e88d 0005 	stmia.w	sp, {r0, r2}
 8004d00:	460e      	mov	r6, r1
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	d053      	beq.n	8004dae <arm_cmplx_mag_q31+0xba>
 8004d06:	461f      	mov	r7, r3
 8004d08:	460d      	mov	r5, r1
 8004d0a:	46ba      	mov	sl, r7
 8004d0c:	f100 0420 	add.w	r4, r0, #32
 8004d10:	9103      	str	r1, [sp, #12]
 8004d12:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8004d16:	f854 0c1c 	ldr.w	r0, [r4, #-28]
 8004d1a:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8004d1e:	f854 2c18 	ldr.w	r2, [r4, #-24]
 8004d22:	fb83 8903 	smull	r8, r9, r3, r3
 8004d26:	fb80 0100 	smull	r0, r1, r0, r0
 8004d2a:	fb82 2302 	smull	r2, r3, r2, r2
 8004d2e:	fb86 6706 	smull	r6, r7, r6, r6
 8004d32:	ea4f 0269 	mov.w	r2, r9, asr #1
 8004d36:	1048      	asrs	r0, r1, #1
 8004d38:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8004d3c:	f854 8c0c 	ldr.w	r8, [r4, #-12]
 8004d40:	4629      	mov	r1, r5
 8004d42:	eb00 0067 	add.w	r0, r0, r7, asr #1
 8004d46:	eb02 0763 	add.w	r7, r2, r3, asr #1
 8004d4a:	f854 bc10 	ldr.w	fp, [r4, #-16]
 8004d4e:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8004d52:	f000 f849 	bl	8004de8 <arm_sqrt_q31>
 8004d56:	1d29      	adds	r1, r5, #4
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f000 f845 	bl	8004de8 <arm_sqrt_q31>
 8004d5e:	fb89 0109 	smull	r0, r1, r9, r9
 8004d62:	fb88 8908 	smull	r8, r9, r8, r8
 8004d66:	fb8b 230b 	smull	r2, r3, fp, fp
 8004d6a:	fb86 6706 	smull	r6, r7, r6, r6
 8004d6e:	ea4f 0069 	mov.w	r0, r9, asr #1
 8004d72:	104e      	asrs	r6, r1, #1
 8004d74:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8004d78:	f105 0108 	add.w	r1, r5, #8
 8004d7c:	eb06 0667 	add.w	r6, r6, r7, asr #1
 8004d80:	f000 f832 	bl	8004de8 <arm_sqrt_q31>
 8004d84:	f105 010c 	add.w	r1, r5, #12
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f000 f82d 	bl	8004de8 <arm_sqrt_q31>
 8004d8e:	f1ba 0a01 	subs.w	sl, sl, #1
 8004d92:	f104 0420 	add.w	r4, r4, #32
 8004d96:	f105 0510 	add.w	r5, r5, #16
 8004d9a:	d1ba      	bne.n	8004d12 <arm_cmplx_mag_q31+0x1e>
 8004d9c:	9b00      	ldr	r3, [sp, #0]
 8004d9e:	9a02      	ldr	r2, [sp, #8]
 8004da0:	4619      	mov	r1, r3
 8004da2:	9e03      	ldr	r6, [sp, #12]
 8004da4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	eb06 1602 	add.w	r6, r6, r2, lsl #4
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	f013 0503 	ands.w	r5, r3, #3
 8004db4:	d015      	beq.n	8004de2 <arm_cmplx_mag_q31+0xee>
 8004db6:	9c00      	ldr	r4, [sp, #0]
 8004db8:	3408      	adds	r4, #8
 8004dba:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004dbe:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004dc2:	fb80 0100 	smull	r0, r1, r0, r0
 8004dc6:	fb82 2302 	smull	r2, r3, r2, r2
 8004dca:	1048      	asrs	r0, r1, #1
 8004dcc:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	f000 f809 	bl	8004de8 <arm_sqrt_q31>
 8004dd6:	3d01      	subs	r5, #1
 8004dd8:	f106 0604 	add.w	r6, r6, #4
 8004ddc:	f104 0408 	add.w	r4, r4, #8
 8004de0:	d1eb      	bne.n	8004dba <arm_cmplx_mag_q31+0xc6>
 8004de2:	b005      	add	sp, #20
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004de8 <arm_sqrt_q31>:
 8004de8:	2800      	cmp	r0, #0
 8004dea:	dd71      	ble.n	8004ed0 <arm_sqrt_q31+0xe8>
 8004dec:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8004df0:	fab0 f580 	clz	r5, r0
 8004df4:	1e6e      	subs	r6, r5, #1
 8004df6:	f016 0701 	ands.w	r7, r6, #1
 8004dfa:	bf1a      	itte	ne
 8004dfc:	1eab      	subne	r3, r5, #2
 8004dfe:	fa00 f403 	lslne.w	r4, r0, r3
 8004e02:	fa00 f406 	lsleq.w	r4, r0, r6
 8004e06:	4620      	mov	r0, r4
 8004e08:	4688      	mov	r8, r1
 8004e0a:	f7fb fdf7 	bl	80009fc <__aeabi_i2f>
 8004e0e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8004e12:	f7fb fe47 	bl	8000aa4 <__aeabi_fmul>
 8004e16:	1043      	asrs	r3, r0, #1
 8004e18:	4830      	ldr	r0, [pc, #192]	; (8004edc <arm_sqrt_q31+0xf4>)
 8004e1a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8004e1e:	1ac0      	subs	r0, r0, r3
 8004e20:	f7fb fe40 	bl	8000aa4 <__aeabi_fmul>
 8004e24:	f7fb ff8e 	bl	8000d44 <__aeabi_f2iz>
 8004e28:	fb80 ab00 	smull	sl, fp, r0, r0
 8004e2c:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8004e30:	ea4f 0e64 	mov.w	lr, r4, asr #1
 8004e34:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 8004e38:	fb82 230e 	smull	r2, r3, r2, lr
 8004e3c:	0fd2      	lsrs	r2, r2, #31
 8004e3e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8004e42:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e46:	fb80 0102 	smull	r0, r1, r0, r2
 8004e4a:	0fc2      	lsrs	r2, r0, #31
 8004e4c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004e50:	0093      	lsls	r3, r2, #2
 8004e52:	fb83 ab03 	smull	sl, fp, r3, r3
 8004e56:	ea4f 70da 	mov.w	r0, sl, lsr #31
 8004e5a:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
 8004e5e:	fb8e 0100 	smull	r0, r1, lr, r0
 8004e62:	0fc2      	lsrs	r2, r0, #31
 8004e64:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004e68:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e6c:	fb83 2302 	smull	r2, r3, r3, r2
 8004e70:	0fd2      	lsrs	r2, r2, #31
 8004e72:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8004e76:	0093      	lsls	r3, r2, #2
 8004e78:	fb83 0103 	smull	r0, r1, r3, r3
 8004e7c:	0fc0      	lsrs	r0, r0, #31
 8004e7e:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 8004e82:	fb8e 0100 	smull	r0, r1, lr, r0
 8004e86:	0fc2      	lsrs	r2, r0, #31
 8004e88:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004e8c:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e90:	fb83 2302 	smull	r2, r3, r3, r2
 8004e94:	0fd0      	lsrs	r0, r2, #31
 8004e96:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8004e9a:	0080      	lsls	r0, r0, #2
 8004e9c:	fb84 0100 	smull	r0, r1, r4, r0
 8004ea0:	0fc3      	lsrs	r3, r0, #31
 8004ea2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	b157      	cbz	r7, 8004ec0 <arm_sqrt_q31+0xd8>
 8004eaa:	3d02      	subs	r5, #2
 8004eac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eb0:	106d      	asrs	r5, r5, #1
 8004eb2:	412b      	asrs	r3, r5
 8004eb4:	f8c8 3000 	str.w	r3, [r8]
 8004eb8:	2000      	movs	r0, #0
 8004eba:	b240      	sxtb	r0, r0
 8004ebc:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8004ec0:	1076      	asrs	r6, r6, #1
 8004ec2:	4133      	asrs	r3, r6
 8004ec4:	f8c8 3000 	str.w	r3, [r8]
 8004ec8:	2000      	movs	r0, #0
 8004eca:	b240      	sxtb	r0, r0
 8004ecc:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	20ff      	movs	r0, #255	; 0xff
 8004ed4:	600b      	str	r3, [r1, #0]
 8004ed6:	b240      	sxtb	r0, r0
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	5f3759df 	.word	0x5f3759df

08004ee0 <arm_sub_q31>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	9302      	str	r3, [sp, #8]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	4683      	mov	fp, r0
 8004eec:	468a      	mov	sl, r1
 8004eee:	9201      	str	r2, [sp, #4]
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	d063      	beq.n	8004fbc <arm_sub_q31+0xdc>
 8004ef4:	461f      	mov	r7, r3
 8004ef6:	f100 0e10 	add.w	lr, r0, #16
 8004efa:	f101 0610 	add.w	r6, r1, #16
 8004efe:	f102 0510 	add.w	r5, r2, #16
 8004f02:	f856 1c10 	ldr.w	r1, [r6, #-16]
 8004f06:	f85e 2c10 	ldr.w	r2, [lr, #-16]
 8004f0a:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 8004f0e:	17d3      	asrs	r3, r2, #31
 8004f10:	1a52      	subs	r2, r2, r1
 8004f12:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8004f16:	f85e 0c0c 	ldr.w	r0, [lr, #-12]
 8004f1a:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8004f1e:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8004f22:	f08c 4c00 	eor.w	ip, ip, #2147483648	; 0x80000000
 8004f26:	ea6f 0c0c 	mvn.w	ip, ip
 8004f2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004f2e:	bf08      	it	eq
 8004f30:	4694      	moveq	ip, r2
 8004f32:	1b00      	subs	r0, r0, r4
 8004f34:	eb61 71e4 	sbc.w	r1, r1, r4, asr #31
 8004f38:	ea4f 78e1 	mov.w	r8, r1, asr #31
 8004f3c:	f088 4800 	eor.w	r8, r8, #2147483648	; 0x80000000
 8004f40:	ea6f 0808 	mvn.w	r8, r8
 8004f44:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8004f48:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 8004f4c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004f50:	bf18      	it	ne
 8004f52:	4640      	movne	r0, r8
 8004f54:	17d3      	asrs	r3, r2, #31
 8004f56:	1b12      	subs	r2, r2, r4
 8004f58:	eb63 73e4 	sbc.w	r3, r3, r4, asr #31
 8004f5c:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8004f60:	17dc      	asrs	r4, r3, #31
 8004f62:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8004f66:	4688      	mov	r8, r1
 8004f68:	43e4      	mvns	r4, r4
 8004f6a:	ea4f 79e1 	mov.w	r9, r1, asr #31
 8004f6e:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8004f72:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8004f76:	bf18      	it	ne
 8004f78:	4622      	movne	r2, r4
 8004f7a:	ebb8 0801 	subs.w	r8, r8, r1
 8004f7e:	eb69 79e1 	sbc.w	r9, r9, r1, asr #31
 8004f82:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8004f86:	ebb9 7fe8 	cmp.w	r9, r8, asr #31
 8004f8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f8e:	ea6f 0303 	mvn.w	r3, r3
 8004f92:	bf08      	it	eq
 8004f94:	4643      	moveq	r3, r8
 8004f96:	3f01      	subs	r7, #1
 8004f98:	f845 cc10 	str.w	ip, [r5, #-16]
 8004f9c:	e905 000d 	stmdb	r5, {r0, r2, r3}
 8004fa0:	f10e 0e10 	add.w	lr, lr, #16
 8004fa4:	f106 0610 	add.w	r6, r6, #16
 8004fa8:	f105 0510 	add.w	r5, r5, #16
 8004fac:	d1a9      	bne.n	8004f02 <arm_sub_q31+0x22>
 8004fae:	9b03      	ldr	r3, [sp, #12]
 8004fb0:	9a01      	ldr	r2, [sp, #4]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	441a      	add	r2, r3
 8004fb6:	449b      	add	fp, r3
 8004fb8:	449a      	add	sl, r3
 8004fba:	9201      	str	r2, [sp, #4]
 8004fbc:	9b02      	ldr	r3, [sp, #8]
 8004fbe:	f013 0303 	ands.w	r3, r3, #3
 8004fc2:	d015      	beq.n	8004ff0 <arm_sub_q31+0x110>
 8004fc4:	9a01      	ldr	r2, [sp, #4]
 8004fc6:	3a04      	subs	r2, #4
 8004fc8:	f85a 4b04 	ldr.w	r4, [sl], #4
 8004fcc:	f85b 0b04 	ldr.w	r0, [fp], #4
 8004fd0:	17c1      	asrs	r1, r0, #31
 8004fd2:	1b00      	subs	r0, r0, r4
 8004fd4:	eb61 71e4 	sbc.w	r1, r1, r4, asr #31
 8004fd8:	17cc      	asrs	r4, r1, #31
 8004fda:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8004fde:	43e4      	mvns	r4, r4
 8004fe0:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004fe4:	bf18      	it	ne
 8004fe6:	4620      	movne	r0, r4
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8004fee:	d1eb      	bne.n	8004fc8 <arm_sub_q31+0xe8>
 8004ff0:	b005      	add	sp, #20
 8004ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff6:	bf00      	nop

08004ff8 <arm_scale_q31>:
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	b089      	sub	sp, #36	; 0x24
 8004ffe:	3201      	adds	r2, #1
 8005000:	9305      	str	r3, [sp, #20]
 8005002:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005004:	fa4f fc82 	sxtb.w	ip, r2
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	f1bc 0f00 	cmp.w	ip, #0
 800500e:	4683      	mov	fp, r0
 8005010:	468a      	mov	sl, r1
 8005012:	9306      	str	r3, [sp, #24]
 8005014:	da48      	bge.n	80050a8 <arm_scale_q31+0xb0>
 8005016:	b39b      	cbz	r3, 8005080 <arm_scale_q31+0x88>
 8005018:	9b05      	ldr	r3, [sp, #20]
 800501a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800501e:	f1cc 0100 	rsb	r1, ip, #0
 8005022:	f100 0210 	add.w	r2, r0, #16
 8005026:	3310      	adds	r3, #16
 8005028:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800502c:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8005030:	fb86 670a 	smull	r6, r7, r6, sl
 8005034:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005038:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800503c:	fb85 890a 	smull	r8, r9, r5, sl
 8005040:	fb84 450a 	smull	r4, r5, r4, sl
 8005044:	fa47 f401 	asr.w	r4, r7, r1
 8005048:	fb80 670a 	smull	r6, r7, r0, sl
 800504c:	410d      	asrs	r5, r1
 800504e:	fa49 f601 	asr.w	r6, r9, r1
 8005052:	fa47 f001 	asr.w	r0, r7, r1
 8005056:	f1be 0e01 	subs.w	lr, lr, #1
 800505a:	f843 4c10 	str.w	r4, [r3, #-16]
 800505e:	f843 6c0c 	str.w	r6, [r3, #-12]
 8005062:	f843 5c08 	str.w	r5, [r3, #-8]
 8005066:	f843 0c04 	str.w	r0, [r3, #-4]
 800506a:	f102 0210 	add.w	r2, r2, #16
 800506e:	f103 0310 	add.w	r3, r3, #16
 8005072:	d1d9      	bne.n	8005028 <arm_scale_q31+0x30>
 8005074:	9b06      	ldr	r3, [sp, #24]
 8005076:	9a05      	ldr	r2, [sp, #20]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	441a      	add	r2, r3
 800507c:	449b      	add	fp, r3
 800507e:	9205      	str	r2, [sp, #20]
 8005080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005082:	f013 0103 	ands.w	r1, r3, #3
 8005086:	d00c      	beq.n	80050a2 <arm_scale_q31+0xaa>
 8005088:	9805      	ldr	r0, [sp, #20]
 800508a:	f1cc 0c00 	rsb	ip, ip, #0
 800508e:	f85b 2b04 	ldr.w	r2, [fp], #4
 8005092:	3901      	subs	r1, #1
 8005094:	fb82 230a 	smull	r2, r3, r2, sl
 8005098:	fa43 f30c 	asr.w	r3, r3, ip
 800509c:	f840 3b04 	str.w	r3, [r0], #4
 80050a0:	d1f5      	bne.n	800508e <arm_scale_q31+0x96>
 80050a2:	b009      	add	sp, #36	; 0x24
 80050a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d060      	beq.n	800516e <arm_scale_q31+0x176>
 80050ac:	9304      	str	r3, [sp, #16]
 80050ae:	9b05      	ldr	r3, [sp, #20]
 80050b0:	f100 0210 	add.w	r2, r0, #16
 80050b4:	f103 0910 	add.w	r9, r3, #16
 80050b8:	9201      	str	r2, [sp, #4]
 80050ba:	9007      	str	r0, [sp, #28]
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80050c2:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80050c6:	fb86 670a 	smull	r6, r7, r6, sl
 80050ca:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80050ce:	fb84 450a 	smull	r4, r5, r4, sl
 80050d2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80050d6:	fb80 010a 	smull	r0, r1, r0, sl
 80050da:	17fe      	asrs	r6, r7, #31
 80050dc:	fb83 230a 	smull	r2, r3, r3, sl
 80050e0:	f086 4e00 	eor.w	lr, r6, #2147483648	; 0x80000000
 80050e4:	ea6f 0e0e 	mvn.w	lr, lr
 80050e8:	17ec      	asrs	r4, r5, #31
 80050ea:	17c8      	asrs	r0, r1, #31
 80050ec:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 80050f0:	43e4      	mvns	r4, r4
 80050f2:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80050f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050fa:	43c0      	mvns	r0, r0
 80050fc:	17db      	asrs	r3, r3, #31
 80050fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005102:	43db      	mvns	r3, r3
 8005104:	fa07 f60c 	lsl.w	r6, r7, ip
 8005108:	fa46 f80c 	asr.w	r8, r6, ip
 800510c:	45b8      	cmp	r8, r7
 800510e:	bf18      	it	ne
 8005110:	4676      	movne	r6, lr
 8005112:	fa05 f80c 	lsl.w	r8, r5, ip
 8005116:	fa01 fe0c 	lsl.w	lr, r1, ip
 800511a:	9f03      	ldr	r7, [sp, #12]
 800511c:	fa48 fb0c 	asr.w	fp, r8, ip
 8005120:	45ab      	cmp	fp, r5
 8005122:	bf08      	it	eq
 8005124:	4644      	moveq	r4, r8
 8005126:	fa4e f50c 	asr.w	r5, lr, ip
 800512a:	428d      	cmp	r5, r1
 800512c:	bf08      	it	eq
 800512e:	4670      	moveq	r0, lr
 8005130:	fa07 f70c 	lsl.w	r7, r7, ip
 8005134:	9d03      	ldr	r5, [sp, #12]
 8005136:	fa47 f10c 	asr.w	r1, r7, ip
 800513a:	42a9      	cmp	r1, r5
 800513c:	bf08      	it	eq
 800513e:	463b      	moveq	r3, r7
 8005140:	9a01      	ldr	r2, [sp, #4]
 8005142:	e909 0009 	stmdb	r9, {r0, r3}
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	3210      	adds	r2, #16
 800514a:	3b01      	subs	r3, #1
 800514c:	f849 6c10 	str.w	r6, [r9, #-16]
 8005150:	f849 4c0c 	str.w	r4, [r9, #-12]
 8005154:	9201      	str	r2, [sp, #4]
 8005156:	f109 0910 	add.w	r9, r9, #16
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	d1ae      	bne.n	80050bc <arm_scale_q31+0xc4>
 800515e:	9b06      	ldr	r3, [sp, #24]
 8005160:	9a05      	ldr	r2, [sp, #20]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005168:	441a      	add	r2, r3
 800516a:	449b      	add	fp, r3
 800516c:	9205      	str	r2, [sp, #20]
 800516e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005170:	f013 0003 	ands.w	r0, r3, #3
 8005174:	d095      	beq.n	80050a2 <arm_scale_q31+0xaa>
 8005176:	9905      	ldr	r1, [sp, #20]
 8005178:	f85b 4b04 	ldr.w	r4, [fp], #4
 800517c:	fb84 450a 	smull	r4, r5, r4, sl
 8005180:	17eb      	asrs	r3, r5, #31
 8005182:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005186:	43db      	mvns	r3, r3
 8005188:	fa05 f20c 	lsl.w	r2, r5, ip
 800518c:	fa42 f40c 	asr.w	r4, r2, ip
 8005190:	42ac      	cmp	r4, r5
 8005192:	bf08      	it	eq
 8005194:	4613      	moveq	r3, r2
 8005196:	3801      	subs	r0, #1
 8005198:	f841 3b04 	str.w	r3, [r1], #4
 800519c:	d1ec      	bne.n	8005178 <arm_scale_q31+0x180>
 800519e:	b009      	add	sp, #36	; 0x24
 80051a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051a4 <arm_mult_q31>:
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 80051ac:	b083      	sub	sp, #12
 80051ae:	469a      	mov	sl, r3
 80051b0:	d04a      	beq.n	8005248 <arm_mult_q31+0xa4>
 80051b2:	46dc      	mov	ip, fp
 80051b4:	f8cd b004 	str.w	fp, [sp, #4]
 80051b8:	468e      	mov	lr, r1
 80051ba:	4683      	mov	fp, r0
 80051bc:	f100 0510 	add.w	r5, r0, #16
 80051c0:	f101 0410 	add.w	r4, r1, #16
 80051c4:	f102 0310 	add.w	r3, r2, #16
 80051c8:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80051cc:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80051d0:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 80051d4:	fb80 0101 	smull	r0, r1, r0, r1
 80051d8:	f301 011e 	ssat	r1, #31, r1
 80051dc:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80051e0:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80051e4:	fb87 8900 	smull	r8, r9, r7, r0
 80051e8:	f309 071e 	ssat	r7, #31, r9
 80051ec:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80051f0:	0049      	lsls	r1, r1, #1
 80051f2:	4680      	mov	r8, r0
 80051f4:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80051f8:	f1bc 0c01 	subs.w	ip, ip, #1
 80051fc:	fb88 8900 	smull	r8, r9, r8, r0
 8005200:	f309 001e 	ssat	r0, #31, r9
 8005204:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8005208:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800520c:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8005210:	fb87 6706 	smull	r6, r7, r7, r6
 8005214:	f307 061e 	ssat	r6, #31, r7
 8005218:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800521c:	f843 1c10 	str.w	r1, [r3, #-16]
 8005220:	f843 8c0c 	str.w	r8, [r3, #-12]
 8005224:	e903 0041 	stmdb	r3, {r0, r6}
 8005228:	f105 0510 	add.w	r5, r5, #16
 800522c:	f104 0410 	add.w	r4, r4, #16
 8005230:	f103 0310 	add.w	r3, r3, #16
 8005234:	d1c8      	bne.n	80051c8 <arm_mult_q31+0x24>
 8005236:	4658      	mov	r0, fp
 8005238:	4671      	mov	r1, lr
 800523a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800523e:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8005242:	4458      	add	r0, fp
 8005244:	4459      	add	r1, fp
 8005246:	445a      	add	r2, fp
 8005248:	f01a 0a03 	ands.w	sl, sl, #3
 800524c:	d00e      	beq.n	800526c <arm_mult_q31+0xc8>
 800524e:	f850 3b04 	ldr.w	r3, [r0], #4
 8005252:	f851 4b04 	ldr.w	r4, [r1], #4
 8005256:	f1ba 0a01 	subs.w	sl, sl, #1
 800525a:	fb83 4504 	smull	r4, r5, r3, r4
 800525e:	f305 031e 	ssat	r3, #31, r5
 8005262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005266:	f842 3b04 	str.w	r3, [r2], #4
 800526a:	d1f0      	bne.n	800524e <arm_mult_q31+0xaa>
 800526c:	b003      	add	sp, #12
 800526e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005272:	bf00      	nop

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	200000c4 	.word	0x200000c4

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	2600      	movs	r6, #0
 8005284:	4d0c      	ldr	r5, [pc, #48]	; (80052b8 <__libc_init_array+0x38>)
 8005286:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	f000 fcf4 	bl	8005c7c <_init>
 8005294:	2600      	movs	r6, #0
 8005296:	4d0a      	ldr	r5, [pc, #40]	; (80052c0 <__libc_init_array+0x40>)
 8005298:	4c0a      	ldr	r4, [pc, #40]	; (80052c4 <__libc_init_array+0x44>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08005e34 	.word	0x08005e34
 80052bc:	08005e34 	.word	0x08005e34
 80052c0:	08005e34 	.word	0x08005e34
 80052c4:	08005e38 	.word	0x08005e38

080052c8 <malloc>:
 80052c8:	4b02      	ldr	r3, [pc, #8]	; (80052d4 <malloc+0xc>)
 80052ca:	4601      	mov	r1, r0
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f000 b873 	b.w	80053b8 <_malloc_r>
 80052d2:	bf00      	nop
 80052d4:	200000c4 	.word	0x200000c4

080052d8 <memset>:
 80052d8:	4603      	mov	r3, r0
 80052da:	4402      	add	r2, r0
 80052dc:	4293      	cmp	r3, r2
 80052de:	d100      	bne.n	80052e2 <memset+0xa>
 80052e0:	4770      	bx	lr
 80052e2:	f803 1b01 	strb.w	r1, [r3], #1
 80052e6:	e7f9      	b.n	80052dc <memset+0x4>

080052e8 <_free_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d040      	beq.n	8005372 <_free_r+0x8a>
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f0c      	subs	r4, r1, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	18e4      	addlt	r4, r4, r3
 80052fc:	f000 f950 	bl	80055a0 <__malloc_lock>
 8005300:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <_free_r+0x8c>)
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	b933      	cbnz	r3, 8005314 <_free_r+0x2c>
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	6014      	str	r4, [r2, #0]
 800530a:	4628      	mov	r0, r5
 800530c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005310:	f000 b94c 	b.w	80055ac <__malloc_unlock>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d908      	bls.n	800532a <_free_r+0x42>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	1821      	adds	r1, r4, r0
 800531c:	428b      	cmp	r3, r1
 800531e:	bf01      	itttt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	1809      	addeq	r1, r1, r0
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	e7ed      	b.n	8005306 <_free_r+0x1e>
 800532a:	461a      	mov	r2, r3
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b10b      	cbz	r3, 8005334 <_free_r+0x4c>
 8005330:	42a3      	cmp	r3, r4
 8005332:	d9fa      	bls.n	800532a <_free_r+0x42>
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	1850      	adds	r0, r2, r1
 8005338:	42a0      	cmp	r0, r4
 800533a:	d10b      	bne.n	8005354 <_free_r+0x6c>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	4401      	add	r1, r0
 8005340:	1850      	adds	r0, r2, r1
 8005342:	4283      	cmp	r3, r0
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	d1e0      	bne.n	800530a <_free_r+0x22>
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4401      	add	r1, r0
 800534e:	6011      	str	r1, [r2, #0]
 8005350:	6053      	str	r3, [r2, #4]
 8005352:	e7da      	b.n	800530a <_free_r+0x22>
 8005354:	d902      	bls.n	800535c <_free_r+0x74>
 8005356:	230c      	movs	r3, #12
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	e7d6      	b.n	800530a <_free_r+0x22>
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	1821      	adds	r1, r4, r0
 8005360:	428b      	cmp	r3, r1
 8005362:	bf01      	itttt	eq
 8005364:	6819      	ldreq	r1, [r3, #0]
 8005366:	685b      	ldreq	r3, [r3, #4]
 8005368:	1809      	addeq	r1, r1, r0
 800536a:	6021      	streq	r1, [r4, #0]
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	6054      	str	r4, [r2, #4]
 8005370:	e7cb      	b.n	800530a <_free_r+0x22>
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20001d04 	.word	0x20001d04

08005378 <sbrk_aligned>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4e0e      	ldr	r6, [pc, #56]	; (80053b4 <sbrk_aligned+0x3c>)
 800537c:	460c      	mov	r4, r1
 800537e:	6831      	ldr	r1, [r6, #0]
 8005380:	4605      	mov	r5, r0
 8005382:	b911      	cbnz	r1, 800538a <sbrk_aligned+0x12>
 8005384:	f000 f88c 	bl	80054a0 <_sbrk_r>
 8005388:	6030      	str	r0, [r6, #0]
 800538a:	4621      	mov	r1, r4
 800538c:	4628      	mov	r0, r5
 800538e:	f000 f887 	bl	80054a0 <_sbrk_r>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d00a      	beq.n	80053ac <sbrk_aligned+0x34>
 8005396:	1cc4      	adds	r4, r0, #3
 8005398:	f024 0403 	bic.w	r4, r4, #3
 800539c:	42a0      	cmp	r0, r4
 800539e:	d007      	beq.n	80053b0 <sbrk_aligned+0x38>
 80053a0:	1a21      	subs	r1, r4, r0
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 f87c 	bl	80054a0 <_sbrk_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d101      	bne.n	80053b0 <sbrk_aligned+0x38>
 80053ac:	f04f 34ff 	mov.w	r4, #4294967295
 80053b0:	4620      	mov	r0, r4
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	20001d08 	.word	0x20001d08

080053b8 <_malloc_r>:
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	1ccd      	adds	r5, r1, #3
 80053be:	f025 0503 	bic.w	r5, r5, #3
 80053c2:	3508      	adds	r5, #8
 80053c4:	2d0c      	cmp	r5, #12
 80053c6:	bf38      	it	cc
 80053c8:	250c      	movcc	r5, #12
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	4607      	mov	r7, r0
 80053ce:	db01      	blt.n	80053d4 <_malloc_r+0x1c>
 80053d0:	42a9      	cmp	r1, r5
 80053d2:	d905      	bls.n	80053e0 <_malloc_r+0x28>
 80053d4:	230c      	movs	r3, #12
 80053d6:	2600      	movs	r6, #0
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	4630      	mov	r0, r6
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	4e2e      	ldr	r6, [pc, #184]	; (800549c <_malloc_r+0xe4>)
 80053e2:	f000 f8dd 	bl	80055a0 <__malloc_lock>
 80053e6:	6833      	ldr	r3, [r6, #0]
 80053e8:	461c      	mov	r4, r3
 80053ea:	bb34      	cbnz	r4, 800543a <_malloc_r+0x82>
 80053ec:	4629      	mov	r1, r5
 80053ee:	4638      	mov	r0, r7
 80053f0:	f7ff ffc2 	bl	8005378 <sbrk_aligned>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	4604      	mov	r4, r0
 80053f8:	d14d      	bne.n	8005496 <_malloc_r+0xde>
 80053fa:	6834      	ldr	r4, [r6, #0]
 80053fc:	4626      	mov	r6, r4
 80053fe:	2e00      	cmp	r6, #0
 8005400:	d140      	bne.n	8005484 <_malloc_r+0xcc>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	4631      	mov	r1, r6
 8005406:	4638      	mov	r0, r7
 8005408:	eb04 0803 	add.w	r8, r4, r3
 800540c:	f000 f848 	bl	80054a0 <_sbrk_r>
 8005410:	4580      	cmp	r8, r0
 8005412:	d13a      	bne.n	800548a <_malloc_r+0xd2>
 8005414:	6821      	ldr	r1, [r4, #0]
 8005416:	3503      	adds	r5, #3
 8005418:	1a6d      	subs	r5, r5, r1
 800541a:	f025 0503 	bic.w	r5, r5, #3
 800541e:	3508      	adds	r5, #8
 8005420:	2d0c      	cmp	r5, #12
 8005422:	bf38      	it	cc
 8005424:	250c      	movcc	r5, #12
 8005426:	4638      	mov	r0, r7
 8005428:	4629      	mov	r1, r5
 800542a:	f7ff ffa5 	bl	8005378 <sbrk_aligned>
 800542e:	3001      	adds	r0, #1
 8005430:	d02b      	beq.n	800548a <_malloc_r+0xd2>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	442b      	add	r3, r5
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	e00e      	b.n	8005458 <_malloc_r+0xa0>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	1b52      	subs	r2, r2, r5
 800543e:	d41e      	bmi.n	800547e <_malloc_r+0xc6>
 8005440:	2a0b      	cmp	r2, #11
 8005442:	d916      	bls.n	8005472 <_malloc_r+0xba>
 8005444:	1961      	adds	r1, r4, r5
 8005446:	42a3      	cmp	r3, r4
 8005448:	6025      	str	r5, [r4, #0]
 800544a:	bf18      	it	ne
 800544c:	6059      	strne	r1, [r3, #4]
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	bf08      	it	eq
 8005452:	6031      	streq	r1, [r6, #0]
 8005454:	5162      	str	r2, [r4, r5]
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	4638      	mov	r0, r7
 800545a:	f104 060b 	add.w	r6, r4, #11
 800545e:	f000 f8a5 	bl	80055ac <__malloc_unlock>
 8005462:	f026 0607 	bic.w	r6, r6, #7
 8005466:	1d23      	adds	r3, r4, #4
 8005468:	1af2      	subs	r2, r6, r3
 800546a:	d0b6      	beq.n	80053da <_malloc_r+0x22>
 800546c:	1b9b      	subs	r3, r3, r6
 800546e:	50a3      	str	r3, [r4, r2]
 8005470:	e7b3      	b.n	80053da <_malloc_r+0x22>
 8005472:	6862      	ldr	r2, [r4, #4]
 8005474:	42a3      	cmp	r3, r4
 8005476:	bf0c      	ite	eq
 8005478:	6032      	streq	r2, [r6, #0]
 800547a:	605a      	strne	r2, [r3, #4]
 800547c:	e7ec      	b.n	8005458 <_malloc_r+0xa0>
 800547e:	4623      	mov	r3, r4
 8005480:	6864      	ldr	r4, [r4, #4]
 8005482:	e7b2      	b.n	80053ea <_malloc_r+0x32>
 8005484:	4634      	mov	r4, r6
 8005486:	6876      	ldr	r6, [r6, #4]
 8005488:	e7b9      	b.n	80053fe <_malloc_r+0x46>
 800548a:	230c      	movs	r3, #12
 800548c:	4638      	mov	r0, r7
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	f000 f88c 	bl	80055ac <__malloc_unlock>
 8005494:	e7a1      	b.n	80053da <_malloc_r+0x22>
 8005496:	6025      	str	r5, [r4, #0]
 8005498:	e7de      	b.n	8005458 <_malloc_r+0xa0>
 800549a:	bf00      	nop
 800549c:	20001d04 	.word	0x20001d04

080054a0 <_sbrk_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	2300      	movs	r3, #0
 80054a4:	4d05      	ldr	r5, [pc, #20]	; (80054bc <_sbrk_r+0x1c>)
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fc f958 	bl	8001760 <_sbrk>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_sbrk_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_sbrk_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20001d0c 	.word	0x20001d0c

080054c0 <siprintf>:
 80054c0:	b40e      	push	{r1, r2, r3}
 80054c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054c6:	b500      	push	{lr}
 80054c8:	b09c      	sub	sp, #112	; 0x70
 80054ca:	ab1d      	add	r3, sp, #116	; 0x74
 80054cc:	9002      	str	r0, [sp, #8]
 80054ce:	9006      	str	r0, [sp, #24]
 80054d0:	9107      	str	r1, [sp, #28]
 80054d2:	9104      	str	r1, [sp, #16]
 80054d4:	4808      	ldr	r0, [pc, #32]	; (80054f8 <siprintf+0x38>)
 80054d6:	4909      	ldr	r1, [pc, #36]	; (80054fc <siprintf+0x3c>)
 80054d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054dc:	9105      	str	r1, [sp, #20]
 80054de:	6800      	ldr	r0, [r0, #0]
 80054e0:	a902      	add	r1, sp, #8
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	f000 f8c4 	bl	8005670 <_svfiprintf_r>
 80054e8:	2200      	movs	r2, #0
 80054ea:	9b02      	ldr	r3, [sp, #8]
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	b01c      	add	sp, #112	; 0x70
 80054f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f4:	b003      	add	sp, #12
 80054f6:	4770      	bx	lr
 80054f8:	200000c4 	.word	0x200000c4
 80054fc:	ffff0208 	.word	0xffff0208

08005500 <strcat>:
 8005500:	4602      	mov	r2, r0
 8005502:	b510      	push	{r4, lr}
 8005504:	7814      	ldrb	r4, [r2, #0]
 8005506:	4613      	mov	r3, r2
 8005508:	3201      	adds	r2, #1
 800550a:	2c00      	cmp	r4, #0
 800550c:	d1fa      	bne.n	8005504 <strcat+0x4>
 800550e:	3b01      	subs	r3, #1
 8005510:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005514:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005518:	2a00      	cmp	r2, #0
 800551a:	d1f9      	bne.n	8005510 <strcat+0x10>
 800551c:	bd10      	pop	{r4, pc}

0800551e <strcpy>:
 800551e:	4603      	mov	r3, r0
 8005520:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005524:	f803 2b01 	strb.w	r2, [r3], #1
 8005528:	2a00      	cmp	r2, #0
 800552a:	d1f9      	bne.n	8005520 <strcpy+0x2>
 800552c:	4770      	bx	lr

0800552e <_vsniprintf_r>:
 800552e:	b530      	push	{r4, r5, lr}
 8005530:	4614      	mov	r4, r2
 8005532:	2c00      	cmp	r4, #0
 8005534:	4605      	mov	r5, r0
 8005536:	461a      	mov	r2, r3
 8005538:	b09b      	sub	sp, #108	; 0x6c
 800553a:	da05      	bge.n	8005548 <_vsniprintf_r+0x1a>
 800553c:	238b      	movs	r3, #139	; 0x8b
 800553e:	6003      	str	r3, [r0, #0]
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	b01b      	add	sp, #108	; 0x6c
 8005546:	bd30      	pop	{r4, r5, pc}
 8005548:	f44f 7302 	mov.w	r3, #520	; 0x208
 800554c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005550:	bf0c      	ite	eq
 8005552:	4623      	moveq	r3, r4
 8005554:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005558:	9302      	str	r3, [sp, #8]
 800555a:	9305      	str	r3, [sp, #20]
 800555c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005560:	9100      	str	r1, [sp, #0]
 8005562:	9104      	str	r1, [sp, #16]
 8005564:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005568:	4669      	mov	r1, sp
 800556a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800556c:	f000 f880 	bl	8005670 <_svfiprintf_r>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	bfbc      	itt	lt
 8005574:	238b      	movlt	r3, #139	; 0x8b
 8005576:	602b      	strlt	r3, [r5, #0]
 8005578:	2c00      	cmp	r4, #0
 800557a:	d0e3      	beq.n	8005544 <_vsniprintf_r+0x16>
 800557c:	2200      	movs	r2, #0
 800557e:	9b00      	ldr	r3, [sp, #0]
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e7df      	b.n	8005544 <_vsniprintf_r+0x16>

08005584 <vsniprintf>:
 8005584:	b507      	push	{r0, r1, r2, lr}
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	460a      	mov	r2, r1
 800558c:	4601      	mov	r1, r0
 800558e:	4803      	ldr	r0, [pc, #12]	; (800559c <vsniprintf+0x18>)
 8005590:	6800      	ldr	r0, [r0, #0]
 8005592:	f7ff ffcc 	bl	800552e <_vsniprintf_r>
 8005596:	b003      	add	sp, #12
 8005598:	f85d fb04 	ldr.w	pc, [sp], #4
 800559c:	200000c4 	.word	0x200000c4

080055a0 <__malloc_lock>:
 80055a0:	4801      	ldr	r0, [pc, #4]	; (80055a8 <__malloc_lock+0x8>)
 80055a2:	f000 bafb 	b.w	8005b9c <__retarget_lock_acquire_recursive>
 80055a6:	bf00      	nop
 80055a8:	20001d10 	.word	0x20001d10

080055ac <__malloc_unlock>:
 80055ac:	4801      	ldr	r0, [pc, #4]	; (80055b4 <__malloc_unlock+0x8>)
 80055ae:	f000 baf6 	b.w	8005b9e <__retarget_lock_release_recursive>
 80055b2:	bf00      	nop
 80055b4:	20001d10 	.word	0x20001d10

080055b8 <__ssputs_r>:
 80055b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	688e      	ldr	r6, [r1, #8]
 80055be:	4682      	mov	sl, r0
 80055c0:	429e      	cmp	r6, r3
 80055c2:	460c      	mov	r4, r1
 80055c4:	4690      	mov	r8, r2
 80055c6:	461f      	mov	r7, r3
 80055c8:	d838      	bhi.n	800563c <__ssputs_r+0x84>
 80055ca:	898a      	ldrh	r2, [r1, #12]
 80055cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055d0:	d032      	beq.n	8005638 <__ssputs_r+0x80>
 80055d2:	6825      	ldr	r5, [r4, #0]
 80055d4:	6909      	ldr	r1, [r1, #16]
 80055d6:	3301      	adds	r3, #1
 80055d8:	eba5 0901 	sub.w	r9, r5, r1
 80055dc:	6965      	ldr	r5, [r4, #20]
 80055de:	444b      	add	r3, r9
 80055e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055e8:	106d      	asrs	r5, r5, #1
 80055ea:	429d      	cmp	r5, r3
 80055ec:	bf38      	it	cc
 80055ee:	461d      	movcc	r5, r3
 80055f0:	0553      	lsls	r3, r2, #21
 80055f2:	d531      	bpl.n	8005658 <__ssputs_r+0xa0>
 80055f4:	4629      	mov	r1, r5
 80055f6:	f7ff fedf 	bl	80053b8 <_malloc_r>
 80055fa:	4606      	mov	r6, r0
 80055fc:	b950      	cbnz	r0, 8005614 <__ssputs_r+0x5c>
 80055fe:	230c      	movs	r3, #12
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	f8ca 3000 	str.w	r3, [sl]
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005614:	464a      	mov	r2, r9
 8005616:	6921      	ldr	r1, [r4, #16]
 8005618:	f000 fad0 	bl	8005bbc <memcpy>
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	6126      	str	r6, [r4, #16]
 800562a:	444e      	add	r6, r9
 800562c:	6026      	str	r6, [r4, #0]
 800562e:	463e      	mov	r6, r7
 8005630:	6165      	str	r5, [r4, #20]
 8005632:	eba5 0509 	sub.w	r5, r5, r9
 8005636:	60a5      	str	r5, [r4, #8]
 8005638:	42be      	cmp	r6, r7
 800563a:	d900      	bls.n	800563e <__ssputs_r+0x86>
 800563c:	463e      	mov	r6, r7
 800563e:	4632      	mov	r2, r6
 8005640:	4641      	mov	r1, r8
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	f000 fac8 	bl	8005bd8 <memmove>
 8005648:	68a3      	ldr	r3, [r4, #8]
 800564a:	2000      	movs	r0, #0
 800564c:	1b9b      	subs	r3, r3, r6
 800564e:	60a3      	str	r3, [r4, #8]
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	4433      	add	r3, r6
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	e7db      	b.n	8005610 <__ssputs_r+0x58>
 8005658:	462a      	mov	r2, r5
 800565a:	f000 fad7 	bl	8005c0c <_realloc_r>
 800565e:	4606      	mov	r6, r0
 8005660:	2800      	cmp	r0, #0
 8005662:	d1e1      	bne.n	8005628 <__ssputs_r+0x70>
 8005664:	4650      	mov	r0, sl
 8005666:	6921      	ldr	r1, [r4, #16]
 8005668:	f7ff fe3e 	bl	80052e8 <_free_r>
 800566c:	e7c7      	b.n	80055fe <__ssputs_r+0x46>
	...

08005670 <_svfiprintf_r>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	4698      	mov	r8, r3
 8005676:	898b      	ldrh	r3, [r1, #12]
 8005678:	4607      	mov	r7, r0
 800567a:	061b      	lsls	r3, r3, #24
 800567c:	460d      	mov	r5, r1
 800567e:	4614      	mov	r4, r2
 8005680:	b09d      	sub	sp, #116	; 0x74
 8005682:	d50e      	bpl.n	80056a2 <_svfiprintf_r+0x32>
 8005684:	690b      	ldr	r3, [r1, #16]
 8005686:	b963      	cbnz	r3, 80056a2 <_svfiprintf_r+0x32>
 8005688:	2140      	movs	r1, #64	; 0x40
 800568a:	f7ff fe95 	bl	80053b8 <_malloc_r>
 800568e:	6028      	str	r0, [r5, #0]
 8005690:	6128      	str	r0, [r5, #16]
 8005692:	b920      	cbnz	r0, 800569e <_svfiprintf_r+0x2e>
 8005694:	230c      	movs	r3, #12
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	e0d1      	b.n	8005842 <_svfiprintf_r+0x1d2>
 800569e:	2340      	movs	r3, #64	; 0x40
 80056a0:	616b      	str	r3, [r5, #20]
 80056a2:	2300      	movs	r3, #0
 80056a4:	9309      	str	r3, [sp, #36]	; 0x24
 80056a6:	2320      	movs	r3, #32
 80056a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ac:	2330      	movs	r3, #48	; 0x30
 80056ae:	f04f 0901 	mov.w	r9, #1
 80056b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800585c <_svfiprintf_r+0x1ec>
 80056ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056be:	4623      	mov	r3, r4
 80056c0:	469a      	mov	sl, r3
 80056c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056c6:	b10a      	cbz	r2, 80056cc <_svfiprintf_r+0x5c>
 80056c8:	2a25      	cmp	r2, #37	; 0x25
 80056ca:	d1f9      	bne.n	80056c0 <_svfiprintf_r+0x50>
 80056cc:	ebba 0b04 	subs.w	fp, sl, r4
 80056d0:	d00b      	beq.n	80056ea <_svfiprintf_r+0x7a>
 80056d2:	465b      	mov	r3, fp
 80056d4:	4622      	mov	r2, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	4638      	mov	r0, r7
 80056da:	f7ff ff6d 	bl	80055b8 <__ssputs_r>
 80056de:	3001      	adds	r0, #1
 80056e0:	f000 80aa 	beq.w	8005838 <_svfiprintf_r+0x1c8>
 80056e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e6:	445a      	add	r2, fp
 80056e8:	9209      	str	r2, [sp, #36]	; 0x24
 80056ea:	f89a 3000 	ldrb.w	r3, [sl]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80a2 	beq.w	8005838 <_svfiprintf_r+0x1c8>
 80056f4:	2300      	movs	r3, #0
 80056f6:	f04f 32ff 	mov.w	r2, #4294967295
 80056fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056fe:	f10a 0a01 	add.w	sl, sl, #1
 8005702:	9304      	str	r3, [sp, #16]
 8005704:	9307      	str	r3, [sp, #28]
 8005706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800570a:	931a      	str	r3, [sp, #104]	; 0x68
 800570c:	4654      	mov	r4, sl
 800570e:	2205      	movs	r2, #5
 8005710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005714:	4851      	ldr	r0, [pc, #324]	; (800585c <_svfiprintf_r+0x1ec>)
 8005716:	f000 fa43 	bl	8005ba0 <memchr>
 800571a:	9a04      	ldr	r2, [sp, #16]
 800571c:	b9d8      	cbnz	r0, 8005756 <_svfiprintf_r+0xe6>
 800571e:	06d0      	lsls	r0, r2, #27
 8005720:	bf44      	itt	mi
 8005722:	2320      	movmi	r3, #32
 8005724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005728:	0711      	lsls	r1, r2, #28
 800572a:	bf44      	itt	mi
 800572c:	232b      	movmi	r3, #43	; 0x2b
 800572e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005732:	f89a 3000 	ldrb.w	r3, [sl]
 8005736:	2b2a      	cmp	r3, #42	; 0x2a
 8005738:	d015      	beq.n	8005766 <_svfiprintf_r+0xf6>
 800573a:	4654      	mov	r4, sl
 800573c:	2000      	movs	r0, #0
 800573e:	f04f 0c0a 	mov.w	ip, #10
 8005742:	9a07      	ldr	r2, [sp, #28]
 8005744:	4621      	mov	r1, r4
 8005746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800574a:	3b30      	subs	r3, #48	; 0x30
 800574c:	2b09      	cmp	r3, #9
 800574e:	d94e      	bls.n	80057ee <_svfiprintf_r+0x17e>
 8005750:	b1b0      	cbz	r0, 8005780 <_svfiprintf_r+0x110>
 8005752:	9207      	str	r2, [sp, #28]
 8005754:	e014      	b.n	8005780 <_svfiprintf_r+0x110>
 8005756:	eba0 0308 	sub.w	r3, r0, r8
 800575a:	fa09 f303 	lsl.w	r3, r9, r3
 800575e:	4313      	orrs	r3, r2
 8005760:	46a2      	mov	sl, r4
 8005762:	9304      	str	r3, [sp, #16]
 8005764:	e7d2      	b.n	800570c <_svfiprintf_r+0x9c>
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	1d19      	adds	r1, r3, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	9103      	str	r1, [sp, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	bfbb      	ittet	lt
 8005772:	425b      	neglt	r3, r3
 8005774:	f042 0202 	orrlt.w	r2, r2, #2
 8005778:	9307      	strge	r3, [sp, #28]
 800577a:	9307      	strlt	r3, [sp, #28]
 800577c:	bfb8      	it	lt
 800577e:	9204      	strlt	r2, [sp, #16]
 8005780:	7823      	ldrb	r3, [r4, #0]
 8005782:	2b2e      	cmp	r3, #46	; 0x2e
 8005784:	d10c      	bne.n	80057a0 <_svfiprintf_r+0x130>
 8005786:	7863      	ldrb	r3, [r4, #1]
 8005788:	2b2a      	cmp	r3, #42	; 0x2a
 800578a:	d135      	bne.n	80057f8 <_svfiprintf_r+0x188>
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	3402      	adds	r4, #2
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	9203      	str	r2, [sp, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	bfb8      	it	lt
 800579a:	f04f 33ff 	movlt.w	r3, #4294967295
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005860 <_svfiprintf_r+0x1f0>
 80057a4:	2203      	movs	r2, #3
 80057a6:	4650      	mov	r0, sl
 80057a8:	7821      	ldrb	r1, [r4, #0]
 80057aa:	f000 f9f9 	bl	8005ba0 <memchr>
 80057ae:	b140      	cbz	r0, 80057c2 <_svfiprintf_r+0x152>
 80057b0:	2340      	movs	r3, #64	; 0x40
 80057b2:	eba0 000a 	sub.w	r0, r0, sl
 80057b6:	fa03 f000 	lsl.w	r0, r3, r0
 80057ba:	9b04      	ldr	r3, [sp, #16]
 80057bc:	3401      	adds	r4, #1
 80057be:	4303      	orrs	r3, r0
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c6:	2206      	movs	r2, #6
 80057c8:	4826      	ldr	r0, [pc, #152]	; (8005864 <_svfiprintf_r+0x1f4>)
 80057ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ce:	f000 f9e7 	bl	8005ba0 <memchr>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d038      	beq.n	8005848 <_svfiprintf_r+0x1d8>
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <_svfiprintf_r+0x1f8>)
 80057d8:	bb1b      	cbnz	r3, 8005822 <_svfiprintf_r+0x1b2>
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	3307      	adds	r3, #7
 80057de:	f023 0307 	bic.w	r3, r3, #7
 80057e2:	3308      	adds	r3, #8
 80057e4:	9303      	str	r3, [sp, #12]
 80057e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e8:	4433      	add	r3, r6
 80057ea:	9309      	str	r3, [sp, #36]	; 0x24
 80057ec:	e767      	b.n	80056be <_svfiprintf_r+0x4e>
 80057ee:	460c      	mov	r4, r1
 80057f0:	2001      	movs	r0, #1
 80057f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f6:	e7a5      	b.n	8005744 <_svfiprintf_r+0xd4>
 80057f8:	2300      	movs	r3, #0
 80057fa:	f04f 0c0a 	mov.w	ip, #10
 80057fe:	4619      	mov	r1, r3
 8005800:	3401      	adds	r4, #1
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	4620      	mov	r0, r4
 8005806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800580a:	3a30      	subs	r2, #48	; 0x30
 800580c:	2a09      	cmp	r2, #9
 800580e:	d903      	bls.n	8005818 <_svfiprintf_r+0x1a8>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0c5      	beq.n	80057a0 <_svfiprintf_r+0x130>
 8005814:	9105      	str	r1, [sp, #20]
 8005816:	e7c3      	b.n	80057a0 <_svfiprintf_r+0x130>
 8005818:	4604      	mov	r4, r0
 800581a:	2301      	movs	r3, #1
 800581c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005820:	e7f0      	b.n	8005804 <_svfiprintf_r+0x194>
 8005822:	ab03      	add	r3, sp, #12
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	462a      	mov	r2, r5
 8005828:	4638      	mov	r0, r7
 800582a:	4b10      	ldr	r3, [pc, #64]	; (800586c <_svfiprintf_r+0x1fc>)
 800582c:	a904      	add	r1, sp, #16
 800582e:	f3af 8000 	nop.w
 8005832:	1c42      	adds	r2, r0, #1
 8005834:	4606      	mov	r6, r0
 8005836:	d1d6      	bne.n	80057e6 <_svfiprintf_r+0x176>
 8005838:	89ab      	ldrh	r3, [r5, #12]
 800583a:	065b      	lsls	r3, r3, #25
 800583c:	f53f af2c 	bmi.w	8005698 <_svfiprintf_r+0x28>
 8005840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005842:	b01d      	add	sp, #116	; 0x74
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005848:	ab03      	add	r3, sp, #12
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	462a      	mov	r2, r5
 800584e:	4638      	mov	r0, r7
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <_svfiprintf_r+0x1fc>)
 8005852:	a904      	add	r1, sp, #16
 8005854:	f000 f87c 	bl	8005950 <_printf_i>
 8005858:	e7eb      	b.n	8005832 <_svfiprintf_r+0x1c2>
 800585a:	bf00      	nop
 800585c:	08005d9e 	.word	0x08005d9e
 8005860:	08005da4 	.word	0x08005da4
 8005864:	08005da8 	.word	0x08005da8
 8005868:	00000000 	.word	0x00000000
 800586c:	080055b9 	.word	0x080055b9

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4616      	mov	r6, r2
 8005876:	4699      	mov	r9, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	4607      	mov	r7, r0
 800587e:	4293      	cmp	r3, r2
 8005880:	bfb8      	it	lt
 8005882:	4613      	movlt	r3, r2
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800588a:	460c      	mov	r4, r1
 800588c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005890:	b10a      	cbz	r2, 8005896 <_printf_common+0x26>
 8005892:	3301      	adds	r3, #1
 8005894:	6033      	str	r3, [r6, #0]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	0699      	lsls	r1, r3, #26
 800589a:	bf42      	ittt	mi
 800589c:	6833      	ldrmi	r3, [r6, #0]
 800589e:	3302      	addmi	r3, #2
 80058a0:	6033      	strmi	r3, [r6, #0]
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	f015 0506 	ands.w	r5, r5, #6
 80058a8:	d106      	bne.n	80058b8 <_printf_common+0x48>
 80058aa:	f104 0a19 	add.w	sl, r4, #25
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	6832      	ldr	r2, [r6, #0]
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dc28      	bgt.n	800590a <_printf_common+0x9a>
 80058b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058bc:	1e13      	subs	r3, r2, #0
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	bf18      	it	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	0692      	lsls	r2, r2, #26
 80058c6:	d42d      	bmi.n	8005924 <_printf_common+0xb4>
 80058c8:	4649      	mov	r1, r9
 80058ca:	4638      	mov	r0, r7
 80058cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d0:	47c0      	blx	r8
 80058d2:	3001      	adds	r0, #1
 80058d4:	d020      	beq.n	8005918 <_printf_common+0xa8>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	68e5      	ldr	r5, [r4, #12]
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	2b04      	cmp	r3, #4
 80058e0:	bf18      	it	ne
 80058e2:	2500      	movne	r5, #0
 80058e4:	6832      	ldr	r2, [r6, #0]
 80058e6:	f04f 0600 	mov.w	r6, #0
 80058ea:	68a3      	ldr	r3, [r4, #8]
 80058ec:	bf08      	it	eq
 80058ee:	1aad      	subeq	r5, r5, r2
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	bf08      	it	eq
 80058f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f8:	4293      	cmp	r3, r2
 80058fa:	bfc4      	itt	gt
 80058fc:	1a9b      	subgt	r3, r3, r2
 80058fe:	18ed      	addgt	r5, r5, r3
 8005900:	341a      	adds	r4, #26
 8005902:	42b5      	cmp	r5, r6
 8005904:	d11a      	bne.n	800593c <_printf_common+0xcc>
 8005906:	2000      	movs	r0, #0
 8005908:	e008      	b.n	800591c <_printf_common+0xac>
 800590a:	2301      	movs	r3, #1
 800590c:	4652      	mov	r2, sl
 800590e:	4649      	mov	r1, r9
 8005910:	4638      	mov	r0, r7
 8005912:	47c0      	blx	r8
 8005914:	3001      	adds	r0, #1
 8005916:	d103      	bne.n	8005920 <_printf_common+0xb0>
 8005918:	f04f 30ff 	mov.w	r0, #4294967295
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	3501      	adds	r5, #1
 8005922:	e7c4      	b.n	80058ae <_printf_common+0x3e>
 8005924:	2030      	movs	r0, #48	; 0x30
 8005926:	18e1      	adds	r1, r4, r3
 8005928:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005932:	4422      	add	r2, r4
 8005934:	3302      	adds	r3, #2
 8005936:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800593a:	e7c5      	b.n	80058c8 <_printf_common+0x58>
 800593c:	2301      	movs	r3, #1
 800593e:	4622      	mov	r2, r4
 8005940:	4649      	mov	r1, r9
 8005942:	4638      	mov	r0, r7
 8005944:	47c0      	blx	r8
 8005946:	3001      	adds	r0, #1
 8005948:	d0e6      	beq.n	8005918 <_printf_common+0xa8>
 800594a:	3601      	adds	r6, #1
 800594c:	e7d9      	b.n	8005902 <_printf_common+0x92>
	...

08005950 <_printf_i>:
 8005950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005954:	7e0f      	ldrb	r7, [r1, #24]
 8005956:	4691      	mov	r9, r2
 8005958:	2f78      	cmp	r7, #120	; 0x78
 800595a:	4680      	mov	r8, r0
 800595c:	460c      	mov	r4, r1
 800595e:	469a      	mov	sl, r3
 8005960:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005966:	d807      	bhi.n	8005978 <_printf_i+0x28>
 8005968:	2f62      	cmp	r7, #98	; 0x62
 800596a:	d80a      	bhi.n	8005982 <_printf_i+0x32>
 800596c:	2f00      	cmp	r7, #0
 800596e:	f000 80d9 	beq.w	8005b24 <_printf_i+0x1d4>
 8005972:	2f58      	cmp	r7, #88	; 0x58
 8005974:	f000 80a4 	beq.w	8005ac0 <_printf_i+0x170>
 8005978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800597c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005980:	e03a      	b.n	80059f8 <_printf_i+0xa8>
 8005982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005986:	2b15      	cmp	r3, #21
 8005988:	d8f6      	bhi.n	8005978 <_printf_i+0x28>
 800598a:	a101      	add	r1, pc, #4	; (adr r1, 8005990 <_printf_i+0x40>)
 800598c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059fd 	.word	0x080059fd
 8005998:	08005979 	.word	0x08005979
 800599c:	08005979 	.word	0x08005979
 80059a0:	08005979 	.word	0x08005979
 80059a4:	08005979 	.word	0x08005979
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	08005979 	.word	0x08005979
 80059b0:	08005979 	.word	0x08005979
 80059b4:	08005979 	.word	0x08005979
 80059b8:	08005979 	.word	0x08005979
 80059bc:	08005b0b 	.word	0x08005b0b
 80059c0:	08005a2d 	.word	0x08005a2d
 80059c4:	08005aed 	.word	0x08005aed
 80059c8:	08005979 	.word	0x08005979
 80059cc:	08005979 	.word	0x08005979
 80059d0:	08005b2d 	.word	0x08005b2d
 80059d4:	08005979 	.word	0x08005979
 80059d8:	08005a2d 	.word	0x08005a2d
 80059dc:	08005979 	.word	0x08005979
 80059e0:	08005979 	.word	0x08005979
 80059e4:	08005af5 	.word	0x08005af5
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	602a      	str	r2, [r5, #0]
 80059f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0a4      	b.n	8005b46 <_printf_i+0x1f6>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	6829      	ldr	r1, [r5, #0]
 8005a00:	0606      	lsls	r6, r0, #24
 8005a02:	f101 0304 	add.w	r3, r1, #4
 8005a06:	d50a      	bpl.n	8005a1e <_printf_i+0xce>
 8005a08:	680e      	ldr	r6, [r1, #0]
 8005a0a:	602b      	str	r3, [r5, #0]
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	da03      	bge.n	8005a18 <_printf_i+0xc8>
 8005a10:	232d      	movs	r3, #45	; 0x2d
 8005a12:	4276      	negs	r6, r6
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a18:	230a      	movs	r3, #10
 8005a1a:	485e      	ldr	r0, [pc, #376]	; (8005b94 <_printf_i+0x244>)
 8005a1c:	e019      	b.n	8005a52 <_printf_i+0x102>
 8005a1e:	680e      	ldr	r6, [r1, #0]
 8005a20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	bf18      	it	ne
 8005a28:	b236      	sxthne	r6, r6
 8005a2a:	e7ef      	b.n	8005a0c <_printf_i+0xbc>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	1d19      	adds	r1, r3, #4
 8005a32:	6029      	str	r1, [r5, #0]
 8005a34:	0601      	lsls	r1, r0, #24
 8005a36:	d501      	bpl.n	8005a3c <_printf_i+0xec>
 8005a38:	681e      	ldr	r6, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <_printf_i+0xf2>
 8005a3c:	0646      	lsls	r6, r0, #25
 8005a3e:	d5fb      	bpl.n	8005a38 <_printf_i+0xe8>
 8005a40:	881e      	ldrh	r6, [r3, #0]
 8005a42:	2f6f      	cmp	r7, #111	; 0x6f
 8005a44:	bf0c      	ite	eq
 8005a46:	2308      	moveq	r3, #8
 8005a48:	230a      	movne	r3, #10
 8005a4a:	4852      	ldr	r0, [pc, #328]	; (8005b94 <_printf_i+0x244>)
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a52:	6865      	ldr	r5, [r4, #4]
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	bfa8      	it	ge
 8005a58:	6821      	ldrge	r1, [r4, #0]
 8005a5a:	60a5      	str	r5, [r4, #8]
 8005a5c:	bfa4      	itt	ge
 8005a5e:	f021 0104 	bicge.w	r1, r1, #4
 8005a62:	6021      	strge	r1, [r4, #0]
 8005a64:	b90e      	cbnz	r6, 8005a6a <_printf_i+0x11a>
 8005a66:	2d00      	cmp	r5, #0
 8005a68:	d04d      	beq.n	8005b06 <_printf_i+0x1b6>
 8005a6a:	4615      	mov	r5, r2
 8005a6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a70:	fb03 6711 	mls	r7, r3, r1, r6
 8005a74:	5dc7      	ldrb	r7, [r0, r7]
 8005a76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a7a:	4637      	mov	r7, r6
 8005a7c:	42bb      	cmp	r3, r7
 8005a7e:	460e      	mov	r6, r1
 8005a80:	d9f4      	bls.n	8005a6c <_printf_i+0x11c>
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d10b      	bne.n	8005a9e <_printf_i+0x14e>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	07de      	lsls	r6, r3, #31
 8005a8a:	d508      	bpl.n	8005a9e <_printf_i+0x14e>
 8005a8c:	6923      	ldr	r3, [r4, #16]
 8005a8e:	6861      	ldr	r1, [r4, #4]
 8005a90:	4299      	cmp	r1, r3
 8005a92:	bfde      	ittt	le
 8005a94:	2330      	movle	r3, #48	; 0x30
 8005a96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a9e:	1b52      	subs	r2, r2, r5
 8005aa0:	6122      	str	r2, [r4, #16]
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f8cd a000 	str.w	sl, [sp]
 8005aac:	aa03      	add	r2, sp, #12
 8005aae:	f7ff fedf 	bl	8005870 <_printf_common>
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d14c      	bne.n	8005b50 <_printf_i+0x200>
 8005ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aba:	b004      	add	sp, #16
 8005abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac0:	4834      	ldr	r0, [pc, #208]	; (8005b94 <_printf_i+0x244>)
 8005ac2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ac6:	6829      	ldr	r1, [r5, #0]
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ace:	6029      	str	r1, [r5, #0]
 8005ad0:	061d      	lsls	r5, r3, #24
 8005ad2:	d514      	bpl.n	8005afe <_printf_i+0x1ae>
 8005ad4:	07df      	lsls	r7, r3, #31
 8005ad6:	bf44      	itt	mi
 8005ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8005adc:	6023      	strmi	r3, [r4, #0]
 8005ade:	b91e      	cbnz	r6, 8005ae8 <_printf_i+0x198>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	f023 0320 	bic.w	r3, r3, #32
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	2310      	movs	r3, #16
 8005aea:	e7af      	b.n	8005a4c <_printf_i+0xfc>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	f043 0320 	orr.w	r3, r3, #32
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	2378      	movs	r3, #120	; 0x78
 8005af6:	4828      	ldr	r0, [pc, #160]	; (8005b98 <_printf_i+0x248>)
 8005af8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afc:	e7e3      	b.n	8005ac6 <_printf_i+0x176>
 8005afe:	0659      	lsls	r1, r3, #25
 8005b00:	bf48      	it	mi
 8005b02:	b2b6      	uxthmi	r6, r6
 8005b04:	e7e6      	b.n	8005ad4 <_printf_i+0x184>
 8005b06:	4615      	mov	r5, r2
 8005b08:	e7bb      	b.n	8005a82 <_printf_i+0x132>
 8005b0a:	682b      	ldr	r3, [r5, #0]
 8005b0c:	6826      	ldr	r6, [r4, #0]
 8005b0e:	1d18      	adds	r0, r3, #4
 8005b10:	6961      	ldr	r1, [r4, #20]
 8005b12:	6028      	str	r0, [r5, #0]
 8005b14:	0635      	lsls	r5, r6, #24
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	d501      	bpl.n	8005b1e <_printf_i+0x1ce>
 8005b1a:	6019      	str	r1, [r3, #0]
 8005b1c:	e002      	b.n	8005b24 <_printf_i+0x1d4>
 8005b1e:	0670      	lsls	r0, r6, #25
 8005b20:	d5fb      	bpl.n	8005b1a <_printf_i+0x1ca>
 8005b22:	8019      	strh	r1, [r3, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	4615      	mov	r5, r2
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	e7ba      	b.n	8005aa2 <_printf_i+0x152>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	2100      	movs	r1, #0
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	602a      	str	r2, [r5, #0]
 8005b34:	681d      	ldr	r5, [r3, #0]
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 f831 	bl	8005ba0 <memchr>
 8005b3e:	b108      	cbz	r0, 8005b44 <_printf_i+0x1f4>
 8005b40:	1b40      	subs	r0, r0, r5
 8005b42:	6060      	str	r0, [r4, #4]
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	6123      	str	r3, [r4, #16]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4e:	e7a8      	b.n	8005aa2 <_printf_i+0x152>
 8005b50:	462a      	mov	r2, r5
 8005b52:	4649      	mov	r1, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	47d0      	blx	sl
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d0ab      	beq.n	8005ab6 <_printf_i+0x166>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	079b      	lsls	r3, r3, #30
 8005b62:	d413      	bmi.n	8005b8c <_printf_i+0x23c>
 8005b64:	68e0      	ldr	r0, [r4, #12]
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	4298      	cmp	r0, r3
 8005b6a:	bfb8      	it	lt
 8005b6c:	4618      	movlt	r0, r3
 8005b6e:	e7a4      	b.n	8005aba <_printf_i+0x16a>
 8005b70:	2301      	movs	r3, #1
 8005b72:	4632      	mov	r2, r6
 8005b74:	4649      	mov	r1, r9
 8005b76:	4640      	mov	r0, r8
 8005b78:	47d0      	blx	sl
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d09b      	beq.n	8005ab6 <_printf_i+0x166>
 8005b7e:	3501      	adds	r5, #1
 8005b80:	68e3      	ldr	r3, [r4, #12]
 8005b82:	9903      	ldr	r1, [sp, #12]
 8005b84:	1a5b      	subs	r3, r3, r1
 8005b86:	42ab      	cmp	r3, r5
 8005b88:	dcf2      	bgt.n	8005b70 <_printf_i+0x220>
 8005b8a:	e7eb      	b.n	8005b64 <_printf_i+0x214>
 8005b8c:	2500      	movs	r5, #0
 8005b8e:	f104 0619 	add.w	r6, r4, #25
 8005b92:	e7f5      	b.n	8005b80 <_printf_i+0x230>
 8005b94:	08005daf 	.word	0x08005daf
 8005b98:	08005dc0 	.word	0x08005dc0

08005b9c <__retarget_lock_acquire_recursive>:
 8005b9c:	4770      	bx	lr

08005b9e <__retarget_lock_release_recursive>:
 8005b9e:	4770      	bx	lr

08005ba0 <memchr>:
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	b2c9      	uxtb	r1, r1
 8005ba6:	4402      	add	r2, r0
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	d101      	bne.n	8005bb2 <memchr+0x12>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e003      	b.n	8005bba <memchr+0x1a>
 8005bb2:	7804      	ldrb	r4, [r0, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	428c      	cmp	r4, r1
 8005bb8:	d1f6      	bne.n	8005ba8 <memchr+0x8>
 8005bba:	bd10      	pop	{r4, pc}

08005bbc <memcpy>:
 8005bbc:	440a      	add	r2, r1
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc4:	d100      	bne.n	8005bc8 <memcpy+0xc>
 8005bc6:	4770      	bx	lr
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bce:	4291      	cmp	r1, r2
 8005bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd4:	d1f9      	bne.n	8005bca <memcpy+0xe>
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <memmove>:
 8005bd8:	4288      	cmp	r0, r1
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	eb01 0402 	add.w	r4, r1, r2
 8005be0:	d902      	bls.n	8005be8 <memmove+0x10>
 8005be2:	4284      	cmp	r4, r0
 8005be4:	4623      	mov	r3, r4
 8005be6:	d807      	bhi.n	8005bf8 <memmove+0x20>
 8005be8:	1e43      	subs	r3, r0, #1
 8005bea:	42a1      	cmp	r1, r4
 8005bec:	d008      	beq.n	8005c00 <memmove+0x28>
 8005bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bf6:	e7f8      	b.n	8005bea <memmove+0x12>
 8005bf8:	4601      	mov	r1, r0
 8005bfa:	4402      	add	r2, r0
 8005bfc:	428a      	cmp	r2, r1
 8005bfe:	d100      	bne.n	8005c02 <memmove+0x2a>
 8005c00:	bd10      	pop	{r4, pc}
 8005c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c0a:	e7f7      	b.n	8005bfc <memmove+0x24>

08005c0c <_realloc_r>:
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	4680      	mov	r8, r0
 8005c12:	4614      	mov	r4, r2
 8005c14:	460e      	mov	r6, r1
 8005c16:	b921      	cbnz	r1, 8005c22 <_realloc_r+0x16>
 8005c18:	4611      	mov	r1, r2
 8005c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	f7ff bbcb 	b.w	80053b8 <_malloc_r>
 8005c22:	b92a      	cbnz	r2, 8005c30 <_realloc_r+0x24>
 8005c24:	f7ff fb60 	bl	80052e8 <_free_r>
 8005c28:	4625      	mov	r5, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c30:	f000 f81b 	bl	8005c6a <_malloc_usable_size_r>
 8005c34:	4284      	cmp	r4, r0
 8005c36:	4607      	mov	r7, r0
 8005c38:	d802      	bhi.n	8005c40 <_realloc_r+0x34>
 8005c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c3e:	d812      	bhi.n	8005c66 <_realloc_r+0x5a>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4640      	mov	r0, r8
 8005c44:	f7ff fbb8 	bl	80053b8 <_malloc_r>
 8005c48:	4605      	mov	r5, r0
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d0ed      	beq.n	8005c2a <_realloc_r+0x1e>
 8005c4e:	42bc      	cmp	r4, r7
 8005c50:	4622      	mov	r2, r4
 8005c52:	4631      	mov	r1, r6
 8005c54:	bf28      	it	cs
 8005c56:	463a      	movcs	r2, r7
 8005c58:	f7ff ffb0 	bl	8005bbc <memcpy>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f7ff fb42 	bl	80052e8 <_free_r>
 8005c64:	e7e1      	b.n	8005c2a <_realloc_r+0x1e>
 8005c66:	4635      	mov	r5, r6
 8005c68:	e7df      	b.n	8005c2a <_realloc_r+0x1e>

08005c6a <_malloc_usable_size_r>:
 8005c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6e:	1f18      	subs	r0, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bfbc      	itt	lt
 8005c74:	580b      	ldrlt	r3, [r1, r0]
 8005c76:	18c0      	addlt	r0, r0, r3
 8005c78:	4770      	bx	lr
	...

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr

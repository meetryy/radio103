
raydio103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08008040  08008040  00018040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008804  08008804  0002063c  2**0
                  CONTENTS
  4 .ARM          00000000  08008804  08008804  0002063c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008804  08008804  0002063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000063c  20000000  0800880c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ac  2000063c  08008e48  0002063c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026e8  08008e48  000226e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d72c  00000000  00000000  00020665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e5  00000000  00000000  0003dd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00041e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00043458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b485  00000000  00000000  00044bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222af  00000000  00000000  0006004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975f4  00000000  00000000  000822fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001198f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fdc  00000000  00000000  001199b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00013315  00000000  00000000  0011e98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000063c 	.word	0x2000063c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008024 	.word	0x08008024

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000640 	.word	0x20000640
 800014c:	08008024 	.word	0x08008024

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a8c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	2400      	movs	r4, #0
 8000a90:	9404      	str	r4, [sp, #16]
 8000a92:	9405      	str	r4, [sp, #20]
 8000a94:	9406      	str	r4, [sp, #24]
 8000a96:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000a9a:	699a      	ldr	r2, [r3, #24]
 8000a9c:	f042 0210 	orr.w	r2, r2, #16
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	699a      	ldr	r2, [r3, #24]
 8000aa4:	f002 0210 	and.w	r2, r2, #16
 8000aa8:	9200      	str	r2, [sp, #0]
 8000aaa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	f042 0220 	orr.w	r2, r2, #32
 8000ab2:	619a      	str	r2, [r3, #24]
 8000ab4:	699a      	ldr	r2, [r3, #24]
 8000ab6:	f002 0220 	and.w	r2, r2, #32
 8000aba:	9201      	str	r2, [sp, #4]
 8000abc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	699a      	ldr	r2, [r3, #24]
 8000ac0:	f042 0204 	orr.w	r2, r2, #4
 8000ac4:	619a      	str	r2, [r3, #24]
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	f002 0204 	and.w	r2, r2, #4
 8000acc:	9202      	str	r2, [sp, #8]
 8000ace:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	f042 0208 	orr.w	r2, r2, #8
 8000ad6:	619a      	str	r2, [r3, #24]
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	9303      	str	r3, [sp, #12]
 8000ae0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000ae2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8000b84 <MX_GPIO_Init+0xfc>
 8000ae6:	4622      	mov	r2, r4
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	4648      	mov	r0, r9
 8000aee:	f001 fcd5 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN_LCD_CS_Pin|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000af2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000b88 <MX_GPIO_Init+0x100>
 8000af6:	4622      	mov	r2, r4
 8000af8:	f248 3101 	movw	r1, #33537	; 0x8301
 8000afc:	4640      	mov	r0, r8
 8000afe:	f001 fccd 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_CS_EXT_Pin|PIN_LCD_CS_2_Pin|PIN_LCD_DC_Pin, GPIO_PIN_RESET);
 8000b02:	4e22      	ldr	r6, [pc, #136]	; (8000b8c <MX_GPIO_Init+0x104>)
 8000b04:	4622      	mov	r2, r4
 8000b06:	f44f 4112 	mov.w	r1, #37376	; 0x9200
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	f001 fcc6 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b14:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2501      	movs	r5, #1
 8000b18:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2702      	movs	r7, #2
 8000b1e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000b20:	a904      	add	r1, sp, #16
 8000b22:	4648      	mov	r0, r9
 8000b24:	f001 fba8 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_LCD_CS_Pin PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = PIN_LCD_CS_Pin|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
 8000b28:	f248 3301 	movw	r3, #33537	; 0x8301
 8000b2c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	a904      	add	r1, sp, #16
 8000b36:	4640      	mov	r0, r8
 8000b38:	f001 fb9e 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_CS_EXT_Pin */
  GPIO_InitStruct.Pin = PIN_CS_EXT_Pin;
 8000b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b40:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(PIN_CS_EXT_GPIO_Port, &GPIO_InitStruct);
 8000b48:	a904      	add	r1, sp, #16
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	f001 fb94 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_LCD_CS_2_Pin */
  GPIO_InitStruct.Pin = PIN_LCD_CS_2_Pin;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2403      	movs	r4, #3
 8000b5c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PIN_LCD_CS_2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	a904      	add	r1, sp, #16
 8000b60:	4630      	mov	r0, r6
 8000b62:	f001 fb89 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_LCD_DC_Pin */
  GPIO_InitStruct.Pin = PIN_LCD_DC_Pin;
 8000b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b6e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PIN_LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000b72:	a904      	add	r1, sp, #16
 8000b74:	4630      	mov	r0, r6
 8000b76:	f001 fb7f 	bl	8002278 <HAL_GPIO_Init>

}
 8000b7a:	b009      	add	sp, #36	; 0x24
 8000b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40010800 	.word	0x40010800

08000b90 <MX_DMA_Init>:
{
 8000b90:	b500      	push	{lr}
 8000b92:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_DMA_Init+0x70>)
 8000b96:	695a      	ldr	r2, [r3, #20]
 8000b98:	f042 0201 	orr.w	r2, r2, #1
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4611      	mov	r1, r2
 8000bac:	200b      	movs	r0, #11
 8000bae:	f001 f973 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bb2:	200b      	movs	r0, #11
 8000bb4:	f001 f9a8 	bl	8001f08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4611      	mov	r1, r2
 8000bbc:	200c      	movs	r0, #12
 8000bbe:	f001 f96b 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f001 f9a0 	bl	8001f08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4611      	mov	r1, r2
 8000bcc:	200d      	movs	r0, #13
 8000bce:	f001 f963 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bd2:	200d      	movs	r0, #13
 8000bd4:	f001 f998 	bl	8001f08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4611      	mov	r1, r2
 8000bdc:	200e      	movs	r0, #14
 8000bde:	f001 f95b 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000be2:	200e      	movs	r0, #14
 8000be4:	f001 f990 	bl	8001f08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	4611      	mov	r1, r2
 8000bec:	2010      	movs	r0, #16
 8000bee:	f001 f953 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bf2:	2010      	movs	r0, #16
 8000bf4:	f001 f988 	bl	8001f08 <HAL_NVIC_EnableIRQ>
}
 8000bf8:	b003      	add	sp, #12
 8000bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000

08000c04 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <Error_Handler+0x2>

08000c08 <MX_ADC1_Init>:
{
 8000c08:	b500      	push	{lr}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9307      	str	r3, [sp, #28]
 8000c10:	9308      	str	r3, [sp, #32]
 8000c12:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	9304      	str	r3, [sp, #16]
 8000c1e:	9305      	str	r3, [sp, #20]
 8000c20:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 8000c22:	4835      	ldr	r0, [pc, #212]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <MX_ADC1_Init+0xf4>)
 8000c26:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2c:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c2e:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c30:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 8000c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c36:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c38:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c3e:	f000 ff01 	bl	8001a44 <HAL_ADC_Init>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	d149      	bne.n	8000cda <MX_ADC1_Init+0xd2>
  sConfig.Channel = ADC_CHANNEL_0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	a907      	add	r1, sp, #28
 8000c54:	4828      	ldr	r0, [pc, #160]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000c56:	f000 fd4b 	bl	80016f0 <HAL_ADC_ConfigChannel>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d13f      	bne.n	8000cde <MX_ADC1_Init+0xd6>
  sConfig.Channel = ADC_CHANNEL_1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c66:	a907      	add	r1, sp, #28
 8000c68:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000c6a:	f000 fd41 	bl	80016f0 <HAL_ADC_ConfigChannel>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d137      	bne.n	8000ce2 <MX_ADC1_Init+0xda>
  sConfig.Channel = ADC_CHANNEL_2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c76:	2303      	movs	r3, #3
 8000c78:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7a:	a907      	add	r1, sp, #28
 8000c7c:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000c7e:	f000 fd37 	bl	80016f0 <HAL_ADC_ConfigChannel>
 8000c82:	bb80      	cbnz	r0, 8000ce6 <MX_ADC1_Init+0xde>
  sConfig.Channel = ADC_CHANNEL_3;
 8000c84:	2303      	movs	r3, #3
 8000c86:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8c:	a907      	add	r1, sp, #28
 8000c8e:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000c90:	f000 fd2e 	bl	80016f0 <HAL_ADC_ConfigChannel>
 8000c94:	bb48      	cbnz	r0, 8000cea <MX_ADC1_Init+0xe2>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000c96:	2304      	movs	r3, #4
 8000c98:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	9202      	str	r2, [sp, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ca6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000caa:	9206      	str	r2, [sp, #24]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000cac:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000cb6:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000cb8:	4669      	mov	r1, sp
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000cbc:	f000 ffc6 	bl	8001c4c <HAL_ADCEx_InjectedConfigChannel>
 8000cc0:	b9a8      	cbnz	r0, 8000cee <MX_ADC1_Init+0xe6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000cca:	4669      	mov	r1, sp
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000cce:	f000 ffbd 	bl	8001c4c <HAL_ADCEx_InjectedConfigChannel>
 8000cd2:	b970      	cbnz	r0, 8000cf2 <MX_ADC1_Init+0xea>
}
 8000cd4:	b00b      	add	sp, #44	; 0x2c
 8000cd6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cda:	f7ff ff93 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000cde:	f7ff ff91 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000ce2:	f7ff ff8f 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000ce6:	f7ff ff8d 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000cea:	f7ff ff8b 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000cee:	f7ff ff89 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000cf2:	f7ff ff87 	bl	8000c04 <Error_Handler>
 8000cf6:	bf00      	nop
 8000cf8:	20000658 	.word	0x20000658
 8000cfc:	40012400 	.word	0x40012400

08000d00 <MX_TIM1_Init>:
{
 8000d00:	b510      	push	{r4, lr}
 8000d02:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d04:	2400      	movs	r4, #0
 8000d06:	9412      	str	r4, [sp, #72]	; 0x48
 8000d08:	9413      	str	r4, [sp, #76]	; 0x4c
 8000d0a:	9414      	str	r4, [sp, #80]	; 0x50
 8000d0c:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0e:	9410      	str	r4, [sp, #64]	; 0x40
 8000d10:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d12:	9409      	str	r4, [sp, #36]	; 0x24
 8000d14:	940a      	str	r4, [sp, #40]	; 0x28
 8000d16:	940b      	str	r4, [sp, #44]	; 0x2c
 8000d18:	940c      	str	r4, [sp, #48]	; 0x30
 8000d1a:	940d      	str	r4, [sp, #52]	; 0x34
 8000d1c:	940e      	str	r4, [sp, #56]	; 0x38
 8000d1e:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d20:	2220      	movs	r2, #32
 8000d22:	4621      	mov	r1, r4
 8000d24:	a801      	add	r0, sp, #4
 8000d26:	f004 fa33 	bl	8005190 <memset>
  htim1.Instance = TIM1;
 8000d2a:	483a      	ldr	r0, [pc, #232]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <MX_TIM1_Init+0x118>)
 8000d2e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 2-1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = ADC_TIM_PERIOD-1;
 8000d36:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000d3a:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3e:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d44:	f002 fce2 	bl	800370c <HAL_TIM_Base_Init>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d150      	bne.n	8000dee <MX_TIM1_Init+0xee>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d52:	a912      	add	r1, sp, #72	; 0x48
 8000d54:	482f      	ldr	r0, [pc, #188]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000d56:	f002 fdd7 	bl	8003908 <HAL_TIM_ConfigClockSource>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d149      	bne.n	8000df2 <MX_TIM1_Init+0xf2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d5e:	482d      	ldr	r0, [pc, #180]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000d60:	f002 fd00 	bl	8003764 <HAL_TIM_PWM_Init>
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d146      	bne.n	8000df6 <MX_TIM1_Init+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d70:	a910      	add	r1, sp, #64	; 0x40
 8000d72:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000d74:	f003 f840 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d13e      	bne.n	8000dfa <MX_TIM1_Init+0xfa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7c:	2360      	movs	r3, #96	; 0x60
 8000d7e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d80:	2200      	movs	r2, #0
 8000d82:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d84:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d86:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d88:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d8a:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d8c:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8e:	a909      	add	r1, sp, #36	; 0x24
 8000d90:	4820      	ldr	r0, [pc, #128]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000d92:	f002 fd45 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d131      	bne.n	8000dfe <MX_TIM1_Init+0xfe>
  sConfigOC.Pulse = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	a909      	add	r1, sp, #36	; 0x24
 8000da2:	481c      	ldr	r0, [pc, #112]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000da4:	f002 fd3c 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	bb58      	cbnz	r0, 8000e02 <MX_TIM1_Init+0x102>
  sConfigOC.Pulse = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dae:	2208      	movs	r2, #8
 8000db0:	a909      	add	r1, sp, #36	; 0x24
 8000db2:	4818      	ldr	r0, [pc, #96]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000db4:	f002 fd34 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000db8:	bb28      	cbnz	r0, 8000e06 <MX_TIM1_Init+0x106>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	a909      	add	r1, sp, #36	; 0x24
 8000dbe:	4815      	ldr	r0, [pc, #84]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000dc0:	f002 fd2e 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	bb08      	cbnz	r0, 8000e0a <MX_TIM1_Init+0x10a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dca:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dcc:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dce:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dd0:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd6:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd8:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dda:	a901      	add	r1, sp, #4
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000dde:	f003 f841 	bl	8003e64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de2:	b9a0      	cbnz	r0, 8000e0e <MX_TIM1_Init+0x10e>
  HAL_TIM_MspPostInit(&htim1);
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <MX_TIM1_Init+0x114>)
 8000de6:	f000 fab3 	bl	8001350 <HAL_TIM_MspPostInit>
}
 8000dea:	b016      	add	sp, #88	; 0x58
 8000dec:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000dee:	f7ff ff09 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000df2:	f7ff ff07 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000df6:	f7ff ff05 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000dfa:	f7ff ff03 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000dfe:	f7ff ff01 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000e02:	f7ff feff 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000e06:	f7ff fefd 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000e0a:	f7ff fefb 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000e0e:	f7ff fef9 	bl	8000c04 <Error_Handler>
 8000e12:	bf00      	nop
 8000e14:	20000888 	.word	0x20000888
 8000e18:	40012c00 	.word	0x40012c00

08000e1c <MX_SPI1_Init>:
{
 8000e1c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_SPI1_Init+0x38>)
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <MX_SPI1_Init+0x3c>)
 8000e22:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e24:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e28:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e30:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e32:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e3a:	2218      	movs	r2, #24
 8000e3c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e40:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e42:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e44:	230a      	movs	r3, #10
 8000e46:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e48:	f002 f8c6 	bl	8002fd8 <HAL_SPI_Init>
 8000e4c:	b900      	cbnz	r0, 8000e50 <MX_SPI1_Init+0x34>
}
 8000e4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e50:	f7ff fed8 	bl	8000c04 <Error_Handler>
 8000e54:	20000830 	.word	0x20000830
 8000e58:	40013000 	.word	0x40013000

08000e5c <MX_USART1_UART_Init>:
{
 8000e5c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <MX_USART1_UART_Init+0x2c>)
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_USART1_UART_Init+0x30>)
 8000e62:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000e64:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e68:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e6e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e70:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e72:	220c      	movs	r2, #12
 8000e74:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7a:	f003 f8e5 	bl	8004048 <HAL_UART_Init>
 8000e7e:	b900      	cbnz	r0, 8000e82 <MX_USART1_UART_Init+0x26>
}
 8000e80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e82:	f7ff febf 	bl	8000c04 <Error_Handler>
 8000e86:	bf00      	nop
 8000e88:	20000918 	.word	0x20000918
 8000e8c:	40013800 	.word	0x40013800

08000e90 <MX_TIM2_Init>:
{
 8000e90:	b500      	push	{lr}
 8000e92:	b093      	sub	sp, #76	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e94:	2300      	movs	r3, #0
 8000e96:	930e      	str	r3, [sp, #56]	; 0x38
 8000e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e9a:	9310      	str	r3, [sp, #64]	; 0x40
 8000e9c:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8000ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8000ea6:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	9307      	str	r3, [sp, #28]
 8000eaa:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	9303      	str	r3, [sp, #12]
 8000eb4:	9304      	str	r3, [sp, #16]
 8000eb6:	9305      	str	r3, [sp, #20]
 8000eb8:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8000eba:	4824      	ldr	r0, [pc, #144]	; (8000f4c <MX_TIM2_Init+0xbc>)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 2-1;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = ADC_TIM_PERIOD-1;
 8000ec8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000ecc:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed2:	f002 fc1b 	bl	800370c <HAL_TIM_Base_Init>
 8000ed6:	bb68      	cbnz	r0, 8000f34 <MX_TIM2_Init+0xa4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ede:	a90e      	add	r1, sp, #56	; 0x38
 8000ee0:	481a      	ldr	r0, [pc, #104]	; (8000f4c <MX_TIM2_Init+0xbc>)
 8000ee2:	f002 fd11 	bl	8003908 <HAL_TIM_ConfigClockSource>
 8000ee6:	bb38      	cbnz	r0, 8000f38 <MX_TIM2_Init+0xa8>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ee8:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_TIM2_Init+0xbc>)
 8000eea:	f002 fc3b 	bl	8003764 <HAL_TIM_PWM_Init>
 8000eee:	bb28      	cbnz	r0, 8000f3c <MX_TIM2_Init+0xac>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000ef8:	a909      	add	r1, sp, #36	; 0x24
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_TIM2_Init+0xbc>)
 8000efc:	f002 fdb8 	bl	8003a70 <HAL_TIM_SlaveConfigSynchro>
 8000f00:	b9f0      	cbnz	r0, 8000f40 <MX_TIM2_Init+0xb0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000f02:	2310      	movs	r3, #16
 8000f04:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0a:	a907      	add	r1, sp, #28
 8000f0c:	480f      	ldr	r0, [pc, #60]	; (8000f4c <MX_TIM2_Init+0xbc>)
 8000f0e:	f002 ff73 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	b9b8      	cbnz	r0, 8000f44 <MX_TIM2_Init+0xb4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f14:	2360      	movs	r3, #96	; 0x60
 8000f16:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f22:	2204      	movs	r2, #4
 8000f24:	4669      	mov	r1, sp
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <MX_TIM2_Init+0xbc>)
 8000f28:	f002 fc7a 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	b960      	cbnz	r0, 8000f48 <MX_TIM2_Init+0xb8>
}
 8000f2e:	b013      	add	sp, #76	; 0x4c
 8000f30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f34:	f7ff fe66 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000f38:	f7ff fe64 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000f3c:	f7ff fe62 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000f40:	f7ff fe60 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000f44:	f7ff fe5e 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8000f48:	f7ff fe5c 	bl	8000c04 <Error_Handler>
 8000f4c:	200008d0 	.word	0x200008d0

08000f50 <MX_I2C2_Init>:
{
 8000f50:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <MX_I2C2_Init+0x2c>)
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <MX_I2C2_Init+0x30>)
 8000f56:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_I2C2_Init+0x34>)
 8000f5a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f60:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f66:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f6a:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6c:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f70:	f001 fa9a 	bl	80024a8 <HAL_I2C_Init>
 8000f74:	b900      	cbnz	r0, 8000f78 <MX_I2C2_Init+0x28>
}
 8000f76:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f78:	f7ff fe44 	bl	8000c04 <Error_Handler>
 8000f7c:	200007dc 	.word	0x200007dc
 8000f80:	40005800 	.word	0x40005800
 8000f84:	000186a0 	.word	0x000186a0

08000f88 <SystemClock_Config>:
{
 8000f88:	b500      	push	{lr}
 8000f8a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8c:	2228      	movs	r2, #40	; 0x28
 8000f8e:	2100      	movs	r1, #0
 8000f90:	eb0d 0002 	add.w	r0, sp, r2
 8000f94:	f004 f8fc 	bl	8005190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9305      	str	r3, [sp, #20]
 8000f9c:	9306      	str	r3, [sp, #24]
 8000f9e:	9307      	str	r3, [sp, #28]
 8000fa0:	9308      	str	r3, [sp, #32]
 8000fa2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	9303      	str	r3, [sp, #12]
 8000faa:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2201      	movs	r2, #1
 8000fae:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2202      	movs	r2, #2
 8000fba:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fbe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fc2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	a80a      	add	r0, sp, #40	; 0x28
 8000fc6:	f001 fb63 	bl	8002690 <HAL_RCC_OscConfig>
 8000fca:	b9b8      	cbnz	r0, 8000ffc <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fdc:	a805      	add	r0, sp, #20
 8000fde:	f001 fd97 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000fe2:	b968      	cbnz	r0, 8001000 <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fec:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fee:	a801      	add	r0, sp, #4
 8000ff0:	f001 fe6a 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	b930      	cbnz	r0, 8001004 <SystemClock_Config+0x7c>
}
 8000ff6:	b015      	add	sp, #84	; 0x54
 8000ff8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ffc:	f7ff fe02 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8001000:	f7ff fe00 	bl	8000c04 <Error_Handler>
    Error_Handler();
 8001004:	f7ff fdfe 	bl	8000c04 <Error_Handler>

08001008 <main>:
{
 8001008:	b508      	push	{r3, lr}
  HAL_Init();
 800100a:	f000 fafd 	bl	8001608 <HAL_Init>
  SystemClock_Config();
 800100e:	f7ff ffbb 	bl	8000f88 <SystemClock_Config>
  MX_GPIO_Init();
 8001012:	f7ff fd39 	bl	8000a88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001016:	f7ff fdbb 	bl	8000b90 <MX_DMA_Init>
  MX_ADC1_Init();
 800101a:	f7ff fdf5 	bl	8000c08 <MX_ADC1_Init>
  MX_TIM1_Init();
 800101e:	f7ff fe6f 	bl	8000d00 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001022:	f7ff fefb 	bl	8000e1c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001026:	f7ff ff19 	bl	8000e5c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800102a:	f7ff ff31 	bl	8000e90 <MX_TIM2_Init>
  MX_I2C2_Init();
 800102e:	f7ff ff8f 	bl	8000f50 <MX_I2C2_Init>
  schedInit();
 8001032:	f003 ff59 	bl	8004ee8 <schedInit>
	  schedMainLoop();
 8001036:	f003 ffbb 	bl	8004fb0 <schedMainLoop>
  while (1)
 800103a:	e7fc      	b.n	8001036 <main+0x2e>

0800103c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_MspInit+0x3c>)
 8001040:	699a      	ldr	r2, [r3, #24]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	699a      	ldr	r2, [r3, #24]
 800104a:	f002 0201 	and.w	r2, r2, #1
 800104e:	9200      	str	r2, [sp, #0]
 8001050:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	69da      	ldr	r2, [r3, #28]
 8001054:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001058:	61da      	str	r2, [r3, #28]
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_MspInit+0x40>)
 8001066:	6853      	ldr	r3, [r2, #4]
 8001068:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001070:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	b002      	add	sp, #8
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000

08001080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001080:	b510      	push	{r4, lr}
 8001082:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	2300      	movs	r3, #0
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	9303      	str	r3, [sp, #12]
 800108a:	9304      	str	r3, [sp, #16]
 800108c:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 800108e:	6802      	ldr	r2, [r0, #0]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_ADC_MspInit+0x90>)
 8001092:	429a      	cmp	r2, r3
 8001094:	d001      	beq.n	800109a <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001096:	b006      	add	sp, #24
 8001098:	bd10      	pop	{r4, pc}
 800109a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80010ae:	9200      	str	r2, [sp, #0]
 80010b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	f042 0204 	orr.w	r2, r2, #4
 80010b8:	619a      	str	r2, [r3, #24]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_RX_I_Pin|ADC_RX_Q_Pin|GPIO_PIN_2|GPIO_PIN_3
 80010c4:	233f      	movs	r3, #63	; 0x3f
 80010c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c8:	2303      	movs	r3, #3
 80010ca:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	a902      	add	r1, sp, #8
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <HAL_ADC_MspInit+0x94>)
 80010d0:	f001 f8d2 	bl	8002278 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <HAL_ADC_MspInit+0x98>)
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_ADC_MspInit+0x9c>)
 80010d8:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010da:	2300      	movs	r3, #0
 80010dc:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010de:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e8:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010f0:	2320      	movs	r3, #32
 80010f2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010f8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010fa:	f000 ff3d 	bl	8001f78 <HAL_DMA_Init>
 80010fe:	b918      	cbnz	r0, 8001108 <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_ADC_MspInit+0x98>)
 8001102:	6223      	str	r3, [r4, #32]
 8001104:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001106:	e7c6      	b.n	8001096 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8001108:	f7ff fd7c 	bl	8000c04 <Error_Handler>
 800110c:	e7f8      	b.n	8001100 <HAL_ADC_MspInit+0x80>
 800110e:	bf00      	nop
 8001110:	40012400 	.word	0x40012400
 8001114:	40010800 	.word	0x40010800
 8001118:	20000688 	.word	0x20000688
 800111c:	40020008 	.word	0x40020008

08001120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001120:	b510      	push	{r4, lr}
 8001122:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	2300      	movs	r3, #0
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	9303      	str	r3, [sp, #12]
 800112a:	9304      	str	r3, [sp, #16]
 800112c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C2)
 800112e:	6802      	ldr	r2, [r0, #0]
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_I2C_MspInit+0x58>)
 8001132:	429a      	cmp	r2, r3
 8001134:	d001      	beq.n	800113a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001136:	b006      	add	sp, #24
 8001138:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4c10      	ldr	r4, [pc, #64]	; (800117c <HAL_I2C_MspInit+0x5c>)
 800113c:	69a3      	ldr	r3, [r4, #24]
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	61a3      	str	r3, [r4, #24]
 8001144:	69a3      	ldr	r3, [r4, #24]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800114e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001152:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001154:	2312      	movs	r3, #18
 8001156:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	a902      	add	r1, sp, #8
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x60>)
 8001160:	f001 f88a 	bl	8002278 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001164:	69e3      	ldr	r3, [r4, #28]
 8001166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116a:	61e3      	str	r3, [r4, #28]
 800116c:	69e3      	ldr	r3, [r4, #28]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	9b01      	ldr	r3, [sp, #4]
}
 8001176:	e7de      	b.n	8001136 <HAL_I2C_MspInit+0x16>
 8001178:	40005800 	.word	0x40005800
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	2300      	movs	r3, #0
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	9303      	str	r3, [sp, #12]
 800118e:	9304      	str	r3, [sp, #16]
 8001190:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8001192:	6802      	ldr	r2, [r0, #0]
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_SPI_MspInit+0xa8>)
 8001196:	429a      	cmp	r2, r3
 8001198:	d001      	beq.n	800119e <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800119a:	b007      	add	sp, #28
 800119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119e:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	f042 0208 	orr.w	r2, r2, #8
 80011bc:	619a      	str	r2, [r3, #24]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80011c8:	2328      	movs	r3, #40	; 0x28
 80011ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	4f16      	ldr	r7, [pc, #88]	; (8001230 <HAL_SPI_MspInit+0xac>)
 80011d6:	a902      	add	r1, sp, #8
 80011d8:	4638      	mov	r0, r7
 80011da:	f001 f84d 	bl	8002278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011de:	2610      	movs	r6, #16
 80011e0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2500      	movs	r5, #0
 80011e4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	a902      	add	r1, sp, #8
 80011ea:	4638      	mov	r0, r7
 80011ec:	f001 f844 	bl	8002278 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80011f0:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_SPI_MspInit+0xb0>)
 80011f2:	6853      	ldr	r3, [r2, #4]
 80011f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <HAL_SPI_MspInit+0xb4>)
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_SPI_MspInit+0xb8>)
 8001202:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001204:	6046      	str	r6, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	6085      	str	r5, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120c:	6105      	str	r5, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800120e:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001210:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001216:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001218:	f000 feae 	bl	8001f78 <HAL_DMA_Init>
 800121c:	b918      	cbnz	r0, 8001226 <HAL_SPI_MspInit+0xa2>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_SPI_MspInit+0xb4>)
 8001220:	64a3      	str	r3, [r4, #72]	; 0x48
 8001222:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001224:	e7b9      	b.n	800119a <HAL_SPI_MspInit+0x16>
      Error_Handler();
 8001226:	f7ff fced 	bl	8000c04 <Error_Handler>
 800122a:	e7f8      	b.n	800121e <HAL_SPI_MspInit+0x9a>
 800122c:	40013000 	.word	0x40013000
 8001230:	40010c00 	.word	0x40010c00
 8001234:	40010000 	.word	0x40010000
 8001238:	200006cc 	.word	0x200006cc
 800123c:	40020030 	.word	0x40020030

08001240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001240:	b510      	push	{r4, lr}
 8001242:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001244:	6803      	ldr	r3, [r0, #0]
 8001246:	4a3a      	ldr	r2, [pc, #232]	; (8001330 <HAL_TIM_Base_MspInit+0xf0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d004      	beq.n	8001256 <HAL_TIM_Base_MspInit+0x16>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800124c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001250:	d061      	beq.n	8001316 <HAL_TIM_Base_MspInit+0xd6>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001252:	b002      	add	sp, #8
 8001254:	bd10      	pop	{r4, pc}
 8001256:	4604      	mov	r4, r0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <HAL_TIM_Base_MspInit+0xf4>)
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 800126c:	4832      	ldr	r0, [pc, #200]	; (8001338 <HAL_TIM_Base_MspInit+0xf8>)
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_TIM_Base_MspInit+0xfc>)
 8001270:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001272:	2310      	movs	r3, #16
 8001274:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	6103      	str	r3, [r0, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	6143      	str	r3, [r0, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 800128a:	2320      	movs	r3, #32
 800128c:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800128e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001292:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001294:	f000 fe70 	bl	8001f78 <HAL_DMA_Init>
 8001298:	2800      	cmp	r0, #0
 800129a:	d133      	bne.n	8001304 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_TIM_Base_MspInit+0xf8>)
 800129e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012a0:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 80012a2:	4827      	ldr	r0, [pc, #156]	; (8001340 <HAL_TIM_Base_MspInit+0x100>)
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_TIM_Base_MspInit+0x104>)
 80012a6:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a8:	2310      	movs	r3, #16
 80012aa:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	60c2      	str	r2, [r0, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b8:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012be:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80012c0:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80012c4:	f000 fe58 	bl	8001f78 <HAL_DMA_Init>
 80012c8:	b9f8      	cbnz	r0, 800130a <HAL_TIM_Base_MspInit+0xca>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_TIM_Base_MspInit+0x100>)
 80012cc:	6323      	str	r3, [r4, #48]	; 0x30
 80012ce:	625c      	str	r4, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80012d0:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80012d2:	6363      	str	r3, [r4, #52]	; 0x34
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80012d4:	481c      	ldr	r0, [pc, #112]	; (8001348 <HAL_TIM_Base_MspInit+0x108>)
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_TIM_Base_MspInit+0x10c>)
 80012d8:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012da:	2310      	movs	r3, #16
 80012dc:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	60c2      	str	r2, [r0, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f0:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80012f2:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012f4:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80012f6:	f000 fe3f 	bl	8001f78 <HAL_DMA_Init>
 80012fa:	b948      	cbnz	r0, 8001310 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_TIM_Base_MspInit+0x108>)
 80012fe:	6263      	str	r3, [r4, #36]	; 0x24
 8001300:	625c      	str	r4, [r3, #36]	; 0x24
 8001302:	e7a6      	b.n	8001252 <HAL_TIM_Base_MspInit+0x12>
      Error_Handler();
 8001304:	f7ff fc7e 	bl	8000c04 <Error_Handler>
 8001308:	e7c8      	b.n	800129c <HAL_TIM_Base_MspInit+0x5c>
      Error_Handler();
 800130a:	f7ff fc7b 	bl	8000c04 <Error_Handler>
 800130e:	e7dc      	b.n	80012ca <HAL_TIM_Base_MspInit+0x8a>
      Error_Handler();
 8001310:	f7ff fc78 	bl	8000c04 <Error_Handler>
 8001314:	e7f2      	b.n	80012fc <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001316:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	61da      	str	r2, [r3, #28]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	9b01      	ldr	r3, [sp, #4]
}
 800132c:	e791      	b.n	8001252 <HAL_TIM_Base_MspInit+0x12>
 800132e:	bf00      	nop
 8001330:	40012c00 	.word	0x40012c00
 8001334:	40021000 	.word	0x40021000
 8001338:	20000754 	.word	0x20000754
 800133c:	4002006c 	.word	0x4002006c
 8001340:	20000798 	.word	0x20000798
 8001344:	40020044 	.word	0x40020044
 8001348:	20000710 	.word	0x20000710
 800134c:	4002001c 	.word	0x4002001c

08001350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001350:	b500      	push	{lr}
 8001352:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	2300      	movs	r3, #0
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	9303      	str	r3, [sp, #12]
 800135a:	9304      	str	r3, [sp, #16]
 800135c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800135e:	6802      	ldr	r2, [r0, #0]
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_TIM_MspPostInit+0x48>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d002      	beq.n	800136c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001366:	b007      	add	sp, #28
 8001368:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	f042 0204 	orr.w	r2, r2, #4
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TX_Q_PWM_Pin|AUDIO_PWM_Pin|TX_Q_PWMA11_Pin;
 8001382:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001386:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	a902      	add	r1, sp, #8
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <HAL_TIM_MspPostInit+0x4c>)
 8001392:	f000 ff71 	bl	8002278 <HAL_GPIO_Init>
}
 8001396:	e7e6      	b.n	8001366 <HAL_TIM_MspPostInit+0x16>
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40010800 	.word	0x40010800

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b530      	push	{r4, r5, lr}
 80013a2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	2300      	movs	r3, #0
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	9303      	str	r3, [sp, #12]
 80013aa:	9304      	str	r3, [sp, #16]
 80013ac:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 80013ae:	6802      	ldr	r2, [r0, #0]
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_UART_MspInit+0x8c>)
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013b6:	b007      	add	sp, #28
 80013b8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ba:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013c4:	619a      	str	r2, [r3, #24]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	4d10      	ldr	r5, [pc, #64]	; (8001430 <HAL_UART_MspInit+0x90>)
 80013f0:	a902      	add	r1, sp, #8
 80013f2:	4628      	mov	r0, r5
 80013f4:	f000 ff40 	bl	8002278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2400      	movs	r4, #0
 80013fe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	a902      	add	r1, sp, #8
 8001404:	4628      	mov	r0, r5
 8001406:	f000 ff37 	bl	8002278 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_UART_MspInit+0x94>)
 800140c:	6853      	ldr	r3, [r2, #4]
 800140e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001418:	4622      	mov	r2, r4
 800141a:	4621      	mov	r1, r4
 800141c:	2025      	movs	r0, #37	; 0x25
 800141e:	f000 fd3b 	bl	8001e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001422:	2025      	movs	r0, #37	; 0x25
 8001424:	f000 fd70 	bl	8001f08 <HAL_NVIC_EnableIRQ>
}
 8001428:	e7c5      	b.n	80013b6 <HAL_UART_MspInit+0x16>
 800142a:	bf00      	nop
 800142c:	40013800 	.word	0x40013800
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40010000 	.word	0x40010000

08001438 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler>

0800143a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler>

0800143c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler>

0800143e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler>

08001440 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler>

08001442 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 f8ef 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144e:	bd08      	pop	{r3, pc}

08001450 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001450:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA1_Channel1_IRQHandler+0xc>)
 8001454:	f000 fe6e 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001458:	bd08      	pop	{r3, pc}
 800145a:	bf00      	nop
 800145c:	20000688 	.word	0x20000688

08001460 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001462:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA1_Channel2_IRQHandler+0xc>)
 8001464:	f000 fe66 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001468:	bd08      	pop	{r3, pc}
 800146a:	bf00      	nop
 800146c:	20000710 	.word	0x20000710

08001470 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001470:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001472:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Channel3_IRQHandler+0xc>)
 8001474:	f000 fe5e 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001478:	bd08      	pop	{r3, pc}
 800147a:	bf00      	nop
 800147c:	200006cc 	.word	0x200006cc

08001480 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001480:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA1_Channel4_IRQHandler+0xc>)
 8001484:	f000 fe56 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001488:	bd08      	pop	{r3, pc}
 800148a:	bf00      	nop
 800148c:	20000798 	.word	0x20000798

08001490 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001490:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001492:	4802      	ldr	r0, [pc, #8]	; (800149c <DMA1_Channel6_IRQHandler+0xc>)
 8001494:	f000 fe4e 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001498:	bd08      	pop	{r3, pc}
 800149a:	bf00      	nop
 800149c:	20000754 	.word	0x20000754

080014a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014a2:	4802      	ldr	r0, [pc, #8]	; (80014ac <USART1_IRQHandler+0xc>)
 80014a4:	f002 feee 	bl	8004284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014a8:	bd08      	pop	{r3, pc}
 80014aa:	bf00      	nop
 80014ac:	20000918 	.word	0x20000918

080014b0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014b0:	2001      	movs	r0, #1
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014b6:	f003 fe39 	bl	800512c <__errno>
 80014ba:	2316      	movs	r3, #22
 80014bc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014be:	f04f 30ff 	mov.w	r0, #4294967295
 80014c2:	bd08      	pop	{r3, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80014c6:	f04f 31ff 	mov.w	r1, #4294967295
 80014ca:	f7ff fff3 	bl	80014b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ce:	e7fe      	b.n	80014ce <_exit+0xa>

080014d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	460c      	mov	r4, r1
 80014d4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2500      	movs	r5, #0
 80014d8:	e006      	b.n	80014e8 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80014da:	f3af 8000 	nop.w
 80014de:	4621      	mov	r1, r4
 80014e0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80014e6:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	42b5      	cmp	r5, r6
 80014ea:	dbf6      	blt.n	80014da <_read+0xa>
	}

return len;
}
 80014ec:	4630      	mov	r0, r6
 80014ee:	bd70      	pop	{r4, r5, r6, pc}

080014f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	460c      	mov	r4, r1
 80014f4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2500      	movs	r5, #0
 80014f8:	e004      	b.n	8001504 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80014fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80014fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	3501      	adds	r5, #1
 8001504:	42b5      	cmp	r5, r6
 8001506:	dbf8      	blt.n	80014fa <_write+0xa>
	}
	return len;
}
 8001508:	4630      	mov	r0, r6
 800150a:	bd70      	pop	{r4, r5, r6, pc}

0800150c <_close>:

int _close(int file)
{
	return -1;
}
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	4770      	bx	lr

08001512 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001516:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001518:	2000      	movs	r0, #0
 800151a:	4770      	bx	lr

0800151c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800151c:	2001      	movs	r0, #1
 800151e:	4770      	bx	lr

08001520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001520:	2000      	movs	r0, #0
 8001522:	4770      	bx	lr

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b510      	push	{r4, lr}
 8001526:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <_sbrk+0x38>)
 800152a:	490d      	ldr	r1, [pc, #52]	; (8001560 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <_sbrk+0x40>)
 800152e:	6800      	ldr	r0, [r0, #0]
 8001530:	b140      	cbz	r0, 8001544 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	480c      	ldr	r0, [pc, #48]	; (8001564 <_sbrk+0x40>)
 8001534:	6800      	ldr	r0, [r0, #0]
 8001536:	4403      	add	r3, r0
 8001538:	1a52      	subs	r2, r2, r1
 800153a:	4293      	cmp	r3, r2
 800153c:	d806      	bhi.n	800154c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <_sbrk+0x40>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001542:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <_sbrk+0x40>)
 8001546:	4c08      	ldr	r4, [pc, #32]	; (8001568 <_sbrk+0x44>)
 8001548:	6004      	str	r4, [r0, #0]
 800154a:	e7f2      	b.n	8001532 <_sbrk+0xe>
    errno = ENOMEM;
 800154c:	f003 fdee 	bl	800512c <__errno>
 8001550:	230c      	movs	r3, #12
 8001552:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	e7f3      	b.n	8001542 <_sbrk+0x1e>
 800155a:	bf00      	nop
 800155c:	20005000 	.word	0x20005000
 8001560:	00000200 	.word	0x00000200
 8001564:	2000095c 	.word	0x2000095c
 8001568:	200026e8 	.word	0x200026e8

0800156c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	4770      	bx	lr
	...

08001570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
     ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	; (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001596:	f7ff ffe9 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f003 fdcd 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159e:	f7ff fd33 	bl	8001008 <main>
  bx lr
 80015a2:	4770      	bx	lr
     ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	2000063c 	.word	0x2000063c
  ldr r2, =_sidata
 80015ac:	0800880c 	.word	0x0800880c
  ldr r2, =_sbss
 80015b0:	2000063c 	.word	0x2000063c
  ldr r4, =_ebss
 80015b4:	200026e8 	.word	0x200026e8

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_InitTick+0x40>)
 80015c2:	7818      	ldrb	r0, [r3, #0]
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_InitTick+0x44>)
 80015ce:	6810      	ldr	r0, [r2, #0]
 80015d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80015d4:	f000 fca6 	bl	8001f24 <HAL_SYSTICK_Config>
 80015d8:	b968      	cbnz	r0, 80015f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	2c0f      	cmp	r4, #15
 80015dc:	d901      	bls.n	80015e2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80015de:	2001      	movs	r0, #1
 80015e0:	e00a      	b.n	80015f8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e2:	2200      	movs	r2, #0
 80015e4:	4621      	mov	r1, r4
 80015e6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ea:	f000 fc55 	bl	8001e98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_InitTick+0x48>)
 80015f0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2000      	movs	r0, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
}
 80015f8:	bd10      	pop	{r4, pc}
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004
 8001600:	20000000 	.word	0x20000000
 8001604:	20000008 	.word	0x20000008

08001608 <HAL_Init>:
{
 8001608:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160a:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_Init+0x20>)
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fc2d 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	200f      	movs	r0, #15
 800161c:	f7ff ffce 	bl	80015bc <HAL_InitTick>
  HAL_MspInit();
 8001620:	f7ff fd0c 	bl	800103c <HAL_MspInit>
}
 8001624:	2000      	movs	r0, #0
 8001626:	bd08      	pop	{r3, pc}
 8001628:	40022000 	.word	0x40022000

0800162c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_IncTick+0x10>)
 800162e:	6811      	ldr	r1, [r2, #0]
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_IncTick+0x14>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	440b      	add	r3, r1
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000960 	.word	0x20000960
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001644:	4b01      	ldr	r3, [pc, #4]	; (800164c <HAL_GetTick+0x8>)
 8001646:	6818      	ldr	r0, [r3, #0]
}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000960 	.word	0x20000960

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b538      	push	{r3, r4, r5, lr}
 8001652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff fff6 	bl	8001644 <HAL_GetTick>
 8001658:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800165e:	d002      	beq.n	8001666 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_Delay+0x24>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001666:	f7ff ffed 	bl	8001644 <HAL_GetTick>
 800166a:	1b40      	subs	r0, r0, r5
 800166c:	42a0      	cmp	r0, r4
 800166e:	d3fa      	bcc.n	8001666 <HAL_Delay+0x16>
  {
  }
}
 8001670:	bd38      	pop	{r3, r4, r5, pc}
 8001672:	bf00      	nop
 8001674:	20000004 	.word	0x20000004

08001678 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001678:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800167a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800167c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800167e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001682:	d11e      	bne.n	80016c2 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	6892      	ldr	r2, [r2, #8]
 8001690:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001694:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001698:	d003      	beq.n	80016a2 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fa50 	bl	8004b40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016a0:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016a2:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d1f8      	bne.n	800169a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b2:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80016b6:	d1f0      	bne.n	800169a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
 80016c0:	e7eb      	b.n	800169a <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4798      	blx	r3
}
 80016c8:	e7ea      	b.n	80016a0 <ADC_DMAConvCplt+0x28>

080016ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016ca:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80016ce:	f003 fa1f 	bl	8004b10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <HAL_ADC_ErrorCallback>:
}
 80016d4:	4770      	bx	lr

080016d6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016d6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80016e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016ea:	f7ff fff3 	bl	80016d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016ee:	bd08      	pop	{r3, pc}

080016f0 <HAL_ADC_ConfigChannel>:
{ 
 80016f0:	b430      	push	{r4, r5}
 80016f2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80016f4:	2200      	movs	r2, #0
 80016f6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80016f8:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80016fc:	2a01      	cmp	r2, #1
 80016fe:	f000 8091 	beq.w	8001824 <HAL_ADC_ConfigChannel+0x134>
 8001702:	4603      	mov	r3, r0
 8001704:	2201      	movs	r2, #1
 8001706:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800170a:	684a      	ldr	r2, [r1, #4]
 800170c:	2a06      	cmp	r2, #6
 800170e:	d82d      	bhi.n	800176c <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001710:	6804      	ldr	r4, [r0, #0]
 8001712:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001714:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001718:	3a05      	subs	r2, #5
 800171a:	f04f 0c1f 	mov.w	ip, #31
 800171e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001722:	ea20 000c 	bic.w	r0, r0, ip
 8001726:	680d      	ldr	r5, [r1, #0]
 8001728:	fa05 f202 	lsl.w	r2, r5, r2
 800172c:	4302      	orrs	r2, r0
 800172e:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001730:	680a      	ldr	r2, [r1, #0]
 8001732:	2a09      	cmp	r2, #9
 8001734:	d93a      	bls.n	80017ac <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001736:	681c      	ldr	r4, [r3, #0]
 8001738:	68e0      	ldr	r0, [r4, #12]
 800173a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800173e:	3a1e      	subs	r2, #30
 8001740:	f04f 0c07 	mov.w	ip, #7
 8001744:	fa0c fc02 	lsl.w	ip, ip, r2
 8001748:	ea20 000c 	bic.w	r0, r0, ip
 800174c:	688d      	ldr	r5, [r1, #8]
 800174e:	fa05 f202 	lsl.w	r2, r5, r2
 8001752:	4302      	orrs	r2, r0
 8001754:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001756:	680a      	ldr	r2, [r1, #0]
 8001758:	3a10      	subs	r2, #16
 800175a:	2a01      	cmp	r2, #1
 800175c:	d936      	bls.n	80017cc <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001766:	b002      	add	sp, #8
 8001768:	bc30      	pop	{r4, r5}
 800176a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 800176c:	2a0c      	cmp	r2, #12
 800176e:	d80e      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001770:	6805      	ldr	r5, [r0, #0]
 8001772:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001774:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001778:	3a23      	subs	r2, #35	; 0x23
 800177a:	241f      	movs	r4, #31
 800177c:	4094      	lsls	r4, r2
 800177e:	ea20 0004 	bic.w	r0, r0, r4
 8001782:	680c      	ldr	r4, [r1, #0]
 8001784:	fa04 f202 	lsl.w	r2, r4, r2
 8001788:	4302      	orrs	r2, r0
 800178a:	632a      	str	r2, [r5, #48]	; 0x30
 800178c:	e7d0      	b.n	8001730 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800178e:	6805      	ldr	r5, [r0, #0]
 8001790:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001792:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001796:	3a41      	subs	r2, #65	; 0x41
 8001798:	241f      	movs	r4, #31
 800179a:	4094      	lsls	r4, r2
 800179c:	ea20 0004 	bic.w	r0, r0, r4
 80017a0:	680c      	ldr	r4, [r1, #0]
 80017a2:	fa04 f202 	lsl.w	r2, r4, r2
 80017a6:	4302      	orrs	r2, r0
 80017a8:	62ea      	str	r2, [r5, #44]	; 0x2c
 80017aa:	e7c1      	b.n	8001730 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ac:	681c      	ldr	r4, [r3, #0]
 80017ae:	6920      	ldr	r0, [r4, #16]
 80017b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80017b4:	f04f 0c07 	mov.w	ip, #7
 80017b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80017bc:	ea20 000c 	bic.w	r0, r0, ip
 80017c0:	688d      	ldr	r5, [r1, #8]
 80017c2:	fa05 f202 	lsl.w	r2, r5, r2
 80017c6:	4302      	orrs	r2, r0
 80017c8:	6122      	str	r2, [r4, #16]
 80017ca:	e7c4      	b.n	8001756 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4816      	ldr	r0, [pc, #88]	; (8001828 <HAL_ADC_ConfigChannel+0x138>)
 80017d0:	4282      	cmp	r2, r0
 80017d2:	d005      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d6:	f042 0220 	orr.w	r2, r2, #32
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80017dc:	2001      	movs	r0, #1
 80017de:	e7bf      	b.n	8001760 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017e0:	6890      	ldr	r0, [r2, #8]
 80017e2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80017e6:	d11b      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017e8:	6890      	ldr	r0, [r2, #8]
 80017ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80017ee:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017f0:	680a      	ldr	r2, [r1, #0]
 80017f2:	2a10      	cmp	r2, #16
 80017f4:	d001      	beq.n	80017fa <HAL_ADC_ConfigChannel+0x10a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f6:	2000      	movs	r0, #0
 80017f8:	e7b2      	b.n	8001760 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_ADC_ConfigChannel+0x13c>)
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <HAL_ADC_ConfigChannel+0x140>)
 8001800:	fba1 1202 	umull	r1, r2, r1, r2
 8001804:	0c92      	lsrs	r2, r2, #18
 8001806:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800180a:	0052      	lsls	r2, r2, #1
 800180c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800180e:	e002      	b.n	8001816 <HAL_ADC_ConfigChannel+0x126>
            wait_loop_index--;
 8001810:	9a01      	ldr	r2, [sp, #4]
 8001812:	3a01      	subs	r2, #1
 8001814:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001816:	9a01      	ldr	r2, [sp, #4]
 8001818:	2a00      	cmp	r2, #0
 800181a:	d1f9      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2000      	movs	r0, #0
 800181e:	e79f      	b.n	8001760 <HAL_ADC_ConfigChannel+0x70>
 8001820:	2000      	movs	r0, #0
 8001822:	e79d      	b.n	8001760 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001824:	2002      	movs	r0, #2
 8001826:	e79e      	b.n	8001766 <HAL_ADC_ConfigChannel+0x76>
 8001828:	40012400 	.word	0x40012400
 800182c:	20000000 	.word	0x20000000
 8001830:	431bde83 	.word	0x431bde83

08001834 <ADC_Enable>:
{
 8001834:	b530      	push	{r4, r5, lr}
 8001836:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800183c:	6803      	ldr	r3, [r0, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	f012 0f01 	tst.w	r2, #1
 8001844:	d133      	bne.n	80018ae <ADC_Enable+0x7a>
 8001846:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <ADC_Enable+0x80>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <ADC_Enable+0x84>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9b      	lsrs	r3, r3, #18
 800185c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800185e:	e002      	b.n	8001866 <ADC_Enable+0x32>
      wait_loop_index--;
 8001860:	9b01      	ldr	r3, [sp, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001866:	9b01      	ldr	r3, [sp, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f9      	bne.n	8001860 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 800186c:	f7ff feea 	bl	8001644 <HAL_GetTick>
 8001870:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f013 0f01 	tst.w	r3, #1
 800187a:	d116      	bne.n	80018aa <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800187c:	f7ff fee2 	bl	8001644 <HAL_GetTick>
 8001880:	1b43      	subs	r3, r0, r5
 8001882:	2b02      	cmp	r3, #2
 8001884:	d9f5      	bls.n	8001872 <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f013 0f01 	tst.w	r3, #1
 800188e:	d1f0      	bne.n	8001872 <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001890:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80018a0:	2300      	movs	r3, #0
 80018a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e002      	b.n	80018b0 <ADC_Enable+0x7c>
  return HAL_OK;
 80018aa:	2000      	movs	r0, #0
 80018ac:	e000      	b.n	80018b0 <ADC_Enable+0x7c>
 80018ae:	2000      	movs	r0, #0
}
 80018b0:	b003      	add	sp, #12
 80018b2:	bd30      	pop	{r4, r5, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	431bde83 	.word	0x431bde83

080018bc <HAL_ADC_Start_DMA>:
{
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018c4:	6801      	ldr	r1, [r0, #0]
 80018c6:	4844      	ldr	r0, [pc, #272]	; (80019d8 <HAL_ADC_Start_DMA+0x11c>)
 80018c8:	4281      	cmp	r1, r0
 80018ca:	d059      	beq.n	8001980 <HAL_ADC_Start_DMA+0xc4>
 80018cc:	4b43      	ldr	r3, [pc, #268]	; (80019dc <HAL_ADC_Start_DMA+0x120>)
 80018ce:	4299      	cmp	r1, r3
 80018d0:	d056      	beq.n	8001980 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 80018d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d07c      	beq.n	80019d4 <HAL_ADC_Start_DMA+0x118>
 80018da:	2301      	movs	r3, #1
 80018dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ffa7 	bl	8001834 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80018e6:	4607      	mov	r7, r0
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d16e      	bne.n	80019ca <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80018ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80018ee:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 80018f2:	f021 0101 	bic.w	r1, r1, #1
 80018f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018fa:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_ADC_Start_DMA+0x120>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d044      	beq.n	800198e <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001904:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001906:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800190a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800190c:	6853      	ldr	r3, [r2, #4]
 800190e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001912:	d005      	beq.n	8001920 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001914:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001916:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800191a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800191e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001920:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001922:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001926:	d048      	beq.n	80019ba <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001928:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800192a:	f023 0306 	bic.w	r3, r3, #6
 800192e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001930:	2300      	movs	r3, #0
 8001932:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001936:	6a23      	ldr	r3, [r4, #32]
 8001938:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <HAL_ADC_Start_DMA+0x124>)
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800193c:	6a23      	ldr	r3, [r4, #32]
 800193e:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <HAL_ADC_Start_DMA+0x128>)
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001942:	6a23      	ldr	r3, [r4, #32]
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_ADC_Start_DMA+0x12c>)
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	f06f 0202 	mvn.w	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001950:	6822      	ldr	r2, [r4, #0]
 8001952:	6893      	ldr	r3, [r2, #8]
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800195a:	6821      	ldr	r1, [r4, #0]
 800195c:	4633      	mov	r3, r6
 800195e:	462a      	mov	r2, r5
 8001960:	314c      	adds	r1, #76	; 0x4c
 8001962:	6a20      	ldr	r0, [r4, #32]
 8001964:	f000 fb3e 	bl	8001fe4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001970:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001974:	d024      	beq.n	80019c0 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	e027      	b.n	80019d0 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_ADC_Start_DMA+0x11c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001988:	d0a3      	beq.n	80018d2 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800198a:	2701      	movs	r7, #1
 800198c:	e020      	b.n	80019d0 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800198e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001998:	d0b4      	beq.n	8001904 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800199a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800199c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019a0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_ADC_Start_DMA+0x11c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80019aa:	d0b9      	beq.n	8001920 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80019b8:	e7b2      	b.n	8001920 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	2300      	movs	r3, #0
 80019bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019be:	e7b7      	b.n	8001930 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 80019ca:	2300      	movs	r3, #0
 80019cc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80019d0:	4638      	mov	r0, r7
 80019d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80019d4:	2702      	movs	r7, #2
 80019d6:	e7fb      	b.n	80019d0 <HAL_ADC_Start_DMA+0x114>
 80019d8:	40012400 	.word	0x40012400
 80019dc:	40012800 	.word	0x40012800
 80019e0:	08001679 	.word	0x08001679
 80019e4:	080016cb 	.word	0x080016cb
 80019e8:	080016d7 	.word	0x080016d7

080019ec <ADC_ConversionStop_Disable>:
{
 80019ec:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	f012 0f01 	tst.w	r2, #1
 80019f6:	d101      	bne.n	80019fc <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80019f8:	2000      	movs	r0, #0
}
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
 80019fc:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001a06:	f7ff fe1d 	bl	8001644 <HAL_GetTick>
 8001a0a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f013 0f01 	tst.w	r3, #1
 8001a14:	d013      	beq.n	8001a3e <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a16:	f7ff fe15 	bl	8001644 <HAL_GetTick>
 8001a1a:	1b43      	subs	r3, r0, r5
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d9f5      	bls.n	8001a0c <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f013 0f01 	tst.w	r3, #1
 8001a28:	d0f0      	beq.n	8001a0c <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e7dd      	b.n	80019fa <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001a3e:	2000      	movs	r0, #0
 8001a40:	e7db      	b.n	80019fa <ADC_ConversionStop_Disable+0xe>
	...

08001a44 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d07b      	beq.n	8001b40 <HAL_ADC_Init+0xfc>
{
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04d      	beq.n	8001aee <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a52:	4620      	mov	r0, r4
 8001a54:	f7ff ffca 	bl	80019ec <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a5a:	f013 0310 	ands.w	r3, r3, #16
 8001a5e:	d169      	bne.n	8001b34 <HAL_ADC_Init+0xf0>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d167      	bne.n	8001b34 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a66:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001a6a:	f022 0202 	bic.w	r2, r2, #2
 8001a6e:	f042 0202 	orr.w	r2, r2, #2
 8001a72:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a74:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a76:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a78:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a7a:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a7c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a80:	68a5      	ldr	r5, [r4, #8]
 8001a82:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001a86:	d002      	beq.n	8001a8e <HAL_ADC_Init+0x4a>
 8001a88:	2d01      	cmp	r5, #1
 8001a8a:	d036      	beq.n	8001afa <HAL_ADC_Init+0xb6>
 8001a8c:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a8e:	7d26      	ldrb	r6, [r4, #20]
 8001a90:	2e01      	cmp	r6, #1
 8001a92:	d035      	beq.n	8001b00 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001a94:	6826      	ldr	r6, [r4, #0]
 8001a96:	6871      	ldr	r1, [r6, #4]
 8001a98:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001a9c:	4329      	orrs	r1, r5
 8001a9e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001aa0:	6825      	ldr	r5, [r4, #0]
 8001aa2:	68ae      	ldr	r6, [r5, #8]
 8001aa4:	4927      	ldr	r1, [pc, #156]	; (8001b44 <HAL_ADC_Init+0x100>)
 8001aa6:	4031      	ands	r1, r6
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001aac:	68a1      	ldr	r1, [r4, #8]
 8001aae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001ab2:	d001      	beq.n	8001ab8 <HAL_ADC_Init+0x74>
 8001ab4:	2901      	cmp	r1, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ab8:	6923      	ldr	r3, [r4, #16]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001abe:	6825      	ldr	r5, [r4, #0]
 8001ac0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001ac2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	6899      	ldr	r1, [r3, #8]
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_ADC_Init+0x104>)
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d025      	beq.n	8001b22 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ad8:	f023 0312 	bic.w	r3, r3, #18
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
 8001aec:	e027      	b.n	8001b3e <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001af0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001af4:	f7ff fac4 	bl	8001080 <HAL_ADC_MspInit>
 8001af8:	e7ab      	b.n	8001a52 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001afa:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001afe:	e7c6      	b.n	8001a8e <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b00:	b931      	cbnz	r1, 8001b10 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b02:	69a1      	ldr	r1, [r4, #24]
 8001b04:	3901      	subs	r1, #1
 8001b06:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001b0a:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8001b0e:	e7c1      	b.n	8001a94 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b12:	f041 0120 	orr.w	r1, r1, #32
 8001b16:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b1a:	f041 0101 	orr.w	r1, r1, #1
 8001b1e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001b20:	e7b8      	b.n	8001a94 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001b22:	2300      	movs	r3, #0
 8001b24:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b28:	f023 0303 	bic.w	r3, r3, #3
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b32:	e004      	b.n	8001b3e <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
}
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b40:	2001      	movs	r0, #1
}
 8001b42:	4770      	bx	lr
 8001b44:	ffe1f7fd 	.word	0xffe1f7fd
 8001b48:	ff1f0efe 	.word	0xff1f0efe

08001b4c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b54:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d072      	beq.n	8001c42 <HAL_ADCEx_Calibration_Start+0xf6>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b64:	f7ff ff42 	bl	80019ec <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b68:	4605      	mov	r5, r0
 8001b6a:	b128      	cbz	r0, 8001b78 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001b72:	4628      	mov	r0, r5
 8001b74:	b002      	add	sp, #8
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b7e:	f023 0302 	bic.w	r3, r3, #2
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_ADCEx_Calibration_Start+0xfc>)
 8001b8a:	681e      	ldr	r6, [r3, #0]
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f001 f927 	bl	8002de0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b92:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001b96:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8001b98:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 8001b9c:	9b01      	ldr	r3, [sp, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001ba2:	9b01      	ldr	r3, [sp, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff fe43 	bl	8001834 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001bae:	6822      	ldr	r2, [r4, #0]
 8001bb0:	6893      	ldr	r3, [r2, #8]
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001bb8:	f7ff fd44 	bl	8001644 <HAL_GetTick>
 8001bbc:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	f012 0f08 	tst.w	r2, #8
 8001bc6:	d014      	beq.n	8001bf2 <HAL_ADCEx_Calibration_Start+0xa6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001bc8:	f7ff fd3c 	bl	8001644 <HAL_GetTick>
 8001bcc:	1b80      	subs	r0, r0, r6
 8001bce:	280a      	cmp	r0, #10
 8001bd0:	d9f5      	bls.n	8001bbe <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f013 0f08 	tst.w	r3, #8
 8001bda:	d0f0      	beq.n	8001bbe <HAL_ADCEx_Calibration_Start+0x72>
          ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bde:	f023 0312 	bic.w	r3, r3, #18
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001be8:	2300      	movs	r3, #0
 8001bea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8001bee:	2501      	movs	r5, #1
 8001bf0:	e7bf      	b.n	8001b72 <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	f042 0204 	orr.w	r2, r2, #4
 8001bf8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001bfa:	f7ff fd23 	bl	8001644 <HAL_GetTick>
 8001bfe:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f013 0f04 	tst.w	r3, #4
 8001c08:	d014      	beq.n	8001c34 <HAL_ADCEx_Calibration_Start+0xe8>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c0a:	f7ff fd1b 	bl	8001644 <HAL_GetTick>
 8001c0e:	1b80      	subs	r0, r0, r6
 8001c10:	280a      	cmp	r0, #10
 8001c12:	d9f5      	bls.n	8001c00 <HAL_ADCEx_Calibration_Start+0xb4>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f013 0f04 	tst.w	r3, #4
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_ADCEx_Calibration_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c20:	f023 0312 	bic.w	r3, r3, #18
 8001c24:	f043 0310 	orr.w	r3, r3, #16
 8001c28:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8001c30:	2501      	movs	r5, #1
 8001c32:	e79e      	b.n	8001b72 <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 8001c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c40:	e794      	b.n	8001b6c <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8001c42:	2502      	movs	r5, #2
 8001c44:	e795      	b.n	8001b72 <HAL_ADCEx_Calibration_Start+0x26>
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001c4c:	b470      	push	{r4, r5, r6}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001c52:	2200      	movs	r2, #0
 8001c54:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
  assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
  assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c56:	6880      	ldr	r0, [r0, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c58:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001c5c:	2a01      	cmp	r2, #1
 8001c5e:	f000 8101 	beq.w	8001e64 <HAL_ADCEx_InjectedConfigChannel+0x218>
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d14e      	bne.n	8001d0a <HAL_ADCEx_InjectedConfigChannel+0xbe>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001c6c:	684a      	ldr	r2, [r1, #4]
 8001c6e:	2a01      	cmp	r2, #1
 8001c70:	d041      	beq.n	8001cf6 <HAL_ADCEx_InjectedConfigChannel+0xaa>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c7c:	681c      	ldr	r4, [r3, #0]
 8001c7e:	68a2      	ldr	r2, [r4, #8]
 8001c80:	f012 0f01 	tst.w	r2, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_ADCEx_InjectedConfigChannel+0x4a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8001c86:	68a2      	ldr	r2, [r4, #8]
 8001c88:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	698d      	ldr	r5, [r1, #24]
 8001c92:	432a      	orrs	r2, r5
 8001c94:	60a2      	str	r2, [r4, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001c96:	7d4a      	ldrb	r2, [r1, #21]
 8001c98:	2a01      	cmp	r2, #1
 8001c9a:	d061      	beq.n	8001d60 <HAL_ADCEx_InjectedConfigChannel+0x114>
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001c9c:	7d0a      	ldrb	r2, [r1, #20]
 8001c9e:	2a01      	cmp	r2, #1
 8001ca0:	d06e      	beq.n	8001d80 <HAL_ADCEx_InjectedConfigChannel+0x134>
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001ca2:	680a      	ldr	r2, [r1, #0]
 8001ca4:	2a09      	cmp	r2, #9
 8001ca6:	d979      	bls.n	8001d9c <HAL_ADCEx_InjectedConfigChannel+0x150>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001ca8:	681d      	ldr	r5, [r3, #0]
 8001caa:	68ec      	ldr	r4, [r5, #12]
 8001cac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001cb0:	3a1e      	subs	r2, #30
 8001cb2:	f04f 0c07 	mov.w	ip, #7
 8001cb6:	fa0c fc02 	lsl.w	ip, ip, r2
 8001cba:	ea24 040c 	bic.w	r4, r4, ip
 8001cbe:	688e      	ldr	r6, [r1, #8]
 8001cc0:	fa06 f202 	lsl.w	r2, r6, r2
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	60ea      	str	r2, [r5, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc8:	680a      	ldr	r2, [r1, #0]
 8001cca:	3a10      	subs	r2, #16
 8001ccc:	2a01      	cmp	r2, #1
 8001cce:	d975      	bls.n	8001dbc <HAL_ADCEx_InjectedConfigChannel+0x170>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8001cd0:	684a      	ldr	r2, [r1, #4]
 8001cd2:	2a02      	cmp	r2, #2
 8001cd4:	f000 808b 	beq.w	8001dee <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8001cd8:	2a03      	cmp	r2, #3
 8001cda:	f000 8092 	beq.w	8001e02 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d072      	beq.n	8001dc8 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8001ce2:	681c      	ldr	r4, [r3, #0]
 8001ce4:	6a22      	ldr	r2, [r4, #32]
 8001ce6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8001cea:	f022 020f 	bic.w	r2, r2, #15
 8001cee:	68cd      	ldr	r5, [r1, #12]
 8001cf0:	432a      	orrs	r2, r5
 8001cf2:	6222      	str	r2, [r4, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8001cf4:	e071      	b.n	8001dda <HAL_ADCEx_InjectedConfigChannel+0x18e>
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001cfa:	0d92      	lsrs	r2, r2, #22
 8001cfc:	0592      	lsls	r2, r2, #22
 8001cfe:	680c      	ldr	r4, [r1, #0]
 8001d00:	ea42 32c4 	orr.w	r2, r2, r4, lsl #15
 8001d04:	6382      	str	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d06:	2000      	movs	r0, #0
 8001d08:	e7b8      	b.n	8001c7c <HAL_ADCEx_InjectedConfigChannel+0x30>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001d0a:	684a      	ldr	r2, [r1, #4]
 8001d0c:	690c      	ldr	r4, [r1, #16]
 8001d0e:	42a2      	cmp	r2, r4
 8001d10:	d816      	bhi.n	8001d40 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001d12:	681e      	ldr	r6, [r3, #0]
 8001d14:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8001d16:	1b12      	subs	r2, r2, r4
 8001d18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d1c:	f102 000f 	add.w	r0, r2, #15
 8001d20:	221f      	movs	r2, #31
 8001d22:	4082      	lsls	r2, r0
 8001d24:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 8001d28:	ea25 0502 	bic.w	r5, r5, r2
 8001d2c:	1e62      	subs	r2, r4, #1
 8001d2e:	680c      	ldr	r4, [r1, #0]
 8001d30:	fa04 f000 	lsl.w	r0, r4, r0
 8001d34:	ea40 5202 	orr.w	r2, r0, r2, lsl #20
 8001d38:	432a      	orrs	r2, r5
 8001d3a:	63b2      	str	r2, [r6, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	e79d      	b.n	8001c7c <HAL_ADCEx_InjectedConfigChannel+0x30>
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001d40:	681e      	ldr	r6, [r3, #0]
 8001d42:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8001d44:	1b12      	subs	r2, r2, r4
 8001d46:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d4a:	320f      	adds	r2, #15
 8001d4c:	201f      	movs	r0, #31
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 8001d56:	ea25 0202 	bic.w	r2, r5, r2
 8001d5a:	63b2      	str	r2, [r6, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	e78d      	b.n	8001c7c <HAL_ADCEx_InjectedConfigChannel+0x30>
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001d60:	698c      	ldr	r4, [r1, #24]
 8001d62:	f5b4 4fe0 	cmp.w	r4, #28672	; 0x7000
 8001d66:	d005      	beq.n	8001d74 <HAL_ADCEx_InjectedConfigChannel+0x128>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d68:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d6a:	f040 0020 	orr.w	r0, r0, #32
 8001d6e:	6298      	str	r0, [r3, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8001d70:	4610      	mov	r0, r2
 8001d72:	e793      	b.n	8001c9c <HAL_ADCEx_InjectedConfigChannel+0x50>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	6862      	ldr	r2, [r4, #4]
 8001d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d7c:	6062      	str	r2, [r4, #4]
 8001d7e:	e78d      	b.n	8001c9c <HAL_ADCEx_InjectedConfigChannel+0x50>
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001d80:	7d4c      	ldrb	r4, [r1, #21]
 8001d82:	b92c      	cbnz	r4, 8001d90 <HAL_ADCEx_InjectedConfigChannel+0x144>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001d84:	681c      	ldr	r4, [r3, #0]
 8001d86:	6862      	ldr	r2, [r4, #4]
 8001d88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d8c:	6062      	str	r2, [r4, #4]
 8001d8e:	e788      	b.n	8001ca2 <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d92:	f040 0020 	orr.w	r0, r0, #32
 8001d96:	6298      	str	r0, [r3, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8001d98:	4610      	mov	r0, r2
 8001d9a:	e782      	b.n	8001ca2 <HAL_ADCEx_InjectedConfigChannel+0x56>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001d9c:	681d      	ldr	r5, [r3, #0]
 8001d9e:	692c      	ldr	r4, [r5, #16]
 8001da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001da4:	f04f 0c07 	mov.w	ip, #7
 8001da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8001dac:	ea24 040c 	bic.w	r4, r4, ip
 8001db0:	688e      	ldr	r6, [r1, #8]
 8001db2:	fa06 f202 	lsl.w	r2, r6, r2
 8001db6:	4322      	orrs	r2, r4
 8001db8:	612a      	str	r2, [r5, #16]
 8001dba:	e785      	b.n	8001cc8 <HAL_ADCEx_InjectedConfigChannel+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dbc:	681c      	ldr	r4, [r3, #0]
 8001dbe:	68a2      	ldr	r2, [r4, #8]
 8001dc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dc4:	60a2      	str	r2, [r4, #8]
 8001dc6:	e783      	b.n	8001cd0 <HAL_ADCEx_InjectedConfigChannel+0x84>
      MODIFY_REG(hadc->Instance->JOFR1,
 8001dc8:	681c      	ldr	r4, [r3, #0]
 8001dca:	6962      	ldr	r2, [r4, #20]
 8001dcc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8001dd0:	f022 020f 	bic.w	r2, r2, #15
 8001dd4:	68cd      	ldr	r5, [r1, #12]
 8001dd6:	432a      	orrs	r2, r5
 8001dd8:	6162      	str	r2, [r4, #20]
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dda:	680a      	ldr	r2, [r1, #0]
 8001ddc:	3a10      	subs	r2, #16
 8001dde:	2a01      	cmp	r2, #1
 8001de0:	d919      	bls.n	8001e16 <HAL_ADCEx_InjectedConfigChannel+0x1ca>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001de8:	b003      	add	sp, #12
 8001dea:	bc70      	pop	{r4, r5, r6}
 8001dec:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->JOFR2,
 8001dee:	681c      	ldr	r4, [r3, #0]
 8001df0:	69a2      	ldr	r2, [r4, #24]
 8001df2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8001df6:	f022 020f 	bic.w	r2, r2, #15
 8001dfa:	68cd      	ldr	r5, [r1, #12]
 8001dfc:	432a      	orrs	r2, r5
 8001dfe:	61a2      	str	r2, [r4, #24]
      break;
 8001e00:	e7eb      	b.n	8001dda <HAL_ADCEx_InjectedConfigChannel+0x18e>
      MODIFY_REG(hadc->Instance->JOFR3,
 8001e02:	681c      	ldr	r4, [r3, #0]
 8001e04:	69e2      	ldr	r2, [r4, #28]
 8001e06:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8001e0a:	f022 020f 	bic.w	r2, r2, #15
 8001e0e:	68cd      	ldr	r5, [r1, #12]
 8001e10:	432a      	orrs	r2, r5
 8001e12:	61e2      	str	r2, [r4, #28]
      break;
 8001e14:	e7e1      	b.n	8001dda <HAL_ADCEx_InjectedConfigChannel+0x18e>
    if (hadc->Instance == ADC1)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4c13      	ldr	r4, [pc, #76]	; (8001e68 <HAL_ADCEx_InjectedConfigChannel+0x21c>)
 8001e1a:	42a2      	cmp	r2, r4
 8001e1c:	d005      	beq.n	8001e2a <HAL_ADCEx_InjectedConfigChannel+0x1de>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e20:	f042 0220 	orr.w	r2, r2, #32
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e7db      	b.n	8001de2 <HAL_ADCEx_InjectedConfigChannel+0x196>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e2a:	6894      	ldr	r4, [r2, #8]
 8001e2c:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8001e30:	d1d7      	bne.n	8001de2 <HAL_ADCEx_InjectedConfigChannel+0x196>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e32:	6894      	ldr	r4, [r2, #8]
 8001e34:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8001e38:	6094      	str	r4, [r2, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8001e3a:	680a      	ldr	r2, [r1, #0]
 8001e3c:	2a10      	cmp	r2, #16
 8001e3e:	d1d0      	bne.n	8001de2 <HAL_ADCEx_InjectedConfigChannel+0x196>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_ADCEx_InjectedConfigChannel+0x220>)
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	490a      	ldr	r1, [pc, #40]	; (8001e70 <HAL_ADCEx_InjectedConfigChannel+0x224>)
 8001e46:	fba1 1202 	umull	r1, r2, r1, r2
 8001e4a:	0c92      	lsrs	r2, r2, #18
 8001e4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e50:	0052      	lsls	r2, r2, #1
 8001e52:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001e54:	e002      	b.n	8001e5c <HAL_ADCEx_InjectedConfigChannel+0x210>
            wait_loop_index--;
 8001e56:	9a01      	ldr	r2, [sp, #4]
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001e5c:	9a01      	ldr	r2, [sp, #4]
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d1f9      	bne.n	8001e56 <HAL_ADCEx_InjectedConfigChannel+0x20a>
 8001e62:	e7be      	b.n	8001de2 <HAL_ADCEx_InjectedConfigChannel+0x196>
  __HAL_LOCK(hadc);
 8001e64:	2002      	movs	r0, #2
 8001e66:	e7bf      	b.n	8001de8 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 8001e68:	40012400 	.word	0x40012400
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e76:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e80:	0200      	lsls	r0, r0, #8
 8001e82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e86:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e90:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e98:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_NVIC_SetPriority+0x68>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea2:	f1c3 0c07 	rsb	ip, r3, #7
 8001ea6:	f1bc 0f04 	cmp.w	ip, #4
 8001eaa:	bf28      	it	cs
 8001eac:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb0:	f103 0e04 	add.w	lr, r3, #4
 8001eb4:	f1be 0f06 	cmp.w	lr, #6
 8001eb8:	d918      	bls.n	8001eec <HAL_NVIC_SetPriority+0x54>
 8001eba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 3eff 	mov.w	lr, #4294967295
 8001ec0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001ec4:	ea21 010c 	bic.w	r1, r1, ip
 8001ec8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eca:	fa0e f303 	lsl.w	r3, lr, r3
 8001ece:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	db0b      	blt.n	8001ef0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	0109      	lsls	r1, r1, #4
 8001eda:	b2c9      	uxtb	r1, r1
 8001edc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001ee0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ee4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ee8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eec:	2300      	movs	r3, #0
 8001eee:	e7e5      	b.n	8001ebc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	f000 000f 	and.w	r0, r0, #15
 8001ef4:	0109      	lsls	r1, r1, #4
 8001ef6:	b2c9      	uxtb	r1, r1
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <HAL_NVIC_SetPriority+0x6c>)
 8001efa:	5419      	strb	r1, [r3, r0]
 8001efc:	e7f4      	b.n	8001ee8 <HAL_NVIC_SetPriority+0x50>
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00
 8001f04:	e000ed14 	.word	0xe000ed14

08001f08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	db07      	blt.n	8001f1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0c:	f000 021f 	and.w	r2, r0, #31
 8001f10:	0940      	lsrs	r0, r0, #5
 8001f12:	2301      	movs	r3, #1
 8001f14:	4093      	lsls	r3, r2
 8001f16:	4a02      	ldr	r2, [pc, #8]	; (8001f20 <HAL_NVIC_EnableIRQ+0x18>)
 8001f18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	3801      	subs	r0, #1
 8001f26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f2a:	d20b      	bcs.n	8001f44 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f30:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <HAL_SYSTICK_Config+0x24>)
 8001f34:	21f0      	movs	r1, #240	; 0xf0
 8001f36:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3e:	2207      	movs	r2, #7
 8001f40:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f42:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f44:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f4c:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f4e:	2401      	movs	r4, #1
 8001f50:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001f52:	40ac      	lsls	r4, r5
 8001f54:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001f56:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f58:	6804      	ldr	r4, [r0, #0]
 8001f5a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f5c:	6843      	ldr	r3, [r0, #4]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d005      	beq.n	8001f6e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001f62:	6803      	ldr	r3, [r0, #0]
 8001f64:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	60da      	str	r2, [r3, #12]
  }
}
 8001f6a:	bc30      	pop	{r4, r5}
 8001f6c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001f6e:	6803      	ldr	r3, [r0, #0]
 8001f70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	60d9      	str	r1, [r3, #12]
 8001f76:	e7f8      	b.n	8001f6a <DMA_SetConfig+0x1e>

08001f78 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001f78:	b360      	cbz	r0, 8001fd4 <HAL_DMA_Init+0x5c>
{
 8001f7a:	b410      	push	{r4}
 8001f7c:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f7e:	6801      	ldr	r1, [r0, #0]
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_DMA_Init+0x60>)
 8001f82:	440b      	add	r3, r1
 8001f84:	4815      	ldr	r0, [pc, #84]	; (8001fdc <HAL_DMA_Init+0x64>)
 8001f86:	fba0 0303 	umull	r0, r3, r0, r3
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_DMA_Init+0x68>)
 8001f92:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001f9a:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f9c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8001fa0:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001fa4:	6853      	ldr	r3, [r2, #4]
 8001fa6:	6894      	ldr	r4, [r2, #8]
 8001fa8:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	68d4      	ldr	r4, [r2, #12]
 8001fac:	4323      	orrs	r3, r4
 8001fae:	6914      	ldr	r4, [r2, #16]
 8001fb0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	6954      	ldr	r4, [r2, #20]
 8001fb4:	4323      	orrs	r3, r4
 8001fb6:	6994      	ldr	r4, [r2, #24]
 8001fb8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fba:	69d4      	ldr	r4, [r2, #28]
 8001fbc:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001fbe:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001fc0:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001fcc:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001fd0:	bc10      	pop	{r4}
 8001fd2:	4770      	bx	lr
    return HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
}
 8001fd6:	4770      	bx	lr
 8001fd8:	bffdfff8 	.word	0xbffdfff8
 8001fdc:	cccccccd 	.word	0xcccccccd
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <HAL_DMA_Start_IT>:
{
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001fe8:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001fec:	2801      	cmp	r0, #1
 8001fee:	d031      	beq.n	8002054 <HAL_DMA_Start_IT+0x70>
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8001ffa:	2801      	cmp	r0, #1
 8001ffc:	d004      	beq.n	8002008 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001ffe:	2300      	movs	r3, #0
 8002000:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002004:	2002      	movs	r0, #2
}
 8002006:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	2002      	movs	r0, #2
 800200a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	2000      	movs	r0, #0
 8002010:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002012:	6825      	ldr	r5, [r4, #0]
 8002014:	6828      	ldr	r0, [r5, #0]
 8002016:	f020 0001 	bic.w	r0, r0, #1
 800201a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ff95 	bl	8001f4c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002022:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002024:	b15b      	cbz	r3, 800203e <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002026:	6822      	ldr	r2, [r4, #0]
 8002028:	6813      	ldr	r3, [r2, #0]
 800202a:	f043 030e 	orr.w	r3, r3, #14
 800202e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	2000      	movs	r0, #0
 800203c:	e7e3      	b.n	8002006 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800203e:	6822      	ldr	r2, [r4, #0]
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	6813      	ldr	r3, [r2, #0]
 800204c:	f043 030a 	orr.w	r3, r3, #10
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e7ed      	b.n	8002030 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002054:	2002      	movs	r0, #2
 8002056:	e7d6      	b.n	8002006 <HAL_DMA_Start_IT+0x22>

08002058 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002058:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800205c:	2b02      	cmp	r3, #2
 800205e:	d006      	beq.n	800206e <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	2304      	movs	r3, #4
 8002062:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002064:	2300      	movs	r3, #0
 8002066:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800206a:	2001      	movs	r0, #1
 800206c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206e:	6802      	ldr	r2, [r0, #0]
 8002070:	6813      	ldr	r3, [r2, #0]
 8002072:	f023 030e 	bic.w	r3, r3, #14
 8002076:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002078:	6802      	ldr	r2, [r0, #0]
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002082:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002084:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002086:	2201      	movs	r2, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800208e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8002092:	2300      	movs	r3, #0
 8002094:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002098:	4618      	mov	r0, r3
}
 800209a:	4770      	bx	lr

0800209c <HAL_DMA_Abort_IT>:
{  
 800209c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800209e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a6:	2304      	movs	r3, #4
 80020a8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80020aa:	2001      	movs	r0, #1
}
 80020ac:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	6802      	ldr	r2, [r0, #0]
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f023 030e 	bic.w	r3, r3, #14
 80020b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80020b8:	6802      	ldr	r2, [r0, #0]
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020c2:	6803      	ldr	r3, [r0, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_DMA_Abort_IT+0x90>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d014      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x58>
 80020ca:	3214      	adds	r2, #20
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01f      	beq.n	8002110 <HAL_DMA_Abort_IT+0x74>
 80020d0:	3214      	adds	r2, #20
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01e      	beq.n	8002114 <HAL_DMA_Abort_IT+0x78>
 80020d6:	3214      	adds	r2, #20
 80020d8:	4293      	cmp	r3, r2
 80020da:	d01e      	beq.n	800211a <HAL_DMA_Abort_IT+0x7e>
 80020dc:	3214      	adds	r2, #20
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01e      	beq.n	8002120 <HAL_DMA_Abort_IT+0x84>
 80020e2:	3214      	adds	r2, #20
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d002      	beq.n	80020ee <HAL_DMA_Abort_IT+0x52>
 80020e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ec:	e003      	b.n	80020f6 <HAL_DMA_Abort_IT+0x5a>
 80020ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020f2:	e000      	b.n	80020f6 <HAL_DMA_Abort_IT+0x5a>
 80020f4:	2201      	movs	r2, #1
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_DMA_Abort_IT+0x94>)
 80020f8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002100:	2300      	movs	r3, #0
 8002102:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002106:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002108:	b16b      	cbz	r3, 8002126 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800210a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	2000      	movs	r0, #0
 800210e:	e7cd      	b.n	80020ac <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002110:	2210      	movs	r2, #16
 8002112:	e7f0      	b.n	80020f6 <HAL_DMA_Abort_IT+0x5a>
 8002114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002118:	e7ed      	b.n	80020f6 <HAL_DMA_Abort_IT+0x5a>
 800211a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800211e:	e7ea      	b.n	80020f6 <HAL_DMA_Abort_IT+0x5a>
 8002120:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002124:	e7e7      	b.n	80020f6 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2000      	movs	r0, #0
 8002128:	e7c0      	b.n	80020ac <HAL_DMA_Abort_IT+0x10>
 800212a:	bf00      	nop
 800212c:	40020008 	.word	0x40020008
 8002130:	40020000 	.word	0x40020000

08002134 <HAL_DMA_IRQHandler>:
{
 8002134:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002136:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002138:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800213a:	6804      	ldr	r4, [r0, #0]
 800213c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800213e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002140:	2304      	movs	r3, #4
 8002142:	408b      	lsls	r3, r1
 8002144:	4213      	tst	r3, r2
 8002146:	d035      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x80>
 8002148:	f015 0f04 	tst.w	r5, #4
 800214c:	d032      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	f013 0f20 	tst.w	r3, #32
 8002154:	d103      	bne.n	800215e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800215e:	6803      	ldr	r3, [r0, #0]
 8002160:	4a43      	ldr	r2, [pc, #268]	; (8002270 <HAL_DMA_IRQHandler+0x13c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d014      	beq.n	8002190 <HAL_DMA_IRQHandler+0x5c>
 8002166:	3214      	adds	r2, #20
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_IRQHandler+0x6a>
 800216c:	3214      	adds	r2, #20
 800216e:	4293      	cmp	r3, r2
 8002170:	d017      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x6e>
 8002172:	3214      	adds	r2, #20
 8002174:	4293      	cmp	r3, r2
 8002176:	d017      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x74>
 8002178:	3214      	adds	r2, #20
 800217a:	4293      	cmp	r3, r2
 800217c:	d017      	beq.n	80021ae <HAL_DMA_IRQHandler+0x7a>
 800217e:	3214      	adds	r2, #20
 8002180:	4293      	cmp	r3, r2
 8002182:	d002      	beq.n	800218a <HAL_DMA_IRQHandler+0x56>
 8002184:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002188:	e003      	b.n	8002192 <HAL_DMA_IRQHandler+0x5e>
 800218a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800218e:	e000      	b.n	8002192 <HAL_DMA_IRQHandler+0x5e>
 8002190:	2204      	movs	r2, #4
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_DMA_IRQHandler+0x140>)
 8002194:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002196:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002198:	b103      	cbz	r3, 800219c <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 800219a:	4798      	blx	r3
}
 800219c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800219e:	2240      	movs	r2, #64	; 0x40
 80021a0:	e7f7      	b.n	8002192 <HAL_DMA_IRQHandler+0x5e>
 80021a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a6:	e7f4      	b.n	8002192 <HAL_DMA_IRQHandler+0x5e>
 80021a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ac:	e7f1      	b.n	8002192 <HAL_DMA_IRQHandler+0x5e>
 80021ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021b2:	e7ee      	b.n	8002192 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021b4:	2302      	movs	r3, #2
 80021b6:	408b      	lsls	r3, r1
 80021b8:	4213      	tst	r3, r2
 80021ba:	d03c      	beq.n	8002236 <HAL_DMA_IRQHandler+0x102>
 80021bc:	f015 0f02 	tst.w	r5, #2
 80021c0:	d039      	beq.n	8002236 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f013 0f20 	tst.w	r3, #32
 80021c8:	d106      	bne.n	80021d8 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f023 030a 	bic.w	r3, r3, #10
 80021d0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021d8:	6803      	ldr	r3, [r0, #0]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <HAL_DMA_IRQHandler+0x13c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d014      	beq.n	800220a <HAL_DMA_IRQHandler+0xd6>
 80021e0:	3214      	adds	r2, #20
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01c      	beq.n	8002220 <HAL_DMA_IRQHandler+0xec>
 80021e6:	3214      	adds	r2, #20
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0xf0>
 80021ec:	3214      	adds	r2, #20
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <HAL_DMA_IRQHandler+0xf6>
 80021f2:	3214      	adds	r2, #20
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d01b      	beq.n	8002230 <HAL_DMA_IRQHandler+0xfc>
 80021f8:	3214      	adds	r2, #20
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d002      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd0>
 80021fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002202:	e003      	b.n	800220c <HAL_DMA_IRQHandler+0xd8>
 8002204:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002208:	e000      	b.n	800220c <HAL_DMA_IRQHandler+0xd8>
 800220a:	2202      	movs	r2, #2
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_DMA_IRQHandler+0x140>)
 800220e:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002210:	2300      	movs	r3, #0
 8002212:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002216:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0bf      	beq.n	800219c <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 800221c:	4798      	blx	r3
 800221e:	e7bd      	b.n	800219c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002220:	2220      	movs	r2, #32
 8002222:	e7f3      	b.n	800220c <HAL_DMA_IRQHandler+0xd8>
 8002224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002228:	e7f0      	b.n	800220c <HAL_DMA_IRQHandler+0xd8>
 800222a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800222e:	e7ed      	b.n	800220c <HAL_DMA_IRQHandler+0xd8>
 8002230:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002234:	e7ea      	b.n	800220c <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002236:	2308      	movs	r3, #8
 8002238:	fa03 f101 	lsl.w	r1, r3, r1
 800223c:	4211      	tst	r1, r2
 800223e:	d0ad      	beq.n	800219c <HAL_DMA_IRQHandler+0x68>
 8002240:	f015 0f08 	tst.w	r5, #8
 8002244:	d0aa      	beq.n	800219c <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	f023 030e 	bic.w	r3, r3, #14
 800224c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800224e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002250:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002252:	2301      	movs	r3, #1
 8002254:	fa03 f202 	lsl.w	r2, r3, r2
 8002258:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800225a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800225c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002260:	2300      	movs	r3, #0
 8002262:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002266:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002268:	2b00      	cmp	r3, #0
 800226a:	d097      	beq.n	800219c <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800226c:	4798      	blx	r3
  return;
 800226e:	e795      	b.n	800219c <HAL_DMA_IRQHandler+0x68>
 8002270:	40020008 	.word	0x40020008
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800227c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800227e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002280:	e0a6      	b.n	80023d0 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002282:	4d80      	ldr	r5, [pc, #512]	; (8002484 <HAL_GPIO_Init+0x20c>)
 8002284:	42aa      	cmp	r2, r5
 8002286:	d010      	beq.n	80022aa <HAL_GPIO_Init+0x32>
 8002288:	d907      	bls.n	800229a <HAL_GPIO_Init+0x22>
 800228a:	4d7f      	ldr	r5, [pc, #508]	; (8002488 <HAL_GPIO_Init+0x210>)
 800228c:	42aa      	cmp	r2, r5
 800228e:	d00c      	beq.n	80022aa <HAL_GPIO_Init+0x32>
 8002290:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8002294:	42aa      	cmp	r2, r5
 8002296:	d008      	beq.n	80022aa <HAL_GPIO_Init+0x32>
 8002298:	e013      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
 800229a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800229e:	42aa      	cmp	r2, r5
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x32>
 80022a2:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 80022a6:	42aa      	cmp	r2, r5
 80022a8:	d107      	bne.n	80022ba <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022aa:	688a      	ldr	r2, [r1, #8]
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d058      	beq.n	8002362 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b0:	2a01      	cmp	r2, #1
 80022b2:	d051      	beq.n	8002358 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80022b4:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b6:	2408      	movs	r4, #8
 80022b8:	e003      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80022ba:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80022be:	42aa      	cmp	r2, r5
 80022c0:	d0f3      	beq.n	80022aa <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80022c6:	d84e      	bhi.n	8002366 <HAL_GPIO_Init+0xee>
 80022c8:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80022ce:	d84c      	bhi.n	800236a <HAL_GPIO_Init+0xf2>
 80022d0:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d4:	6833      	ldr	r3, [r6, #0]
 80022d6:	250f      	movs	r5, #15
 80022d8:	4095      	lsls	r5, r2
 80022da:	ea23 0305 	bic.w	r3, r3, r5
 80022de:	fa04 f202 	lsl.w	r2, r4, r2
 80022e2:	4313      	orrs	r3, r2
 80022e4:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e6:	684b      	ldr	r3, [r1, #4]
 80022e8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022ec:	d06e      	beq.n	80023cc <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_GPIO_Init+0x214>)
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	619a      	str	r2, [r3, #24]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002302:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8002306:	1c95      	adds	r5, r2, #2
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <HAL_GPIO_Init+0x218>)
 800230a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230e:	f00c 0303 	and.w	r3, ip, #3
 8002312:	009d      	lsls	r5, r3, #2
 8002314:	230f      	movs	r3, #15
 8002316:	40ab      	lsls	r3, r5
 8002318:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800231c:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_GPIO_Init+0x21c>)
 800231e:	4298      	cmp	r0, r3
 8002320:	d029      	beq.n	8002376 <HAL_GPIO_Init+0xfe>
 8002322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002326:	4298      	cmp	r0, r3
 8002328:	f000 808e 	beq.w	8002448 <HAL_GPIO_Init+0x1d0>
 800232c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002330:	4298      	cmp	r0, r3
 8002332:	f000 808b 	beq.w	800244c <HAL_GPIO_Init+0x1d4>
 8002336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233a:	4298      	cmp	r0, r3
 800233c:	d019      	beq.n	8002372 <HAL_GPIO_Init+0xfa>
 800233e:	2304      	movs	r3, #4
 8002340:	e01a      	b.n	8002378 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002342:	68cc      	ldr	r4, [r1, #12]
          break;
 8002344:	e7bd      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002346:	68cc      	ldr	r4, [r1, #12]
 8002348:	3404      	adds	r4, #4
          break;
 800234a:	e7ba      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800234c:	68cc      	ldr	r4, [r1, #12]
 800234e:	3408      	adds	r4, #8
          break;
 8002350:	e7b7      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002352:	68cc      	ldr	r4, [r1, #12]
 8002354:	340c      	adds	r4, #12
          break;
 8002356:	e7b4      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002358:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235a:	2408      	movs	r4, #8
 800235c:	e7b1      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800235e:	2400      	movs	r4, #0
 8002360:	e7af      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002362:	2404      	movs	r4, #4
 8002364:	e7ad      	b.n	80022c2 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002366:	1d06      	adds	r6, r0, #4
 8002368:	e7af      	b.n	80022ca <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800236a:	f1ac 0208 	sub.w	r2, ip, #8
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	e7b0      	b.n	80022d4 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002372:	2303      	movs	r3, #3
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x100>
 8002376:	2300      	movs	r3, #0
 8002378:	40ab      	lsls	r3, r5
 800237a:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 800237c:	3202      	adds	r2, #2
 800237e:	4d44      	ldr	r5, [pc, #272]	; (8002490 <HAL_GPIO_Init+0x218>)
 8002380:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002384:	684b      	ldr	r3, [r1, #4]
 8002386:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800238a:	d061      	beq.n	8002450 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800238c:	4a42      	ldr	r2, [pc, #264]	; (8002498 <HAL_GPIO_Init+0x220>)
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	ea43 030e 	orr.w	r3, r3, lr
 8002394:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002396:	684b      	ldr	r3, [r1, #4]
 8002398:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800239c:	d05e      	beq.n	800245c <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800239e:	4a3e      	ldr	r2, [pc, #248]	; (8002498 <HAL_GPIO_Init+0x220>)
 80023a0:	6853      	ldr	r3, [r2, #4]
 80023a2:	ea43 030e 	orr.w	r3, r3, lr
 80023a6:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a8:	684b      	ldr	r3, [r1, #4]
 80023aa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023ae:	d05b      	beq.n	8002468 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <HAL_GPIO_Init+0x220>)
 80023b2:	6893      	ldr	r3, [r2, #8]
 80023b4:	ea43 030e 	orr.w	r3, r3, lr
 80023b8:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ba:	684b      	ldr	r3, [r1, #4]
 80023bc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80023c0:	d058      	beq.n	8002474 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c2:	4a35      	ldr	r2, [pc, #212]	; (8002498 <HAL_GPIO_Init+0x220>)
 80023c4:	68d3      	ldr	r3, [r2, #12]
 80023c6:	ea43 030e 	orr.w	r3, r3, lr
 80023ca:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80023cc:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d0:	680a      	ldr	r2, [r1, #0]
 80023d2:	fa32 f30c 	lsrs.w	r3, r2, ip
 80023d6:	d053      	beq.n	8002480 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 80023d8:	2301      	movs	r3, #1
 80023da:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 80023e2:	ea33 0202 	bics.w	r2, r3, r2
 80023e6:	d1f1      	bne.n	80023cc <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 80023e8:	684a      	ldr	r2, [r1, #4]
 80023ea:	2a12      	cmp	r2, #18
 80023ec:	f63f af49 	bhi.w	8002282 <HAL_GPIO_Init+0xa>
 80023f0:	2a12      	cmp	r2, #18
 80023f2:	f63f af66 	bhi.w	80022c2 <HAL_GPIO_Init+0x4a>
 80023f6:	a501      	add	r5, pc, #4	; (adr r5, 80023fc <HAL_GPIO_Init+0x184>)
 80023f8:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 80023fc:	080022ab 	.word	0x080022ab
 8002400:	08002343 	.word	0x08002343
 8002404:	0800234d 	.word	0x0800234d
 8002408:	0800235f 	.word	0x0800235f
 800240c:	080022c3 	.word	0x080022c3
 8002410:	080022c3 	.word	0x080022c3
 8002414:	080022c3 	.word	0x080022c3
 8002418:	080022c3 	.word	0x080022c3
 800241c:	080022c3 	.word	0x080022c3
 8002420:	080022c3 	.word	0x080022c3
 8002424:	080022c3 	.word	0x080022c3
 8002428:	080022c3 	.word	0x080022c3
 800242c:	080022c3 	.word	0x080022c3
 8002430:	080022c3 	.word	0x080022c3
 8002434:	080022c3 	.word	0x080022c3
 8002438:	080022c3 	.word	0x080022c3
 800243c:	080022c3 	.word	0x080022c3
 8002440:	08002347 	.word	0x08002347
 8002444:	08002353 	.word	0x08002353
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002448:	2301      	movs	r3, #1
 800244a:	e795      	b.n	8002378 <HAL_GPIO_Init+0x100>
 800244c:	2302      	movs	r3, #2
 800244e:	e793      	b.n	8002378 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002450:	4a11      	ldr	r2, [pc, #68]	; (8002498 <HAL_GPIO_Init+0x220>)
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	ea23 030e 	bic.w	r3, r3, lr
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e79c      	b.n	8002396 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <HAL_GPIO_Init+0x220>)
 800245e:	6853      	ldr	r3, [r2, #4]
 8002460:	ea23 030e 	bic.w	r3, r3, lr
 8002464:	6053      	str	r3, [r2, #4]
 8002466:	e79f      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_GPIO_Init+0x220>)
 800246a:	6893      	ldr	r3, [r2, #8]
 800246c:	ea23 030e 	bic.w	r3, r3, lr
 8002470:	6093      	str	r3, [r2, #8]
 8002472:	e7a2      	b.n	80023ba <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002474:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_GPIO_Init+0x220>)
 8002476:	68d3      	ldr	r3, [r2, #12]
 8002478:	ea23 030e 	bic.w	r3, r3, lr
 800247c:	60d3      	str	r3, [r2, #12]
 800247e:	e7a5      	b.n	80023cc <HAL_GPIO_Init+0x154>
  }
}
 8002480:	b002      	add	sp, #8
 8002482:	bd70      	pop	{r4, r5, r6, pc}
 8002484:	10220000 	.word	0x10220000
 8002488:	10310000 	.word	0x10310000
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000
 8002494:	40010800 	.word	0x40010800
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249c:	b10a      	cbz	r2, 80024a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	6101      	str	r1, [r0, #16]
 80024a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024a2:	0409      	lsls	r1, r1, #16
 80024a4:	6101      	str	r1, [r0, #16]
  }
}
 80024a6:	4770      	bx	lr

080024a8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	2800      	cmp	r0, #0
 80024aa:	f000 80cc 	beq.w	8002646 <HAL_I2C_Init+0x19e>
{
 80024ae:	b570      	push	{r4, r5, r6, lr}
 80024b0:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d077      	beq.n	80025aa <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ba:	2324      	movs	r3, #36	; 0x24
 80024bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024dc:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024de:	f000 fbd3 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024e2:	6862      	ldr	r2, [r4, #4]
 80024e4:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <HAL_I2C_Init+0x1a8>)
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d864      	bhi.n	80025b4 <HAL_I2C_Init+0x10c>
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_I2C_Init+0x1ac>)
 80024ec:	4298      	cmp	r0, r3
 80024ee:	bf8c      	ite	hi
 80024f0:	2300      	movhi	r3, #0
 80024f2:	2301      	movls	r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 80a8 	bne.w	800264a <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024fa:	4957      	ldr	r1, [pc, #348]	; (8002658 <HAL_I2C_Init+0x1b0>)
 80024fc:	fba1 3100 	umull	r3, r1, r1, r0
 8002500:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002502:	6825      	ldr	r5, [r4, #0]
 8002504:	686a      	ldr	r2, [r5, #4]
 8002506:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800250a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800250e:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002510:	6821      	ldr	r1, [r4, #0]
 8002512:	6a0a      	ldr	r2, [r1, #32]
 8002514:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002518:	6866      	ldr	r6, [r4, #4]
 800251a:	4d4d      	ldr	r5, [pc, #308]	; (8002650 <HAL_I2C_Init+0x1a8>)
 800251c:	42ae      	cmp	r6, r5
 800251e:	d84f      	bhi.n	80025c0 <HAL_I2C_Init+0x118>
 8002520:	3301      	adds	r3, #1
 8002522:	4313      	orrs	r3, r2
 8002524:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002526:	6821      	ldr	r1, [r4, #0]
 8002528:	69ca      	ldr	r2, [r1, #28]
 800252a:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 800252e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002532:	6866      	ldr	r6, [r4, #4]
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_I2C_Init+0x1a8>)
 8002536:	429e      	cmp	r6, r3
 8002538:	d84c      	bhi.n	80025d4 <HAL_I2C_Init+0x12c>
 800253a:	1e43      	subs	r3, r0, #1
 800253c:	0076      	lsls	r6, r6, #1
 800253e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002542:	3301      	adds	r3, #1
 8002544:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002548:	4203      	tst	r3, r0
 800254a:	d078      	beq.n	800263e <HAL_I2C_Init+0x196>
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	4313      	orrs	r3, r2
 8002552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002554:	6821      	ldr	r1, [r4, #0]
 8002556:	680b      	ldr	r3, [r1, #0]
 8002558:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800255c:	69e2      	ldr	r2, [r4, #28]
 800255e:	6a20      	ldr	r0, [r4, #32]
 8002560:	4302      	orrs	r2, r0
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002566:	6821      	ldr	r1, [r4, #0]
 8002568:	688b      	ldr	r3, [r1, #8]
 800256a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800256e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002572:	6922      	ldr	r2, [r4, #16]
 8002574:	68e0      	ldr	r0, [r4, #12]
 8002576:	4302      	orrs	r2, r0
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800257c:	6821      	ldr	r1, [r4, #0]
 800257e:	68cb      	ldr	r3, [r1, #12]
 8002580:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002584:	6962      	ldr	r2, [r4, #20]
 8002586:	69a0      	ldr	r0, [r4, #24]
 8002588:	4302      	orrs	r2, r0
 800258a:	4313      	orrs	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	2000      	movs	r0, #0
 800259a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259c:	2320      	movs	r3, #32
 800259e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80025aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80025ae:	f7fe fdb7 	bl	8001120 <HAL_I2C_MspInit>
 80025b2:	e782      	b.n	80024ba <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_I2C_Init+0x1b4>)
 80025b6:	4298      	cmp	r0, r3
 80025b8:	bf8c      	ite	hi
 80025ba:	2300      	movhi	r3, #0
 80025bc:	2301      	movls	r3, #1
 80025be:	e799      	b.n	80024f4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025c0:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80025c4:	fb05 f303 	mul.w	r3, r5, r3
 80025c8:	4d25      	ldr	r5, [pc, #148]	; (8002660 <HAL_I2C_Init+0x1b8>)
 80025ca:	fba5 5303 	umull	r5, r3, r5, r3
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	3301      	adds	r3, #1
 80025d2:	e7a6      	b.n	8002522 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d4:	68a3      	ldr	r3, [r4, #8]
 80025d6:	b9bb      	cbnz	r3, 8002608 <HAL_I2C_Init+0x160>
 80025d8:	1e45      	subs	r5, r0, #1
 80025da:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80025de:	fbb5 f5fc 	udiv	r5, r5, ip
 80025e2:	3501      	adds	r5, #1
 80025e4:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80025e8:	fab5 f585 	clz	r5, r5
 80025ec:	096d      	lsrs	r5, r5, #5
 80025ee:	bb45      	cbnz	r5, 8002642 <HAL_I2C_Init+0x19a>
 80025f0:	b9c3      	cbnz	r3, 8002624 <HAL_I2C_Init+0x17c>
 80025f2:	3801      	subs	r0, #1
 80025f4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	e7a3      	b.n	8002550 <HAL_I2C_Init+0xa8>
 8002608:	1e45      	subs	r5, r0, #1
 800260a:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 800260e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002612:	fbb5 f5fc 	udiv	r5, r5, ip
 8002616:	3501      	adds	r5, #1
 8002618:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800261c:	fab5 f585 	clz	r5, r5
 8002620:	096d      	lsrs	r5, r5, #5
 8002622:	e7e4      	b.n	80025ee <HAL_I2C_Init+0x146>
 8002624:	3801      	subs	r0, #1
 8002626:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800262a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263c:	e788      	b.n	8002550 <HAL_I2C_Init+0xa8>
 800263e:	2304      	movs	r3, #4
 8002640:	e786      	b.n	8002550 <HAL_I2C_Init+0xa8>
 8002642:	2301      	movs	r3, #1
 8002644:	e784      	b.n	8002550 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002646:	2001      	movs	r0, #1
}
 8002648:	4770      	bx	lr
    return HAL_ERROR;
 800264a:	2001      	movs	r0, #1
 800264c:	e7ac      	b.n	80025a8 <HAL_I2C_Init+0x100>
 800264e:	bf00      	nop
 8002650:	000186a0 	.word	0x000186a0
 8002654:	001e847f 	.word	0x001e847f
 8002658:	431bde83 	.word	0x431bde83
 800265c:	003d08ff 	.word	0x003d08ff
 8002660:	10624dd3 	.word	0x10624dd3

08002664 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002664:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <RCC_Delay+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <RCC_Delay+0x28>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	0a5b      	lsrs	r3, r3, #9
 8002672:	fb00 f303 	mul.w	r3, r0, r3
 8002676:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002678:	bf00      	nop
  }
  while (Delay --);
 800267a:	9b01      	ldr	r3, [sp, #4]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	9201      	str	r2, [sp, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <RCC_Delay+0x14>
}
 8002684:	b002      	add	sp, #8
 8002686:	4770      	bx	lr
 8002688:	20000000 	.word	0x20000000
 800268c:	10624dd3 	.word	0x10624dd3

08002690 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002690:	2800      	cmp	r0, #0
 8002692:	f000 81f1 	beq.w	8002a78 <HAL_RCC_OscConfig+0x3e8>
{
 8002696:	b570      	push	{r4, r5, r6, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269c:	6803      	ldr	r3, [r0, #0]
 800269e:	f013 0f01 	tst.w	r3, #1
 80026a2:	d02c      	beq.n	80026fe <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a4:	4b99      	ldr	r3, [pc, #612]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d01d      	beq.n	80026ec <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b0:	4b96      	ldr	r3, [pc, #600]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d012      	beq.n	80026e2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d041      	beq.n	8002748 <HAL_RCC_OscConfig+0xb8>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d155      	bne.n	8002774 <HAL_RCC_OscConfig+0xe4>
 80026c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e037      	b.n	8002752 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e2:	4b8a      	ldr	r3, [pc, #552]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80026ea:	d0e7      	beq.n	80026bc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b87      	ldr	r3, [pc, #540]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_OscConfig+0x6e>
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 81bf 	beq.w	8002a7c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f013 0f02 	tst.w	r3, #2
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002706:	4b81      	ldr	r3, [pc, #516]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f013 0f0c 	tst.w	r3, #12
 800270e:	d05f      	beq.n	80027d0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002710:	4b7e      	ldr	r3, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d054      	beq.n	80027c6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271c:	6923      	ldr	r3, [r4, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808a 	beq.w	8002838 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800272a:	f7fe ff8b 	bl	8001644 <HAL_GetTick>
 800272e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f013 0f02 	tst.w	r3, #2
 8002738:	d175      	bne.n	8002826 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe ff83 	bl	8001644 <HAL_GetTick>
 800273e:	1b40      	subs	r0, r0, r5
 8002740:	2802      	cmp	r0, #2
 8002742:	d9f5      	bls.n	8002730 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002744:	2003      	movs	r0, #3
 8002746:	e19e      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002748:	4a70      	ldr	r2, [pc, #448]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002752:	6863      	ldr	r3, [r4, #4]
 8002754:	b343      	cbz	r3, 80027a8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002756:	f7fe ff75 	bl	8001644 <HAL_GetTick>
 800275a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275c:	4b6b      	ldr	r3, [pc, #428]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002764:	d1cb      	bne.n	80026fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002766:	f7fe ff6d 	bl	8001644 <HAL_GetTick>
 800276a:	1b40      	subs	r0, r0, r5
 800276c:	2864      	cmp	r0, #100	; 0x64
 800276e:	d9f5      	bls.n	800275c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002770:	2003      	movs	r0, #3
 8002772:	e188      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002778:	d009      	beq.n	800278e <HAL_RCC_OscConfig+0xfe>
 800277a:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e7e1      	b.n	8002752 <HAL_RCC_OscConfig+0xc2>
 800278e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002792:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e7d4      	b.n	8002752 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80027a8:	f7fe ff4c 	bl	8001644 <HAL_GetTick>
 80027ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027b6:	d0a2      	beq.n	80026fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe ff44 	bl	8001644 <HAL_GetTick>
 80027bc:	1b40      	subs	r0, r0, r5
 80027be:	2864      	cmp	r0, #100	; 0x64
 80027c0:	d9f5      	bls.n	80027ae <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80027c2:	2003      	movs	r0, #3
 80027c4:	e15f      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027c6:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027ce:	d1a5      	bne.n	800271c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d0:	4b4e      	ldr	r3, [pc, #312]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f013 0f02 	tst.w	r3, #2
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_OscConfig+0x152>
 80027da:	6923      	ldr	r3, [r4, #16]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	f040 814f 	bne.w	8002a80 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4a4a      	ldr	r2, [pc, #296]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80027e4:	6813      	ldr	r3, [r2, #0]
 80027e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027ea:	6961      	ldr	r1, [r4, #20]
 80027ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027f0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	f013 0f08 	tst.w	r3, #8
 80027f8:	d033      	beq.n	8002862 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027fa:	69a3      	ldr	r3, [r4, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05c      	beq.n	80028ba <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002800:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002802:	2201      	movs	r2, #1
 8002804:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002808:	f7fe ff1c 	bl	8001644 <HAL_GetTick>
 800280c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f013 0f02 	tst.w	r3, #2
 8002816:	d121      	bne.n	800285c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe ff14 	bl	8001644 <HAL_GetTick>
 800281c:	1b40      	subs	r0, r0, r5
 800281e:	2802      	cmp	r0, #2
 8002820:	d9f5      	bls.n	800280e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002822:	2003      	movs	r0, #3
 8002824:	e12f      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4a39      	ldr	r2, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 8002828:	6813      	ldr	r3, [r2, #0]
 800282a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e7dc      	b.n	80027f2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800283e:	f7fe ff01 	bl	8001644 <HAL_GetTick>
 8002842:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002844:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f013 0f02 	tst.w	r3, #2
 800284c:	d0d1      	beq.n	80027f2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fef9 	bl	8001644 <HAL_GetTick>
 8002852:	1b40      	subs	r0, r0, r5
 8002854:	2802      	cmp	r0, #2
 8002856:	d9f5      	bls.n	8002844 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002858:	2003      	movs	r0, #3
 800285a:	e114      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff ff01 	bl	8002664 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	f013 0f04 	tst.w	r3, #4
 8002868:	f000 8096 	beq.w	8002998 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002874:	d134      	bne.n	80028e0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800287e:	61da      	str	r2, [r3, #28]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800288a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_OscConfig+0x284>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002894:	d026      	beq.n	80028e4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002896:	68e3      	ldr	r3, [r4, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d03d      	beq.n	8002918 <HAL_RCC_OscConfig+0x288>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d153      	bne.n	8002948 <HAL_RCC_OscConfig+0x2b8>
 80028a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	621a      	str	r2, [r3, #32]
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	621a      	str	r2, [r3, #32]
 80028b8:	e033      	b.n	8002922 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80028c2:	f7fe febf 	bl	8001644 <HAL_GetTick>
 80028c6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f013 0f02 	tst.w	r3, #2
 80028d0:	d0c7      	beq.n	8002862 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe feb7 	bl	8001644 <HAL_GetTick>
 80028d6:	1b40      	subs	r0, r0, r5
 80028d8:	2802      	cmp	r0, #2
 80028da:	d9f5      	bls.n	80028c8 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80028dc:	2003      	movs	r0, #3
 80028de:	e0d2      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2500      	movs	r5, #0
 80028e2:	e7d3      	b.n	800288c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x284>)
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80028ee:	f7fe fea9 	bl	8001644 <HAL_GetTick>
 80028f2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_RCC_OscConfig+0x284>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028fc:	d1cb      	bne.n	8002896 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe fea1 	bl	8001644 <HAL_GetTick>
 8002902:	1b80      	subs	r0, r0, r6
 8002904:	2864      	cmp	r0, #100	; 0x64
 8002906:	d9f5      	bls.n	80028f4 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8002908:	2003      	movs	r0, #3
 800290a:	e0bc      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 800290c:	40021000 	.word	0x40021000
 8002910:	42420000 	.word	0x42420000
 8002914:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	4a5f      	ldr	r2, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 800291a:	6a13      	ldr	r3, [r2, #32]
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002922:	68e3      	ldr	r3, [r4, #12]
 8002924:	b333      	cbz	r3, 8002974 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8002926:	f7fe fe8d 	bl	8001644 <HAL_GetTick>
 800292a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f013 0f02 	tst.w	r3, #2
 8002934:	d12f      	bne.n	8002996 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fe85 	bl	8001644 <HAL_GetTick>
 800293a:	1b80      	subs	r0, r0, r6
 800293c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002940:	4298      	cmp	r0, r3
 8002942:	d9f3      	bls.n	800292c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002944:	2003      	movs	r0, #3
 8002946:	e09e      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	2b05      	cmp	r3, #5
 800294a:	d009      	beq.n	8002960 <HAL_RCC_OscConfig+0x2d0>
 800294c:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	621a      	str	r2, [r3, #32]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	f022 0204 	bic.w	r2, r2, #4
 800295c:	621a      	str	r2, [r3, #32]
 800295e:	e7e0      	b.n	8002922 <HAL_RCC_OscConfig+0x292>
 8002960:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	f042 0204 	orr.w	r2, r2, #4
 8002968:	621a      	str	r2, [r3, #32]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	e7d6      	b.n	8002922 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002974:	f7fe fe66 	bl	8001644 <HAL_GetTick>
 8002978:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f013 0f02 	tst.w	r3, #2
 8002982:	d008      	beq.n	8002996 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe fe5e 	bl	8001644 <HAL_GetTick>
 8002988:	1b80      	subs	r0, r0, r6
 800298a:	f241 3388 	movw	r3, #5000	; 0x1388
 800298e:	4298      	cmp	r0, r3
 8002990:	d9f3      	bls.n	800297a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002992:	2003      	movs	r0, #3
 8002994:	e077      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002996:	b9e5      	cbnz	r5, 80029d2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002998:	69e3      	ldr	r3, [r4, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d072      	beq.n	8002a84 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299e:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029a0:	6852      	ldr	r2, [r2, #4]
 80029a2:	f002 020c 	and.w	r2, r2, #12
 80029a6:	2a08      	cmp	r2, #8
 80029a8:	d056      	beq.n	8002a58 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d017      	beq.n	80029de <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x40c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80029b4:	f7fe fe46 	bl	8001644 <HAL_GetTick>
 80029b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029c2:	d047      	beq.n	8002a54 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fe3e 	bl	8001644 <HAL_GetTick>
 80029c8:	1b00      	subs	r0, r0, r4
 80029ca:	2802      	cmp	r0, #2
 80029cc:	d9f5      	bls.n	80029ba <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80029ce:	2003      	movs	r0, #3
 80029d0:	e059      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029d4:	69d3      	ldr	r3, [r2, #28]
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	61d3      	str	r3, [r2, #28]
 80029dc:	e7dc      	b.n	8002998 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <HAL_RCC_OscConfig+0x40c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80029e4:	f7fe fe2e 	bl	8001644 <HAL_GetTick>
 80029e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029f2:	d006      	beq.n	8002a02 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fe26 	bl	8001644 <HAL_GetTick>
 80029f8:	1b40      	subs	r0, r0, r5
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9f5      	bls.n	80029ea <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80029fe:	2003      	movs	r0, #3
 8002a00:	e041      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a02:	6a23      	ldr	r3, [r4, #32]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d01a      	beq.n	8002a40 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0a:	4923      	ldr	r1, [pc, #140]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a0c:	684b      	ldr	r3, [r1, #4]
 8002a0e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002a12:	6a22      	ldr	r2, [r4, #32]
 8002a14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a16:	4302      	orrs	r2, r0
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <HAL_RCC_OscConfig+0x40c>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002a22:	f7fe fe0f 	bl	8001644 <HAL_GetTick>
 8002a26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a30:	d10e      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fe07 	bl	8001644 <HAL_GetTick>
 8002a36:	1b00      	subs	r0, r0, r4
 8002a38:	2802      	cmp	r0, #2
 8002a3a:	d9f5      	bls.n	8002a28 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e022      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a42:	6853      	ldr	r3, [r2, #4]
 8002a44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a48:	68a1      	ldr	r1, [r4, #8]
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]
 8002a4e:	e7dc      	b.n	8002a0a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002a50:	2000      	movs	r0, #0
 8002a52:	e018      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 8002a54:	2000      	movs	r0, #0
 8002a56:	e016      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d016      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002a64:	6a22      	ldr	r2, [r4, #32]
 8002a66:	4291      	cmp	r1, r2
 8002a68:	d111      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a6a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10e      	bne.n	8002a92 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e006      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
}
 8002a7a:	4770      	bx	lr
        return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002a84:	2000      	movs	r0, #0
}
 8002a86:	b002      	add	sp, #8
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	e7fb      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7f9      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 8002a92:	2001      	movs	r0, #1
 8002a94:	e7f7      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	42420000 	.word	0x42420000

08002aa0 <HAL_RCC_GetSysClockFreq>:
{
 8002aa0:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aa2:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x60>)
 8002aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa6:	f10d 0c18 	add.w	ip, sp, #24
 8002aaa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aae:	f240 2301 	movw	r3, #513	; 0x201
 8002ab2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	2a08      	cmp	r2, #8
 8002ac0:	d002      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8002ac2:	4811      	ldr	r0, [pc, #68]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002ac4:	b006      	add	sp, #24
 8002ac6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002acc:	3218      	adds	r2, #24
 8002ace:	446a      	add	r2, sp
 8002ad0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ad8:	d00d      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x64>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	446b      	add	r3, sp
 8002ae6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x68>)
 8002aec:	fb02 f000 	mul.w	r0, r2, r0
 8002af0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002af4:	e7e6      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x6c>)
 8002af8:	fb03 f000 	mul.w	r0, r3, r0
 8002afc:	e7e2      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x24>
 8002afe:	bf00      	nop
 8002b00:	08008098 	.word	0x08008098
 8002b04:	40021000 	.word	0x40021000
 8002b08:	007a1200 	.word	0x007a1200
 8002b0c:	003d0900 	.word	0x003d0900

08002b10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002b10:	2800      	cmp	r0, #0
 8002b12:	f000 80a0 	beq.w	8002c56 <HAL_RCC_ClockConfig+0x146>
{
 8002b16:	b570      	push	{r4, r5, r6, lr}
 8002b18:	460d      	mov	r5, r1
 8002b1a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x158>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d20b      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b28:	4a4f      	ldr	r2, [pc, #316]	; (8002c68 <HAL_RCC_ClockConfig+0x158>)
 8002b2a:	6813      	ldr	r3, [r2, #0]
 8002b2c:	f023 0307 	bic.w	r3, r3, #7
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	428b      	cmp	r3, r1
 8002b3c:	f040 808d 	bne.w	8002c5a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	f013 0f02 	tst.w	r3, #2
 8002b46:	d017      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	f013 0f04 	tst.w	r3, #4
 8002b4c:	d004      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4e:	4a47      	ldr	r2, [pc, #284]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002b50:	6853      	ldr	r3, [r2, #4]
 8002b52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b56:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f013 0f08 	tst.w	r3, #8
 8002b5e:	d004      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b60:	4a42      	ldr	r2, [pc, #264]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002b62:	6853      	ldr	r3, [r2, #4]
 8002b64:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b68:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002b6c:	6853      	ldr	r3, [r2, #4]
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b72:	68a1      	ldr	r1, [r4, #8]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	f013 0f01 	tst.w	r3, #1
 8002b7e:	d031      	beq.n	8002be4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b80:	6863      	ldr	r3, [r4, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d020      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d025      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	f012 0f02 	tst.w	r2, #2
 8002b92:	d064      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002b96:	684a      	ldr	r2, [r1, #4]
 8002b98:	f022 0203 	bic.w	r2, r2, #3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fd50 	bl	8001644 <HAL_GetTick>
 8002ba4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	6862      	ldr	r2, [r4, #4]
 8002bb0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002bb4:	d016      	beq.n	8002be4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb6:	f7fe fd45 	bl	8001644 <HAL_GetTick>
 8002bba:	1b80      	subs	r0, r0, r6
 8002bbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bc0:	4298      	cmp	r0, r3
 8002bc2:	d9f0      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	e045      	b.n	8002c54 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc8:	4a28      	ldr	r2, [pc, #160]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002bd0:	d1e0      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	e03e      	b.n	8002c54 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002bde:	d1d9      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002be0:	2001      	movs	r0, #1
 8002be2:	e037      	b.n	8002c54 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCC_ClockConfig+0x158>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	42ab      	cmp	r3, r5
 8002bee:	d90a      	bls.n	8002c06 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_RCC_ClockConfig+0x158>)
 8002bf2:	6813      	ldr	r3, [r2, #0]
 8002bf4:	f023 0307 	bic.w	r3, r3, #7
 8002bf8:	432b      	orrs	r3, r5
 8002bfa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	42ab      	cmp	r3, r5
 8002c04:	d12d      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	f013 0f04 	tst.w	r3, #4
 8002c0c:	d006      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002c10:	6853      	ldr	r3, [r2, #4]
 8002c12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c16:	68e1      	ldr	r1, [r4, #12]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	f013 0f08 	tst.w	r3, #8
 8002c22:	d007      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002c26:	6853      	ldr	r3, [r2, #4]
 8002c28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002c2c:	6921      	ldr	r1, [r4, #16]
 8002c2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c32:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c34:	f7ff ff34 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_RCC_ClockConfig+0x15c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x160>)
 8002c42:	5cd3      	ldrb	r3, [r2, r3]
 8002c44:	40d8      	lsrs	r0, r3
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_ClockConfig+0x164>)
 8002c48:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x168>)
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	f7fe fcb5 	bl	80015bc <HAL_InitTick>
  return HAL_OK;
 8002c52:	2000      	movs	r0, #0
}
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
}
 8002c58:	4770      	bx	lr
    return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	e7fa      	b.n	8002c54 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
 8002c60:	e7f8      	b.n	8002c54 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	e7f6      	b.n	8002c54 <HAL_RCC_ClockConfig+0x144>
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08008080 	.word	0x08008080
 8002c74:	20000000 	.word	0x20000000
 8002c78:	20000008 	.word	0x20000008

08002c7c <HAL_RCC_GetHCLKFreq>:
}
 8002c7c:	4b01      	ldr	r3, [pc, #4]	; (8002c84 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000000 	.word	0x20000000

08002c88 <HAL_RCC_GetPCLK1Freq>:
{
 8002c88:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c8a:	f7ff fff7 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002c96:	4a03      	ldr	r2, [pc, #12]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c9a:	40d8      	lsrs	r0, r3
 8002c9c:	bd08      	pop	{r3, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	08008090 	.word	0x08008090

08002ca8 <HAL_RCC_GetPCLK2Freq>:
{
 8002ca8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002caa:	f7ff ffe7 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002cb6:	4a03      	ldr	r2, [pc, #12]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002cba:	40d8      	lsrs	r0, r3
 8002cbc:	bd08      	pop	{r3, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08008090 	.word	0x08008090

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cce:	6803      	ldr	r3, [r0, #0]
 8002cd0:	f013 0f01 	tst.w	r3, #1
 8002cd4:	d036      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002cde:	d149      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ce8:	61da      	str	r2, [r3, #28]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cf4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cfe:	d03b      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d00:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d04:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002d08:	d013      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d0a:	6862      	ldr	r2, [r4, #4]
 8002d0c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d00e      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d14:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002d16:	6a13      	ldr	r3, [r2, #32]
 8002d18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d1c:	492f      	ldr	r1, [pc, #188]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002d1e:	2601      	movs	r6, #1
 8002d20:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d24:	2600      	movs	r6, #0
 8002d26:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d2a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d2c:	f013 0f01 	tst.w	r3, #1
 8002d30:	d136      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d32:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002d34:	6a13      	ldr	r3, [r2, #32]
 8002d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3a:	6861      	ldr	r1, [r4, #4]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d40:	2d00      	cmp	r5, #0
 8002d42:	d13e      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	f013 0f02 	tst.w	r3, #2
 8002d4a:	d006      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002d4e:	6853      	ldr	r3, [r2, #4]
 8002d50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d54:	68a1      	ldr	r1, [r4, #8]
 8002d56:	430b      	orrs	r3, r1
 8002d58:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	f013 0f10 	tst.w	r3, #16
 8002d60:	d034      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002d64:	6853      	ldr	r3, [r2, #4]
 8002d66:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d6a:	68e1      	ldr	r1, [r4, #12]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d70:	2000      	movs	r0, #0
 8002d72:	e02c      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8002d74:	2500      	movs	r5, #0
 8002d76:	e7be      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002d82:	f7fe fc5f 	bl	8001644 <HAL_GetTick>
 8002d86:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d90:	d1b6      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe fc57 	bl	8001644 <HAL_GetTick>
 8002d96:	1b80      	subs	r0, r0, r6
 8002d98:	2864      	cmp	r0, #100	; 0x64
 8002d9a:	d9f5      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	e016      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002da0:	f7fe fc50 	bl	8001644 <HAL_GetTick>
 8002da4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f013 0f02 	tst.w	r3, #2
 8002dae:	d1c0      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fc48 	bl	8001644 <HAL_GetTick>
 8002db4:	1b80      	subs	r0, r0, r6
 8002db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dba:	4298      	cmp	r0, r3
 8002dbc:	d9f3      	bls.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8002dbe:	2003      	movs	r0, #3
 8002dc0:	e005      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	69d3      	ldr	r3, [r2, #28]
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	e7bb      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8002dcc:	2000      	movs	r0, #0
}
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	42420000 	.word	0x42420000

08002de0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002de0:	b500      	push	{lr}
 8002de2:	b087      	sub	sp, #28
 8002de4:	4684      	mov	ip, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dea:	f10d 0e18 	add.w	lr, sp, #24
 8002dee:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002df2:	f240 2301 	movw	r3, #513	; 0x201
 8002df6:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002dfa:	f1bc 0f02 	cmp.w	ip, #2
 8002dfe:	d056      	beq.n	8002eae <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8002e00:	f1bc 0f10 	cmp.w	ip, #16
 8002e04:	d006      	beq.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8002e06:	f1bc 0f01 	cmp.w	ip, #1
 8002e0a:	d02e      	beq.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8002e0c:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8002e0e:	b007      	add	sp, #28
 8002e10:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8002e14:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002e16:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002e1e:	d0f6      	beq.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e20:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8002e24:	3318      	adds	r3, #24
 8002e26:	446b      	add	r3, sp
 8002e28:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e2c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002e30:	d017      	beq.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e32:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002e3a:	3318      	adds	r3, #24
 8002e3c:	446b      	add	r3, sp
 8002e3e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8002e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e48:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002e54:	d1db      	bne.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
          frequency = (pllclk * 2) / 3;
 8002e56:	0040      	lsls	r0, r0, #1
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8002e5a:	fba3 3000 	umull	r3, r0, r3, r0
 8002e5e:	0840      	lsrs	r0, r0, #1
 8002e60:	e7d5      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8002e64:	fb03 f000 	mul.w	r0, r3, r0
 8002e68:	e7f0      	b.n	8002e4c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      temp_reg = RCC->BDCR;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e6e:	f240 3202 	movw	r2, #770	; 0x302
 8002e72:	401a      	ands	r2, r3
 8002e74:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8002e78:	d024      	beq.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e82:	d004      	beq.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e88:	d009      	beq.n	8002e9e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e7bf      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e8e:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e92:	f012 0f02 	tst.w	r2, #2
 8002e96:	d0f5      	beq.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = LSI_VALUE;
 8002e98:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002e9c:	e7b7      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002ea6:	d0b2      	beq.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
        frequency = HSE_VALUE / 128U;
 8002ea8:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 8002eac:	e7af      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002eae:	f7ff fefb 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 8002eb2:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002eba:	3301      	adds	r3, #1
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002ec2:	e7a4      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
        frequency = LSE_VALUE;
 8002ec4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ec8:	e7a1      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8002eca:	bf00      	nop
 8002ecc:	08008098 	.word	0x08008098
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	aaaaaaab 	.word	0xaaaaaaab
 8002edc:	003d0900 	.word	0x003d0900

08002ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	4688      	mov	r8, r1
 8002eea:	4617      	mov	r7, r2
 8002eec:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eee:	f7fe fba9 	bl	8001644 <HAL_GetTick>
 8002ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ef4:	1a1b      	subs	r3, r3, r0
 8002ef6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002efa:	f7fe fba3 	bl	8001644 <HAL_GetTick>
 8002efe:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002f08:	fb09 f303 	mul.w	r3, r9, r3
 8002f0c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f0e:	682b      	ldr	r3, [r5, #0]
 8002f10:	689c      	ldr	r4, [r3, #8]
 8002f12:	ea38 0304 	bics.w	r3, r8, r4
 8002f16:	bf0c      	ite	eq
 8002f18:	f04f 0c01 	moveq.w	ip, #1
 8002f1c:	f04f 0c00 	movne.w	ip, #0
 8002f20:	45bc      	cmp	ip, r7
 8002f22:	d040      	beq.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f24:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002f28:	d0f1      	beq.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f2a:	f7fe fb8b 	bl	8001644 <HAL_GetTick>
 8002f2e:	eba0 000a 	sub.w	r0, r0, sl
 8002f32:	4548      	cmp	r0, r9
 8002f34:	d20a      	bcs.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002f36:	f1b9 0f00 	cmp.w	r9, #0
 8002f3a:	d007      	beq.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f3c:	9a01      	ldr	r2, [sp, #4]
 8002f3e:	b102      	cbz	r2, 8002f42 <SPI_WaitFlagStateUntilTimeout+0x62>
 8002f40:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002f42:	9b01      	ldr	r3, [sp, #4]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	4691      	mov	r9, r2
 8002f4a:	e7e0      	b.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f4c:	682a      	ldr	r2, [r5, #0]
 8002f4e:	6853      	ldr	r3, [r2, #4]
 8002f50:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002f54:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f56:	686b      	ldr	r3, [r5, #4]
 8002f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5c:	d00b      	beq.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f64:	d014      	beq.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8002f72:	2003      	movs	r0, #3
 8002f74:	e018      	b.n	8002fa8 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f76:	68ab      	ldr	r3, [r5, #8]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7c:	d002      	beq.n	8002f84 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d1ec      	bne.n	8002f5e <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8002f84:	682a      	ldr	r2, [r5, #0]
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e7e6      	b.n	8002f5e <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002f90:	682a      	ldr	r2, [r5, #0]
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	682a      	ldr	r2, [r5, #0]
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	e7df      	b.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8002fa6:	2000      	movs	r0, #0
}
 8002fa8:	b002      	add	sp, #8
 8002faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	4604      	mov	r4, r0
 8002fba:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fbc:	9200      	str	r2, [sp, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	f7ff ff8d 	bl	8002ee0 <SPI_WaitFlagStateUntilTimeout>
 8002fc6:	b908      	cbnz	r0, 8002fcc <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fce:	f043 0320 	orr.w	r3, r3, #32
 8002fd2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	e7f7      	b.n	8002fc8 <SPI_EndRxTxTransaction+0x14>

08002fd8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d056      	beq.n	800308a <HAL_SPI_Init+0xb2>
{
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fe2:	b933      	cbnz	r3, 8002ff2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fe4:	6843      	ldr	r3, [r0, #4]
 8002fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fea:	d005      	beq.n	8002ff8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61c3      	str	r3, [r0, #28]
 8002ff0:	e002      	b.n	8002ff8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ff6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ffc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003000:	2b00      	cmp	r3, #0
 8003002:	d03c      	beq.n	800307e <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003012:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003014:	6863      	ldr	r3, [r4, #4]
 8003016:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800301a:	68a2      	ldr	r2, [r4, #8]
 800301c:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003020:	4313      	orrs	r3, r2
 8003022:	68e2      	ldr	r2, [r4, #12]
 8003024:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003028:	4313      	orrs	r3, r2
 800302a:	6922      	ldr	r2, [r4, #16]
 800302c:	f002 0202 	and.w	r2, r2, #2
 8003030:	4313      	orrs	r3, r2
 8003032:	6962      	ldr	r2, [r4, #20]
 8003034:	f002 0201 	and.w	r2, r2, #1
 8003038:	4313      	orrs	r3, r2
 800303a:	69a2      	ldr	r2, [r4, #24]
 800303c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003040:	4313      	orrs	r3, r2
 8003042:	69e2      	ldr	r2, [r4, #28]
 8003044:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003048:	4313      	orrs	r3, r2
 800304a:	6a22      	ldr	r2, [r4, #32]
 800304c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003050:	4313      	orrs	r3, r2
 8003052:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003054:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003058:	6821      	ldr	r1, [r4, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800305e:	8b63      	ldrh	r3, [r4, #26]
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	69d3      	ldr	r3, [r2, #28]
 800306c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003070:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003072:	2000      	movs	r0, #0
 8003074:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003076:	2301      	movs	r3, #1
 8003078:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800307c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800307e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003082:	4620      	mov	r0, r4
 8003084:	f7fe f87e 	bl	8001184 <HAL_SPI_MspInit>
 8003088:	e7bc      	b.n	8003004 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800308a:	2001      	movs	r0, #1
}
 800308c:	4770      	bx	lr

0800308e <HAL_SPI_Transmit>:
{
 800308e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003096:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800309a:	2b01      	cmp	r3, #1
 800309c:	f000 80d1 	beq.w	8003242 <HAL_SPI_Transmit+0x1b4>
 80030a0:	4604      	mov	r4, r0
 80030a2:	4688      	mov	r8, r1
 80030a4:	4691      	mov	r9, r2
 80030a6:	2301      	movs	r3, #1
 80030a8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80030ac:	f7fe faca 	bl	8001644 <HAL_GetTick>
 80030b0:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80030b2:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80030b6:	b2f6      	uxtb	r6, r6
 80030b8:	2e01      	cmp	r6, #1
 80030ba:	f040 80af 	bne.w	800321c <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 80030be:	f1b8 0f00 	cmp.w	r8, #0
 80030c2:	f000 80ac 	beq.w	800321e <HAL_SPI_Transmit+0x190>
 80030c6:	f1b9 0f00 	cmp.w	r9, #0
 80030ca:	f000 80a8 	beq.w	800321e <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ce:	2303      	movs	r3, #3
 80030d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030d8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030dc:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030e0:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030e4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030e6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030ea:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030ec:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ee:	68a3      	ldr	r3, [r4, #8]
 80030f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f4:	d01e      	beq.n	8003134 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80030fe:	d103      	bne.n	8003108 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003106:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003108:	68e3      	ldr	r3, [r4, #12]
 800310a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310e:	d01c      	beq.n	800314a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	b113      	cbz	r3, 800311a <HAL_SPI_Transmit+0x8c>
 8003114:	f1b9 0f01 	cmp.w	r9, #1
 8003118:	d152      	bne.n	80031c0 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800311a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	7812      	ldrb	r2, [r2, #0]
 8003120:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003122:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003124:	3301      	adds	r3, #1
 8003126:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003128:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29b      	uxth	r3, r3
 8003130:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003132:	e045      	b.n	80031c0 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	6813      	ldr	r3, [r2, #0]
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e7d5      	b.n	80030f6 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	b113      	cbz	r3, 8003154 <HAL_SPI_Transmit+0xc6>
 800314e:	f1b9 0f01 	cmp.w	r9, #1
 8003152:	d116      	bne.n	8003182 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003154:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	8812      	ldrh	r2, [r2, #0]
 800315a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800315c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800315e:	3302      	adds	r3, #2
 8003160:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003162:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29b      	uxth	r3, r3
 800316a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800316c:	e009      	b.n	8003182 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316e:	f7fe fa69 	bl	8001644 <HAL_GetTick>
 8003172:	1bc0      	subs	r0, r0, r7
 8003174:	42a8      	cmp	r0, r5
 8003176:	d302      	bcc.n	800317e <HAL_SPI_Transmit+0xf0>
 8003178:	f1b5 3fff 	cmp.w	r5, #4294967295
 800317c:	d159      	bne.n	8003232 <HAL_SPI_Transmit+0x1a4>
 800317e:	2d00      	cmp	r5, #0
 8003180:	d059      	beq.n	8003236 <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 8003182:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d033      	beq.n	80031f2 <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	f012 0f02 	tst.w	r2, #2
 8003192:	d0ec      	beq.n	800316e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003194:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800319a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800319c:	3302      	adds	r3, #2
 800319e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80031a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80031aa:	e7ea      	b.n	8003182 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ac:	f7fe fa4a 	bl	8001644 <HAL_GetTick>
 80031b0:	1bc0      	subs	r0, r0, r7
 80031b2:	42a8      	cmp	r0, r5
 80031b4:	d302      	bcc.n	80031bc <HAL_SPI_Transmit+0x12e>
 80031b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80031ba:	d13e      	bne.n	800323a <HAL_SPI_Transmit+0x1ac>
 80031bc:	2d00      	cmp	r5, #0
 80031be:	d03e      	beq.n	800323e <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 80031c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	b1ab      	cbz	r3, 80031f2 <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	f012 0f02 	tst.w	r2, #2
 80031ce:	d0ed      	beq.n	80031ac <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031d8:	3301      	adds	r3, #1
 80031da:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80031dc:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 80031e0:	fa1f fc8c 	uxth.w	ip, ip
 80031e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80031e8:	fa1f fc8c 	uxth.w	ip, ip
 80031ec:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 80031f0:	e7e6      	b.n	80031c0 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031f2:	463a      	mov	r2, r7
 80031f4:	4629      	mov	r1, r5
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff fedc 	bl	8002fb4 <SPI_EndRxTxTransaction>
 80031fc:	b108      	cbz	r0, 8003202 <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031fe:	2320      	movs	r3, #32
 8003200:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003202:	68a3      	ldr	r3, [r4, #8]
 8003204:	b933      	cbnz	r3, 8003214 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	9201      	str	r2, [sp, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003214:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003216:	b913      	cbnz	r3, 800321e <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003218:	2600      	movs	r6, #0
 800321a:	e000      	b.n	800321e <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 800321c:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800321e:	2301      	movs	r3, #1
 8003220:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003224:	2300      	movs	r3, #0
 8003226:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800322a:	4630      	mov	r0, r6
 800322c:	b003      	add	sp, #12
 800322e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003232:	2603      	movs	r6, #3
 8003234:	e7f3      	b.n	800321e <HAL_SPI_Transmit+0x190>
 8003236:	2603      	movs	r6, #3
 8003238:	e7f1      	b.n	800321e <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 800323a:	2603      	movs	r6, #3
 800323c:	e7ef      	b.n	800321e <HAL_SPI_Transmit+0x190>
 800323e:	2603      	movs	r6, #3
 8003240:	e7ed      	b.n	800321e <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 8003242:	2602      	movs	r6, #2
 8003244:	e7f1      	b.n	800322a <HAL_SPI_Transmit+0x19c>
	...

08003248 <HAL_SPI_Transmit_DMA>:
{
 8003248:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800324a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800324e:	2b01      	cmp	r3, #1
 8003250:	d061      	beq.n	8003316 <HAL_SPI_Transmit_DMA+0xce>
 8003252:	4604      	mov	r4, r0
 8003254:	2301      	movs	r3, #1
 8003256:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800325a:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 800325e:	b2ed      	uxtb	r5, r5
 8003260:	429d      	cmp	r5, r3
 8003262:	d152      	bne.n	800330a <HAL_SPI_Transmit_DMA+0xc2>
  if ((pData == NULL) || (Size == 0U))
 8003264:	2900      	cmp	r1, #0
 8003266:	d051      	beq.n	800330c <HAL_SPI_Transmit_DMA+0xc4>
 8003268:	2a00      	cmp	r2, #0
 800326a:	d04f      	beq.n	800330c <HAL_SPI_Transmit_DMA+0xc4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800326c:	2303      	movs	r3, #3
 800326e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003272:	2300      	movs	r3, #0
 8003274:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003276:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003278:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800327a:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800327c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 800327e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003280:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003282:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003284:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003286:	6883      	ldr	r3, [r0, #8]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328c:	d02a      	beq.n	80032e4 <HAL_SPI_Transmit_DMA+0x9c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800328e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <HAL_SPI_Transmit_DMA+0xd4>)
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003294:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_SPI_Transmit_DMA+0xd8>)
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800329a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800329c:	4a21      	ldr	r2, [pc, #132]	; (8003324 <HAL_SPI_Transmit_DMA+0xdc>)
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 80032a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032a2:	2200      	movs	r2, #0
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032a6:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 80032a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	320c      	adds	r2, #12
 80032ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80032b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80032b2:	f7fe fe97 	bl	8001fe4 <HAL_DMA_Start_IT>
 80032b6:	4601      	mov	r1, r0
 80032b8:	b9f8      	cbnz	r0, 80032fa <HAL_SPI_Transmit_DMA+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032c2:	d103      	bne.n	80032cc <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ca:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80032cc:	6822      	ldr	r2, [r4, #0]
 80032ce:	6853      	ldr	r3, [r2, #4]
 80032d0:	f043 0320 	orr.w	r3, r3, #32
 80032d4:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	6853      	ldr	r3, [r2, #4]
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032e0:	460d      	mov	r5, r1
 80032e2:	e013      	b.n	800330c <HAL_SPI_Transmit_DMA+0xc4>
    __HAL_SPI_DISABLE(hspi);
 80032e4:	6802      	ldr	r2, [r0, #0]
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ec:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80032ee:	6802      	ldr	r2, [r0, #0]
 80032f0:	6813      	ldr	r3, [r2, #0]
 80032f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e7c9      	b.n	800328e <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032fc:	f043 0310 	orr.w	r3, r3, #16
 8003300:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003302:	2301      	movs	r3, #1
 8003304:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8003308:	e000      	b.n	800330c <HAL_SPI_Transmit_DMA+0xc4>
    errorcode = HAL_BUSY;
 800330a:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 800330c:	2300      	movs	r3, #0
 800330e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003312:	4628      	mov	r0, r5
 8003314:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8003316:	2502      	movs	r5, #2
 8003318:	e7fb      	b.n	8003312 <HAL_SPI_Transmit_DMA+0xca>
 800331a:	bf00      	nop
 800331c:	0800332b 	.word	0x0800332b
 8003320:	08003359 	.word	0x08003359
 8003324:	08003337 	.word	0x08003337

08003328 <HAL_SPI_TxHalfCpltCallback>:
}
 8003328:	4770      	bx	lr

0800332a <SPI_DMAHalfTransmitCplt>:
{
 800332a:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800332c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800332e:	f7ff fffb 	bl	8003328 <HAL_SPI_TxHalfCpltCallback>
}
 8003332:	bd08      	pop	{r3, pc}

08003334 <HAL_SPI_ErrorCallback>:
}
 8003334:	4770      	bx	lr

08003336 <SPI_DMAError>:
{
 8003336:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003338:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800333a:	6802      	ldr	r2, [r0, #0]
 800333c:	6853      	ldr	r3, [r2, #4]
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003344:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800334c:	2301      	movs	r3, #1
 800334e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8003352:	f7ff ffef 	bl	8003334 <HAL_SPI_ErrorCallback>
}
 8003356:	bd08      	pop	{r3, pc}

08003358 <SPI_DMATransmitCplt>:
{
 8003358:	b530      	push	{r4, r5, lr}
 800335a:	b083      	sub	sp, #12
 800335c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800335e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8003360:	f7fe f970 	bl	8001644 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f013 0f20 	tst.w	r3, #32
 800336c:	d123      	bne.n	80033b6 <SPI_DMATransmitCplt+0x5e>
 800336e:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003370:	6821      	ldr	r1, [r4, #0]
 8003372:	684b      	ldr	r3, [r1, #4]
 8003374:	f023 0320 	bic.w	r3, r3, #32
 8003378:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800337a:	6821      	ldr	r1, [r4, #0]
 800337c:	684b      	ldr	r3, [r1, #4]
 800337e:	f023 0302 	bic.w	r3, r3, #2
 8003382:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003384:	2164      	movs	r1, #100	; 0x64
 8003386:	4620      	mov	r0, r4
 8003388:	f7ff fe14 	bl	8002fb4 <SPI_EndRxTxTransaction>
 800338c:	b118      	cbz	r0, 8003396 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800338e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003390:	f043 0320 	orr.w	r3, r3, #32
 8003394:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003396:	68a3      	ldr	r3, [r4, #8]
 8003398:	b933      	cbnz	r3, 80033a8 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	9201      	str	r2, [sp, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033b4:	b923      	cbnz	r3, 80033c0 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 80033b6:	4620      	mov	r0, r4
 80033b8:	f001 f936 	bl	8004628 <HAL_SPI_TxCpltCallback>
}
 80033bc:	b003      	add	sp, #12
 80033be:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7ff ffb7 	bl	8003334 <HAL_SPI_ErrorCallback>
      return;
 80033c6:	e7f9      	b.n	80033bc <SPI_DMATransmitCplt+0x64>

080033c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ca:	6a03      	ldr	r3, [r0, #32]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033dc:	680c      	ldr	r4, [r1, #0]
 80033de:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e2:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033e6:	688b      	ldr	r3, [r1, #8]
 80033e8:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ea:	4c0d      	ldr	r4, [pc, #52]	; (8003420 <TIM_OC1_SetConfig+0x58>)
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d009      	beq.n	8003404 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f0:	4c0b      	ldr	r4, [pc, #44]	; (8003420 <TIM_OC1_SetConfig+0x58>)
 80033f2:	42a0      	cmp	r0, r4
 80033f4:	d00d      	beq.n	8003412 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f6:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f8:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fa:	684a      	ldr	r2, [r1, #4]
 80033fc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fe:	6203      	str	r3, [r0, #32]
}
 8003400:	bc70      	pop	{r4, r5, r6}
 8003402:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003404:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003408:	68ca      	ldr	r2, [r1, #12]
 800340a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800340c:	f023 0304 	bic.w	r3, r3, #4
 8003410:	e7ee      	b.n	80033f0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003412:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003416:	694a      	ldr	r2, [r1, #20]
 8003418:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800341a:	698e      	ldr	r6, [r1, #24]
 800341c:	4316      	orrs	r6, r2
 800341e:	e7ea      	b.n	80033f6 <TIM_OC1_SetConfig+0x2e>
 8003420:	40012c00 	.word	0x40012c00

08003424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003426:	6a03      	ldr	r3, [r0, #32]
 8003428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800342c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003432:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003434:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003438:	680c      	ldr	r4, [r1, #0]
 800343a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800343c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003440:	688c      	ldr	r4, [r1, #8]
 8003442:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003446:	4c0f      	ldr	r4, [pc, #60]	; (8003484 <TIM_OC3_SetConfig+0x60>)
 8003448:	42a0      	cmp	r0, r4
 800344a:	d009      	beq.n	8003460 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	4c0d      	ldr	r4, [pc, #52]	; (8003484 <TIM_OC3_SetConfig+0x60>)
 800344e:	42a0      	cmp	r0, r4
 8003450:	d00e      	beq.n	8003470 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003454:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003456:	684a      	ldr	r2, [r1, #4]
 8003458:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	6203      	str	r3, [r0, #32]
}
 800345c:	bc30      	pop	{r4, r5}
 800345e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003464:	68cc      	ldr	r4, [r1, #12]
 8003466:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800346a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800346e:	e7ed      	b.n	800344c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003470:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003474:	694c      	ldr	r4, [r1, #20]
 8003476:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800347a:	698c      	ldr	r4, [r1, #24]
 800347c:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8003480:	e7e7      	b.n	8003452 <TIM_OC3_SetConfig+0x2e>
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00

08003488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800348a:	6a03      	ldr	r3, [r0, #32]
 800348c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003490:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003496:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003498:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	680d      	ldr	r5, [r1, #0]
 800349e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a6:	688d      	ldr	r5, [r1, #8]
 80034a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ac:	4d07      	ldr	r5, [pc, #28]	; (80034cc <TIM_OC4_SetConfig+0x44>)
 80034ae:	42a8      	cmp	r0, r5
 80034b0:	d006      	beq.n	80034c0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034b6:	684a      	ldr	r2, [r1, #4]
 80034b8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ba:	6203      	str	r3, [r0, #32]
}
 80034bc:	bc30      	pop	{r4, r5}
 80034be:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c4:	694d      	ldr	r5, [r1, #20]
 80034c6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80034ca:	e7f2      	b.n	80034b2 <TIM_OC4_SetConfig+0x2a>
 80034cc:	40012c00 	.word	0x40012c00

080034d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d4:	6a04      	ldr	r4, [r0, #32]
 80034d6:	f024 0401 	bic.w	r4, r4, #1
 80034da:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034dc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034de:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80034ea:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80034ee:	6203      	str	r3, [r0, #32]
}
 80034f0:	bc10      	pop	{r4}
 80034f2:	4770      	bx	lr

080034f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f6:	6a04      	ldr	r4, [r0, #32]
 80034f8:	f024 0410 	bic.w	r4, r4, #16
 80034fc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fe:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003500:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003502:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003506:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800350a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800350e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003512:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003514:	6203      	str	r3, [r0, #32]
}
 8003516:	bc10      	pop	{r4}
 8003518:	4770      	bx	lr

0800351a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800351a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003520:	430b      	orrs	r3, r1
 8003522:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003526:	6083      	str	r3, [r0, #8]
}
 8003528:	4770      	bx	lr
	...

0800352c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800352c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d122      	bne.n	800357c <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	6803      	ldr	r3, [r0, #0]
 800353e:	4a11      	ldr	r2, [pc, #68]	; (8003584 <HAL_TIM_Base_Start+0x58>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d010      	beq.n	8003566 <HAL_TIM_Base_Start+0x3a>
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d00d      	beq.n	8003566 <HAL_TIM_Base_Start+0x3a>
 800354a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_TIM_Base_Start+0x3a>
 8003552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003556:	4293      	cmp	r3, r2
 8003558:	d005      	beq.n	8003566 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003562:	2000      	movs	r0, #0
 8003564:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	2a06      	cmp	r2, #6
 800356e:	d007      	beq.n	8003580 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003578:	2000      	movs	r0, #0
 800357a:	4770      	bx	lr
    return HAL_ERROR;
 800357c:	2001      	movs	r0, #1
 800357e:	4770      	bx	lr
  return HAL_OK;
 8003580:	2000      	movs	r0, #0
}
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00

08003588 <HAL_TIM_PWM_MspInit>:
}
 8003588:	4770      	bx	lr

0800358a <TIM_DMADelayPulseCplt>:
{
 800358a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800358e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003590:	4283      	cmp	r3, r0
 8003592:	d00e      	beq.n	80035b2 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003596:	4283      	cmp	r3, r0
 8003598:	d014      	beq.n	80035c4 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800359a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800359c:	4283      	cmp	r3, r0
 800359e:	d01a      	beq.n	80035d6 <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035a2:	4283      	cmp	r3, r0
 80035a4:	d020      	beq.n	80035e8 <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a6:	4620      	mov	r0, r4
 80035a8:	f001 fae3 	bl	8004b72 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	2300      	movs	r3, #0
 80035ae:	7723      	strb	r3, [r4, #28]
}
 80035b0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80035b6:	6983      	ldr	r3, [r0, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f4      	bne.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	2301      	movs	r3, #1
 80035be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80035c2:	e7f0      	b.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c4:	2302      	movs	r3, #2
 80035c6:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80035c8:	6983      	ldr	r3, [r0, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1eb      	bne.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	2301      	movs	r3, #1
 80035d0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80035d4:	e7e7      	b.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d6:	2304      	movs	r3, #4
 80035d8:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80035da:	6983      	ldr	r3, [r0, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e2      	bne.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	2301      	movs	r3, #1
 80035e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80035e6:	e7de      	b.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e8:	2308      	movs	r3, #8
 80035ea:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80035ec:	6983      	ldr	r3, [r0, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1d9      	bne.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	2301      	movs	r3, #1
 80035f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80035f8:	e7d5      	b.n	80035a6 <TIM_DMADelayPulseCplt+0x1c>

080035fa <TIM_DMADelayPulseHalfCplt>:
{
 80035fa:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80035fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003600:	4283      	cmp	r3, r0
 8003602:	d00b      	beq.n	800361c <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003606:	4283      	cmp	r3, r0
 8003608:	d010      	beq.n	800362c <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800360a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800360c:	4283      	cmp	r3, r0
 800360e:	d010      	beq.n	8003632 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003610:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003612:	4283      	cmp	r3, r0
 8003614:	d104      	bne.n	8003620 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	2308      	movs	r3, #8
 8003618:	7723      	strb	r3, [r4, #28]
 800361a:	e001      	b.n	8003620 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361c:	2301      	movs	r3, #1
 800361e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003620:	4620      	mov	r0, r4
 8003622:	f001 faa5 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	2300      	movs	r3, #0
 8003628:	7723      	strb	r3, [r4, #28]
}
 800362a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362c:	2302      	movs	r3, #2
 800362e:	7723      	strb	r3, [r4, #28]
 8003630:	e7f6      	b.n	8003620 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003632:	2304      	movs	r3, #4
 8003634:	7723      	strb	r3, [r4, #28]
 8003636:	e7f3      	b.n	8003620 <TIM_DMADelayPulseHalfCplt+0x26>

08003638 <HAL_TIM_ErrorCallback>:
}
 8003638:	4770      	bx	lr

0800363a <TIM_DMAError>:
{
 800363a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800363c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800363e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003640:	4283      	cmp	r3, r0
 8003642:	d00c      	beq.n	800365e <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003646:	4283      	cmp	r3, r0
 8003648:	d013      	beq.n	8003672 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800364a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800364c:	4283      	cmp	r3, r0
 800364e:	d016      	beq.n	800367e <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003650:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003652:	4283      	cmp	r3, r0
 8003654:	d019      	beq.n	800368a <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8003656:	2301      	movs	r3, #1
 8003658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800365c:	e003      	b.n	8003666 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365e:	2301      	movs	r3, #1
 8003660:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003662:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff ffe6 	bl	8003638 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366c:	2300      	movs	r3, #0
 800366e:	7723      	strb	r3, [r4, #28]
}
 8003670:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	2302      	movs	r3, #2
 8003674:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003676:	2301      	movs	r3, #1
 8003678:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800367c:	e7f3      	b.n	8003666 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	2304      	movs	r3, #4
 8003680:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003682:	2301      	movs	r3, #1
 8003684:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003688:	e7ed      	b.n	8003666 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368a:	2308      	movs	r3, #8
 800368c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800368e:	2301      	movs	r3, #1
 8003690:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003694:	e7e7      	b.n	8003666 <TIM_DMAError+0x2c>
	...

08003698 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003698:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800369a:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <TIM_Base_SetConfig+0x70>)
 800369c:	4290      	cmp	r0, r2
 800369e:	d00a      	beq.n	80036b6 <TIM_Base_SetConfig+0x1e>
 80036a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036a4:	d007      	beq.n	80036b6 <TIM_Base_SetConfig+0x1e>
 80036a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036aa:	4290      	cmp	r0, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_Base_SetConfig+0x1e>
 80036ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036b2:	4290      	cmp	r0, r2
 80036b4:	d103      	bne.n	80036be <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036ba:	684a      	ldr	r2, [r1, #4]
 80036bc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <TIM_Base_SetConfig+0x70>)
 80036c0:	4290      	cmp	r0, r2
 80036c2:	d00a      	beq.n	80036da <TIM_Base_SetConfig+0x42>
 80036c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036c8:	d007      	beq.n	80036da <TIM_Base_SetConfig+0x42>
 80036ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036ce:	4290      	cmp	r0, r2
 80036d0:	d003      	beq.n	80036da <TIM_Base_SetConfig+0x42>
 80036d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036d6:	4290      	cmp	r0, r2
 80036d8:	d103      	bne.n	80036e2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80036da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	68ca      	ldr	r2, [r1, #12]
 80036e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e6:	694a      	ldr	r2, [r1, #20]
 80036e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80036ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ec:	688b      	ldr	r3, [r1, #8]
 80036ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036f0:	680b      	ldr	r3, [r1, #0]
 80036f2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <TIM_Base_SetConfig+0x70>)
 80036f6:	4298      	cmp	r0, r3
 80036f8:	d002      	beq.n	8003700 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80036fa:	2301      	movs	r3, #1
 80036fc:	6143      	str	r3, [r0, #20]
}
 80036fe:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003700:	690b      	ldr	r3, [r1, #16]
 8003702:	6303      	str	r3, [r0, #48]	; 0x30
 8003704:	e7f9      	b.n	80036fa <TIM_Base_SetConfig+0x62>
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00

0800370c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800370c:	b340      	cbz	r0, 8003760 <HAL_TIM_Base_Init+0x54>
{
 800370e:	b510      	push	{r4, lr}
 8003710:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003716:	b1f3      	cbz	r3, 8003756 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	2302      	movs	r3, #2
 800371a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371e:	4621      	mov	r1, r4
 8003720:	f851 0b04 	ldr.w	r0, [r1], #4
 8003724:	f7ff ffb8 	bl	8003698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	2301      	movs	r3, #1
 800372a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003732:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003736:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800373a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003746:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800374a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800374e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003752:	2000      	movs	r0, #0
}
 8003754:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003756:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800375a:	f7fd fd71 	bl	8001240 <HAL_TIM_Base_MspInit>
 800375e:	e7db      	b.n	8003718 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003760:	2001      	movs	r0, #1
}
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003764:	b340      	cbz	r0, 80037b8 <HAL_TIM_PWM_Init+0x54>
{
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800376e:	b1f3      	cbz	r3, 80037ae <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003776:	4621      	mov	r1, r4
 8003778:	f851 0b04 	ldr.w	r0, [r1], #4
 800377c:	f7ff ff8c 	bl	8003698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	2301      	movs	r3, #1
 8003782:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800378a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800378e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003792:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800379a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800379e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80037a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80037a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80037aa:	2000      	movs	r0, #0
}
 80037ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80037ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80037b2:	f7ff fee9 	bl	8003588 <HAL_TIM_PWM_MspInit>
 80037b6:	e7db      	b.n	8003770 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80037b8:	2001      	movs	r0, #1
}
 80037ba:	4770      	bx	lr

080037bc <TIM_OC2_SetConfig>:
{
 80037bc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037be:	6a03      	ldr	r3, [r0, #32]
 80037c0:	f023 0310 	bic.w	r3, r3, #16
 80037c4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80037c6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80037c8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80037ca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037cc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	680d      	ldr	r5, [r1, #0]
 80037d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80037d6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037da:	688d      	ldr	r5, [r1, #8]
 80037dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e0:	4d0e      	ldr	r5, [pc, #56]	; (800381c <TIM_OC2_SetConfig+0x60>)
 80037e2:	42a8      	cmp	r0, r5
 80037e4:	d009      	beq.n	80037fa <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e6:	4d0d      	ldr	r5, [pc, #52]	; (800381c <TIM_OC2_SetConfig+0x60>)
 80037e8:	42a8      	cmp	r0, r5
 80037ea:	d00e      	beq.n	800380a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80037ec:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80037ee:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80037f0:	684a      	ldr	r2, [r1, #4]
 80037f2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80037f4:	6203      	str	r3, [r0, #32]
}
 80037f6:	bc30      	pop	{r4, r5}
 80037f8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037fe:	68cd      	ldr	r5, [r1, #12]
 8003800:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	e7ed      	b.n	80037e6 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800380a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800380e:	694d      	ldr	r5, [r1, #20]
 8003810:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003814:	698d      	ldr	r5, [r1, #24]
 8003816:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800381a:	e7e7      	b.n	80037ec <TIM_OC2_SetConfig+0x30>
 800381c:	40012c00 	.word	0x40012c00

08003820 <HAL_TIM_PWM_ConfigChannel>:
{
 8003820:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003822:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d060      	beq.n	80038ec <HAL_TIM_PWM_ConfigChannel+0xcc>
 800382a:	4604      	mov	r4, r0
 800382c:	460d      	mov	r5, r1
 800382e:	2301      	movs	r3, #1
 8003830:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003834:	2a0c      	cmp	r2, #12
 8003836:	d81a      	bhi.n	800386e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003838:	e8df f002 	tbb	[pc, r2]
 800383c:	19191907 	.word	0x19191907
 8003840:	1919191d 	.word	0x1919191d
 8003844:	19191931 	.word	0x19191931
 8003848:	44          	.byte	0x44
 8003849:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	f7ff fdbc 	bl	80033c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003850:	6822      	ldr	r2, [r4, #0]
 8003852:	6993      	ldr	r3, [r2, #24]
 8003854:	f043 0308 	orr.w	r3, r3, #8
 8003858:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385a:	6822      	ldr	r2, [r4, #0]
 800385c:	6993      	ldr	r3, [r2, #24]
 800385e:	f023 0304 	bic.w	r3, r3, #4
 8003862:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	6993      	ldr	r3, [r2, #24]
 8003868:	6929      	ldr	r1, [r5, #16]
 800386a:	430b      	orrs	r3, r1
 800386c:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800386e:	2000      	movs	r0, #0
 8003870:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003874:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003876:	6800      	ldr	r0, [r0, #0]
 8003878:	f7ff ffa0 	bl	80037bc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	6993      	ldr	r3, [r2, #24]
 8003880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003884:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003886:	6822      	ldr	r2, [r4, #0]
 8003888:	6993      	ldr	r3, [r2, #24]
 800388a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800388e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	6993      	ldr	r3, [r2, #24]
 8003894:	6929      	ldr	r1, [r5, #16]
 8003896:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800389a:	6193      	str	r3, [r2, #24]
      break;
 800389c:	e7e7      	b.n	800386e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800389e:	6800      	ldr	r0, [r0, #0]
 80038a0:	f7ff fdc0 	bl	8003424 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	69d3      	ldr	r3, [r2, #28]
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ae:	6822      	ldr	r2, [r4, #0]
 80038b0:	69d3      	ldr	r3, [r2, #28]
 80038b2:	f023 0304 	bic.w	r3, r3, #4
 80038b6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	69d3      	ldr	r3, [r2, #28]
 80038bc:	6929      	ldr	r1, [r5, #16]
 80038be:	430b      	orrs	r3, r1
 80038c0:	61d3      	str	r3, [r2, #28]
      break;
 80038c2:	e7d4      	b.n	800386e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038c4:	6800      	ldr	r0, [r0, #0]
 80038c6:	f7ff fddf 	bl	8003488 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	69d3      	ldr	r3, [r2, #28]
 80038ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038d2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	69d3      	ldr	r3, [r2, #28]
 80038d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	69d3      	ldr	r3, [r2, #28]
 80038e2:	6929      	ldr	r1, [r5, #16]
 80038e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038e8:	61d3      	str	r3, [r2, #28]
      break;
 80038ea:	e7c0      	b.n	800386e <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80038ec:	2002      	movs	r0, #2
 80038ee:	e7c1      	b.n	8003874 <HAL_TIM_PWM_ConfigChannel+0x54>

080038f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038f0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f4:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80038fc:	430a      	orrs	r2, r1
 80038fe:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003902:	6082      	str	r2, [r0, #8]
}
 8003904:	bc10      	pop	{r4}
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003908:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d066      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xd6>
{
 8003910:	b510      	push	{r4, lr}
 8003912:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003914:	2301      	movs	r3, #1
 8003916:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800391a:	2302      	movs	r3, #2
 800391c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003920:	6802      	ldr	r2, [r0, #0]
 8003922:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003924:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003928:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800392c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800392e:	680b      	ldr	r3, [r1, #0]
 8003930:	2b60      	cmp	r3, #96	; 0x60
 8003932:	d040      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0xae>
 8003934:	d822      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x74>
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d047      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0xc2>
 800393a:	d90b      	bls.n	8003954 <HAL_TIM_ConfigClockSource+0x4c>
 800393c:	2b50      	cmp	r3, #80	; 0x50
 800393e:	d10e      	bne.n	800395e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003940:	68ca      	ldr	r2, [r1, #12]
 8003942:	6849      	ldr	r1, [r1, #4]
 8003944:	6800      	ldr	r0, [r0, #0]
 8003946:	f7ff fdc3 	bl	80034d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800394a:	2150      	movs	r1, #80	; 0x50
 800394c:	6820      	ldr	r0, [r4, #0]
 800394e:	f7ff fde4 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8003952:	e004      	b.n	800395e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003954:	2b20      	cmp	r3, #32
 8003956:	d00c      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x6a>
 8003958:	d908      	bls.n	800396c <HAL_TIM_ConfigClockSource+0x64>
 800395a:	2b30      	cmp	r3, #48	; 0x30
 800395c:	d009      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 800395e:	2301      	movs	r3, #1
 8003960:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003964:	2000      	movs	r0, #0
 8003966:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800396a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800396c:	b10b      	cbz	r3, 8003972 <HAL_TIM_ConfigClockSource+0x6a>
 800396e:	2b10      	cmp	r3, #16
 8003970:	d1f5      	bne.n	800395e <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003972:	4619      	mov	r1, r3
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	f7ff fdd0 	bl	800351a <TIM_ITRx_SetConfig>
        break;
 800397a:	e7f0      	b.n	800395e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800397c:	2b70      	cmp	r3, #112	; 0x70
 800397e:	d00e      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x96>
 8003980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003984:	d1eb      	bne.n	800395e <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	68cb      	ldr	r3, [r1, #12]
 8003988:	684a      	ldr	r2, [r1, #4]
 800398a:	6889      	ldr	r1, [r1, #8]
 800398c:	6800      	ldr	r0, [r0, #0]
 800398e:	f7ff ffaf 	bl	80038f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	6893      	ldr	r3, [r2, #8]
 8003996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399a:	6093      	str	r3, [r2, #8]
      break;
 800399c:	e7df      	b.n	800395e <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	68cb      	ldr	r3, [r1, #12]
 80039a0:	684a      	ldr	r2, [r1, #4]
 80039a2:	6889      	ldr	r1, [r1, #8]
 80039a4:	6800      	ldr	r0, [r0, #0]
 80039a6:	f7ff ffa3 	bl	80038f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80039b2:	6093      	str	r3, [r2, #8]
      break;
 80039b4:	e7d3      	b.n	800395e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b6:	68ca      	ldr	r2, [r1, #12]
 80039b8:	6849      	ldr	r1, [r1, #4]
 80039ba:	6800      	ldr	r0, [r0, #0]
 80039bc:	f7ff fd9a 	bl	80034f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c0:	2160      	movs	r1, #96	; 0x60
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	f7ff fda9 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 80039c8:	e7c9      	b.n	800395e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	68ca      	ldr	r2, [r1, #12]
 80039cc:	6849      	ldr	r1, [r1, #4]
 80039ce:	6800      	ldr	r0, [r0, #0]
 80039d0:	f7ff fd7e 	bl	80034d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039d4:	2140      	movs	r1, #64	; 0x40
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	f7ff fd9f 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 80039dc:	e7bf      	b.n	800395e <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80039de:	2002      	movs	r0, #2
}
 80039e0:	4770      	bx	lr

080039e2 <TIM_SlaveTimer_SetConfig>:
{
 80039e2:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	6804      	ldr	r4, [r0, #0]
 80039e6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80039ec:	684b      	ldr	r3, [r1, #4]
 80039ee:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80039f0:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80039f4:	680a      	ldr	r2, [r1, #0]
 80039f6:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80039f8:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80039fa:	684b      	ldr	r3, [r1, #4]
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d02c      	beq.n	8003a5a <TIM_SlaveTimer_SetConfig+0x78>
 8003a00:	d80c      	bhi.n	8003a1c <TIM_SlaveTimer_SetConfig+0x3a>
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d014      	beq.n	8003a30 <TIM_SlaveTimer_SetConfig+0x4e>
 8003a06:	2b50      	cmp	r3, #80	; 0x50
 8003a08:	d106      	bne.n	8003a18 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0a:	690a      	ldr	r2, [r1, #16]
 8003a0c:	6889      	ldr	r1, [r1, #8]
 8003a0e:	6800      	ldr	r0, [r0, #0]
 8003a10:	f7ff fd5e 	bl	80034d0 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8003a14:	2000      	movs	r0, #0
      break;
 8003a16:	e028      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 8003a18:	2000      	movs	r0, #0
 8003a1a:	e026      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x88>
 8003a1c:	2b70      	cmp	r3, #112	; 0x70
 8003a1e:	d123      	bne.n	8003a68 <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 8003a20:	690b      	ldr	r3, [r1, #16]
 8003a22:	688a      	ldr	r2, [r1, #8]
 8003a24:	68c9      	ldr	r1, [r1, #12]
 8003a26:	6800      	ldr	r0, [r0, #0]
 8003a28:	f7ff ff62 	bl	80038f0 <TIM_ETR_SetConfig>
  return HAL_OK;
 8003a2c:	2000      	movs	r0, #0
      break;
 8003a2e:	e01c      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x88>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003a30:	680b      	ldr	r3, [r1, #0]
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d01a      	beq.n	8003a6c <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 8003a36:	6803      	ldr	r3, [r0, #0]
 8003a38:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	6a1a      	ldr	r2, [r3, #32]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a42:	6802      	ldr	r2, [r0, #0]
 8003a44:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a4a:	6909      	ldr	r1, [r1, #16]
 8003a4c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003a50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003a52:	6803      	ldr	r3, [r0, #0]
 8003a54:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8003a56:	2000      	movs	r0, #0
      break;
 8003a58:	e007      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5a:	690a      	ldr	r2, [r1, #16]
 8003a5c:	6889      	ldr	r1, [r1, #8]
 8003a5e:	6800      	ldr	r0, [r0, #0]
 8003a60:	f7ff fd48 	bl	80034f4 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003a64:	2000      	movs	r0, #0
      break;
 8003a66:	e000      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 8003a68:	2000      	movs	r0, #0
}
 8003a6a:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	e7fc      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x88>

08003a70 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003a70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d022      	beq.n	8003abe <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	2302      	movs	r3, #2
 8003a84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a88:	f7ff ffab 	bl	80039e2 <TIM_SlaveTimer_SetConfig>
 8003a8c:	b980      	cbnz	r0, 8003ab0 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	68d3      	ldr	r3, [r2, #12]
 8003a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a96:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	68d3      	ldr	r3, [r2, #12]
 8003a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa0:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003aae:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003abc:	e7f7      	b.n	8003aae <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8003abe:	2002      	movs	r0, #2
}
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac2:	f001 011f 	and.w	r1, r1, #31
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003acc:	6a03      	ldr	r3, [r0, #32]
 8003ace:	ea23 030c 	bic.w	r3, r3, ip
 8003ad2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ad4:	6a03      	ldr	r3, [r0, #32]
 8003ad6:	fa02 f101 	lsl.w	r1, r2, r1
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6203      	str	r3, [r0, #32]
}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_PWM_Start>:
{
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	bb51      	cbnz	r1, 8003b3e <HAL_TIM_PWM_Start+0x5e>
 8003ae8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	bf18      	it	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d15b      	bne.n	8003bb0 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d139      	bne.n	8003b70 <HAL_TIM_PWM_Start+0x90>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b02:	2201      	movs	r2, #1
 8003b04:	4601      	mov	r1, r0
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	f7ff ffdb 	bl	8003ac2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <HAL_TIM_PWM_Start+0xd8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03d      	beq.n	8003b90 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <HAL_TIM_PWM_Start+0xd8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d03e      	beq.n	8003b9a <HAL_TIM_PWM_Start+0xba>
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d03b      	beq.n	8003b9a <HAL_TIM_PWM_Start+0xba>
 8003b22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d037      	beq.n	8003b9a <HAL_TIM_PWM_Start+0xba>
 8003b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d033      	beq.n	8003b9a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e039      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b3e:	2904      	cmp	r1, #4
 8003b40:	d008      	beq.n	8003b54 <HAL_TIM_PWM_Start+0x74>
 8003b42:	2908      	cmp	r1, #8
 8003b44:	d00d      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x82>
 8003b46:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	bf18      	it	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	e7cf      	b.n	8003af4 <HAL_TIM_PWM_Start+0x14>
 8003b54:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	bf18      	it	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	e7c8      	b.n	8003af4 <HAL_TIM_PWM_Start+0x14>
 8003b62:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	bf18      	it	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	e7c1      	b.n	8003af4 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b70:	2804      	cmp	r0, #4
 8003b72:	d005      	beq.n	8003b80 <HAL_TIM_PWM_Start+0xa0>
 8003b74:	2808      	cmp	r0, #8
 8003b76:	d007      	beq.n	8003b88 <HAL_TIM_PWM_Start+0xa8>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003b7e:	e7c0      	b.n	8003b02 <HAL_TIM_PWM_Start+0x22>
 8003b80:	2302      	movs	r3, #2
 8003b82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003b86:	e7bc      	b.n	8003b02 <HAL_TIM_PWM_Start+0x22>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b8e:	e7b8      	b.n	8003b02 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
 8003b98:	e7bc      	b.n	8003b14 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba0:	2a06      	cmp	r2, #6
 8003ba2:	d007      	beq.n	8003bb4 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003bac:	2000      	movs	r0, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8003bb0:	2001      	movs	r0, #1
}
 8003bb2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	e7fc      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xd2>
 8003bb8:	40012c00 	.word	0x40012c00

08003bbc <HAL_TIM_PWM_Start_DMA>:
{
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bc2:	460d      	mov	r5, r1
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d12d      	bne.n	8003c24 <HAL_TIM_PWM_Start_DMA+0x68>
 8003bc8:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8003bcc:	b2c0      	uxtb	r0, r0
 8003bce:	2802      	cmp	r0, #2
 8003bd0:	bf14      	ite	ne
 8003bd2:	2000      	movne	r0, #0
 8003bd4:	2001      	moveq	r0, #1
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	f040 80f8 	bne.w	8003dcc <HAL_TIM_PWM_Start_DMA+0x210>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003bdc:	2d00      	cmp	r5, #0
 8003bde:	d13d      	bne.n	8003c5c <HAL_TIM_PWM_Start_DMA+0xa0>
 8003be0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	2a01      	cmp	r2, #1
 8003be8:	bf14      	ite	ne
 8003bea:	2200      	movne	r2, #0
 8003bec:	2201      	moveq	r2, #1
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	f000 80ee 	beq.w	8003dd0 <HAL_TIM_PWM_Start_DMA+0x214>
    if ((pData == NULL) && (Length > 0U))
 8003bf4:	2e00      	cmp	r6, #0
 8003bf6:	d04d      	beq.n	8003c94 <HAL_TIM_PWM_Start_DMA+0xd8>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf8:	2d00      	cmp	r5, #0
 8003bfa:	d14f      	bne.n	8003c9c <HAL_TIM_PWM_Start_DMA+0xe0>
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 8003c02:	2d0c      	cmp	r5, #12
 8003c04:	d870      	bhi.n	8003ce8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003c06:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003c0a:	0059      	.short	0x0059
 8003c0c:	006f006f 	.word	0x006f006f
 8003c10:	008d006f 	.word	0x008d006f
 8003c14:	006f006f 	.word	0x006f006f
 8003c18:	00a4006f 	.word	0x00a4006f
 8003c1c:	006f006f 	.word	0x006f006f
 8003c20:	00bb006f 	.word	0x00bb006f
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c24:	2904      	cmp	r1, #4
 8003c26:	d009      	beq.n	8003c3c <HAL_TIM_PWM_Start_DMA+0x80>
 8003c28:	2908      	cmp	r1, #8
 8003c2a:	d00f      	beq.n	8003c4c <HAL_TIM_PWM_Start_DMA+0x90>
 8003c2c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8003c30:	b2c0      	uxtb	r0, r0
 8003c32:	2802      	cmp	r0, #2
 8003c34:	bf14      	ite	ne
 8003c36:	2000      	movne	r0, #0
 8003c38:	2001      	moveq	r0, #1
 8003c3a:	e7cc      	b.n	8003bd6 <HAL_TIM_PWM_Start_DMA+0x1a>
 8003c3c:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8003c40:	b2c0      	uxtb	r0, r0
 8003c42:	2802      	cmp	r0, #2
 8003c44:	bf14      	ite	ne
 8003c46:	2000      	movne	r0, #0
 8003c48:	2001      	moveq	r0, #1
 8003c4a:	e7c4      	b.n	8003bd6 <HAL_TIM_PWM_Start_DMA+0x1a>
 8003c4c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003c50:	b2c0      	uxtb	r0, r0
 8003c52:	2802      	cmp	r0, #2
 8003c54:	bf14      	ite	ne
 8003c56:	2000      	movne	r0, #0
 8003c58:	2001      	moveq	r0, #1
 8003c5a:	e7bc      	b.n	8003bd6 <HAL_TIM_PWM_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c5c:	2d04      	cmp	r5, #4
 8003c5e:	d009      	beq.n	8003c74 <HAL_TIM_PWM_Start_DMA+0xb8>
 8003c60:	2d08      	cmp	r5, #8
 8003c62:	d00f      	beq.n	8003c84 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c64:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	2a01      	cmp	r2, #1
 8003c6c:	bf14      	ite	ne
 8003c6e:	2200      	movne	r2, #0
 8003c70:	2201      	moveq	r2, #1
 8003c72:	e7bc      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x32>
 8003c74:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	2a01      	cmp	r2, #1
 8003c7c:	bf14      	ite	ne
 8003c7e:	2200      	movne	r2, #0
 8003c80:	2201      	moveq	r2, #1
 8003c82:	e7b4      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x32>
 8003c84:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	2a01      	cmp	r2, #1
 8003c8c:	bf14      	ite	ne
 8003c8e:	2200      	movne	r2, #0
 8003c90:	2201      	moveq	r2, #1
 8003c92:	e7ac      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x32>
    if ((pData == NULL) && (Length > 0U))
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0af      	beq.n	8003bf8 <HAL_TIM_PWM_Start_DMA+0x3c>
      return HAL_ERROR;
 8003c98:	2001      	movs	r0, #1
 8003c9a:	e09a      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9c:	2d04      	cmp	r5, #4
 8003c9e:	d005      	beq.n	8003cac <HAL_TIM_PWM_Start_DMA+0xf0>
 8003ca0:	2d08      	cmp	r5, #8
 8003ca2:	d007      	beq.n	8003cb4 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8003caa:	e7aa      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x46>
 8003cac:	2202      	movs	r2, #2
 8003cae:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8003cb2:	e7a6      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x46>
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8003cba:	e7a2      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x46>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cbe:	494a      	ldr	r1, [pc, #296]	; (8003de8 <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003cc0:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cc4:	4949      	ldr	r1, [pc, #292]	; (8003dec <HAL_TIM_PWM_Start_DMA+0x230>)
 8003cc6:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003cc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cca:	4949      	ldr	r1, [pc, #292]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x234>)
 8003ccc:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	3234      	adds	r2, #52	; 0x34
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003cd6:	f7fe f985 	bl	8001fe4 <HAL_DMA_Start_IT>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d17a      	bne.n	8003dd4 <HAL_TIM_PWM_Start_DMA+0x218>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	68d3      	ldr	r3, [r2, #12]
 8003ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	4629      	mov	r1, r5
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	f7ff fee8 	bl	8003ac2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	4a3f      	ldr	r2, [pc, #252]	; (8003df4 <HAL_TIM_PWM_Start_DMA+0x238>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d058      	beq.n	8003dac <HAL_TIM_PWM_Start_DMA+0x1f0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	4a3d      	ldr	r2, [pc, #244]	; (8003df4 <HAL_TIM_PWM_Start_DMA+0x238>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d059      	beq.n	8003db6 <HAL_TIM_PWM_Start_DMA+0x1fa>
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d056      	beq.n	8003db6 <HAL_TIM_PWM_Start_DMA+0x1fa>
 8003d08:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d052      	beq.n	8003db6 <HAL_TIM_PWM_Start_DMA+0x1fa>
 8003d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04e      	beq.n	8003db6 <HAL_TIM_PWM_Start_DMA+0x1fa>
    __HAL_TIM_ENABLE(htim);
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	e056      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d26:	4930      	ldr	r1, [pc, #192]	; (8003de8 <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003d28:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d2c:	492f      	ldr	r1, [pc, #188]	; (8003dec <HAL_TIM_PWM_Start_DMA+0x230>)
 8003d2e:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d32:	492f      	ldr	r1, [pc, #188]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x234>)
 8003d34:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	3238      	adds	r2, #56	; 0x38
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d3e:	f7fe f951 	bl	8001fe4 <HAL_DMA_Start_IT>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d148      	bne.n	8003dd8 <HAL_TIM_PWM_Start_DMA+0x21c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d46:	6822      	ldr	r2, [r4, #0]
 8003d48:	68d3      	ldr	r3, [r2, #12]
 8003d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d4e:	60d3      	str	r3, [r2, #12]
      break;
 8003d50:	e7ca      	b.n	8003ce8 <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d54:	4924      	ldr	r1, [pc, #144]	; (8003de8 <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003d56:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d5a:	4924      	ldr	r1, [pc, #144]	; (8003dec <HAL_TIM_PWM_Start_DMA+0x230>)
 8003d5c:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003d5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d60:	4923      	ldr	r1, [pc, #140]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x234>)
 8003d62:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	323c      	adds	r2, #60	; 0x3c
 8003d68:	4631      	mov	r1, r6
 8003d6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d6c:	f7fe f93a 	bl	8001fe4 <HAL_DMA_Start_IT>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d133      	bne.n	8003ddc <HAL_TIM_PWM_Start_DMA+0x220>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	68d3      	ldr	r3, [r2, #12]
 8003d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d7c:	60d3      	str	r3, [r2, #12]
      break;
 8003d7e:	e7b3      	b.n	8003ce8 <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d82:	4919      	ldr	r1, [pc, #100]	; (8003de8 <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003d84:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d88:	4918      	ldr	r1, [pc, #96]	; (8003dec <HAL_TIM_PWM_Start_DMA+0x230>)
 8003d8a:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003d8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d8e:	4918      	ldr	r1, [pc, #96]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x234>)
 8003d90:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	3240      	adds	r2, #64	; 0x40
 8003d96:	4631      	mov	r1, r6
 8003d98:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d9a:	f7fe f923 	bl	8001fe4 <HAL_DMA_Start_IT>
 8003d9e:	b9f8      	cbnz	r0, 8003de0 <HAL_TIM_PWM_Start_DMA+0x224>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003da0:	6822      	ldr	r2, [r4, #0]
 8003da2:	68d3      	ldr	r3, [r2, #12]
 8003da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da8:	60d3      	str	r3, [r2, #12]
      break;
 8003daa:	e79d      	b.n	8003ce8 <HAL_TIM_PWM_Start_DMA+0x12c>
    __HAL_TIM_MOE_ENABLE(htim);
 8003dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
 8003db4:	e7a1      	b.n	8003cfa <HAL_TIM_PWM_Start_DMA+0x13e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	2a06      	cmp	r2, #6
 8003dbe:	d011      	beq.n	8003de4 <HAL_TIM_PWM_Start_DMA+0x228>
      __HAL_TIM_ENABLE(htim);
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003dc8:	2000      	movs	r0, #0
 8003dca:	e002      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_BUSY;
 8003dcc:	2002      	movs	r0, #2
 8003dce:	e000      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_ERROR;
 8003dd0:	2001      	movs	r0, #1
}
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	e7fc      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 8003dd8:	2001      	movs	r0, #1
 8003dda:	e7fa      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 8003ddc:	2001      	movs	r0, #1
 8003dde:	e7f8      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 8003de0:	2001      	movs	r0, #1
 8003de2:	e7f6      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
  return HAL_OK;
 8003de4:	2000      	movs	r0, #0
 8003de6:	e7f4      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x216>
 8003de8:	0800358b 	.word	0x0800358b
 8003dec:	080035fb 	.word	0x080035fb
 8003df0:	0800363b 	.word	0x0800363b
 8003df4:	40012c00 	.word	0x40012c00

08003df8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d02c      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8003e00:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8003e02:	2301      	movs	r3, #1
 8003e04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e0e:	6803      	ldr	r3, [r0, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e12:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e14:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e18:	680a      	ldr	r2, [r1, #0]
 8003e1a:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e20:	6803      	ldr	r3, [r0, #0]
 8003e22:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00a      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d007      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003e2e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d104      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e42:	684a      	ldr	r2, [r1, #4]
 8003e44:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e46:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003e54:	4618      	mov	r0, r3
}
 8003e56:	bc10      	pop	{r4}
 8003e58:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003e5a:	2002      	movs	r0, #2
}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00

08003e64 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d022      	beq.n	8003eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e72:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e78:	688a      	ldr	r2, [r1, #8]
 8003e7a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	684a      	ldr	r2, [r1, #4]
 8003e82:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e88:	680a      	ldr	r2, [r1, #0]
 8003e8a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e90:	690a      	ldr	r2, [r1, #16]
 8003e92:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e98:	694a      	ldr	r2, [r1, #20]
 8003e9a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea0:	69ca      	ldr	r2, [r1, #28]
 8003ea2:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ea4:	6802      	ldr	r2, [r0, #0]
 8003ea6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003eae:	4618      	mov	r0, r3
 8003eb0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003eb2:	2002      	movs	r0, #2
}
 8003eb4:	4770      	bx	lr

08003eb6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb6:	6802      	ldr	r2, [r0, #0]
 8003eb8:	68d3      	ldr	r3, [r2, #12]
 8003eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ebe:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec0:	6802      	ldr	r2, [r0, #0]
 8003ec2:	6953      	ldr	r3, [r2, #20]
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d005      	beq.n	8003edc <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003eda:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003edc:	6802      	ldr	r2, [r0, #0]
 8003ede:	68d3      	ldr	r3, [r2, #12]
 8003ee0:	f023 0310 	bic.w	r3, r3, #16
 8003ee4:	60d3      	str	r3, [r2, #12]
 8003ee6:	e7f3      	b.n	8003ed0 <UART_EndRxTransfer+0x1a>

08003ee8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ee8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b21      	cmp	r3, #33	; 0x21
 8003ef0:	d001      	beq.n	8003ef6 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2002      	movs	r0, #2
  }
}
 8003ef4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef6:	6883      	ldr	r3, [r0, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d017      	beq.n	8003f2e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003efe:	6a03      	ldr	r3, [r0, #32]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	6202      	str	r2, [r0, #32]
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003f0a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003f14:	b94b      	cbnz	r3, 8003f2a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f16:	6802      	ldr	r2, [r0, #0]
 8003f18:	68d3      	ldr	r3, [r2, #12]
 8003f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f20:	6802      	ldr	r2, [r0, #0]
 8003f22:	68d3      	ldr	r3, [r2, #12]
 8003f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f28:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2e:	6903      	ldr	r3, [r0, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e4      	bne.n	8003efe <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f34:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	6802      	ldr	r2, [r0, #0]
 8003f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8003f40:	6a03      	ldr	r3, [r0, #32]
 8003f42:	3302      	adds	r3, #2
 8003f44:	6203      	str	r3, [r0, #32]
 8003f46:	e7e0      	b.n	8003f0a <UART_Transmit_IT+0x22>

08003f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f4c:	6802      	ldr	r2, [r0, #0]
 8003f4e:	6913      	ldr	r3, [r2, #16]
 8003f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f54:	68c1      	ldr	r1, [r0, #12]
 8003f56:	430b      	orrs	r3, r1
 8003f58:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f5a:	6883      	ldr	r3, [r0, #8]
 8003f5c:	6902      	ldr	r2, [r0, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	6942      	ldr	r2, [r0, #20]
 8003f62:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003f64:	6801      	ldr	r1, [r0, #0]
 8003f66:	68cb      	ldr	r3, [r1, #12]
 8003f68:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f6c:	f023 030c 	bic.w	r3, r3, #12
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f74:	6802      	ldr	r2, [r0, #0]
 8003f76:	6953      	ldr	r3, [r2, #20]
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	6981      	ldr	r1, [r0, #24]
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003f82:	6802      	ldr	r2, [r0, #0]
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <UART_SetConfig+0x8c>)
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d020      	beq.n	8003fcc <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f8a:	f7fe fe7d 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 8003f8e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f98:	6863      	ldr	r3, [r4, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <UART_SetConfig+0x90>)
 8003fa2:	fba0 3102 	umull	r3, r1, r0, r2
 8003fa6:	0949      	lsrs	r1, r1, #5
 8003fa8:	2364      	movs	r3, #100	; 0x64
 8003faa:	fb03 2311 	mls	r3, r3, r1, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	3332      	adds	r3, #50	; 0x32
 8003fb2:	fba0 2303 	umull	r2, r3, r0, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fbc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fca:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7fe fe6c 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	e7dd      	b.n	8003f90 <UART_SetConfig+0x48>
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	51eb851f 	.word	0x51eb851f

08003fdc <UART_WaitOnFlagUntilTimeout>:
{
 8003fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	460f      	mov	r7, r1
 8003fe4:	4616      	mov	r6, r2
 8003fe6:	4699      	mov	r9, r3
 8003fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	682c      	ldr	r4, [r5, #0]
 8003fee:	6824      	ldr	r4, [r4, #0]
 8003ff0:	ea37 0304 	bics.w	r3, r7, r4
 8003ff4:	bf0c      	ite	eq
 8003ff6:	f04f 0c01 	moveq.w	ip, #1
 8003ffa:	f04f 0c00 	movne.w	ip, #0
 8003ffe:	45b4      	cmp	ip, r6
 8004000:	d11f      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8004002:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004006:	d0f1      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004008:	f1b8 0f00 	cmp.w	r8, #0
 800400c:	d005      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x3e>
 800400e:	f7fd fb19 	bl	8001644 <HAL_GetTick>
 8004012:	eba0 0009 	sub.w	r0, r0, r9
 8004016:	4540      	cmp	r0, r8
 8004018:	d9e8      	bls.n	8003fec <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401a:	682a      	ldr	r2, [r5, #0]
 800401c:	68d3      	ldr	r3, [r2, #12]
 800401e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004022:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	682a      	ldr	r2, [r5, #0]
 8004026:	6953      	ldr	r3, [r2, #20]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800402e:	2320      	movs	r3, #32
 8004030:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004038:	2300      	movs	r3, #0
 800403a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 800403e:	2003      	movs	r0, #3
 8004040:	e000      	b.n	8004044 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8004042:	2000      	movs	r0, #0
}
 8004044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004048 <HAL_UART_Init>:
  if (huart == NULL)
 8004048:	b358      	cbz	r0, 80040a2 <HAL_UART_Init+0x5a>
{
 800404a:	b510      	push	{r4, lr}
 800404c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800404e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004052:	b30b      	cbz	r3, 8004098 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004054:	2324      	movs	r3, #36	; 0x24
 8004056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	68d3      	ldr	r3, [r2, #12]
 800405e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004062:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004064:	4620      	mov	r0, r4
 8004066:	f7ff ff6f 	bl	8003f48 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	6913      	ldr	r3, [r2, #16]
 800406e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004072:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004074:	6822      	ldr	r2, [r4, #0]
 8004076:	6953      	ldr	r3, [r2, #20]
 8004078:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800407c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	68d3      	ldr	r3, [r2, #12]
 8004082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004086:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	2000      	movs	r0, #0
 800408a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800408c:	2320      	movs	r3, #32
 800408e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004092:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004096:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004098:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800409c:	f7fd f980 	bl	80013a0 <HAL_UART_MspInit>
 80040a0:	e7d8      	b.n	8004054 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80040a2:	2001      	movs	r0, #1
}
 80040a4:	4770      	bx	lr

080040a6 <HAL_UART_Transmit>:
{
 80040a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80040ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d154      	bne.n	8004162 <HAL_UART_Transmit+0xbc>
 80040b8:	4604      	mov	r4, r0
 80040ba:	460d      	mov	r5, r1
 80040bc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80040be:	2900      	cmp	r1, #0
 80040c0:	d053      	beq.n	800416a <HAL_UART_Transmit+0xc4>
 80040c2:	2a00      	cmp	r2, #0
 80040c4:	d053      	beq.n	800416e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80040c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d051      	beq.n	8004172 <HAL_UART_Transmit+0xcc>
 80040ce:	2301      	movs	r3, #1
 80040d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d8:	2321      	movs	r3, #33	; 0x21
 80040da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80040de:	f7fd fab1 	bl	8001644 <HAL_GetTick>
 80040e2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80040e4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80040e8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ec:	68a3      	ldr	r3, [r4, #8]
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d005      	beq.n	8004100 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80040f4:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80040f8:	2300      	movs	r3, #0
 80040fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80040fe:	e012      	b.n	8004126 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	b113      	cbz	r3, 800410a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8004104:	f04f 0800 	mov.w	r8, #0
 8004108:	e7f6      	b.n	80040f8 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 800410a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800410c:	2500      	movs	r5, #0
 800410e:	e7f3      	b.n	80040f8 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004110:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800411c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800411e:	b292      	uxth	r2, r2
 8004120:	3a01      	subs	r2, #1
 8004122:	b292      	uxth	r2, r2
 8004124:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004126:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004128:	b29b      	uxth	r3, r3
 800412a:	b173      	cbz	r3, 800414a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412c:	9600      	str	r6, [sp, #0]
 800412e:	463b      	mov	r3, r7
 8004130:	2200      	movs	r2, #0
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	4620      	mov	r0, r4
 8004136:	f7ff ff51 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 800413a:	b9e0      	cbnz	r0, 8004176 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 800413c:	2d00      	cmp	r5, #0
 800413e:	d0e7      	beq.n	8004110 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004140:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004148:	e7e8      	b.n	800411c <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414a:	9600      	str	r6, [sp, #0]
 800414c:	463b      	mov	r3, r7
 800414e:	2200      	movs	r2, #0
 8004150:	2140      	movs	r1, #64	; 0x40
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff ff42 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8004158:	b978      	cbnz	r0, 800417a <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800415a:	2320      	movs	r3, #32
 800415c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004160:	e000      	b.n	8004164 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8004162:	2002      	movs	r0, #2
}
 8004164:	b002      	add	sp, #8
 8004166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800416a:	2001      	movs	r0, #1
 800416c:	e7fa      	b.n	8004164 <HAL_UART_Transmit+0xbe>
 800416e:	2001      	movs	r0, #1
 8004170:	e7f8      	b.n	8004164 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8004172:	2002      	movs	r0, #2
 8004174:	e7f6      	b.n	8004164 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8004176:	2003      	movs	r0, #3
 8004178:	e7f4      	b.n	8004164 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 800417a:	2003      	movs	r0, #3
 800417c:	e7f2      	b.n	8004164 <HAL_UART_Transmit+0xbe>

0800417e <HAL_UART_TxCpltCallback>:
}
 800417e:	4770      	bx	lr

08004180 <UART_EndTransmit_IT>:
{
 8004180:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004182:	6801      	ldr	r1, [r0, #0]
 8004184:	68ca      	ldr	r2, [r1, #12]
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800418c:	2220      	movs	r2, #32
 800418e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004192:	f7ff fff4 	bl	800417e <HAL_UART_TxCpltCallback>
}
 8004196:	2000      	movs	r0, #0
 8004198:	bd08      	pop	{r3, pc}

0800419a <HAL_UART_RxCpltCallback>:
}
 800419a:	4770      	bx	lr

0800419c <HAL_UART_ErrorCallback>:
}
 800419c:	4770      	bx	lr

0800419e <UART_DMAAbortOnError>:
{
 800419e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041a6:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80041a8:	f7ff fff8 	bl	800419c <HAL_UART_ErrorCallback>
}
 80041ac:	bd08      	pop	{r3, pc}

080041ae <HAL_UARTEx_RxEventCallback>:
}
 80041ae:	4770      	bx	lr

080041b0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b22      	cmp	r3, #34	; 0x22
 80041b8:	d160      	bne.n	800427c <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ba:	6883      	ldr	r3, [r0, #8]
 80041bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c0:	d046      	beq.n	8004250 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041c2:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d004      	beq.n	80041d4 <UART_Receive_IT+0x24>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d14d      	bne.n	800426a <UART_Receive_IT+0xba>
 80041ce:	6903      	ldr	r3, [r0, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d14a      	bne.n	800426a <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041d4:	6803      	ldr	r3, [r0, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80041da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80041dc:	3301      	adds	r3, #1
 80041de:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80041e0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d148      	bne.n	8004280 <UART_Receive_IT+0xd0>
{
 80041ee:	b500      	push	{lr}
 80041f0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f2:	6802      	ldr	r2, [r0, #0]
 80041f4:	68d3      	ldr	r3, [r2, #12]
 80041f6:	f023 0320 	bic.w	r3, r3, #32
 80041fa:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041fc:	6802      	ldr	r2, [r0, #0]
 80041fe:	68d3      	ldr	r3, [r2, #12]
 8004200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004204:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004206:	6802      	ldr	r2, [r0, #0]
 8004208:	6953      	ldr	r3, [r2, #20]
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004210:	2320      	movs	r3, #32
 8004212:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004216:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004218:	2b01      	cmp	r3, #1
 800421a:	d12c      	bne.n	8004276 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421c:	2300      	movs	r3, #0
 800421e:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	6802      	ldr	r2, [r0, #0]
 8004222:	68d3      	ldr	r3, [r2, #12]
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f012 0f10 	tst.w	r2, #16
 8004232:	d006      	beq.n	8004242 <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004234:	2200      	movs	r2, #0
 8004236:	9201      	str	r2, [sp, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	9201      	str	r2, [sp, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004242:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004244:	f7ff ffb3 	bl	80041ae <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004248:	2000      	movs	r0, #0
}
 800424a:	b003      	add	sp, #12
 800424c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004250:	6902      	ldr	r2, [r0, #16]
 8004252:	2a00      	cmp	r2, #0
 8004254:	d1b5      	bne.n	80041c2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004256:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004258:	6803      	ldr	r3, [r0, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004262:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004264:	3302      	adds	r3, #2
 8004266:	6283      	str	r3, [r0, #40]	; 0x28
 8004268:	e7ba      	b.n	80041e0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800426a:	6803      	ldr	r3, [r0, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004272:	7013      	strb	r3, [r2, #0]
 8004274:	e7b1      	b.n	80041da <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8004276:	f7ff ff90 	bl	800419a <HAL_UART_RxCpltCallback>
 800427a:	e7e5      	b.n	8004248 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 800427c:	2002      	movs	r0, #2
 800427e:	4770      	bx	lr
    return HAL_OK;
 8004280:	2000      	movs	r0, #0
}
 8004282:	4770      	bx	lr

08004284 <HAL_UART_IRQHandler>:
{
 8004284:	b530      	push	{r4, r5, lr}
 8004286:	b083      	sub	sp, #12
 8004288:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800428a:	6802      	ldr	r2, [r0, #0]
 800428c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800428e:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004290:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004292:	f013 050f 	ands.w	r5, r3, #15
 8004296:	d105      	bne.n	80042a4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004298:	f013 0f20 	tst.w	r3, #32
 800429c:	d002      	beq.n	80042a4 <HAL_UART_IRQHandler+0x20>
 800429e:	f010 0f20 	tst.w	r0, #32
 80042a2:	d119      	bne.n	80042d8 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042a4:	b12d      	cbz	r5, 80042b2 <HAL_UART_IRQHandler+0x2e>
 80042a6:	f011 0101 	ands.w	r1, r1, #1
 80042aa:	d119      	bne.n	80042e0 <HAL_UART_IRQHandler+0x5c>
 80042ac:	f410 7f90 	tst.w	r0, #288	; 0x120
 80042b0:	d116      	bne.n	80042e0 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042b4:	2901      	cmp	r1, #1
 80042b6:	d075      	beq.n	80043a4 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042bc:	d003      	beq.n	80042c6 <HAL_UART_IRQHandler+0x42>
 80042be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80042c2:	f040 80d7 	bne.w	8004474 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042ca:	d003      	beq.n	80042d4 <HAL_UART_IRQHandler+0x50>
 80042cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042d0:	f040 80d4 	bne.w	800447c <HAL_UART_IRQHandler+0x1f8>
}
 80042d4:	b003      	add	sp, #12
 80042d6:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 80042d8:	4620      	mov	r0, r4
 80042da:	f7ff ff69 	bl	80041b0 <UART_Receive_IT>
      return;
 80042de:	e7f9      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042e0:	f013 0f01 	tst.w	r3, #1
 80042e4:	d006      	beq.n	80042f4 <HAL_UART_IRQHandler+0x70>
 80042e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80042ea:	d003      	beq.n	80042f4 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f4:	f013 0f04 	tst.w	r3, #4
 80042f8:	d004      	beq.n	8004304 <HAL_UART_IRQHandler+0x80>
 80042fa:	b119      	cbz	r1, 8004304 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042fe:	f042 0202 	orr.w	r2, r2, #2
 8004302:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004304:	f013 0f02 	tst.w	r3, #2
 8004308:	d004      	beq.n	8004314 <HAL_UART_IRQHandler+0x90>
 800430a:	b119      	cbz	r1, 8004314 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800430c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800430e:	f042 0204 	orr.w	r2, r2, #4
 8004312:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004314:	f013 0f08 	tst.w	r3, #8
 8004318:	d007      	beq.n	800432a <HAL_UART_IRQHandler+0xa6>
 800431a:	f010 0f20 	tst.w	r0, #32
 800431e:	d100      	bne.n	8004322 <HAL_UART_IRQHandler+0x9e>
 8004320:	b119      	cbz	r1, 800432a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004322:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004324:	f042 0208 	orr.w	r2, r2, #8
 8004328:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800432c:	2a00      	cmp	r2, #0
 800432e:	d0d1      	beq.n	80042d4 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004330:	f013 0f20 	tst.w	r3, #32
 8004334:	d002      	beq.n	800433c <HAL_UART_IRQHandler+0xb8>
 8004336:	f010 0f20 	tst.w	r0, #32
 800433a:	d121      	bne.n	8004380 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004344:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004346:	f012 0f08 	tst.w	r2, #8
 800434a:	d100      	bne.n	800434e <HAL_UART_IRQHandler+0xca>
 800434c:	b323      	cbz	r3, 8004398 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 800434e:	4620      	mov	r0, r4
 8004350:	f7ff fdb1 	bl	8003eb6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	f012 0f40 	tst.w	r2, #64	; 0x40
 800435c:	d018      	beq.n	8004390 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004364:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004368:	b173      	cbz	r3, 8004388 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <HAL_UART_IRQHandler+0x200>)
 800436c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800436e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004370:	f7fd fe94 	bl	800209c <HAL_DMA_Abort_IT>
 8004374:	2800      	cmp	r0, #0
 8004376:	d0ad      	beq.n	80042d4 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004378:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800437a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800437c:	4798      	blx	r3
 800437e:	e7a9      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8004380:	4620      	mov	r0, r4
 8004382:	f7ff ff15 	bl	80041b0 <UART_Receive_IT>
 8004386:	e7d9      	b.n	800433c <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8004388:	4620      	mov	r0, r4
 800438a:	f7ff ff07 	bl	800419c <HAL_UART_ErrorCallback>
 800438e:	e7a1      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff ff03 	bl	800419c <HAL_UART_ErrorCallback>
 8004396:	e79d      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff feff 	bl	800419c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439e:	2300      	movs	r3, #0
 80043a0:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 80043a2:	e797      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80043a4:	f013 0f10 	tst.w	r3, #16
 80043a8:	d086      	beq.n	80042b8 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043aa:	f010 0f10 	tst.w	r0, #16
 80043ae:	d083      	beq.n	80042b8 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043b0:	2300      	movs	r3, #0
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	6813      	ldr	r3, [r2, #0]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	6853      	ldr	r3, [r2, #4]
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043be:	6953      	ldr	r3, [r2, #20]
 80043c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043c4:	d032      	beq.n	800442c <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043c8:	680b      	ldr	r3, [r1, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d080      	beq.n	80042d4 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043d2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80043d4:	4298      	cmp	r0, r3
 80043d6:	f67f af7d 	bls.w	80042d4 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 80043da:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043dc:	698b      	ldr	r3, [r1, #24]
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d108      	bne.n	80043f4 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043e2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80043e4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	1ac9      	subs	r1, r1, r3
 80043ea:	b289      	uxth	r1, r1
 80043ec:	4620      	mov	r0, r4
 80043ee:	f7ff fede 	bl	80041ae <HAL_UARTEx_RxEventCallback>
      return;
 80043f2:	e76f      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f4:	68d3      	ldr	r3, [r2, #12]
 80043f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043fa:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	6822      	ldr	r2, [r4, #0]
 80043fe:	6953      	ldr	r3, [r2, #20]
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	6953      	ldr	r3, [r2, #20]
 800440a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440e:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004410:	2320      	movs	r3, #32
 8004412:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	2300      	movs	r3, #0
 8004418:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441a:	6822      	ldr	r2, [r4, #0]
 800441c:	68d3      	ldr	r3, [r2, #12]
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004424:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004426:	f7fd fe17 	bl	8002058 <HAL_DMA_Abort>
 800442a:	e7da      	b.n	80043e2 <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800442c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800442e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004430:	b29b      	uxth	r3, r3
 8004432:	1ac9      	subs	r1, r1, r3
 8004434:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8004436:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	f43f af4a 	beq.w	80042d4 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8004440:	2900      	cmp	r1, #0
 8004442:	f43f af47 	beq.w	80042d4 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004446:	68d3      	ldr	r3, [r2, #12]
 8004448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800444c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	6953      	ldr	r3, [r2, #20]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004458:	2320      	movs	r3, #32
 800445a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	2300      	movs	r3, #0
 8004460:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	68d3      	ldr	r3, [r2, #12]
 8004466:	f023 0310 	bic.w	r3, r3, #16
 800446a:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800446c:	4620      	mov	r0, r4
 800446e:	f7ff fe9e 	bl	80041ae <HAL_UARTEx_RxEventCallback>
      return;
 8004472:	e72f      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8004474:	4620      	mov	r0, r4
 8004476:	f7ff fd37 	bl	8003ee8 <UART_Transmit_IT>
    return;
 800447a:	e72b      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fe7f 	bl	8004180 <UART_EndTransmit_IT>
    return;
 8004482:	e727      	b.n	80042d4 <HAL_UART_IRQHandler+0x50>
 8004484:	0800419f 	.word	0x0800419f

08004488 <writeCmd>:
	{};
	displayDeselect();
}
*/

void writeCmd(uint8_t Command2Write){
 8004488:	b510      	push	{r4, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	f88d 0007 	strb.w	r0, [sp, #7]
inline void displaySetCmd(void) 	{HAL_GPIO_WritePin(DISP_DC_GPIO, DISP_DC_PIN, 0);}
 8004490:	4c0d      	ldr	r4, [pc, #52]	; (80044c8 <writeCmd+0x40>)
 8004492:	2200      	movs	r2, #0
 8004494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004498:	4620      	mov	r0, r4
 800449a:	f7fd ffff 	bl	800249c <HAL_GPIO_WritePin>
inline void displaySelect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 0);}
 800449e:	2200      	movs	r2, #0
 80044a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044a4:	4620      	mov	r0, r4
 80044a6:	f7fd fff9 	bl	800249c <HAL_GPIO_WritePin>
	displaySetCmd();
	displaySelect();
		HAL_SPI_Transmit(DISP_SPI_HANDLE, &Command2Write, 1, 1);
 80044aa:	2301      	movs	r3, #1
 80044ac:	461a      	mov	r2, r3
 80044ae:	f10d 0107 	add.w	r1, sp, #7
 80044b2:	4806      	ldr	r0, [pc, #24]	; (80044cc <writeCmd+0x44>)
 80044b4:	f7fe fdeb 	bl	800308e <HAL_SPI_Transmit>
inline void displayDeselect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 1);}
 80044b8:	2201      	movs	r2, #1
 80044ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044be:	4620      	mov	r0, r4
 80044c0:	f7fd ffec 	bl	800249c <HAL_GPIO_WritePin>
	displayDeselect();
}
 80044c4:	b002      	add	sp, #8
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	40010800 	.word	0x40010800
 80044cc:	20000830 	.word	0x20000830

080044d0 <writeCmdDual>:

void writeCmdDual(uint8_t cmd1, uint8_t cmd2){
 80044d0:	b510      	push	{r4, lr}
 80044d2:	b082      	sub	sp, #8
	uint8_t cmd[2] = {cmd1, cmd2};
 80044d4:	f88d 0004 	strb.w	r0, [sp, #4]
 80044d8:	f88d 1005 	strb.w	r1, [sp, #5]
inline void displaySetCmd(void) 	{HAL_GPIO_WritePin(DISP_DC_GPIO, DISP_DC_PIN, 0);}
 80044dc:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <writeCmdDual+0x44>)
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044e4:	4620      	mov	r0, r4
 80044e6:	f7fd ffd9 	bl	800249c <HAL_GPIO_WritePin>
inline void displaySelect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 0);}
 80044ea:	2200      	movs	r2, #0
 80044ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7fd ffd3 	bl	800249c <HAL_GPIO_WritePin>
	displaySetCmd();
	displaySelect();
		HAL_SPI_Transmit(DISP_SPI_HANDLE, &cmd, 2, 1);
 80044f6:	2301      	movs	r3, #1
 80044f8:	2202      	movs	r2, #2
 80044fa:	a901      	add	r1, sp, #4
 80044fc:	4806      	ldr	r0, [pc, #24]	; (8004518 <writeCmdDual+0x48>)
 80044fe:	f7fe fdc6 	bl	800308e <HAL_SPI_Transmit>
inline void displayDeselect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 1);}
 8004502:	2201      	movs	r2, #1
 8004504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004508:	4620      	mov	r0, r4
 800450a:	f7fd ffc7 	bl	800249c <HAL_GPIO_WritePin>
	displayDeselect();
}
 800450e:	b002      	add	sp, #8
 8004510:	bd10      	pop	{r4, pc}
 8004512:	bf00      	nop
 8004514:	40010800 	.word	0x40010800
 8004518:	20000830 	.word	0x20000830

0800451c <cmd_AddressingMode>:
	displaySelect();
		HAL_SPI_Transmit(DISP_SPI_HANDLE, &Data2Write, 1, 1);
	displayDeselect();
}

void cmd_AddressingMode(uint8_t mode){
 800451c:	b510      	push	{r4, lr}
 800451e:	4604      	mov	r4, r0
	writeCmd(0x20);			// Set Memory Addressing Mode
 8004520:	2020      	movs	r0, #32
 8004522:	f7ff ffb1 	bl	8004488 <writeCmd>
	writeCmd(mode);			//   Default => 2
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff ffae 	bl	8004488 <writeCmd>
}
 800452c:	bd10      	pop	{r4, pc}

0800452e <cmd_ColumnStartAddress>:

void cmd_ColumnStartAddress(uint8_t address){
 800452e:	b508      	push	{r3, lr}
// Set Lower Column Start Address for Page Addressing Mode
// Set Higher Column Start Address for Page Addressing Mode
	writeCmdDual(0x00+address%16, 0x10+address/16);
 8004530:	0901      	lsrs	r1, r0, #4
 8004532:	3110      	adds	r1, #16
 8004534:	f000 000f 	and.w	r0, r0, #15
 8004538:	f7ff ffca 	bl	80044d0 <writeCmdDual>
}
 800453c:	bd08      	pop	{r3, pc}

0800453e <cmd_PageStartAddress>:

void cmd_PageStartAddress(uint8_t page){
 800453e:	b508      	push	{r3, lr}
	writeCmd(0xB0|page);			// Set Page Start Address for Page Addressing Mode
 8004540:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
 8004544:	f7ff ffa0 	bl	8004488 <writeCmd>
}
 8004548:	bd08      	pop	{r3, pc}

0800454a <cmd_StartLine>:

void cmd_StartLine(uint8_t line){
 800454a:	b508      	push	{r3, lr}
	writeCmd(0x40|line);			// Set Display Start Line
 800454c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004550:	f7ff ff9a 	bl	8004488 <writeCmd>
	//   Default => 64 (0x00)
}
 8004554:	bd08      	pop	{r3, pc}

08004556 <cmd_ContrastControl>:


void cmd_ContrastControl(uint8_t contrast){
 8004556:	b510      	push	{r4, lr}
 8004558:	4604      	mov	r4, r0
	writeCmd(0x81);			// Set Contrast Control for Bank 0
 800455a:	2081      	movs	r0, #129	; 0x81
 800455c:	f7ff ff94 	bl	8004488 <writeCmd>
	writeCmd(contrast);		//
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff ff91 	bl	8004488 <writeCmd>
}
 8004566:	bd10      	pop	{r4, pc}

08004568 <cmd_SegmentRemap>:


void cmd_SegmentRemap(bool remap){
 8004568:	b508      	push	{r3, lr}
	writeCmd(0xA1 + 0x01*remap);	// 0xA1 => Column Address 0 Mapped to SEG131									// 0xA0 => Column Address 0 Mapped to SEG0
 800456a:	385f      	subs	r0, #95	; 0x5f
 800456c:	b2c0      	uxtb	r0, r0
 800456e:	f7ff ff8b 	bl	8004488 <writeCmd>
}
 8004572:	bd08      	pop	{r3, pc}

08004574 <cmd_ComRemap>:


void cmd_ComRemap(bool remap){
 8004574:	b508      	push	{r3, lr}
	writeCmd(0xC0+0x08*remap);	// 0xC0 (0x00) => Scan from COM0 to 63
 8004576:	3018      	adds	r0, #24
 8004578:	00c0      	lsls	r0, r0, #3
 800457a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800457e:	f7ff ff83 	bl	8004488 <writeCmd>
}
 8004582:	bd08      	pop	{r3, pc}

08004584 <cmd_EntireDisplayON>:


void cmd_EntireDisplayON(bool on){
 8004584:	b508      	push	{r3, lr}
//     0xA5 => Entire Display On
	writeCmd(0xA4+0x01*on);	//     0xA4 => Normal Display
 8004586:	385c      	subs	r0, #92	; 0x5c
 8004588:	b2c0      	uxtb	r0, r0
 800458a:	f7ff ff7d 	bl	8004488 <writeCmd>
}
 800458e:	bd08      	pop	{r3, pc}

08004590 <cmd_InverseDisplay>:


void cmd_InverseDisplay(bool inverse){
 8004590:	b508      	push	{r3, lr}
//     0xA7 => Inverse Display On
		writeCmd(0xA6+inverse);	//     0xA6 => Normal Display
 8004592:	385a      	subs	r0, #90	; 0x5a
 8004594:	b2c0      	uxtb	r0, r0
 8004596:	f7ff ff77 	bl	8004488 <writeCmd>
}
 800459a:	bd08      	pop	{r3, pc}

0800459c <cmd_MultiplexRatio>:


void cmd_MultiplexRatio(uint8_t mux){
 800459c:	b510      	push	{r4, lr}
 800459e:	4604      	mov	r4, r0
	writeCmd(0xA8);			// Set Multiplex Ratio
 80045a0:	20a8      	movs	r0, #168	; 0xa8
 80045a2:	f7ff ff71 	bl	8004488 <writeCmd>
	writeCmd(mux-1);			//   Default => 64 (1/64 Duty)
 80045a6:	1e60      	subs	r0, r4, #1
 80045a8:	b2c0      	uxtb	r0, r0
 80045aa:	f7ff ff6d 	bl	8004488 <writeCmd>
}
 80045ae:	bd10      	pop	{r4, pc}

080045b0 <cmd_DisplayOn>:

void cmd_DisplayOn(bool on){
 80045b0:	b508      	push	{r3, lr}
	if (on)
 80045b2:	b118      	cbz	r0, 80045bc <cmd_DisplayOn+0xc>
		writeCmd(0xAF);	//     0xAF => Display On
 80045b4:	20af      	movs	r0, #175	; 0xaf
 80045b6:	f7ff ff67 	bl	8004488 <writeCmd>
	else
		writeCmd(0xAE);	//     0xAE => Display Off
}
 80045ba:	bd08      	pop	{r3, pc}
		writeCmd(0xAE);	//     0xAE => Display Off
 80045bc:	20ae      	movs	r0, #174	; 0xae
 80045be:	f7ff ff63 	bl	8004488 <writeCmd>
}
 80045c2:	e7fa      	b.n	80045ba <cmd_DisplayOn+0xa>

080045c4 <cmd_DisplayOffset>:


void cmd_DisplayOffset(uint8_t offset){
 80045c4:	b510      	push	{r4, lr}
 80045c6:	4604      	mov	r4, r0
	writeCmd(0xD3);			// Set Display Offset
 80045c8:	20d3      	movs	r0, #211	; 0xd3
 80045ca:	f7ff ff5d 	bl	8004488 <writeCmd>
	writeCmd(offset);		//   Default => 0
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff ff5a 	bl	8004488 <writeCmd>
}
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <cmd_DisplayClock>:

void cmd_DisplayClock(uint8_t value){
 80045d6:	b510      	push	{r4, lr}
 80045d8:	4604      	mov	r4, r0
	writeCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
 80045da:	20d5      	movs	r0, #213	; 0xd5
 80045dc:	f7ff ff54 	bl	8004488 <writeCmd>
	writeCmd(value);		// Default => 0x70
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7ff ff51 	bl	8004488 <writeCmd>
	//     D[3:0] => Display Clock Divider
	//     D[7:4] => Oscillator Frequency
}
 80045e6:	bd10      	pop	{r4, pc}

080045e8 <cmd_PrechargePeriod>:


void cmd_PrechargePeriod(uint8_t value){
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4604      	mov	r4, r0
	writeCmd(0xD9);			// Set Pre-Charge Period
 80045ec:	20d9      	movs	r0, #217	; 0xd9
 80045ee:	f7ff ff4b 	bl	8004488 <writeCmd>
	writeCmd(value);		//   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff ff48 	bl	8004488 <writeCmd>
	//     D[3:0] => Phase 1 Period in 1~15 Display Clocks
	//     D[7:4] => Phase 2 Period in 1~15 Display Clocks
}
 80045f8:	bd10      	pop	{r4, pc}

080045fa <cmd_ComPins>:


void cmd_ComPins(uint8_t config){
 80045fa:	b510      	push	{r4, lr}
 80045fc:	4604      	mov	r4, r0
	writeCmd(0xDA);				// Set COM Pins Hardware Configuration
 80045fe:	20da      	movs	r0, #218	; 0xda
 8004600:	f7ff ff42 	bl	8004488 <writeCmd>
	writeCmd((config<<4)|0x02);	// Default => 0x12
 8004604:	0120      	lsls	r0, r4, #4
 8004606:	f040 0002 	orr.w	r0, r0, #2
 800460a:	f000 00f2 	and.w	r0, r0, #242	; 0xf2
 800460e:	f7ff ff3b 	bl	8004488 <writeCmd>
}
 8004612:	bd10      	pop	{r4, pc}

08004614 <cmd_Vcomh>:

void cmd_Vcomh(uint8_t value){
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
	writeCmd(0xDB);			// Set VCOMH deselect Level
 8004618:	20db      	movs	r0, #219	; 0xdb
 800461a:	f7ff ff35 	bl	8004488 <writeCmd>
	writeCmd(value);		// Default => 52 (0.78*VCC)
 800461e:	4620      	mov	r0, r4
 8004620:	f7ff ff32 	bl	8004488 <writeCmd>
}
 8004624:	bd10      	pop	{r4, pc}
	...

08004628 <HAL_SPI_TxCpltCallback>:

int currPage = 0;
bool lcdUpdateAllowed = 0;
bool lcdDmaDone = 1;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi1){
 8004628:	b510      	push	{r4, lr}
inline void displaySetCmd(void) 	{HAL_GPIO_WritePin(DISP_DC_GPIO, DISP_DC_PIN, 0);}
 800462a:	4c08      	ldr	r4, [pc, #32]	; (800464c <HAL_SPI_TxCpltCallback+0x24>)
 800462c:	2200      	movs	r2, #0
 800462e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004632:	4620      	mov	r0, r4
 8004634:	f7fd ff32 	bl	800249c <HAL_GPIO_WritePin>
inline void displayDeselect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 1);}
 8004638:	2201      	movs	r2, #1
 800463a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800463e:	4620      	mov	r0, r4
 8004640:	f7fd ff2c 	bl	800249c <HAL_GPIO_WritePin>
	displaySetCmd();
	displayDeselect();
	lcdDmaDone = 1;
 8004644:	4b02      	ldr	r3, [pc, #8]	; (8004650 <HAL_SPI_TxCpltCallback+0x28>)
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
}
 800464a:	bd10      	pop	{r4, pc}
 800464c:	40010800 	.word	0x40010800
 8004650:	2000000c 	.word	0x2000000c

08004654 <ssd1309PageUpdRoutine>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi1);
*/

void ssd1309PageUpdRoutine(void){
	//ssd1309StartDMAPage(currPage);
	if (lcdUpdateAllowed) {
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <ssd1309PageUpdRoutine+0x68>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b103      	cbz	r3, 800465c <ssd1309PageUpdRoutine+0x8>
 800465a:	4770      	bx	lr
void ssd1309PageUpdRoutine(void){
 800465c:	b510      	push	{r4, lr}
		// don't update LCD this iteration, let gfx driver update framebuffer
		return;
	}

	cmd_PageStartAddress(currPage);
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <ssd1309PageUpdRoutine+0x6c>)
 8004660:	7818      	ldrb	r0, [r3, #0]
 8004662:	f7ff ff6c 	bl	800453e <cmd_PageStartAddress>
	cmd_ColumnStartAddress(0);
 8004666:	2000      	movs	r0, #0
 8004668:	f7ff ff61 	bl	800452e <cmd_ColumnStartAddress>

	if (lcdDmaDone){
 800466c:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <ssd1309PageUpdRoutine+0x70>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b903      	cbnz	r3, 8004674 <ssd1309PageUpdRoutine+0x20>

	}



}
 8004672:	bd10      	pop	{r4, pc}
inline void displaySetData(void) 	{HAL_GPIO_WritePin(DISP_DC_GPIO, DISP_DC_PIN, 1);}
 8004674:	4c14      	ldr	r4, [pc, #80]	; (80046c8 <ssd1309PageUpdRoutine+0x74>)
 8004676:	2201      	movs	r2, #1
 8004678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800467c:	4620      	mov	r0, r4
 800467e:	f7fd ff0d 	bl	800249c <HAL_GPIO_WritePin>
inline void displaySelect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 0);}
 8004682:	2200      	movs	r2, #0
 8004684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004688:	4620      	mov	r0, r4
 800468a:	f7fd ff07 	bl	800249c <HAL_GPIO_WritePin>
		lcdDmaDone = 0;
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <ssd1309PageUpdRoutine+0x70>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(DISP_SPI_HANDLE, &GLCD_Buf[128*currPage], SSD1309_COL);
 8004694:	4c0a      	ldr	r4, [pc, #40]	; (80046c0 <ssd1309PageUpdRoutine+0x6c>)
 8004696:	6821      	ldr	r1, [r4, #0]
 8004698:	2280      	movs	r2, #128	; 0x80
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <ssd1309PageUpdRoutine+0x78>)
 800469c:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80046a0:	480b      	ldr	r0, [pc, #44]	; (80046d0 <ssd1309PageUpdRoutine+0x7c>)
 80046a2:	f7fe fdd1 	bl	8003248 <HAL_SPI_Transmit_DMA>
		currPage++;
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	6023      	str	r3, [r4, #0]
			if (currPage > 7){
 80046ac:	2b07      	cmp	r3, #7
 80046ae:	dde0      	ble.n	8004672 <ssd1309PageUpdRoutine+0x1e>
				currPage = 0;
 80046b0:	2200      	movs	r2, #0
 80046b2:	6022      	str	r2, [r4, #0]
				lcdUpdateAllowed = 1;
 80046b4:	4b01      	ldr	r3, [pc, #4]	; (80046bc <ssd1309PageUpdRoutine+0x68>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e7da      	b.n	8004672 <ssd1309PageUpdRoutine+0x1e>
 80046bc:	20000968 	.word	0x20000968
 80046c0:	20000964 	.word	0x20000964
 80046c4:	2000000c 	.word	0x2000000c
 80046c8:	40010800 	.word	0x40010800
 80046cc:	200020d0 	.word	0x200020d0
 80046d0:	20000830 	.word	0x20000830

080046d4 <ssd1309Update>:


void ssd1309Update(void){
 80046d4:	b538      	push	{r3, r4, r5, lr}
	unsigned char i,j;
	cmd_PageStartAddress(currPage);
 80046d6:	4d15      	ldr	r5, [pc, #84]	; (800472c <ssd1309Update+0x58>)
 80046d8:	7828      	ldrb	r0, [r5, #0]
 80046da:	f7ff ff30 	bl	800453e <cmd_PageStartAddress>
	cmd_ColumnStartAddress(0);
 80046de:	2000      	movs	r0, #0
 80046e0:	f7ff ff25 	bl	800452e <cmd_ColumnStartAddress>
inline void displaySetData(void) 	{HAL_GPIO_WritePin(DISP_DC_GPIO, DISP_DC_PIN, 1);}
 80046e4:	4c12      	ldr	r4, [pc, #72]	; (8004730 <ssd1309Update+0x5c>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7fd fed5 	bl	800249c <HAL_GPIO_WritePin>
inline void displaySelect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 0);}
 80046f2:	2200      	movs	r2, #0
 80046f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7fd fecf 	bl	800249c <HAL_GPIO_WritePin>
	//for(i=0;i<(SSD1309_ROW/8);i++)

	 displaySetData();
	 displaySelect();
	 	 // TODO: start DMA here
	 	 HAL_SPI_Transmit(DISP_SPI_HANDLE, &GLCD_Buf[128*currPage], SSD1309_COL, 10);
 80046fe:	6828      	ldr	r0, [r5, #0]
 8004700:	230a      	movs	r3, #10
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	490b      	ldr	r1, [pc, #44]	; (8004734 <ssd1309Update+0x60>)
 8004706:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 800470a:	480b      	ldr	r0, [pc, #44]	; (8004738 <ssd1309Update+0x64>)
 800470c:	f7fe fcbf 	bl	800308e <HAL_SPI_Transmit>
inline void displaySetCmd(void) 	{HAL_GPIO_WritePin(DISP_DC_GPIO, DISP_DC_PIN, 0);}
 8004710:	2200      	movs	r2, #0
 8004712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004716:	4620      	mov	r0, r4
 8004718:	f7fd fec0 	bl	800249c <HAL_GPIO_WritePin>
inline void displayDeselect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 1);}
 800471c:	2201      	movs	r2, #1
 800471e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004722:	4620      	mov	r0, r4
 8004724:	f7fd feba 	bl	800249c <HAL_GPIO_WritePin>
	 displaySetCmd();
	 displayDeselect();


}
 8004728:	bd38      	pop	{r3, r4, r5, pc}
 800472a:	bf00      	nop
 800472c:	20000964 	.word	0x20000964
 8004730:	40010800 	.word	0x40010800
 8004734:	200020d0 	.word	0x200020d0
 8004738:	20000830 	.word	0x20000830

0800473c <ssd1309Init>:

#define	LCD_ROTATE_180	(0)
#define	LCD_INVERT		(0)

void ssd1309Init(void){
 800473c:	b508      	push	{r3, lr}
inline void displayDeselect(void) 	{HAL_GPIO_WritePin(DISP_CS_GPIO, DISP_CS_PIN, 1);}
 800473e:	2201      	movs	r2, #1
 8004740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004744:	481a      	ldr	r0, [pc, #104]	; (80047b0 <ssd1309Init+0x74>)
 8004746:	f7fd fea9 	bl	800249c <HAL_GPIO_WritePin>
	displayDeselect();
	HAL_Delay(100);
 800474a:	2064      	movs	r0, #100	; 0x64
 800474c:	f7fc ff80 	bl	8001650 <HAL_Delay>

	cmd_DisplayOn(false);				// Display Off
 8004750:	2000      	movs	r0, #0
 8004752:	f7ff ff2d 	bl	80045b0 <cmd_DisplayOn>
	cmd_DisplayClock(0xF0);				// Set Clock as 80 Frames/Sec
 8004756:	20f0      	movs	r0, #240	; 0xf0
 8004758:	f7ff ff3d 	bl	80045d6 <cmd_DisplayClock>
	cmd_MultiplexRatio(SSD1309_ROW);	// 1/64 Duty (16-64)
 800475c:	2040      	movs	r0, #64	; 0x40
 800475e:	f7ff ff1d 	bl	800459c <cmd_MultiplexRatio>
	cmd_DisplayOffset(0);				// Shift Mapping RAM Counter (0~63)
 8004762:	2000      	movs	r0, #0
 8004764:	f7ff ff2e 	bl	80045c4 <cmd_DisplayOffset>
	cmd_StartLine(0);					// Set Mapping RAM Display Start Line (0~63)
 8004768:	2000      	movs	r0, #0
 800476a:	f7ff feee 	bl	800454a <cmd_StartLine>
	cmd_AddressingMode(0);				// Set Page Addressing Mode
 800476e:	2000      	movs	r0, #0
 8004770:	f7ff fed4 	bl	800451c <cmd_AddressingMode>
	cmd_SegmentRemap(LCD_ROTATE_180);			// standard segment mapping
 8004774:	2000      	movs	r0, #0
 8004776:	f7ff fef7 	bl	8004568 <cmd_SegmentRemap>
	cmd_ComRemap(!LCD_ROTATE_180);				// standard col mapping
 800477a:	2001      	movs	r0, #1
 800477c:	f7ff fefa 	bl	8004574 <cmd_ComRemap>
	cmd_ComPins(1);						// default com pins
 8004780:	2001      	movs	r0, #1
 8004782:	f7ff ff3a 	bl	80045fa <cmd_ComPins>
	cmd_ContrastControl(10);			// Set SEG Output Current //Brightness
 8004786:	200a      	movs	r0, #10
 8004788:	f7ff fee5 	bl	8004556 <cmd_ContrastControl>
	cmd_PrechargePeriod(0xF1);	 		// Set Pre-Charge as 16 Clocks & Discharge as 1 Clocks
 800478c:	20f1      	movs	r0, #241	; 0xf1
 800478e:	f7ff ff2b 	bl	80045e8 <cmd_PrechargePeriod>
	cmd_Vcomh(55);						// Set VCOM Deselect Level //55
 8004792:	2037      	movs	r0, #55	; 0x37
 8004794:	f7ff ff3e 	bl	8004614 <cmd_Vcomh>
	cmd_EntireDisplayON(false);			// Disable Entire Display On
 8004798:	2000      	movs	r0, #0
 800479a:	f7ff fef3 	bl	8004584 <cmd_EntireDisplayON>
	cmd_InverseDisplay(LCD_INVERT);			// Disable Inverse Display
 800479e:	2000      	movs	r0, #0
 80047a0:	f7ff fef6 	bl	8004590 <cmd_InverseDisplay>
	ssd1309Update();					// Clear Screen
 80047a4:	f7ff ff96 	bl	80046d4 <ssd1309Update>
	cmd_DisplayOn(true);				// Display On
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7ff ff01 	bl	80045b0 <cmd_DisplayOn>
}
 80047ae:	bd08      	pop	{r3, pc}
 80047b0:	40010800 	.word	0x40010800

080047b4 <dspInit>:
arm_fir_decimate_instance_q31	firInstanceDecI;
arm_fir_decimate_instance_q31	firInstanceDecQ;
arm_fir_interpolate_instance_q31 firInstanceInter;

int outStarted = 0;
void dspInit(void){
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	b082      	sub	sp, #8
	outStarted = 0;
 80047b8:	4d12      	ldr	r5, [pc, #72]	; (8004804 <dspInit+0x50>)
 80047ba:	2300      	movs	r3, #0
 80047bc:	602b      	str	r3, [r5, #0]
	firInit();
 80047be:	f000 f9d9 	bl	8004b74 <firInit>


#ifdef DSP_DECIMATED
	arm_fir_decimate_init_q31(&firInstanceDecI, 	FIR_NUM_TAPS, 			DSP_DECIMATION_RATE, 	firCoeffs, 		firStateI, 		DSP_BLOCK_SIZE);
 80047c2:	4e11      	ldr	r6, [pc, #68]	; (8004808 <dspInit+0x54>)
 80047c4:	2480      	movs	r4, #128	; 0x80
 80047c6:	9401      	str	r4, [sp, #4]
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <dspInit+0x58>)
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4633      	mov	r3, r6
 80047ce:	2202      	movs	r2, #2
 80047d0:	2120      	movs	r1, #32
 80047d2:	480f      	ldr	r0, [pc, #60]	; (8004810 <dspInit+0x5c>)
 80047d4:	f000 fc8e 	bl	80050f4 <arm_fir_decimate_init_q31>
	arm_fir_decimate_init_q31(&firInstanceDecQ, 	FIR_NUM_TAPS, 			DSP_DECIMATION_RATE, 	firCoeffs, 		firStateQ,		DSP_BLOCK_SIZE);
 80047d8:	9401      	str	r4, [sp, #4]
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <dspInit+0x60>)
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4633      	mov	r3, r6
 80047e0:	2202      	movs	r2, #2
 80047e2:	2120      	movs	r1, #32
 80047e4:	480c      	ldr	r0, [pc, #48]	; (8004818 <dspInit+0x64>)
 80047e6:	f000 fc85 	bl	80050f4 <arm_fir_decimate_init_q31>
	arm_fir_interpolate_init_q31(&firInstanceInter, DSP_DECIMATION_RATE, 	FIR_NUM_TAPS_INTER, 	firCoeffsInter, firStateInter, 	DSP_BLOCK_SIZE);
 80047ea:	9401      	str	r4, [sp, #4]
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <dspInit+0x68>)
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <dspInit+0x6c>)
 80047f2:	2208      	movs	r2, #8
 80047f4:	2102      	movs	r1, #2
 80047f6:	480b      	ldr	r0, [pc, #44]	; (8004824 <dspInit+0x70>)
 80047f8:	f000 fc60 	bl	80050bc <arm_fir_interpolate_init_q31>
#ifndef DSP_DECIMATED
	arm_fir_init_q31(&firInstanceI, FIR_NUM_TAPS, firCoeffs, firStateI, DSP_BLOCK_SIZE);
	arm_fir_init_q31(&firInstanceQ, FIR_NUM_TAPS, firCoeffs, firStateQ, DSP_BLOCK_SIZE);
#endif

	 outStarted = 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	602b      	str	r3, [r5, #0]

}
 8004800:	b002      	add	sp, #8
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	200020cc 	.word	0x200020cc
 8004808:	080080ac 	.word	0x080080ac
 800480c:	20000fa0 	.word	0x20000fa0
 8004810:	20000f7c 	.word	0x20000f7c
 8004814:	20001448 	.word	0x20001448
 8004818:	20000f88 	.word	0x20000f88
 800481c:	20001224 	.word	0x20001224
 8004820:	0800812c 	.word	0x0800812c
 8004824:	20000f94 	.word	0x20000f94

08004828 <dspStart>:

void dspStart(void){
 8004828:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 800482a:	4c0b      	ldr	r4, [pc, #44]	; (8004858 <dspStart+0x30>)
 800482c:	4620      	mov	r0, r4
 800482e:	f7fe fe7d 	bl	800352c <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // TIM1 CH2 = ADC trigger
 8004832:	2104      	movs	r1, #4
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff f953 	bl	8003ae0 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inBuf, ADC_BUFFER_LEN); // CH3 = audio output
 800483a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800483e:	4907      	ldr	r1, [pc, #28]	; (800485c <dspStart+0x34>)
 8004840:	4807      	ldr	r0, [pc, #28]	; (8004860 <dspStart+0x38>)
 8004842:	f7fd f83b 	bl	80018bc <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
 8004846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800484a:	4a06      	ldr	r2, [pc, #24]	; (8004864 <dspStart+0x3c>)
 800484c:	2108      	movs	r1, #8
 800484e:	4620      	mov	r0, r4
 8004850:	f7ff f9b4 	bl	8003bbc <HAL_TIM_PWM_Start_DMA>
}
 8004854:	bd10      	pop	{r4, pc}
 8004856:	bf00      	nop
 8004858:	20000888 	.word	0x20000888
 800485c:	200016cc 	.word	0x200016cc
 8004860:	20000658 	.word	0x20000658
 8004864:	20001ecc 	.word	0x20001ecc

08004868 <dspPrepareInput>:
int start = 0;
int end  = 0;
//int adcBuffStart = 0;


__attribute__((optimize("unroll-loops"))) void dspPrepareInput(void) {
 8004868:	b510      	push	{r4, lr}
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 800486a:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <dspPrepareInput+0xc0>)
 800486c:	f893 e000 	ldrb.w	lr, [r3]
 8004870:	f08e 0e01 	eor.w	lr, lr, #1
 8004874:	ea4f 2e4e 	mov.w	lr, lr, lsl #9
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8004878:	2100      	movs	r1, #0
 800487a:	e051      	b.n	8004920 <dspPrepareInput+0xb8>
		int ptr = i * ADC_DMA_CHANNELS + adcBuffStart;
 800487c:	eb0e 0281 	add.w	r2, lr, r1, lsl #2
		dspInI[i] = adcToQ31(inBuf[ptr]);
 8004880:	482a      	ldr	r0, [pc, #168]	; (800492c <dspPrepareInput+0xc4>)
 8004882:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
#define FtoQ31(x) 			(q31_t)(x * 2147483648.0f) //2147483648.0f
#define Q31toF(x) 			(float)(x / 2147483648.0f)	//2147483648.0f
//#define q31ToPwm(x)			(uint16_t)((x >> 21) + PWM_HALF)
//#define adcToQ31(x)			(q31_t)((x - ADC_HALF) << 20)
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
inline q31_t	adcToQ31(int16_t input)	{return ((input - ADC_HALF) << 20);}
 8004886:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	4c28      	ldr	r4, [pc, #160]	; (8004930 <dspPrepareInput+0xc8>)
 800488e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
		dspInQ[i] = adcToQ31(inBuf[ptr + 1]);
 8004892:	3201      	adds	r2, #1
 8004894:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
 8004898:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	4a25      	ldr	r2, [pc, #148]	; (8004934 <dspPrepareInput+0xcc>)
 80048a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80048a4:	f101 0c01 	add.w	ip, r1, #1
		int ptr = i * ADC_DMA_CHANNELS + adcBuffStart;
 80048a8:	eb0e 028c 	add.w	r2, lr, ip, lsl #2
		dspInI[i] = adcToQ31(inBuf[ptr]);
 80048ac:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
 80048b0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80048b4:	051b      	lsls	r3, r3, #20
 80048b6:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
		dspInQ[i] = adcToQ31(inBuf[ptr + 1]);
 80048ba:	3201      	adds	r2, #1
 80048bc:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
 80048c0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80048c4:	051b      	lsls	r3, r3, #20
 80048c6:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <dspPrepareInput+0xcc>)
 80048c8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80048cc:	f10c 0101 	add.w	r1, ip, #1
		int ptr = i * ADC_DMA_CHANNELS + adcBuffStart;
 80048d0:	eb0e 0281 	add.w	r2, lr, r1, lsl #2
		dspInI[i] = adcToQ31(inBuf[ptr]);
 80048d4:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
 80048d8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80048dc:	051b      	lsls	r3, r3, #20
 80048de:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
		dspInQ[i] = adcToQ31(inBuf[ptr + 1]);
 80048e2:	3201      	adds	r2, #1
 80048e4:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
 80048e8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80048ec:	051b      	lsls	r3, r3, #20
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <dspPrepareInput+0xcc>)
 80048f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80048f4:	f10c 0102 	add.w	r1, ip, #2
		int ptr = i * ADC_DMA_CHANNELS + adcBuffStart;
 80048f8:	eb0e 0281 	add.w	r2, lr, r1, lsl #2
		dspInI[i] = adcToQ31(inBuf[ptr]);
 80048fc:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
 8004900:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004904:	051b      	lsls	r3, r3, #20
 8004906:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
		dspInQ[i] = adcToQ31(inBuf[ptr + 1]);
 800490a:	3201      	adds	r2, #1
 800490c:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
 8004910:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004914:	051b      	lsls	r3, r3, #20
 8004916:	4a07      	ldr	r2, [pc, #28]	; (8004934 <dspPrepareInput+0xcc>)
 8004918:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 800491c:	f10c 0103 	add.w	r1, ip, #3
 8004920:	297f      	cmp	r1, #127	; 0x7f
 8004922:	ddab      	ble.n	800487c <dspPrepareInput+0x14>
	}

}
 8004924:	bd10      	pop	{r4, pc}
 8004926:	bf00      	nop
 8004928:	20000f75 	.word	0x20000f75
 800492c:	200016cc 	.word	0x200016cc
 8004930:	20000970 	.word	0x20000970
 8004934:	20000b70 	.word	0x20000b70

08004938 <dspPrepareOutput>:


__attribute__((optimize("unroll-loops"))) void dspPrepareOutput(void){
 8004938:	b500      	push	{lr}

	#ifdef DSP_DECIMATED_NO_INTERPOLATION
			int adcBuffStart = ADC_BUFFER_LEN/(ADC_DMA_CHANNELS*2) * (dspRingHalf == HALF_LOWER);
 800493a:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <dspPrepareOutput+0x120>)
 800493c:	f893 e000 	ldrb.w	lr, [r3]
 8004940:	f08e 0e01 	eor.w	lr, lr, #1
 8004944:	ea4f 1ece 	mov.w	lr, lr, lsl #7

			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8004948:	2100      	movs	r1, #0
 800494a:	e080      	b.n	8004a4e <dspPrepareOutput+0x116>
				int ptr = adcBuffStart + k*2;
 800494c:	eb0e 0241 	add.w	r2, lr, r1, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8004950:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <dspPrepareOutput+0x124>)
 8004952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
 8004956:	155b      	asrs	r3, r3, #21
 8004958:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800495c:	b29b      	uxth	r3, r3
 800495e:	4840      	ldr	r0, [pc, #256]	; (8004a60 <dspPrepareOutput+0x128>)
 8004960:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8004964:	3201      	adds	r2, #1
 8004966:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 800496a:	f101 0c01 	add.w	ip, r1, #1
				int ptr = adcBuffStart + k*2;
 800496e:	eb0e 024c 	add.w	r2, lr, ip, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8004972:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <dspPrepareOutput+0x124>)
 8004974:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004978:	155b      	asrs	r3, r3, #21
 800497a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800497e:	b29b      	uxth	r3, r3
 8004980:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8004984:	3201      	adds	r2, #1
 8004986:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 800498a:	f10c 0101 	add.w	r1, ip, #1
				int ptr = adcBuffStart + k*2;
 800498e:	eb0e 0241 	add.w	r2, lr, r1, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8004992:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <dspPrepareOutput+0x124>)
 8004994:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004998:	155b      	asrs	r3, r3, #21
 800499a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 80049a4:	3201      	adds	r2, #1
 80049a6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 80049aa:	f10c 0102 	add.w	r1, ip, #2
				int ptr = adcBuffStart + k*2;
 80049ae:	eb0e 0241 	add.w	r2, lr, r1, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 80049b2:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <dspPrepareOutput+0x124>)
 80049b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049b8:	155b      	asrs	r3, r3, #21
 80049ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 80049c4:	3201      	adds	r2, #1
 80049c6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 80049ca:	f10c 0103 	add.w	r1, ip, #3
				int ptr = adcBuffStart + k*2;
 80049ce:	eb0e 0241 	add.w	r2, lr, r1, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <dspPrepareOutput+0x124>)
 80049d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049d8:	155b      	asrs	r3, r3, #21
 80049da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 80049e4:	3201      	adds	r2, #1
 80049e6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 80049ea:	f10c 0104 	add.w	r1, ip, #4
				int ptr = adcBuffStart + k*2;
 80049ee:	eb0e 0241 	add.w	r2, lr, r1, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 80049f2:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <dspPrepareOutput+0x124>)
 80049f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049f8:	155b      	asrs	r3, r3, #21
 80049fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8004a04:	3201      	adds	r2, #1
 8004a06:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8004a0a:	f10c 0105 	add.w	r1, ip, #5
				int ptr = adcBuffStart + k*2;
 8004a0e:	eb0e 0241 	add.w	r2, lr, r1, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <dspPrepareOutput+0x124>)
 8004a14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a18:	155b      	asrs	r3, r3, #21
 8004a1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8004a24:	3201      	adds	r2, #1
 8004a26:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8004a2a:	f10c 0106 	add.w	r1, ip, #6
				int ptr = adcBuffStart + k*2;
 8004a2e:	eb0e 0241 	add.w	r2, lr, r1, lsl #1
				outBuf[ptr] = 		q31toPwm(dspOut[k]);
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <dspPrepareOutput+0x124>)
 8004a34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a38:	155b      	asrs	r3, r3, #21
 8004a3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8004a44:	3201      	adds	r2, #1
 8004a46:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8004a4a:	f10c 0107 	add.w	r1, ip, #7
 8004a4e:	293f      	cmp	r1, #63	; 0x3f
 8004a50:	f77f af7c 	ble.w	800494c <dspPrepareOutput+0x14>

		for (int k=0; k < DSP_BLOCK_SIZE; k++)
			outBuf[adcBuffStart + k] = 		q31toPwm(dspOut[k]);
	#endif

}
 8004a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a58:	20000f75 	.word	0x20000f75
 8004a5c:	20000d74 	.word	0x20000d74
 8004a60:	20001ecc 	.word	0x20001ecc

08004a64 <setTime>:
	uint32_t time = __HAL_DMA_GET_COUNTER(&hdma_adc1);
	return time;
}

void setTime(int i){
	metrics.metric[i].time = __HAL_DMA_GET_COUNTER(&hdma_adc1);
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <setTime+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004a6e:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <setTime+0x18>)
 8004a70:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004a74:	6102      	str	r2, [r0, #16]
}
 8004a76:	4770      	bx	lr
 8004a78:	20000688 	.word	0x20000688
 8004a7c:	2000032c 	.word	0x2000032c

08004a80 <dspProc>:
int dspStartTime = 0;
int dspEndTime = 0;
int dspLoad = 0;

//__attribute__ ((section(".RamFunc")))
void dspProc(void){
 8004a80:	b508      	push	{r3, lr}
	if (!dspProcDone){
 8004a82:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <dspProc+0x74>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <dspProc+0xa>
		dspEndTime = __HAL_DMA_GET_COUNTER(&hdma_adc1);
		dspLoad = (dspStartTime - dspEndTime)*100/DSP_BLOCK_SIZE;
		dspProcDone = 1;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
	}
}
 8004a88:	bd08      	pop	{r3, pc}
		setTime(METRIC_DSP_START);
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7ff ffea 	bl	8004a64 <setTime>
		dspStartTime = __HAL_DMA_GET_COUNTER(&hdma_adc1);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <dspProc+0x78>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4b19      	ldr	r3, [pc, #100]	; (8004afc <dspProc+0x7c>)
 8004a98:	601a      	str	r2, [r3, #0]
		if(radio.txState == RX){
 8004a9a:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <dspProc+0x80>)
 8004a9c:	7f1b      	ldrb	r3, [r3, #28]
 8004a9e:	b1e3      	cbz	r3, 8004ada <dspProc+0x5a>
		setTime(METRIC_DSP_TOTAL);
 8004aa0:	2008      	movs	r0, #8
 8004aa2:	f7ff ffdf 	bl	8004a64 <setTime>
		dspEndTime = __HAL_DMA_GET_COUNTER(&hdma_adc1);
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <dspProc+0x78>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <dspProc+0x84>)
 8004aae:	601a      	str	r2, [r3, #0]
		dspLoad = (dspStartTime - dspEndTime)*100/DSP_BLOCK_SIZE;
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <dspProc+0x7c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	2264      	movs	r2, #100	; 0x64
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	db17      	blt.n	8004af0 <dspProc+0x70>
 8004ac0:	11db      	asrs	r3, r3, #7
 8004ac2:	4a11      	ldr	r2, [pc, #68]	; (8004b08 <dspProc+0x88>)
 8004ac4:	6013      	str	r3, [r2, #0]
		dspProcDone = 1;
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <dspProc+0x74>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ad2:	480e      	ldr	r0, [pc, #56]	; (8004b0c <dspProc+0x8c>)
 8004ad4:	f7fd fce2 	bl	800249c <HAL_GPIO_WritePin>
}
 8004ad8:	e7d6      	b.n	8004a88 <dspProc+0x8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8004ada:	2201      	movs	r2, #1
 8004adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ae0:	480a      	ldr	r0, [pc, #40]	; (8004b0c <dspProc+0x8c>)
 8004ae2:	f7fd fcdb 	bl	800249c <HAL_GPIO_WritePin>
			dspPrepareInput();
 8004ae6:	f7ff febf 	bl	8004868 <dspPrepareInput>
			dspPrepareOutput();
 8004aea:	f7ff ff25 	bl	8004938 <dspPrepareOutput>
 8004aee:	e7d7      	b.n	8004aa0 <dspProc+0x20>
		dspLoad = (dspStartTime - dspEndTime)*100/DSP_BLOCK_SIZE;
 8004af0:	337f      	adds	r3, #127	; 0x7f
 8004af2:	e7e5      	b.n	8004ac0 <dspProc+0x40>
 8004af4:	20000f74 	.word	0x20000f74
 8004af8:	20000688 	.word	0x20000688
 8004afc:	20000f78 	.word	0x20000f78
 8004b00:	2000255c 	.word	0x2000255c
 8004b04:	2000096c 	.word	0x2000096c
 8004b08:	20000d70 	.word	0x20000d70
 8004b0c:	40010c00 	.word	0x40010c00

08004b10 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8004b10:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,dspRingHalf);
 8004b12:	4c07      	ldr	r4, [pc, #28]	; (8004b30 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8004b14:	7822      	ldrb	r2, [r4, #0]
 8004b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b1a:	4806      	ldr	r0, [pc, #24]	; (8004b34 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8004b1c:	f7fd fcbe 	bl	800249c <HAL_GPIO_WritePin>
		dspRingHalf = HALF_UPPER;
 8004b20:	2301      	movs	r3, #1
 8004b22:	7023      	strb	r3, [r4, #0]
		dspProcDone = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8004b28:	7013      	strb	r3, [r2, #0]
		elseDone = 0;
 8004b2a:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8004b2c:	7013      	strb	r3, [r2, #0]
}
 8004b2e:	bd10      	pop	{r4, pc}
 8004b30:	20000f75 	.word	0x20000f75
 8004b34:	40010c00 	.word	0x40010c00
 8004b38:	20000f74 	.word	0x20000f74
 8004b3c:	200026cc 	.word	0x200026cc

08004b40 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8004b40:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,dspRingHalf);
 8004b42:	4c07      	ldr	r4, [pc, #28]	; (8004b60 <HAL_ADC_ConvCpltCallback+0x20>)
 8004b44:	7822      	ldrb	r2, [r4, #0]
 8004b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b4a:	4806      	ldr	r0, [pc, #24]	; (8004b64 <HAL_ADC_ConvCpltCallback+0x24>)
 8004b4c:	f7fd fca6 	bl	800249c <HAL_GPIO_WritePin>
		dspRingHalf = HALF_LOWER;
 8004b50:	2300      	movs	r3, #0
 8004b52:	7023      	strb	r3, [r4, #0]
		dspProcDone = 0;
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <HAL_ADC_ConvCpltCallback+0x28>)
 8004b56:	7013      	strb	r3, [r2, #0]
		elseDone = 0;
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_ADC_ConvCpltCallback+0x2c>)
 8004b5a:	7013      	strb	r3, [r2, #0]
}
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000f75 	.word	0x20000f75
 8004b64:	40010c00 	.word	0x40010c00
 8004b68:	20000f74 	.word	0x20000f74
 8004b6c:	200026cc 	.word	0x200026cc

08004b70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){

};
 8004b70:	4770      	bx	lr

08004b72 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim1){

}
 8004b72:	4770      	bx	lr

08004b74 <firInit>:


	//arm_fir_decimate_init_q31(&firInstanceI, FIR_NUM_TAPS, 2, firCoeffs, firStateI, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&firInstanceQ, FIR_NUM_TAPS, 2, firCoeffs, firStateQ, DSP_BLOCK_SIZE);

}
 8004b74:	4770      	bx	lr
	...

08004b78 <GLCD_Font_PrintNew>:
		//ST7920_Update();
		//HAL_Delay(100);
	}
}

void GLCD_Font_PrintNew(uint8_t x, uint8_t y, char *String, int fontID){
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	4607      	mov	r7, r0
 8004b80:	9203      	str	r2, [sp, #12]
 8004b82:	469a      	mov	sl, r3
	int shiftX = x;
	int charCount = 0;

	int fontWspace = fontInfo[fontID].W + 1;
 8004b84:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <GLCD_Font_PrintNew+0xd8>)
 8004b86:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8004b8a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8004b8e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8004b92:	f10b 0801 	add.w	r8, fp, #1

	int line = y / 8;
 8004b96:	ea4f 09d1 	mov.w	r9, r1, lsr #3
	int shiftY = y % 8;
 8004b9a:	f001 0307 	and.w	r3, r1, #7
 8004b9e:	9302      	str	r3, [sp, #8]
	int takesLines = fontInfo[fontID].H / 8 + (shiftY > 0);
 8004ba0:	6843      	ldr	r3, [r0, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db07      	blt.n	8004bb6 <GLCD_Font_PrintNew+0x3e>
 8004ba6:	9a02      	ldr	r2, [sp, #8]
 8004ba8:	1e15      	subs	r5, r2, #0
 8004baa:	bf18      	it	ne
 8004bac:	2501      	movne	r5, #1
 8004bae:	eb05 05e3 	add.w	r5, r5, r3, asr #3
	int charCount = 0;
 8004bb2:	2600      	movs	r6, #0
	uint32_t shiftedColumn = 0;

	int i;
	while(*String)
 8004bb4:	e039      	b.n	8004c2a <GLCD_Font_PrintNew+0xb2>
	int takesLines = fontInfo[fontID].H / 8 + (shiftY > 0);
 8004bb6:	3307      	adds	r3, #7
 8004bb8:	e7f5      	b.n	8004ba6 <GLCD_Font_PrintNew+0x2e>
	{
		uint32_t dataPointer = (*String) * fontInfo[fontID].W - fontInfo[fontID].asciiShift;
		for(i=0; i < fontInfo[fontID].W; i++){
			if (fontInfo[fontID].dataPtrLong == 0)
				shiftedColumn = fontInfo[fontID].dataPtr[dataPointer + i] << shiftY;
 8004bba:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8004bbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	9b01      	ldr	r3, [sp, #4]
 8004bc6:	4463      	add	r3, ip
 8004bc8:	f812 e003 	ldrb.w	lr, [r2, r3]
 8004bcc:	9b02      	ldr	r3, [sp, #8]
 8004bce:	fa0e fe03 	lsl.w	lr, lr, r3
 8004bd2:	e024      	b.n	8004c1e <GLCD_Font_PrintNew+0xa6>
			else
				shiftedColumn = fontInfo[fontID].dataPtrLong[dataPointer + i] << shiftY;

				for (int li = 0; li < takesLines; li++){
					 GLCD_Buf[i + (charCount * fontWspace) + (LCD_W * (li + line)) + shiftX] |= (shiftedColumn >> (8*li)) & 0xFF;
 8004bd4:	fb08 c306 	mla	r3, r8, r6, ip
 8004bd8:	eb01 0209 	add.w	r2, r1, r9
 8004bdc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004be0:	443b      	add	r3, r7
 8004be2:	481c      	ldr	r0, [pc, #112]	; (8004c54 <GLCD_Font_PrintNew+0xdc>)
 8004be4:	5cc2      	ldrb	r2, [r0, r3]
 8004be6:	00cc      	lsls	r4, r1, #3
 8004be8:	fa2e f404 	lsr.w	r4, lr, r4
 8004bec:	4322      	orrs	r2, r4
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	54c2      	strb	r2, [r0, r3]
				for (int li = 0; li < takesLines; li++){
 8004bf2:	3101      	adds	r1, #1
 8004bf4:	42a9      	cmp	r1, r5
 8004bf6:	dbed      	blt.n	8004bd4 <GLCD_Font_PrintNew+0x5c>
		for(i=0; i < fontInfo[fontID].W; i++){
 8004bf8:	f10c 0c01 	add.w	ip, ip, #1
 8004bfc:	45e3      	cmp	fp, ip
 8004bfe:	dd10      	ble.n	8004c22 <GLCD_Font_PrintNew+0xaa>
			if (fontInfo[fontID].dataPtrLong == 0)
 8004c00:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8004c04:	4a12      	ldr	r2, [pc, #72]	; (8004c50 <GLCD_Font_PrintNew+0xd8>)
 8004c06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0d4      	beq.n	8004bba <GLCD_Font_PrintNew+0x42>
				shiftedColumn = fontInfo[fontID].dataPtrLong[dataPointer + i] << shiftY;
 8004c10:	9a01      	ldr	r2, [sp, #4]
 8004c12:	4462      	add	r2, ip
 8004c14:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8004c18:	9b02      	ldr	r3, [sp, #8]
 8004c1a:	fa0e fe03 	lsl.w	lr, lr, r3
				for (int li = 0; li < takesLines; li++){
 8004c1e:	2100      	movs	r1, #0
 8004c20:	e7e8      	b.n	8004bf4 <GLCD_Font_PrintNew+0x7c>
				}
		}

		String++;
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	9303      	str	r3, [sp, #12]
		charCount++;
 8004c28:	3601      	adds	r6, #1
	while(*String)
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b163      	cbz	r3, 8004c4a <GLCD_Font_PrintNew+0xd2>
		uint32_t dataPointer = (*String) * fontInfo[fontID].W - fontInfo[fontID].asciiShift;
 8004c30:	fb03 f30b 	mul.w	r3, r3, fp
 8004c34:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8004c38:	4905      	ldr	r1, [pc, #20]	; (8004c50 <GLCD_Font_PrintNew+0xd8>)
 8004c3a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	9301      	str	r3, [sp, #4]
		for(i=0; i < fontInfo[fontID].W; i++){
 8004c44:	f04f 0c00 	mov.w	ip, #0
 8004c48:	e7d8      	b.n	8004bfc <GLCD_Font_PrintNew+0x84>

	}
}
 8004c4a:	b005      	add	sp, #20
 8004c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c50:	08008338 	.word	0x08008338
 8004c54:	200020d0 	.word	0x200020d0

08004c58 <gfxInvertPage>:
		GLCD_Font_PrintNew(0, 9*i, dbgText[i], FONT_REGULAR);
	}

}

void gfxInvertPage(int page){
 8004c58:	4684      	mov	ip, r0
	for (int i = 0; i < LCD_W; i++){
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	e007      	b.n	8004c6e <gfxInvertPage+0x16>
		 GLCD_Buf[i + (LCD_W * page)] = ~ GLCD_Buf[i +  (LCD_W * page)];
 8004c5e:	eb02 11cc 	add.w	r1, r2, ip, lsl #7
 8004c62:	4804      	ldr	r0, [pc, #16]	; (8004c74 <gfxInvertPage+0x1c>)
 8004c64:	5c43      	ldrb	r3, [r0, r1]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	5443      	strb	r3, [r0, r1]
	for (int i = 0; i < LCD_W; i++){
 8004c6c:	3201      	adds	r2, #1
 8004c6e:	2a7f      	cmp	r2, #127	; 0x7f
 8004c70:	ddf5      	ble.n	8004c5e <gfxInvertPage+0x6>
	}
}
 8004c72:	4770      	bx	lr
 8004c74:	200020d0 	.word	0x200020d0

08004c78 <gfxDrawMenu>:

#include "menu.h"
// menu lines being filled outside
void gfxDrawMenu(void){
 8004c78:	b510      	push	{r4, lr}
	//snprintf(MENU_MAX_LINE_LEN, menuLinesTxt[0], "FUCK");
	menuFillLines(0);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f000 f87c 	bl	8004d78 <menuFillLines>
	GLCD_Font_PrintNew(0, 0, menuHeader, FONT_REGULAR);
 8004c80:	2300      	movs	r3, #0
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <gfxDrawMenu+0x58>)
 8004c84:	4619      	mov	r1, r3
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ff76 	bl	8004b78 <GLCD_Font_PrintNew>
	gfxInvertPage(0);
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7ff ffe3 	bl	8004c58 <gfxInvertPage>

	for (int i=0; i<MENU_LINES; i++){
 8004c92:	2000      	movs	r0, #0
 8004c94:	e00d      	b.n	8004cb2 <gfxDrawMenu+0x3a>
		//snprintf(dbgText[i], 20, "%u", HAL_GetTick());
		GLCD_Font_PrintNew(0, 9*i + 9, menuLinesTxt[i], FONT_REGULAR);
 8004c96:	1c44      	adds	r4, r0, #1
 8004c98:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f04f 0c16 	mov.w	ip, #22
 8004ca2:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <gfxDrawMenu+0x5c>)
 8004ca4:	fb0c 2200 	mla	r2, ip, r0, r2
 8004ca8:	b2c9      	uxtb	r1, r1
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff ff64 	bl	8004b78 <GLCD_Font_PrintNew>
	for (int i=0; i<MENU_LINES; i++){
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	2804      	cmp	r0, #4
 8004cb4:	ddef      	ble.n	8004c96 <gfxDrawMenu+0x1e>
	}

	GLCD_Font_PrintNew(LOWER_MENU_POS_X0, LOWER_MENU_POS_Y, "SAVE", FONT_REGULAR);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <gfxDrawMenu+0x60>)
 8004cba:	2136      	movs	r1, #54	; 0x36
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff ff5b 	bl	8004b78 <GLCD_Font_PrintNew>
	GLCD_Font_PrintNew(LOWER_MENU_POS_X2, LOWER_MENU_POS_Y, "EXIT", FONT_REGULAR);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4a05      	ldr	r2, [pc, #20]	; (8004cdc <gfxDrawMenu+0x64>)
 8004cc6:	2136      	movs	r1, #54	; 0x36
 8004cc8:	2056      	movs	r0, #86	; 0x56
 8004cca:	f7ff ff55 	bl	8004b78 <GLCD_Font_PrintNew>

}
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	200024d4 	.word	0x200024d4
 8004cd4:	200024ec 	.word	0x200024ec
 8004cd8:	0800814c 	.word	0x0800814c
 8004cdc:	08008154 	.word	0x08008154

08004ce0 <gfxClearBuffer>:

void gfxInit(void){
	gfxClearBuffer();
}

void gfxClearBuffer(void){
 8004ce0:	b508      	push	{r3, lr}
	memset(GLCD_Buf, 0, sizeof(GLCD_Buf));
 8004ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4801      	ldr	r0, [pc, #4]	; (8004cf0 <gfxClearBuffer+0x10>)
 8004cea:	f000 fa51 	bl	8005190 <memset>
}
 8004cee:	bd08      	pop	{r3, pc}
 8004cf0:	200020d0 	.word	0x200020d0

08004cf4 <gfxInit>:
void gfxInit(void){
 8004cf4:	b508      	push	{r3, lr}
	gfxClearBuffer();
 8004cf6:	f7ff fff3 	bl	8004ce0 <gfxClearBuffer>
}
 8004cfa:	bd08      	pop	{r3, pc}

08004cfc <gfxUpdateWhenPossible>:

#include "metrics.h"

void gfxUpdateWhenPossible(void){
 8004cfc:	b508      	push	{r3, lr}
	if (lcdUpdateAllowed){
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <gfxUpdateWhenPossible+0x28>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	b903      	cbnz	r3, 8004d06 <gfxUpdateWhenPossible+0xa>

		//gfxDrawDebugInfo();
		lcdUpdateAllowed = 0;
		setTime(METRIC_GFX_TOTAL);
	}
}
 8004d04:	bd08      	pop	{r3, pc}
		setTime(METRIC_GFX_START);
 8004d06:	2009      	movs	r0, #9
 8004d08:	f7ff feac 	bl	8004a64 <setTime>
		gfxClearBuffer();
 8004d0c:	f7ff ffe8 	bl	8004ce0 <gfxClearBuffer>
		gfxDrawMenu();
 8004d10:	f7ff ffb2 	bl	8004c78 <gfxDrawMenu>
		lcdUpdateAllowed = 0;
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <gfxUpdateWhenPossible+0x28>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
		setTime(METRIC_GFX_TOTAL);
 8004d1a:	200a      	movs	r0, #10
 8004d1c:	f7ff fea2 	bl	8004a64 <setTime>
}
 8004d20:	e7f0      	b.n	8004d04 <gfxUpdateWhenPossible+0x8>
 8004d22:	bf00      	nop
 8004d24:	20000968 	.word	0x20000968

08004d28 <menuMove>:

uint8_t menuPoints[2] = {0, MENU_LINES};

enum {BEGIN, END};
void menuMove (int delta){
	int newPos = menuCurrentPos + delta;
 8004d28:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <menuMove+0x48>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
	if (newPos < 0) menuCurrentPos = newPos + MENU_NR;
 8004d2c:	181b      	adds	r3, r3, r0
 8004d2e:	d405      	bmi.n	8004d3c <menuMove+0x14>
	else if (newPos > (MENU_NR)) menuCurrentPos = newPos - MENU_NR - 1;
 8004d30:	2b12      	cmp	r3, #18
 8004d32:	dd19      	ble.n	8004d68 <menuMove+0x40>
 8004d34:	3b13      	subs	r3, #19
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <menuMove+0x48>)
 8004d38:	7013      	strb	r3, [r2, #0]
 8004d3a:	e002      	b.n	8004d42 <menuMove+0x1a>
	if (newPos < 0) menuCurrentPos = newPos + MENU_NR;
 8004d3c:	3312      	adds	r3, #18
 8004d3e:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <menuMove+0x48>)
 8004d40:	7013      	strb	r3, [r2, #0]
	else menuCurrentPos = newPos;

	if (menuCurrentPos > menuPoints[END]) {
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <menuMove+0x4c>)
 8004d44:	785a      	ldrb	r2, [r3, #1]
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <menuMove+0x48>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d203      	bcs.n	8004d56 <menuMove+0x2e>
		menuPoints[END] = menuCurrentPos;
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <menuMove+0x4c>)
 8004d50:	7053      	strb	r3, [r2, #1]
		menuPoints[BEGIN] = menuPoints[END] - MENU_LINES;
 8004d52:	1f59      	subs	r1, r3, #5
 8004d54:	7011      	strb	r1, [r2, #0]
	}
	if (menuCurrentPos < menuPoints[BEGIN]) {
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <menuMove+0x4c>)
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d203      	bcs.n	8004d66 <menuMove+0x3e>
		menuPoints[BEGIN] = menuCurrentPos;
 8004d5e:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <menuMove+0x4c>)
 8004d60:	7013      	strb	r3, [r2, #0]
		menuPoints[END] = menuPoints[BEGIN] + MENU_LINES  + 1 ;
 8004d62:	3306      	adds	r3, #6
 8004d64:	7053      	strb	r3, [r2, #1]
	}

}
 8004d66:	4770      	bx	lr
	else menuCurrentPos = newPos;
 8004d68:	4a01      	ldr	r2, [pc, #4]	; (8004d70 <menuMove+0x48>)
 8004d6a:	7013      	strb	r3, [r2, #0]
 8004d6c:	e7e9      	b.n	8004d42 <menuMove+0x1a>
 8004d6e:	bf00      	nop
 8004d70:	200024d0 	.word	0x200024d0
 8004d74:	20000328 	.word	0x20000328

08004d78 <menuFillLines>:
char menuLinesTxt[MENU_LINES][MENU_MAX_LINE_LEN];
char menuHeader[MENU_MAX_LINE_LEN];

const char txtOnOff[2][3] = {"OFF"," ON"};

void menuFillLines(uint8_t pos){
 8004d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d7c:	b089      	sub	sp, #36	; 0x24
 8004d7e:	af02      	add	r7, sp, #8
	snprintf(menuHeader, MENU_MAX_LINE_LEN, "SETTINGS      %02u / %02u\0", menuCurrentPos+1, MENU_NR+1);
 8004d80:	4b4f      	ldr	r3, [pc, #316]	; (8004ec0 <menuFillLines+0x148>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2213      	movs	r2, #19
 8004d86:	9200      	str	r2, [sp, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a4e      	ldr	r2, [pc, #312]	; (8004ec4 <menuFillLines+0x14c>)
 8004d8c:	2116      	movs	r1, #22
 8004d8e:	484e      	ldr	r0, [pc, #312]	; (8004ec8 <menuFillLines+0x150>)
 8004d90:	f000 ff52 	bl	8005c38 <sniprintf>

	for (int line = 0; line < MENU_LINES; line++){
 8004d94:	2600      	movs	r6, #0
 8004d96:	e013      	b.n	8004dc0 <menuFillLines+0x48>
		snprintf(menuLinesTxt[line], MENU_MAX_LINE_LEN, "                     \0");
		if (line > menuPoints[END]) break;

		//snprintf(MENU_MAX_LINE_LEN, (char*)menuLinesTxt[line], "%s", "GO!");
		strncpy(menuLinesTxt[line]+1, menuItems[thisLine].name, MENU_MAX_LINE_LEN);
		if (thisLine == menuCurrentPos) 	menuLinesTxt[line][0] = '>';
 8004d98:	2316      	movs	r3, #22
 8004d9a:	fb06 f303 	mul.w	r3, r6, r3
 8004d9e:	213e      	movs	r1, #62	; 0x3e
 8004da0:	f809 1003 	strb.w	r1, [r9, r3]
		else 							menuLinesTxt[line][0] = ' ';

		const int bufLen = 12;
		char txtBuf[bufLen];
		switch (menuItems[thisLine].dataType){
 8004da4:	4b49      	ldr	r3, [pc, #292]	; (8004ecc <menuFillLines+0x154>)
 8004da6:	222c      	movs	r2, #44	; 0x2c
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	fb02 3301 	mla	r3, r2, r1, r3
 8004dae:	791b      	ldrb	r3, [r3, #4]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d04c      	beq.n	8004e4e <menuFillLines+0xd6>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d062      	beq.n	8004e7e <menuFillLines+0x106>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d038      	beq.n	8004e2e <menuFillLines+0xb6>
 8004dbc:	46c5      	mov	sp, r8
	for (int line = 0; line < MENU_LINES; line++){
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	2e04      	cmp	r6, #4
 8004dc2:	dc79      	bgt.n	8004eb8 <menuFillLines+0x140>
 8004dc4:	46e8      	mov	r8, sp
		int thisLine = line + menuPoints[BEGIN];
 8004dc6:	f8df e108 	ldr.w	lr, [pc, #264]	; 8004ed0 <menuFillLines+0x158>
 8004dca:	f89e 3000 	ldrb.w	r3, [lr]
 8004dce:	199c      	adds	r4, r3, r6
 8004dd0:	607c      	str	r4, [r7, #4]
		snprintf(menuLinesTxt[line], MENU_MAX_LINE_LEN, "                     \0");
 8004dd2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004ed4 <menuFillLines+0x15c>
 8004dd6:	f04f 0c16 	mov.w	ip, #22
 8004dda:	fb0c fc06 	mul.w	ip, ip, r6
 8004dde:	eb09 050c 	add.w	r5, r9, ip
 8004de2:	4c3d      	ldr	r4, [pc, #244]	; (8004ed8 <menuFillLines+0x160>)
 8004de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de6:	f849 000c 	str.w	r0, [r9, ip]
 8004dea:	6069      	str	r1, [r5, #4]
 8004dec:	60aa      	str	r2, [r5, #8]
 8004dee:	60eb      	str	r3, [r5, #12]
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	6128      	str	r0, [r5, #16]
 8004df4:	88a3      	ldrh	r3, [r4, #4]
 8004df6:	82ab      	strh	r3, [r5, #20]
		if (line > menuPoints[END]) break;
 8004df8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8004dfc:	42b3      	cmp	r3, r6
 8004dfe:	db5a      	blt.n	8004eb6 <menuFillLines+0x13e>
		strncpy(menuLinesTxt[line]+1, menuItems[thisLine].name, MENU_MAX_LINE_LEN);
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	687c      	ldr	r4, [r7, #4]
 8004e04:	fb04 f101 	mul.w	r1, r4, r1
 8004e08:	3110      	adds	r1, #16
 8004e0a:	4b30      	ldr	r3, [pc, #192]	; (8004ecc <menuFillLines+0x154>)
 8004e0c:	4419      	add	r1, r3
 8004e0e:	2216      	movs	r2, #22
 8004e10:	3104      	adds	r1, #4
 8004e12:	1c68      	adds	r0, r5, #1
 8004e14:	f000 ff53 	bl	8005cbe <strncpy>
		if (thisLine == menuCurrentPos) 	menuLinesTxt[line][0] = '>';
 8004e18:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <menuFillLines+0x148>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d0bb      	beq.n	8004d98 <menuFillLines+0x20>
		else 							menuLinesTxt[line][0] = ' ';
 8004e20:	2316      	movs	r3, #22
 8004e22:	fb06 f303 	mul.w	r3, r6, r3
 8004e26:	4a2b      	ldr	r2, [pc, #172]	; (8004ed4 <menuFillLines+0x15c>)
 8004e28:	2120      	movs	r1, #32
 8004e2a:	54d1      	strb	r1, [r2, r3]
 8004e2c:	e7ba      	b.n	8004da4 <menuFillLines+0x2c>
			case TYPE_BOOL:{
				if (menuItems[thisLine].data.b == 0 | menuItems[thisLine].data.b == 1)
 8004e2e:	4613      	mov	r3, r2
 8004e30:	460a      	mov	r2, r1
 8004e32:	fb03 f202 	mul.w	r2, r3, r2
 8004e36:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <menuFillLines+0x154>)
 8004e38:	5c99      	ldrb	r1, [r3, r2]
					strncpy(menuLinesTxt[line] + MENU_MAX_LINE_LEN - 4, txtOnOff[menuItems[thisLine].data.b], 3);
 8004e3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004e3e:	2203      	movs	r2, #3
 8004e40:	4b26      	ldr	r3, [pc, #152]	; (8004edc <menuFillLines+0x164>)
 8004e42:	4419      	add	r1, r3
 8004e44:	f105 0012 	add.w	r0, r5, #18
 8004e48:	f000 ff39 	bl	8005cbe <strncpy>
 8004e4c:	e7b6      	b.n	8004dbc <menuFillLines+0x44>
				break;
			}

			case TYPE_INT:{
					snprintf(txtBuf, bufLen, "%u\0", menuItems[thisLine].data.i);
 8004e4e:	232c      	movs	r3, #44	; 0x2c
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	fb03 f202 	mul.w	r2, r3, r2
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <menuFillLines+0x154>)
 8004e58:	589b      	ldr	r3, [r3, r2]
 8004e5a:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <menuFillLines+0x168>)
 8004e5c:	210c      	movs	r1, #12
 8004e5e:	1878      	adds	r0, r7, r1
 8004e60:	f000 feea 	bl	8005c38 <sniprintf>
					strncpy(menuLinesTxt[line] + MENU_MAX_LINE_LEN - strlen(txtBuf) - 1, txtBuf, strlen(txtBuf));
 8004e64:	f107 000c 	add.w	r0, r7, #12
 8004e68:	f7fb f972 	bl	8000150 <strlen>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f1c0 0015 	rsb	r0, r0, #21
 8004e72:	f107 010c 	add.w	r1, r7, #12
 8004e76:	4428      	add	r0, r5
 8004e78:	f000 ff21 	bl	8005cbe <strncpy>
				break;
 8004e7c:	e79e      	b.n	8004dbc <menuFillLines+0x44>
			}

			case TYPE_FLOAT:{
				snprintf(txtBuf, bufLen, "%.1f\0", menuItems[thisLine].data.f);
 8004e7e:	232c      	movs	r3, #44	; 0x2c
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	fb03 f202 	mul.w	r2, r3, r2
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <menuFillLines+0x154>)
 8004e88:	5898      	ldr	r0, [r3, r2]
 8004e8a:	f7fb facd 	bl	8000428 <__aeabi_f2d>
 8004e8e:	e9cd 0100 	strd	r0, r1, [sp]
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <menuFillLines+0x16c>)
 8004e94:	210c      	movs	r1, #12
 8004e96:	1878      	adds	r0, r7, r1
 8004e98:	f000 fece 	bl	8005c38 <sniprintf>
				strncpy(menuLinesTxt[line] + MENU_MAX_LINE_LEN - strlen(txtBuf) - 1, txtBuf, strlen(txtBuf));
 8004e9c:	f107 000c 	add.w	r0, r7, #12
 8004ea0:	f7fb f956 	bl	8000150 <strlen>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	f1c0 0015 	rsb	r0, r0, #21
 8004eaa:	f107 010c 	add.w	r1, r7, #12
 8004eae:	4428      	add	r0, r5
 8004eb0:	f000 ff05 	bl	8005cbe <strncpy>
				break;
 8004eb4:	e782      	b.n	8004dbc <menuFillLines+0x44>
 8004eb6:	46c5      	mov	sp, r8
			}
		}
	}
}
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ec0:	200024d0 	.word	0x200024d0
 8004ec4:	08008040 	.word	0x08008040
 8004ec8:	200024d4 	.word	0x200024d4
 8004ecc:	20000010 	.word	0x20000010
 8004ed0:	20000328 	.word	0x20000328
 8004ed4:	200024ec 	.word	0x200024ec
 8004ed8:	0800805c 	.word	0x0800805c
 8004edc:	080083ec 	.word	0x080083ec
 8004ee0:	08008074 	.word	0x08008074
 8004ee4:	08008078 	.word	0x08008078

08004ee8 <schedInit>:
#include "ssd1309.h"
#include "menu.h"

void everythingElse(void);

void schedInit(void){
 8004ee8:	b508      	push	{r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc1);
 8004eea:	480b      	ldr	r0, [pc, #44]	; (8004f18 <schedInit+0x30>)
 8004eec:	f7fc fe2e 	bl	8001b4c <HAL_ADCEx_Calibration_Start>
	HAL_Delay(100);
 8004ef0:	2064      	movs	r0, #100	; 0x64
 8004ef2:	f7fc fbad 	bl	8001650 <HAL_Delay>
	debugInit();
 8004ef6:	f000 f8cb 	bl	8005090 <debugInit>


	radio.txState = RX;
 8004efa:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <schedInit+0x34>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
	dspInit();
 8004f00:	f7ff fc58 	bl	80047b4 <dspInit>
	HAL_Delay(10);
 8004f04:	200a      	movs	r0, #10
 8004f06:	f7fc fba3 	bl	8001650 <HAL_Delay>

	dspStart();
 8004f0a:	f7ff fc8d 	bl	8004828 <dspStart>
	//gfxDemoDraw();
	ssd1309Init();
 8004f0e:	f7ff fc15 	bl	800473c <ssd1309Init>
	gfxInit();
 8004f12:	f7ff feef 	bl	8004cf4 <gfxInit>


}
 8004f16:	bd08      	pop	{r3, pc}
 8004f18:	20000658 	.word	0x20000658
 8004f1c:	2000255c 	.word	0x2000255c

08004f20 <everythingElse>:

uint32_t nextTime = 2000;

void everythingElse(void){
	//					VVV this makes else start only after DSP is done
	if (!elseDone && dspProcDone){
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <everythingElse+0x78>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b913      	cbnz	r3, 8004f2c <everythingElse+0xc>
 8004f26:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <everythingElse+0x7c>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	b903      	cbnz	r3, 8004f2e <everythingElse+0xe>
 8004f2c:	4770      	bx	lr
void everythingElse(void){
 8004f2e:	b510      	push	{r4, lr}
				for (int i=0; i<500; i++)
					__NOP();
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
				*/

			if (HAL_GetTick() >= nextTime){
 8004f30:	f7fc fb88 	bl	8001644 <HAL_GetTick>
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <everythingElse+0x80>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4298      	cmp	r0, r3
 8004f3a:	d222      	bcs.n	8004f82 <everythingElse+0x62>
				menuMove(-1);
				nextTime = HAL_GetTick() + 500;
			}

			setTime(METRIC_ELSE_START);
 8004f3c:	200b      	movs	r0, #11
 8004f3e:	f7ff fd91 	bl	8004a64 <setTime>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8004f42:	4c18      	ldr	r4, [pc, #96]	; (8004fa4 <everythingElse+0x84>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f7fd faa6 	bl	800249c <HAL_GPIO_WritePin>
				//fillDebugInfo();
				ssd1309PageUpdRoutine();
 8004f50:	f7ff fb80 	bl	8004654 <ssd1309PageUpdRoutine>
				gfxUpdateWhenPossible();
 8004f54:	f7ff fed2 	bl	8004cfc <gfxUpdateWhenPossible>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7fd fa9c 	bl	800249c <HAL_GPIO_WritePin>
			setTime(METRIC_ELSE_TOTAL);
 8004f64:	200c      	movs	r0, #12
 8004f66:	f7ff fd7d 	bl	8004a64 <setTime>
			lastElseTime = metrics.metric[METRIC_ELSE_START].time - metrics.metric[METRIC_ELSE_TOTAL].time;
 8004f6a:	4a0f      	ldr	r2, [pc, #60]	; (8004fa8 <everythingElse+0x88>)
 8004f6c:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8004f70:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <everythingElse+0x8c>)
 8004f78:	6013      	str	r3, [r2, #0]


			elseDone = 1;
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <everythingElse+0x78>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
	}


	// int adc_inj = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
	// encInputProcess(0, encA, encB);
}
 8004f80:	bd10      	pop	{r4, pc}
				menuMove(-1);
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	f7ff fecf 	bl	8004d28 <menuMove>
				nextTime = HAL_GetTick() + 500;
 8004f8a:	f7fc fb5b 	bl	8001644 <HAL_GetTick>
 8004f8e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8004f92:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <everythingElse+0x80>)
 8004f94:	6018      	str	r0, [r3, #0]
 8004f96:	e7d1      	b.n	8004f3c <everythingElse+0x1c>
 8004f98:	200026cc 	.word	0x200026cc
 8004f9c:	20000f74 	.word	0x20000f74
 8004fa0:	20000464 	.word	0x20000464
 8004fa4:	40010c00 	.word	0x40010c00
 8004fa8:	2000032c 	.word	0x2000032c
 8004fac:	200026d0 	.word	0x200026d0

08004fb0 <schedMainLoop>:
inline void schedMainLoop(void){
 8004fb0:	b508      	push	{r3, lr}
	 dspProc();
 8004fb2:	f7ff fd65 	bl	8004a80 <dspProc>
	 everythingElse();
 8004fb6:	f7ff ffb3 	bl	8004f20 <everythingElse>
}
 8004fba:	bd08      	pop	{r3, pc}

08004fbc <debugPrintColor>:
	free(output);
}



void debugPrintColor(int color, const char *fmt, ...){
 8004fbc:	b40e      	push	{r1, r2, r3}
 8004fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc0:	b08a      	sub	sp, #40	; 0x28
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	ac0f      	add	r4, sp, #60	; 0x3c
 8004fc6:	f854 7b04 	ldr.w	r7, [r4], #4
	
	uint32_t timeNow = HAL_GetTick();
 8004fca:	f7fc fb3b 	bl	8001644 <HAL_GetTick>
 8004fce:	4606      	mov	r6, r0
	//char timBuf[32];
	//sprintf(timBuf, "+%u ms: ", (timeNow - lastTime));
	
	char txtBuf[32];
    va_list args;
    va_start(args, fmt);
 8004fd0:	9401      	str	r4, [sp, #4]
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	463a      	mov	r2, r7
 8004fd6:	2120      	movs	r1, #32
 8004fd8:	a802      	add	r0, sp, #8
 8004fda:	f000 feaf 	bl	8005d3c <vsniprintf>
    va_end(args);
	
	//CDC_Transmit_FS((unsigned char*)txtBuf, strlen(txtBuf));
	////HAL_Delay(100);
	char nlBuf[] = {"\r\n"};
 8004fde:	4b25      	ldr	r3, [pc, #148]	; (8005074 <debugPrintColor+0xb8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8ad 3000 	strh.w	r3, [sp]
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	f88d 3002 	strb.w	r3, [sp, #2]

	char* output;
	output = malloc(10 + /*strlen(timBuf)*/ + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
 8004fec:	a802      	add	r0, sp, #8
 8004fee:	f7fb f8af 	bl	8000150 <strlen>
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4668      	mov	r0, sp
 8004ff6:	f7fb f8ab 	bl	8000150 <strlen>
 8004ffa:	4420      	add	r0, r4
 8004ffc:	300b      	adds	r0, #11
 8004ffe:	f000 f8bf 	bl	8005180 <malloc>
 8005002:	4604      	mov	r4, r0
		
	switch (color){
 8005004:	2d01      	cmp	r5, #1
 8005006:	d02a      	beq.n	800505e <debugPrintColor+0xa2>
 8005008:	2d02      	cmp	r5, #2
 800500a:	d02d      	beq.n	8005068 <debugPrintColor+0xac>
 800500c:	b315      	cbz	r5, 8005054 <debugPrintColor+0x98>
		case COLOR_GREEN: {strcpy(output, "\033[0;32m"); break;}
		case COLOR_BLUE: {strcpy(output, "\033[1;34m"); break;}
	}
	
	//strcat(output, timBuf);
	strcat(output, txtBuf); 
 800500e:	a902      	add	r1, sp, #8
 8005010:	4620      	mov	r0, r4
 8005012:	f000 fe45 	bl	8005ca0 <strcat>
	strcat(output, nlBuf); 
 8005016:	4669      	mov	r1, sp
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fe41 	bl	8005ca0 <strcat>
	strcat(output, "\033[0m");
 800501e:	4620      	mov	r0, r4
 8005020:	f7fb f896 	bl	8000150 <strlen>
 8005024:	4603      	mov	r3, r0
 8005026:	1821      	adds	r1, r4, r0
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <debugPrintColor+0xbc>)
 800502a:	6810      	ldr	r0, [r2, #0]
 800502c:	50e0      	str	r0, [r4, r3]
 800502e:	7913      	ldrb	r3, [r2, #4]
 8005030:	710b      	strb	r3, [r1, #4]
	
	
	//((USBD_CDC_HandleTypeDef*)(USBD_Device.pClassData))->TxState
	
	lastTime = timeNow;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <debugPrintColor+0xc0>)
 8005034:	601e      	str	r6, [r3, #0]
	
	#ifdef DBG_UART
		HAL_UART_Transmit(dbgUartPtr, output, strlen(output), 2);
 8005036:	4620      	mov	r0, r4
 8005038:	f7fb f88a 	bl	8000150 <strlen>
 800503c:	2302      	movs	r3, #2
 800503e:	b282      	uxth	r2, r0
 8005040:	4621      	mov	r1, r4
 8005042:	480f      	ldr	r0, [pc, #60]	; (8005080 <debugPrintColor+0xc4>)
 8005044:	6800      	ldr	r0, [r0, #0]
 8005046:	f7ff f82e 	bl	80040a6 <HAL_UART_Transmit>
		while (result != USBD_OK);
	#endif
	*/

	//free(output);
}
 800504a:	b00a      	add	sp, #40	; 0x28
 800504c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005050:	b003      	add	sp, #12
 8005052:	4770      	bx	lr
		case COLOR_RED: {strcpy(output, "\033[0;31m"); break;}
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <debugPrintColor+0xc8>)
 8005056:	cb03      	ldmia	r3!, {r0, r1}
 8005058:	6020      	str	r0, [r4, #0]
 800505a:	6061      	str	r1, [r4, #4]
 800505c:	e7d7      	b.n	800500e <debugPrintColor+0x52>
		case COLOR_GREEN: {strcpy(output, "\033[0;32m"); break;}
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <debugPrintColor+0xcc>)
 8005060:	cb03      	ldmia	r3!, {r0, r1}
 8005062:	6020      	str	r0, [r4, #0]
 8005064:	6061      	str	r1, [r4, #4]
 8005066:	e7d2      	b.n	800500e <debugPrintColor+0x52>
		case COLOR_BLUE: {strcpy(output, "\033[1;34m"); break;}
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <debugPrintColor+0xd0>)
 800506a:	cb03      	ldmia	r3!, {r0, r1}
 800506c:	6020      	str	r0, [r4, #0]
 800506e:	6061      	str	r1, [r4, #4]
 8005070:	e7cd      	b.n	800500e <debugPrintColor+0x52>
 8005072:	bf00      	nop
 8005074:	080083f4 	.word	0x080083f4
 8005078:	08008410 	.word	0x08008410
 800507c:	200026d4 	.word	0x200026d4
 8005080:	20000468 	.word	0x20000468
 8005084:	080083f8 	.word	0x080083f8
 8005088:	08008400 	.word	0x08008400
 800508c:	08008408 	.word	0x08008408

08005090 <debugInit>:

void debugPinSet(bool i){
	HAL_GPIO_WritePin(DEBUG_PIN_PORT, DEBUG_PIN, i); 
}

void debugInit(void){
 8005090:	b508      	push	{r3, lr}
	//HAL_Delay(500);
	//debugClearTerminal();
	HAL_Delay(500);
 8005092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005096:	f7fc fadb 	bl	8001650 <HAL_Delay>
	debugPrintColor(COLOR_GREEN, "hello!");
 800509a:	4906      	ldr	r1, [pc, #24]	; (80050b4 <debugInit+0x24>)
 800509c:	2001      	movs	r0, #1
 800509e:	f7ff ff8d 	bl	8004fbc <debugPrintColor>
	debugPrintColor(COLOR_BLUE, "%u", HAL_RCC_GetSysClockFreq());
 80050a2:	f7fd fcfd 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <debugInit+0x28>)
 80050aa:	2002      	movs	r0, #2
 80050ac:	f7ff ff86 	bl	8004fbc <debugPrintColor>
	//debugPinInit();
}
 80050b0:	bd08      	pop	{r3, pc}
 80050b2:	bf00      	nop
 80050b4:	08008418 	.word	0x08008418
 80050b8:	08008420 	.word	0x08008420

080050bc <arm_fir_interpolate_init_q31>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	fb92 f6f1 	sdiv	r6, r2, r1
 80050c2:	fb01 2416 	mls	r4, r1, r6, r2
 80050c6:	b994      	cbnz	r4, 80050ee <arm_fir_interpolate_init_q31+0x32>
 80050c8:	9a05      	ldr	r2, [sp, #20]
 80050ca:	6043      	str	r3, [r0, #4]
 80050cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80050d0:	3a01      	subs	r2, #1
 80050d2:	4432      	add	r2, r6
 80050d4:	7001      	strb	r1, [r0, #0]
 80050d6:	4605      	mov	r5, r0
 80050d8:	8046      	strh	r6, [r0, #2]
 80050da:	0092      	lsls	r2, r2, #2
 80050dc:	9804      	ldr	r0, [sp, #16]
 80050de:	4621      	mov	r1, r4
 80050e0:	f000 f856 	bl	8005190 <memset>
 80050e4:	4620      	mov	r0, r4
 80050e6:	9b04      	ldr	r3, [sp, #16]
 80050e8:	60ab      	str	r3, [r5, #8]
 80050ea:	b240      	sxtb	r0, r0
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	20fe      	movs	r0, #254	; 0xfe
 80050f0:	e7fb      	b.n	80050ea <arm_fir_interpolate_init_q31+0x2e>
 80050f2:	bf00      	nop

080050f4 <arm_fir_decimate_init_q31>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4616      	mov	r6, r2
 80050f8:	9a05      	ldr	r2, [sp, #20]
 80050fa:	fbb2 f4f6 	udiv	r4, r2, r6
 80050fe:	fb06 2414 	mls	r4, r6, r4, r2
 8005102:	b98c      	cbnz	r4, 8005128 <arm_fir_decimate_init_q31+0x34>
 8005104:	4605      	mov	r5, r0
 8005106:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 800510a:	3801      	subs	r0, #1
 800510c:	4402      	add	r2, r0
 800510e:	8069      	strh	r1, [r5, #2]
 8005110:	606b      	str	r3, [r5, #4]
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	9804      	ldr	r0, [sp, #16]
 8005116:	4621      	mov	r1, r4
 8005118:	f000 f83a 	bl	8005190 <memset>
 800511c:	4620      	mov	r0, r4
 800511e:	9b04      	ldr	r3, [sp, #16]
 8005120:	702e      	strb	r6, [r5, #0]
 8005122:	60ab      	str	r3, [r5, #8]
 8005124:	b240      	sxtb	r0, r0
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	20fe      	movs	r0, #254	; 0xfe
 800512a:	e7fb      	b.n	8005124 <arm_fir_decimate_init_q31+0x30>

0800512c <__errno>:
 800512c:	4b01      	ldr	r3, [pc, #4]	; (8005134 <__errno+0x8>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000046c 	.word	0x2000046c

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	2600      	movs	r6, #0
 800513c:	4d0c      	ldr	r5, [pc, #48]	; (8005170 <__libc_init_array+0x38>)
 800513e:	4c0d      	ldr	r4, [pc, #52]	; (8005174 <__libc_init_array+0x3c>)
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	f002 ff6c 	bl	8008024 <_init>
 800514c:	2600      	movs	r6, #0
 800514e:	4d0a      	ldr	r5, [pc, #40]	; (8005178 <__libc_init_array+0x40>)
 8005150:	4c0a      	ldr	r4, [pc, #40]	; (800517c <__libc_init_array+0x44>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08008804 	.word	0x08008804
 8005174:	08008804 	.word	0x08008804
 8005178:	08008804 	.word	0x08008804
 800517c:	08008808 	.word	0x08008808

08005180 <malloc>:
 8005180:	4b02      	ldr	r3, [pc, #8]	; (800518c <malloc+0xc>)
 8005182:	4601      	mov	r1, r0
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	f000 b873 	b.w	8005270 <_malloc_r>
 800518a:	bf00      	nop
 800518c:	2000046c 	.word	0x2000046c

08005190 <memset>:
 8005190:	4603      	mov	r3, r0
 8005192:	4402      	add	r2, r0
 8005194:	4293      	cmp	r3, r2
 8005196:	d100      	bne.n	800519a <memset+0xa>
 8005198:	4770      	bx	lr
 800519a:	f803 1b01 	strb.w	r1, [r3], #1
 800519e:	e7f9      	b.n	8005194 <memset+0x4>

080051a0 <_free_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d040      	beq.n	800522a <_free_r+0x8a>
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f0c      	subs	r4, r1, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	18e4      	addlt	r4, r4, r3
 80051b4:	f001 fc9c 	bl	8006af0 <__malloc_lock>
 80051b8:	4a1c      	ldr	r2, [pc, #112]	; (800522c <_free_r+0x8c>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b933      	cbnz	r3, 80051cc <_free_r+0x2c>
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	4628      	mov	r0, r5
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f001 bc98 	b.w	8006afc <__malloc_unlock>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x42>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf01      	itttt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	1809      	addeq	r1, r1, r0
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	e7ed      	b.n	80051be <_free_r+0x1e>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x4c>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x42>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1850      	adds	r0, r2, r1
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x6c>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	4401      	add	r1, r0
 80051f8:	1850      	adds	r0, r2, r1
 80051fa:	4283      	cmp	r3, r0
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1e0      	bne.n	80051c2 <_free_r+0x22>
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4401      	add	r1, r0
 8005206:	6011      	str	r1, [r2, #0]
 8005208:	6053      	str	r3, [r2, #4]
 800520a:	e7da      	b.n	80051c2 <_free_r+0x22>
 800520c:	d902      	bls.n	8005214 <_free_r+0x74>
 800520e:	230c      	movs	r3, #12
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	e7d6      	b.n	80051c2 <_free_r+0x22>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1821      	adds	r1, r4, r0
 8005218:	428b      	cmp	r3, r1
 800521a:	bf01      	itttt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	1809      	addeq	r1, r1, r0
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	6063      	str	r3, [r4, #4]
 8005226:	6054      	str	r4, [r2, #4]
 8005228:	e7cb      	b.n	80051c2 <_free_r+0x22>
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200026d8 	.word	0x200026d8

08005230 <sbrk_aligned>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4e0e      	ldr	r6, [pc, #56]	; (800526c <sbrk_aligned+0x3c>)
 8005234:	460c      	mov	r4, r1
 8005236:	6831      	ldr	r1, [r6, #0]
 8005238:	4605      	mov	r5, r0
 800523a:	b911      	cbnz	r1, 8005242 <sbrk_aligned+0x12>
 800523c:	f000 fcec 	bl	8005c18 <_sbrk_r>
 8005240:	6030      	str	r0, [r6, #0]
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	f000 fce7 	bl	8005c18 <_sbrk_r>
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	d00a      	beq.n	8005264 <sbrk_aligned+0x34>
 800524e:	1cc4      	adds	r4, r0, #3
 8005250:	f024 0403 	bic.w	r4, r4, #3
 8005254:	42a0      	cmp	r0, r4
 8005256:	d007      	beq.n	8005268 <sbrk_aligned+0x38>
 8005258:	1a21      	subs	r1, r4, r0
 800525a:	4628      	mov	r0, r5
 800525c:	f000 fcdc 	bl	8005c18 <_sbrk_r>
 8005260:	3001      	adds	r0, #1
 8005262:	d101      	bne.n	8005268 <sbrk_aligned+0x38>
 8005264:	f04f 34ff 	mov.w	r4, #4294967295
 8005268:	4620      	mov	r0, r4
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	200026dc 	.word	0x200026dc

08005270 <_malloc_r>:
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	1ccd      	adds	r5, r1, #3
 8005276:	f025 0503 	bic.w	r5, r5, #3
 800527a:	3508      	adds	r5, #8
 800527c:	2d0c      	cmp	r5, #12
 800527e:	bf38      	it	cc
 8005280:	250c      	movcc	r5, #12
 8005282:	2d00      	cmp	r5, #0
 8005284:	4607      	mov	r7, r0
 8005286:	db01      	blt.n	800528c <_malloc_r+0x1c>
 8005288:	42a9      	cmp	r1, r5
 800528a:	d905      	bls.n	8005298 <_malloc_r+0x28>
 800528c:	230c      	movs	r3, #12
 800528e:	2600      	movs	r6, #0
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	4630      	mov	r0, r6
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005298:	4e2e      	ldr	r6, [pc, #184]	; (8005354 <_malloc_r+0xe4>)
 800529a:	f001 fc29 	bl	8006af0 <__malloc_lock>
 800529e:	6833      	ldr	r3, [r6, #0]
 80052a0:	461c      	mov	r4, r3
 80052a2:	bb34      	cbnz	r4, 80052f2 <_malloc_r+0x82>
 80052a4:	4629      	mov	r1, r5
 80052a6:	4638      	mov	r0, r7
 80052a8:	f7ff ffc2 	bl	8005230 <sbrk_aligned>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	4604      	mov	r4, r0
 80052b0:	d14d      	bne.n	800534e <_malloc_r+0xde>
 80052b2:	6834      	ldr	r4, [r6, #0]
 80052b4:	4626      	mov	r6, r4
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	d140      	bne.n	800533c <_malloc_r+0xcc>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	4631      	mov	r1, r6
 80052be:	4638      	mov	r0, r7
 80052c0:	eb04 0803 	add.w	r8, r4, r3
 80052c4:	f000 fca8 	bl	8005c18 <_sbrk_r>
 80052c8:	4580      	cmp	r8, r0
 80052ca:	d13a      	bne.n	8005342 <_malloc_r+0xd2>
 80052cc:	6821      	ldr	r1, [r4, #0]
 80052ce:	3503      	adds	r5, #3
 80052d0:	1a6d      	subs	r5, r5, r1
 80052d2:	f025 0503 	bic.w	r5, r5, #3
 80052d6:	3508      	adds	r5, #8
 80052d8:	2d0c      	cmp	r5, #12
 80052da:	bf38      	it	cc
 80052dc:	250c      	movcc	r5, #12
 80052de:	4638      	mov	r0, r7
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7ff ffa5 	bl	8005230 <sbrk_aligned>
 80052e6:	3001      	adds	r0, #1
 80052e8:	d02b      	beq.n	8005342 <_malloc_r+0xd2>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	442b      	add	r3, r5
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	e00e      	b.n	8005310 <_malloc_r+0xa0>
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	1b52      	subs	r2, r2, r5
 80052f6:	d41e      	bmi.n	8005336 <_malloc_r+0xc6>
 80052f8:	2a0b      	cmp	r2, #11
 80052fa:	d916      	bls.n	800532a <_malloc_r+0xba>
 80052fc:	1961      	adds	r1, r4, r5
 80052fe:	42a3      	cmp	r3, r4
 8005300:	6025      	str	r5, [r4, #0]
 8005302:	bf18      	it	ne
 8005304:	6059      	strne	r1, [r3, #4]
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	bf08      	it	eq
 800530a:	6031      	streq	r1, [r6, #0]
 800530c:	5162      	str	r2, [r4, r5]
 800530e:	604b      	str	r3, [r1, #4]
 8005310:	4638      	mov	r0, r7
 8005312:	f104 060b 	add.w	r6, r4, #11
 8005316:	f001 fbf1 	bl	8006afc <__malloc_unlock>
 800531a:	f026 0607 	bic.w	r6, r6, #7
 800531e:	1d23      	adds	r3, r4, #4
 8005320:	1af2      	subs	r2, r6, r3
 8005322:	d0b6      	beq.n	8005292 <_malloc_r+0x22>
 8005324:	1b9b      	subs	r3, r3, r6
 8005326:	50a3      	str	r3, [r4, r2]
 8005328:	e7b3      	b.n	8005292 <_malloc_r+0x22>
 800532a:	6862      	ldr	r2, [r4, #4]
 800532c:	42a3      	cmp	r3, r4
 800532e:	bf0c      	ite	eq
 8005330:	6032      	streq	r2, [r6, #0]
 8005332:	605a      	strne	r2, [r3, #4]
 8005334:	e7ec      	b.n	8005310 <_malloc_r+0xa0>
 8005336:	4623      	mov	r3, r4
 8005338:	6864      	ldr	r4, [r4, #4]
 800533a:	e7b2      	b.n	80052a2 <_malloc_r+0x32>
 800533c:	4634      	mov	r4, r6
 800533e:	6876      	ldr	r6, [r6, #4]
 8005340:	e7b9      	b.n	80052b6 <_malloc_r+0x46>
 8005342:	230c      	movs	r3, #12
 8005344:	4638      	mov	r0, r7
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	f001 fbd8 	bl	8006afc <__malloc_unlock>
 800534c:	e7a1      	b.n	8005292 <_malloc_r+0x22>
 800534e:	6025      	str	r5, [r4, #0]
 8005350:	e7de      	b.n	8005310 <_malloc_r+0xa0>
 8005352:	bf00      	nop
 8005354:	200026d8 	.word	0x200026d8

08005358 <__cvt>:
 8005358:	2b00      	cmp	r3, #0
 800535a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535e:	461f      	mov	r7, r3
 8005360:	bfbb      	ittet	lt
 8005362:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005366:	461f      	movlt	r7, r3
 8005368:	2300      	movge	r3, #0
 800536a:	232d      	movlt	r3, #45	; 0x2d
 800536c:	b088      	sub	sp, #32
 800536e:	4614      	mov	r4, r2
 8005370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005372:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005374:	7013      	strb	r3, [r2, #0]
 8005376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005378:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800537c:	f023 0820 	bic.w	r8, r3, #32
 8005380:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005384:	d005      	beq.n	8005392 <__cvt+0x3a>
 8005386:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800538a:	d100      	bne.n	800538e <__cvt+0x36>
 800538c:	3501      	adds	r5, #1
 800538e:	2302      	movs	r3, #2
 8005390:	e000      	b.n	8005394 <__cvt+0x3c>
 8005392:	2303      	movs	r3, #3
 8005394:	aa07      	add	r2, sp, #28
 8005396:	9204      	str	r2, [sp, #16]
 8005398:	aa06      	add	r2, sp, #24
 800539a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800539e:	e9cd 3500 	strd	r3, r5, [sp]
 80053a2:	4622      	mov	r2, r4
 80053a4:	463b      	mov	r3, r7
 80053a6:	f000 fd83 	bl	8005eb0 <_dtoa_r>
 80053aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053ae:	4606      	mov	r6, r0
 80053b0:	d102      	bne.n	80053b8 <__cvt+0x60>
 80053b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053b4:	07db      	lsls	r3, r3, #31
 80053b6:	d522      	bpl.n	80053fe <__cvt+0xa6>
 80053b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053bc:	eb06 0905 	add.w	r9, r6, r5
 80053c0:	d110      	bne.n	80053e4 <__cvt+0x8c>
 80053c2:	7833      	ldrb	r3, [r6, #0]
 80053c4:	2b30      	cmp	r3, #48	; 0x30
 80053c6:	d10a      	bne.n	80053de <__cvt+0x86>
 80053c8:	2200      	movs	r2, #0
 80053ca:	2300      	movs	r3, #0
 80053cc:	4620      	mov	r0, r4
 80053ce:	4639      	mov	r1, r7
 80053d0:	f7fb faea 	bl	80009a8 <__aeabi_dcmpeq>
 80053d4:	b918      	cbnz	r0, 80053de <__cvt+0x86>
 80053d6:	f1c5 0501 	rsb	r5, r5, #1
 80053da:	f8ca 5000 	str.w	r5, [sl]
 80053de:	f8da 3000 	ldr.w	r3, [sl]
 80053e2:	4499      	add	r9, r3
 80053e4:	2200      	movs	r2, #0
 80053e6:	2300      	movs	r3, #0
 80053e8:	4620      	mov	r0, r4
 80053ea:	4639      	mov	r1, r7
 80053ec:	f7fb fadc 	bl	80009a8 <__aeabi_dcmpeq>
 80053f0:	b108      	cbz	r0, 80053f6 <__cvt+0x9e>
 80053f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80053f6:	2230      	movs	r2, #48	; 0x30
 80053f8:	9b07      	ldr	r3, [sp, #28]
 80053fa:	454b      	cmp	r3, r9
 80053fc:	d307      	bcc.n	800540e <__cvt+0xb6>
 80053fe:	4630      	mov	r0, r6
 8005400:	9b07      	ldr	r3, [sp, #28]
 8005402:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005404:	1b9b      	subs	r3, r3, r6
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	b008      	add	sp, #32
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	9107      	str	r1, [sp, #28]
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e7f0      	b.n	80053f8 <__cvt+0xa0>

08005416 <__exponent>:
 8005416:	4603      	mov	r3, r0
 8005418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800541a:	2900      	cmp	r1, #0
 800541c:	f803 2b02 	strb.w	r2, [r3], #2
 8005420:	bfb6      	itet	lt
 8005422:	222d      	movlt	r2, #45	; 0x2d
 8005424:	222b      	movge	r2, #43	; 0x2b
 8005426:	4249      	neglt	r1, r1
 8005428:	2909      	cmp	r1, #9
 800542a:	7042      	strb	r2, [r0, #1]
 800542c:	dd2b      	ble.n	8005486 <__exponent+0x70>
 800542e:	f10d 0407 	add.w	r4, sp, #7
 8005432:	46a4      	mov	ip, r4
 8005434:	270a      	movs	r7, #10
 8005436:	fb91 f6f7 	sdiv	r6, r1, r7
 800543a:	460a      	mov	r2, r1
 800543c:	46a6      	mov	lr, r4
 800543e:	fb07 1516 	mls	r5, r7, r6, r1
 8005442:	2a63      	cmp	r2, #99	; 0x63
 8005444:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005448:	4631      	mov	r1, r6
 800544a:	f104 34ff 	add.w	r4, r4, #4294967295
 800544e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005452:	dcf0      	bgt.n	8005436 <__exponent+0x20>
 8005454:	3130      	adds	r1, #48	; 0x30
 8005456:	f1ae 0502 	sub.w	r5, lr, #2
 800545a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800545e:	4629      	mov	r1, r5
 8005460:	1c44      	adds	r4, r0, #1
 8005462:	4561      	cmp	r1, ip
 8005464:	d30a      	bcc.n	800547c <__exponent+0x66>
 8005466:	f10d 0209 	add.w	r2, sp, #9
 800546a:	eba2 020e 	sub.w	r2, r2, lr
 800546e:	4565      	cmp	r5, ip
 8005470:	bf88      	it	hi
 8005472:	2200      	movhi	r2, #0
 8005474:	4413      	add	r3, r2
 8005476:	1a18      	subs	r0, r3, r0
 8005478:	b003      	add	sp, #12
 800547a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800547c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005480:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005484:	e7ed      	b.n	8005462 <__exponent+0x4c>
 8005486:	2330      	movs	r3, #48	; 0x30
 8005488:	3130      	adds	r1, #48	; 0x30
 800548a:	7083      	strb	r3, [r0, #2]
 800548c:	70c1      	strb	r1, [r0, #3]
 800548e:	1d03      	adds	r3, r0, #4
 8005490:	e7f1      	b.n	8005476 <__exponent+0x60>
	...

08005494 <_printf_float>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	b091      	sub	sp, #68	; 0x44
 800549a:	460c      	mov	r4, r1
 800549c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80054a0:	4616      	mov	r6, r2
 80054a2:	461f      	mov	r7, r3
 80054a4:	4605      	mov	r5, r0
 80054a6:	f001 fb03 	bl	8006ab0 <_localeconv_r>
 80054aa:	6803      	ldr	r3, [r0, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	f7fa fe4e 	bl	8000150 <strlen>
 80054b4:	2300      	movs	r3, #0
 80054b6:	930e      	str	r3, [sp, #56]	; 0x38
 80054b8:	f8d8 3000 	ldr.w	r3, [r8]
 80054bc:	900a      	str	r0, [sp, #40]	; 0x28
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	f103 0208 	add.w	r2, r3, #8
 80054c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80054cc:	f8d4 b000 	ldr.w	fp, [r4]
 80054d0:	f8c8 2000 	str.w	r2, [r8]
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80054e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80054e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ea:	4640      	mov	r0, r8
 80054ec:	4b9c      	ldr	r3, [pc, #624]	; (8005760 <_printf_float+0x2cc>)
 80054ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054f0:	f7fb fa8c 	bl	8000a0c <__aeabi_dcmpun>
 80054f4:	bb70      	cbnz	r0, 8005554 <_printf_float+0xc0>
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	4640      	mov	r0, r8
 80054fc:	4b98      	ldr	r3, [pc, #608]	; (8005760 <_printf_float+0x2cc>)
 80054fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005500:	f7fb fa66 	bl	80009d0 <__aeabi_dcmple>
 8005504:	bb30      	cbnz	r0, 8005554 <_printf_float+0xc0>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4640      	mov	r0, r8
 800550c:	4651      	mov	r1, sl
 800550e:	f7fb fa55 	bl	80009bc <__aeabi_dcmplt>
 8005512:	b110      	cbz	r0, 800551a <_printf_float+0x86>
 8005514:	232d      	movs	r3, #45	; 0x2d
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551a:	4b92      	ldr	r3, [pc, #584]	; (8005764 <_printf_float+0x2d0>)
 800551c:	4892      	ldr	r0, [pc, #584]	; (8005768 <_printf_float+0x2d4>)
 800551e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005522:	bf94      	ite	ls
 8005524:	4698      	movls	r8, r3
 8005526:	4680      	movhi	r8, r0
 8005528:	2303      	movs	r3, #3
 800552a:	f04f 0a00 	mov.w	sl, #0
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	f02b 0304 	bic.w	r3, fp, #4
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	4633      	mov	r3, r6
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	9700      	str	r7, [sp, #0]
 800553e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005540:	f000 f9d4 	bl	80058ec <_printf_common>
 8005544:	3001      	adds	r0, #1
 8005546:	f040 8090 	bne.w	800566a <_printf_float+0x1d6>
 800554a:	f04f 30ff 	mov.w	r0, #4294967295
 800554e:	b011      	add	sp, #68	; 0x44
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005554:	4642      	mov	r2, r8
 8005556:	4653      	mov	r3, sl
 8005558:	4640      	mov	r0, r8
 800555a:	4651      	mov	r1, sl
 800555c:	f7fb fa56 	bl	8000a0c <__aeabi_dcmpun>
 8005560:	b148      	cbz	r0, 8005576 <_printf_float+0xe2>
 8005562:	f1ba 0f00 	cmp.w	sl, #0
 8005566:	bfb8      	it	lt
 8005568:	232d      	movlt	r3, #45	; 0x2d
 800556a:	4880      	ldr	r0, [pc, #512]	; (800576c <_printf_float+0x2d8>)
 800556c:	bfb8      	it	lt
 800556e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005572:	4b7f      	ldr	r3, [pc, #508]	; (8005770 <_printf_float+0x2dc>)
 8005574:	e7d3      	b.n	800551e <_printf_float+0x8a>
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	d142      	bne.n	8005606 <_printf_float+0x172>
 8005580:	2306      	movs	r3, #6
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	9206      	str	r2, [sp, #24]
 8005588:	aa0e      	add	r2, sp, #56	; 0x38
 800558a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800558e:	aa0d      	add	r2, sp, #52	; 0x34
 8005590:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005594:	9203      	str	r2, [sp, #12]
 8005596:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800559a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	6863      	ldr	r3, [r4, #4]
 80055a2:	4642      	mov	r2, r8
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4628      	mov	r0, r5
 80055a8:	4653      	mov	r3, sl
 80055aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80055ac:	f7ff fed4 	bl	8005358 <__cvt>
 80055b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055b2:	4680      	mov	r8, r0
 80055b4:	2947      	cmp	r1, #71	; 0x47
 80055b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055b8:	d108      	bne.n	80055cc <_printf_float+0x138>
 80055ba:	1cc8      	adds	r0, r1, #3
 80055bc:	db02      	blt.n	80055c4 <_printf_float+0x130>
 80055be:	6863      	ldr	r3, [r4, #4]
 80055c0:	4299      	cmp	r1, r3
 80055c2:	dd40      	ble.n	8005646 <_printf_float+0x1b2>
 80055c4:	f1a9 0902 	sub.w	r9, r9, #2
 80055c8:	fa5f f989 	uxtb.w	r9, r9
 80055cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055d0:	d81f      	bhi.n	8005612 <_printf_float+0x17e>
 80055d2:	464a      	mov	r2, r9
 80055d4:	3901      	subs	r1, #1
 80055d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055da:	910d      	str	r1, [sp, #52]	; 0x34
 80055dc:	f7ff ff1b 	bl	8005416 <__exponent>
 80055e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e2:	4682      	mov	sl, r0
 80055e4:	1813      	adds	r3, r2, r0
 80055e6:	2a01      	cmp	r2, #1
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	dc02      	bgt.n	80055f2 <_printf_float+0x15e>
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	07d2      	lsls	r2, r2, #31
 80055f0:	d501      	bpl.n	80055f6 <_printf_float+0x162>
 80055f2:	3301      	adds	r3, #1
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d09b      	beq.n	8005536 <_printf_float+0xa2>
 80055fe:	232d      	movs	r3, #45	; 0x2d
 8005600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005604:	e797      	b.n	8005536 <_printf_float+0xa2>
 8005606:	2947      	cmp	r1, #71	; 0x47
 8005608:	d1bc      	bne.n	8005584 <_printf_float+0xf0>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ba      	bne.n	8005584 <_printf_float+0xf0>
 800560e:	2301      	movs	r3, #1
 8005610:	e7b7      	b.n	8005582 <_printf_float+0xee>
 8005612:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005616:	d118      	bne.n	800564a <_printf_float+0x1b6>
 8005618:	2900      	cmp	r1, #0
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	dd0b      	ble.n	8005636 <_printf_float+0x1a2>
 800561e:	6121      	str	r1, [r4, #16]
 8005620:	b913      	cbnz	r3, 8005628 <_printf_float+0x194>
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	07d0      	lsls	r0, r2, #31
 8005626:	d502      	bpl.n	800562e <_printf_float+0x19a>
 8005628:	3301      	adds	r3, #1
 800562a:	440b      	add	r3, r1
 800562c:	6123      	str	r3, [r4, #16]
 800562e:	f04f 0a00 	mov.w	sl, #0
 8005632:	65a1      	str	r1, [r4, #88]	; 0x58
 8005634:	e7df      	b.n	80055f6 <_printf_float+0x162>
 8005636:	b913      	cbnz	r3, 800563e <_printf_float+0x1aa>
 8005638:	6822      	ldr	r2, [r4, #0]
 800563a:	07d2      	lsls	r2, r2, #31
 800563c:	d501      	bpl.n	8005642 <_printf_float+0x1ae>
 800563e:	3302      	adds	r3, #2
 8005640:	e7f4      	b.n	800562c <_printf_float+0x198>
 8005642:	2301      	movs	r3, #1
 8005644:	e7f2      	b.n	800562c <_printf_float+0x198>
 8005646:	f04f 0967 	mov.w	r9, #103	; 0x67
 800564a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564c:	4299      	cmp	r1, r3
 800564e:	db05      	blt.n	800565c <_printf_float+0x1c8>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	6121      	str	r1, [r4, #16]
 8005654:	07d8      	lsls	r0, r3, #31
 8005656:	d5ea      	bpl.n	800562e <_printf_float+0x19a>
 8005658:	1c4b      	adds	r3, r1, #1
 800565a:	e7e7      	b.n	800562c <_printf_float+0x198>
 800565c:	2900      	cmp	r1, #0
 800565e:	bfcc      	ite	gt
 8005660:	2201      	movgt	r2, #1
 8005662:	f1c1 0202 	rsble	r2, r1, #2
 8005666:	4413      	add	r3, r2
 8005668:	e7e0      	b.n	800562c <_printf_float+0x198>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	055a      	lsls	r2, r3, #21
 800566e:	d407      	bmi.n	8005680 <_printf_float+0x1ec>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	4642      	mov	r2, r8
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	d12b      	bne.n	80056d6 <_printf_float+0x242>
 800567e:	e764      	b.n	800554a <_printf_float+0xb6>
 8005680:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005684:	f240 80dd 	bls.w	8005842 <_printf_float+0x3ae>
 8005688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800568c:	2200      	movs	r2, #0
 800568e:	2300      	movs	r3, #0
 8005690:	f7fb f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8005694:	2800      	cmp	r0, #0
 8005696:	d033      	beq.n	8005700 <_printf_float+0x26c>
 8005698:	2301      	movs	r3, #1
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	4a35      	ldr	r2, [pc, #212]	; (8005774 <_printf_float+0x2e0>)
 80056a0:	47b8      	blx	r7
 80056a2:	3001      	adds	r0, #1
 80056a4:	f43f af51 	beq.w	800554a <_printf_float+0xb6>
 80056a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056ac:	429a      	cmp	r2, r3
 80056ae:	db02      	blt.n	80056b6 <_printf_float+0x222>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	07d8      	lsls	r0, r3, #31
 80056b4:	d50f      	bpl.n	80056d6 <_printf_float+0x242>
 80056b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	f43f af42 	beq.w	800554a <_printf_float+0xb6>
 80056c6:	f04f 0800 	mov.w	r8, #0
 80056ca:	f104 091a 	add.w	r9, r4, #26
 80056ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4543      	cmp	r3, r8
 80056d4:	dc09      	bgt.n	80056ea <_printf_float+0x256>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	079b      	lsls	r3, r3, #30
 80056da:	f100 8102 	bmi.w	80058e2 <_printf_float+0x44e>
 80056de:	68e0      	ldr	r0, [r4, #12]
 80056e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056e2:	4298      	cmp	r0, r3
 80056e4:	bfb8      	it	lt
 80056e6:	4618      	movlt	r0, r3
 80056e8:	e731      	b.n	800554e <_printf_float+0xba>
 80056ea:	2301      	movs	r3, #1
 80056ec:	464a      	mov	r2, r9
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	f43f af28 	beq.w	800554a <_printf_float+0xb6>
 80056fa:	f108 0801 	add.w	r8, r8, #1
 80056fe:	e7e6      	b.n	80056ce <_printf_float+0x23a>
 8005700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005702:	2b00      	cmp	r3, #0
 8005704:	dc38      	bgt.n	8005778 <_printf_float+0x2e4>
 8005706:	2301      	movs	r3, #1
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <_printf_float+0x2e0>)
 800570e:	47b8      	blx	r7
 8005710:	3001      	adds	r0, #1
 8005712:	f43f af1a 	beq.w	800554a <_printf_float+0xb6>
 8005716:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800571a:	4313      	orrs	r3, r2
 800571c:	d102      	bne.n	8005724 <_printf_float+0x290>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	07d9      	lsls	r1, r3, #31
 8005722:	d5d8      	bpl.n	80056d6 <_printf_float+0x242>
 8005724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f af0b 	beq.w	800554a <_printf_float+0xb6>
 8005734:	f04f 0900 	mov.w	r9, #0
 8005738:	f104 0a1a 	add.w	sl, r4, #26
 800573c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800573e:	425b      	negs	r3, r3
 8005740:	454b      	cmp	r3, r9
 8005742:	dc01      	bgt.n	8005748 <_printf_float+0x2b4>
 8005744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005746:	e794      	b.n	8005672 <_printf_float+0x1de>
 8005748:	2301      	movs	r3, #1
 800574a:	4652      	mov	r2, sl
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f aef9 	beq.w	800554a <_printf_float+0xb6>
 8005758:	f109 0901 	add.w	r9, r9, #1
 800575c:	e7ee      	b.n	800573c <_printf_float+0x2a8>
 800575e:	bf00      	nop
 8005760:	7fefffff 	.word	0x7fefffff
 8005764:	08008428 	.word	0x08008428
 8005768:	0800842c 	.word	0x0800842c
 800576c:	08008434 	.word	0x08008434
 8005770:	08008430 	.word	0x08008430
 8005774:	08008438 	.word	0x08008438
 8005778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800577a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800577c:	429a      	cmp	r2, r3
 800577e:	bfa8      	it	ge
 8005780:	461a      	movge	r2, r3
 8005782:	2a00      	cmp	r2, #0
 8005784:	4691      	mov	r9, r2
 8005786:	dc37      	bgt.n	80057f8 <_printf_float+0x364>
 8005788:	f04f 0b00 	mov.w	fp, #0
 800578c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005790:	f104 021a 	add.w	r2, r4, #26
 8005794:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005798:	ebaa 0309 	sub.w	r3, sl, r9
 800579c:	455b      	cmp	r3, fp
 800579e:	dc33      	bgt.n	8005808 <_printf_float+0x374>
 80057a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057a4:	429a      	cmp	r2, r3
 80057a6:	db3b      	blt.n	8005820 <_printf_float+0x38c>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07da      	lsls	r2, r3, #31
 80057ac:	d438      	bmi.n	8005820 <_printf_float+0x38c>
 80057ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057b2:	eba3 020a 	sub.w	r2, r3, sl
 80057b6:	eba3 0901 	sub.w	r9, r3, r1
 80057ba:	4591      	cmp	r9, r2
 80057bc:	bfa8      	it	ge
 80057be:	4691      	movge	r9, r2
 80057c0:	f1b9 0f00 	cmp.w	r9, #0
 80057c4:	dc34      	bgt.n	8005830 <_printf_float+0x39c>
 80057c6:	f04f 0800 	mov.w	r8, #0
 80057ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ce:	f104 0a1a 	add.w	sl, r4, #26
 80057d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	eba3 0309 	sub.w	r3, r3, r9
 80057dc:	4543      	cmp	r3, r8
 80057de:	f77f af7a 	ble.w	80056d6 <_printf_float+0x242>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4652      	mov	r2, sl
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f aeac 	beq.w	800554a <_printf_float+0xb6>
 80057f2:	f108 0801 	add.w	r8, r8, #1
 80057f6:	e7ec      	b.n	80057d2 <_printf_float+0x33e>
 80057f8:	4613      	mov	r3, r2
 80057fa:	4631      	mov	r1, r6
 80057fc:	4642      	mov	r2, r8
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	d1c0      	bne.n	8005788 <_printf_float+0x2f4>
 8005806:	e6a0      	b.n	800554a <_printf_float+0xb6>
 8005808:	2301      	movs	r3, #1
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f ae99 	beq.w	800554a <_printf_float+0xb6>
 8005818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800581a:	f10b 0b01 	add.w	fp, fp, #1
 800581e:	e7b9      	b.n	8005794 <_printf_float+0x300>
 8005820:	4631      	mov	r1, r6
 8005822:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005826:	4628      	mov	r0, r5
 8005828:	47b8      	blx	r7
 800582a:	3001      	adds	r0, #1
 800582c:	d1bf      	bne.n	80057ae <_printf_float+0x31a>
 800582e:	e68c      	b.n	800554a <_printf_float+0xb6>
 8005830:	464b      	mov	r3, r9
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	eb08 020a 	add.w	r2, r8, sl
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	d1c2      	bne.n	80057c6 <_printf_float+0x332>
 8005840:	e683      	b.n	800554a <_printf_float+0xb6>
 8005842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005844:	2a01      	cmp	r2, #1
 8005846:	dc01      	bgt.n	800584c <_printf_float+0x3b8>
 8005848:	07db      	lsls	r3, r3, #31
 800584a:	d537      	bpl.n	80058bc <_printf_float+0x428>
 800584c:	2301      	movs	r3, #1
 800584e:	4642      	mov	r2, r8
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f ae77 	beq.w	800554a <_printf_float+0xb6>
 800585c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	f43f ae6f 	beq.w	800554a <_printf_float+0xb6>
 800586c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	f7fb f898 	bl	80009a8 <__aeabi_dcmpeq>
 8005878:	b9d8      	cbnz	r0, 80058b2 <_printf_float+0x41e>
 800587a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800587c:	f108 0201 	add.w	r2, r8, #1
 8005880:	3b01      	subs	r3, #1
 8005882:	4631      	mov	r1, r6
 8005884:	4628      	mov	r0, r5
 8005886:	47b8      	blx	r7
 8005888:	3001      	adds	r0, #1
 800588a:	d10e      	bne.n	80058aa <_printf_float+0x416>
 800588c:	e65d      	b.n	800554a <_printf_float+0xb6>
 800588e:	2301      	movs	r3, #1
 8005890:	464a      	mov	r2, r9
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	f43f ae56 	beq.w	800554a <_printf_float+0xb6>
 800589e:	f108 0801 	add.w	r8, r8, #1
 80058a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a4:	3b01      	subs	r3, #1
 80058a6:	4543      	cmp	r3, r8
 80058a8:	dcf1      	bgt.n	800588e <_printf_float+0x3fa>
 80058aa:	4653      	mov	r3, sl
 80058ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058b0:	e6e0      	b.n	8005674 <_printf_float+0x1e0>
 80058b2:	f04f 0800 	mov.w	r8, #0
 80058b6:	f104 091a 	add.w	r9, r4, #26
 80058ba:	e7f2      	b.n	80058a2 <_printf_float+0x40e>
 80058bc:	2301      	movs	r3, #1
 80058be:	4642      	mov	r2, r8
 80058c0:	e7df      	b.n	8005882 <_printf_float+0x3ee>
 80058c2:	2301      	movs	r3, #1
 80058c4:	464a      	mov	r2, r9
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae3c 	beq.w	800554a <_printf_float+0xb6>
 80058d2:	f108 0801 	add.w	r8, r8, #1
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	4543      	cmp	r3, r8
 80058de:	dcf0      	bgt.n	80058c2 <_printf_float+0x42e>
 80058e0:	e6fd      	b.n	80056de <_printf_float+0x24a>
 80058e2:	f04f 0800 	mov.w	r8, #0
 80058e6:	f104 0919 	add.w	r9, r4, #25
 80058ea:	e7f4      	b.n	80058d6 <_printf_float+0x442>

080058ec <_printf_common>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	4616      	mov	r6, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	688a      	ldr	r2, [r1, #8]
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	4607      	mov	r7, r0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bfb8      	it	lt
 80058fe:	4613      	movlt	r3, r2
 8005900:	6033      	str	r3, [r6, #0]
 8005902:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005906:	460c      	mov	r4, r1
 8005908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800590c:	b10a      	cbz	r2, 8005912 <_printf_common+0x26>
 800590e:	3301      	adds	r3, #1
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	0699      	lsls	r1, r3, #26
 8005916:	bf42      	ittt	mi
 8005918:	6833      	ldrmi	r3, [r6, #0]
 800591a:	3302      	addmi	r3, #2
 800591c:	6033      	strmi	r3, [r6, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d106      	bne.n	8005934 <_printf_common+0x48>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ab      	cmp	r3, r5
 8005932:	dc28      	bgt.n	8005986 <_printf_common+0x9a>
 8005934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005938:	1e13      	subs	r3, r2, #0
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	0692      	lsls	r2, r2, #26
 8005942:	d42d      	bmi.n	80059a0 <_printf_common+0xb4>
 8005944:	4649      	mov	r1, r9
 8005946:	4638      	mov	r0, r7
 8005948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800594c:	47c0      	blx	r8
 800594e:	3001      	adds	r0, #1
 8005950:	d020      	beq.n	8005994 <_printf_common+0xa8>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	68e5      	ldr	r5, [r4, #12]
 8005956:	f003 0306 	and.w	r3, r3, #6
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf18      	it	ne
 800595e:	2500      	movne	r5, #0
 8005960:	6832      	ldr	r2, [r6, #0]
 8005962:	f04f 0600 	mov.w	r6, #0
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	bf08      	it	eq
 800596a:	1aad      	subeq	r5, r5, r2
 800596c:	6922      	ldr	r2, [r4, #16]
 800596e:	bf08      	it	eq
 8005970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005974:	4293      	cmp	r3, r2
 8005976:	bfc4      	itt	gt
 8005978:	1a9b      	subgt	r3, r3, r2
 800597a:	18ed      	addgt	r5, r5, r3
 800597c:	341a      	adds	r4, #26
 800597e:	42b5      	cmp	r5, r6
 8005980:	d11a      	bne.n	80059b8 <_printf_common+0xcc>
 8005982:	2000      	movs	r0, #0
 8005984:	e008      	b.n	8005998 <_printf_common+0xac>
 8005986:	2301      	movs	r3, #1
 8005988:	4652      	mov	r2, sl
 800598a:	4649      	mov	r1, r9
 800598c:	4638      	mov	r0, r7
 800598e:	47c0      	blx	r8
 8005990:	3001      	adds	r0, #1
 8005992:	d103      	bne.n	800599c <_printf_common+0xb0>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599c:	3501      	adds	r5, #1
 800599e:	e7c4      	b.n	800592a <_printf_common+0x3e>
 80059a0:	2030      	movs	r0, #48	; 0x30
 80059a2:	18e1      	adds	r1, r4, r3
 80059a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ae:	4422      	add	r2, r4
 80059b0:	3302      	adds	r3, #2
 80059b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059b6:	e7c5      	b.n	8005944 <_printf_common+0x58>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4622      	mov	r2, r4
 80059bc:	4649      	mov	r1, r9
 80059be:	4638      	mov	r0, r7
 80059c0:	47c0      	blx	r8
 80059c2:	3001      	adds	r0, #1
 80059c4:	d0e6      	beq.n	8005994 <_printf_common+0xa8>
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7d9      	b.n	800597e <_printf_common+0x92>
	...

080059cc <_printf_i>:
 80059cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	7e0f      	ldrb	r7, [r1, #24]
 80059d2:	4691      	mov	r9, r2
 80059d4:	2f78      	cmp	r7, #120	; 0x78
 80059d6:	4680      	mov	r8, r0
 80059d8:	460c      	mov	r4, r1
 80059da:	469a      	mov	sl, r3
 80059dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059e2:	d807      	bhi.n	80059f4 <_printf_i+0x28>
 80059e4:	2f62      	cmp	r7, #98	; 0x62
 80059e6:	d80a      	bhi.n	80059fe <_printf_i+0x32>
 80059e8:	2f00      	cmp	r7, #0
 80059ea:	f000 80d9 	beq.w	8005ba0 <_printf_i+0x1d4>
 80059ee:	2f58      	cmp	r7, #88	; 0x58
 80059f0:	f000 80a4 	beq.w	8005b3c <_printf_i+0x170>
 80059f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059fc:	e03a      	b.n	8005a74 <_printf_i+0xa8>
 80059fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a02:	2b15      	cmp	r3, #21
 8005a04:	d8f6      	bhi.n	80059f4 <_printf_i+0x28>
 8005a06:	a101      	add	r1, pc, #4	; (adr r1, 8005a0c <_printf_i+0x40>)
 8005a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a0c:	08005a65 	.word	0x08005a65
 8005a10:	08005a79 	.word	0x08005a79
 8005a14:	080059f5 	.word	0x080059f5
 8005a18:	080059f5 	.word	0x080059f5
 8005a1c:	080059f5 	.word	0x080059f5
 8005a20:	080059f5 	.word	0x080059f5
 8005a24:	08005a79 	.word	0x08005a79
 8005a28:	080059f5 	.word	0x080059f5
 8005a2c:	080059f5 	.word	0x080059f5
 8005a30:	080059f5 	.word	0x080059f5
 8005a34:	080059f5 	.word	0x080059f5
 8005a38:	08005b87 	.word	0x08005b87
 8005a3c:	08005aa9 	.word	0x08005aa9
 8005a40:	08005b69 	.word	0x08005b69
 8005a44:	080059f5 	.word	0x080059f5
 8005a48:	080059f5 	.word	0x080059f5
 8005a4c:	08005ba9 	.word	0x08005ba9
 8005a50:	080059f5 	.word	0x080059f5
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	080059f5 	.word	0x080059f5
 8005a5c:	080059f5 	.word	0x080059f5
 8005a60:	08005b71 	.word	0x08005b71
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	1d1a      	adds	r2, r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	602a      	str	r2, [r5, #0]
 8005a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0a4      	b.n	8005bc2 <_printf_i+0x1f6>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	6829      	ldr	r1, [r5, #0]
 8005a7c:	0606      	lsls	r6, r0, #24
 8005a7e:	f101 0304 	add.w	r3, r1, #4
 8005a82:	d50a      	bpl.n	8005a9a <_printf_i+0xce>
 8005a84:	680e      	ldr	r6, [r1, #0]
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	da03      	bge.n	8005a94 <_printf_i+0xc8>
 8005a8c:	232d      	movs	r3, #45	; 0x2d
 8005a8e:	4276      	negs	r6, r6
 8005a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a94:	230a      	movs	r3, #10
 8005a96:	485e      	ldr	r0, [pc, #376]	; (8005c10 <_printf_i+0x244>)
 8005a98:	e019      	b.n	8005ace <_printf_i+0x102>
 8005a9a:	680e      	ldr	r6, [r1, #0]
 8005a9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	bf18      	it	ne
 8005aa4:	b236      	sxthne	r6, r6
 8005aa6:	e7ef      	b.n	8005a88 <_printf_i+0xbc>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	1d19      	adds	r1, r3, #4
 8005aae:	6029      	str	r1, [r5, #0]
 8005ab0:	0601      	lsls	r1, r0, #24
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0xec>
 8005ab4:	681e      	ldr	r6, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <_printf_i+0xf2>
 8005ab8:	0646      	lsls	r6, r0, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0xe8>
 8005abc:	881e      	ldrh	r6, [r3, #0]
 8005abe:	2f6f      	cmp	r7, #111	; 0x6f
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2308      	moveq	r3, #8
 8005ac4:	230a      	movne	r3, #10
 8005ac6:	4852      	ldr	r0, [pc, #328]	; (8005c10 <_printf_i+0x244>)
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ace:	6865      	ldr	r5, [r4, #4]
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	bfa8      	it	ge
 8005ad4:	6821      	ldrge	r1, [r4, #0]
 8005ad6:	60a5      	str	r5, [r4, #8]
 8005ad8:	bfa4      	itt	ge
 8005ada:	f021 0104 	bicge.w	r1, r1, #4
 8005ade:	6021      	strge	r1, [r4, #0]
 8005ae0:	b90e      	cbnz	r6, 8005ae6 <_printf_i+0x11a>
 8005ae2:	2d00      	cmp	r5, #0
 8005ae4:	d04d      	beq.n	8005b82 <_printf_i+0x1b6>
 8005ae6:	4615      	mov	r5, r2
 8005ae8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aec:	fb03 6711 	mls	r7, r3, r1, r6
 8005af0:	5dc7      	ldrb	r7, [r0, r7]
 8005af2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005af6:	4637      	mov	r7, r6
 8005af8:	42bb      	cmp	r3, r7
 8005afa:	460e      	mov	r6, r1
 8005afc:	d9f4      	bls.n	8005ae8 <_printf_i+0x11c>
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d10b      	bne.n	8005b1a <_printf_i+0x14e>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	07de      	lsls	r6, r3, #31
 8005b06:	d508      	bpl.n	8005b1a <_printf_i+0x14e>
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	6861      	ldr	r1, [r4, #4]
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	bfde      	ittt	le
 8005b10:	2330      	movle	r3, #48	; 0x30
 8005b12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b1a:	1b52      	subs	r2, r2, r5
 8005b1c:	6122      	str	r2, [r4, #16]
 8005b1e:	464b      	mov	r3, r9
 8005b20:	4621      	mov	r1, r4
 8005b22:	4640      	mov	r0, r8
 8005b24:	f8cd a000 	str.w	sl, [sp]
 8005b28:	aa03      	add	r2, sp, #12
 8005b2a:	f7ff fedf 	bl	80058ec <_printf_common>
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d14c      	bne.n	8005bcc <_printf_i+0x200>
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	b004      	add	sp, #16
 8005b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3c:	4834      	ldr	r0, [pc, #208]	; (8005c10 <_printf_i+0x244>)
 8005b3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b42:	6829      	ldr	r1, [r5, #0]
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b4a:	6029      	str	r1, [r5, #0]
 8005b4c:	061d      	lsls	r5, r3, #24
 8005b4e:	d514      	bpl.n	8005b7a <_printf_i+0x1ae>
 8005b50:	07df      	lsls	r7, r3, #31
 8005b52:	bf44      	itt	mi
 8005b54:	f043 0320 	orrmi.w	r3, r3, #32
 8005b58:	6023      	strmi	r3, [r4, #0]
 8005b5a:	b91e      	cbnz	r6, 8005b64 <_printf_i+0x198>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	f023 0320 	bic.w	r3, r3, #32
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	2310      	movs	r3, #16
 8005b66:	e7af      	b.n	8005ac8 <_printf_i+0xfc>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	f043 0320 	orr.w	r3, r3, #32
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	2378      	movs	r3, #120	; 0x78
 8005b72:	4828      	ldr	r0, [pc, #160]	; (8005c14 <_printf_i+0x248>)
 8005b74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b78:	e7e3      	b.n	8005b42 <_printf_i+0x176>
 8005b7a:	0659      	lsls	r1, r3, #25
 8005b7c:	bf48      	it	mi
 8005b7e:	b2b6      	uxthmi	r6, r6
 8005b80:	e7e6      	b.n	8005b50 <_printf_i+0x184>
 8005b82:	4615      	mov	r5, r2
 8005b84:	e7bb      	b.n	8005afe <_printf_i+0x132>
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	6826      	ldr	r6, [r4, #0]
 8005b8a:	1d18      	adds	r0, r3, #4
 8005b8c:	6961      	ldr	r1, [r4, #20]
 8005b8e:	6028      	str	r0, [r5, #0]
 8005b90:	0635      	lsls	r5, r6, #24
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	d501      	bpl.n	8005b9a <_printf_i+0x1ce>
 8005b96:	6019      	str	r1, [r3, #0]
 8005b98:	e002      	b.n	8005ba0 <_printf_i+0x1d4>
 8005b9a:	0670      	lsls	r0, r6, #25
 8005b9c:	d5fb      	bpl.n	8005b96 <_printf_i+0x1ca>
 8005b9e:	8019      	strh	r1, [r3, #0]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4615      	mov	r5, r2
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	e7ba      	b.n	8005b1e <_printf_i+0x152>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	2100      	movs	r1, #0
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	602a      	str	r2, [r5, #0]
 8005bb0:	681d      	ldr	r5, [r3, #0]
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 ff7f 	bl	8006ab8 <memchr>
 8005bba:	b108      	cbz	r0, 8005bc0 <_printf_i+0x1f4>
 8005bbc:	1b40      	subs	r0, r0, r5
 8005bbe:	6060      	str	r0, [r4, #4]
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bca:	e7a8      	b.n	8005b1e <_printf_i+0x152>
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	47d0      	blx	sl
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d0ab      	beq.n	8005b32 <_printf_i+0x166>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	079b      	lsls	r3, r3, #30
 8005bde:	d413      	bmi.n	8005c08 <_printf_i+0x23c>
 8005be0:	68e0      	ldr	r0, [r4, #12]
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	4298      	cmp	r0, r3
 8005be6:	bfb8      	it	lt
 8005be8:	4618      	movlt	r0, r3
 8005bea:	e7a4      	b.n	8005b36 <_printf_i+0x16a>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	47d0      	blx	sl
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d09b      	beq.n	8005b32 <_printf_i+0x166>
 8005bfa:	3501      	adds	r5, #1
 8005bfc:	68e3      	ldr	r3, [r4, #12]
 8005bfe:	9903      	ldr	r1, [sp, #12]
 8005c00:	1a5b      	subs	r3, r3, r1
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	dcf2      	bgt.n	8005bec <_printf_i+0x220>
 8005c06:	e7eb      	b.n	8005be0 <_printf_i+0x214>
 8005c08:	2500      	movs	r5, #0
 8005c0a:	f104 0619 	add.w	r6, r4, #25
 8005c0e:	e7f5      	b.n	8005bfc <_printf_i+0x230>
 8005c10:	0800843a 	.word	0x0800843a
 8005c14:	0800844b 	.word	0x0800844b

08005c18 <_sbrk_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4d05      	ldr	r5, [pc, #20]	; (8005c34 <_sbrk_r+0x1c>)
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	f7fb fc7e 	bl	8001524 <_sbrk>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_sbrk_r+0x1a>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_sbrk_r+0x1a>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	200026e0 	.word	0x200026e0

08005c38 <sniprintf>:
 8005c38:	b40c      	push	{r2, r3}
 8005c3a:	b530      	push	{r4, r5, lr}
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <sniprintf+0x64>)
 8005c3e:	1e0c      	subs	r4, r1, #0
 8005c40:	681d      	ldr	r5, [r3, #0]
 8005c42:	b09d      	sub	sp, #116	; 0x74
 8005c44:	da08      	bge.n	8005c58 <sniprintf+0x20>
 8005c46:	238b      	movs	r3, #139	; 0x8b
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	602b      	str	r3, [r5, #0]
 8005c4e:	b01d      	add	sp, #116	; 0x74
 8005c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c54:	b002      	add	sp, #8
 8005c56:	4770      	bx	lr
 8005c58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005c5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c60:	bf0c      	ite	eq
 8005c62:	4623      	moveq	r3, r4
 8005c64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	9307      	str	r3, [sp, #28]
 8005c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c70:	9002      	str	r0, [sp, #8]
 8005c72:	9006      	str	r0, [sp, #24]
 8005c74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c78:	4628      	mov	r0, r5
 8005c7a:	ab21      	add	r3, sp, #132	; 0x84
 8005c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c7e:	a902      	add	r1, sp, #8
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	f001 fb33 	bl	80072ec <_svfiprintf_r>
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	bfbc      	itt	lt
 8005c8a:	238b      	movlt	r3, #139	; 0x8b
 8005c8c:	602b      	strlt	r3, [r5, #0]
 8005c8e:	2c00      	cmp	r4, #0
 8005c90:	d0dd      	beq.n	8005c4e <sniprintf+0x16>
 8005c92:	2200      	movs	r2, #0
 8005c94:	9b02      	ldr	r3, [sp, #8]
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	e7d9      	b.n	8005c4e <sniprintf+0x16>
 8005c9a:	bf00      	nop
 8005c9c:	2000046c 	.word	0x2000046c

08005ca0 <strcat>:
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	7814      	ldrb	r4, [r2, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	3201      	adds	r2, #1
 8005caa:	2c00      	cmp	r4, #0
 8005cac:	d1fa      	bne.n	8005ca4 <strcat+0x4>
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cb8:	2a00      	cmp	r2, #0
 8005cba:	d1f9      	bne.n	8005cb0 <strcat+0x10>
 8005cbc:	bd10      	pop	{r4, pc}

08005cbe <strncpy>:
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	3901      	subs	r1, #1
 8005cc4:	b132      	cbz	r2, 8005cd4 <strncpy+0x16>
 8005cc6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005cca:	3a01      	subs	r2, #1
 8005ccc:	f803 4b01 	strb.w	r4, [r3], #1
 8005cd0:	2c00      	cmp	r4, #0
 8005cd2:	d1f7      	bne.n	8005cc4 <strncpy+0x6>
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	441a      	add	r2, r3
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d100      	bne.n	8005cde <strncpy+0x20>
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce2:	e7f9      	b.n	8005cd8 <strncpy+0x1a>

08005ce4 <_vsniprintf_r>:
 8005ce4:	b530      	push	{r4, r5, lr}
 8005ce6:	4614      	mov	r4, r2
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	4605      	mov	r5, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	b09b      	sub	sp, #108	; 0x6c
 8005cf0:	da05      	bge.n	8005cfe <_vsniprintf_r+0x1a>
 8005cf2:	238b      	movs	r3, #139	; 0x8b
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfa:	b01b      	add	sp, #108	; 0x6c
 8005cfc:	bd30      	pop	{r4, r5, pc}
 8005cfe:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d02:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005d06:	bf0c      	ite	eq
 8005d08:	4623      	moveq	r3, r4
 8005d0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d0e:	9302      	str	r3, [sp, #8]
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d16:	9100      	str	r1, [sp, #0]
 8005d18:	9104      	str	r1, [sp, #16]
 8005d1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005d1e:	4669      	mov	r1, sp
 8005d20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d22:	f001 fae3 	bl	80072ec <_svfiprintf_r>
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	bfbc      	itt	lt
 8005d2a:	238b      	movlt	r3, #139	; 0x8b
 8005d2c:	602b      	strlt	r3, [r5, #0]
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d0e3      	beq.n	8005cfa <_vsniprintf_r+0x16>
 8005d32:	2200      	movs	r2, #0
 8005d34:	9b00      	ldr	r3, [sp, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e7df      	b.n	8005cfa <_vsniprintf_r+0x16>
	...

08005d3c <vsniprintf>:
 8005d3c:	b507      	push	{r0, r1, r2, lr}
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	460a      	mov	r2, r1
 8005d44:	4601      	mov	r1, r0
 8005d46:	4803      	ldr	r0, [pc, #12]	; (8005d54 <vsniprintf+0x18>)
 8005d48:	6800      	ldr	r0, [r0, #0]
 8005d4a:	f7ff ffcb 	bl	8005ce4 <_vsniprintf_r>
 8005d4e:	b003      	add	sp, #12
 8005d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d54:	2000046c 	.word	0x2000046c

08005d58 <__assert_func>:
 8005d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d5a:	4614      	mov	r4, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <__assert_func+0x2c>)
 8005d60:	4605      	mov	r5, r0
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68d8      	ldr	r0, [r3, #12]
 8005d66:	b14c      	cbz	r4, 8005d7c <__assert_func+0x24>
 8005d68:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <__assert_func+0x30>)
 8005d6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d6e:	9100      	str	r1, [sp, #0]
 8005d70:	462b      	mov	r3, r5
 8005d72:	4906      	ldr	r1, [pc, #24]	; (8005d8c <__assert_func+0x34>)
 8005d74:	f000 fe8a 	bl	8006a8c <fiprintf>
 8005d78:	f001 fdd0 	bl	800791c <abort>
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <__assert_func+0x38>)
 8005d7e:	461c      	mov	r4, r3
 8005d80:	e7f3      	b.n	8005d6a <__assert_func+0x12>
 8005d82:	bf00      	nop
 8005d84:	2000046c 	.word	0x2000046c
 8005d88:	0800845c 	.word	0x0800845c
 8005d8c:	08008469 	.word	0x08008469
 8005d90:	08008497 	.word	0x08008497

08005d94 <quorem>:
 8005d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	6903      	ldr	r3, [r0, #16]
 8005d9a:	690c      	ldr	r4, [r1, #16]
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	f2c0 8082 	blt.w	8005ea8 <quorem+0x114>
 8005da4:	3c01      	subs	r4, #1
 8005da6:	f100 0514 	add.w	r5, r0, #20
 8005daa:	f101 0814 	add.w	r8, r1, #20
 8005dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dcc:	d331      	bcc.n	8005e32 <quorem+0x9e>
 8005dce:	f04f 0e00 	mov.w	lr, #0
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	46ac      	mov	ip, r5
 8005dd6:	46f2      	mov	sl, lr
 8005dd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ddc:	b293      	uxth	r3, r2
 8005dde:	fb06 e303 	mla	r3, r6, r3, lr
 8005de2:	0c12      	lsrs	r2, r2, #16
 8005de4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	fb06 e202 	mla	r2, r6, r2, lr
 8005dee:	ebaa 0303 	sub.w	r3, sl, r3
 8005df2:	f8dc a000 	ldr.w	sl, [ip]
 8005df6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dfa:	fa1f fa8a 	uxth.w	sl, sl
 8005dfe:	4453      	add	r3, sl
 8005e00:	f8dc a000 	ldr.w	sl, [ip]
 8005e04:	b292      	uxth	r2, r2
 8005e06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e14:	4581      	cmp	r9, r0
 8005e16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e1a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e1e:	d2db      	bcs.n	8005dd8 <quorem+0x44>
 8005e20:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e24:	b92b      	cbnz	r3, 8005e32 <quorem+0x9e>
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	3b04      	subs	r3, #4
 8005e2a:	429d      	cmp	r5, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	d32f      	bcc.n	8005e90 <quorem+0xfc>
 8005e30:	613c      	str	r4, [r7, #16]
 8005e32:	4638      	mov	r0, r7
 8005e34:	f001 f8e6 	bl	8007004 <__mcmp>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	db25      	blt.n	8005e88 <quorem+0xf4>
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f04f 0c00 	mov.w	ip, #0
 8005e42:	3601      	adds	r6, #1
 8005e44:	f858 1b04 	ldr.w	r1, [r8], #4
 8005e48:	f8d0 e000 	ldr.w	lr, [r0]
 8005e4c:	b28b      	uxth	r3, r1
 8005e4e:	ebac 0303 	sub.w	r3, ip, r3
 8005e52:	fa1f f28e 	uxth.w	r2, lr
 8005e56:	4413      	add	r3, r2
 8005e58:	0c0a      	lsrs	r2, r1, #16
 8005e5a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e68:	45c1      	cmp	r9, r8
 8005e6a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e6e:	f840 3b04 	str.w	r3, [r0], #4
 8005e72:	d2e7      	bcs.n	8005e44 <quorem+0xb0>
 8005e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e7c:	b922      	cbnz	r2, 8005e88 <quorem+0xf4>
 8005e7e:	3b04      	subs	r3, #4
 8005e80:	429d      	cmp	r5, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	d30a      	bcc.n	8005e9c <quorem+0x108>
 8005e86:	613c      	str	r4, [r7, #16]
 8005e88:	4630      	mov	r0, r6
 8005e8a:	b003      	add	sp, #12
 8005e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	3b04      	subs	r3, #4
 8005e94:	2a00      	cmp	r2, #0
 8005e96:	d1cb      	bne.n	8005e30 <quorem+0x9c>
 8005e98:	3c01      	subs	r4, #1
 8005e9a:	e7c6      	b.n	8005e2a <quorem+0x96>
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	3b04      	subs	r3, #4
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	d1f0      	bne.n	8005e86 <quorem+0xf2>
 8005ea4:	3c01      	subs	r4, #1
 8005ea6:	e7eb      	b.n	8005e80 <quorem+0xec>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e7ee      	b.n	8005e8a <quorem+0xf6>
 8005eac:	0000      	movs	r0, r0
	...

08005eb0 <_dtoa_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005eba:	b099      	sub	sp, #100	; 0x64
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ec2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ec6:	b974      	cbnz	r4, 8005ee6 <_dtoa_r+0x36>
 8005ec8:	2010      	movs	r0, #16
 8005eca:	f7ff f959 	bl	8005180 <malloc>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6268      	str	r0, [r5, #36]	; 0x24
 8005ed2:	b920      	cbnz	r0, 8005ede <_dtoa_r+0x2e>
 8005ed4:	21ea      	movs	r1, #234	; 0xea
 8005ed6:	4ba8      	ldr	r3, [pc, #672]	; (8006178 <_dtoa_r+0x2c8>)
 8005ed8:	48a8      	ldr	r0, [pc, #672]	; (800617c <_dtoa_r+0x2cc>)
 8005eda:	f7ff ff3d 	bl	8005d58 <__assert_func>
 8005ede:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ee2:	6004      	str	r4, [r0, #0]
 8005ee4:	60c4      	str	r4, [r0, #12]
 8005ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ee8:	6819      	ldr	r1, [r3, #0]
 8005eea:	b151      	cbz	r1, 8005f02 <_dtoa_r+0x52>
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4093      	lsls	r3, r2
 8005ef2:	604a      	str	r2, [r1, #4]
 8005ef4:	608b      	str	r3, [r1, #8]
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 fe46 	bl	8006b88 <_Bfree>
 8005efc:	2200      	movs	r2, #0
 8005efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	1e3b      	subs	r3, r7, #0
 8005f04:	bfaf      	iteee	ge
 8005f06:	2300      	movge	r3, #0
 8005f08:	2201      	movlt	r2, #1
 8005f0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f0e:	9305      	strlt	r3, [sp, #20]
 8005f10:	bfa8      	it	ge
 8005f12:	f8c8 3000 	strge.w	r3, [r8]
 8005f16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f1a:	4b99      	ldr	r3, [pc, #612]	; (8006180 <_dtoa_r+0x2d0>)
 8005f1c:	bfb8      	it	lt
 8005f1e:	f8c8 2000 	strlt.w	r2, [r8]
 8005f22:	ea33 0309 	bics.w	r3, r3, r9
 8005f26:	d119      	bne.n	8005f5c <_dtoa_r+0xac>
 8005f28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f34:	4333      	orrs	r3, r6
 8005f36:	f000 857f 	beq.w	8006a38 <_dtoa_r+0xb88>
 8005f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f3c:	b953      	cbnz	r3, 8005f54 <_dtoa_r+0xa4>
 8005f3e:	4b91      	ldr	r3, [pc, #580]	; (8006184 <_dtoa_r+0x2d4>)
 8005f40:	e022      	b.n	8005f88 <_dtoa_r+0xd8>
 8005f42:	4b91      	ldr	r3, [pc, #580]	; (8006188 <_dtoa_r+0x2d8>)
 8005f44:	9303      	str	r3, [sp, #12]
 8005f46:	3308      	adds	r3, #8
 8005f48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	9803      	ldr	r0, [sp, #12]
 8005f4e:	b019      	add	sp, #100	; 0x64
 8005f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f54:	4b8b      	ldr	r3, [pc, #556]	; (8006184 <_dtoa_r+0x2d4>)
 8005f56:	9303      	str	r3, [sp, #12]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	e7f5      	b.n	8005f48 <_dtoa_r+0x98>
 8005f5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005f64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f7fa fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8005f70:	4680      	mov	r8, r0
 8005f72:	b158      	cbz	r0, 8005f8c <_dtoa_r+0xdc>
 8005f74:	2301      	movs	r3, #1
 8005f76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8558 	beq.w	8006a32 <_dtoa_r+0xb82>
 8005f82:	4882      	ldr	r0, [pc, #520]	; (800618c <_dtoa_r+0x2dc>)
 8005f84:	6018      	str	r0, [r3, #0]
 8005f86:	1e43      	subs	r3, r0, #1
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	e7df      	b.n	8005f4c <_dtoa_r+0x9c>
 8005f8c:	ab16      	add	r3, sp, #88	; 0x58
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	ab17      	add	r3, sp, #92	; 0x5c
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	4628      	mov	r0, r5
 8005f96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f9a:	f001 f8db 	bl	8007154 <__d2b>
 8005f9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005fa2:	4683      	mov	fp, r0
 8005fa4:	2c00      	cmp	r4, #0
 8005fa6:	d07f      	beq.n	80060a8 <_dtoa_r+0x1f8>
 8005fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005fba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005fbe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4b72      	ldr	r3, [pc, #456]	; (8006190 <_dtoa_r+0x2e0>)
 8005fc6:	f7fa f8cf 	bl	8000168 <__aeabi_dsub>
 8005fca:	a365      	add	r3, pc, #404	; (adr r3, 8006160 <_dtoa_r+0x2b0>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa fa82 	bl	80004d8 <__aeabi_dmul>
 8005fd4:	a364      	add	r3, pc, #400	; (adr r3, 8006168 <_dtoa_r+0x2b8>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa f8c7 	bl	800016c <__adddf3>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	460f      	mov	r7, r1
 8005fe4:	f7fa fa0e 	bl	8000404 <__aeabi_i2d>
 8005fe8:	a361      	add	r3, pc, #388	; (adr r3, 8006170 <_dtoa_r+0x2c0>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa fa73 	bl	80004d8 <__aeabi_dmul>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa f8b7 	bl	800016c <__adddf3>
 8005ffe:	4606      	mov	r6, r0
 8006000:	460f      	mov	r7, r1
 8006002:	f7fa fd19 	bl	8000a38 <__aeabi_d2iz>
 8006006:	2200      	movs	r2, #0
 8006008:	4682      	mov	sl, r0
 800600a:	2300      	movs	r3, #0
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa fcd4 	bl	80009bc <__aeabi_dcmplt>
 8006014:	b148      	cbz	r0, 800602a <_dtoa_r+0x17a>
 8006016:	4650      	mov	r0, sl
 8006018:	f7fa f9f4 	bl	8000404 <__aeabi_i2d>
 800601c:	4632      	mov	r2, r6
 800601e:	463b      	mov	r3, r7
 8006020:	f7fa fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 8006024:	b908      	cbnz	r0, 800602a <_dtoa_r+0x17a>
 8006026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800602a:	f1ba 0f16 	cmp.w	sl, #22
 800602e:	d858      	bhi.n	80060e2 <_dtoa_r+0x232>
 8006030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006034:	4b57      	ldr	r3, [pc, #348]	; (8006194 <_dtoa_r+0x2e4>)
 8006036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa fcbd 	bl	80009bc <__aeabi_dcmplt>
 8006042:	2800      	cmp	r0, #0
 8006044:	d04f      	beq.n	80060e6 <_dtoa_r+0x236>
 8006046:	2300      	movs	r3, #0
 8006048:	f10a 3aff 	add.w	sl, sl, #4294967295
 800604c:	930f      	str	r3, [sp, #60]	; 0x3c
 800604e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006050:	1b1c      	subs	r4, r3, r4
 8006052:	1e63      	subs	r3, r4, #1
 8006054:	9309      	str	r3, [sp, #36]	; 0x24
 8006056:	bf49      	itett	mi
 8006058:	f1c4 0301 	rsbmi	r3, r4, #1
 800605c:	2300      	movpl	r3, #0
 800605e:	9306      	strmi	r3, [sp, #24]
 8006060:	2300      	movmi	r3, #0
 8006062:	bf54      	ite	pl
 8006064:	9306      	strpl	r3, [sp, #24]
 8006066:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006068:	f1ba 0f00 	cmp.w	sl, #0
 800606c:	db3d      	blt.n	80060ea <_dtoa_r+0x23a>
 800606e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006070:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006074:	4453      	add	r3, sl
 8006076:	9309      	str	r3, [sp, #36]	; 0x24
 8006078:	2300      	movs	r3, #0
 800607a:	930a      	str	r3, [sp, #40]	; 0x28
 800607c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800607e:	2b09      	cmp	r3, #9
 8006080:	f200 808c 	bhi.w	800619c <_dtoa_r+0x2ec>
 8006084:	2b05      	cmp	r3, #5
 8006086:	bfc4      	itt	gt
 8006088:	3b04      	subgt	r3, #4
 800608a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800608c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800608e:	bfc8      	it	gt
 8006090:	2400      	movgt	r4, #0
 8006092:	f1a3 0302 	sub.w	r3, r3, #2
 8006096:	bfd8      	it	le
 8006098:	2401      	movle	r4, #1
 800609a:	2b03      	cmp	r3, #3
 800609c:	f200 808a 	bhi.w	80061b4 <_dtoa_r+0x304>
 80060a0:	e8df f003 	tbb	[pc, r3]
 80060a4:	5b4d4f2d 	.word	0x5b4d4f2d
 80060a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80060ac:	441c      	add	r4, r3
 80060ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	bfc3      	ittte	gt
 80060b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80060be:	fa09 f303 	lslgt.w	r3, r9, r3
 80060c2:	f1c3 0320 	rsble	r3, r3, #32
 80060c6:	bfc6      	itte	gt
 80060c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060cc:	4318      	orrgt	r0, r3
 80060ce:	fa06 f003 	lslle.w	r0, r6, r3
 80060d2:	f7fa f987 	bl	80003e4 <__aeabi_ui2d>
 80060d6:	2301      	movs	r3, #1
 80060d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80060dc:	3c01      	subs	r4, #1
 80060de:	9313      	str	r3, [sp, #76]	; 0x4c
 80060e0:	e76f      	b.n	8005fc2 <_dtoa_r+0x112>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e7b2      	b.n	800604c <_dtoa_r+0x19c>
 80060e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80060e8:	e7b1      	b.n	800604e <_dtoa_r+0x19e>
 80060ea:	9b06      	ldr	r3, [sp, #24]
 80060ec:	eba3 030a 	sub.w	r3, r3, sl
 80060f0:	9306      	str	r3, [sp, #24]
 80060f2:	f1ca 0300 	rsb	r3, sl, #0
 80060f6:	930a      	str	r3, [sp, #40]	; 0x28
 80060f8:	2300      	movs	r3, #0
 80060fa:	930e      	str	r3, [sp, #56]	; 0x38
 80060fc:	e7be      	b.n	800607c <_dtoa_r+0x1cc>
 80060fe:	2300      	movs	r3, #0
 8006100:	930b      	str	r3, [sp, #44]	; 0x2c
 8006102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc58      	bgt.n	80061ba <_dtoa_r+0x30a>
 8006108:	f04f 0901 	mov.w	r9, #1
 800610c:	464b      	mov	r3, r9
 800610e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006112:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006116:	2200      	movs	r2, #0
 8006118:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800611a:	6042      	str	r2, [r0, #4]
 800611c:	2204      	movs	r2, #4
 800611e:	f102 0614 	add.w	r6, r2, #20
 8006122:	429e      	cmp	r6, r3
 8006124:	6841      	ldr	r1, [r0, #4]
 8006126:	d94e      	bls.n	80061c6 <_dtoa_r+0x316>
 8006128:	4628      	mov	r0, r5
 800612a:	f000 fced 	bl	8006b08 <_Balloc>
 800612e:	9003      	str	r0, [sp, #12]
 8006130:	2800      	cmp	r0, #0
 8006132:	d14c      	bne.n	80061ce <_dtoa_r+0x31e>
 8006134:	4602      	mov	r2, r0
 8006136:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800613a:	4b17      	ldr	r3, [pc, #92]	; (8006198 <_dtoa_r+0x2e8>)
 800613c:	e6cc      	b.n	8005ed8 <_dtoa_r+0x28>
 800613e:	2301      	movs	r3, #1
 8006140:	e7de      	b.n	8006100 <_dtoa_r+0x250>
 8006142:	2300      	movs	r3, #0
 8006144:	930b      	str	r3, [sp, #44]	; 0x2c
 8006146:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006148:	eb0a 0903 	add.w	r9, sl, r3
 800614c:	f109 0301 	add.w	r3, r9, #1
 8006150:	2b01      	cmp	r3, #1
 8006152:	9308      	str	r3, [sp, #32]
 8006154:	bfb8      	it	lt
 8006156:	2301      	movlt	r3, #1
 8006158:	e7dd      	b.n	8006116 <_dtoa_r+0x266>
 800615a:	2301      	movs	r3, #1
 800615c:	e7f2      	b.n	8006144 <_dtoa_r+0x294>
 800615e:	bf00      	nop
 8006160:	636f4361 	.word	0x636f4361
 8006164:	3fd287a7 	.word	0x3fd287a7
 8006168:	8b60c8b3 	.word	0x8b60c8b3
 800616c:	3fc68a28 	.word	0x3fc68a28
 8006170:	509f79fb 	.word	0x509f79fb
 8006174:	3fd34413 	.word	0x3fd34413
 8006178:	080084a5 	.word	0x080084a5
 800617c:	080084bc 	.word	0x080084bc
 8006180:	7ff00000 	.word	0x7ff00000
 8006184:	080084a1 	.word	0x080084a1
 8006188:	08008498 	.word	0x08008498
 800618c:	08008439 	.word	0x08008439
 8006190:	3ff80000 	.word	0x3ff80000
 8006194:	080085b0 	.word	0x080085b0
 8006198:	08008517 	.word	0x08008517
 800619c:	2401      	movs	r4, #1
 800619e:	2300      	movs	r3, #0
 80061a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80061a2:	9322      	str	r3, [sp, #136]	; 0x88
 80061a4:	f04f 39ff 	mov.w	r9, #4294967295
 80061a8:	2200      	movs	r2, #0
 80061aa:	2312      	movs	r3, #18
 80061ac:	f8cd 9020 	str.w	r9, [sp, #32]
 80061b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80061b2:	e7b0      	b.n	8006116 <_dtoa_r+0x266>
 80061b4:	2301      	movs	r3, #1
 80061b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b8:	e7f4      	b.n	80061a4 <_dtoa_r+0x2f4>
 80061ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80061be:	464b      	mov	r3, r9
 80061c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80061c4:	e7a7      	b.n	8006116 <_dtoa_r+0x266>
 80061c6:	3101      	adds	r1, #1
 80061c8:	6041      	str	r1, [r0, #4]
 80061ca:	0052      	lsls	r2, r2, #1
 80061cc:	e7a7      	b.n	800611e <_dtoa_r+0x26e>
 80061ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061d0:	9a03      	ldr	r2, [sp, #12]
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	9b08      	ldr	r3, [sp, #32]
 80061d6:	2b0e      	cmp	r3, #14
 80061d8:	f200 80a8 	bhi.w	800632c <_dtoa_r+0x47c>
 80061dc:	2c00      	cmp	r4, #0
 80061de:	f000 80a5 	beq.w	800632c <_dtoa_r+0x47c>
 80061e2:	f1ba 0f00 	cmp.w	sl, #0
 80061e6:	dd34      	ble.n	8006252 <_dtoa_r+0x3a2>
 80061e8:	4a9a      	ldr	r2, [pc, #616]	; (8006454 <_dtoa_r+0x5a4>)
 80061ea:	f00a 030f 	and.w	r3, sl, #15
 80061ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061f2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80061f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80061fe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006202:	d016      	beq.n	8006232 <_dtoa_r+0x382>
 8006204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006208:	4b93      	ldr	r3, [pc, #588]	; (8006458 <_dtoa_r+0x5a8>)
 800620a:	2703      	movs	r7, #3
 800620c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006210:	f7fa fa8c 	bl	800072c <__aeabi_ddiv>
 8006214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006218:	f004 040f 	and.w	r4, r4, #15
 800621c:	4e8e      	ldr	r6, [pc, #568]	; (8006458 <_dtoa_r+0x5a8>)
 800621e:	b954      	cbnz	r4, 8006236 <_dtoa_r+0x386>
 8006220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006228:	f7fa fa80 	bl	800072c <__aeabi_ddiv>
 800622c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006230:	e029      	b.n	8006286 <_dtoa_r+0x3d6>
 8006232:	2702      	movs	r7, #2
 8006234:	e7f2      	b.n	800621c <_dtoa_r+0x36c>
 8006236:	07e1      	lsls	r1, r4, #31
 8006238:	d508      	bpl.n	800624c <_dtoa_r+0x39c>
 800623a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800623e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006242:	f7fa f949 	bl	80004d8 <__aeabi_dmul>
 8006246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800624a:	3701      	adds	r7, #1
 800624c:	1064      	asrs	r4, r4, #1
 800624e:	3608      	adds	r6, #8
 8006250:	e7e5      	b.n	800621e <_dtoa_r+0x36e>
 8006252:	f000 80a5 	beq.w	80063a0 <_dtoa_r+0x4f0>
 8006256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800625a:	f1ca 0400 	rsb	r4, sl, #0
 800625e:	4b7d      	ldr	r3, [pc, #500]	; (8006454 <_dtoa_r+0x5a4>)
 8006260:	f004 020f 	and.w	r2, r4, #15
 8006264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f7fa f934 	bl	80004d8 <__aeabi_dmul>
 8006270:	2702      	movs	r7, #2
 8006272:	2300      	movs	r3, #0
 8006274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006278:	4e77      	ldr	r6, [pc, #476]	; (8006458 <_dtoa_r+0x5a8>)
 800627a:	1124      	asrs	r4, r4, #4
 800627c:	2c00      	cmp	r4, #0
 800627e:	f040 8084 	bne.w	800638a <_dtoa_r+0x4da>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1d2      	bne.n	800622c <_dtoa_r+0x37c>
 8006286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 808b 	beq.w	80063a4 <_dtoa_r+0x4f4>
 800628e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800629a:	2200      	movs	r2, #0
 800629c:	4b6f      	ldr	r3, [pc, #444]	; (800645c <_dtoa_r+0x5ac>)
 800629e:	f7fa fb8d 	bl	80009bc <__aeabi_dcmplt>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d07e      	beq.n	80063a4 <_dtoa_r+0x4f4>
 80062a6:	9b08      	ldr	r3, [sp, #32]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d07b      	beq.n	80063a4 <_dtoa_r+0x4f4>
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	dd38      	ble.n	8006324 <_dtoa_r+0x474>
 80062b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062b6:	2200      	movs	r2, #0
 80062b8:	4b69      	ldr	r3, [pc, #420]	; (8006460 <_dtoa_r+0x5b0>)
 80062ba:	f7fa f90d 	bl	80004d8 <__aeabi_dmul>
 80062be:	464c      	mov	r4, r9
 80062c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062c4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80062c8:	3701      	adds	r7, #1
 80062ca:	4638      	mov	r0, r7
 80062cc:	f7fa f89a 	bl	8000404 <__aeabi_i2d>
 80062d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d4:	f7fa f900 	bl	80004d8 <__aeabi_dmul>
 80062d8:	2200      	movs	r2, #0
 80062da:	4b62      	ldr	r3, [pc, #392]	; (8006464 <_dtoa_r+0x5b4>)
 80062dc:	f7f9 ff46 	bl	800016c <__adddf3>
 80062e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80062e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062e8:	9611      	str	r6, [sp, #68]	; 0x44
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	d15d      	bne.n	80063aa <_dtoa_r+0x4fa>
 80062ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f2:	2200      	movs	r2, #0
 80062f4:	4b5c      	ldr	r3, [pc, #368]	; (8006468 <_dtoa_r+0x5b8>)
 80062f6:	f7f9 ff37 	bl	8000168 <__aeabi_dsub>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006302:	4633      	mov	r3, r6
 8006304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006306:	f7fa fb77 	bl	80009f8 <__aeabi_dcmpgt>
 800630a:	2800      	cmp	r0, #0
 800630c:	f040 829c 	bne.w	8006848 <_dtoa_r+0x998>
 8006310:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006316:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800631a:	f7fa fb4f 	bl	80009bc <__aeabi_dcmplt>
 800631e:	2800      	cmp	r0, #0
 8006320:	f040 8290 	bne.w	8006844 <_dtoa_r+0x994>
 8006324:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006328:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800632c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800632e:	2b00      	cmp	r3, #0
 8006330:	f2c0 8152 	blt.w	80065d8 <_dtoa_r+0x728>
 8006334:	f1ba 0f0e 	cmp.w	sl, #14
 8006338:	f300 814e 	bgt.w	80065d8 <_dtoa_r+0x728>
 800633c:	4b45      	ldr	r3, [pc, #276]	; (8006454 <_dtoa_r+0x5a4>)
 800633e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006342:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006346:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800634a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800634c:	2b00      	cmp	r3, #0
 800634e:	f280 80db 	bge.w	8006508 <_dtoa_r+0x658>
 8006352:	9b08      	ldr	r3, [sp, #32]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f300 80d7 	bgt.w	8006508 <_dtoa_r+0x658>
 800635a:	f040 8272 	bne.w	8006842 <_dtoa_r+0x992>
 800635e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006362:	2200      	movs	r2, #0
 8006364:	4b40      	ldr	r3, [pc, #256]	; (8006468 <_dtoa_r+0x5b8>)
 8006366:	f7fa f8b7 	bl	80004d8 <__aeabi_dmul>
 800636a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800636e:	f7fa fb39 	bl	80009e4 <__aeabi_dcmpge>
 8006372:	9c08      	ldr	r4, [sp, #32]
 8006374:	4626      	mov	r6, r4
 8006376:	2800      	cmp	r0, #0
 8006378:	f040 8248 	bne.w	800680c <_dtoa_r+0x95c>
 800637c:	2331      	movs	r3, #49	; 0x31
 800637e:	9f03      	ldr	r7, [sp, #12]
 8006380:	f10a 0a01 	add.w	sl, sl, #1
 8006384:	f807 3b01 	strb.w	r3, [r7], #1
 8006388:	e244      	b.n	8006814 <_dtoa_r+0x964>
 800638a:	07e2      	lsls	r2, r4, #31
 800638c:	d505      	bpl.n	800639a <_dtoa_r+0x4ea>
 800638e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006392:	f7fa f8a1 	bl	80004d8 <__aeabi_dmul>
 8006396:	2301      	movs	r3, #1
 8006398:	3701      	adds	r7, #1
 800639a:	1064      	asrs	r4, r4, #1
 800639c:	3608      	adds	r6, #8
 800639e:	e76d      	b.n	800627c <_dtoa_r+0x3cc>
 80063a0:	2702      	movs	r7, #2
 80063a2:	e770      	b.n	8006286 <_dtoa_r+0x3d6>
 80063a4:	46d0      	mov	r8, sl
 80063a6:	9c08      	ldr	r4, [sp, #32]
 80063a8:	e78f      	b.n	80062ca <_dtoa_r+0x41a>
 80063aa:	9903      	ldr	r1, [sp, #12]
 80063ac:	4b29      	ldr	r3, [pc, #164]	; (8006454 <_dtoa_r+0x5a4>)
 80063ae:	4421      	add	r1, r4
 80063b0:	9112      	str	r1, [sp, #72]	; 0x48
 80063b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80063bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d055      	beq.n	8006470 <_dtoa_r+0x5c0>
 80063c4:	2000      	movs	r0, #0
 80063c6:	4929      	ldr	r1, [pc, #164]	; (800646c <_dtoa_r+0x5bc>)
 80063c8:	f7fa f9b0 	bl	800072c <__aeabi_ddiv>
 80063cc:	463b      	mov	r3, r7
 80063ce:	4632      	mov	r2, r6
 80063d0:	f7f9 feca 	bl	8000168 <__aeabi_dsub>
 80063d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063d8:	9f03      	ldr	r7, [sp, #12]
 80063da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063de:	f7fa fb2b 	bl	8000a38 <__aeabi_d2iz>
 80063e2:	4604      	mov	r4, r0
 80063e4:	f7fa f80e 	bl	8000404 <__aeabi_i2d>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f0:	f7f9 feba 	bl	8000168 <__aeabi_dsub>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	3430      	adds	r4, #48	; 0x30
 80063fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006402:	f807 4b01 	strb.w	r4, [r7], #1
 8006406:	f7fa fad9 	bl	80009bc <__aeabi_dcmplt>
 800640a:	2800      	cmp	r0, #0
 800640c:	d174      	bne.n	80064f8 <_dtoa_r+0x648>
 800640e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006412:	2000      	movs	r0, #0
 8006414:	4911      	ldr	r1, [pc, #68]	; (800645c <_dtoa_r+0x5ac>)
 8006416:	f7f9 fea7 	bl	8000168 <__aeabi_dsub>
 800641a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800641e:	f7fa facd 	bl	80009bc <__aeabi_dcmplt>
 8006422:	2800      	cmp	r0, #0
 8006424:	f040 80b7 	bne.w	8006596 <_dtoa_r+0x6e6>
 8006428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800642a:	429f      	cmp	r7, r3
 800642c:	f43f af7a 	beq.w	8006324 <_dtoa_r+0x474>
 8006430:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006434:	2200      	movs	r2, #0
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <_dtoa_r+0x5b0>)
 8006438:	f7fa f84e 	bl	80004d8 <__aeabi_dmul>
 800643c:	2200      	movs	r2, #0
 800643e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <_dtoa_r+0x5b0>)
 8006448:	f7fa f846 	bl	80004d8 <__aeabi_dmul>
 800644c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006450:	e7c3      	b.n	80063da <_dtoa_r+0x52a>
 8006452:	bf00      	nop
 8006454:	080085b0 	.word	0x080085b0
 8006458:	08008588 	.word	0x08008588
 800645c:	3ff00000 	.word	0x3ff00000
 8006460:	40240000 	.word	0x40240000
 8006464:	401c0000 	.word	0x401c0000
 8006468:	40140000 	.word	0x40140000
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7fa f830 	bl	80004d8 <__aeabi_dmul>
 8006478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800647a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800647e:	9c03      	ldr	r4, [sp, #12]
 8006480:	9314      	str	r3, [sp, #80]	; 0x50
 8006482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006486:	f7fa fad7 	bl	8000a38 <__aeabi_d2iz>
 800648a:	9015      	str	r0, [sp, #84]	; 0x54
 800648c:	f7f9 ffba 	bl	8000404 <__aeabi_i2d>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006498:	f7f9 fe66 	bl	8000168 <__aeabi_dsub>
 800649c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800649e:	4606      	mov	r6, r0
 80064a0:	3330      	adds	r3, #48	; 0x30
 80064a2:	f804 3b01 	strb.w	r3, [r4], #1
 80064a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064a8:	460f      	mov	r7, r1
 80064aa:	429c      	cmp	r4, r3
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	d124      	bne.n	80064fc <_dtoa_r+0x64c>
 80064b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064b6:	4bb0      	ldr	r3, [pc, #704]	; (8006778 <_dtoa_r+0x8c8>)
 80064b8:	f7f9 fe58 	bl	800016c <__adddf3>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7fa fa98 	bl	80009f8 <__aeabi_dcmpgt>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d163      	bne.n	8006594 <_dtoa_r+0x6e4>
 80064cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064d0:	2000      	movs	r0, #0
 80064d2:	49a9      	ldr	r1, [pc, #676]	; (8006778 <_dtoa_r+0x8c8>)
 80064d4:	f7f9 fe48 	bl	8000168 <__aeabi_dsub>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f7fa fa6c 	bl	80009bc <__aeabi_dcmplt>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f43f af1d 	beq.w	8006324 <_dtoa_r+0x474>
 80064ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80064ec:	1e7b      	subs	r3, r7, #1
 80064ee:	9314      	str	r3, [sp, #80]	; 0x50
 80064f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d0f8      	beq.n	80064ea <_dtoa_r+0x63a>
 80064f8:	46c2      	mov	sl, r8
 80064fa:	e03b      	b.n	8006574 <_dtoa_r+0x6c4>
 80064fc:	4b9f      	ldr	r3, [pc, #636]	; (800677c <_dtoa_r+0x8cc>)
 80064fe:	f7f9 ffeb 	bl	80004d8 <__aeabi_dmul>
 8006502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006506:	e7bc      	b.n	8006482 <_dtoa_r+0x5d2>
 8006508:	9f03      	ldr	r7, [sp, #12]
 800650a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800650e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	f7fa f909 	bl	800072c <__aeabi_ddiv>
 800651a:	f7fa fa8d 	bl	8000a38 <__aeabi_d2iz>
 800651e:	4604      	mov	r4, r0
 8006520:	f7f9 ff70 	bl	8000404 <__aeabi_i2d>
 8006524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006528:	f7f9 ffd6 	bl	80004d8 <__aeabi_dmul>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4640      	mov	r0, r8
 8006532:	4649      	mov	r1, r9
 8006534:	f7f9 fe18 	bl	8000168 <__aeabi_dsub>
 8006538:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800653c:	f807 6b01 	strb.w	r6, [r7], #1
 8006540:	9e03      	ldr	r6, [sp, #12]
 8006542:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006546:	1bbe      	subs	r6, r7, r6
 8006548:	45b4      	cmp	ip, r6
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	d136      	bne.n	80065be <_dtoa_r+0x70e>
 8006550:	f7f9 fe0c 	bl	800016c <__adddf3>
 8006554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006558:	4680      	mov	r8, r0
 800655a:	4689      	mov	r9, r1
 800655c:	f7fa fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8006560:	bb58      	cbnz	r0, 80065ba <_dtoa_r+0x70a>
 8006562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	f7fa fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800656e:	b108      	cbz	r0, 8006574 <_dtoa_r+0x6c4>
 8006570:	07e1      	lsls	r1, r4, #31
 8006572:	d422      	bmi.n	80065ba <_dtoa_r+0x70a>
 8006574:	4628      	mov	r0, r5
 8006576:	4659      	mov	r1, fp
 8006578:	f000 fb06 	bl	8006b88 <_Bfree>
 800657c:	2300      	movs	r3, #0
 800657e:	703b      	strb	r3, [r7, #0]
 8006580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006582:	f10a 0001 	add.w	r0, sl, #1
 8006586:	6018      	str	r0, [r3, #0]
 8006588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800658a:	2b00      	cmp	r3, #0
 800658c:	f43f acde 	beq.w	8005f4c <_dtoa_r+0x9c>
 8006590:	601f      	str	r7, [r3, #0]
 8006592:	e4db      	b.n	8005f4c <_dtoa_r+0x9c>
 8006594:	4627      	mov	r7, r4
 8006596:	463b      	mov	r3, r7
 8006598:	461f      	mov	r7, r3
 800659a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800659e:	2a39      	cmp	r2, #57	; 0x39
 80065a0:	d107      	bne.n	80065b2 <_dtoa_r+0x702>
 80065a2:	9a03      	ldr	r2, [sp, #12]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1f7      	bne.n	8006598 <_dtoa_r+0x6e8>
 80065a8:	2230      	movs	r2, #48	; 0x30
 80065aa:	9903      	ldr	r1, [sp, #12]
 80065ac:	f108 0801 	add.w	r8, r8, #1
 80065b0:	700a      	strb	r2, [r1, #0]
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	3201      	adds	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e79e      	b.n	80064f8 <_dtoa_r+0x648>
 80065ba:	46d0      	mov	r8, sl
 80065bc:	e7eb      	b.n	8006596 <_dtoa_r+0x6e6>
 80065be:	2200      	movs	r2, #0
 80065c0:	4b6e      	ldr	r3, [pc, #440]	; (800677c <_dtoa_r+0x8cc>)
 80065c2:	f7f9 ff89 	bl	80004d8 <__aeabi_dmul>
 80065c6:	2200      	movs	r2, #0
 80065c8:	2300      	movs	r3, #0
 80065ca:	4680      	mov	r8, r0
 80065cc:	4689      	mov	r9, r1
 80065ce:	f7fa f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d09b      	beq.n	800650e <_dtoa_r+0x65e>
 80065d6:	e7cd      	b.n	8006574 <_dtoa_r+0x6c4>
 80065d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065da:	2a00      	cmp	r2, #0
 80065dc:	f000 80d0 	beq.w	8006780 <_dtoa_r+0x8d0>
 80065e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80065e2:	2a01      	cmp	r2, #1
 80065e4:	f300 80ae 	bgt.w	8006744 <_dtoa_r+0x894>
 80065e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	f000 80a6 	beq.w	800673c <_dtoa_r+0x88c>
 80065f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065f6:	9f06      	ldr	r7, [sp, #24]
 80065f8:	9a06      	ldr	r2, [sp, #24]
 80065fa:	2101      	movs	r1, #1
 80065fc:	441a      	add	r2, r3
 80065fe:	9206      	str	r2, [sp, #24]
 8006600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006602:	4628      	mov	r0, r5
 8006604:	441a      	add	r2, r3
 8006606:	9209      	str	r2, [sp, #36]	; 0x24
 8006608:	f000 fb74 	bl	8006cf4 <__i2b>
 800660c:	4606      	mov	r6, r0
 800660e:	2f00      	cmp	r7, #0
 8006610:	dd0c      	ble.n	800662c <_dtoa_r+0x77c>
 8006612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd09      	ble.n	800662c <_dtoa_r+0x77c>
 8006618:	42bb      	cmp	r3, r7
 800661a:	bfa8      	it	ge
 800661c:	463b      	movge	r3, r7
 800661e:	9a06      	ldr	r2, [sp, #24]
 8006620:	1aff      	subs	r7, r7, r3
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	9206      	str	r2, [sp, #24]
 8006626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	9309      	str	r3, [sp, #36]	; 0x24
 800662c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662e:	b1f3      	cbz	r3, 800666e <_dtoa_r+0x7be>
 8006630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80a8 	beq.w	8006788 <_dtoa_r+0x8d8>
 8006638:	2c00      	cmp	r4, #0
 800663a:	dd10      	ble.n	800665e <_dtoa_r+0x7ae>
 800663c:	4631      	mov	r1, r6
 800663e:	4622      	mov	r2, r4
 8006640:	4628      	mov	r0, r5
 8006642:	f000 fc15 	bl	8006e70 <__pow5mult>
 8006646:	465a      	mov	r2, fp
 8006648:	4601      	mov	r1, r0
 800664a:	4606      	mov	r6, r0
 800664c:	4628      	mov	r0, r5
 800664e:	f000 fb67 	bl	8006d20 <__multiply>
 8006652:	4680      	mov	r8, r0
 8006654:	4659      	mov	r1, fp
 8006656:	4628      	mov	r0, r5
 8006658:	f000 fa96 	bl	8006b88 <_Bfree>
 800665c:	46c3      	mov	fp, r8
 800665e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006660:	1b1a      	subs	r2, r3, r4
 8006662:	d004      	beq.n	800666e <_dtoa_r+0x7be>
 8006664:	4659      	mov	r1, fp
 8006666:	4628      	mov	r0, r5
 8006668:	f000 fc02 	bl	8006e70 <__pow5mult>
 800666c:	4683      	mov	fp, r0
 800666e:	2101      	movs	r1, #1
 8006670:	4628      	mov	r0, r5
 8006672:	f000 fb3f 	bl	8006cf4 <__i2b>
 8006676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006678:	4604      	mov	r4, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	f340 8086 	ble.w	800678c <_dtoa_r+0x8dc>
 8006680:	461a      	mov	r2, r3
 8006682:	4601      	mov	r1, r0
 8006684:	4628      	mov	r0, r5
 8006686:	f000 fbf3 	bl	8006e70 <__pow5mult>
 800668a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800668c:	4604      	mov	r4, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	dd7f      	ble.n	8006792 <_dtoa_r+0x8e2>
 8006692:	f04f 0800 	mov.w	r8, #0
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800669c:	6918      	ldr	r0, [r3, #16]
 800669e:	f000 fadb 	bl	8006c58 <__hi0bits>
 80066a2:	f1c0 0020 	rsb	r0, r0, #32
 80066a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a8:	4418      	add	r0, r3
 80066aa:	f010 001f 	ands.w	r0, r0, #31
 80066ae:	f000 8092 	beq.w	80067d6 <_dtoa_r+0x926>
 80066b2:	f1c0 0320 	rsb	r3, r0, #32
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	f340 808a 	ble.w	80067d0 <_dtoa_r+0x920>
 80066bc:	f1c0 001c 	rsb	r0, r0, #28
 80066c0:	9b06      	ldr	r3, [sp, #24]
 80066c2:	4407      	add	r7, r0
 80066c4:	4403      	add	r3, r0
 80066c6:	9306      	str	r3, [sp, #24]
 80066c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ca:	4403      	add	r3, r0
 80066cc:	9309      	str	r3, [sp, #36]	; 0x24
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dd05      	ble.n	80066e0 <_dtoa_r+0x830>
 80066d4:	4659      	mov	r1, fp
 80066d6:	461a      	mov	r2, r3
 80066d8:	4628      	mov	r0, r5
 80066da:	f000 fc23 	bl	8006f24 <__lshift>
 80066de:	4683      	mov	fp, r0
 80066e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dd05      	ble.n	80066f2 <_dtoa_r+0x842>
 80066e6:	4621      	mov	r1, r4
 80066e8:	461a      	mov	r2, r3
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 fc1a 	bl	8006f24 <__lshift>
 80066f0:	4604      	mov	r4, r0
 80066f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d070      	beq.n	80067da <_dtoa_r+0x92a>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4658      	mov	r0, fp
 80066fc:	f000 fc82 	bl	8007004 <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	da6a      	bge.n	80067da <_dtoa_r+0x92a>
 8006704:	2300      	movs	r3, #0
 8006706:	4659      	mov	r1, fp
 8006708:	220a      	movs	r2, #10
 800670a:	4628      	mov	r0, r5
 800670c:	f000 fa5e 	bl	8006bcc <__multadd>
 8006710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006712:	4683      	mov	fp, r0
 8006714:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8194 	beq.w	8006a46 <_dtoa_r+0xb96>
 800671e:	4631      	mov	r1, r6
 8006720:	2300      	movs	r3, #0
 8006722:	220a      	movs	r2, #10
 8006724:	4628      	mov	r0, r5
 8006726:	f000 fa51 	bl	8006bcc <__multadd>
 800672a:	f1b9 0f00 	cmp.w	r9, #0
 800672e:	4606      	mov	r6, r0
 8006730:	f300 8093 	bgt.w	800685a <_dtoa_r+0x9aa>
 8006734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006736:	2b02      	cmp	r3, #2
 8006738:	dc57      	bgt.n	80067ea <_dtoa_r+0x93a>
 800673a:	e08e      	b.n	800685a <_dtoa_r+0x9aa>
 800673c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800673e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006742:	e757      	b.n	80065f4 <_dtoa_r+0x744>
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	1e5c      	subs	r4, r3, #1
 8006748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674a:	42a3      	cmp	r3, r4
 800674c:	bfb7      	itett	lt
 800674e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006750:	1b1c      	subge	r4, r3, r4
 8006752:	1ae2      	sublt	r2, r4, r3
 8006754:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006756:	bfbe      	ittt	lt
 8006758:	940a      	strlt	r4, [sp, #40]	; 0x28
 800675a:	189b      	addlt	r3, r3, r2
 800675c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800675e:	9b08      	ldr	r3, [sp, #32]
 8006760:	bfb8      	it	lt
 8006762:	2400      	movlt	r4, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfbb      	ittet	lt
 8006768:	9b06      	ldrlt	r3, [sp, #24]
 800676a:	9a08      	ldrlt	r2, [sp, #32]
 800676c:	9f06      	ldrge	r7, [sp, #24]
 800676e:	1a9f      	sublt	r7, r3, r2
 8006770:	bfac      	ite	ge
 8006772:	9b08      	ldrge	r3, [sp, #32]
 8006774:	2300      	movlt	r3, #0
 8006776:	e73f      	b.n	80065f8 <_dtoa_r+0x748>
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	40240000 	.word	0x40240000
 8006780:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006782:	9f06      	ldr	r7, [sp, #24]
 8006784:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006786:	e742      	b.n	800660e <_dtoa_r+0x75e>
 8006788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800678a:	e76b      	b.n	8006664 <_dtoa_r+0x7b4>
 800678c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678e:	2b01      	cmp	r3, #1
 8006790:	dc19      	bgt.n	80067c6 <_dtoa_r+0x916>
 8006792:	9b04      	ldr	r3, [sp, #16]
 8006794:	b9bb      	cbnz	r3, 80067c6 <_dtoa_r+0x916>
 8006796:	9b05      	ldr	r3, [sp, #20]
 8006798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800679c:	b99b      	cbnz	r3, 80067c6 <_dtoa_r+0x916>
 800679e:	9b05      	ldr	r3, [sp, #20]
 80067a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a4:	0d1b      	lsrs	r3, r3, #20
 80067a6:	051b      	lsls	r3, r3, #20
 80067a8:	b183      	cbz	r3, 80067cc <_dtoa_r+0x91c>
 80067aa:	f04f 0801 	mov.w	r8, #1
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	3301      	adds	r3, #1
 80067b2:	9306      	str	r3, [sp, #24]
 80067b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b6:	3301      	adds	r3, #1
 80067b8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f47f af6a 	bne.w	8006696 <_dtoa_r+0x7e6>
 80067c2:	2001      	movs	r0, #1
 80067c4:	e76f      	b.n	80066a6 <_dtoa_r+0x7f6>
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	e7f6      	b.n	80067ba <_dtoa_r+0x90a>
 80067cc:	4698      	mov	r8, r3
 80067ce:	e7f4      	b.n	80067ba <_dtoa_r+0x90a>
 80067d0:	f43f af7d 	beq.w	80066ce <_dtoa_r+0x81e>
 80067d4:	4618      	mov	r0, r3
 80067d6:	301c      	adds	r0, #28
 80067d8:	e772      	b.n	80066c0 <_dtoa_r+0x810>
 80067da:	9b08      	ldr	r3, [sp, #32]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dc36      	bgt.n	800684e <_dtoa_r+0x99e>
 80067e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	dd33      	ble.n	800684e <_dtoa_r+0x99e>
 80067e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067ea:	f1b9 0f00 	cmp.w	r9, #0
 80067ee:	d10d      	bne.n	800680c <_dtoa_r+0x95c>
 80067f0:	4621      	mov	r1, r4
 80067f2:	464b      	mov	r3, r9
 80067f4:	2205      	movs	r2, #5
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 f9e8 	bl	8006bcc <__multadd>
 80067fc:	4601      	mov	r1, r0
 80067fe:	4604      	mov	r4, r0
 8006800:	4658      	mov	r0, fp
 8006802:	f000 fbff 	bl	8007004 <__mcmp>
 8006806:	2800      	cmp	r0, #0
 8006808:	f73f adb8 	bgt.w	800637c <_dtoa_r+0x4cc>
 800680c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800680e:	9f03      	ldr	r7, [sp, #12]
 8006810:	ea6f 0a03 	mvn.w	sl, r3
 8006814:	f04f 0800 	mov.w	r8, #0
 8006818:	4621      	mov	r1, r4
 800681a:	4628      	mov	r0, r5
 800681c:	f000 f9b4 	bl	8006b88 <_Bfree>
 8006820:	2e00      	cmp	r6, #0
 8006822:	f43f aea7 	beq.w	8006574 <_dtoa_r+0x6c4>
 8006826:	f1b8 0f00 	cmp.w	r8, #0
 800682a:	d005      	beq.n	8006838 <_dtoa_r+0x988>
 800682c:	45b0      	cmp	r8, r6
 800682e:	d003      	beq.n	8006838 <_dtoa_r+0x988>
 8006830:	4641      	mov	r1, r8
 8006832:	4628      	mov	r0, r5
 8006834:	f000 f9a8 	bl	8006b88 <_Bfree>
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f9a4 	bl	8006b88 <_Bfree>
 8006840:	e698      	b.n	8006574 <_dtoa_r+0x6c4>
 8006842:	2400      	movs	r4, #0
 8006844:	4626      	mov	r6, r4
 8006846:	e7e1      	b.n	800680c <_dtoa_r+0x95c>
 8006848:	46c2      	mov	sl, r8
 800684a:	4626      	mov	r6, r4
 800684c:	e596      	b.n	800637c <_dtoa_r+0x4cc>
 800684e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80fd 	beq.w	8006a54 <_dtoa_r+0xba4>
 800685a:	2f00      	cmp	r7, #0
 800685c:	dd05      	ble.n	800686a <_dtoa_r+0x9ba>
 800685e:	4631      	mov	r1, r6
 8006860:	463a      	mov	r2, r7
 8006862:	4628      	mov	r0, r5
 8006864:	f000 fb5e 	bl	8006f24 <__lshift>
 8006868:	4606      	mov	r6, r0
 800686a:	f1b8 0f00 	cmp.w	r8, #0
 800686e:	d05c      	beq.n	800692a <_dtoa_r+0xa7a>
 8006870:	4628      	mov	r0, r5
 8006872:	6871      	ldr	r1, [r6, #4]
 8006874:	f000 f948 	bl	8006b08 <_Balloc>
 8006878:	4607      	mov	r7, r0
 800687a:	b928      	cbnz	r0, 8006888 <_dtoa_r+0x9d8>
 800687c:	4602      	mov	r2, r0
 800687e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006882:	4b7f      	ldr	r3, [pc, #508]	; (8006a80 <_dtoa_r+0xbd0>)
 8006884:	f7ff bb28 	b.w	8005ed8 <_dtoa_r+0x28>
 8006888:	6932      	ldr	r2, [r6, #16]
 800688a:	f106 010c 	add.w	r1, r6, #12
 800688e:	3202      	adds	r2, #2
 8006890:	0092      	lsls	r2, r2, #2
 8006892:	300c      	adds	r0, #12
 8006894:	f000 f91e 	bl	8006ad4 <memcpy>
 8006898:	2201      	movs	r2, #1
 800689a:	4639      	mov	r1, r7
 800689c:	4628      	mov	r0, r5
 800689e:	f000 fb41 	bl	8006f24 <__lshift>
 80068a2:	46b0      	mov	r8, r6
 80068a4:	4606      	mov	r6, r0
 80068a6:	9b03      	ldr	r3, [sp, #12]
 80068a8:	3301      	adds	r3, #1
 80068aa:	9308      	str	r3, [sp, #32]
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	444b      	add	r3, r9
 80068b0:	930a      	str	r3, [sp, #40]	; 0x28
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	4621      	mov	r1, r4
 80068be:	3b01      	subs	r3, #1
 80068c0:	4658      	mov	r0, fp
 80068c2:	9304      	str	r3, [sp, #16]
 80068c4:	f7ff fa66 	bl	8005d94 <quorem>
 80068c8:	4603      	mov	r3, r0
 80068ca:	4641      	mov	r1, r8
 80068cc:	3330      	adds	r3, #48	; 0x30
 80068ce:	9006      	str	r0, [sp, #24]
 80068d0:	4658      	mov	r0, fp
 80068d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80068d4:	f000 fb96 	bl	8007004 <__mcmp>
 80068d8:	4632      	mov	r2, r6
 80068da:	4681      	mov	r9, r0
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 fbac 	bl	800703c <__mdiff>
 80068e4:	68c2      	ldr	r2, [r0, #12]
 80068e6:	4607      	mov	r7, r0
 80068e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ea:	bb02      	cbnz	r2, 800692e <_dtoa_r+0xa7e>
 80068ec:	4601      	mov	r1, r0
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 fb88 	bl	8007004 <__mcmp>
 80068f4:	4602      	mov	r2, r0
 80068f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f8:	4639      	mov	r1, r7
 80068fa:	4628      	mov	r0, r5
 80068fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006900:	f000 f942 	bl	8006b88 <_Bfree>
 8006904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006908:	9f08      	ldr	r7, [sp, #32]
 800690a:	ea43 0102 	orr.w	r1, r3, r2
 800690e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006910:	430b      	orrs	r3, r1
 8006912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006914:	d10d      	bne.n	8006932 <_dtoa_r+0xa82>
 8006916:	2b39      	cmp	r3, #57	; 0x39
 8006918:	d029      	beq.n	800696e <_dtoa_r+0xabe>
 800691a:	f1b9 0f00 	cmp.w	r9, #0
 800691e:	dd01      	ble.n	8006924 <_dtoa_r+0xa74>
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	3331      	adds	r3, #49	; 0x31
 8006924:	9a04      	ldr	r2, [sp, #16]
 8006926:	7013      	strb	r3, [r2, #0]
 8006928:	e776      	b.n	8006818 <_dtoa_r+0x968>
 800692a:	4630      	mov	r0, r6
 800692c:	e7b9      	b.n	80068a2 <_dtoa_r+0x9f2>
 800692e:	2201      	movs	r2, #1
 8006930:	e7e2      	b.n	80068f8 <_dtoa_r+0xa48>
 8006932:	f1b9 0f00 	cmp.w	r9, #0
 8006936:	db06      	blt.n	8006946 <_dtoa_r+0xa96>
 8006938:	9922      	ldr	r1, [sp, #136]	; 0x88
 800693a:	ea41 0909 	orr.w	r9, r1, r9
 800693e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006940:	ea59 0101 	orrs.w	r1, r9, r1
 8006944:	d120      	bne.n	8006988 <_dtoa_r+0xad8>
 8006946:	2a00      	cmp	r2, #0
 8006948:	ddec      	ble.n	8006924 <_dtoa_r+0xa74>
 800694a:	4659      	mov	r1, fp
 800694c:	2201      	movs	r2, #1
 800694e:	4628      	mov	r0, r5
 8006950:	9308      	str	r3, [sp, #32]
 8006952:	f000 fae7 	bl	8006f24 <__lshift>
 8006956:	4621      	mov	r1, r4
 8006958:	4683      	mov	fp, r0
 800695a:	f000 fb53 	bl	8007004 <__mcmp>
 800695e:	2800      	cmp	r0, #0
 8006960:	9b08      	ldr	r3, [sp, #32]
 8006962:	dc02      	bgt.n	800696a <_dtoa_r+0xaba>
 8006964:	d1de      	bne.n	8006924 <_dtoa_r+0xa74>
 8006966:	07da      	lsls	r2, r3, #31
 8006968:	d5dc      	bpl.n	8006924 <_dtoa_r+0xa74>
 800696a:	2b39      	cmp	r3, #57	; 0x39
 800696c:	d1d8      	bne.n	8006920 <_dtoa_r+0xa70>
 800696e:	2339      	movs	r3, #57	; 0x39
 8006970:	9a04      	ldr	r2, [sp, #16]
 8006972:	7013      	strb	r3, [r2, #0]
 8006974:	463b      	mov	r3, r7
 8006976:	461f      	mov	r7, r3
 8006978:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800697c:	3b01      	subs	r3, #1
 800697e:	2a39      	cmp	r2, #57	; 0x39
 8006980:	d050      	beq.n	8006a24 <_dtoa_r+0xb74>
 8006982:	3201      	adds	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	e747      	b.n	8006818 <_dtoa_r+0x968>
 8006988:	2a00      	cmp	r2, #0
 800698a:	dd03      	ble.n	8006994 <_dtoa_r+0xae4>
 800698c:	2b39      	cmp	r3, #57	; 0x39
 800698e:	d0ee      	beq.n	800696e <_dtoa_r+0xabe>
 8006990:	3301      	adds	r3, #1
 8006992:	e7c7      	b.n	8006924 <_dtoa_r+0xa74>
 8006994:	9a08      	ldr	r2, [sp, #32]
 8006996:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006998:	f802 3c01 	strb.w	r3, [r2, #-1]
 800699c:	428a      	cmp	r2, r1
 800699e:	d02a      	beq.n	80069f6 <_dtoa_r+0xb46>
 80069a0:	4659      	mov	r1, fp
 80069a2:	2300      	movs	r3, #0
 80069a4:	220a      	movs	r2, #10
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 f910 	bl	8006bcc <__multadd>
 80069ac:	45b0      	cmp	r8, r6
 80069ae:	4683      	mov	fp, r0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	f04f 020a 	mov.w	r2, #10
 80069b8:	4641      	mov	r1, r8
 80069ba:	4628      	mov	r0, r5
 80069bc:	d107      	bne.n	80069ce <_dtoa_r+0xb1e>
 80069be:	f000 f905 	bl	8006bcc <__multadd>
 80069c2:	4680      	mov	r8, r0
 80069c4:	4606      	mov	r6, r0
 80069c6:	9b08      	ldr	r3, [sp, #32]
 80069c8:	3301      	adds	r3, #1
 80069ca:	9308      	str	r3, [sp, #32]
 80069cc:	e775      	b.n	80068ba <_dtoa_r+0xa0a>
 80069ce:	f000 f8fd 	bl	8006bcc <__multadd>
 80069d2:	4631      	mov	r1, r6
 80069d4:	4680      	mov	r8, r0
 80069d6:	2300      	movs	r3, #0
 80069d8:	220a      	movs	r2, #10
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f8f6 	bl	8006bcc <__multadd>
 80069e0:	4606      	mov	r6, r0
 80069e2:	e7f0      	b.n	80069c6 <_dtoa_r+0xb16>
 80069e4:	f1b9 0f00 	cmp.w	r9, #0
 80069e8:	bfcc      	ite	gt
 80069ea:	464f      	movgt	r7, r9
 80069ec:	2701      	movle	r7, #1
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	9a03      	ldr	r2, [sp, #12]
 80069f4:	4417      	add	r7, r2
 80069f6:	4659      	mov	r1, fp
 80069f8:	2201      	movs	r2, #1
 80069fa:	4628      	mov	r0, r5
 80069fc:	9308      	str	r3, [sp, #32]
 80069fe:	f000 fa91 	bl	8006f24 <__lshift>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4683      	mov	fp, r0
 8006a06:	f000 fafd 	bl	8007004 <__mcmp>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	dcb2      	bgt.n	8006974 <_dtoa_r+0xac4>
 8006a0e:	d102      	bne.n	8006a16 <_dtoa_r+0xb66>
 8006a10:	9b08      	ldr	r3, [sp, #32]
 8006a12:	07db      	lsls	r3, r3, #31
 8006a14:	d4ae      	bmi.n	8006974 <_dtoa_r+0xac4>
 8006a16:	463b      	mov	r3, r7
 8006a18:	461f      	mov	r7, r3
 8006a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a1e:	2a30      	cmp	r2, #48	; 0x30
 8006a20:	d0fa      	beq.n	8006a18 <_dtoa_r+0xb68>
 8006a22:	e6f9      	b.n	8006818 <_dtoa_r+0x968>
 8006a24:	9a03      	ldr	r2, [sp, #12]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d1a5      	bne.n	8006976 <_dtoa_r+0xac6>
 8006a2a:	2331      	movs	r3, #49	; 0x31
 8006a2c:	f10a 0a01 	add.w	sl, sl, #1
 8006a30:	e779      	b.n	8006926 <_dtoa_r+0xa76>
 8006a32:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <_dtoa_r+0xbd4>)
 8006a34:	f7ff baa8 	b.w	8005f88 <_dtoa_r+0xd8>
 8006a38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f47f aa81 	bne.w	8005f42 <_dtoa_r+0x92>
 8006a40:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <_dtoa_r+0xbd8>)
 8006a42:	f7ff baa1 	b.w	8005f88 <_dtoa_r+0xd8>
 8006a46:	f1b9 0f00 	cmp.w	r9, #0
 8006a4a:	dc03      	bgt.n	8006a54 <_dtoa_r+0xba4>
 8006a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	f73f aecb 	bgt.w	80067ea <_dtoa_r+0x93a>
 8006a54:	9f03      	ldr	r7, [sp, #12]
 8006a56:	4621      	mov	r1, r4
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f7ff f99b 	bl	8005d94 <quorem>
 8006a5e:	9a03      	ldr	r2, [sp, #12]
 8006a60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006a64:	f807 3b01 	strb.w	r3, [r7], #1
 8006a68:	1aba      	subs	r2, r7, r2
 8006a6a:	4591      	cmp	r9, r2
 8006a6c:	ddba      	ble.n	80069e4 <_dtoa_r+0xb34>
 8006a6e:	4659      	mov	r1, fp
 8006a70:	2300      	movs	r3, #0
 8006a72:	220a      	movs	r2, #10
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 f8a9 	bl	8006bcc <__multadd>
 8006a7a:	4683      	mov	fp, r0
 8006a7c:	e7eb      	b.n	8006a56 <_dtoa_r+0xba6>
 8006a7e:	bf00      	nop
 8006a80:	08008517 	.word	0x08008517
 8006a84:	08008438 	.word	0x08008438
 8006a88:	08008498 	.word	0x08008498

08006a8c <fiprintf>:
 8006a8c:	b40e      	push	{r1, r2, r3}
 8006a8e:	b503      	push	{r0, r1, lr}
 8006a90:	4601      	mov	r1, r0
 8006a92:	ab03      	add	r3, sp, #12
 8006a94:	4805      	ldr	r0, [pc, #20]	; (8006aac <fiprintf+0x20>)
 8006a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	f000 fd4d 	bl	800753c <_vfiprintf_r>
 8006aa2:	b002      	add	sp, #8
 8006aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa8:	b003      	add	sp, #12
 8006aaa:	4770      	bx	lr
 8006aac:	2000046c 	.word	0x2000046c

08006ab0 <_localeconv_r>:
 8006ab0:	4800      	ldr	r0, [pc, #0]	; (8006ab4 <_localeconv_r+0x4>)
 8006ab2:	4770      	bx	lr
 8006ab4:	200005c0 	.word	0x200005c0

08006ab8 <memchr>:
 8006ab8:	4603      	mov	r3, r0
 8006aba:	b510      	push	{r4, lr}
 8006abc:	b2c9      	uxtb	r1, r1
 8006abe:	4402      	add	r2, r0
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	d101      	bne.n	8006aca <memchr+0x12>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e003      	b.n	8006ad2 <memchr+0x1a>
 8006aca:	7804      	ldrb	r4, [r0, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	428c      	cmp	r4, r1
 8006ad0:	d1f6      	bne.n	8006ac0 <memchr+0x8>
 8006ad2:	bd10      	pop	{r4, pc}

08006ad4 <memcpy>:
 8006ad4:	440a      	add	r2, r1
 8006ad6:	4291      	cmp	r1, r2
 8006ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006adc:	d100      	bne.n	8006ae0 <memcpy+0xc>
 8006ade:	4770      	bx	lr
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aec:	d1f9      	bne.n	8006ae2 <memcpy+0xe>
 8006aee:	bd10      	pop	{r4, pc}

08006af0 <__malloc_lock>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__malloc_lock+0x8>)
 8006af2:	f001 b8cf 	b.w	8007c94 <__retarget_lock_acquire_recursive>
 8006af6:	bf00      	nop
 8006af8:	200026e4 	.word	0x200026e4

08006afc <__malloc_unlock>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__malloc_unlock+0x8>)
 8006afe:	f001 b8ca 	b.w	8007c96 <__retarget_lock_release_recursive>
 8006b02:	bf00      	nop
 8006b04:	200026e4 	.word	0x200026e4

08006b08 <_Balloc>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	460d      	mov	r5, r1
 8006b10:	b976      	cbnz	r6, 8006b30 <_Balloc+0x28>
 8006b12:	2010      	movs	r0, #16
 8006b14:	f7fe fb34 	bl	8005180 <malloc>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b1c:	b920      	cbnz	r0, 8006b28 <_Balloc+0x20>
 8006b1e:	2166      	movs	r1, #102	; 0x66
 8006b20:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <_Balloc+0x78>)
 8006b22:	4818      	ldr	r0, [pc, #96]	; (8006b84 <_Balloc+0x7c>)
 8006b24:	f7ff f918 	bl	8005d58 <__assert_func>
 8006b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b2c:	6006      	str	r6, [r0, #0]
 8006b2e:	60c6      	str	r6, [r0, #12]
 8006b30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b32:	68f3      	ldr	r3, [r6, #12]
 8006b34:	b183      	cbz	r3, 8006b58 <_Balloc+0x50>
 8006b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b3e:	b9b8      	cbnz	r0, 8006b70 <_Balloc+0x68>
 8006b40:	2101      	movs	r1, #1
 8006b42:	fa01 f605 	lsl.w	r6, r1, r5
 8006b46:	1d72      	adds	r2, r6, #5
 8006b48:	4620      	mov	r0, r4
 8006b4a:	0092      	lsls	r2, r2, #2
 8006b4c:	f000 fb5e 	bl	800720c <_calloc_r>
 8006b50:	b160      	cbz	r0, 8006b6c <_Balloc+0x64>
 8006b52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b56:	e00e      	b.n	8006b76 <_Balloc+0x6e>
 8006b58:	2221      	movs	r2, #33	; 0x21
 8006b5a:	2104      	movs	r1, #4
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 fb55 	bl	800720c <_calloc_r>
 8006b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b64:	60f0      	str	r0, [r6, #12]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e4      	bne.n	8006b36 <_Balloc+0x2e>
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	bd70      	pop	{r4, r5, r6, pc}
 8006b70:	6802      	ldr	r2, [r0, #0]
 8006b72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b76:	2300      	movs	r3, #0
 8006b78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b7c:	e7f7      	b.n	8006b6e <_Balloc+0x66>
 8006b7e:	bf00      	nop
 8006b80:	080084a5 	.word	0x080084a5
 8006b84:	08008528 	.word	0x08008528

08006b88 <_Bfree>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	b976      	cbnz	r6, 8006bb0 <_Bfree+0x28>
 8006b92:	2010      	movs	r0, #16
 8006b94:	f7fe faf4 	bl	8005180 <malloc>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6268      	str	r0, [r5, #36]	; 0x24
 8006b9c:	b920      	cbnz	r0, 8006ba8 <_Bfree+0x20>
 8006b9e:	218a      	movs	r1, #138	; 0x8a
 8006ba0:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <_Bfree+0x3c>)
 8006ba2:	4809      	ldr	r0, [pc, #36]	; (8006bc8 <_Bfree+0x40>)
 8006ba4:	f7ff f8d8 	bl	8005d58 <__assert_func>
 8006ba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bac:	6006      	str	r6, [r0, #0]
 8006bae:	60c6      	str	r6, [r0, #12]
 8006bb0:	b13c      	cbz	r4, 8006bc2 <_Bfree+0x3a>
 8006bb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bb4:	6862      	ldr	r2, [r4, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bbc:	6021      	str	r1, [r4, #0]
 8006bbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	080084a5 	.word	0x080084a5
 8006bc8:	08008528 	.word	0x08008528

08006bcc <__multadd>:
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	461e      	mov	r6, r3
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	690d      	ldr	r5, [r1, #16]
 8006bda:	f101 0c14 	add.w	ip, r1, #20
 8006bde:	f8dc 3000 	ldr.w	r3, [ip]
 8006be2:	3001      	adds	r0, #1
 8006be4:	b299      	uxth	r1, r3
 8006be6:	fb02 6101 	mla	r1, r2, r1, r6
 8006bea:	0c1e      	lsrs	r6, r3, #16
 8006bec:	0c0b      	lsrs	r3, r1, #16
 8006bee:	fb02 3306 	mla	r3, r2, r6, r3
 8006bf2:	b289      	uxth	r1, r1
 8006bf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bf8:	4285      	cmp	r5, r0
 8006bfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bfe:	f84c 1b04 	str.w	r1, [ip], #4
 8006c02:	dcec      	bgt.n	8006bde <__multadd+0x12>
 8006c04:	b30e      	cbz	r6, 8006c4a <__multadd+0x7e>
 8006c06:	68a3      	ldr	r3, [r4, #8]
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dc19      	bgt.n	8006c40 <__multadd+0x74>
 8006c0c:	6861      	ldr	r1, [r4, #4]
 8006c0e:	4638      	mov	r0, r7
 8006c10:	3101      	adds	r1, #1
 8006c12:	f7ff ff79 	bl	8006b08 <_Balloc>
 8006c16:	4680      	mov	r8, r0
 8006c18:	b928      	cbnz	r0, 8006c26 <__multadd+0x5a>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	21b5      	movs	r1, #181	; 0xb5
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <__multadd+0x84>)
 8006c20:	480c      	ldr	r0, [pc, #48]	; (8006c54 <__multadd+0x88>)
 8006c22:	f7ff f899 	bl	8005d58 <__assert_func>
 8006c26:	6922      	ldr	r2, [r4, #16]
 8006c28:	f104 010c 	add.w	r1, r4, #12
 8006c2c:	3202      	adds	r2, #2
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	300c      	adds	r0, #12
 8006c32:	f7ff ff4f 	bl	8006ad4 <memcpy>
 8006c36:	4621      	mov	r1, r4
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ffa5 	bl	8006b88 <_Bfree>
 8006c3e:	4644      	mov	r4, r8
 8006c40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c44:	3501      	adds	r5, #1
 8006c46:	615e      	str	r6, [r3, #20]
 8006c48:	6125      	str	r5, [r4, #16]
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c50:	08008517 	.word	0x08008517
 8006c54:	08008528 	.word	0x08008528

08006c58 <__hi0bits>:
 8006c58:	0c02      	lsrs	r2, r0, #16
 8006c5a:	0412      	lsls	r2, r2, #16
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	b9ca      	cbnz	r2, 8006c94 <__hi0bits+0x3c>
 8006c60:	0403      	lsls	r3, r0, #16
 8006c62:	2010      	movs	r0, #16
 8006c64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c68:	bf04      	itt	eq
 8006c6a:	021b      	lsleq	r3, r3, #8
 8006c6c:	3008      	addeq	r0, #8
 8006c6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c72:	bf04      	itt	eq
 8006c74:	011b      	lsleq	r3, r3, #4
 8006c76:	3004      	addeq	r0, #4
 8006c78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c7c:	bf04      	itt	eq
 8006c7e:	009b      	lsleq	r3, r3, #2
 8006c80:	3002      	addeq	r0, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	db05      	blt.n	8006c92 <__hi0bits+0x3a>
 8006c86:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006c8a:	f100 0001 	add.w	r0, r0, #1
 8006c8e:	bf08      	it	eq
 8006c90:	2020      	moveq	r0, #32
 8006c92:	4770      	bx	lr
 8006c94:	2000      	movs	r0, #0
 8006c96:	e7e5      	b.n	8006c64 <__hi0bits+0xc>

08006c98 <__lo0bits>:
 8006c98:	6803      	ldr	r3, [r0, #0]
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f013 0007 	ands.w	r0, r3, #7
 8006ca0:	d00b      	beq.n	8006cba <__lo0bits+0x22>
 8006ca2:	07d9      	lsls	r1, r3, #31
 8006ca4:	d421      	bmi.n	8006cea <__lo0bits+0x52>
 8006ca6:	0798      	lsls	r0, r3, #30
 8006ca8:	bf49      	itett	mi
 8006caa:	085b      	lsrmi	r3, r3, #1
 8006cac:	089b      	lsrpl	r3, r3, #2
 8006cae:	2001      	movmi	r0, #1
 8006cb0:	6013      	strmi	r3, [r2, #0]
 8006cb2:	bf5c      	itt	pl
 8006cb4:	2002      	movpl	r0, #2
 8006cb6:	6013      	strpl	r3, [r2, #0]
 8006cb8:	4770      	bx	lr
 8006cba:	b299      	uxth	r1, r3
 8006cbc:	b909      	cbnz	r1, 8006cc2 <__lo0bits+0x2a>
 8006cbe:	2010      	movs	r0, #16
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	b2d9      	uxtb	r1, r3
 8006cc4:	b909      	cbnz	r1, 8006cca <__lo0bits+0x32>
 8006cc6:	3008      	adds	r0, #8
 8006cc8:	0a1b      	lsrs	r3, r3, #8
 8006cca:	0719      	lsls	r1, r3, #28
 8006ccc:	bf04      	itt	eq
 8006cce:	091b      	lsreq	r3, r3, #4
 8006cd0:	3004      	addeq	r0, #4
 8006cd2:	0799      	lsls	r1, r3, #30
 8006cd4:	bf04      	itt	eq
 8006cd6:	089b      	lsreq	r3, r3, #2
 8006cd8:	3002      	addeq	r0, #2
 8006cda:	07d9      	lsls	r1, r3, #31
 8006cdc:	d403      	bmi.n	8006ce6 <__lo0bits+0x4e>
 8006cde:	085b      	lsrs	r3, r3, #1
 8006ce0:	f100 0001 	add.w	r0, r0, #1
 8006ce4:	d003      	beq.n	8006cee <__lo0bits+0x56>
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4770      	bx	lr
 8006cea:	2000      	movs	r0, #0
 8006cec:	4770      	bx	lr
 8006cee:	2020      	movs	r0, #32
 8006cf0:	4770      	bx	lr
	...

08006cf4 <__i2b>:
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	f7ff ff05 	bl	8006b08 <_Balloc>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	b928      	cbnz	r0, 8006d0e <__i2b+0x1a>
 8006d02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d06:	4b04      	ldr	r3, [pc, #16]	; (8006d18 <__i2b+0x24>)
 8006d08:	4804      	ldr	r0, [pc, #16]	; (8006d1c <__i2b+0x28>)
 8006d0a:	f7ff f825 	bl	8005d58 <__assert_func>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	6144      	str	r4, [r0, #20]
 8006d12:	6103      	str	r3, [r0, #16]
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	bf00      	nop
 8006d18:	08008517 	.word	0x08008517
 8006d1c:	08008528 	.word	0x08008528

08006d20 <__multiply>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	4691      	mov	r9, r2
 8006d26:	690a      	ldr	r2, [r1, #16]
 8006d28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	bfbe      	ittt	lt
 8006d32:	460b      	movlt	r3, r1
 8006d34:	464c      	movlt	r4, r9
 8006d36:	4699      	movlt	r9, r3
 8006d38:	6927      	ldr	r7, [r4, #16]
 8006d3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d3e:	68a3      	ldr	r3, [r4, #8]
 8006d40:	6861      	ldr	r1, [r4, #4]
 8006d42:	eb07 060a 	add.w	r6, r7, sl
 8006d46:	42b3      	cmp	r3, r6
 8006d48:	b085      	sub	sp, #20
 8006d4a:	bfb8      	it	lt
 8006d4c:	3101      	addlt	r1, #1
 8006d4e:	f7ff fedb 	bl	8006b08 <_Balloc>
 8006d52:	b930      	cbnz	r0, 8006d62 <__multiply+0x42>
 8006d54:	4602      	mov	r2, r0
 8006d56:	f240 115d 	movw	r1, #349	; 0x15d
 8006d5a:	4b43      	ldr	r3, [pc, #268]	; (8006e68 <__multiply+0x148>)
 8006d5c:	4843      	ldr	r0, [pc, #268]	; (8006e6c <__multiply+0x14c>)
 8006d5e:	f7fe fffb 	bl	8005d58 <__assert_func>
 8006d62:	f100 0514 	add.w	r5, r0, #20
 8006d66:	462b      	mov	r3, r5
 8006d68:	2200      	movs	r2, #0
 8006d6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d6e:	4543      	cmp	r3, r8
 8006d70:	d321      	bcc.n	8006db6 <__multiply+0x96>
 8006d72:	f104 0314 	add.w	r3, r4, #20
 8006d76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d7a:	f109 0314 	add.w	r3, r9, #20
 8006d7e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d82:	9202      	str	r2, [sp, #8]
 8006d84:	1b3a      	subs	r2, r7, r4
 8006d86:	3a15      	subs	r2, #21
 8006d88:	f022 0203 	bic.w	r2, r2, #3
 8006d8c:	3204      	adds	r2, #4
 8006d8e:	f104 0115 	add.w	r1, r4, #21
 8006d92:	428f      	cmp	r7, r1
 8006d94:	bf38      	it	cc
 8006d96:	2204      	movcc	r2, #4
 8006d98:	9201      	str	r2, [sp, #4]
 8006d9a:	9a02      	ldr	r2, [sp, #8]
 8006d9c:	9303      	str	r3, [sp, #12]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d80c      	bhi.n	8006dbc <__multiply+0x9c>
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	dd03      	ble.n	8006dae <__multiply+0x8e>
 8006da6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d059      	beq.n	8006e62 <__multiply+0x142>
 8006dae:	6106      	str	r6, [r0, #16]
 8006db0:	b005      	add	sp, #20
 8006db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db6:	f843 2b04 	str.w	r2, [r3], #4
 8006dba:	e7d8      	b.n	8006d6e <__multiply+0x4e>
 8006dbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dc0:	f1ba 0f00 	cmp.w	sl, #0
 8006dc4:	d023      	beq.n	8006e0e <__multiply+0xee>
 8006dc6:	46a9      	mov	r9, r5
 8006dc8:	f04f 0c00 	mov.w	ip, #0
 8006dcc:	f104 0e14 	add.w	lr, r4, #20
 8006dd0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006dd4:	f8d9 1000 	ldr.w	r1, [r9]
 8006dd8:	fa1f fb82 	uxth.w	fp, r2
 8006ddc:	b289      	uxth	r1, r1
 8006dde:	fb0a 110b 	mla	r1, sl, fp, r1
 8006de2:	4461      	add	r1, ip
 8006de4:	f8d9 c000 	ldr.w	ip, [r9]
 8006de8:	0c12      	lsrs	r2, r2, #16
 8006dea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006dee:	fb0a c202 	mla	r2, sl, r2, ip
 8006df2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006df6:	b289      	uxth	r1, r1
 8006df8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dfc:	4577      	cmp	r7, lr
 8006dfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e02:	f849 1b04 	str.w	r1, [r9], #4
 8006e06:	d8e3      	bhi.n	8006dd0 <__multiply+0xb0>
 8006e08:	9a01      	ldr	r2, [sp, #4]
 8006e0a:	f845 c002 	str.w	ip, [r5, r2]
 8006e0e:	9a03      	ldr	r2, [sp, #12]
 8006e10:	3304      	adds	r3, #4
 8006e12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e16:	f1b9 0f00 	cmp.w	r9, #0
 8006e1a:	d020      	beq.n	8006e5e <__multiply+0x13e>
 8006e1c:	46ae      	mov	lr, r5
 8006e1e:	f04f 0a00 	mov.w	sl, #0
 8006e22:	6829      	ldr	r1, [r5, #0]
 8006e24:	f104 0c14 	add.w	ip, r4, #20
 8006e28:	f8bc b000 	ldrh.w	fp, [ip]
 8006e2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e30:	b289      	uxth	r1, r1
 8006e32:	fb09 220b 	mla	r2, r9, fp, r2
 8006e36:	4492      	add	sl, r2
 8006e38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e3c:	f84e 1b04 	str.w	r1, [lr], #4
 8006e40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e44:	f8be 1000 	ldrh.w	r1, [lr]
 8006e48:	0c12      	lsrs	r2, r2, #16
 8006e4a:	fb09 1102 	mla	r1, r9, r2, r1
 8006e4e:	4567      	cmp	r7, ip
 8006e50:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e58:	d8e6      	bhi.n	8006e28 <__multiply+0x108>
 8006e5a:	9a01      	ldr	r2, [sp, #4]
 8006e5c:	50a9      	str	r1, [r5, r2]
 8006e5e:	3504      	adds	r5, #4
 8006e60:	e79b      	b.n	8006d9a <__multiply+0x7a>
 8006e62:	3e01      	subs	r6, #1
 8006e64:	e79d      	b.n	8006da2 <__multiply+0x82>
 8006e66:	bf00      	nop
 8006e68:	08008517 	.word	0x08008517
 8006e6c:	08008528 	.word	0x08008528

08006e70 <__pow5mult>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4615      	mov	r5, r2
 8006e76:	f012 0203 	ands.w	r2, r2, #3
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	d007      	beq.n	8006e90 <__pow5mult+0x20>
 8006e80:	4c25      	ldr	r4, [pc, #148]	; (8006f18 <__pow5mult+0xa8>)
 8006e82:	3a01      	subs	r2, #1
 8006e84:	2300      	movs	r3, #0
 8006e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e8a:	f7ff fe9f 	bl	8006bcc <__multadd>
 8006e8e:	4607      	mov	r7, r0
 8006e90:	10ad      	asrs	r5, r5, #2
 8006e92:	d03d      	beq.n	8006f10 <__pow5mult+0xa0>
 8006e94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e96:	b97c      	cbnz	r4, 8006eb8 <__pow5mult+0x48>
 8006e98:	2010      	movs	r0, #16
 8006e9a:	f7fe f971 	bl	8005180 <malloc>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6270      	str	r0, [r6, #36]	; 0x24
 8006ea2:	b928      	cbnz	r0, 8006eb0 <__pow5mult+0x40>
 8006ea4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ea8:	4b1c      	ldr	r3, [pc, #112]	; (8006f1c <__pow5mult+0xac>)
 8006eaa:	481d      	ldr	r0, [pc, #116]	; (8006f20 <__pow5mult+0xb0>)
 8006eac:	f7fe ff54 	bl	8005d58 <__assert_func>
 8006eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006eb4:	6004      	str	r4, [r0, #0]
 8006eb6:	60c4      	str	r4, [r0, #12]
 8006eb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ec0:	b94c      	cbnz	r4, 8006ed6 <__pow5mult+0x66>
 8006ec2:	f240 2171 	movw	r1, #625	; 0x271
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7ff ff14 	bl	8006cf4 <__i2b>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	f04f 0900 	mov.w	r9, #0
 8006eda:	07eb      	lsls	r3, r5, #31
 8006edc:	d50a      	bpl.n	8006ef4 <__pow5mult+0x84>
 8006ede:	4639      	mov	r1, r7
 8006ee0:	4622      	mov	r2, r4
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff ff1c 	bl	8006d20 <__multiply>
 8006ee8:	4680      	mov	r8, r0
 8006eea:	4639      	mov	r1, r7
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff fe4b 	bl	8006b88 <_Bfree>
 8006ef2:	4647      	mov	r7, r8
 8006ef4:	106d      	asrs	r5, r5, #1
 8006ef6:	d00b      	beq.n	8006f10 <__pow5mult+0xa0>
 8006ef8:	6820      	ldr	r0, [r4, #0]
 8006efa:	b938      	cbnz	r0, 8006f0c <__pow5mult+0x9c>
 8006efc:	4622      	mov	r2, r4
 8006efe:	4621      	mov	r1, r4
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff ff0d 	bl	8006d20 <__multiply>
 8006f06:	6020      	str	r0, [r4, #0]
 8006f08:	f8c0 9000 	str.w	r9, [r0]
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	e7e4      	b.n	8006eda <__pow5mult+0x6a>
 8006f10:	4638      	mov	r0, r7
 8006f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f16:	bf00      	nop
 8006f18:	08008678 	.word	0x08008678
 8006f1c:	080084a5 	.word	0x080084a5
 8006f20:	08008528 	.word	0x08008528

08006f24 <__lshift>:
 8006f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	460c      	mov	r4, r1
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	4691      	mov	r9, r2
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	6849      	ldr	r1, [r1, #4]
 8006f32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f36:	68a3      	ldr	r3, [r4, #8]
 8006f38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f3c:	f108 0601 	add.w	r6, r8, #1
 8006f40:	42b3      	cmp	r3, r6
 8006f42:	db0b      	blt.n	8006f5c <__lshift+0x38>
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff fddf 	bl	8006b08 <_Balloc>
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	b948      	cbnz	r0, 8006f62 <__lshift+0x3e>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f54:	4b29      	ldr	r3, [pc, #164]	; (8006ffc <__lshift+0xd8>)
 8006f56:	482a      	ldr	r0, [pc, #168]	; (8007000 <__lshift+0xdc>)
 8006f58:	f7fe fefe 	bl	8005d58 <__assert_func>
 8006f5c:	3101      	adds	r1, #1
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	e7ee      	b.n	8006f40 <__lshift+0x1c>
 8006f62:	2300      	movs	r3, #0
 8006f64:	f100 0114 	add.w	r1, r0, #20
 8006f68:	f100 0210 	add.w	r2, r0, #16
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	4553      	cmp	r3, sl
 8006f70:	db37      	blt.n	8006fe2 <__lshift+0xbe>
 8006f72:	6920      	ldr	r0, [r4, #16]
 8006f74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f78:	f104 0314 	add.w	r3, r4, #20
 8006f7c:	f019 091f 	ands.w	r9, r9, #31
 8006f80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f88:	d02f      	beq.n	8006fea <__lshift+0xc6>
 8006f8a:	468a      	mov	sl, r1
 8006f8c:	f04f 0c00 	mov.w	ip, #0
 8006f90:	f1c9 0e20 	rsb	lr, r9, #32
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	fa02 f209 	lsl.w	r2, r2, r9
 8006f9a:	ea42 020c 	orr.w	r2, r2, ip
 8006f9e:	f84a 2b04 	str.w	r2, [sl], #4
 8006fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006fac:	d8f2      	bhi.n	8006f94 <__lshift+0x70>
 8006fae:	1b03      	subs	r3, r0, r4
 8006fb0:	3b15      	subs	r3, #21
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	f104 0215 	add.w	r2, r4, #21
 8006fbc:	4290      	cmp	r0, r2
 8006fbe:	bf38      	it	cc
 8006fc0:	2304      	movcc	r3, #4
 8006fc2:	f841 c003 	str.w	ip, [r1, r3]
 8006fc6:	f1bc 0f00 	cmp.w	ip, #0
 8006fca:	d001      	beq.n	8006fd0 <__lshift+0xac>
 8006fcc:	f108 0602 	add.w	r6, r8, #2
 8006fd0:	3e01      	subs	r6, #1
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	612e      	str	r6, [r5, #16]
 8006fd8:	f7ff fdd6 	bl	8006b88 <_Bfree>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	e7c1      	b.n	8006f6e <__lshift+0x4a>
 8006fea:	3904      	subs	r1, #4
 8006fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff0:	4298      	cmp	r0, r3
 8006ff2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ff6:	d8f9      	bhi.n	8006fec <__lshift+0xc8>
 8006ff8:	e7ea      	b.n	8006fd0 <__lshift+0xac>
 8006ffa:	bf00      	nop
 8006ffc:	08008517 	.word	0x08008517
 8007000:	08008528 	.word	0x08008528

08007004 <__mcmp>:
 8007004:	4603      	mov	r3, r0
 8007006:	690a      	ldr	r2, [r1, #16]
 8007008:	6900      	ldr	r0, [r0, #16]
 800700a:	b530      	push	{r4, r5, lr}
 800700c:	1a80      	subs	r0, r0, r2
 800700e:	d10d      	bne.n	800702c <__mcmp+0x28>
 8007010:	3314      	adds	r3, #20
 8007012:	3114      	adds	r1, #20
 8007014:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007018:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800701c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007024:	4295      	cmp	r5, r2
 8007026:	d002      	beq.n	800702e <__mcmp+0x2a>
 8007028:	d304      	bcc.n	8007034 <__mcmp+0x30>
 800702a:	2001      	movs	r0, #1
 800702c:	bd30      	pop	{r4, r5, pc}
 800702e:	42a3      	cmp	r3, r4
 8007030:	d3f4      	bcc.n	800701c <__mcmp+0x18>
 8007032:	e7fb      	b.n	800702c <__mcmp+0x28>
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	e7f8      	b.n	800702c <__mcmp+0x28>
	...

0800703c <__mdiff>:
 800703c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	460d      	mov	r5, r1
 8007042:	4607      	mov	r7, r0
 8007044:	4611      	mov	r1, r2
 8007046:	4628      	mov	r0, r5
 8007048:	4614      	mov	r4, r2
 800704a:	f7ff ffdb 	bl	8007004 <__mcmp>
 800704e:	1e06      	subs	r6, r0, #0
 8007050:	d111      	bne.n	8007076 <__mdiff+0x3a>
 8007052:	4631      	mov	r1, r6
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff fd57 	bl	8006b08 <_Balloc>
 800705a:	4602      	mov	r2, r0
 800705c:	b928      	cbnz	r0, 800706a <__mdiff+0x2e>
 800705e:	f240 2132 	movw	r1, #562	; 0x232
 8007062:	4b3a      	ldr	r3, [pc, #232]	; (800714c <__mdiff+0x110>)
 8007064:	483a      	ldr	r0, [pc, #232]	; (8007150 <__mdiff+0x114>)
 8007066:	f7fe fe77 	bl	8005d58 <__assert_func>
 800706a:	2301      	movs	r3, #1
 800706c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007070:	4610      	mov	r0, r2
 8007072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	bfa4      	itt	ge
 8007078:	4623      	movge	r3, r4
 800707a:	462c      	movge	r4, r5
 800707c:	4638      	mov	r0, r7
 800707e:	6861      	ldr	r1, [r4, #4]
 8007080:	bfa6      	itte	ge
 8007082:	461d      	movge	r5, r3
 8007084:	2600      	movge	r6, #0
 8007086:	2601      	movlt	r6, #1
 8007088:	f7ff fd3e 	bl	8006b08 <_Balloc>
 800708c:	4602      	mov	r2, r0
 800708e:	b918      	cbnz	r0, 8007098 <__mdiff+0x5c>
 8007090:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <__mdiff+0x110>)
 8007096:	e7e5      	b.n	8007064 <__mdiff+0x28>
 8007098:	f102 0814 	add.w	r8, r2, #20
 800709c:	46c2      	mov	sl, r8
 800709e:	f04f 0c00 	mov.w	ip, #0
 80070a2:	6927      	ldr	r7, [r4, #16]
 80070a4:	60c6      	str	r6, [r0, #12]
 80070a6:	692e      	ldr	r6, [r5, #16]
 80070a8:	f104 0014 	add.w	r0, r4, #20
 80070ac:	f105 0914 	add.w	r9, r5, #20
 80070b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80070b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070b8:	3410      	adds	r4, #16
 80070ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80070be:	f859 3b04 	ldr.w	r3, [r9], #4
 80070c2:	fa1f f18b 	uxth.w	r1, fp
 80070c6:	448c      	add	ip, r1
 80070c8:	b299      	uxth	r1, r3
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	ebac 0101 	sub.w	r1, ip, r1
 80070d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80070d8:	b289      	uxth	r1, r1
 80070da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80070de:	454e      	cmp	r6, r9
 80070e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80070e4:	f84a 3b04 	str.w	r3, [sl], #4
 80070e8:	d8e7      	bhi.n	80070ba <__mdiff+0x7e>
 80070ea:	1b73      	subs	r3, r6, r5
 80070ec:	3b15      	subs	r3, #21
 80070ee:	f023 0303 	bic.w	r3, r3, #3
 80070f2:	3515      	adds	r5, #21
 80070f4:	3304      	adds	r3, #4
 80070f6:	42ae      	cmp	r6, r5
 80070f8:	bf38      	it	cc
 80070fa:	2304      	movcc	r3, #4
 80070fc:	4418      	add	r0, r3
 80070fe:	4443      	add	r3, r8
 8007100:	461e      	mov	r6, r3
 8007102:	4605      	mov	r5, r0
 8007104:	4575      	cmp	r5, lr
 8007106:	d30e      	bcc.n	8007126 <__mdiff+0xea>
 8007108:	f10e 0103 	add.w	r1, lr, #3
 800710c:	1a09      	subs	r1, r1, r0
 800710e:	f021 0103 	bic.w	r1, r1, #3
 8007112:	3803      	subs	r0, #3
 8007114:	4586      	cmp	lr, r0
 8007116:	bf38      	it	cc
 8007118:	2100      	movcc	r1, #0
 800711a:	4419      	add	r1, r3
 800711c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007120:	b18b      	cbz	r3, 8007146 <__mdiff+0x10a>
 8007122:	6117      	str	r7, [r2, #16]
 8007124:	e7a4      	b.n	8007070 <__mdiff+0x34>
 8007126:	f855 8b04 	ldr.w	r8, [r5], #4
 800712a:	fa1f f188 	uxth.w	r1, r8
 800712e:	4461      	add	r1, ip
 8007130:	140c      	asrs	r4, r1, #16
 8007132:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007136:	b289      	uxth	r1, r1
 8007138:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800713c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007140:	f846 1b04 	str.w	r1, [r6], #4
 8007144:	e7de      	b.n	8007104 <__mdiff+0xc8>
 8007146:	3f01      	subs	r7, #1
 8007148:	e7e8      	b.n	800711c <__mdiff+0xe0>
 800714a:	bf00      	nop
 800714c:	08008517 	.word	0x08008517
 8007150:	08008528 	.word	0x08008528

08007154 <__d2b>:
 8007154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007158:	2101      	movs	r1, #1
 800715a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800715e:	4690      	mov	r8, r2
 8007160:	461d      	mov	r5, r3
 8007162:	f7ff fcd1 	bl	8006b08 <_Balloc>
 8007166:	4604      	mov	r4, r0
 8007168:	b930      	cbnz	r0, 8007178 <__d2b+0x24>
 800716a:	4602      	mov	r2, r0
 800716c:	f240 310a 	movw	r1, #778	; 0x30a
 8007170:	4b24      	ldr	r3, [pc, #144]	; (8007204 <__d2b+0xb0>)
 8007172:	4825      	ldr	r0, [pc, #148]	; (8007208 <__d2b+0xb4>)
 8007174:	f7fe fdf0 	bl	8005d58 <__assert_func>
 8007178:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800717c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007180:	bb2d      	cbnz	r5, 80071ce <__d2b+0x7a>
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	f1b8 0300 	subs.w	r3, r8, #0
 8007188:	d026      	beq.n	80071d8 <__d2b+0x84>
 800718a:	4668      	mov	r0, sp
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	f7ff fd83 	bl	8006c98 <__lo0bits>
 8007192:	9900      	ldr	r1, [sp, #0]
 8007194:	b1f0      	cbz	r0, 80071d4 <__d2b+0x80>
 8007196:	9a01      	ldr	r2, [sp, #4]
 8007198:	f1c0 0320 	rsb	r3, r0, #32
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	430b      	orrs	r3, r1
 80071a2:	40c2      	lsrs	r2, r0
 80071a4:	6163      	str	r3, [r4, #20]
 80071a6:	9201      	str	r2, [sp, #4]
 80071a8:	9b01      	ldr	r3, [sp, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bf14      	ite	ne
 80071ae:	2102      	movne	r1, #2
 80071b0:	2101      	moveq	r1, #1
 80071b2:	61a3      	str	r3, [r4, #24]
 80071b4:	6121      	str	r1, [r4, #16]
 80071b6:	b1c5      	cbz	r5, 80071ea <__d2b+0x96>
 80071b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80071bc:	4405      	add	r5, r0
 80071be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071c2:	603d      	str	r5, [r7, #0]
 80071c4:	6030      	str	r0, [r6, #0]
 80071c6:	4620      	mov	r0, r4
 80071c8:	b002      	add	sp, #8
 80071ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071d2:	e7d6      	b.n	8007182 <__d2b+0x2e>
 80071d4:	6161      	str	r1, [r4, #20]
 80071d6:	e7e7      	b.n	80071a8 <__d2b+0x54>
 80071d8:	a801      	add	r0, sp, #4
 80071da:	f7ff fd5d 	bl	8006c98 <__lo0bits>
 80071de:	2101      	movs	r1, #1
 80071e0:	9b01      	ldr	r3, [sp, #4]
 80071e2:	6121      	str	r1, [r4, #16]
 80071e4:	6163      	str	r3, [r4, #20]
 80071e6:	3020      	adds	r0, #32
 80071e8:	e7e5      	b.n	80071b6 <__d2b+0x62>
 80071ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80071ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071f2:	6038      	str	r0, [r7, #0]
 80071f4:	6918      	ldr	r0, [r3, #16]
 80071f6:	f7ff fd2f 	bl	8006c58 <__hi0bits>
 80071fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80071fe:	6031      	str	r1, [r6, #0]
 8007200:	e7e1      	b.n	80071c6 <__d2b+0x72>
 8007202:	bf00      	nop
 8007204:	08008517 	.word	0x08008517
 8007208:	08008528 	.word	0x08008528

0800720c <_calloc_r>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	fba1 5402 	umull	r5, r4, r1, r2
 8007212:	b934      	cbnz	r4, 8007222 <_calloc_r+0x16>
 8007214:	4629      	mov	r1, r5
 8007216:	f7fe f82b 	bl	8005270 <_malloc_r>
 800721a:	4606      	mov	r6, r0
 800721c:	b928      	cbnz	r0, 800722a <_calloc_r+0x1e>
 800721e:	4630      	mov	r0, r6
 8007220:	bd70      	pop	{r4, r5, r6, pc}
 8007222:	220c      	movs	r2, #12
 8007224:	2600      	movs	r6, #0
 8007226:	6002      	str	r2, [r0, #0]
 8007228:	e7f9      	b.n	800721e <_calloc_r+0x12>
 800722a:	462a      	mov	r2, r5
 800722c:	4621      	mov	r1, r4
 800722e:	f7fd ffaf 	bl	8005190 <memset>
 8007232:	e7f4      	b.n	800721e <_calloc_r+0x12>

08007234 <__ssputs_r>:
 8007234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	688e      	ldr	r6, [r1, #8]
 800723a:	4682      	mov	sl, r0
 800723c:	429e      	cmp	r6, r3
 800723e:	460c      	mov	r4, r1
 8007240:	4690      	mov	r8, r2
 8007242:	461f      	mov	r7, r3
 8007244:	d838      	bhi.n	80072b8 <__ssputs_r+0x84>
 8007246:	898a      	ldrh	r2, [r1, #12]
 8007248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800724c:	d032      	beq.n	80072b4 <__ssputs_r+0x80>
 800724e:	6825      	ldr	r5, [r4, #0]
 8007250:	6909      	ldr	r1, [r1, #16]
 8007252:	3301      	adds	r3, #1
 8007254:	eba5 0901 	sub.w	r9, r5, r1
 8007258:	6965      	ldr	r5, [r4, #20]
 800725a:	444b      	add	r3, r9
 800725c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007264:	106d      	asrs	r5, r5, #1
 8007266:	429d      	cmp	r5, r3
 8007268:	bf38      	it	cc
 800726a:	461d      	movcc	r5, r3
 800726c:	0553      	lsls	r3, r2, #21
 800726e:	d531      	bpl.n	80072d4 <__ssputs_r+0xa0>
 8007270:	4629      	mov	r1, r5
 8007272:	f7fd fffd 	bl	8005270 <_malloc_r>
 8007276:	4606      	mov	r6, r0
 8007278:	b950      	cbnz	r0, 8007290 <__ssputs_r+0x5c>
 800727a:	230c      	movs	r3, #12
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	f8ca 3000 	str.w	r3, [sl]
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007290:	464a      	mov	r2, r9
 8007292:	6921      	ldr	r1, [r4, #16]
 8007294:	f7ff fc1e 	bl	8006ad4 <memcpy>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	6126      	str	r6, [r4, #16]
 80072a6:	444e      	add	r6, r9
 80072a8:	6026      	str	r6, [r4, #0]
 80072aa:	463e      	mov	r6, r7
 80072ac:	6165      	str	r5, [r4, #20]
 80072ae:	eba5 0509 	sub.w	r5, r5, r9
 80072b2:	60a5      	str	r5, [r4, #8]
 80072b4:	42be      	cmp	r6, r7
 80072b6:	d900      	bls.n	80072ba <__ssputs_r+0x86>
 80072b8:	463e      	mov	r6, r7
 80072ba:	4632      	mov	r2, r6
 80072bc:	4641      	mov	r1, r8
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	f000 fd62 	bl	8007d88 <memmove>
 80072c4:	68a3      	ldr	r3, [r4, #8]
 80072c6:	2000      	movs	r0, #0
 80072c8:	1b9b      	subs	r3, r3, r6
 80072ca:	60a3      	str	r3, [r4, #8]
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	4433      	add	r3, r6
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	e7db      	b.n	800728c <__ssputs_r+0x58>
 80072d4:	462a      	mov	r2, r5
 80072d6:	f000 fd71 	bl	8007dbc <_realloc_r>
 80072da:	4606      	mov	r6, r0
 80072dc:	2800      	cmp	r0, #0
 80072de:	d1e1      	bne.n	80072a4 <__ssputs_r+0x70>
 80072e0:	4650      	mov	r0, sl
 80072e2:	6921      	ldr	r1, [r4, #16]
 80072e4:	f7fd ff5c 	bl	80051a0 <_free_r>
 80072e8:	e7c7      	b.n	800727a <__ssputs_r+0x46>
	...

080072ec <_svfiprintf_r>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	4698      	mov	r8, r3
 80072f2:	898b      	ldrh	r3, [r1, #12]
 80072f4:	4607      	mov	r7, r0
 80072f6:	061b      	lsls	r3, r3, #24
 80072f8:	460d      	mov	r5, r1
 80072fa:	4614      	mov	r4, r2
 80072fc:	b09d      	sub	sp, #116	; 0x74
 80072fe:	d50e      	bpl.n	800731e <_svfiprintf_r+0x32>
 8007300:	690b      	ldr	r3, [r1, #16]
 8007302:	b963      	cbnz	r3, 800731e <_svfiprintf_r+0x32>
 8007304:	2140      	movs	r1, #64	; 0x40
 8007306:	f7fd ffb3 	bl	8005270 <_malloc_r>
 800730a:	6028      	str	r0, [r5, #0]
 800730c:	6128      	str	r0, [r5, #16]
 800730e:	b920      	cbnz	r0, 800731a <_svfiprintf_r+0x2e>
 8007310:	230c      	movs	r3, #12
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	e0d1      	b.n	80074be <_svfiprintf_r+0x1d2>
 800731a:	2340      	movs	r3, #64	; 0x40
 800731c:	616b      	str	r3, [r5, #20]
 800731e:	2300      	movs	r3, #0
 8007320:	9309      	str	r3, [sp, #36]	; 0x24
 8007322:	2320      	movs	r3, #32
 8007324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007328:	2330      	movs	r3, #48	; 0x30
 800732a:	f04f 0901 	mov.w	r9, #1
 800732e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007332:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074d8 <_svfiprintf_r+0x1ec>
 8007336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800733a:	4623      	mov	r3, r4
 800733c:	469a      	mov	sl, r3
 800733e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007342:	b10a      	cbz	r2, 8007348 <_svfiprintf_r+0x5c>
 8007344:	2a25      	cmp	r2, #37	; 0x25
 8007346:	d1f9      	bne.n	800733c <_svfiprintf_r+0x50>
 8007348:	ebba 0b04 	subs.w	fp, sl, r4
 800734c:	d00b      	beq.n	8007366 <_svfiprintf_r+0x7a>
 800734e:	465b      	mov	r3, fp
 8007350:	4622      	mov	r2, r4
 8007352:	4629      	mov	r1, r5
 8007354:	4638      	mov	r0, r7
 8007356:	f7ff ff6d 	bl	8007234 <__ssputs_r>
 800735a:	3001      	adds	r0, #1
 800735c:	f000 80aa 	beq.w	80074b4 <_svfiprintf_r+0x1c8>
 8007360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007362:	445a      	add	r2, fp
 8007364:	9209      	str	r2, [sp, #36]	; 0x24
 8007366:	f89a 3000 	ldrb.w	r3, [sl]
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80a2 	beq.w	80074b4 <_svfiprintf_r+0x1c8>
 8007370:	2300      	movs	r3, #0
 8007372:	f04f 32ff 	mov.w	r2, #4294967295
 8007376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800737a:	f10a 0a01 	add.w	sl, sl, #1
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	9307      	str	r3, [sp, #28]
 8007382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007386:	931a      	str	r3, [sp, #104]	; 0x68
 8007388:	4654      	mov	r4, sl
 800738a:	2205      	movs	r2, #5
 800738c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007390:	4851      	ldr	r0, [pc, #324]	; (80074d8 <_svfiprintf_r+0x1ec>)
 8007392:	f7ff fb91 	bl	8006ab8 <memchr>
 8007396:	9a04      	ldr	r2, [sp, #16]
 8007398:	b9d8      	cbnz	r0, 80073d2 <_svfiprintf_r+0xe6>
 800739a:	06d0      	lsls	r0, r2, #27
 800739c:	bf44      	itt	mi
 800739e:	2320      	movmi	r3, #32
 80073a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a4:	0711      	lsls	r1, r2, #28
 80073a6:	bf44      	itt	mi
 80073a8:	232b      	movmi	r3, #43	; 0x2b
 80073aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ae:	f89a 3000 	ldrb.w	r3, [sl]
 80073b2:	2b2a      	cmp	r3, #42	; 0x2a
 80073b4:	d015      	beq.n	80073e2 <_svfiprintf_r+0xf6>
 80073b6:	4654      	mov	r4, sl
 80073b8:	2000      	movs	r0, #0
 80073ba:	f04f 0c0a 	mov.w	ip, #10
 80073be:	9a07      	ldr	r2, [sp, #28]
 80073c0:	4621      	mov	r1, r4
 80073c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c6:	3b30      	subs	r3, #48	; 0x30
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	d94e      	bls.n	800746a <_svfiprintf_r+0x17e>
 80073cc:	b1b0      	cbz	r0, 80073fc <_svfiprintf_r+0x110>
 80073ce:	9207      	str	r2, [sp, #28]
 80073d0:	e014      	b.n	80073fc <_svfiprintf_r+0x110>
 80073d2:	eba0 0308 	sub.w	r3, r0, r8
 80073d6:	fa09 f303 	lsl.w	r3, r9, r3
 80073da:	4313      	orrs	r3, r2
 80073dc:	46a2      	mov	sl, r4
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	e7d2      	b.n	8007388 <_svfiprintf_r+0x9c>
 80073e2:	9b03      	ldr	r3, [sp, #12]
 80073e4:	1d19      	adds	r1, r3, #4
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	9103      	str	r1, [sp, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfbb      	ittet	lt
 80073ee:	425b      	neglt	r3, r3
 80073f0:	f042 0202 	orrlt.w	r2, r2, #2
 80073f4:	9307      	strge	r3, [sp, #28]
 80073f6:	9307      	strlt	r3, [sp, #28]
 80073f8:	bfb8      	it	lt
 80073fa:	9204      	strlt	r2, [sp, #16]
 80073fc:	7823      	ldrb	r3, [r4, #0]
 80073fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007400:	d10c      	bne.n	800741c <_svfiprintf_r+0x130>
 8007402:	7863      	ldrb	r3, [r4, #1]
 8007404:	2b2a      	cmp	r3, #42	; 0x2a
 8007406:	d135      	bne.n	8007474 <_svfiprintf_r+0x188>
 8007408:	9b03      	ldr	r3, [sp, #12]
 800740a:	3402      	adds	r4, #2
 800740c:	1d1a      	adds	r2, r3, #4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	9203      	str	r2, [sp, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfb8      	it	lt
 8007416:	f04f 33ff 	movlt.w	r3, #4294967295
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80074dc <_svfiprintf_r+0x1f0>
 8007420:	2203      	movs	r2, #3
 8007422:	4650      	mov	r0, sl
 8007424:	7821      	ldrb	r1, [r4, #0]
 8007426:	f7ff fb47 	bl	8006ab8 <memchr>
 800742a:	b140      	cbz	r0, 800743e <_svfiprintf_r+0x152>
 800742c:	2340      	movs	r3, #64	; 0x40
 800742e:	eba0 000a 	sub.w	r0, r0, sl
 8007432:	fa03 f000 	lsl.w	r0, r3, r0
 8007436:	9b04      	ldr	r3, [sp, #16]
 8007438:	3401      	adds	r4, #1
 800743a:	4303      	orrs	r3, r0
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007442:	2206      	movs	r2, #6
 8007444:	4826      	ldr	r0, [pc, #152]	; (80074e0 <_svfiprintf_r+0x1f4>)
 8007446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800744a:	f7ff fb35 	bl	8006ab8 <memchr>
 800744e:	2800      	cmp	r0, #0
 8007450:	d038      	beq.n	80074c4 <_svfiprintf_r+0x1d8>
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <_svfiprintf_r+0x1f8>)
 8007454:	bb1b      	cbnz	r3, 800749e <_svfiprintf_r+0x1b2>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	3307      	adds	r3, #7
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	3308      	adds	r3, #8
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007464:	4433      	add	r3, r6
 8007466:	9309      	str	r3, [sp, #36]	; 0x24
 8007468:	e767      	b.n	800733a <_svfiprintf_r+0x4e>
 800746a:	460c      	mov	r4, r1
 800746c:	2001      	movs	r0, #1
 800746e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007472:	e7a5      	b.n	80073c0 <_svfiprintf_r+0xd4>
 8007474:	2300      	movs	r3, #0
 8007476:	f04f 0c0a 	mov.w	ip, #10
 800747a:	4619      	mov	r1, r3
 800747c:	3401      	adds	r4, #1
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	4620      	mov	r0, r4
 8007482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007486:	3a30      	subs	r2, #48	; 0x30
 8007488:	2a09      	cmp	r2, #9
 800748a:	d903      	bls.n	8007494 <_svfiprintf_r+0x1a8>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0c5      	beq.n	800741c <_svfiprintf_r+0x130>
 8007490:	9105      	str	r1, [sp, #20]
 8007492:	e7c3      	b.n	800741c <_svfiprintf_r+0x130>
 8007494:	4604      	mov	r4, r0
 8007496:	2301      	movs	r3, #1
 8007498:	fb0c 2101 	mla	r1, ip, r1, r2
 800749c:	e7f0      	b.n	8007480 <_svfiprintf_r+0x194>
 800749e:	ab03      	add	r3, sp, #12
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	462a      	mov	r2, r5
 80074a4:	4638      	mov	r0, r7
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <_svfiprintf_r+0x1fc>)
 80074a8:	a904      	add	r1, sp, #16
 80074aa:	f7fd fff3 	bl	8005494 <_printf_float>
 80074ae:	1c42      	adds	r2, r0, #1
 80074b0:	4606      	mov	r6, r0
 80074b2:	d1d6      	bne.n	8007462 <_svfiprintf_r+0x176>
 80074b4:	89ab      	ldrh	r3, [r5, #12]
 80074b6:	065b      	lsls	r3, r3, #25
 80074b8:	f53f af2c 	bmi.w	8007314 <_svfiprintf_r+0x28>
 80074bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074be:	b01d      	add	sp, #116	; 0x74
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	462a      	mov	r2, r5
 80074ca:	4638      	mov	r0, r7
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <_svfiprintf_r+0x1fc>)
 80074ce:	a904      	add	r1, sp, #16
 80074d0:	f7fe fa7c 	bl	80059cc <_printf_i>
 80074d4:	e7eb      	b.n	80074ae <_svfiprintf_r+0x1c2>
 80074d6:	bf00      	nop
 80074d8:	08008684 	.word	0x08008684
 80074dc:	0800868a 	.word	0x0800868a
 80074e0:	0800868e 	.word	0x0800868e
 80074e4:	08005495 	.word	0x08005495
 80074e8:	08007235 	.word	0x08007235

080074ec <__sfputc_r>:
 80074ec:	6893      	ldr	r3, [r2, #8]
 80074ee:	b410      	push	{r4}
 80074f0:	3b01      	subs	r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	6093      	str	r3, [r2, #8]
 80074f6:	da07      	bge.n	8007508 <__sfputc_r+0x1c>
 80074f8:	6994      	ldr	r4, [r2, #24]
 80074fa:	42a3      	cmp	r3, r4
 80074fc:	db01      	blt.n	8007502 <__sfputc_r+0x16>
 80074fe:	290a      	cmp	r1, #10
 8007500:	d102      	bne.n	8007508 <__sfputc_r+0x1c>
 8007502:	bc10      	pop	{r4}
 8007504:	f000 b94a 	b.w	800779c <__swbuf_r>
 8007508:	6813      	ldr	r3, [r2, #0]
 800750a:	1c58      	adds	r0, r3, #1
 800750c:	6010      	str	r0, [r2, #0]
 800750e:	7019      	strb	r1, [r3, #0]
 8007510:	4608      	mov	r0, r1
 8007512:	bc10      	pop	{r4}
 8007514:	4770      	bx	lr

08007516 <__sfputs_r>:
 8007516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007518:	4606      	mov	r6, r0
 800751a:	460f      	mov	r7, r1
 800751c:	4614      	mov	r4, r2
 800751e:	18d5      	adds	r5, r2, r3
 8007520:	42ac      	cmp	r4, r5
 8007522:	d101      	bne.n	8007528 <__sfputs_r+0x12>
 8007524:	2000      	movs	r0, #0
 8007526:	e007      	b.n	8007538 <__sfputs_r+0x22>
 8007528:	463a      	mov	r2, r7
 800752a:	4630      	mov	r0, r6
 800752c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007530:	f7ff ffdc 	bl	80074ec <__sfputc_r>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d1f3      	bne.n	8007520 <__sfputs_r+0xa>
 8007538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800753c <_vfiprintf_r>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	460d      	mov	r5, r1
 8007542:	4614      	mov	r4, r2
 8007544:	4698      	mov	r8, r3
 8007546:	4606      	mov	r6, r0
 8007548:	b09d      	sub	sp, #116	; 0x74
 800754a:	b118      	cbz	r0, 8007554 <_vfiprintf_r+0x18>
 800754c:	6983      	ldr	r3, [r0, #24]
 800754e:	b90b      	cbnz	r3, 8007554 <_vfiprintf_r+0x18>
 8007550:	f000 fb02 	bl	8007b58 <__sinit>
 8007554:	4b89      	ldr	r3, [pc, #548]	; (800777c <_vfiprintf_r+0x240>)
 8007556:	429d      	cmp	r5, r3
 8007558:	d11b      	bne.n	8007592 <_vfiprintf_r+0x56>
 800755a:	6875      	ldr	r5, [r6, #4]
 800755c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d405      	bmi.n	800756e <_vfiprintf_r+0x32>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	059a      	lsls	r2, r3, #22
 8007566:	d402      	bmi.n	800756e <_vfiprintf_r+0x32>
 8007568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800756a:	f000 fb93 	bl	8007c94 <__retarget_lock_acquire_recursive>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	071b      	lsls	r3, r3, #28
 8007572:	d501      	bpl.n	8007578 <_vfiprintf_r+0x3c>
 8007574:	692b      	ldr	r3, [r5, #16]
 8007576:	b9eb      	cbnz	r3, 80075b4 <_vfiprintf_r+0x78>
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f000 f960 	bl	8007840 <__swsetup_r>
 8007580:	b1c0      	cbz	r0, 80075b4 <_vfiprintf_r+0x78>
 8007582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007584:	07dc      	lsls	r4, r3, #31
 8007586:	d50e      	bpl.n	80075a6 <_vfiprintf_r+0x6a>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b01d      	add	sp, #116	; 0x74
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	4b7b      	ldr	r3, [pc, #492]	; (8007780 <_vfiprintf_r+0x244>)
 8007594:	429d      	cmp	r5, r3
 8007596:	d101      	bne.n	800759c <_vfiprintf_r+0x60>
 8007598:	68b5      	ldr	r5, [r6, #8]
 800759a:	e7df      	b.n	800755c <_vfiprintf_r+0x20>
 800759c:	4b79      	ldr	r3, [pc, #484]	; (8007784 <_vfiprintf_r+0x248>)
 800759e:	429d      	cmp	r5, r3
 80075a0:	bf08      	it	eq
 80075a2:	68f5      	ldreq	r5, [r6, #12]
 80075a4:	e7da      	b.n	800755c <_vfiprintf_r+0x20>
 80075a6:	89ab      	ldrh	r3, [r5, #12]
 80075a8:	0598      	lsls	r0, r3, #22
 80075aa:	d4ed      	bmi.n	8007588 <_vfiprintf_r+0x4c>
 80075ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ae:	f000 fb72 	bl	8007c96 <__retarget_lock_release_recursive>
 80075b2:	e7e9      	b.n	8007588 <_vfiprintf_r+0x4c>
 80075b4:	2300      	movs	r3, #0
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	2320      	movs	r3, #32
 80075ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075be:	2330      	movs	r3, #48	; 0x30
 80075c0:	f04f 0901 	mov.w	r9, #1
 80075c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007788 <_vfiprintf_r+0x24c>
 80075cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075d0:	4623      	mov	r3, r4
 80075d2:	469a      	mov	sl, r3
 80075d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d8:	b10a      	cbz	r2, 80075de <_vfiprintf_r+0xa2>
 80075da:	2a25      	cmp	r2, #37	; 0x25
 80075dc:	d1f9      	bne.n	80075d2 <_vfiprintf_r+0x96>
 80075de:	ebba 0b04 	subs.w	fp, sl, r4
 80075e2:	d00b      	beq.n	80075fc <_vfiprintf_r+0xc0>
 80075e4:	465b      	mov	r3, fp
 80075e6:	4622      	mov	r2, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ff93 	bl	8007516 <__sfputs_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	f000 80aa 	beq.w	800774a <_vfiprintf_r+0x20e>
 80075f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f8:	445a      	add	r2, fp
 80075fa:	9209      	str	r2, [sp, #36]	; 0x24
 80075fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80a2 	beq.w	800774a <_vfiprintf_r+0x20e>
 8007606:	2300      	movs	r3, #0
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
 800760c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007610:	f10a 0a01 	add.w	sl, sl, #1
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800761c:	931a      	str	r3, [sp, #104]	; 0x68
 800761e:	4654      	mov	r4, sl
 8007620:	2205      	movs	r2, #5
 8007622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007626:	4858      	ldr	r0, [pc, #352]	; (8007788 <_vfiprintf_r+0x24c>)
 8007628:	f7ff fa46 	bl	8006ab8 <memchr>
 800762c:	9a04      	ldr	r2, [sp, #16]
 800762e:	b9d8      	cbnz	r0, 8007668 <_vfiprintf_r+0x12c>
 8007630:	06d1      	lsls	r1, r2, #27
 8007632:	bf44      	itt	mi
 8007634:	2320      	movmi	r3, #32
 8007636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763a:	0713      	lsls	r3, r2, #28
 800763c:	bf44      	itt	mi
 800763e:	232b      	movmi	r3, #43	; 0x2b
 8007640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007644:	f89a 3000 	ldrb.w	r3, [sl]
 8007648:	2b2a      	cmp	r3, #42	; 0x2a
 800764a:	d015      	beq.n	8007678 <_vfiprintf_r+0x13c>
 800764c:	4654      	mov	r4, sl
 800764e:	2000      	movs	r0, #0
 8007650:	f04f 0c0a 	mov.w	ip, #10
 8007654:	9a07      	ldr	r2, [sp, #28]
 8007656:	4621      	mov	r1, r4
 8007658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765c:	3b30      	subs	r3, #48	; 0x30
 800765e:	2b09      	cmp	r3, #9
 8007660:	d94e      	bls.n	8007700 <_vfiprintf_r+0x1c4>
 8007662:	b1b0      	cbz	r0, 8007692 <_vfiprintf_r+0x156>
 8007664:	9207      	str	r2, [sp, #28]
 8007666:	e014      	b.n	8007692 <_vfiprintf_r+0x156>
 8007668:	eba0 0308 	sub.w	r3, r0, r8
 800766c:	fa09 f303 	lsl.w	r3, r9, r3
 8007670:	4313      	orrs	r3, r2
 8007672:	46a2      	mov	sl, r4
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	e7d2      	b.n	800761e <_vfiprintf_r+0xe2>
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	1d19      	adds	r1, r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	9103      	str	r1, [sp, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfbb      	ittet	lt
 8007684:	425b      	neglt	r3, r3
 8007686:	f042 0202 	orrlt.w	r2, r2, #2
 800768a:	9307      	strge	r3, [sp, #28]
 800768c:	9307      	strlt	r3, [sp, #28]
 800768e:	bfb8      	it	lt
 8007690:	9204      	strlt	r2, [sp, #16]
 8007692:	7823      	ldrb	r3, [r4, #0]
 8007694:	2b2e      	cmp	r3, #46	; 0x2e
 8007696:	d10c      	bne.n	80076b2 <_vfiprintf_r+0x176>
 8007698:	7863      	ldrb	r3, [r4, #1]
 800769a:	2b2a      	cmp	r3, #42	; 0x2a
 800769c:	d135      	bne.n	800770a <_vfiprintf_r+0x1ce>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	3402      	adds	r4, #2
 80076a2:	1d1a      	adds	r2, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	9203      	str	r2, [sp, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfb8      	it	lt
 80076ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800778c <_vfiprintf_r+0x250>
 80076b6:	2203      	movs	r2, #3
 80076b8:	4650      	mov	r0, sl
 80076ba:	7821      	ldrb	r1, [r4, #0]
 80076bc:	f7ff f9fc 	bl	8006ab8 <memchr>
 80076c0:	b140      	cbz	r0, 80076d4 <_vfiprintf_r+0x198>
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	eba0 000a 	sub.w	r0, r0, sl
 80076c8:	fa03 f000 	lsl.w	r0, r3, r0
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	3401      	adds	r4, #1
 80076d0:	4303      	orrs	r3, r0
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d8:	2206      	movs	r2, #6
 80076da:	482d      	ldr	r0, [pc, #180]	; (8007790 <_vfiprintf_r+0x254>)
 80076dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076e0:	f7ff f9ea 	bl	8006ab8 <memchr>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d03f      	beq.n	8007768 <_vfiprintf_r+0x22c>
 80076e8:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <_vfiprintf_r+0x258>)
 80076ea:	bb1b      	cbnz	r3, 8007734 <_vfiprintf_r+0x1f8>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	3307      	adds	r3, #7
 80076f0:	f023 0307 	bic.w	r3, r3, #7
 80076f4:	3308      	adds	r3, #8
 80076f6:	9303      	str	r3, [sp, #12]
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fa:	443b      	add	r3, r7
 80076fc:	9309      	str	r3, [sp, #36]	; 0x24
 80076fe:	e767      	b.n	80075d0 <_vfiprintf_r+0x94>
 8007700:	460c      	mov	r4, r1
 8007702:	2001      	movs	r0, #1
 8007704:	fb0c 3202 	mla	r2, ip, r2, r3
 8007708:	e7a5      	b.n	8007656 <_vfiprintf_r+0x11a>
 800770a:	2300      	movs	r3, #0
 800770c:	f04f 0c0a 	mov.w	ip, #10
 8007710:	4619      	mov	r1, r3
 8007712:	3401      	adds	r4, #1
 8007714:	9305      	str	r3, [sp, #20]
 8007716:	4620      	mov	r0, r4
 8007718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771c:	3a30      	subs	r2, #48	; 0x30
 800771e:	2a09      	cmp	r2, #9
 8007720:	d903      	bls.n	800772a <_vfiprintf_r+0x1ee>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0c5      	beq.n	80076b2 <_vfiprintf_r+0x176>
 8007726:	9105      	str	r1, [sp, #20]
 8007728:	e7c3      	b.n	80076b2 <_vfiprintf_r+0x176>
 800772a:	4604      	mov	r4, r0
 800772c:	2301      	movs	r3, #1
 800772e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007732:	e7f0      	b.n	8007716 <_vfiprintf_r+0x1da>
 8007734:	ab03      	add	r3, sp, #12
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	462a      	mov	r2, r5
 800773a:	4630      	mov	r0, r6
 800773c:	4b16      	ldr	r3, [pc, #88]	; (8007798 <_vfiprintf_r+0x25c>)
 800773e:	a904      	add	r1, sp, #16
 8007740:	f7fd fea8 	bl	8005494 <_printf_float>
 8007744:	4607      	mov	r7, r0
 8007746:	1c78      	adds	r0, r7, #1
 8007748:	d1d6      	bne.n	80076f8 <_vfiprintf_r+0x1bc>
 800774a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774c:	07d9      	lsls	r1, r3, #31
 800774e:	d405      	bmi.n	800775c <_vfiprintf_r+0x220>
 8007750:	89ab      	ldrh	r3, [r5, #12]
 8007752:	059a      	lsls	r2, r3, #22
 8007754:	d402      	bmi.n	800775c <_vfiprintf_r+0x220>
 8007756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007758:	f000 fa9d 	bl	8007c96 <__retarget_lock_release_recursive>
 800775c:	89ab      	ldrh	r3, [r5, #12]
 800775e:	065b      	lsls	r3, r3, #25
 8007760:	f53f af12 	bmi.w	8007588 <_vfiprintf_r+0x4c>
 8007764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007766:	e711      	b.n	800758c <_vfiprintf_r+0x50>
 8007768:	ab03      	add	r3, sp, #12
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	462a      	mov	r2, r5
 800776e:	4630      	mov	r0, r6
 8007770:	4b09      	ldr	r3, [pc, #36]	; (8007798 <_vfiprintf_r+0x25c>)
 8007772:	a904      	add	r1, sp, #16
 8007774:	f7fe f92a 	bl	80059cc <_printf_i>
 8007778:	e7e4      	b.n	8007744 <_vfiprintf_r+0x208>
 800777a:	bf00      	nop
 800777c:	080086b8 	.word	0x080086b8
 8007780:	080086d8 	.word	0x080086d8
 8007784:	08008698 	.word	0x08008698
 8007788:	08008684 	.word	0x08008684
 800778c:	0800868a 	.word	0x0800868a
 8007790:	0800868e 	.word	0x0800868e
 8007794:	08005495 	.word	0x08005495
 8007798:	08007517 	.word	0x08007517

0800779c <__swbuf_r>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	460e      	mov	r6, r1
 80077a0:	4614      	mov	r4, r2
 80077a2:	4605      	mov	r5, r0
 80077a4:	b118      	cbz	r0, 80077ae <__swbuf_r+0x12>
 80077a6:	6983      	ldr	r3, [r0, #24]
 80077a8:	b90b      	cbnz	r3, 80077ae <__swbuf_r+0x12>
 80077aa:	f000 f9d5 	bl	8007b58 <__sinit>
 80077ae:	4b21      	ldr	r3, [pc, #132]	; (8007834 <__swbuf_r+0x98>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d12b      	bne.n	800780c <__swbuf_r+0x70>
 80077b4:	686c      	ldr	r4, [r5, #4]
 80077b6:	69a3      	ldr	r3, [r4, #24]
 80077b8:	60a3      	str	r3, [r4, #8]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	071a      	lsls	r2, r3, #28
 80077be:	d52f      	bpl.n	8007820 <__swbuf_r+0x84>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	b36b      	cbz	r3, 8007820 <__swbuf_r+0x84>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	b2f6      	uxtb	r6, r6
 80077ca:	1ac0      	subs	r0, r0, r3
 80077cc:	6963      	ldr	r3, [r4, #20]
 80077ce:	4637      	mov	r7, r6
 80077d0:	4283      	cmp	r3, r0
 80077d2:	dc04      	bgt.n	80077de <__swbuf_r+0x42>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 f92a 	bl	8007a30 <_fflush_r>
 80077dc:	bb30      	cbnz	r0, 800782c <__swbuf_r+0x90>
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	3001      	adds	r0, #1
 80077e2:	3b01      	subs	r3, #1
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	6022      	str	r2, [r4, #0]
 80077ec:	701e      	strb	r6, [r3, #0]
 80077ee:	6963      	ldr	r3, [r4, #20]
 80077f0:	4283      	cmp	r3, r0
 80077f2:	d004      	beq.n	80077fe <__swbuf_r+0x62>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	07db      	lsls	r3, r3, #31
 80077f8:	d506      	bpl.n	8007808 <__swbuf_r+0x6c>
 80077fa:	2e0a      	cmp	r6, #10
 80077fc:	d104      	bne.n	8007808 <__swbuf_r+0x6c>
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f000 f915 	bl	8007a30 <_fflush_r>
 8007806:	b988      	cbnz	r0, 800782c <__swbuf_r+0x90>
 8007808:	4638      	mov	r0, r7
 800780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <__swbuf_r+0x9c>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <__swbuf_r+0x7a>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7cf      	b.n	80077b6 <__swbuf_r+0x1a>
 8007816:	4b09      	ldr	r3, [pc, #36]	; (800783c <__swbuf_r+0xa0>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7ca      	b.n	80077b6 <__swbuf_r+0x1a>
 8007820:	4621      	mov	r1, r4
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f80c 	bl	8007840 <__swsetup_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	d0cb      	beq.n	80077c4 <__swbuf_r+0x28>
 800782c:	f04f 37ff 	mov.w	r7, #4294967295
 8007830:	e7ea      	b.n	8007808 <__swbuf_r+0x6c>
 8007832:	bf00      	nop
 8007834:	080086b8 	.word	0x080086b8
 8007838:	080086d8 	.word	0x080086d8
 800783c:	08008698 	.word	0x08008698

08007840 <__swsetup_r>:
 8007840:	4b32      	ldr	r3, [pc, #200]	; (800790c <__swsetup_r+0xcc>)
 8007842:	b570      	push	{r4, r5, r6, lr}
 8007844:	681d      	ldr	r5, [r3, #0]
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
 800784a:	b125      	cbz	r5, 8007856 <__swsetup_r+0x16>
 800784c:	69ab      	ldr	r3, [r5, #24]
 800784e:	b913      	cbnz	r3, 8007856 <__swsetup_r+0x16>
 8007850:	4628      	mov	r0, r5
 8007852:	f000 f981 	bl	8007b58 <__sinit>
 8007856:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <__swsetup_r+0xd0>)
 8007858:	429c      	cmp	r4, r3
 800785a:	d10f      	bne.n	800787c <__swsetup_r+0x3c>
 800785c:	686c      	ldr	r4, [r5, #4]
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007864:	0719      	lsls	r1, r3, #28
 8007866:	d42c      	bmi.n	80078c2 <__swsetup_r+0x82>
 8007868:	06dd      	lsls	r5, r3, #27
 800786a:	d411      	bmi.n	8007890 <__swsetup_r+0x50>
 800786c:	2309      	movs	r3, #9
 800786e:	6033      	str	r3, [r6, #0]
 8007870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	e03e      	b.n	80078fa <__swsetup_r+0xba>
 800787c:	4b25      	ldr	r3, [pc, #148]	; (8007914 <__swsetup_r+0xd4>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <__swsetup_r+0x46>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7eb      	b.n	800785e <__swsetup_r+0x1e>
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <__swsetup_r+0xd8>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7e6      	b.n	800785e <__swsetup_r+0x1e>
 8007890:	0758      	lsls	r0, r3, #29
 8007892:	d512      	bpl.n	80078ba <__swsetup_r+0x7a>
 8007894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007896:	b141      	cbz	r1, 80078aa <__swsetup_r+0x6a>
 8007898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800789c:	4299      	cmp	r1, r3
 800789e:	d002      	beq.n	80078a6 <__swsetup_r+0x66>
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7fd fc7d 	bl	80051a0 <_free_r>
 80078a6:	2300      	movs	r3, #0
 80078a8:	6363      	str	r3, [r4, #52]	; 0x34
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	2300      	movs	r3, #0
 80078b4:	6063      	str	r3, [r4, #4]
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f043 0308 	orr.w	r3, r3, #8
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	b94b      	cbnz	r3, 80078da <__swsetup_r+0x9a>
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d0:	d003      	beq.n	80078da <__swsetup_r+0x9a>
 80078d2:	4621      	mov	r1, r4
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 fa05 	bl	8007ce4 <__smakebuf_r>
 80078da:	89a0      	ldrh	r0, [r4, #12]
 80078dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078e0:	f010 0301 	ands.w	r3, r0, #1
 80078e4:	d00a      	beq.n	80078fc <__swsetup_r+0xbc>
 80078e6:	2300      	movs	r3, #0
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	6963      	ldr	r3, [r4, #20]
 80078ec:	425b      	negs	r3, r3
 80078ee:	61a3      	str	r3, [r4, #24]
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	b943      	cbnz	r3, 8007906 <__swsetup_r+0xc6>
 80078f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078f8:	d1ba      	bne.n	8007870 <__swsetup_r+0x30>
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	0781      	lsls	r1, r0, #30
 80078fe:	bf58      	it	pl
 8007900:	6963      	ldrpl	r3, [r4, #20]
 8007902:	60a3      	str	r3, [r4, #8]
 8007904:	e7f4      	b.n	80078f0 <__swsetup_r+0xb0>
 8007906:	2000      	movs	r0, #0
 8007908:	e7f7      	b.n	80078fa <__swsetup_r+0xba>
 800790a:	bf00      	nop
 800790c:	2000046c 	.word	0x2000046c
 8007910:	080086b8 	.word	0x080086b8
 8007914:	080086d8 	.word	0x080086d8
 8007918:	08008698 	.word	0x08008698

0800791c <abort>:
 800791c:	2006      	movs	r0, #6
 800791e:	b508      	push	{r3, lr}
 8007920:	f000 faa4 	bl	8007e6c <raise>
 8007924:	2001      	movs	r0, #1
 8007926:	f7f9 fdcd 	bl	80014c4 <_exit>
	...

0800792c <__sflush_r>:
 800792c:	898a      	ldrh	r2, [r1, #12]
 800792e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007930:	4605      	mov	r5, r0
 8007932:	0710      	lsls	r0, r2, #28
 8007934:	460c      	mov	r4, r1
 8007936:	d457      	bmi.n	80079e8 <__sflush_r+0xbc>
 8007938:	684b      	ldr	r3, [r1, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	dc04      	bgt.n	8007948 <__sflush_r+0x1c>
 800793e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	dc01      	bgt.n	8007948 <__sflush_r+0x1c>
 8007944:	2000      	movs	r0, #0
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800794a:	2e00      	cmp	r6, #0
 800794c:	d0fa      	beq.n	8007944 <__sflush_r+0x18>
 800794e:	2300      	movs	r3, #0
 8007950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007954:	682f      	ldr	r7, [r5, #0]
 8007956:	602b      	str	r3, [r5, #0]
 8007958:	d032      	beq.n	80079c0 <__sflush_r+0x94>
 800795a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	075a      	lsls	r2, r3, #29
 8007960:	d505      	bpl.n	800796e <__sflush_r+0x42>
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	1ac0      	subs	r0, r0, r3
 8007966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007968:	b10b      	cbz	r3, 800796e <__sflush_r+0x42>
 800796a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800796c:	1ac0      	subs	r0, r0, r3
 800796e:	2300      	movs	r3, #0
 8007970:	4602      	mov	r2, r0
 8007972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007974:	4628      	mov	r0, r5
 8007976:	6a21      	ldr	r1, [r4, #32]
 8007978:	47b0      	blx	r6
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	d106      	bne.n	800798e <__sflush_r+0x62>
 8007980:	6829      	ldr	r1, [r5, #0]
 8007982:	291d      	cmp	r1, #29
 8007984:	d82c      	bhi.n	80079e0 <__sflush_r+0xb4>
 8007986:	4a29      	ldr	r2, [pc, #164]	; (8007a2c <__sflush_r+0x100>)
 8007988:	40ca      	lsrs	r2, r1
 800798a:	07d6      	lsls	r6, r2, #31
 800798c:	d528      	bpl.n	80079e0 <__sflush_r+0xb4>
 800798e:	2200      	movs	r2, #0
 8007990:	6062      	str	r2, [r4, #4]
 8007992:	6922      	ldr	r2, [r4, #16]
 8007994:	04d9      	lsls	r1, r3, #19
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	d504      	bpl.n	80079a4 <__sflush_r+0x78>
 800799a:	1c42      	adds	r2, r0, #1
 800799c:	d101      	bne.n	80079a2 <__sflush_r+0x76>
 800799e:	682b      	ldr	r3, [r5, #0]
 80079a0:	b903      	cbnz	r3, 80079a4 <__sflush_r+0x78>
 80079a2:	6560      	str	r0, [r4, #84]	; 0x54
 80079a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a6:	602f      	str	r7, [r5, #0]
 80079a8:	2900      	cmp	r1, #0
 80079aa:	d0cb      	beq.n	8007944 <__sflush_r+0x18>
 80079ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b0:	4299      	cmp	r1, r3
 80079b2:	d002      	beq.n	80079ba <__sflush_r+0x8e>
 80079b4:	4628      	mov	r0, r5
 80079b6:	f7fd fbf3 	bl	80051a0 <_free_r>
 80079ba:	2000      	movs	r0, #0
 80079bc:	6360      	str	r0, [r4, #52]	; 0x34
 80079be:	e7c2      	b.n	8007946 <__sflush_r+0x1a>
 80079c0:	6a21      	ldr	r1, [r4, #32]
 80079c2:	2301      	movs	r3, #1
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b0      	blx	r6
 80079c8:	1c41      	adds	r1, r0, #1
 80079ca:	d1c7      	bne.n	800795c <__sflush_r+0x30>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c4      	beq.n	800795c <__sflush_r+0x30>
 80079d2:	2b1d      	cmp	r3, #29
 80079d4:	d001      	beq.n	80079da <__sflush_r+0xae>
 80079d6:	2b16      	cmp	r3, #22
 80079d8:	d101      	bne.n	80079de <__sflush_r+0xb2>
 80079da:	602f      	str	r7, [r5, #0]
 80079dc:	e7b2      	b.n	8007944 <__sflush_r+0x18>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	e7ae      	b.n	8007946 <__sflush_r+0x1a>
 80079e8:	690f      	ldr	r7, [r1, #16]
 80079ea:	2f00      	cmp	r7, #0
 80079ec:	d0aa      	beq.n	8007944 <__sflush_r+0x18>
 80079ee:	0793      	lsls	r3, r2, #30
 80079f0:	bf18      	it	ne
 80079f2:	2300      	movne	r3, #0
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	bf08      	it	eq
 80079f8:	694b      	ldreq	r3, [r1, #20]
 80079fa:	1bf6      	subs	r6, r6, r7
 80079fc:	600f      	str	r7, [r1, #0]
 80079fe:	608b      	str	r3, [r1, #8]
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	dd9f      	ble.n	8007944 <__sflush_r+0x18>
 8007a04:	4633      	mov	r3, r6
 8007a06:	463a      	mov	r2, r7
 8007a08:	4628      	mov	r0, r5
 8007a0a:	6a21      	ldr	r1, [r4, #32]
 8007a0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a10:	47e0      	blx	ip
 8007a12:	2800      	cmp	r0, #0
 8007a14:	dc06      	bgt.n	8007a24 <__sflush_r+0xf8>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a20:	81a3      	strh	r3, [r4, #12]
 8007a22:	e790      	b.n	8007946 <__sflush_r+0x1a>
 8007a24:	4407      	add	r7, r0
 8007a26:	1a36      	subs	r6, r6, r0
 8007a28:	e7ea      	b.n	8007a00 <__sflush_r+0xd4>
 8007a2a:	bf00      	nop
 8007a2c:	20400001 	.word	0x20400001

08007a30 <_fflush_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	690b      	ldr	r3, [r1, #16]
 8007a34:	4605      	mov	r5, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	b913      	cbnz	r3, 8007a40 <_fflush_r+0x10>
 8007a3a:	2500      	movs	r5, #0
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	b118      	cbz	r0, 8007a4a <_fflush_r+0x1a>
 8007a42:	6983      	ldr	r3, [r0, #24]
 8007a44:	b90b      	cbnz	r3, 8007a4a <_fflush_r+0x1a>
 8007a46:	f000 f887 	bl	8007b58 <__sinit>
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <_fflush_r+0x6c>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d11b      	bne.n	8007a88 <_fflush_r+0x58>
 8007a50:	686c      	ldr	r4, [r5, #4]
 8007a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0ef      	beq.n	8007a3a <_fflush_r+0xa>
 8007a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a5c:	07d0      	lsls	r0, r2, #31
 8007a5e:	d404      	bmi.n	8007a6a <_fflush_r+0x3a>
 8007a60:	0599      	lsls	r1, r3, #22
 8007a62:	d402      	bmi.n	8007a6a <_fflush_r+0x3a>
 8007a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a66:	f000 f915 	bl	8007c94 <__retarget_lock_acquire_recursive>
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	f7ff ff5d 	bl	800792c <__sflush_r>
 8007a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a74:	4605      	mov	r5, r0
 8007a76:	07da      	lsls	r2, r3, #31
 8007a78:	d4e0      	bmi.n	8007a3c <_fflush_r+0xc>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	059b      	lsls	r3, r3, #22
 8007a7e:	d4dd      	bmi.n	8007a3c <_fflush_r+0xc>
 8007a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a82:	f000 f908 	bl	8007c96 <__retarget_lock_release_recursive>
 8007a86:	e7d9      	b.n	8007a3c <_fflush_r+0xc>
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <_fflush_r+0x70>)
 8007a8a:	429c      	cmp	r4, r3
 8007a8c:	d101      	bne.n	8007a92 <_fflush_r+0x62>
 8007a8e:	68ac      	ldr	r4, [r5, #8]
 8007a90:	e7df      	b.n	8007a52 <_fflush_r+0x22>
 8007a92:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <_fflush_r+0x74>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	bf08      	it	eq
 8007a98:	68ec      	ldreq	r4, [r5, #12]
 8007a9a:	e7da      	b.n	8007a52 <_fflush_r+0x22>
 8007a9c:	080086b8 	.word	0x080086b8
 8007aa0:	080086d8 	.word	0x080086d8
 8007aa4:	08008698 	.word	0x08008698

08007aa8 <std>:
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	4604      	mov	r4, r0
 8007aae:	e9c0 3300 	strd	r3, r3, [r0]
 8007ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ab6:	6083      	str	r3, [r0, #8]
 8007ab8:	8181      	strh	r1, [r0, #12]
 8007aba:	6643      	str	r3, [r0, #100]	; 0x64
 8007abc:	81c2      	strh	r2, [r0, #14]
 8007abe:	6183      	str	r3, [r0, #24]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	305c      	adds	r0, #92	; 0x5c
 8007ac6:	f7fd fb63 	bl	8005190 <memset>
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <std+0x38>)
 8007acc:	6224      	str	r4, [r4, #32]
 8007ace:	6263      	str	r3, [r4, #36]	; 0x24
 8007ad0:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <std+0x3c>)
 8007ad2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ad4:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <std+0x40>)
 8007ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <std+0x44>)
 8007ada:	6323      	str	r3, [r4, #48]	; 0x30
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	bf00      	nop
 8007ae0:	08007ea5 	.word	0x08007ea5
 8007ae4:	08007ec7 	.word	0x08007ec7
 8007ae8:	08007eff 	.word	0x08007eff
 8007aec:	08007f23 	.word	0x08007f23

08007af0 <_cleanup_r>:
 8007af0:	4901      	ldr	r1, [pc, #4]	; (8007af8 <_cleanup_r+0x8>)
 8007af2:	f000 b8af 	b.w	8007c54 <_fwalk_reent>
 8007af6:	bf00      	nop
 8007af8:	08007a31 	.word	0x08007a31

08007afc <__sfmoreglue>:
 8007afc:	2268      	movs	r2, #104	; 0x68
 8007afe:	b570      	push	{r4, r5, r6, lr}
 8007b00:	1e4d      	subs	r5, r1, #1
 8007b02:	4355      	muls	r5, r2
 8007b04:	460e      	mov	r6, r1
 8007b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b0a:	f7fd fbb1 	bl	8005270 <_malloc_r>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	b140      	cbz	r0, 8007b24 <__sfmoreglue+0x28>
 8007b12:	2100      	movs	r1, #0
 8007b14:	e9c0 1600 	strd	r1, r6, [r0]
 8007b18:	300c      	adds	r0, #12
 8007b1a:	60a0      	str	r0, [r4, #8]
 8007b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b20:	f7fd fb36 	bl	8005190 <memset>
 8007b24:	4620      	mov	r0, r4
 8007b26:	bd70      	pop	{r4, r5, r6, pc}

08007b28 <__sfp_lock_acquire>:
 8007b28:	4801      	ldr	r0, [pc, #4]	; (8007b30 <__sfp_lock_acquire+0x8>)
 8007b2a:	f000 b8b3 	b.w	8007c94 <__retarget_lock_acquire_recursive>
 8007b2e:	bf00      	nop
 8007b30:	200026e5 	.word	0x200026e5

08007b34 <__sfp_lock_release>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__sfp_lock_release+0x8>)
 8007b36:	f000 b8ae 	b.w	8007c96 <__retarget_lock_release_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	200026e5 	.word	0x200026e5

08007b40 <__sinit_lock_acquire>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__sinit_lock_acquire+0x8>)
 8007b42:	f000 b8a7 	b.w	8007c94 <__retarget_lock_acquire_recursive>
 8007b46:	bf00      	nop
 8007b48:	200026e6 	.word	0x200026e6

08007b4c <__sinit_lock_release>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__sinit_lock_release+0x8>)
 8007b4e:	f000 b8a2 	b.w	8007c96 <__retarget_lock_release_recursive>
 8007b52:	bf00      	nop
 8007b54:	200026e6 	.word	0x200026e6

08007b58 <__sinit>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	f7ff fff0 	bl	8007b40 <__sinit_lock_acquire>
 8007b60:	69a3      	ldr	r3, [r4, #24]
 8007b62:	b11b      	cbz	r3, 8007b6c <__sinit+0x14>
 8007b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b68:	f7ff bff0 	b.w	8007b4c <__sinit_lock_release>
 8007b6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b70:	6523      	str	r3, [r4, #80]	; 0x50
 8007b72:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <__sinit+0x68>)
 8007b74:	4a13      	ldr	r2, [pc, #76]	; (8007bc4 <__sinit+0x6c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	bf08      	it	eq
 8007b7e:	2301      	moveq	r3, #1
 8007b80:	4620      	mov	r0, r4
 8007b82:	bf08      	it	eq
 8007b84:	61a3      	streq	r3, [r4, #24]
 8007b86:	f000 f81f 	bl	8007bc8 <__sfp>
 8007b8a:	6060      	str	r0, [r4, #4]
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 f81b 	bl	8007bc8 <__sfp>
 8007b92:	60a0      	str	r0, [r4, #8]
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 f817 	bl	8007bc8 <__sfp>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2104      	movs	r1, #4
 8007b9e:	60e0      	str	r0, [r4, #12]
 8007ba0:	6860      	ldr	r0, [r4, #4]
 8007ba2:	f7ff ff81 	bl	8007aa8 <std>
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	2109      	movs	r1, #9
 8007baa:	68a0      	ldr	r0, [r4, #8]
 8007bac:	f7ff ff7c 	bl	8007aa8 <std>
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	2112      	movs	r1, #18
 8007bb4:	68e0      	ldr	r0, [r4, #12]
 8007bb6:	f7ff ff77 	bl	8007aa8 <std>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	61a3      	str	r3, [r4, #24]
 8007bbe:	e7d1      	b.n	8007b64 <__sinit+0xc>
 8007bc0:	08008424 	.word	0x08008424
 8007bc4:	08007af1 	.word	0x08007af1

08007bc8 <__sfp>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	4607      	mov	r7, r0
 8007bcc:	f7ff ffac 	bl	8007b28 <__sfp_lock_acquire>
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <__sfp+0x84>)
 8007bd2:	681e      	ldr	r6, [r3, #0]
 8007bd4:	69b3      	ldr	r3, [r6, #24]
 8007bd6:	b913      	cbnz	r3, 8007bde <__sfp+0x16>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7ff ffbd 	bl	8007b58 <__sinit>
 8007bde:	3648      	adds	r6, #72	; 0x48
 8007be0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	d503      	bpl.n	8007bf0 <__sfp+0x28>
 8007be8:	6833      	ldr	r3, [r6, #0]
 8007bea:	b30b      	cbz	r3, 8007c30 <__sfp+0x68>
 8007bec:	6836      	ldr	r6, [r6, #0]
 8007bee:	e7f7      	b.n	8007be0 <__sfp+0x18>
 8007bf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bf4:	b9d5      	cbnz	r5, 8007c2c <__sfp+0x64>
 8007bf6:	4b16      	ldr	r3, [pc, #88]	; (8007c50 <__sfp+0x88>)
 8007bf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bfc:	60e3      	str	r3, [r4, #12]
 8007bfe:	6665      	str	r5, [r4, #100]	; 0x64
 8007c00:	f000 f847 	bl	8007c92 <__retarget_lock_init_recursive>
 8007c04:	f7ff ff96 	bl	8007b34 <__sfp_lock_release>
 8007c08:	2208      	movs	r2, #8
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c14:	6025      	str	r5, [r4, #0]
 8007c16:	61a5      	str	r5, [r4, #24]
 8007c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c1c:	f7fd fab8 	bl	8005190 <memset>
 8007c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c28:	4620      	mov	r0, r4
 8007c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2c:	3468      	adds	r4, #104	; 0x68
 8007c2e:	e7d9      	b.n	8007be4 <__sfp+0x1c>
 8007c30:	2104      	movs	r1, #4
 8007c32:	4638      	mov	r0, r7
 8007c34:	f7ff ff62 	bl	8007afc <__sfmoreglue>
 8007c38:	4604      	mov	r4, r0
 8007c3a:	6030      	str	r0, [r6, #0]
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d1d5      	bne.n	8007bec <__sfp+0x24>
 8007c40:	f7ff ff78 	bl	8007b34 <__sfp_lock_release>
 8007c44:	230c      	movs	r3, #12
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	e7ee      	b.n	8007c28 <__sfp+0x60>
 8007c4a:	bf00      	nop
 8007c4c:	08008424 	.word	0x08008424
 8007c50:	ffff0001 	.word	0xffff0001

08007c54 <_fwalk_reent>:
 8007c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c58:	4606      	mov	r6, r0
 8007c5a:	4688      	mov	r8, r1
 8007c5c:	2700      	movs	r7, #0
 8007c5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c66:	f1b9 0901 	subs.w	r9, r9, #1
 8007c6a:	d505      	bpl.n	8007c78 <_fwalk_reent+0x24>
 8007c6c:	6824      	ldr	r4, [r4, #0]
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	d1f7      	bne.n	8007c62 <_fwalk_reent+0xe>
 8007c72:	4638      	mov	r0, r7
 8007c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c78:	89ab      	ldrh	r3, [r5, #12]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d907      	bls.n	8007c8e <_fwalk_reent+0x3a>
 8007c7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c82:	3301      	adds	r3, #1
 8007c84:	d003      	beq.n	8007c8e <_fwalk_reent+0x3a>
 8007c86:	4629      	mov	r1, r5
 8007c88:	4630      	mov	r0, r6
 8007c8a:	47c0      	blx	r8
 8007c8c:	4307      	orrs	r7, r0
 8007c8e:	3568      	adds	r5, #104	; 0x68
 8007c90:	e7e9      	b.n	8007c66 <_fwalk_reent+0x12>

08007c92 <__retarget_lock_init_recursive>:
 8007c92:	4770      	bx	lr

08007c94 <__retarget_lock_acquire_recursive>:
 8007c94:	4770      	bx	lr

08007c96 <__retarget_lock_release_recursive>:
 8007c96:	4770      	bx	lr

08007c98 <__swhatbuf_r>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	460e      	mov	r6, r1
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	2900      	cmp	r1, #0
 8007ca4:	461d      	mov	r5, r3
 8007ca6:	b096      	sub	sp, #88	; 0x58
 8007ca8:	da08      	bge.n	8007cbc <__swhatbuf_r+0x24>
 8007caa:	2200      	movs	r2, #0
 8007cac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	061a      	lsls	r2, r3, #24
 8007cb4:	d410      	bmi.n	8007cd8 <__swhatbuf_r+0x40>
 8007cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cba:	e00e      	b.n	8007cda <__swhatbuf_r+0x42>
 8007cbc:	466a      	mov	r2, sp
 8007cbe:	f000 f963 	bl	8007f88 <_fstat_r>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	dbf1      	blt.n	8007caa <__swhatbuf_r+0x12>
 8007cc6:	9a01      	ldr	r2, [sp, #4]
 8007cc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cd0:	425a      	negs	r2, r3
 8007cd2:	415a      	adcs	r2, r3
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	e7ee      	b.n	8007cb6 <__swhatbuf_r+0x1e>
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	2000      	movs	r0, #0
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	b016      	add	sp, #88	; 0x58
 8007ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ce4 <__smakebuf_r>:
 8007ce4:	898b      	ldrh	r3, [r1, #12]
 8007ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ce8:	079d      	lsls	r5, r3, #30
 8007cea:	4606      	mov	r6, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	d507      	bpl.n	8007d00 <__smakebuf_r+0x1c>
 8007cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	b002      	add	sp, #8
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	466a      	mov	r2, sp
 8007d02:	ab01      	add	r3, sp, #4
 8007d04:	f7ff ffc8 	bl	8007c98 <__swhatbuf_r>
 8007d08:	9900      	ldr	r1, [sp, #0]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7fd faaf 	bl	8005270 <_malloc_r>
 8007d12:	b948      	cbnz	r0, 8007d28 <__smakebuf_r+0x44>
 8007d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d18:	059a      	lsls	r2, r3, #22
 8007d1a:	d4ef      	bmi.n	8007cfc <__smakebuf_r+0x18>
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	f043 0302 	orr.w	r3, r3, #2
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	e7e3      	b.n	8007cf0 <__smakebuf_r+0xc>
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <__smakebuf_r+0x7c>)
 8007d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	6020      	str	r0, [r4, #0]
 8007d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	9b00      	ldr	r3, [sp, #0]
 8007d38:	6120      	str	r0, [r4, #16]
 8007d3a:	6163      	str	r3, [r4, #20]
 8007d3c:	9b01      	ldr	r3, [sp, #4]
 8007d3e:	b15b      	cbz	r3, 8007d58 <__smakebuf_r+0x74>
 8007d40:	4630      	mov	r0, r6
 8007d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d46:	f000 f931 	bl	8007fac <_isatty_r>
 8007d4a:	b128      	cbz	r0, 8007d58 <__smakebuf_r+0x74>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	89a0      	ldrh	r0, [r4, #12]
 8007d5a:	4305      	orrs	r5, r0
 8007d5c:	81a5      	strh	r5, [r4, #12]
 8007d5e:	e7cd      	b.n	8007cfc <__smakebuf_r+0x18>
 8007d60:	08007af1 	.word	0x08007af1

08007d64 <__ascii_mbtowc>:
 8007d64:	b082      	sub	sp, #8
 8007d66:	b901      	cbnz	r1, 8007d6a <__ascii_mbtowc+0x6>
 8007d68:	a901      	add	r1, sp, #4
 8007d6a:	b142      	cbz	r2, 8007d7e <__ascii_mbtowc+0x1a>
 8007d6c:	b14b      	cbz	r3, 8007d82 <__ascii_mbtowc+0x1e>
 8007d6e:	7813      	ldrb	r3, [r2, #0]
 8007d70:	600b      	str	r3, [r1, #0]
 8007d72:	7812      	ldrb	r2, [r2, #0]
 8007d74:	1e10      	subs	r0, r2, #0
 8007d76:	bf18      	it	ne
 8007d78:	2001      	movne	r0, #1
 8007d7a:	b002      	add	sp, #8
 8007d7c:	4770      	bx	lr
 8007d7e:	4610      	mov	r0, r2
 8007d80:	e7fb      	b.n	8007d7a <__ascii_mbtowc+0x16>
 8007d82:	f06f 0001 	mvn.w	r0, #1
 8007d86:	e7f8      	b.n	8007d7a <__ascii_mbtowc+0x16>

08007d88 <memmove>:
 8007d88:	4288      	cmp	r0, r1
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	eb01 0402 	add.w	r4, r1, r2
 8007d90:	d902      	bls.n	8007d98 <memmove+0x10>
 8007d92:	4284      	cmp	r4, r0
 8007d94:	4623      	mov	r3, r4
 8007d96:	d807      	bhi.n	8007da8 <memmove+0x20>
 8007d98:	1e43      	subs	r3, r0, #1
 8007d9a:	42a1      	cmp	r1, r4
 8007d9c:	d008      	beq.n	8007db0 <memmove+0x28>
 8007d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007da6:	e7f8      	b.n	8007d9a <memmove+0x12>
 8007da8:	4601      	mov	r1, r0
 8007daa:	4402      	add	r2, r0
 8007dac:	428a      	cmp	r2, r1
 8007dae:	d100      	bne.n	8007db2 <memmove+0x2a>
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dba:	e7f7      	b.n	8007dac <memmove+0x24>

08007dbc <_realloc_r>:
 8007dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc0:	4680      	mov	r8, r0
 8007dc2:	4614      	mov	r4, r2
 8007dc4:	460e      	mov	r6, r1
 8007dc6:	b921      	cbnz	r1, 8007dd2 <_realloc_r+0x16>
 8007dc8:	4611      	mov	r1, r2
 8007dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dce:	f7fd ba4f 	b.w	8005270 <_malloc_r>
 8007dd2:	b92a      	cbnz	r2, 8007de0 <_realloc_r+0x24>
 8007dd4:	f7fd f9e4 	bl	80051a0 <_free_r>
 8007dd8:	4625      	mov	r5, r4
 8007dda:	4628      	mov	r0, r5
 8007ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de0:	f000 f906 	bl	8007ff0 <_malloc_usable_size_r>
 8007de4:	4284      	cmp	r4, r0
 8007de6:	4607      	mov	r7, r0
 8007de8:	d802      	bhi.n	8007df0 <_realloc_r+0x34>
 8007dea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dee:	d812      	bhi.n	8007e16 <_realloc_r+0x5a>
 8007df0:	4621      	mov	r1, r4
 8007df2:	4640      	mov	r0, r8
 8007df4:	f7fd fa3c 	bl	8005270 <_malloc_r>
 8007df8:	4605      	mov	r5, r0
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d0ed      	beq.n	8007dda <_realloc_r+0x1e>
 8007dfe:	42bc      	cmp	r4, r7
 8007e00:	4622      	mov	r2, r4
 8007e02:	4631      	mov	r1, r6
 8007e04:	bf28      	it	cs
 8007e06:	463a      	movcs	r2, r7
 8007e08:	f7fe fe64 	bl	8006ad4 <memcpy>
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4640      	mov	r0, r8
 8007e10:	f7fd f9c6 	bl	80051a0 <_free_r>
 8007e14:	e7e1      	b.n	8007dda <_realloc_r+0x1e>
 8007e16:	4635      	mov	r5, r6
 8007e18:	e7df      	b.n	8007dda <_realloc_r+0x1e>

08007e1a <_raise_r>:
 8007e1a:	291f      	cmp	r1, #31
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	d904      	bls.n	8007e2e <_raise_r+0x14>
 8007e24:	2316      	movs	r3, #22
 8007e26:	6003      	str	r3, [r0, #0]
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	bd38      	pop	{r3, r4, r5, pc}
 8007e2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e30:	b112      	cbz	r2, 8007e38 <_raise_r+0x1e>
 8007e32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e36:	b94b      	cbnz	r3, 8007e4c <_raise_r+0x32>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 f831 	bl	8007ea0 <_getpid_r>
 8007e3e:	462a      	mov	r2, r5
 8007e40:	4601      	mov	r1, r0
 8007e42:	4620      	mov	r0, r4
 8007e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e48:	f000 b818 	b.w	8007e7c <_kill_r>
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d00a      	beq.n	8007e66 <_raise_r+0x4c>
 8007e50:	1c59      	adds	r1, r3, #1
 8007e52:	d103      	bne.n	8007e5c <_raise_r+0x42>
 8007e54:	2316      	movs	r3, #22
 8007e56:	6003      	str	r3, [r0, #0]
 8007e58:	2001      	movs	r0, #1
 8007e5a:	e7e7      	b.n	8007e2c <_raise_r+0x12>
 8007e5c:	2400      	movs	r4, #0
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e64:	4798      	blx	r3
 8007e66:	2000      	movs	r0, #0
 8007e68:	e7e0      	b.n	8007e2c <_raise_r+0x12>
	...

08007e6c <raise>:
 8007e6c:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <raise+0xc>)
 8007e6e:	4601      	mov	r1, r0
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	f7ff bfd2 	b.w	8007e1a <_raise_r>
 8007e76:	bf00      	nop
 8007e78:	2000046c 	.word	0x2000046c

08007e7c <_kill_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4d06      	ldr	r5, [pc, #24]	; (8007e9c <_kill_r+0x20>)
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	4611      	mov	r1, r2
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	f7f9 fb13 	bl	80014b4 <_kill>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	d102      	bne.n	8007e98 <_kill_r+0x1c>
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	b103      	cbz	r3, 8007e98 <_kill_r+0x1c>
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	bd38      	pop	{r3, r4, r5, pc}
 8007e9a:	bf00      	nop
 8007e9c:	200026e0 	.word	0x200026e0

08007ea0 <_getpid_r>:
 8007ea0:	f7f9 bb06 	b.w	80014b0 <_getpid>

08007ea4 <__sread>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eac:	f000 f8a8 	bl	8008000 <_read_r>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	bfab      	itete	ge
 8007eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8007eb8:	181b      	addge	r3, r3, r0
 8007eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ebe:	bfac      	ite	ge
 8007ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ec2:	81a3      	strhlt	r3, [r4, #12]
 8007ec4:	bd10      	pop	{r4, pc}

08007ec6 <__swrite>:
 8007ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eca:	461f      	mov	r7, r3
 8007ecc:	898b      	ldrh	r3, [r1, #12]
 8007ece:	4605      	mov	r5, r0
 8007ed0:	05db      	lsls	r3, r3, #23
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	4616      	mov	r6, r2
 8007ed6:	d505      	bpl.n	8007ee4 <__swrite+0x1e>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	2200      	movs	r2, #0
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	f000 f874 	bl	8007fcc <_lseek_r>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	4628      	mov	r0, r5
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007efa:	f000 b823 	b.w	8007f44 <_write_r>

08007efe <__sseek>:
 8007efe:	b510      	push	{r4, lr}
 8007f00:	460c      	mov	r4, r1
 8007f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f06:	f000 f861 	bl	8007fcc <_lseek_r>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	bf15      	itete	ne
 8007f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f1a:	81a3      	strheq	r3, [r4, #12]
 8007f1c:	bf18      	it	ne
 8007f1e:	81a3      	strhne	r3, [r4, #12]
 8007f20:	bd10      	pop	{r4, pc}

08007f22 <__sclose>:
 8007f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f26:	f000 b81f 	b.w	8007f68 <_close_r>

08007f2a <__ascii_wctomb>:
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	b141      	cbz	r1, 8007f42 <__ascii_wctomb+0x18>
 8007f30:	2aff      	cmp	r2, #255	; 0xff
 8007f32:	d904      	bls.n	8007f3e <__ascii_wctomb+0x14>
 8007f34:	228a      	movs	r2, #138	; 0x8a
 8007f36:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	2001      	movs	r0, #1
 8007f40:	700a      	strb	r2, [r1, #0]
 8007f42:	4770      	bx	lr

08007f44 <_write_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4d05      	ldr	r5, [pc, #20]	; (8007f64 <_write_r+0x20>)
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7f9 facc 	bl	80014f0 <_write>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_write_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_write_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	200026e0 	.word	0x200026e0

08007f68 <_close_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4d05      	ldr	r5, [pc, #20]	; (8007f84 <_close_r+0x1c>)
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	f7f9 faca 	bl	800150c <_close>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_close_r+0x1a>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_close_r+0x1a>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	200026e0 	.word	0x200026e0

08007f88 <_fstat_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4d06      	ldr	r5, [pc, #24]	; (8007fa8 <_fstat_r+0x20>)
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	602b      	str	r3, [r5, #0]
 8007f96:	f7f9 fabc 	bl	8001512 <_fstat>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d102      	bne.n	8007fa4 <_fstat_r+0x1c>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b103      	cbz	r3, 8007fa4 <_fstat_r+0x1c>
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200026e0 	.word	0x200026e0

08007fac <_isatty_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4d05      	ldr	r5, [pc, #20]	; (8007fc8 <_isatty_r+0x1c>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7f9 fab0 	bl	800151c <_isatty>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_isatty_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_isatty_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	200026e0 	.word	0x200026e0

08007fcc <_lseek_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4d05      	ldr	r5, [pc, #20]	; (8007fec <_lseek_r+0x20>)
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7f9 faa0 	bl	8001520 <_lseek>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_lseek_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_lseek_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	200026e0 	.word	0x200026e0

08007ff0 <_malloc_usable_size_r>:
 8007ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff4:	1f18      	subs	r0, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bfbc      	itt	lt
 8007ffa:	580b      	ldrlt	r3, [r1, r0]
 8007ffc:	18c0      	addlt	r0, r0, r3
 8007ffe:	4770      	bx	lr

08008000 <_read_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	2200      	movs	r2, #0
 800800a:	4d05      	ldr	r5, [pc, #20]	; (8008020 <_read_r+0x20>)
 800800c:	602a      	str	r2, [r5, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	f7f9 fa5e 	bl	80014d0 <_read>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d102      	bne.n	800801e <_read_r+0x1e>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	b103      	cbz	r3, 800801e <_read_r+0x1e>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd38      	pop	{r3, r4, r5, pc}
 8008020:	200026e0 	.word	0x200026e0

08008024 <_init>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr

08008030 <_fini>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	bf00      	nop
 8008034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008036:	bc08      	pop	{r3}
 8008038:	469e      	mov	lr, r3
 800803a:	4770      	bx	lr

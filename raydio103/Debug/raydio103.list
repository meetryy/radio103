
raydio103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08007ab8  08007ab8  00017ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085fc  080085fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080085fc  080085fc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085fc  080085fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  200001e0  080087e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d6c  080087e4  00021d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014249  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003171  00000000  00000000  00034452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000375c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000385e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ba0  00000000  00000000  00039570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ab9  00000000  00000000  00053110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091db9  00000000  00000000  00069bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000fb982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c2c  00000000  00000000  000fba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000f813  00000000  00000000  000ff670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007aa0 	.word	0x08007aa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007aa0 	.word	0x08007aa0

08000150 <arm_bitreversal_32>:
 8000150:	1c4b      	adds	r3, r1, #1
 8000152:	2b01      	cmp	r3, #1
 8000154:	bf98      	it	ls
 8000156:	4770      	bxls	lr
 8000158:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800015c:	1c91      	adds	r1, r2, #2
 800015e:	089b      	lsrs	r3, r3, #2

08000160 <arm_bitreversal_32_0>:
 8000160:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000164:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000168:	880a      	ldrh	r2, [r1, #0]
 800016a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800016e:	4480      	add	r8, r0
 8000170:	4481      	add	r9, r0
 8000172:	4402      	add	r2, r0
 8000174:	4484      	add	ip, r0
 8000176:	f8d9 7000 	ldr.w	r7, [r9]
 800017a:	f8d8 6000 	ldr.w	r6, [r8]
 800017e:	6815      	ldr	r5, [r2, #0]
 8000180:	f8dc 4000 	ldr.w	r4, [ip]
 8000184:	f8c9 6000 	str.w	r6, [r9]
 8000188:	f8c8 7000 	str.w	r7, [r8]
 800018c:	f8cc 5000 	str.w	r5, [ip]
 8000190:	6014      	str	r4, [r2, #0]
 8000192:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000196:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800019a:	6855      	ldr	r5, [r2, #4]
 800019c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80001a0:	f8c9 6004 	str.w	r6, [r9, #4]
 80001a4:	f8c8 7004 	str.w	r7, [r8, #4]
 80001a8:	f8cc 5004 	str.w	r5, [ip, #4]
 80001ac:	6054      	str	r4, [r2, #4]
 80001ae:	3108      	adds	r1, #8
 80001b0:	3b01      	subs	r3, #1
 80001b2:	d1d5      	bne.n	8000160 <arm_bitreversal_32_0>
 80001b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80001b8:	4770      	bx	lr

080001ba <arm_bitreversal_16>:
 80001ba:	1c4b      	adds	r3, r1, #1
 80001bc:	2b01      	cmp	r3, #1
 80001be:	bf98      	it	ls
 80001c0:	4770      	bxls	lr
 80001c2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001c6:	1c91      	adds	r1, r2, #2
 80001c8:	089b      	lsrs	r3, r3, #2

080001ca <arm_bitreversal_16_0>:
 80001ca:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ce:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001d2:	880a      	ldrh	r2, [r1, #0]
 80001d4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001d8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80001dc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80001e0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80001e4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80001e8:	f8d9 7000 	ldr.w	r7, [r9]
 80001ec:	f8d8 6000 	ldr.w	r6, [r8]
 80001f0:	6815      	ldr	r5, [r2, #0]
 80001f2:	f8dc 4000 	ldr.w	r4, [ip]
 80001f6:	f8c9 6000 	str.w	r6, [r9]
 80001fa:	f8c8 7000 	str.w	r7, [r8]
 80001fe:	f8cc 5000 	str.w	r5, [ip]
 8000202:	6014      	str	r4, [r2, #0]
 8000204:	3108      	adds	r1, #8
 8000206:	3b01      	subs	r3, #1
 8000208:	d1df      	bne.n	80001ca <arm_bitreversal_16_0>
 800020a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800020e:	4770      	bx	lr

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_fmul>:
 8000220:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000224:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000228:	bf1e      	ittt	ne
 800022a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800022e:	ea92 0f0c 	teqne	r2, ip
 8000232:	ea93 0f0c 	teqne	r3, ip
 8000236:	d06f      	beq.n	8000318 <__aeabi_fmul+0xf8>
 8000238:	441a      	add	r2, r3
 800023a:	ea80 0c01 	eor.w	ip, r0, r1
 800023e:	0240      	lsls	r0, r0, #9
 8000240:	bf18      	it	ne
 8000242:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000246:	d01e      	beq.n	8000286 <__aeabi_fmul+0x66>
 8000248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800024c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000250:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000254:	fba0 3101 	umull	r3, r1, r0, r1
 8000258:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800025c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000260:	bf3e      	ittt	cc
 8000262:	0049      	lslcc	r1, r1, #1
 8000264:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000268:	005b      	lslcc	r3, r3, #1
 800026a:	ea40 0001 	orr.w	r0, r0, r1
 800026e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000272:	2afd      	cmp	r2, #253	; 0xfd
 8000274:	d81d      	bhi.n	80002b2 <__aeabi_fmul+0x92>
 8000276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	4770      	bx	lr
 8000286:	f090 0f00 	teq	r0, #0
 800028a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800028e:	bf08      	it	eq
 8000290:	0249      	lsleq	r1, r1, #9
 8000292:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000296:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029a:	3a7f      	subs	r2, #127	; 0x7f
 800029c:	bfc2      	ittt	gt
 800029e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002a6:	4770      	bxgt	lr
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	f04f 0300 	mov.w	r3, #0
 80002b0:	3a01      	subs	r2, #1
 80002b2:	dc5d      	bgt.n	8000370 <__aeabi_fmul+0x150>
 80002b4:	f112 0f19 	cmn.w	r2, #25
 80002b8:	bfdc      	itt	le
 80002ba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002be:	4770      	bxle	lr
 80002c0:	f1c2 0200 	rsb	r2, r2, #0
 80002c4:	0041      	lsls	r1, r0, #1
 80002c6:	fa21 f102 	lsr.w	r1, r1, r2
 80002ca:	f1c2 0220 	rsb	r2, r2, #32
 80002ce:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002d6:	f140 0000 	adc.w	r0, r0, #0
 80002da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002de:	bf08      	it	eq
 80002e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e4:	4770      	bx	lr
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002ee:	bf02      	ittt	eq
 80002f0:	0040      	lsleq	r0, r0, #1
 80002f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002f6:	3a01      	subeq	r2, #1
 80002f8:	d0f9      	beq.n	80002ee <__aeabi_fmul+0xce>
 80002fa:	ea40 000c 	orr.w	r0, r0, ip
 80002fe:	f093 0f00 	teq	r3, #0
 8000302:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0049      	lsleq	r1, r1, #1
 800030a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800030e:	3b01      	subeq	r3, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xe6>
 8000312:	ea41 010c 	orr.w	r1, r1, ip
 8000316:	e78f      	b.n	8000238 <__aeabi_fmul+0x18>
 8000318:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800031c:	ea92 0f0c 	teq	r2, ip
 8000320:	bf18      	it	ne
 8000322:	ea93 0f0c 	teqne	r3, ip
 8000326:	d00a      	beq.n	800033e <__aeabi_fmul+0x11e>
 8000328:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800032c:	bf18      	it	ne
 800032e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000332:	d1d8      	bne.n	80002e6 <__aeabi_fmul+0xc6>
 8000334:	ea80 0001 	eor.w	r0, r0, r1
 8000338:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800033c:	4770      	bx	lr
 800033e:	f090 0f00 	teq	r0, #0
 8000342:	bf17      	itett	ne
 8000344:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000348:	4608      	moveq	r0, r1
 800034a:	f091 0f00 	teqne	r1, #0
 800034e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000352:	d014      	beq.n	800037e <__aeabi_fmul+0x15e>
 8000354:	ea92 0f0c 	teq	r2, ip
 8000358:	d101      	bne.n	800035e <__aeabi_fmul+0x13e>
 800035a:	0242      	lsls	r2, r0, #9
 800035c:	d10f      	bne.n	800037e <__aeabi_fmul+0x15e>
 800035e:	ea93 0f0c 	teq	r3, ip
 8000362:	d103      	bne.n	800036c <__aeabi_fmul+0x14c>
 8000364:	024b      	lsls	r3, r1, #9
 8000366:	bf18      	it	ne
 8000368:	4608      	movne	r0, r1
 800036a:	d108      	bne.n	800037e <__aeabi_fmul+0x15e>
 800036c:	ea80 0001 	eor.w	r0, r0, r1
 8000370:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000374:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000378:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037c:	4770      	bx	lr
 800037e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000382:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000386:	4770      	bx	lr

08000388 <__aeabi_drsub>:
 8000388:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800038c:	e002      	b.n	8000394 <__adddf3>
 800038e:	bf00      	nop

08000390 <__aeabi_dsub>:
 8000390:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000394 <__adddf3>:
 8000394:	b530      	push	{r4, r5, lr}
 8000396:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800039a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800039e:	ea94 0f05 	teq	r4, r5
 80003a2:	bf08      	it	eq
 80003a4:	ea90 0f02 	teqeq	r0, r2
 80003a8:	bf1f      	itttt	ne
 80003aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ba:	f000 80e2 	beq.w	8000582 <__adddf3+0x1ee>
 80003be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003c6:	bfb8      	it	lt
 80003c8:	426d      	neglt	r5, r5
 80003ca:	dd0c      	ble.n	80003e6 <__adddf3+0x52>
 80003cc:	442c      	add	r4, r5
 80003ce:	ea80 0202 	eor.w	r2, r0, r2
 80003d2:	ea81 0303 	eor.w	r3, r1, r3
 80003d6:	ea82 0000 	eor.w	r0, r2, r0
 80003da:	ea83 0101 	eor.w	r1, r3, r1
 80003de:	ea80 0202 	eor.w	r2, r0, r2
 80003e2:	ea81 0303 	eor.w	r3, r1, r3
 80003e6:	2d36      	cmp	r5, #54	; 0x36
 80003e8:	bf88      	it	hi
 80003ea:	bd30      	pophi	{r4, r5, pc}
 80003ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003fc:	d002      	beq.n	8000404 <__adddf3+0x70>
 80003fe:	4240      	negs	r0, r0
 8000400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000404:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000408:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800040c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000410:	d002      	beq.n	8000418 <__adddf3+0x84>
 8000412:	4252      	negs	r2, r2
 8000414:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000418:	ea94 0f05 	teq	r4, r5
 800041c:	f000 80a7 	beq.w	800056e <__adddf3+0x1da>
 8000420:	f1a4 0401 	sub.w	r4, r4, #1
 8000424:	f1d5 0e20 	rsbs	lr, r5, #32
 8000428:	db0d      	blt.n	8000446 <__adddf3+0xb2>
 800042a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800042e:	fa22 f205 	lsr.w	r2, r2, r5
 8000432:	1880      	adds	r0, r0, r2
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	fa03 f20e 	lsl.w	r2, r3, lr
 800043c:	1880      	adds	r0, r0, r2
 800043e:	fa43 f305 	asr.w	r3, r3, r5
 8000442:	4159      	adcs	r1, r3
 8000444:	e00e      	b.n	8000464 <__adddf3+0xd0>
 8000446:	f1a5 0520 	sub.w	r5, r5, #32
 800044a:	f10e 0e20 	add.w	lr, lr, #32
 800044e:	2a01      	cmp	r2, #1
 8000450:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000454:	bf28      	it	cs
 8000456:	f04c 0c02 	orrcs.w	ip, ip, #2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	d507      	bpl.n	800047a <__adddf3+0xe6>
 800046a:	f04f 0e00 	mov.w	lr, #0
 800046e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000472:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000476:	eb6e 0101 	sbc.w	r1, lr, r1
 800047a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800047e:	d31b      	bcc.n	80004b8 <__adddf3+0x124>
 8000480:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000484:	d30c      	bcc.n	80004a0 <__adddf3+0x10c>
 8000486:	0849      	lsrs	r1, r1, #1
 8000488:	ea5f 0030 	movs.w	r0, r0, rrx
 800048c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000490:	f104 0401 	add.w	r4, r4, #1
 8000494:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000498:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800049c:	f080 809a 	bcs.w	80005d4 <__adddf3+0x240>
 80004a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a4:	bf08      	it	eq
 80004a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004aa:	f150 0000 	adcs.w	r0, r0, #0
 80004ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004b2:	ea41 0105 	orr.w	r1, r1, r5
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004bc:	4140      	adcs	r0, r0
 80004be:	eb41 0101 	adc.w	r1, r1, r1
 80004c2:	3c01      	subs	r4, #1
 80004c4:	bf28      	it	cs
 80004c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004ca:	d2e9      	bcs.n	80004a0 <__adddf3+0x10c>
 80004cc:	f091 0f00 	teq	r1, #0
 80004d0:	bf04      	itt	eq
 80004d2:	4601      	moveq	r1, r0
 80004d4:	2000      	moveq	r0, #0
 80004d6:	fab1 f381 	clz	r3, r1
 80004da:	bf08      	it	eq
 80004dc:	3320      	addeq	r3, #32
 80004de:	f1a3 030b 	sub.w	r3, r3, #11
 80004e2:	f1b3 0220 	subs.w	r2, r3, #32
 80004e6:	da0c      	bge.n	8000502 <__adddf3+0x16e>
 80004e8:	320c      	adds	r2, #12
 80004ea:	dd08      	ble.n	80004fe <__adddf3+0x16a>
 80004ec:	f102 0c14 	add.w	ip, r2, #20
 80004f0:	f1c2 020c 	rsb	r2, r2, #12
 80004f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f8:	fa21 f102 	lsr.w	r1, r1, r2
 80004fc:	e00c      	b.n	8000518 <__adddf3+0x184>
 80004fe:	f102 0214 	add.w	r2, r2, #20
 8000502:	bfd8      	it	le
 8000504:	f1c2 0c20 	rsble	ip, r2, #32
 8000508:	fa01 f102 	lsl.w	r1, r1, r2
 800050c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000510:	bfdc      	itt	le
 8000512:	ea41 010c 	orrle.w	r1, r1, ip
 8000516:	4090      	lslle	r0, r2
 8000518:	1ae4      	subs	r4, r4, r3
 800051a:	bfa2      	ittt	ge
 800051c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000520:	4329      	orrge	r1, r5
 8000522:	bd30      	popge	{r4, r5, pc}
 8000524:	ea6f 0404 	mvn.w	r4, r4
 8000528:	3c1f      	subs	r4, #31
 800052a:	da1c      	bge.n	8000566 <__adddf3+0x1d2>
 800052c:	340c      	adds	r4, #12
 800052e:	dc0e      	bgt.n	800054e <__adddf3+0x1ba>
 8000530:	f104 0414 	add.w	r4, r4, #20
 8000534:	f1c4 0220 	rsb	r2, r4, #32
 8000538:	fa20 f004 	lsr.w	r0, r0, r4
 800053c:	fa01 f302 	lsl.w	r3, r1, r2
 8000540:	ea40 0003 	orr.w	r0, r0, r3
 8000544:	fa21 f304 	lsr.w	r3, r1, r4
 8000548:	ea45 0103 	orr.w	r1, r5, r3
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	f1c4 040c 	rsb	r4, r4, #12
 8000552:	f1c4 0220 	rsb	r2, r4, #32
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 f304 	lsl.w	r3, r1, r4
 800055e:	ea40 0003 	orr.w	r0, r0, r3
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	fa21 f004 	lsr.w	r0, r1, r4
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	f094 0f00 	teq	r4, #0
 8000572:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000576:	bf06      	itte	eq
 8000578:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800057c:	3401      	addeq	r4, #1
 800057e:	3d01      	subne	r5, #1
 8000580:	e74e      	b.n	8000420 <__adddf3+0x8c>
 8000582:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000586:	bf18      	it	ne
 8000588:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800058c:	d029      	beq.n	80005e2 <__adddf3+0x24e>
 800058e:	ea94 0f05 	teq	r4, r5
 8000592:	bf08      	it	eq
 8000594:	ea90 0f02 	teqeq	r0, r2
 8000598:	d005      	beq.n	80005a6 <__adddf3+0x212>
 800059a:	ea54 0c00 	orrs.w	ip, r4, r0
 800059e:	bf04      	itt	eq
 80005a0:	4619      	moveq	r1, r3
 80005a2:	4610      	moveq	r0, r2
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	ea91 0f03 	teq	r1, r3
 80005aa:	bf1e      	ittt	ne
 80005ac:	2100      	movne	r1, #0
 80005ae:	2000      	movne	r0, #0
 80005b0:	bd30      	popne	{r4, r5, pc}
 80005b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005b6:	d105      	bne.n	80005c4 <__adddf3+0x230>
 80005b8:	0040      	lsls	r0, r0, #1
 80005ba:	4149      	adcs	r1, r1
 80005bc:	bf28      	it	cs
 80005be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd30      	pop	{r4, r5, pc}
 80005c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c8:	bf3c      	itt	cc
 80005ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ce:	bd30      	popcc	{r4, r5, pc}
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005dc:	f04f 0000 	mov.w	r0, #0
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005e6:	bf1a      	itte	ne
 80005e8:	4619      	movne	r1, r3
 80005ea:	4610      	movne	r0, r2
 80005ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f0:	bf1c      	itt	ne
 80005f2:	460b      	movne	r3, r1
 80005f4:	4602      	movne	r2, r0
 80005f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005fa:	bf06      	itte	eq
 80005fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000600:	ea91 0f03 	teqeq	r1, r3
 8000604:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop

0800060c <__aeabi_ui2d>:
 800060c:	f090 0f00 	teq	r0, #0
 8000610:	bf04      	itt	eq
 8000612:	2100      	moveq	r1, #0
 8000614:	4770      	bxeq	lr
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000620:	f04f 0500 	mov.w	r5, #0
 8000624:	f04f 0100 	mov.w	r1, #0
 8000628:	e750      	b.n	80004cc <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_i2d>:
 800062c:	f090 0f00 	teq	r0, #0
 8000630:	bf04      	itt	eq
 8000632:	2100      	moveq	r1, #0
 8000634:	4770      	bxeq	lr
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800063c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000640:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000644:	bf48      	it	mi
 8000646:	4240      	negmi	r0, r0
 8000648:	f04f 0100 	mov.w	r1, #0
 800064c:	e73e      	b.n	80004cc <__adddf3+0x138>
 800064e:	bf00      	nop

08000650 <__aeabi_f2d>:
 8000650:	0042      	lsls	r2, r0, #1
 8000652:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000656:	ea4f 0131 	mov.w	r1, r1, rrx
 800065a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800065e:	bf1f      	itttt	ne
 8000660:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000664:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000668:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800066c:	4770      	bxne	lr
 800066e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000672:	bf08      	it	eq
 8000674:	4770      	bxeq	lr
 8000676:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800067a:	bf04      	itt	eq
 800067c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	e71c      	b.n	80004cc <__adddf3+0x138>
 8000692:	bf00      	nop

08000694 <__aeabi_ul2d>:
 8000694:	ea50 0201 	orrs.w	r2, r0, r1
 8000698:	bf08      	it	eq
 800069a:	4770      	bxeq	lr
 800069c:	b530      	push	{r4, r5, lr}
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	e00a      	b.n	80006ba <__aeabi_l2d+0x16>

080006a4 <__aeabi_l2d>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006b2:	d502      	bpl.n	80006ba <__aeabi_l2d+0x16>
 80006b4:	4240      	negs	r0, r0
 80006b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006c6:	f43f aed8 	beq.w	800047a <__adddf3+0xe6>
 80006ca:	f04f 0203 	mov.w	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006e2:	f1c2 0320 	rsb	r3, r2, #32
 80006e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80006f2:	ea40 000e 	orr.w	r0, r0, lr
 80006f6:	fa21 f102 	lsr.w	r1, r1, r2
 80006fa:	4414      	add	r4, r2
 80006fc:	e6bd      	b.n	800047a <__adddf3+0xe6>
 80006fe:	bf00      	nop

08000700 <__aeabi_dmul>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000706:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800070a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800070e:	bf1d      	ittte	ne
 8000710:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000714:	ea94 0f0c 	teqne	r4, ip
 8000718:	ea95 0f0c 	teqne	r5, ip
 800071c:	f000 f8de 	bleq	80008dc <__aeabi_dmul+0x1dc>
 8000720:	442c      	add	r4, r5
 8000722:	ea81 0603 	eor.w	r6, r1, r3
 8000726:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800072a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800072e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000732:	bf18      	it	ne
 8000734:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000738:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800073c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000740:	d038      	beq.n	80007b4 <__aeabi_dmul+0xb4>
 8000742:	fba0 ce02 	umull	ip, lr, r0, r2
 8000746:	f04f 0500 	mov.w	r5, #0
 800074a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800074e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000752:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000756:	f04f 0600 	mov.w	r6, #0
 800075a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800075e:	f09c 0f00 	teq	ip, #0
 8000762:	bf18      	it	ne
 8000764:	f04e 0e01 	orrne.w	lr, lr, #1
 8000768:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800076c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000770:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000774:	d204      	bcs.n	8000780 <__aeabi_dmul+0x80>
 8000776:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800077a:	416d      	adcs	r5, r5
 800077c:	eb46 0606 	adc.w	r6, r6, r6
 8000780:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000784:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000788:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800078c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000790:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000794:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000798:	bf88      	it	hi
 800079a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800079e:	d81e      	bhi.n	80007de <__aeabi_dmul+0xde>
 80007a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007a4:	bf08      	it	eq
 80007a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007aa:	f150 0000 	adcs.w	r0, r0, #0
 80007ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b8:	ea46 0101 	orr.w	r1, r6, r1
 80007bc:	ea40 0002 	orr.w	r0, r0, r2
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c8:	bfc2      	ittt	gt
 80007ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007d2:	bd70      	popgt	{r4, r5, r6, pc}
 80007d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d8:	f04f 0e00 	mov.w	lr, #0
 80007dc:	3c01      	subs	r4, #1
 80007de:	f300 80ab 	bgt.w	8000938 <__aeabi_dmul+0x238>
 80007e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007e6:	bfde      	ittt	le
 80007e8:	2000      	movle	r0, #0
 80007ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007ee:	bd70      	pople	{r4, r5, r6, pc}
 80007f0:	f1c4 0400 	rsb	r4, r4, #0
 80007f4:	3c20      	subs	r4, #32
 80007f6:	da35      	bge.n	8000864 <__aeabi_dmul+0x164>
 80007f8:	340c      	adds	r4, #12
 80007fa:	dc1b      	bgt.n	8000834 <__aeabi_dmul+0x134>
 80007fc:	f104 0414 	add.w	r4, r4, #20
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f305 	lsl.w	r3, r0, r5
 8000808:	fa20 f004 	lsr.w	r0, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000820:	fa21 f604 	lsr.w	r6, r1, r4
 8000824:	eb42 0106 	adc.w	r1, r2, r6
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f1c4 040c 	rsb	r4, r4, #12
 8000838:	f1c4 0520 	rsb	r5, r4, #32
 800083c:	fa00 f304 	lsl.w	r3, r0, r4
 8000840:	fa20 f005 	lsr.w	r0, r0, r5
 8000844:	fa01 f204 	lsl.w	r2, r1, r4
 8000848:	ea40 0002 	orr.w	r0, r0, r2
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000854:	f141 0100 	adc.w	r1, r1, #0
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f1c4 0520 	rsb	r5, r4, #32
 8000868:	fa00 f205 	lsl.w	r2, r0, r5
 800086c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000870:	fa20 f304 	lsr.w	r3, r0, r4
 8000874:	fa01 f205 	lsl.w	r2, r1, r5
 8000878:	ea43 0302 	orr.w	r3, r3, r2
 800087c:	fa21 f004 	lsr.w	r0, r1, r4
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	fa21 f204 	lsr.w	r2, r1, r4
 8000888:	ea20 0002 	bic.w	r0, r0, r2
 800088c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000890:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000894:	bf08      	it	eq
 8000896:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f094 0f00 	teq	r4, #0
 80008a0:	d10f      	bne.n	80008c2 <__aeabi_dmul+0x1c2>
 80008a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008a6:	0040      	lsls	r0, r0, #1
 80008a8:	eb41 0101 	adc.w	r1, r1, r1
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf08      	it	eq
 80008b2:	3c01      	subeq	r4, #1
 80008b4:	d0f7      	beq.n	80008a6 <__aeabi_dmul+0x1a6>
 80008b6:	ea41 0106 	orr.w	r1, r1, r6
 80008ba:	f095 0f00 	teq	r5, #0
 80008be:	bf18      	it	ne
 80008c0:	4770      	bxne	lr
 80008c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	eb43 0303 	adc.w	r3, r3, r3
 80008cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008d0:	bf08      	it	eq
 80008d2:	3d01      	subeq	r5, #1
 80008d4:	d0f7      	beq.n	80008c6 <__aeabi_dmul+0x1c6>
 80008d6:	ea43 0306 	orr.w	r3, r3, r6
 80008da:	4770      	bx	lr
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e4:	bf18      	it	ne
 80008e6:	ea95 0f0c 	teqne	r5, ip
 80008ea:	d00c      	beq.n	8000906 <__aeabi_dmul+0x206>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	d1d1      	bne.n	800089c <__aeabi_dmul+0x19c>
 80008f8:	ea81 0103 	eor.w	r1, r1, r3
 80008fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000900:	f04f 0000 	mov.w	r0, #0
 8000904:	bd70      	pop	{r4, r5, r6, pc}
 8000906:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800090a:	bf06      	itte	eq
 800090c:	4610      	moveq	r0, r2
 800090e:	4619      	moveq	r1, r3
 8000910:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000914:	d019      	beq.n	800094a <__aeabi_dmul+0x24a>
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	d102      	bne.n	8000922 <__aeabi_dmul+0x222>
 800091c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000920:	d113      	bne.n	800094a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	d105      	bne.n	8000934 <__aeabi_dmul+0x234>
 8000928:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800092c:	bf1c      	itt	ne
 800092e:	4610      	movne	r0, r2
 8000930:	4619      	movne	r1, r3
 8000932:	d10a      	bne.n	800094a <__aeabi_dmul+0x24a>
 8000934:	ea81 0103 	eor.w	r1, r1, r3
 8000938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800093c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000940:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	bd70      	pop	{r4, r5, r6, pc}
 800094a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800094e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000952:	bd70      	pop	{r4, r5, r6, pc}

08000954 <__aeabi_ddiv>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800095a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800095e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000962:	bf1d      	ittte	ne
 8000964:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000968:	ea94 0f0c 	teqne	r4, ip
 800096c:	ea95 0f0c 	teqne	r5, ip
 8000970:	f000 f8a7 	bleq	8000ac2 <__aeabi_ddiv+0x16e>
 8000974:	eba4 0405 	sub.w	r4, r4, r5
 8000978:	ea81 0e03 	eor.w	lr, r1, r3
 800097c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000980:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000984:	f000 8088 	beq.w	8000a98 <__aeabi_ddiv+0x144>
 8000988:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800098c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000990:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000994:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000998:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800099c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009ac:	429d      	cmp	r5, r3
 80009ae:	bf08      	it	eq
 80009b0:	4296      	cmpeq	r6, r2
 80009b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ba:	d202      	bcs.n	80009c2 <__aeabi_ddiv+0x6e>
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c2:	1ab6      	subs	r6, r6, r2
 80009c4:	eb65 0503 	sbc.w	r5, r5, r3
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a30:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a34:	d018      	beq.n	8000a68 <__aeabi_ddiv+0x114>
 8000a36:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a52:	d1c0      	bne.n	80009d6 <__aeabi_ddiv+0x82>
 8000a54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a58:	d10b      	bne.n	8000a72 <__aeabi_ddiv+0x11e>
 8000a5a:	ea41 0100 	orr.w	r1, r1, r0
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a66:	e7b6      	b.n	80009d6 <__aeabi_ddiv+0x82>
 8000a68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a6c:	bf04      	itt	eq
 8000a6e:	4301      	orreq	r1, r0
 8000a70:	2000      	moveq	r0, #0
 8000a72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a76:	bf88      	it	hi
 8000a78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a7c:	f63f aeaf 	bhi.w	80007de <__aeabi_dmul+0xde>
 8000a80:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a84:	bf04      	itt	eq
 8000a86:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a8e:	f150 0000 	adcs.w	r0, r0, #0
 8000a92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aa4:	bfc2      	ittt	gt
 8000aa6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab4:	f04f 0e00 	mov.w	lr, #0
 8000ab8:	3c01      	subs	r4, #1
 8000aba:	e690      	b.n	80007de <__aeabi_dmul+0xde>
 8000abc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac0:	e68d      	b.n	80007de <__aeabi_dmul+0xde>
 8000ac2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ac6:	ea94 0f0c 	teq	r4, ip
 8000aca:	bf08      	it	eq
 8000acc:	ea95 0f0c 	teqeq	r5, ip
 8000ad0:	f43f af3b 	beq.w	800094a <__aeabi_dmul+0x24a>
 8000ad4:	ea94 0f0c 	teq	r4, ip
 8000ad8:	d10a      	bne.n	8000af0 <__aeabi_ddiv+0x19c>
 8000ada:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ade:	f47f af34 	bne.w	800094a <__aeabi_dmul+0x24a>
 8000ae2:	ea95 0f0c 	teq	r5, ip
 8000ae6:	f47f af25 	bne.w	8000934 <__aeabi_dmul+0x234>
 8000aea:	4610      	mov	r0, r2
 8000aec:	4619      	mov	r1, r3
 8000aee:	e72c      	b.n	800094a <__aeabi_dmul+0x24a>
 8000af0:	ea95 0f0c 	teq	r5, ip
 8000af4:	d106      	bne.n	8000b04 <__aeabi_ddiv+0x1b0>
 8000af6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000afa:	f43f aefd 	beq.w	80008f8 <__aeabi_dmul+0x1f8>
 8000afe:	4610      	mov	r0, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	e722      	b.n	800094a <__aeabi_dmul+0x24a>
 8000b04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b08:	bf18      	it	ne
 8000b0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b0e:	f47f aec5 	bne.w	800089c <__aeabi_dmul+0x19c>
 8000b12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b16:	f47f af0d 	bne.w	8000934 <__aeabi_dmul+0x234>
 8000b1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b1e:	f47f aeeb 	bne.w	80008f8 <__aeabi_dmul+0x1f8>
 8000b22:	e712      	b.n	800094a <__aeabi_dmul+0x24a>

08000b24 <__gedf2>:
 8000b24:	f04f 3cff 	mov.w	ip, #4294967295
 8000b28:	e006      	b.n	8000b38 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__ledf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	e002      	b.n	8000b38 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__cmpdf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	bf18      	it	ne
 8000b4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b4e:	d01b      	beq.n	8000b88 <__cmpdf2+0x54>
 8000b50:	b001      	add	sp, #4
 8000b52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b56:	bf0c      	ite	eq
 8000b58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b5c:	ea91 0f03 	teqne	r1, r3
 8000b60:	bf02      	ittt	eq
 8000b62:	ea90 0f02 	teqeq	r0, r2
 8000b66:	2000      	moveq	r0, #0
 8000b68:	4770      	bxeq	lr
 8000b6a:	f110 0f00 	cmn.w	r0, #0
 8000b6e:	ea91 0f03 	teq	r1, r3
 8000b72:	bf58      	it	pl
 8000b74:	4299      	cmppl	r1, r3
 8000b76:	bf08      	it	eq
 8000b78:	4290      	cmpeq	r0, r2
 8000b7a:	bf2c      	ite	cs
 8000b7c:	17d8      	asrcs	r0, r3, #31
 8000b7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b82:	f040 0001 	orr.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__cmpdf2+0x64>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d107      	bne.n	8000ba8 <__cmpdf2+0x74>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d1d6      	bne.n	8000b50 <__cmpdf2+0x1c>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d0d3      	beq.n	8000b50 <__cmpdf2+0x1c>
 8000ba8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_cdrcmple>:
 8000bb0:	4684      	mov	ip, r0
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	4662      	mov	r2, ip
 8000bb6:	468c      	mov	ip, r1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4663      	mov	r3, ip
 8000bbc:	e000      	b.n	8000bc0 <__aeabi_cdcmpeq>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_cdcmpeq>:
 8000bc0:	b501      	push	{r0, lr}
 8000bc2:	f7ff ffb7 	bl	8000b34 <__cmpdf2>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	bf48      	it	mi
 8000bca:	f110 0f00 	cmnmi.w	r0, #0
 8000bce:	bd01      	pop	{r0, pc}

08000bd0 <__aeabi_dcmpeq>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff fff4 	bl	8000bc0 <__aeabi_cdcmpeq>
 8000bd8:	bf0c      	ite	eq
 8000bda:	2001      	moveq	r0, #1
 8000bdc:	2000      	movne	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmplt>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffea 	bl	8000bc0 <__aeabi_cdcmpeq>
 8000bec:	bf34      	ite	cc
 8000bee:	2001      	movcc	r0, #1
 8000bf0:	2000      	movcs	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmple>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffe0 	bl	8000bc0 <__aeabi_cdcmpeq>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpge>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffce 	bl	8000bb0 <__aeabi_cdrcmple>
 8000c14:	bf94      	ite	ls
 8000c16:	2001      	movls	r0, #1
 8000c18:	2000      	movhi	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_dcmpgt>:
 8000c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c24:	f7ff ffc4 	bl	8000bb0 <__aeabi_cdrcmple>
 8000c28:	bf34      	ite	cc
 8000c2a:	2001      	movcc	r0, #1
 8000c2c:	2000      	movcs	r0, #0
 8000c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c32:	bf00      	nop

08000c34 <__aeabi_dcmpun>:
 8000c34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c3c:	d102      	bne.n	8000c44 <__aeabi_dcmpun+0x10>
 8000c3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c42:	d10a      	bne.n	8000c5a <__aeabi_dcmpun+0x26>
 8000c44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c4c:	d102      	bne.n	8000c54 <__aeabi_dcmpun+0x20>
 8000c4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c52:	d102      	bne.n	8000c5a <__aeabi_dcmpun+0x26>
 8000c54:	f04f 0000 	mov.w	r0, #0
 8000c58:	4770      	bx	lr
 8000c5a:	f04f 0001 	mov.w	r0, #1
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_d2iz>:
 8000c60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c68:	d215      	bcs.n	8000c96 <__aeabi_d2iz+0x36>
 8000c6a:	d511      	bpl.n	8000c90 <__aeabi_d2iz+0x30>
 8000c6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c74:	d912      	bls.n	8000c9c <__aeabi_d2iz+0x3c>
 8000c76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c86:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d105      	bne.n	8000ca8 <__aeabi_d2iz+0x48>
 8000c9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_frsub>:
 8000cb0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	e002      	b.n	8000cbc <__addsf3>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_fsub>:
 8000cb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cbc <__addsf3>:
 8000cbc:	0042      	lsls	r2, r0, #1
 8000cbe:	bf1f      	itttt	ne
 8000cc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cc4:	ea92 0f03 	teqne	r2, r3
 8000cc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ccc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd0:	d06a      	beq.n	8000da8 <__addsf3+0xec>
 8000cd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cda:	bfc1      	itttt	gt
 8000cdc:	18d2      	addgt	r2, r2, r3
 8000cde:	4041      	eorgt	r1, r0
 8000ce0:	4048      	eorgt	r0, r1
 8000ce2:	4041      	eorgt	r1, r0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	2b19      	cmp	r3, #25
 8000cea:	bf88      	it	hi
 8000cec:	4770      	bxhi	lr
 8000cee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cfa:	bf18      	it	ne
 8000cfc:	4240      	negne	r0, r0
 8000cfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d0a:	bf18      	it	ne
 8000d0c:	4249      	negne	r1, r1
 8000d0e:	ea92 0f03 	teq	r2, r3
 8000d12:	d03f      	beq.n	8000d94 <__addsf3+0xd8>
 8000d14:	f1a2 0201 	sub.w	r2, r2, #1
 8000d18:	fa41 fc03 	asr.w	ip, r1, r3
 8000d1c:	eb10 000c 	adds.w	r0, r0, ip
 8000d20:	f1c3 0320 	rsb	r3, r3, #32
 8000d24:	fa01 f103 	lsl.w	r1, r1, r3
 8000d28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2c:	d502      	bpl.n	8000d34 <__addsf3+0x78>
 8000d2e:	4249      	negs	r1, r1
 8000d30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d38:	d313      	bcc.n	8000d62 <__addsf3+0xa6>
 8000d3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d3e:	d306      	bcc.n	8000d4e <__addsf3+0x92>
 8000d40:	0840      	lsrs	r0, r0, #1
 8000d42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d46:	f102 0201 	add.w	r2, r2, #1
 8000d4a:	2afe      	cmp	r2, #254	; 0xfe
 8000d4c:	d251      	bcs.n	8000df2 <__addsf3+0x136>
 8000d4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	ea40 0003 	orr.w	r0, r0, r3
 8000d60:	4770      	bx	lr
 8000d62:	0049      	lsls	r1, r1, #1
 8000d64:	eb40 0000 	adc.w	r0, r0, r0
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d70:	d2ed      	bcs.n	8000d4e <__addsf3+0x92>
 8000d72:	fab0 fc80 	clz	ip, r0
 8000d76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d82:	bfaa      	itet	ge
 8000d84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d88:	4252      	neglt	r2, r2
 8000d8a:	4318      	orrge	r0, r3
 8000d8c:	bfbc      	itt	lt
 8000d8e:	40d0      	lsrlt	r0, r2
 8000d90:	4318      	orrlt	r0, r3
 8000d92:	4770      	bx	lr
 8000d94:	f092 0f00 	teq	r2, #0
 8000d98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d9c:	bf06      	itte	eq
 8000d9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000da2:	3201      	addeq	r2, #1
 8000da4:	3b01      	subne	r3, #1
 8000da6:	e7b5      	b.n	8000d14 <__addsf3+0x58>
 8000da8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db0:	bf18      	it	ne
 8000db2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db6:	d021      	beq.n	8000dfc <__addsf3+0x140>
 8000db8:	ea92 0f03 	teq	r2, r3
 8000dbc:	d004      	beq.n	8000dc8 <__addsf3+0x10c>
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	4608      	moveq	r0, r1
 8000dc6:	4770      	bx	lr
 8000dc8:	ea90 0f01 	teq	r0, r1
 8000dcc:	bf1c      	itt	ne
 8000dce:	2000      	movne	r0, #0
 8000dd0:	4770      	bxne	lr
 8000dd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dd6:	d104      	bne.n	8000de2 <__addsf3+0x126>
 8000dd8:	0040      	lsls	r0, r0, #1
 8000dda:	bf28      	it	cs
 8000ddc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000de6:	bf3c      	itt	cc
 8000de8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dec:	4770      	bxcc	lr
 8000dee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000df2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000df6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfa:	4770      	bx	lr
 8000dfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e00:	bf16      	itet	ne
 8000e02:	4608      	movne	r0, r1
 8000e04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e08:	4601      	movne	r1, r0
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	bf06      	itte	eq
 8000e0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e12:	ea90 0f01 	teqeq	r0, r1
 8000e16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_ui2f>:
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	e004      	b.n	8000e2c <__aeabi_i2f+0x8>
 8000e22:	bf00      	nop

08000e24 <__aeabi_i2f>:
 8000e24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e28:	bf48      	it	mi
 8000e2a:	4240      	negmi	r0, r0
 8000e2c:	ea5f 0c00 	movs.w	ip, r0
 8000e30:	bf08      	it	eq
 8000e32:	4770      	bxeq	lr
 8000e34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e38:	4601      	mov	r1, r0
 8000e3a:	f04f 0000 	mov.w	r0, #0
 8000e3e:	e01c      	b.n	8000e7a <__aeabi_l2f+0x2a>

08000e40 <__aeabi_ul2f>:
 8000e40:	ea50 0201 	orrs.w	r2, r0, r1
 8000e44:	bf08      	it	eq
 8000e46:	4770      	bxeq	lr
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e00a      	b.n	8000e64 <__aeabi_l2f+0x14>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_l2f>:
 8000e50:	ea50 0201 	orrs.w	r2, r0, r1
 8000e54:	bf08      	it	eq
 8000e56:	4770      	bxeq	lr
 8000e58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e5c:	d502      	bpl.n	8000e64 <__aeabi_l2f+0x14>
 8000e5e:	4240      	negs	r0, r0
 8000e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e64:	ea5f 0c01 	movs.w	ip, r1
 8000e68:	bf02      	ittt	eq
 8000e6a:	4684      	moveq	ip, r0
 8000e6c:	4601      	moveq	r1, r0
 8000e6e:	2000      	moveq	r0, #0
 8000e70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e74:	bf08      	it	eq
 8000e76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e7e:	fabc f28c 	clz	r2, ip
 8000e82:	3a08      	subs	r2, #8
 8000e84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e88:	db10      	blt.n	8000eac <__aeabi_l2f+0x5c>
 8000e8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8e:	4463      	add	r3, ip
 8000e90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	f020 0001 	biceq.w	r0, r0, #1
 8000eaa:	4770      	bx	lr
 8000eac:	f102 0220 	add.w	r2, r2, #32
 8000eb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ebc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_f2iz>:
 8000ecc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ed4:	d30f      	bcc.n	8000ef6 <__aeabi_f2iz+0x2a>
 8000ed6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ede:	d90d      	bls.n	8000efc <__aeabi_f2iz+0x30>
 8000ee0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ee8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000eec:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef0:	bf18      	it	ne
 8000ef2:	4240      	negne	r0, r0
 8000ef4:	4770      	bx	lr
 8000ef6:	f04f 0000 	mov.w	r0, #0
 8000efa:	4770      	bx	lr
 8000efc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f00:	d101      	bne.n	8000f06 <__aeabi_f2iz+0x3a>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d105      	bne.n	8000f12 <__aeabi_f2iz+0x46>
 8000f06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f0a:	bf08      	it	eq
 8000f0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f10:	4770      	bx	lr
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	4770      	bx	lr

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f1c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	2400      	movs	r4, #0
 8000f20:	9404      	str	r4, [sp, #16]
 8000f22:	9405      	str	r4, [sp, #20]
 8000f24:	9406      	str	r4, [sp, #24]
 8000f26:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <MX_GPIO_Init+0xd0>)
 8000f2a:	699a      	ldr	r2, [r3, #24]
 8000f2c:	f042 0210 	orr.w	r2, r2, #16
 8000f30:	619a      	str	r2, [r3, #24]
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	f002 0210 	and.w	r2, r2, #16
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	619a      	str	r2, [r3, #24]
 8000f44:	699a      	ldr	r2, [r3, #24]
 8000f46:	f002 0220 	and.w	r2, r2, #32
 8000f4a:	9201      	str	r2, [sp, #4]
 8000f4c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	f042 0204 	orr.w	r2, r2, #4
 8000f54:	619a      	str	r2, [r3, #24]
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	f002 0204 	and.w	r2, r2, #4
 8000f5c:	9202      	str	r2, [sp, #8]
 8000f5e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	f042 0208 	orr.w	r2, r2, #8
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	9303      	str	r3, [sp, #12]
 8000f70:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 8000f72:	4e1e      	ldr	r6, [pc, #120]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f74:	4622      	mov	r2, r4
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	f001 f940 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LCD_CS_GPIO_Port, PIN_LCD_CS_Pin, GPIO_PIN_RESET);
 8000f80:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000ff0 <MX_GPIO_Init+0xd8>
 8000f84:	4622      	mov	r2, r4
 8000f86:	2140      	movs	r1, #64	; 0x40
 8000f88:	4640      	mov	r0, r8
 8000f8a:	f001 f939 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f8e:	4d19      	ldr	r5, [pc, #100]	; (8000ff4 <MX_GPIO_Init+0xdc>)
 8000f90:	4622      	mov	r2, r4
 8000f92:	2138      	movs	r1, #56	; 0x38
 8000f94:	4628      	mov	r0, r5
 8000f96:	f001 f933 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN_LED_Pin */
  GPIO_InitStruct.Pin = PIN_LED_Pin;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fa0:	2311      	movs	r3, #17
 8000fa2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa6:	f04f 0903 	mov.w	r9, #3
 8000faa:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(PIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000fae:	a904      	add	r1, sp, #16
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	f001 f813 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_LCD_CS_Pin */
  GPIO_InitStruct.Pin = PIN_LCD_CS_Pin;
 8000fb6:	2340      	movs	r3, #64	; 0x40
 8000fb8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2701      	movs	r7, #1
 8000fbc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fbe:	2602      	movs	r6, #2
 8000fc0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(PIN_LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	a904      	add	r1, sp, #16
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f001 f807 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fce:	2338      	movs	r3, #56	; 0x38
 8000fd0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	a904      	add	r1, sp, #16
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f000 fffe 	bl	8001fdc <HAL_GPIO_Init>

}
 8000fe0:	b009      	add	sp, #36	; 0x24
 8000fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <MX_DMA_Init>:
{
 8000ff8:	b500      	push	{lr}
 8000ffa:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_DMA_Init+0x40>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	f042 0201 	orr.w	r2, r2, #1
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	4611      	mov	r1, r2
 8001014:	200b      	movs	r0, #11
 8001016:	f000 fe5f 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800101a:	200b      	movs	r0, #11
 800101c:	f000 fe94 	bl	8001d48 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	4611      	mov	r1, r2
 8001024:	2010      	movs	r0, #16
 8001026:	f000 fe57 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800102a:	2010      	movs	r0, #16
 800102c:	f000 fe8c 	bl	8001d48 <HAL_NVIC_EnableIRQ>
}
 8001030:	b003      	add	sp, #12
 8001032:	f85d fb04 	ldr.w	pc, [sp], #4
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <everythingElse>:
	if (!elseDone){
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <everythingElse+0x10>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b913      	cbnz	r3, 8001048 <everythingElse+0xc>
	elseDone = 1;
 8001042:	4b02      	ldr	r3, [pc, #8]	; (800104c <everythingElse+0x10>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001fc 	.word	0x200001fc

08001050 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001052:	e7fe      	b.n	8001052 <Error_Handler+0x2>

08001054 <MX_ADC1_Init>:
{
 8001054:	b500      	push	{lr}
 8001056:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001058:	2300      	movs	r3, #0
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8001060:	4816      	ldr	r0, [pc, #88]	; (80010bc <MX_ADC1_Init+0x68>)
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_ADC1_Init+0x6c>)
 8001064:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106a:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800106c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 8001070:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001074:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	f000 fd96 	bl	8001bac <HAL_ADC_Init>
 8001080:	b9b0      	cbnz	r0, 80010b0 <MX_ADC1_Init+0x5c>
  sConfig.Channel = ADC_CHANNEL_0;
 8001082:	2300      	movs	r3, #0
 8001084:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001086:	2301      	movs	r3, #1
 8001088:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800108a:	2306      	movs	r3, #6
 800108c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	a901      	add	r1, sp, #4
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <MX_ADC1_Init+0x68>)
 8001092:	f000 fbe1 	bl	8001858 <HAL_ADC_ConfigChannel>
 8001096:	b968      	cbnz	r0, 80010b4 <MX_ADC1_Init+0x60>
  sConfig.Channel = ADC_CHANNEL_1;
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800109c:	2302      	movs	r3, #2
 800109e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	a901      	add	r1, sp, #4
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_ADC1_Init+0x68>)
 80010a4:	f000 fbd8 	bl	8001858 <HAL_ADC_ConfigChannel>
 80010a8:	b930      	cbnz	r0, 80010b8 <MX_ADC1_Init+0x64>
}
 80010aa:	b005      	add	sp, #20
 80010ac:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010b0:	f7ff ffce 	bl	8001050 <Error_Handler>
    Error_Handler();
 80010b4:	f7ff ffcc 	bl	8001050 <Error_Handler>
    Error_Handler();
 80010b8:	f7ff ffca 	bl	8001050 <Error_Handler>
 80010bc:	20000200 	.word	0x20000200
 80010c0:	40012400 	.word	0x40012400

080010c4 <MX_TIM1_Init>:
{
 80010c4:	b510      	push	{r4, lr}
 80010c6:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c8:	2400      	movs	r4, #0
 80010ca:	9412      	str	r4, [sp, #72]	; 0x48
 80010cc:	9413      	str	r4, [sp, #76]	; 0x4c
 80010ce:	9414      	str	r4, [sp, #80]	; 0x50
 80010d0:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d2:	9410      	str	r4, [sp, #64]	; 0x40
 80010d4:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d6:	9409      	str	r4, [sp, #36]	; 0x24
 80010d8:	940a      	str	r4, [sp, #40]	; 0x28
 80010da:	940b      	str	r4, [sp, #44]	; 0x2c
 80010dc:	940c      	str	r4, [sp, #48]	; 0x30
 80010de:	940d      	str	r4, [sp, #52]	; 0x34
 80010e0:	940e      	str	r4, [sp, #56]	; 0x38
 80010e2:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e4:	2220      	movs	r2, #32
 80010e6:	4621      	mov	r1, r4
 80010e8:	a801      	add	r0, sp, #4
 80010ea:	f003 ffc3 	bl	8005074 <memset>
  htim1.Instance = TIM1;
 80010ee:	4831      	ldr	r0, [pc, #196]	; (80011b4 <MX_TIM1_Init+0xf0>)
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <MX_TIM1_Init+0xf4>)
 80010f2:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 2-1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1024-1;
 80010fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80010fe:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001102:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001108:	f001 ff6e 	bl	8002fe8 <HAL_TIM_Base_Init>
 800110c:	2800      	cmp	r0, #0
 800110e:	d142      	bne.n	8001196 <MX_TIM1_Init+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001116:	a912      	add	r1, sp, #72	; 0x48
 8001118:	4826      	ldr	r0, [pc, #152]	; (80011b4 <MX_TIM1_Init+0xf0>)
 800111a:	f002 f863 	bl	80031e4 <HAL_TIM_ConfigClockSource>
 800111e:	2800      	cmp	r0, #0
 8001120:	d13b      	bne.n	800119a <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001122:	4824      	ldr	r0, [pc, #144]	; (80011b4 <MX_TIM1_Init+0xf0>)
 8001124:	f001 ff8c 	bl	8003040 <HAL_TIM_PWM_Init>
 8001128:	2800      	cmp	r0, #0
 800112a:	d138      	bne.n	800119e <MX_TIM1_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001132:	a910      	add	r1, sp, #64	; 0x40
 8001134:	481f      	ldr	r0, [pc, #124]	; (80011b4 <MX_TIM1_Init+0xf0>)
 8001136:	f002 facd 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	2800      	cmp	r0, #0
 800113c:	d131      	bne.n	80011a2 <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113e:	2360      	movs	r3, #96	; 0x60
 8001140:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001146:	2300      	movs	r3, #0
 8001148:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800114e:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001150:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001152:	2204      	movs	r2, #4
 8001154:	a909      	add	r1, sp, #36	; 0x24
 8001156:	4817      	ldr	r0, [pc, #92]	; (80011b4 <MX_TIM1_Init+0xf0>)
 8001158:	f001 ffd0 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 800115c:	bb18      	cbnz	r0, 80011a6 <MX_TIM1_Init+0xe2>
  sConfigOC.Pulse = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001162:	2208      	movs	r2, #8
 8001164:	a909      	add	r1, sp, #36	; 0x24
 8001166:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM1_Init+0xf0>)
 8001168:	f001 ffc8 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 800116c:	b9e8      	cbnz	r0, 80011aa <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001172:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001174:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001176:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001178:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001180:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001182:	a901      	add	r1, sp, #4
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_TIM1_Init+0xf0>)
 8001186:	f002 fadb 	bl	8003740 <HAL_TIMEx_ConfigBreakDeadTime>
 800118a:	b980      	cbnz	r0, 80011ae <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_TIM1_Init+0xf0>)
 800118e:	f000 f9ff 	bl	8001590 <HAL_TIM_MspPostInit>
}
 8001192:	b016      	add	sp, #88	; 0x58
 8001194:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001196:	f7ff ff5b 	bl	8001050 <Error_Handler>
    Error_Handler();
 800119a:	f7ff ff59 	bl	8001050 <Error_Handler>
    Error_Handler();
 800119e:	f7ff ff57 	bl	8001050 <Error_Handler>
    Error_Handler();
 80011a2:	f7ff ff55 	bl	8001050 <Error_Handler>
    Error_Handler();
 80011a6:	f7ff ff53 	bl	8001050 <Error_Handler>
    Error_Handler();
 80011aa:	f7ff ff51 	bl	8001050 <Error_Handler>
    Error_Handler();
 80011ae:	f7ff ff4f 	bl	8001050 <Error_Handler>
 80011b2:	bf00      	nop
 80011b4:	20000310 	.word	0x20000310
 80011b8:	40012c00 	.word	0x40012c00

080011bc <MX_SPI1_Init>:
{
 80011bc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80011be:	480e      	ldr	r0, [pc, #56]	; (80011f8 <MX_SPI1_Init+0x3c>)
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI1_Init+0x40>)
 80011c2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011c8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	2300      	movs	r3, #0
 80011cc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ce:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011d2:	2201      	movs	r2, #1
 80011d4:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011da:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011dc:	2230      	movs	r2, #48	; 0x30
 80011de:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e6:	230a      	movs	r3, #10
 80011e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ea:	f001 fc23 	bl	8002a34 <HAL_SPI_Init>
 80011ee:	b900      	cbnz	r0, 80011f2 <MX_SPI1_Init+0x36>
}
 80011f0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011f2:	f7ff ff2d 	bl	8001050 <Error_Handler>
 80011f6:	bf00      	nop
 80011f8:	200002b8 	.word	0x200002b8
 80011fc:	40013000 	.word	0x40013000

08001200 <MX_TIM3_Init>:
{
 8001200:	b500      	push	{lr}
 8001202:	b093      	sub	sp, #76	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001204:	2300      	movs	r3, #0
 8001206:	930e      	str	r3, [sp, #56]	; 0x38
 8001208:	930f      	str	r3, [sp, #60]	; 0x3c
 800120a:	9310      	str	r3, [sp, #64]	; 0x40
 800120c:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800120e:	9309      	str	r3, [sp, #36]	; 0x24
 8001210:	930a      	str	r3, [sp, #40]	; 0x28
 8001212:	930b      	str	r3, [sp, #44]	; 0x2c
 8001214:	930c      	str	r3, [sp, #48]	; 0x30
 8001216:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	9307      	str	r3, [sp, #28]
 800121a:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	9303      	str	r3, [sp, #12]
 8001224:	9304      	str	r3, [sp, #16]
 8001226:	9305      	str	r3, [sp, #20]
 8001228:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 800122a:	4823      	ldr	r0, [pc, #140]	; (80012b8 <MX_TIM3_Init+0xb8>)
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <MX_TIM3_Init+0xbc>)
 800122e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 2-1;
 8001230:	2201      	movs	r2, #1
 8001232:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1024-1;
 8001236:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800123a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001240:	f001 fed2 	bl	8002fe8 <HAL_TIM_Base_Init>
 8001244:	bb58      	cbnz	r0, 800129e <MX_TIM3_Init+0x9e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800124c:	a90e      	add	r1, sp, #56	; 0x38
 800124e:	481a      	ldr	r0, [pc, #104]	; (80012b8 <MX_TIM3_Init+0xb8>)
 8001250:	f001 ffc8 	bl	80031e4 <HAL_TIM_ConfigClockSource>
 8001254:	bb28      	cbnz	r0, 80012a2 <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <MX_TIM3_Init+0xb8>)
 8001258:	f001 fef2 	bl	8003040 <HAL_TIM_PWM_Init>
 800125c:	bb18      	cbnz	r0, 80012a6 <MX_TIM3_Init+0xa6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800125e:	2306      	movs	r3, #6
 8001260:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001262:	2300      	movs	r3, #0
 8001264:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001266:	a909      	add	r1, sp, #36	; 0x24
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_TIM3_Init+0xb8>)
 800126a:	f002 f86f 	bl	800334c <HAL_TIM_SlaveConfigSynchro>
 800126e:	b9e0      	cbnz	r0, 80012aa <MX_TIM3_Init+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001270:	2320      	movs	r3, #32
 8001272:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001278:	a907      	add	r1, sp, #28
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_TIM3_Init+0xb8>)
 800127c:	f002 fa2a 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	b9a8      	cbnz	r0, 80012ae <MX_TIM3_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001282:	2360      	movs	r3, #96	; 0x60
 8001284:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001286:	2200      	movs	r2, #0
 8001288:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128e:	4669      	mov	r1, sp
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <MX_TIM3_Init+0xb8>)
 8001292:	f001 ff33 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 8001296:	b960      	cbnz	r0, 80012b2 <MX_TIM3_Init+0xb2>
}
 8001298:	b013      	add	sp, #76	; 0x4c
 800129a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800129e:	f7ff fed7 	bl	8001050 <Error_Handler>
    Error_Handler();
 80012a2:	f7ff fed5 	bl	8001050 <Error_Handler>
    Error_Handler();
 80012a6:	f7ff fed3 	bl	8001050 <Error_Handler>
    Error_Handler();
 80012aa:	f7ff fed1 	bl	8001050 <Error_Handler>
    Error_Handler();
 80012ae:	f7ff fecf 	bl	8001050 <Error_Handler>
    Error_Handler();
 80012b2:	f7ff fecd 	bl	8001050 <Error_Handler>
 80012b6:	bf00      	nop
 80012b8:	20000358 	.word	0x20000358
 80012bc:	40000400 	.word	0x40000400

080012c0 <SystemClock_Config>:
{
 80012c0:	b500      	push	{lr}
 80012c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c4:	2228      	movs	r2, #40	; 0x28
 80012c6:	2100      	movs	r1, #0
 80012c8:	eb0d 0002 	add.w	r0, sp, r2
 80012cc:	f003 fed2 	bl	8005074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	9305      	str	r3, [sp, #20]
 80012d4:	9306      	str	r3, [sp, #24]
 80012d6:	9307      	str	r3, [sp, #28]
 80012d8:	9308      	str	r3, [sp, #32]
 80012da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	9303      	str	r3, [sp, #12]
 80012e2:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e4:	2201      	movs	r2, #1
 80012e6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2202      	movs	r2, #2
 80012f2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012fa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	a80a      	add	r0, sp, #40	; 0x28
 80012fe:	f000 ff9b 	bl	8002238 <HAL_RCC_OscConfig>
 8001302:	b9c8      	cbnz	r0, 8001338 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2102      	movs	r1, #2
 800130a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001314:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001318:	a805      	add	r0, sp, #20
 800131a:	f001 f9cd 	bl	80026b8 <HAL_RCC_ClockConfig>
 800131e:	b968      	cbnz	r0, 800133c <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001320:	2302      	movs	r3, #2
 8001322:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001328:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132a:	a801      	add	r0, sp, #4
 800132c:	f001 fa7a 	bl	8002824 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	b930      	cbnz	r0, 8001340 <SystemClock_Config+0x80>
}
 8001332:	b015      	add	sp, #84	; 0x54
 8001334:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001338:	f7ff fe8a 	bl	8001050 <Error_Handler>
    Error_Handler();
 800133c:	f7ff fe88 	bl	8001050 <Error_Handler>
    Error_Handler();
 8001340:	f7ff fe86 	bl	8001050 <Error_Handler>

08001344 <main>:
{
 8001344:	b508      	push	{r3, lr}
  HAL_Init();
 8001346:	f000 fa13 	bl	8001770 <HAL_Init>
  SystemClock_Config();
 800134a:	f7ff ffb9 	bl	80012c0 <SystemClock_Config>
  MX_GPIO_Init();
 800134e:	f7ff fde3 	bl	8000f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f7ff fe51 	bl	8000ff8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001356:	f7ff fe7d 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 800135a:	f7ff feb3 	bl	80010c4 <MX_TIM1_Init>
  MX_SPI1_Init();
 800135e:	f7ff ff2d 	bl	80011bc <MX_SPI1_Init>
  MX_TIM3_Init();
 8001362:	f7ff ff4d 	bl	8001200 <MX_TIM3_Init>
  dspInit();
 8001366:	f002 fc23 	bl	8003bb0 <dspInit>
  fftInit();
 800136a:	f002 fd1b 	bl	8003da4 <fftInit>
  dspStart();
 800136e:	f002 fc43 	bl	8003bf8 <dspStart>
  HAL_Delay(100);
 8001372:	2064      	movs	r0, #100	; 0x64
 8001374:	f000 fa20 	bl	80017b8 <HAL_Delay>
  HAL_GPIO_WritePin(PIN_LCD_CS_GPIO_Port, PIN_LCD_CS_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <main+0x6c>)
 800137e:	f000 ff3f 	bl	8002200 <HAL_GPIO_WritePin>
  ST7920_Init();
 8001382:	f002 fb7f 	bl	8003a84 <ST7920_Init>
  ST7920_GraphicMode(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f002 fa5c 	bl	8003844 <ST7920_GraphicMode>
  ST7920_Clear();
 800138c:	f002 fb42 	bl	8003a14 <ST7920_Clear>
  SetPixel(10, 10);
 8001390:	210a      	movs	r1, #10
 8001392:	4608      	mov	r0, r1
 8001394:	f002 fba6 	bl	8003ae4 <SetPixel>
  GLCD_Font_Print(10, 3, "hello");
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <main+0x70>)
 800139a:	2103      	movs	r1, #3
 800139c:	200a      	movs	r0, #10
 800139e:	f002 fbe3 	bl	8003b68 <GLCD_Font_Print>
  ST7920_Update();
 80013a2:	f002 fb2b 	bl	80039fc <ST7920_Update>
	 dspProc();
 80013a6:	f002 fc97 	bl	8003cd8 <dspProc>
	 everythingElse();
 80013aa:	f7ff fe47 	bl	800103c <everythingElse>
  while (1)
 80013ae:	e7fa      	b.n	80013a6 <main+0x62>
 80013b0:	40010800 	.word	0x40010800
 80013b4:	08007abc 	.word	0x08007abc

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_MspInit+0x3c>)
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	619a      	str	r2, [r3, #24]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	f002 0201 	and.w	r2, r2, #1
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d4:	61da      	str	r2, [r3, #28]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_MspInit+0x40>)
 80013e2:	6853      	ldr	r3, [r2, #4]
 80013e4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	b002      	add	sp, #8
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000

080013fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	2300      	movs	r3, #0
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	9303      	str	r3, [sp, #12]
 8001406:	9304      	str	r3, [sp, #16]
 8001408:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 800140a:	6802      	ldr	r2, [r0, #0]
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_ADC_MspInit+0x8c>)
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001412:	b006      	add	sp, #24
 8001414:	bd10      	pop	{r4, pc}
 8001416:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001418:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	f042 0204 	orr.w	r2, r2, #4
 8001434:	619a      	str	r2, [r3, #24]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001440:	2303      	movs	r3, #3
 8001442:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001444:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	a902      	add	r1, sp, #8
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <HAL_ADC_MspInit+0x90>)
 800144a:	f000 fdc7 	bl	8001fdc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800144e:	4810      	ldr	r0, [pc, #64]	; (8001490 <HAL_ADC_MspInit+0x94>)
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_ADC_MspInit+0x98>)
 8001452:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001454:	2300      	movs	r3, #0
 8001456:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001458:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800145e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001462:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001468:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800146a:	2320      	movs	r3, #32
 800146c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800146e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001472:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001474:	f000 fca0 	bl	8001db8 <HAL_DMA_Init>
 8001478:	b918      	cbnz	r0, 8001482 <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_ADC_MspInit+0x94>)
 800147c:	6223      	str	r3, [r4, #32]
 800147e:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001480:	e7c7      	b.n	8001412 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8001482:	f7ff fde5 	bl	8001050 <Error_Handler>
 8001486:	e7f8      	b.n	800147a <HAL_ADC_MspInit+0x7e>
 8001488:	40012400 	.word	0x40012400
 800148c:	40010800 	.word	0x40010800
 8001490:	20000230 	.word	0x20000230
 8001494:	40020008 	.word	0x40020008

08001498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001498:	b500      	push	{lr}
 800149a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	2300      	movs	r3, #0
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	9303      	str	r3, [sp, #12]
 80014a2:	9304      	str	r3, [sp, #16]
 80014a4:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 80014a6:	6802      	ldr	r2, [r0, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_SPI_MspInit+0x5c>)
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d002      	beq.n	80014b4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ae:	b007      	add	sp, #28
 80014b0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014be:	619a      	str	r2, [r3, #24]
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80014c6:	9200      	str	r2, [sp, #0]
 80014c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	f042 0204 	orr.w	r2, r2, #4
 80014d0:	619a      	str	r2, [r3, #24]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014dc:	23a0      	movs	r3, #160	; 0xa0
 80014de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	a902      	add	r1, sp, #8
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <HAL_SPI_MspInit+0x60>)
 80014ec:	f000 fd76 	bl	8001fdc <HAL_GPIO_Init>
}
 80014f0:	e7dd      	b.n	80014ae <HAL_SPI_MspInit+0x16>
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	40010800 	.word	0x40010800

080014fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014fc:	b510      	push	{r4, lr}
 80014fe:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001500:	6803      	ldr	r3, [r0, #0]
 8001502:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_TIM_Base_MspInit+0x80>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d004      	beq.n	8001512 <HAL_TIM_Base_MspInit+0x16>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_TIM_Base_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d02a      	beq.n	8001564 <HAL_TIM_Base_MspInit+0x68>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800150e:	b002      	add	sp, #8
 8001510:	bd10      	pop	{r4, pc}
 8001512:	4604      	mov	r4, r0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_TIM_Base_MspInit+0x88>)
 8001516:	699a      	ldr	r2, [r3, #24]
 8001518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800151c:	619a      	str	r2, [r3, #24]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8001528:	4817      	ldr	r0, [pc, #92]	; (8001588 <HAL_TIM_Base_MspInit+0x8c>)
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_TIM_Base_MspInit+0x90>)
 800152c:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152e:	2310      	movs	r3, #16
 8001530:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800153a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153e:	6103      	str	r3, [r0, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	6143      	str	r3, [r0, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8001546:	2320      	movs	r3, #32
 8001548:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800154a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001550:	f000 fc32 	bl	8001db8 <HAL_DMA_Init>
 8001554:	b918      	cbnz	r0, 800155e <HAL_TIM_Base_MspInit+0x62>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_TIM_Base_MspInit+0x8c>)
 8001558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800155a:	625c      	str	r4, [r3, #36]	; 0x24
 800155c:	e7d7      	b.n	800150e <HAL_TIM_Base_MspInit+0x12>
      Error_Handler();
 800155e:	f7ff fd77 	bl	8001050 <Error_Handler>
 8001562:	e7f8      	b.n	8001556 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_TIM_Base_MspInit+0x88>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	f042 0202 	orr.w	r2, r2, #2
 800156c:	61da      	str	r2, [r3, #28]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	9b01      	ldr	r3, [sp, #4]
}
 8001578:	e7c9      	b.n	800150e <HAL_TIM_Base_MspInit+0x12>
 800157a:	bf00      	nop
 800157c:	40012c00 	.word	0x40012c00
 8001580:	40000400 	.word	0x40000400
 8001584:	40021000 	.word	0x40021000
 8001588:	20000274 	.word	0x20000274
 800158c:	4002006c 	.word	0x4002006c

08001590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001590:	b500      	push	{lr}
 8001592:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	2300      	movs	r3, #0
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	9303      	str	r3, [sp, #12]
 800159a:	9304      	str	r3, [sp, #16]
 800159c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800159e:	6802      	ldr	r2, [r0, #0]
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_MspPostInit+0x48>)
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d002      	beq.n	80015ac <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015a6:	b007      	add	sp, #28
 80015a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	a902      	add	r1, sp, #8
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <HAL_TIM_MspPostInit+0x4c>)
 80015d2:	f000 fd03 	bl	8001fdc <HAL_GPIO_Init>
}
 80015d6:	e7e6      	b.n	80015a6 <HAL_TIM_MspPostInit+0x16>
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	40010800 	.word	0x40010800

080015e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler>

080015e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler>

080015e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler>

080015e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler>

080015e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler>

080015ea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 f8cf 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bd08      	pop	{r3, pc}

080015f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015fa:	4802      	ldr	r0, [pc, #8]	; (8001604 <DMA1_Channel1_IRQHandler+0xc>)
 80015fc:	f000 fc4c 	bl	8001e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001600:	bd08      	pop	{r3, pc}
 8001602:	bf00      	nop
 8001604:	20000230 	.word	0x20000230

08001608 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA1_Channel6_IRQHandler+0xc>)
 800160c:	f000 fc44 	bl	8001e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001610:	bd08      	pop	{r3, pc}
 8001612:	bf00      	nop
 8001614:	20000274 	.word	0x20000274

08001618 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001618:	2001      	movs	r0, #1
 800161a:	4770      	bx	lr

0800161c <_kill>:

int _kill(int pid, int sig)
{
 800161c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800161e:	f003 fcff 	bl	8005020 <__errno>
 8001622:	2316      	movs	r3, #22
 8001624:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001626:	f04f 30ff 	mov.w	r0, #4294967295
 800162a:	bd08      	pop	{r3, pc}

0800162c <_exit>:

void _exit (int status)
{
 800162c:	b508      	push	{r3, lr}
	_kill(status, -1);
 800162e:	f04f 31ff 	mov.w	r1, #4294967295
 8001632:	f7ff fff3 	bl	800161c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001636:	e7fe      	b.n	8001636 <_exit+0xa>

08001638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b570      	push	{r4, r5, r6, lr}
 800163a:	460c      	mov	r4, r1
 800163c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	2500      	movs	r5, #0
 8001640:	e006      	b.n	8001650 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001642:	f3af 8000 	nop.w
 8001646:	4621      	mov	r1, r4
 8001648:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800164e:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	42b5      	cmp	r5, r6
 8001652:	dbf6      	blt.n	8001642 <_read+0xa>
	}

return len;
}
 8001654:	4630      	mov	r0, r6
 8001656:	bd70      	pop	{r4, r5, r6, pc}

08001658 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	460c      	mov	r4, r1
 800165c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	2500      	movs	r5, #0
 8001660:	e004      	b.n	800166c <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001662:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001666:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	3501      	adds	r5, #1
 800166c:	42b5      	cmp	r5, r6
 800166e:	dbf8      	blt.n	8001662 <_write+0xa>
	}
	return len;
}
 8001670:	4630      	mov	r0, r6
 8001672:	bd70      	pop	{r4, r5, r6, pc}

08001674 <_close>:

int _close(int file)
{
	return -1;
}
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001680:	2000      	movs	r0, #0
 8001682:	4770      	bx	lr

08001684 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001684:	2001      	movs	r0, #1
 8001686:	4770      	bx	lr

08001688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001688:	2000      	movs	r0, #0
 800168a:	4770      	bx	lr

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b510      	push	{r4, lr}
 800168e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <_sbrk+0x38>)
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <_sbrk+0x40>)
 8001696:	6800      	ldr	r0, [r0, #0]
 8001698:	b140      	cbz	r0, 80016ac <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <_sbrk+0x40>)
 800169c:	6800      	ldr	r0, [r0, #0]
 800169e:	4403      	add	r3, r0
 80016a0:	1a52      	subs	r2, r2, r1
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d806      	bhi.n	80016b4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <_sbrk+0x40>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80016aa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <_sbrk+0x40>)
 80016ae:	4c08      	ldr	r4, [pc, #32]	; (80016d0 <_sbrk+0x44>)
 80016b0:	6004      	str	r4, [r0, #0]
 80016b2:	e7f2      	b.n	800169a <_sbrk+0xe>
    errno = ENOMEM;
 80016b4:	f003 fcb4 	bl	8005020 <__errno>
 80016b8:	230c      	movs	r3, #12
 80016ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	e7f3      	b.n	80016aa <_sbrk+0x1e>
 80016c2:	bf00      	nop
 80016c4:	20005000 	.word	0x20005000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	200003a0 	.word	0x200003a0
 80016d0:	20001d70 	.word	0x20001d70

080016d4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	4770      	bx	lr
	...

080016d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
     ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	; (800171c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016fe:	f7ff ffe9 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 fc93 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001706:	f7ff fe1d 	bl	8001344 <main>
  bx lr
 800170a:	4770      	bx	lr
     ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001714:	08008604 	.word	0x08008604
  ldr r2, =_sbss
 8001718:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800171c:	20001d6c 	.word	0x20001d6c

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b510      	push	{r4, lr}
 8001726:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_InitTick+0x40>)
 800172a:	7818      	ldrb	r0, [r3, #0]
 800172c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001730:	fbb3 f3f0 	udiv	r3, r3, r0
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <HAL_InitTick+0x44>)
 8001736:	6810      	ldr	r0, [r2, #0]
 8001738:	fbb0 f0f3 	udiv	r0, r0, r3
 800173c:	f000 fb12 	bl	8001d64 <HAL_SYSTICK_Config>
 8001740:	b968      	cbnz	r0, 800175e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	2c0f      	cmp	r4, #15
 8001744:	d901      	bls.n	800174a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001746:	2001      	movs	r0, #1
 8001748:	e00a      	b.n	8001760 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174a:	2200      	movs	r2, #0
 800174c:	4621      	mov	r1, r4
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f000 fac1 	bl	8001cd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_InitTick+0x48>)
 8001758:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2000      	movs	r0, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
}
 8001760:	bd10      	pop	{r4, pc}
 8001762:	bf00      	nop
 8001764:	20000004 	.word	0x20000004
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_Init>:
{
 8001770:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x20>)
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f043 0310 	orr.w	r3, r3, #16
 800177a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 fa99 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	200f      	movs	r0, #15
 8001784:	f7ff ffce 	bl	8001724 <HAL_InitTick>
  HAL_MspInit();
 8001788:	f7ff fe16 	bl	80013b8 <HAL_MspInit>
}
 800178c:	2000      	movs	r0, #0
 800178e:	bd08      	pop	{r3, pc}
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x10>)
 8001796:	6811      	ldr	r1, [r2, #0]
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_IncTick+0x14>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	440b      	add	r3, r1
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200003a4 	.word	0x200003a4
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017ac:	4b01      	ldr	r3, [pc, #4]	; (80017b4 <HAL_GetTick+0x8>)
 80017ae:	6818      	ldr	r0, [r3, #0]
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200003a4 	.word	0x200003a4

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b538      	push	{r3, r4, r5, lr}
 80017ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fff6 	bl	80017ac <HAL_GetTick>
 80017c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80017c6:	d002      	beq.n	80017ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_Delay+0x24>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ce:	f7ff ffed 	bl	80017ac <HAL_GetTick>
 80017d2:	1b40      	subs	r0, r0, r5
 80017d4:	42a0      	cmp	r0, r4
 80017d6:	d3fa      	bcc.n	80017ce <HAL_Delay+0x16>
  {
  }
}
 80017d8:	bd38      	pop	{r3, r4, r5, pc}
 80017da:	bf00      	nop
 80017dc:	20000004 	.word	0x20000004

080017e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017e0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	f012 0f50 	tst.w	r2, #80	; 0x50
 80017ea:	d11e      	bne.n	800182a <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	6892      	ldr	r2, [r2, #8]
 80017f8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80017fc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001800:	d003      	beq.n	800180a <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fa9f 	bl	8003d46 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001808:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800180a:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800180c:	2a00      	cmp	r2, #0
 800180e:	d1f8      	bne.n	8001802 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800181a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800181e:	d1f0      	bne.n	8001802 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
 8001828:	e7eb      	b.n	8001802 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4798      	blx	r3
}
 8001830:	e7ea      	b.n	8001808 <ADC_DMAConvCplt+0x28>

08001832 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001832:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001834:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001836:	f002 fa85 	bl	8003d44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800183a:	bd08      	pop	{r3, pc}

0800183c <HAL_ADC_ErrorCallback>:
}
 800183c:	4770      	bx	lr

0800183e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800183e:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001840:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001842:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001848:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800184a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001852:	f7ff fff3 	bl	800183c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001856:	bd08      	pop	{r3, pc}

08001858 <HAL_ADC_ConfigChannel>:
{ 
 8001858:	b430      	push	{r4, r5}
 800185a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800185c:	2200      	movs	r2, #0
 800185e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001860:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8001864:	2a01      	cmp	r2, #1
 8001866:	f000 8091 	beq.w	800198c <HAL_ADC_ConfigChannel+0x134>
 800186a:	4603      	mov	r3, r0
 800186c:	2201      	movs	r2, #1
 800186e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001872:	684a      	ldr	r2, [r1, #4]
 8001874:	2a06      	cmp	r2, #6
 8001876:	d82d      	bhi.n	80018d4 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001878:	6804      	ldr	r4, [r0, #0]
 800187a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800187c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001880:	3a05      	subs	r2, #5
 8001882:	f04f 0c1f 	mov.w	ip, #31
 8001886:	fa0c fc02 	lsl.w	ip, ip, r2
 800188a:	ea20 000c 	bic.w	r0, r0, ip
 800188e:	680d      	ldr	r5, [r1, #0]
 8001890:	fa05 f202 	lsl.w	r2, r5, r2
 8001894:	4302      	orrs	r2, r0
 8001896:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001898:	680a      	ldr	r2, [r1, #0]
 800189a:	2a09      	cmp	r2, #9
 800189c:	d93a      	bls.n	8001914 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800189e:	681c      	ldr	r4, [r3, #0]
 80018a0:	68e0      	ldr	r0, [r4, #12]
 80018a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018a6:	3a1e      	subs	r2, #30
 80018a8:	f04f 0c07 	mov.w	ip, #7
 80018ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80018b0:	ea20 000c 	bic.w	r0, r0, ip
 80018b4:	688d      	ldr	r5, [r1, #8]
 80018b6:	fa05 f202 	lsl.w	r2, r5, r2
 80018ba:	4302      	orrs	r2, r0
 80018bc:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018be:	680a      	ldr	r2, [r1, #0]
 80018c0:	3a10      	subs	r2, #16
 80018c2:	2a01      	cmp	r2, #1
 80018c4:	d936      	bls.n	8001934 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80018ce:	b002      	add	sp, #8
 80018d0:	bc30      	pop	{r4, r5}
 80018d2:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80018d4:	2a0c      	cmp	r2, #12
 80018d6:	d80e      	bhi.n	80018f6 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018d8:	6805      	ldr	r5, [r0, #0]
 80018da:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018e0:	3a23      	subs	r2, #35	; 0x23
 80018e2:	241f      	movs	r4, #31
 80018e4:	4094      	lsls	r4, r2
 80018e6:	ea20 0004 	bic.w	r0, r0, r4
 80018ea:	680c      	ldr	r4, [r1, #0]
 80018ec:	fa04 f202 	lsl.w	r2, r4, r2
 80018f0:	4302      	orrs	r2, r0
 80018f2:	632a      	str	r2, [r5, #48]	; 0x30
 80018f4:	e7d0      	b.n	8001898 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018f6:	6805      	ldr	r5, [r0, #0]
 80018f8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80018fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018fe:	3a41      	subs	r2, #65	; 0x41
 8001900:	241f      	movs	r4, #31
 8001902:	4094      	lsls	r4, r2
 8001904:	ea20 0004 	bic.w	r0, r0, r4
 8001908:	680c      	ldr	r4, [r1, #0]
 800190a:	fa04 f202 	lsl.w	r2, r4, r2
 800190e:	4302      	orrs	r2, r0
 8001910:	62ea      	str	r2, [r5, #44]	; 0x2c
 8001912:	e7c1      	b.n	8001898 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001914:	681c      	ldr	r4, [r3, #0]
 8001916:	6920      	ldr	r0, [r4, #16]
 8001918:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800191c:	f04f 0c07 	mov.w	ip, #7
 8001920:	fa0c fc02 	lsl.w	ip, ip, r2
 8001924:	ea20 000c 	bic.w	r0, r0, ip
 8001928:	688d      	ldr	r5, [r1, #8]
 800192a:	fa05 f202 	lsl.w	r2, r5, r2
 800192e:	4302      	orrs	r2, r0
 8001930:	6122      	str	r2, [r4, #16]
 8001932:	e7c4      	b.n	80018be <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4816      	ldr	r0, [pc, #88]	; (8001990 <HAL_ADC_ConfigChannel+0x138>)
 8001938:	4282      	cmp	r2, r0
 800193a:	d005      	beq.n	8001948 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800193e:	f042 0220 	orr.w	r2, r2, #32
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001944:	2001      	movs	r0, #1
 8001946:	e7bf      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001948:	6890      	ldr	r0, [r2, #8]
 800194a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800194e:	d11b      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001950:	6890      	ldr	r0, [r2, #8]
 8001952:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001956:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001958:	680a      	ldr	r2, [r1, #0]
 800195a:	2a10      	cmp	r2, #16
 800195c:	d001      	beq.n	8001962 <HAL_ADC_ConfigChannel+0x10a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800195e:	2000      	movs	r0, #0
 8001960:	e7b2      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_ADC_ConfigChannel+0x13c>)
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	490c      	ldr	r1, [pc, #48]	; (8001998 <HAL_ADC_ConfigChannel+0x140>)
 8001968:	fba1 1202 	umull	r1, r2, r1, r2
 800196c:	0c92      	lsrs	r2, r2, #18
 800196e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001972:	0052      	lsls	r2, r2, #1
 8001974:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001976:	e002      	b.n	800197e <HAL_ADC_ConfigChannel+0x126>
            wait_loop_index--;
 8001978:	9a01      	ldr	r2, [sp, #4]
 800197a:	3a01      	subs	r2, #1
 800197c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800197e:	9a01      	ldr	r2, [sp, #4]
 8001980:	2a00      	cmp	r2, #0
 8001982:	d1f9      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001984:	2000      	movs	r0, #0
 8001986:	e79f      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x70>
 8001988:	2000      	movs	r0, #0
 800198a:	e79d      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800198c:	2002      	movs	r0, #2
 800198e:	e79e      	b.n	80018ce <HAL_ADC_ConfigChannel+0x76>
 8001990:	40012400 	.word	0x40012400
 8001994:	20000000 	.word	0x20000000
 8001998:	431bde83 	.word	0x431bde83

0800199c <ADC_Enable>:
{
 800199c:	b530      	push	{r4, r5, lr}
 800199e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019a4:	6803      	ldr	r3, [r0, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	f012 0f01 	tst.w	r2, #1
 80019ac:	d133      	bne.n	8001a16 <ADC_Enable+0x7a>
 80019ae:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <ADC_Enable+0x80>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <ADC_Enable+0x84>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9b      	lsrs	r3, r3, #18
 80019c4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80019c6:	e002      	b.n	80019ce <ADC_Enable+0x32>
      wait_loop_index--;
 80019c8:	9b01      	ldr	r3, [sp, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80019d4:	f7ff feea 	bl	80017ac <HAL_GetTick>
 80019d8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f013 0f01 	tst.w	r3, #1
 80019e2:	d116      	bne.n	8001a12 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019e4:	f7ff fee2 	bl	80017ac <HAL_GetTick>
 80019e8:	1b43      	subs	r3, r0, r5
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d9f5      	bls.n	80019da <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f013 0f01 	tst.w	r3, #1
 80019f6:	d1f0      	bne.n	80019da <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e002      	b.n	8001a18 <ADC_Enable+0x7c>
  return HAL_OK;
 8001a12:	2000      	movs	r0, #0
 8001a14:	e000      	b.n	8001a18 <ADC_Enable+0x7c>
 8001a16:	2000      	movs	r0, #0
}
 8001a18:	b003      	add	sp, #12
 8001a1a:	bd30      	pop	{r4, r5, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <HAL_ADC_Start_DMA>:
{
 8001a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	460d      	mov	r5, r1
 8001a2a:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a2c:	6801      	ldr	r1, [r0, #0]
 8001a2e:	4844      	ldr	r0, [pc, #272]	; (8001b40 <HAL_ADC_Start_DMA+0x11c>)
 8001a30:	4281      	cmp	r1, r0
 8001a32:	d059      	beq.n	8001ae8 <HAL_ADC_Start_DMA+0xc4>
 8001a34:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_ADC_Start_DMA+0x120>)
 8001a36:	4299      	cmp	r1, r3
 8001a38:	d056      	beq.n	8001ae8 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8001a3a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d07c      	beq.n	8001b3c <HAL_ADC_Start_DMA+0x118>
 8001a42:	2301      	movs	r3, #1
 8001a44:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff ffa7 	bl	800199c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001a4e:	4607      	mov	r7, r0
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d16e      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8001a54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001a56:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001a5a:	f021 0101 	bic.w	r1, r1, #1
 8001a5e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a62:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a64:	6822      	ldr	r2, [r4, #0]
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_ADC_Start_DMA+0x120>)
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d044      	beq.n	8001af6 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a72:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a74:	6853      	ldr	r3, [r2, #4]
 8001a76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a7a:	d005      	beq.n	8001a88 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a86:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a8a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a8e:	d048      	beq.n	8001b22 <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a92:	f023 0306 	bic.w	r3, r3, #6
 8001a96:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a9e:	6a23      	ldr	r3, [r4, #32]
 8001aa0:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <HAL_ADC_Start_DMA+0x124>)
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aa4:	6a23      	ldr	r3, [r4, #32]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HAL_ADC_Start_DMA+0x128>)
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aaa:	6a23      	ldr	r3, [r4, #32]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_ADC_Start_DMA+0x12c>)
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	f06f 0202 	mvn.w	r2, #2
 8001ab6:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ab8:	6822      	ldr	r2, [r4, #0]
 8001aba:	6893      	ldr	r3, [r2, #8]
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ac2:	6821      	ldr	r1, [r4, #0]
 8001ac4:	4633      	mov	r3, r6
 8001ac6:	462a      	mov	r2, r5
 8001ac8:	314c      	adds	r1, #76	; 0x4c
 8001aca:	6a20      	ldr	r0, [r4, #32]
 8001acc:	f000 f9aa 	bl	8001e24 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001ad8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001adc:	d024      	beq.n	8001b28 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	e027      	b.n	8001b38 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_ADC_Start_DMA+0x11c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001af0:	d0a3      	beq.n	8001a3a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001af2:	2701      	movs	r7, #1
 8001af4:	e020      	b.n	8001b38 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001af6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001b00:	d0b4      	beq.n	8001a6c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b08:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_ADC_Start_DMA+0x11c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b12:	d0b9      	beq.n	8001a88 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b20:	e7b2      	b.n	8001a88 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 8001b22:	2300      	movs	r3, #0
 8001b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b26:	e7b7      	b.n	8001a98 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 8001b32:	2300      	movs	r3, #0
 8001b34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001b38:	4638      	mov	r0, r7
 8001b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001b3c:	2702      	movs	r7, #2
 8001b3e:	e7fb      	b.n	8001b38 <HAL_ADC_Start_DMA+0x114>
 8001b40:	40012400 	.word	0x40012400
 8001b44:	40012800 	.word	0x40012800
 8001b48:	080017e1 	.word	0x080017e1
 8001b4c:	08001833 	.word	0x08001833
 8001b50:	0800183f 	.word	0x0800183f

08001b54 <ADC_ConversionStop_Disable>:
{
 8001b54:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b56:	6803      	ldr	r3, [r0, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	f012 0f01 	tst.w	r2, #1
 8001b5e:	d101      	bne.n	8001b64 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001b60:	2000      	movs	r0, #0
}
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001b6e:	f7ff fe1d 	bl	80017ac <HAL_GetTick>
 8001b72:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f013 0f01 	tst.w	r3, #1
 8001b7c:	d013      	beq.n	8001ba6 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b7e:	f7ff fe15 	bl	80017ac <HAL_GetTick>
 8001b82:	1b43      	subs	r3, r0, r5
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d9f5      	bls.n	8001b74 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f013 0f01 	tst.w	r3, #1
 8001b90:	d0f0      	beq.n	8001b74 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	e7dd      	b.n	8001b62 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	e7db      	b.n	8001b62 <ADC_ConversionStop_Disable+0xe>
	...

08001bac <HAL_ADC_Init>:
  if(hadc == NULL)
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d07b      	beq.n	8001ca8 <HAL_ADC_Init+0xfc>
{
 8001bb0:	b570      	push	{r4, r5, r6, lr}
 8001bb2:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d04d      	beq.n	8001c56 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff ffca 	bl	8001b54 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bc2:	f013 0310 	ands.w	r3, r3, #16
 8001bc6:	d169      	bne.n	8001c9c <HAL_ADC_Init+0xf0>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d167      	bne.n	8001c9c <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001bcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bce:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001bd2:	f022 0202 	bic.w	r2, r2, #2
 8001bd6:	f042 0202 	orr.w	r2, r2, #2
 8001bda:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bdc:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bde:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be0:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001be2:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001be8:	68a5      	ldr	r5, [r4, #8]
 8001bea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001bee:	d002      	beq.n	8001bf6 <HAL_ADC_Init+0x4a>
 8001bf0:	2d01      	cmp	r5, #1
 8001bf2:	d036      	beq.n	8001c62 <HAL_ADC_Init+0xb6>
 8001bf4:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf6:	7d26      	ldrb	r6, [r4, #20]
 8001bf8:	2e01      	cmp	r6, #1
 8001bfa:	d035      	beq.n	8001c68 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001bfc:	6826      	ldr	r6, [r4, #0]
 8001bfe:	6871      	ldr	r1, [r6, #4]
 8001c00:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001c04:	4329      	orrs	r1, r5
 8001c06:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001c08:	6825      	ldr	r5, [r4, #0]
 8001c0a:	68ae      	ldr	r6, [r5, #8]
 8001c0c:	4927      	ldr	r1, [pc, #156]	; (8001cac <HAL_ADC_Init+0x100>)
 8001c0e:	4031      	ands	r1, r6
 8001c10:	4311      	orrs	r1, r2
 8001c12:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c14:	68a1      	ldr	r1, [r4, #8]
 8001c16:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001c1a:	d001      	beq.n	8001c20 <HAL_ADC_Init+0x74>
 8001c1c:	2901      	cmp	r1, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c20:	6923      	ldr	r3, [r4, #16]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001c26:	6825      	ldr	r5, [r4, #0]
 8001c28:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001c2a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	6899      	ldr	r1, [r3, #8]
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_ADC_Init+0x104>)
 8001c38:	400b      	ands	r3, r1
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d025      	beq.n	8001c8a <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c40:	f023 0312 	bic.w	r3, r3, #18
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
 8001c54:	e027      	b.n	8001ca6 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c56:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001c58:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001c5c:	f7ff fbce 	bl	80013fc <HAL_ADC_MspInit>
 8001c60:	e7ab      	b.n	8001bba <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c62:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001c66:	e7c6      	b.n	8001bf6 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c68:	b931      	cbnz	r1, 8001c78 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c6a:	69a1      	ldr	r1, [r4, #24]
 8001c6c:	3901      	subs	r1, #1
 8001c6e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001c72:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8001c76:	e7c1      	b.n	8001bfc <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c7a:	f041 0120 	orr.w	r1, r1, #32
 8001c7e:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c82:	f041 0101 	orr.w	r1, r1, #1
 8001c86:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001c88:	e7b8      	b.n	8001bfc <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c90:	f023 0303 	bic.w	r3, r3, #3
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c9a:	e004      	b.n	8001ca6 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c9e:	f043 0310 	orr.w	r3, r3, #16
 8001ca2:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
}
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001ca8:	2001      	movs	r0, #1
}
 8001caa:	4770      	bx	lr
 8001cac:	ffe1f7fd 	.word	0xffe1f7fd
 8001cb0:	ff1f0efe 	.word	0xff1f0efe

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001cb6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc0:	0200      	lsls	r0, r0, #8
 8001cc2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001cd0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_NVIC_SetPriority+0x68>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce2:	f1c3 0c07 	rsb	ip, r3, #7
 8001ce6:	f1bc 0f04 	cmp.w	ip, #4
 8001cea:	bf28      	it	cs
 8001cec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf0:	f103 0e04 	add.w	lr, r3, #4
 8001cf4:	f1be 0f06 	cmp.w	lr, #6
 8001cf8:	d918      	bls.n	8001d2c <HAL_NVIC_SetPriority+0x54>
 8001cfa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 3eff 	mov.w	lr, #4294967295
 8001d00:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001d04:	ea21 010c 	bic.w	r1, r1, ip
 8001d08:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0a:	fa0e f303 	lsl.w	r3, lr, r3
 8001d0e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d12:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001d14:	2800      	cmp	r0, #0
 8001d16:	db0b      	blt.n	8001d30 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	0109      	lsls	r1, r1, #4
 8001d1a:	b2c9      	uxtb	r1, r1
 8001d1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001d24:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d28:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e7e5      	b.n	8001cfc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	f000 000f 	and.w	r0, r0, #15
 8001d34:	0109      	lsls	r1, r1, #4
 8001d36:	b2c9      	uxtb	r1, r1
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <HAL_NVIC_SetPriority+0x6c>)
 8001d3a:	5419      	strb	r1, [r3, r0]
 8001d3c:	e7f4      	b.n	8001d28 <HAL_NVIC_SetPriority+0x50>
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00
 8001d44:	e000ed14 	.word	0xe000ed14

08001d48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	db07      	blt.n	8001d5c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4c:	f000 021f 	and.w	r2, r0, #31
 8001d50:	0940      	lsrs	r0, r0, #5
 8001d52:	2301      	movs	r3, #1
 8001d54:	4093      	lsls	r3, r2
 8001d56:	4a02      	ldr	r2, [pc, #8]	; (8001d60 <HAL_NVIC_EnableIRQ+0x18>)
 8001d58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	3801      	subs	r0, #1
 8001d66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d6a:	d20b      	bcs.n	8001d84 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d70:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <HAL_SYSTICK_Config+0x24>)
 8001d74:	21f0      	movs	r1, #240	; 0xf0
 8001d76:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	2207      	movs	r2, #7
 8001d80:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d82:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d84:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d8c:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d8e:	2401      	movs	r4, #1
 8001d90:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001d92:	40ac      	lsls	r4, r5
 8001d94:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001d96:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d98:	6804      	ldr	r4, [r0, #0]
 8001d9a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d9c:	6843      	ldr	r3, [r0, #4]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d005      	beq.n	8001dae <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001da6:	6803      	ldr	r3, [r0, #0]
 8001da8:	60da      	str	r2, [r3, #12]
  }
}
 8001daa:	bc30      	pop	{r4, r5}
 8001dac:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001dae:	6803      	ldr	r3, [r0, #0]
 8001db0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001db2:	6803      	ldr	r3, [r0, #0]
 8001db4:	60d9      	str	r1, [r3, #12]
 8001db6:	e7f8      	b.n	8001daa <DMA_SetConfig+0x1e>

08001db8 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001db8:	b360      	cbz	r0, 8001e14 <HAL_DMA_Init+0x5c>
{
 8001dba:	b410      	push	{r4}
 8001dbc:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dbe:	6801      	ldr	r1, [r0, #0]
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_DMA_Init+0x60>)
 8001dc2:	440b      	add	r3, r1
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <HAL_DMA_Init+0x64>)
 8001dc6:	fba0 0303 	umull	r0, r3, r0, r3
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_DMA_Init+0x68>)
 8001dd2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001dda:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ddc:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8001de0:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001de4:	6853      	ldr	r3, [r2, #4]
 8001de6:	6894      	ldr	r4, [r2, #8]
 8001de8:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	68d4      	ldr	r4, [r2, #12]
 8001dec:	4323      	orrs	r3, r4
 8001dee:	6914      	ldr	r4, [r2, #16]
 8001df0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df2:	6954      	ldr	r4, [r2, #20]
 8001df4:	4323      	orrs	r3, r4
 8001df6:	6994      	ldr	r4, [r2, #24]
 8001df8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfa:	69d4      	ldr	r4, [r2, #28]
 8001dfc:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001dfe:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001e00:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e02:	2000      	movs	r0, #0
 8001e04:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001e0c:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001e10:	bc10      	pop	{r4}
 8001e12:	4770      	bx	lr
    return HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
}
 8001e16:	4770      	bx	lr
 8001e18:	bffdfff8 	.word	0xbffdfff8
 8001e1c:	cccccccd 	.word	0xcccccccd
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_DMA_Start_IT>:
{
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001e28:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001e2c:	2801      	cmp	r0, #1
 8001e2e:	d031      	beq.n	8001e94 <HAL_DMA_Start_IT+0x70>
 8001e30:	2001      	movs	r0, #1
 8001e32:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e36:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8001e3a:	2801      	cmp	r0, #1
 8001e3c:	d004      	beq.n	8001e48 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001e44:	2002      	movs	r0, #2
}
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e48:	2002      	movs	r0, #2
 8001e4a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4e:	2000      	movs	r0, #0
 8001e50:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001e52:	6825      	ldr	r5, [r4, #0]
 8001e54:	6828      	ldr	r0, [r5, #0]
 8001e56:	f020 0001 	bic.w	r0, r0, #1
 8001e5a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f7ff ff95 	bl	8001d8c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001e62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e64:	b15b      	cbz	r3, 8001e7e <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	f043 030e 	orr.w	r3, r3, #14
 8001e6e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e70:	6822      	ldr	r2, [r4, #0]
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	e7e3      	b.n	8001e46 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	6813      	ldr	r3, [r2, #0]
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	f043 030a 	orr.w	r3, r3, #10
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e7ed      	b.n	8001e70 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001e94:	2002      	movs	r0, #2
 8001e96:	e7d6      	b.n	8001e46 <HAL_DMA_Start_IT+0x22>

08001e98 <HAL_DMA_IRQHandler>:
{
 8001e98:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e9a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001e9c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e9e:	6804      	ldr	r4, [r0, #0]
 8001ea0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ea2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	408b      	lsls	r3, r1
 8001ea8:	4213      	tst	r3, r2
 8001eaa:	d035      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x80>
 8001eac:	f015 0f04 	tst.w	r5, #4
 8001eb0:	d032      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	f013 0f20 	tst.w	r3, #32
 8001eb8:	d103      	bne.n	8001ec2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ec2:	6803      	ldr	r3, [r0, #0]
 8001ec4:	4a43      	ldr	r2, [pc, #268]	; (8001fd4 <HAL_DMA_IRQHandler+0x13c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d014      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x5c>
 8001eca:	3214      	adds	r2, #20
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d018      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x6a>
 8001ed0:	3214      	adds	r2, #20
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d017      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x6e>
 8001ed6:	3214      	adds	r2, #20
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d017      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x74>
 8001edc:	3214      	adds	r2, #20
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d017      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x7a>
 8001ee2:	3214      	adds	r2, #20
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d002      	beq.n	8001eee <HAL_DMA_IRQHandler+0x56>
 8001ee8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eec:	e003      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x5e>
 8001eee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ef2:	e000      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x5e>
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_DMA_IRQHandler+0x140>)
 8001ef8:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001efa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001efc:	b103      	cbz	r3, 8001f00 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8001efe:	4798      	blx	r3
}
 8001f00:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	e7f7      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x5e>
 8001f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0a:	e7f4      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x5e>
 8001f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f10:	e7f1      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x5e>
 8001f12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f16:	e7ee      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f18:	2302      	movs	r3, #2
 8001f1a:	408b      	lsls	r3, r1
 8001f1c:	4213      	tst	r3, r2
 8001f1e:	d03c      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x102>
 8001f20:	f015 0f02 	tst.w	r5, #2
 8001f24:	d039      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f013 0f20 	tst.w	r3, #32
 8001f2c:	d106      	bne.n	8001f3c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	f023 030a 	bic.w	r3, r3, #10
 8001f34:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f3c:	6803      	ldr	r3, [r0, #0]
 8001f3e:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <HAL_DMA_IRQHandler+0x13c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d014      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xd6>
 8001f44:	3214      	adds	r2, #20
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01c      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xec>
 8001f4a:	3214      	adds	r2, #20
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01b      	beq.n	8001f88 <HAL_DMA_IRQHandler+0xf0>
 8001f50:	3214      	adds	r2, #20
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01b      	beq.n	8001f8e <HAL_DMA_IRQHandler+0xf6>
 8001f56:	3214      	adds	r2, #20
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xfc>
 8001f5c:	3214      	adds	r2, #20
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d002      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xd0>
 8001f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f66:	e003      	b.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
 8001f68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f6c:	e000      	b.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_DMA_IRQHandler+0x140>)
 8001f72:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001f74:	2300      	movs	r3, #0
 8001f76:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001f7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0bf      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001f80:	4798      	blx	r3
 8001f82:	e7bd      	b.n	8001f00 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f84:	2220      	movs	r2, #32
 8001f86:	e7f3      	b.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
 8001f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8c:	e7f0      	b.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
 8001f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f92:	e7ed      	b.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
 8001f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f98:	e7ea      	b.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	fa03 f101 	lsl.w	r1, r3, r1
 8001fa0:	4211      	tst	r1, r2
 8001fa2:	d0ad      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x68>
 8001fa4:	f015 0f08 	tst.w	r5, #8
 8001fa8:	d0aa      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	f023 030e 	bic.w	r3, r3, #14
 8001fb0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fb2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001fb4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	fa03 f202 	lsl.w	r2, r3, r2
 8001fbc:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fbe:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001fc0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001fca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d097      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8001fd0:	4798      	blx	r3
  return;
 8001fd2:	e795      	b.n	8001f00 <HAL_DMA_IRQHandler+0x68>
 8001fd4:	40020008 	.word	0x40020008
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fe0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001fe2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe4:	e0a6      	b.n	8002134 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fe6:	4d80      	ldr	r5, [pc, #512]	; (80021e8 <HAL_GPIO_Init+0x20c>)
 8001fe8:	42aa      	cmp	r2, r5
 8001fea:	d010      	beq.n	800200e <HAL_GPIO_Init+0x32>
 8001fec:	d907      	bls.n	8001ffe <HAL_GPIO_Init+0x22>
 8001fee:	4d7f      	ldr	r5, [pc, #508]	; (80021ec <HAL_GPIO_Init+0x210>)
 8001ff0:	42aa      	cmp	r2, r5
 8001ff2:	d00c      	beq.n	800200e <HAL_GPIO_Init+0x32>
 8001ff4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8001ff8:	42aa      	cmp	r2, r5
 8001ffa:	d008      	beq.n	800200e <HAL_GPIO_Init+0x32>
 8001ffc:	e013      	b.n	8002026 <HAL_GPIO_Init+0x4a>
 8001ffe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002002:	42aa      	cmp	r2, r5
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x32>
 8002006:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 800200a:	42aa      	cmp	r2, r5
 800200c:	d107      	bne.n	800201e <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200e:	688a      	ldr	r2, [r1, #8]
 8002010:	2a00      	cmp	r2, #0
 8002012:	d058      	beq.n	80020c6 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002014:	2a01      	cmp	r2, #1
 8002016:	d051      	beq.n	80020bc <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002018:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800201a:	2408      	movs	r4, #8
 800201c:	e003      	b.n	8002026 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800201e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002022:	42aa      	cmp	r2, r5
 8002024:	d0f3      	beq.n	800200e <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002026:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800202a:	d84e      	bhi.n	80020ca <HAL_GPIO_Init+0xee>
 800202c:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800202e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002032:	d84c      	bhi.n	80020ce <HAL_GPIO_Init+0xf2>
 8002034:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002038:	6833      	ldr	r3, [r6, #0]
 800203a:	250f      	movs	r5, #15
 800203c:	4095      	lsls	r5, r2
 800203e:	ea23 0305 	bic.w	r3, r3, r5
 8002042:	fa04 f202 	lsl.w	r2, r4, r2
 8002046:	4313      	orrs	r3, r2
 8002048:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204a:	684b      	ldr	r3, [r1, #4]
 800204c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002050:	d06e      	beq.n	8002130 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_GPIO_Init+0x214>)
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	619a      	str	r2, [r3, #24]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002066:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800206a:	1c95      	adds	r5, r2, #2
 800206c:	4b61      	ldr	r3, [pc, #388]	; (80021f4 <HAL_GPIO_Init+0x218>)
 800206e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002072:	f00c 0303 	and.w	r3, ip, #3
 8002076:	009d      	lsls	r5, r3, #2
 8002078:	230f      	movs	r3, #15
 800207a:	40ab      	lsls	r3, r5
 800207c:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002080:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <HAL_GPIO_Init+0x21c>)
 8002082:	4298      	cmp	r0, r3
 8002084:	d029      	beq.n	80020da <HAL_GPIO_Init+0xfe>
 8002086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208a:	4298      	cmp	r0, r3
 800208c:	f000 808e 	beq.w	80021ac <HAL_GPIO_Init+0x1d0>
 8002090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002094:	4298      	cmp	r0, r3
 8002096:	f000 808b 	beq.w	80021b0 <HAL_GPIO_Init+0x1d4>
 800209a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209e:	4298      	cmp	r0, r3
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e01a      	b.n	80020dc <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a6:	68cc      	ldr	r4, [r1, #12]
          break;
 80020a8:	e7bd      	b.n	8002026 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020aa:	68cc      	ldr	r4, [r1, #12]
 80020ac:	3404      	adds	r4, #4
          break;
 80020ae:	e7ba      	b.n	8002026 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020b0:	68cc      	ldr	r4, [r1, #12]
 80020b2:	3408      	adds	r4, #8
          break;
 80020b4:	e7b7      	b.n	8002026 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b6:	68cc      	ldr	r4, [r1, #12]
 80020b8:	340c      	adds	r4, #12
          break;
 80020ba:	e7b4      	b.n	8002026 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80020bc:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020be:	2408      	movs	r4, #8
 80020c0:	e7b1      	b.n	8002026 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c2:	2400      	movs	r4, #0
 80020c4:	e7af      	b.n	8002026 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020c6:	2404      	movs	r4, #4
 80020c8:	e7ad      	b.n	8002026 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ca:	1d06      	adds	r6, r0, #4
 80020cc:	e7af      	b.n	800202e <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ce:	f1ac 0208 	sub.w	r2, ip, #8
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	e7b0      	b.n	8002038 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d6:	2303      	movs	r3, #3
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x100>
 80020da:	2300      	movs	r3, #0
 80020dc:	40ab      	lsls	r3, r5
 80020de:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80020e0:	3202      	adds	r2, #2
 80020e2:	4d44      	ldr	r5, [pc, #272]	; (80021f4 <HAL_GPIO_Init+0x218>)
 80020e4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e8:	684b      	ldr	r3, [r1, #4]
 80020ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80020ee:	d061      	beq.n	80021b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f0:	4a42      	ldr	r2, [pc, #264]	; (80021fc <HAL_GPIO_Init+0x220>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	ea43 030e 	orr.w	r3, r3, lr
 80020f8:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fa:	684b      	ldr	r3, [r1, #4]
 80020fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002100:	d05e      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002102:	4a3e      	ldr	r2, [pc, #248]	; (80021fc <HAL_GPIO_Init+0x220>)
 8002104:	6853      	ldr	r3, [r2, #4]
 8002106:	ea43 030e 	orr.w	r3, r3, lr
 800210a:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800210c:	684b      	ldr	r3, [r1, #4]
 800210e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002112:	d05b      	beq.n	80021cc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002114:	4a39      	ldr	r2, [pc, #228]	; (80021fc <HAL_GPIO_Init+0x220>)
 8002116:	6893      	ldr	r3, [r2, #8]
 8002118:	ea43 030e 	orr.w	r3, r3, lr
 800211c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800211e:	684b      	ldr	r3, [r1, #4]
 8002120:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002124:	d058      	beq.n	80021d8 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002126:	4a35      	ldr	r2, [pc, #212]	; (80021fc <HAL_GPIO_Init+0x220>)
 8002128:	68d3      	ldr	r3, [r2, #12]
 800212a:	ea43 030e 	orr.w	r3, r3, lr
 800212e:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002130:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	680a      	ldr	r2, [r1, #0]
 8002136:	fa32 f30c 	lsrs.w	r3, r2, ip
 800213a:	d053      	beq.n	80021e4 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 800213c:	2301      	movs	r3, #1
 800213e:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002142:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8002146:	ea33 0202 	bics.w	r2, r3, r2
 800214a:	d1f1      	bne.n	8002130 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 800214c:	684a      	ldr	r2, [r1, #4]
 800214e:	2a12      	cmp	r2, #18
 8002150:	f63f af49 	bhi.w	8001fe6 <HAL_GPIO_Init+0xa>
 8002154:	2a12      	cmp	r2, #18
 8002156:	f63f af66 	bhi.w	8002026 <HAL_GPIO_Init+0x4a>
 800215a:	a501      	add	r5, pc, #4	; (adr r5, 8002160 <HAL_GPIO_Init+0x184>)
 800215c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002160:	0800200f 	.word	0x0800200f
 8002164:	080020a7 	.word	0x080020a7
 8002168:	080020b1 	.word	0x080020b1
 800216c:	080020c3 	.word	0x080020c3
 8002170:	08002027 	.word	0x08002027
 8002174:	08002027 	.word	0x08002027
 8002178:	08002027 	.word	0x08002027
 800217c:	08002027 	.word	0x08002027
 8002180:	08002027 	.word	0x08002027
 8002184:	08002027 	.word	0x08002027
 8002188:	08002027 	.word	0x08002027
 800218c:	08002027 	.word	0x08002027
 8002190:	08002027 	.word	0x08002027
 8002194:	08002027 	.word	0x08002027
 8002198:	08002027 	.word	0x08002027
 800219c:	08002027 	.word	0x08002027
 80021a0:	08002027 	.word	0x08002027
 80021a4:	080020ab 	.word	0x080020ab
 80021a8:	080020b7 	.word	0x080020b7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ac:	2301      	movs	r3, #1
 80021ae:	e795      	b.n	80020dc <HAL_GPIO_Init+0x100>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e793      	b.n	80020dc <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_GPIO_Init+0x220>)
 80021b6:	6813      	ldr	r3, [r2, #0]
 80021b8:	ea23 030e 	bic.w	r3, r3, lr
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e79c      	b.n	80020fa <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_GPIO_Init+0x220>)
 80021c2:	6853      	ldr	r3, [r2, #4]
 80021c4:	ea23 030e 	bic.w	r3, r3, lr
 80021c8:	6053      	str	r3, [r2, #4]
 80021ca:	e79f      	b.n	800210c <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_GPIO_Init+0x220>)
 80021ce:	6893      	ldr	r3, [r2, #8]
 80021d0:	ea23 030e 	bic.w	r3, r3, lr
 80021d4:	6093      	str	r3, [r2, #8]
 80021d6:	e7a2      	b.n	800211e <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d8:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_GPIO_Init+0x220>)
 80021da:	68d3      	ldr	r3, [r2, #12]
 80021dc:	ea23 030e 	bic.w	r3, r3, lr
 80021e0:	60d3      	str	r3, [r2, #12]
 80021e2:	e7a5      	b.n	8002130 <HAL_GPIO_Init+0x154>
  }
}
 80021e4:	b002      	add	sp, #8
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	10220000 	.word	0x10220000
 80021ec:	10310000 	.word	0x10310000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40010800 	.word	0x40010800
 80021fc:	40010400 	.word	0x40010400

08002200 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002200:	b10a      	cbz	r2, 8002206 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	6101      	str	r1, [r0, #16]
 8002204:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002206:	0409      	lsls	r1, r1, #16
 8002208:	6101      	str	r1, [r0, #16]
  }
}
 800220a:	4770      	bx	lr

0800220c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800220c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <RCC_Delay+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <RCC_Delay+0x28>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	0a5b      	lsrs	r3, r3, #9
 800221a:	fb00 f303 	mul.w	r3, r0, r3
 800221e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002220:	bf00      	nop
  }
  while (Delay --);
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	9201      	str	r2, [sp, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <RCC_Delay+0x14>
}
 800222c:	b002      	add	sp, #8
 800222e:	4770      	bx	lr
 8002230:	20000000 	.word	0x20000000
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002238:	2800      	cmp	r0, #0
 800223a:	f000 81f1 	beq.w	8002620 <HAL_RCC_OscConfig+0x3e8>
{
 800223e:	b570      	push	{r4, r5, r6, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002244:	6803      	ldr	r3, [r0, #0]
 8002246:	f013 0f01 	tst.w	r3, #1
 800224a:	d02c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b99      	ldr	r3, [pc, #612]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b04      	cmp	r3, #4
 8002256:	d01d      	beq.n	8002294 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002258:	4b96      	ldr	r3, [pc, #600]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d012      	beq.n	800228a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	6863      	ldr	r3, [r4, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d041      	beq.n	80022f0 <HAL_RCC_OscConfig+0xb8>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d155      	bne.n	800231c <HAL_RCC_OscConfig+0xe4>
 8002270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002274:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e037      	b.n	80022fa <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800228a:	4b8a      	ldr	r3, [pc, #552]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002292:	d0e7      	beq.n	8002264 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_OscConfig+0x6e>
 800229e:	6863      	ldr	r3, [r4, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 81bf 	beq.w	8002624 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	f013 0f02 	tst.w	r3, #2
 80022ac:	d075      	beq.n	800239a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	4b81      	ldr	r3, [pc, #516]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f013 0f0c 	tst.w	r3, #12
 80022b6:	d05f      	beq.n	8002378 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022b8:	4b7e      	ldr	r3, [pc, #504]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d054      	beq.n	800236e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c4:	6923      	ldr	r3, [r4, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 808a 	beq.w	80023e0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80022cc:	4b7a      	ldr	r3, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x280>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022d2:	f7ff fa6b 	bl	80017ac <HAL_GetTick>
 80022d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d8:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f013 0f02 	tst.w	r3, #2
 80022e0:	d175      	bne.n	80023ce <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fa63 	bl	80017ac <HAL_GetTick>
 80022e6:	1b40      	subs	r0, r0, r5
 80022e8:	2802      	cmp	r0, #2
 80022ea:	d9f5      	bls.n	80022d8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80022ec:	2003      	movs	r0, #3
 80022ee:	e19e      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f0:	4a70      	ldr	r2, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fa:	6863      	ldr	r3, [r4, #4]
 80022fc:	b343      	cbz	r3, 8002350 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80022fe:	f7ff fa55 	bl	80017ac <HAL_GetTick>
 8002302:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800230c:	d1cb      	bne.n	80022a6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230e:	f7ff fa4d 	bl	80017ac <HAL_GetTick>
 8002312:	1b40      	subs	r0, r0, r5
 8002314:	2864      	cmp	r0, #100	; 0x64
 8002316:	d9f5      	bls.n	8002304 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002318:	2003      	movs	r0, #3
 800231a:	e188      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d009      	beq.n	8002336 <HAL_RCC_OscConfig+0xfe>
 8002322:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e7e1      	b.n	80022fa <HAL_RCC_OscConfig+0xc2>
 8002336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800233a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e7d4      	b.n	80022fa <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002350:	f7ff fa2c 	bl	80017ac <HAL_GetTick>
 8002354:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800235e:	d0a2      	beq.n	80022a6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff fa24 	bl	80017ac <HAL_GetTick>
 8002364:	1b40      	subs	r0, r0, r5
 8002366:	2864      	cmp	r0, #100	; 0x64
 8002368:	d9f5      	bls.n	8002356 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
 800236c:	e15f      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236e:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002376:	d1a5      	bne.n	80022c4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002378:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f013 0f02 	tst.w	r3, #2
 8002380:	d003      	beq.n	800238a <HAL_RCC_OscConfig+0x152>
 8002382:	6923      	ldr	r3, [r4, #16]
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 814f 	bne.w	8002628 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002392:	6961      	ldr	r1, [r4, #20]
 8002394:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002398:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	f013 0f08 	tst.w	r3, #8
 80023a0:	d033      	beq.n	800240a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a2:	69a3      	ldr	r3, [r4, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05c      	beq.n	8002462 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80023a8:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x280>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80023b0:	f7ff f9fc 	bl	80017ac <HAL_GetTick>
 80023b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f013 0f02 	tst.w	r3, #2
 80023be:	d121      	bne.n	8002404 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff f9f4 	bl	80017ac <HAL_GetTick>
 80023c4:	1b40      	subs	r0, r0, r5
 80023c6:	2802      	cmp	r0, #2
 80023c8:	d9f5      	bls.n	80023b6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80023ca:	2003      	movs	r0, #3
 80023cc:	e12f      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	6813      	ldr	r3, [r2, #0]
 80023d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023d6:	6961      	ldr	r1, [r4, #20]
 80023d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e7dc      	b.n	800239a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_RCC_OscConfig+0x280>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023e6:	f7ff f9e1 	bl	80017ac <HAL_GetTick>
 80023ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f013 0f02 	tst.w	r3, #2
 80023f4:	d0d1      	beq.n	800239a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7ff f9d9 	bl	80017ac <HAL_GetTick>
 80023fa:	1b40      	subs	r0, r0, r5
 80023fc:	2802      	cmp	r0, #2
 80023fe:	d9f5      	bls.n	80023ec <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002400:	2003      	movs	r0, #3
 8002402:	e114      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002404:	2001      	movs	r0, #1
 8002406:	f7ff ff01 	bl	800220c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	f013 0f04 	tst.w	r3, #4
 8002410:	f000 8096 	beq.w	8002540 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800241c:	d134      	bne.n	8002488 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002426:	61da      	str	r2, [r3, #28]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002432:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_RCC_OscConfig+0x284>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f413 7f80 	tst.w	r3, #256	; 0x100
 800243c:	d026      	beq.n	800248c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	68e3      	ldr	r3, [r4, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d03d      	beq.n	80024c0 <HAL_RCC_OscConfig+0x288>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d153      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2b8>
 8002448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800244c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	621a      	str	r2, [r3, #32]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	f022 0204 	bic.w	r2, r2, #4
 800245e:	621a      	str	r2, [r3, #32]
 8002460:	e033      	b.n	80024ca <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_RCC_OscConfig+0x280>)
 8002464:	2200      	movs	r2, #0
 8002466:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800246a:	f7ff f99f 	bl	80017ac <HAL_GetTick>
 800246e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f013 0f02 	tst.w	r3, #2
 8002478:	d0c7      	beq.n	800240a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247a:	f7ff f997 	bl	80017ac <HAL_GetTick>
 800247e:	1b40      	subs	r0, r0, r5
 8002480:	2802      	cmp	r0, #2
 8002482:	d9f5      	bls.n	8002470 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8002484:	2003      	movs	r0, #3
 8002486:	e0d2      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8002488:	2500      	movs	r5, #0
 800248a:	e7d3      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_RCC_OscConfig+0x284>)
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002496:	f7ff f989 	bl	80017ac <HAL_GetTick>
 800249a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_RCC_OscConfig+0x284>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024a4:	d1cb      	bne.n	800243e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7ff f981 	bl	80017ac <HAL_GetTick>
 80024aa:	1b80      	subs	r0, r0, r6
 80024ac:	2864      	cmp	r0, #100	; 0x64
 80024ae:	d9f5      	bls.n	800249c <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80024b0:	2003      	movs	r0, #3
 80024b2:	e0bc      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	42420000 	.word	0x42420000
 80024bc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	4a5f      	ldr	r2, [pc, #380]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 80024c2:	6a13      	ldr	r3, [r2, #32]
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ca:	68e3      	ldr	r3, [r4, #12]
 80024cc:	b333      	cbz	r3, 800251c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80024ce:	f7ff f96d 	bl	80017ac <HAL_GetTick>
 80024d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f013 0f02 	tst.w	r3, #2
 80024dc:	d12f      	bne.n	800253e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7ff f965 	bl	80017ac <HAL_GetTick>
 80024e2:	1b80      	subs	r0, r0, r6
 80024e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80024e8:	4298      	cmp	r0, r3
 80024ea:	d9f3      	bls.n	80024d4 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e09e      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d009      	beq.n	8002508 <HAL_RCC_OscConfig+0x2d0>
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	621a      	str	r2, [r3, #32]
 80024fe:	6a1a      	ldr	r2, [r3, #32]
 8002500:	f022 0204 	bic.w	r2, r2, #4
 8002504:	621a      	str	r2, [r3, #32]
 8002506:	e7e0      	b.n	80024ca <HAL_RCC_OscConfig+0x292>
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	f042 0204 	orr.w	r2, r2, #4
 8002510:	621a      	str	r2, [r3, #32]
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	621a      	str	r2, [r3, #32]
 800251a:	e7d6      	b.n	80024ca <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800251c:	f7ff f946 	bl	80017ac <HAL_GetTick>
 8002520:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f013 0f02 	tst.w	r3, #2
 800252a:	d008      	beq.n	800253e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7ff f93e 	bl	80017ac <HAL_GetTick>
 8002530:	1b80      	subs	r0, r0, r6
 8002532:	f241 3388 	movw	r3, #5000	; 0x1388
 8002536:	4298      	cmp	r0, r3
 8002538:	d9f3      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800253a:	2003      	movs	r0, #3
 800253c:	e077      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800253e:	b9e5      	cbnz	r5, 800257a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002540:	69e3      	ldr	r3, [r4, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d072      	beq.n	800262c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002546:	4a3e      	ldr	r2, [pc, #248]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 8002548:	6852      	ldr	r2, [r2, #4]
 800254a:	f002 020c 	and.w	r2, r2, #12
 800254e:	2a08      	cmp	r2, #8
 8002550:	d056      	beq.n	8002600 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002552:	2b02      	cmp	r3, #2
 8002554:	d017      	beq.n	8002586 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x40c>)
 8002558:	2200      	movs	r2, #0
 800255a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800255c:	f7ff f926 	bl	80017ac <HAL_GetTick>
 8002560:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800256a:	d047      	beq.n	80025fc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7ff f91e 	bl	80017ac <HAL_GetTick>
 8002570:	1b00      	subs	r0, r0, r4
 8002572:	2802      	cmp	r0, #2
 8002574:	d9f5      	bls.n	8002562 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002576:	2003      	movs	r0, #3
 8002578:	e059      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800257a:	4a31      	ldr	r2, [pc, #196]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 800257c:	69d3      	ldr	r3, [r2, #28]
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	61d3      	str	r3, [r2, #28]
 8002584:	e7dc      	b.n	8002540 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCC_OscConfig+0x40c>)
 8002588:	2200      	movs	r2, #0
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800258c:	f7ff f90e 	bl	80017ac <HAL_GetTick>
 8002590:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800259a:	d006      	beq.n	80025aa <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff f906 	bl	80017ac <HAL_GetTick>
 80025a0:	1b40      	subs	r0, r0, r5
 80025a2:	2802      	cmp	r0, #2
 80025a4:	d9f5      	bls.n	8002592 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80025a6:	2003      	movs	r0, #3
 80025a8:	e041      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025aa:	6a23      	ldr	r3, [r4, #32]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d01a      	beq.n	80025e8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b2:	4923      	ldr	r1, [pc, #140]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 80025b4:	684b      	ldr	r3, [r1, #4]
 80025b6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80025ba:	6a22      	ldr	r2, [r4, #32]
 80025bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80025be:	4302      	orrs	r2, r0
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_RCC_OscConfig+0x40c>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80025ca:	f7ff f8ef 	bl	80017ac <HAL_GetTick>
 80025ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025d8:	d10e      	bne.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff f8e7 	bl	80017ac <HAL_GetTick>
 80025de:	1b00      	subs	r0, r0, r4
 80025e0:	2802      	cmp	r0, #2
 80025e2:	d9f5      	bls.n	80025d0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80025e4:	2003      	movs	r0, #3
 80025e6:	e022      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 80025ea:	6853      	ldr	r3, [r2, #4]
 80025ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025f0:	68a1      	ldr	r1, [r4, #8]
 80025f2:	430b      	orrs	r3, r1
 80025f4:	6053      	str	r3, [r2, #4]
 80025f6:	e7dc      	b.n	80025b2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80025f8:	2000      	movs	r0, #0
 80025fa:	e018      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
 80025fc:	2000      	movs	r0, #0
 80025fe:	e016      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	2b01      	cmp	r3, #1
 8002602:	d016      	beq.n	8002632 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_RCC_OscConfig+0x408>)
 8002606:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002608:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800260c:	6a22      	ldr	r2, [r4, #32]
 800260e:	4291      	cmp	r1, r2
 8002610:	d111      	bne.n	8002636 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002612:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002616:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	4293      	cmp	r3, r2
 800261a:	d10e      	bne.n	800263a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800261c:	2000      	movs	r0, #0
 800261e:	e006      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
}
 8002622:	4770      	bx	lr
        return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e002      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002628:	2001      	movs	r0, #1
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800262c:	2000      	movs	r0, #0
}
 800262e:	b002      	add	sp, #8
 8002630:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
 8002634:	e7fb      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002636:	2001      	movs	r0, #1
 8002638:	e7f9      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
 800263a:	2001      	movs	r0, #1
 800263c:	e7f7      	b.n	800262e <HAL_RCC_OscConfig+0x3f6>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	42420000 	.word	0x42420000

08002648 <HAL_RCC_GetSysClockFreq>:
{
 8002648:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x60>)
 800264c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264e:	f10d 0c18 	add.w	ip, sp, #24
 8002652:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002656:	f240 2301 	movw	r3, #513	; 0x201
 800265a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_RCC_GetSysClockFreq+0x64>)
 8002660:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	2a08      	cmp	r2, #8
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800266a:	4811      	ldr	r0, [pc, #68]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 800266c:	b006      	add	sp, #24
 800266e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002670:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002674:	3218      	adds	r2, #24
 8002676:	446a      	add	r2, sp
 8002678:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800267c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002680:	d00d      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_RCC_GetSysClockFreq+0x64>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800268a:	3318      	adds	r3, #24
 800268c:	446b      	add	r3, sp
 800268e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x68>)
 8002694:	fb02 f000 	mul.w	r0, r2, r0
 8002698:	fbb0 f0f3 	udiv	r0, r0, r3
 800269c:	e7e6      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80026a0:	fb03 f000 	mul.w	r0, r3, r0
 80026a4:	e7e2      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x24>
 80026a6:	bf00      	nop
 80026a8:	08007ad4 	.word	0x08007ad4
 80026ac:	40021000 	.word	0x40021000
 80026b0:	007a1200 	.word	0x007a1200
 80026b4:	003d0900 	.word	0x003d0900

080026b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f000 80a0 	beq.w	80027fe <HAL_RCC_ClockConfig+0x146>
{
 80026be:	b570      	push	{r4, r5, r6, lr}
 80026c0:	460d      	mov	r5, r1
 80026c2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b52      	ldr	r3, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x158>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	428b      	cmp	r3, r1
 80026ce:	d20b      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d0:	4a4f      	ldr	r2, [pc, #316]	; (8002810 <HAL_RCC_ClockConfig+0x158>)
 80026d2:	6813      	ldr	r3, [r2, #0]
 80026d4:	f023 0307 	bic.w	r3, r3, #7
 80026d8:	430b      	orrs	r3, r1
 80026da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026dc:	6813      	ldr	r3, [r2, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	428b      	cmp	r3, r1
 80026e4:	f040 808d 	bne.w	8002802 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	f013 0f02 	tst.w	r3, #2
 80026ee:	d017      	beq.n	8002720 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	f013 0f04 	tst.w	r3, #4
 80026f4:	d004      	beq.n	8002700 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f6:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 80026f8:	6853      	ldr	r3, [r2, #4]
 80026fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026fe:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f013 0f08 	tst.w	r3, #8
 8002706:	d004      	beq.n	8002712 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002708:	4a42      	ldr	r2, [pc, #264]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 800270a:	6853      	ldr	r3, [r2, #4]
 800270c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002710:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002712:	4a40      	ldr	r2, [pc, #256]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 8002714:	6853      	ldr	r3, [r2, #4]
 8002716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800271a:	68a1      	ldr	r1, [r4, #8]
 800271c:	430b      	orrs	r3, r1
 800271e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	f013 0f01 	tst.w	r3, #1
 8002726:	d031      	beq.n	800278c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002728:	6863      	ldr	r3, [r4, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d020      	beq.n	8002770 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	2b02      	cmp	r3, #2
 8002730:	d025      	beq.n	800277e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	4a38      	ldr	r2, [pc, #224]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	f012 0f02 	tst.w	r2, #2
 800273a:	d064      	beq.n	8002806 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273c:	4935      	ldr	r1, [pc, #212]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 800273e:	684a      	ldr	r2, [r1, #4]
 8002740:	f022 0203 	bic.w	r2, r2, #3
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002748:	f7ff f830 	bl	80017ac <HAL_GetTick>
 800274c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	6862      	ldr	r2, [r4, #4]
 8002758:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800275c:	d016      	beq.n	800278c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275e:	f7ff f825 	bl	80017ac <HAL_GetTick>
 8002762:	1b80      	subs	r0, r0, r6
 8002764:	f241 3388 	movw	r3, #5000	; 0x1388
 8002768:	4298      	cmp	r0, r3
 800276a:	d9f0      	bls.n	800274e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800276c:	2003      	movs	r0, #3
 800276e:	e045      	b.n	80027fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002778:	d1e0      	bne.n	800273c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800277a:	2001      	movs	r0, #1
 800277c:	e03e      	b.n	80027fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002786:	d1d9      	bne.n	800273c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002788:	2001      	movs	r0, #1
 800278a:	e037      	b.n	80027fc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCC_ClockConfig+0x158>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	42ab      	cmp	r3, r5
 8002796:	d90a      	bls.n	80027ae <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_RCC_ClockConfig+0x158>)
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	f023 0307 	bic.w	r3, r3, #7
 80027a0:	432b      	orrs	r3, r5
 80027a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	6813      	ldr	r3, [r2, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	42ab      	cmp	r3, r5
 80027ac:	d12d      	bne.n	800280a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	f013 0f04 	tst.w	r3, #4
 80027b4:	d006      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 80027b8:	6853      	ldr	r3, [r2, #4]
 80027ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027be:	68e1      	ldr	r1, [r4, #12]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	f013 0f08 	tst.w	r3, #8
 80027ca:	d007      	beq.n	80027dc <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027cc:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 80027ce:	6853      	ldr	r3, [r2, #4]
 80027d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80027d4:	6921      	ldr	r1, [r4, #16]
 80027d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027da:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027dc:	f7ff ff34 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_RCC_ClockConfig+0x15c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027e8:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x160>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	40d8      	lsrs	r0, r3
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x164>)
 80027f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x168>)
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	f7fe ff95 	bl	8001724 <HAL_InitTick>
  return HAL_OK;
 80027fa:	2000      	movs	r0, #0
}
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80027fe:	2001      	movs	r0, #1
}
 8002800:	4770      	bx	lr
    return HAL_ERROR;
 8002802:	2001      	movs	r0, #1
 8002804:	e7fa      	b.n	80027fc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002806:	2001      	movs	r0, #1
 8002808:	e7f8      	b.n	80027fc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800280a:	2001      	movs	r0, #1
 800280c:	e7f6      	b.n	80027fc <HAL_RCC_ClockConfig+0x144>
 800280e:	bf00      	nop
 8002810:	40022000 	.word	0x40022000
 8002814:	40021000 	.word	0x40021000
 8002818:	08007ac4 	.word	0x08007ac4
 800281c:	20000000 	.word	0x20000000
 8002820:	20000008 	.word	0x20000008

08002824 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	f013 0f01 	tst.w	r3, #1
 8002830:	d036      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800283a:	d149      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b3c      	ldr	r3, [pc, #240]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002844:	61da      	str	r2, [r3, #28]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002850:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f413 7f80 	tst.w	r3, #256	; 0x100
 800285a:	d03b      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002860:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002864:	d013      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002866:	6862      	ldr	r2, [r4, #4]
 8002868:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800286c:	429a      	cmp	r2, r3
 800286e:	d00e      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002870:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002872:	6a13      	ldr	r3, [r2, #32]
 8002874:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002878:	492f      	ldr	r1, [pc, #188]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800287a:	2601      	movs	r6, #1
 800287c:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002880:	2600      	movs	r6, #0
 8002882:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002886:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002888:	f013 0f01 	tst.w	r3, #1
 800288c:	d136      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288e:	4a28      	ldr	r2, [pc, #160]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002890:	6a13      	ldr	r3, [r2, #32]
 8002892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002896:	6861      	ldr	r1, [r4, #4]
 8002898:	430b      	orrs	r3, r1
 800289a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800289c:	2d00      	cmp	r5, #0
 800289e:	d13e      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	f013 0f02 	tst.w	r3, #2
 80028a6:	d006      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80028aa:	6853      	ldr	r3, [r2, #4]
 80028ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028b0:	68a1      	ldr	r1, [r4, #8]
 80028b2:	430b      	orrs	r3, r1
 80028b4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	f013 0f10 	tst.w	r3, #16
 80028bc:	d034      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80028c0:	6853      	ldr	r3, [r2, #4]
 80028c2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028c6:	68e1      	ldr	r1, [r4, #12]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028cc:	2000      	movs	r0, #0
 80028ce:	e02c      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 80028d0:	2500      	movs	r5, #0
 80028d2:	e7be      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80028d6:	6813      	ldr	r3, [r2, #0]
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80028de:	f7fe ff65 	bl	80017ac <HAL_GetTick>
 80028e2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028ec:	d1b6      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ee:	f7fe ff5d 	bl	80017ac <HAL_GetTick>
 80028f2:	1b80      	subs	r0, r0, r6
 80028f4:	2864      	cmp	r0, #100	; 0x64
 80028f6:	d9f5      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80028f8:	2003      	movs	r0, #3
 80028fa:	e016      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80028fc:	f7fe ff56 	bl	80017ac <HAL_GetTick>
 8002900:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f013 0f02 	tst.w	r3, #2
 800290a:	d1c0      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe ff4e 	bl	80017ac <HAL_GetTick>
 8002910:	1b80      	subs	r0, r0, r6
 8002912:	f241 3388 	movw	r3, #5000	; 0x1388
 8002916:	4298      	cmp	r0, r3
 8002918:	d9f3      	bls.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
 800291c:	e005      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	69d3      	ldr	r3, [r2, #28]
 8002920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002924:	61d3      	str	r3, [r2, #28]
 8002926:	e7bb      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8002928:	2000      	movs	r0, #0
}
 800292a:	b002      	add	sp, #8
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
 8002938:	42420000 	.word	0x42420000

0800293c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	4605      	mov	r5, r0
 8002944:	4688      	mov	r8, r1
 8002946:	4617      	mov	r7, r2
 8002948:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800294a:	f7fe ff2f 	bl	80017ac <HAL_GetTick>
 800294e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002950:	1a1b      	subs	r3, r3, r0
 8002952:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002956:	f7fe ff29 	bl	80017ac <HAL_GetTick>
 800295a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002964:	fb09 f303 	mul.w	r3, r9, r3
 8002968:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	689c      	ldr	r4, [r3, #8]
 800296e:	ea38 0304 	bics.w	r3, r8, r4
 8002972:	bf0c      	ite	eq
 8002974:	f04f 0c01 	moveq.w	ip, #1
 8002978:	f04f 0c00 	movne.w	ip, #0
 800297c:	45bc      	cmp	ip, r7
 800297e:	d040      	beq.n	8002a02 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002980:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002984:	d0f1      	beq.n	800296a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002986:	f7fe ff11 	bl	80017ac <HAL_GetTick>
 800298a:	eba0 000a 	sub.w	r0, r0, sl
 800298e:	4548      	cmp	r0, r9
 8002990:	d20a      	bcs.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002992:	f1b9 0f00 	cmp.w	r9, #0
 8002996:	d007      	beq.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002998:	9a01      	ldr	r2, [sp, #4]
 800299a:	b102      	cbz	r2, 800299e <SPI_WaitFlagStateUntilTimeout+0x62>
 800299c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800299e:	9b01      	ldr	r3, [sp, #4]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	4691      	mov	r9, r2
 80029a6:	e7e0      	b.n	800296a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029a8:	682a      	ldr	r2, [r5, #0]
 80029aa:	6853      	ldr	r3, [r2, #4]
 80029ac:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80029b0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b2:	686b      	ldr	r3, [r5, #4]
 80029b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b8:	d00b      	beq.n	80029d2 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c0:	d014      	beq.n	80029ec <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80029c8:	2300      	movs	r3, #0
 80029ca:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80029ce:	2003      	movs	r0, #3
 80029d0:	e018      	b.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d2:	68ab      	ldr	r3, [r5, #8]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	d002      	beq.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d1ec      	bne.n	80029ba <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80029e0:	682a      	ldr	r2, [r5, #0]
 80029e2:	6813      	ldr	r3, [r2, #0]
 80029e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e7e6      	b.n	80029ba <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 80029ec:	682a      	ldr	r2, [r5, #0]
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	682a      	ldr	r2, [r5, #0]
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e7df      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8002a02:	2000      	movs	r0, #0
}
 8002a04:	b002      	add	sp, #8
 8002a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000

08002a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b510      	push	{r4, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	4604      	mov	r4, r0
 8002a16:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	9200      	str	r2, [sp, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	f7ff ff8d 	bl	800293c <SPI_WaitFlagStateUntilTimeout>
 8002a22:	b908      	cbnz	r0, 8002a28 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002a24:	b002      	add	sp, #8
 8002a26:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a2a:	f043 0320 	orr.w	r3, r3, #32
 8002a2e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a30:	2003      	movs	r0, #3
 8002a32:	e7f7      	b.n	8002a24 <SPI_EndRxTxTransaction+0x14>

08002a34 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d056      	beq.n	8002ae6 <HAL_SPI_Init+0xb2>
{
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a3e:	b933      	cbnz	r3, 8002a4e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a40:	6843      	ldr	r3, [r0, #4]
 8002a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a46:	d005      	beq.n	8002a54 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61c3      	str	r3, [r0, #28]
 8002a4c:	e002      	b.n	8002a54 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a52:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a58:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03c      	beq.n	8002ada <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002a66:	6822      	ldr	r2, [r4, #0]
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a70:	6863      	ldr	r3, [r4, #4]
 8002a72:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002a76:	68a2      	ldr	r2, [r4, #8]
 8002a78:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	68e2      	ldr	r2, [r4, #12]
 8002a80:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a84:	4313      	orrs	r3, r2
 8002a86:	6922      	ldr	r2, [r4, #16]
 8002a88:	f002 0202 	and.w	r2, r2, #2
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	6962      	ldr	r2, [r4, #20]
 8002a90:	f002 0201 	and.w	r2, r2, #1
 8002a94:	4313      	orrs	r3, r2
 8002a96:	69a2      	ldr	r2, [r4, #24]
 8002a98:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	69e2      	ldr	r2, [r4, #28]
 8002aa0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	6a22      	ldr	r2, [r4, #32]
 8002aa8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002aac:	4313      	orrs	r3, r2
 8002aae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ab0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ab4:	6821      	ldr	r1, [r4, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002aba:	8b63      	ldrh	r3, [r4, #26]
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	69d3      	ldr	r3, [r2, #28]
 8002ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002acc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ace:	2000      	movs	r0, #0
 8002ad0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002ad8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002ada:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7fe fcda 	bl	8001498 <HAL_SPI_MspInit>
 8002ae4:	e7bc      	b.n	8002a60 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002ae6:	2001      	movs	r0, #1
}
 8002ae8:	4770      	bx	lr

08002aea <HAL_SPI_Transmit>:
{
 8002aea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002aee:	b083      	sub	sp, #12
 8002af0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8002af2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	f000 80d1 	beq.w	8002c9e <HAL_SPI_Transmit+0x1b4>
 8002afc:	4604      	mov	r4, r0
 8002afe:	4688      	mov	r8, r1
 8002b00:	4691      	mov	r9, r2
 8002b02:	2301      	movs	r3, #1
 8002b04:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002b08:	f7fe fe50 	bl	80017ac <HAL_GetTick>
 8002b0c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002b0e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8002b12:	b2f6      	uxtb	r6, r6
 8002b14:	2e01      	cmp	r6, #1
 8002b16:	f040 80af 	bne.w	8002c78 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 8002b1a:	f1b8 0f00 	cmp.w	r8, #0
 8002b1e:	f000 80ac 	beq.w	8002c7a <HAL_SPI_Transmit+0x190>
 8002b22:	f1b9 0f00 	cmp.w	r9, #0
 8002b26:	f000 80a8 	beq.w	8002c7a <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b34:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b38:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b3c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b40:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b42:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b44:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b46:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b48:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4a:	68a3      	ldr	r3, [r4, #8]
 8002b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b50:	d01e      	beq.n	8002b90 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b5a:	d103      	bne.n	8002b64 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b62:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b64:	68e3      	ldr	r3, [r4, #12]
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6a:	d01c      	beq.n	8002ba6 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6c:	6863      	ldr	r3, [r4, #4]
 8002b6e:	b113      	cbz	r3, 8002b76 <HAL_SPI_Transmit+0x8c>
 8002b70:	f1b9 0f01 	cmp.w	r9, #1
 8002b74:	d152      	bne.n	8002c1c <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b80:	3301      	adds	r3, #1
 8002b82:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002b84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002b8e:	e045      	b.n	8002c1c <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	6813      	ldr	r3, [r2, #0]
 8002b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b98:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	6813      	ldr	r3, [r2, #0]
 8002b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e7d5      	b.n	8002b52 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba6:	6863      	ldr	r3, [r4, #4]
 8002ba8:	b113      	cbz	r3, 8002bb0 <HAL_SPI_Transmit+0xc6>
 8002baa:	f1b9 0f01 	cmp.w	r9, #1
 8002bae:	d116      	bne.n	8002bde <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bba:	3302      	adds	r3, #2
 8002bbc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002bbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002bc8:	e009      	b.n	8002bde <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bca:	f7fe fdef 	bl	80017ac <HAL_GetTick>
 8002bce:	1bc0      	subs	r0, r0, r7
 8002bd0:	42a8      	cmp	r0, r5
 8002bd2:	d302      	bcc.n	8002bda <HAL_SPI_Transmit+0xf0>
 8002bd4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002bd8:	d159      	bne.n	8002c8e <HAL_SPI_Transmit+0x1a4>
 8002bda:	2d00      	cmp	r5, #0
 8002bdc:	d059      	beq.n	8002c92 <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 8002bde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d033      	beq.n	8002c4e <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	f012 0f02 	tst.w	r2, #2
 8002bee:	d0ec      	beq.n	8002bca <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bf2:	8812      	ldrh	r2, [r2, #0]
 8002bf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002bfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002c06:	e7ea      	b.n	8002bde <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c08:	f7fe fdd0 	bl	80017ac <HAL_GetTick>
 8002c0c:	1bc0      	subs	r0, r0, r7
 8002c0e:	42a8      	cmp	r0, r5
 8002c10:	d302      	bcc.n	8002c18 <HAL_SPI_Transmit+0x12e>
 8002c12:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002c16:	d13e      	bne.n	8002c96 <HAL_SPI_Transmit+0x1ac>
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d03e      	beq.n	8002c9a <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8002c1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	b1ab      	cbz	r3, 8002c4e <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	f012 0f02 	tst.w	r2, #2
 8002c2a:	d0ed      	beq.n	8002c08 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c34:	3301      	adds	r3, #1
 8002c36:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002c38:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8002c3c:	fa1f fc8c 	uxth.w	ip, ip
 8002c40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002c44:	fa1f fc8c 	uxth.w	ip, ip
 8002c48:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8002c4c:	e7e6      	b.n	8002c1c <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c4e:	463a      	mov	r2, r7
 8002c50:	4629      	mov	r1, r5
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff fedc 	bl	8002a10 <SPI_EndRxTxTransaction>
 8002c58:	b108      	cbz	r0, 8002c5e <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c5e:	68a3      	ldr	r3, [r4, #8]
 8002c60:	b933      	cbnz	r3, 8002c70 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	9201      	str	r2, [sp, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c72:	b913      	cbnz	r3, 8002c7a <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c74:	2600      	movs	r6, #0
 8002c76:	e000      	b.n	8002c7a <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 8002c78:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c80:	2300      	movs	r3, #0
 8002c82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002c86:	4630      	mov	r0, r6
 8002c88:	b003      	add	sp, #12
 8002c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8002c8e:	2603      	movs	r6, #3
 8002c90:	e7f3      	b.n	8002c7a <HAL_SPI_Transmit+0x190>
 8002c92:	2603      	movs	r6, #3
 8002c94:	e7f1      	b.n	8002c7a <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 8002c96:	2603      	movs	r6, #3
 8002c98:	e7ef      	b.n	8002c7a <HAL_SPI_Transmit+0x190>
 8002c9a:	2603      	movs	r6, #3
 8002c9c:	e7ed      	b.n	8002c7a <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 8002c9e:	2602      	movs	r6, #2
 8002ca0:	e7f1      	b.n	8002c86 <HAL_SPI_Transmit+0x19c>
	...

08002ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca6:	6a03      	ldr	r3, [r0, #32]
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cb4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb8:	680c      	ldr	r4, [r1, #0]
 8002cba:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cbe:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cc2:	688b      	ldr	r3, [r1, #8]
 8002cc4:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cc6:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <TIM_OC1_SetConfig+0x58>)
 8002cc8:	42a0      	cmp	r0, r4
 8002cca:	d009      	beq.n	8002ce0 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ccc:	4c0b      	ldr	r4, [pc, #44]	; (8002cfc <TIM_OC1_SetConfig+0x58>)
 8002cce:	42a0      	cmp	r0, r4
 8002cd0:	d00d      	beq.n	8002cee <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd2:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd4:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cd6:	684a      	ldr	r2, [r1, #4]
 8002cd8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cda:	6203      	str	r3, [r0, #32]
}
 8002cdc:	bc70      	pop	{r4, r5, r6}
 8002cde:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ce0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002ce4:	68ca      	ldr	r2, [r1, #12]
 8002ce6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ce8:	f023 0304 	bic.w	r3, r3, #4
 8002cec:	e7ee      	b.n	8002ccc <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cee:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002cf2:	694a      	ldr	r2, [r1, #20]
 8002cf4:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cf6:	698e      	ldr	r6, [r1, #24]
 8002cf8:	4316      	orrs	r6, r2
 8002cfa:	e7ea      	b.n	8002cd2 <TIM_OC1_SetConfig+0x2e>
 8002cfc:	40012c00 	.word	0x40012c00

08002d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d02:	6a03      	ldr	r3, [r0, #32]
 8002d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d0c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d0e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d10:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d14:	680c      	ldr	r4, [r1, #0]
 8002d16:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d1c:	688c      	ldr	r4, [r1, #8]
 8002d1e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d22:	4c0f      	ldr	r4, [pc, #60]	; (8002d60 <TIM_OC3_SetConfig+0x60>)
 8002d24:	42a0      	cmp	r0, r4
 8002d26:	d009      	beq.n	8002d3c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d28:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <TIM_OC3_SetConfig+0x60>)
 8002d2a:	42a0      	cmp	r0, r4
 8002d2c:	d00e      	beq.n	8002d4c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d30:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d32:	684a      	ldr	r2, [r1, #4]
 8002d34:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d36:	6203      	str	r3, [r0, #32]
}
 8002d38:	bc30      	pop	{r4, r5}
 8002d3a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d40:	68cc      	ldr	r4, [r1, #12]
 8002d42:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d4a:	e7ed      	b.n	8002d28 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d4c:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d50:	694c      	ldr	r4, [r1, #20]
 8002d52:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d56:	698c      	ldr	r4, [r1, #24]
 8002d58:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8002d5c:	e7e7      	b.n	8002d2e <TIM_OC3_SetConfig+0x2e>
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00

08002d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d66:	6a03      	ldr	r3, [r0, #32]
 8002d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d74:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d78:	680d      	ldr	r5, [r1, #0]
 8002d7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d82:	688d      	ldr	r5, [r1, #8]
 8002d84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d88:	4d07      	ldr	r5, [pc, #28]	; (8002da8 <TIM_OC4_SetConfig+0x44>)
 8002d8a:	42a8      	cmp	r0, r5
 8002d8c:	d006      	beq.n	8002d9c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d90:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d92:	684a      	ldr	r2, [r1, #4]
 8002d94:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d96:	6203      	str	r3, [r0, #32]
}
 8002d98:	bc30      	pop	{r4, r5}
 8002d9a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d9c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002da0:	694d      	ldr	r5, [r1, #20]
 8002da2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002da6:	e7f2      	b.n	8002d8e <TIM_OC4_SetConfig+0x2a>
 8002da8:	40012c00 	.word	0x40012c00

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db0:	6a04      	ldr	r4, [r0, #32]
 8002db2:	f024 0401 	bic.w	r4, r4, #1
 8002db6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dba:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dbe:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dc2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002dc6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dca:	6203      	str	r3, [r0, #32]
}
 8002dcc:	bc10      	pop	{r4}
 8002dce:	4770      	bx	lr

08002dd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd2:	6a04      	ldr	r4, [r0, #32]
 8002dd4:	f024 0410 	bic.w	r4, r4, #16
 8002dd8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dda:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ddc:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dde:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dea:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002df0:	6203      	str	r3, [r0, #32]
}
 8002df2:	bc10      	pop	{r4}
 8002df4:	4770      	bx	lr

08002df6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e02:	6083      	str	r3, [r0, #8]
}
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002e08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <HAL_TIM_Base_Start+0x58>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d010      	beq.n	8002e42 <HAL_TIM_Base_Start+0x3a>
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d00d      	beq.n	8002e42 <HAL_TIM_Base_Start+0x3a>
 8002e26:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIM_Base_Start+0x3a>
 8002e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d005      	beq.n	8002e42 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002e3e:	2000      	movs	r0, #0
 8002e40:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	2a06      	cmp	r2, #6
 8002e4a:	d007      	beq.n	8002e5c <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002e54:	2000      	movs	r0, #0
 8002e56:	4770      	bx	lr
    return HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	4770      	bx	lr
  return HAL_OK;
 8002e5c:	2000      	movs	r0, #0
}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <HAL_TIM_PWM_MspInit>:
}
 8002e64:	4770      	bx	lr

08002e66 <TIM_DMADelayPulseCplt>:
{
 8002e66:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e68:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e6c:	4283      	cmp	r3, r0
 8002e6e:	d00e      	beq.n	8002e8e <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e72:	4283      	cmp	r3, r0
 8002e74:	d014      	beq.n	8002ea0 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e78:	4283      	cmp	r3, r0
 8002e7a:	d01a      	beq.n	8002eb2 <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e7e:	4283      	cmp	r3, r0
 8002e80:	d020      	beq.n	8002ec4 <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f000 ff78 	bl	8003d78 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	7723      	strb	r3, [r4, #28]
}
 8002e8c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002e92:	6983      	ldr	r3, [r0, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f4      	bne.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e9e:	e7f0      	b.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002ea4:	6983      	ldr	r3, [r0, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1eb      	bne.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002eb0:	e7e7      	b.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002eb6:	6983      	ldr	r3, [r0, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e2      	bne.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002ec2:	e7de      	b.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002ec8:	6983      	ldr	r3, [r0, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1d9      	bne.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002ed4:	e7d5      	b.n	8002e82 <TIM_DMADelayPulseCplt+0x1c>

08002ed6 <TIM_DMADelayPulseHalfCplt>:
{
 8002ed6:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002edc:	4283      	cmp	r3, r0
 8002ede:	d00b      	beq.n	8002ef8 <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ee2:	4283      	cmp	r3, r0
 8002ee4:	d010      	beq.n	8002f08 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ee8:	4283      	cmp	r3, r0
 8002eea:	d010      	beq.n	8002f0e <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eee:	4283      	cmp	r3, r0
 8002ef0:	d104      	bne.n	8002efc <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	7723      	strb	r3, [r4, #28]
 8002ef6:	e001      	b.n	8002efc <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002efc:	4620      	mov	r0, r4
 8002efe:	f000 ff23 	bl	8003d48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	2300      	movs	r3, #0
 8002f04:	7723      	strb	r3, [r4, #28]
}
 8002f06:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	7723      	strb	r3, [r4, #28]
 8002f0c:	e7f6      	b.n	8002efc <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0e:	2304      	movs	r3, #4
 8002f10:	7723      	strb	r3, [r4, #28]
 8002f12:	e7f3      	b.n	8002efc <TIM_DMADelayPulseHalfCplt+0x26>

08002f14 <HAL_TIM_ErrorCallback>:
}
 8002f14:	4770      	bx	lr

08002f16 <TIM_DMAError>:
{
 8002f16:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f18:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f1c:	4283      	cmp	r3, r0
 8002f1e:	d00c      	beq.n	8002f3a <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f22:	4283      	cmp	r3, r0
 8002f24:	d013      	beq.n	8002f4e <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f28:	4283      	cmp	r3, r0
 8002f2a:	d016      	beq.n	8002f5a <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f2e:	4283      	cmp	r3, r0
 8002f30:	d019      	beq.n	8002f66 <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002f38:	e003      	b.n	8002f42 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ffe6 	bl	8002f14 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	7723      	strb	r3, [r4, #28]
}
 8002f4c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f52:	2301      	movs	r3, #1
 8002f54:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f58:	e7f3      	b.n	8002f42 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f64:	e7ed      	b.n	8002f42 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f66:	2308      	movs	r3, #8
 8002f68:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002f70:	e7e7      	b.n	8002f42 <TIM_DMAError+0x2c>
	...

08002f74 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002f74:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f76:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <TIM_Base_SetConfig+0x70>)
 8002f78:	4290      	cmp	r0, r2
 8002f7a:	d00a      	beq.n	8002f92 <TIM_Base_SetConfig+0x1e>
 8002f7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f80:	d007      	beq.n	8002f92 <TIM_Base_SetConfig+0x1e>
 8002f82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f86:	4290      	cmp	r0, r2
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x1e>
 8002f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f8e:	4290      	cmp	r0, r2
 8002f90:	d103      	bne.n	8002f9a <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f96:	684a      	ldr	r2, [r1, #4]
 8002f98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <TIM_Base_SetConfig+0x70>)
 8002f9c:	4290      	cmp	r0, r2
 8002f9e:	d00a      	beq.n	8002fb6 <TIM_Base_SetConfig+0x42>
 8002fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fa4:	d007      	beq.n	8002fb6 <TIM_Base_SetConfig+0x42>
 8002fa6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002faa:	4290      	cmp	r0, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_Base_SetConfig+0x42>
 8002fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fb2:	4290      	cmp	r0, r2
 8002fb4:	d103      	bne.n	8002fbe <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fba:	68ca      	ldr	r2, [r1, #12]
 8002fbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc2:	694a      	ldr	r2, [r1, #20]
 8002fc4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002fc6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc8:	688b      	ldr	r3, [r1, #8]
 8002fca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fcc:	680b      	ldr	r3, [r1, #0]
 8002fce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <TIM_Base_SetConfig+0x70>)
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	d002      	beq.n	8002fdc <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	6143      	str	r3, [r0, #20]
}
 8002fda:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002fdc:	690b      	ldr	r3, [r1, #16]
 8002fde:	6303      	str	r3, [r0, #48]	; 0x30
 8002fe0:	e7f9      	b.n	8002fd6 <TIM_Base_SetConfig+0x62>
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00

08002fe8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002fe8:	b340      	cbz	r0, 800303c <HAL_TIM_Base_Init+0x54>
{
 8002fea:	b510      	push	{r4, lr}
 8002fec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ff2:	b1f3      	cbz	r3, 8003032 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	f851 0b04 	ldr.w	r0, [r1], #4
 8003000:	f7ff ffb8 	bl	8002f74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003004:	2301      	movs	r3, #1
 8003006:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800300e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003012:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003016:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800301e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003022:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800302a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800302e:	2000      	movs	r0, #0
}
 8003030:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003032:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003036:	f7fe fa61 	bl	80014fc <HAL_TIM_Base_MspInit>
 800303a:	e7db      	b.n	8002ff4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800303c:	2001      	movs	r0, #1
}
 800303e:	4770      	bx	lr

08003040 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003040:	b340      	cbz	r0, 8003094 <HAL_TIM_PWM_Init+0x54>
{
 8003042:	b510      	push	{r4, lr}
 8003044:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800304a:	b1f3      	cbz	r3, 800308a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003052:	4621      	mov	r1, r4
 8003054:	f851 0b04 	ldr.w	r0, [r1], #4
 8003058:	f7ff ff8c 	bl	8002f74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	2301      	movs	r3, #1
 800305e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003062:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003066:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800306a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800306e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800307a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800307e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003086:	2000      	movs	r0, #0
}
 8003088:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800308a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800308e:	f7ff fee9 	bl	8002e64 <HAL_TIM_PWM_MspInit>
 8003092:	e7db      	b.n	800304c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003094:	2001      	movs	r0, #1
}
 8003096:	4770      	bx	lr

08003098 <TIM_OC2_SetConfig>:
{
 8003098:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309a:	6a03      	ldr	r3, [r0, #32]
 800309c:	f023 0310 	bic.w	r3, r3, #16
 80030a0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80030a2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80030a4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80030a6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ac:	680d      	ldr	r5, [r1, #0]
 80030ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80030b2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030b6:	688d      	ldr	r5, [r1, #8]
 80030b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030bc:	4d0e      	ldr	r5, [pc, #56]	; (80030f8 <TIM_OC2_SetConfig+0x60>)
 80030be:	42a8      	cmp	r0, r5
 80030c0:	d009      	beq.n	80030d6 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	4d0d      	ldr	r5, [pc, #52]	; (80030f8 <TIM_OC2_SetConfig+0x60>)
 80030c4:	42a8      	cmp	r0, r5
 80030c6:	d00e      	beq.n	80030e6 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80030c8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80030ca:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80030cc:	684a      	ldr	r2, [r1, #4]
 80030ce:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80030d0:	6203      	str	r3, [r0, #32]
}
 80030d2:	bc30      	pop	{r4, r5}
 80030d4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80030d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030da:	68cd      	ldr	r5, [r1, #12]
 80030dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80030e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e4:	e7ed      	b.n	80030c2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030ea:	694d      	ldr	r5, [r1, #20]
 80030ec:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030f0:	698d      	ldr	r5, [r1, #24]
 80030f2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80030f6:	e7e7      	b.n	80030c8 <TIM_OC2_SetConfig+0x30>
 80030f8:	40012c00 	.word	0x40012c00

080030fc <HAL_TIM_PWM_ConfigChannel>:
{
 80030fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80030fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d060      	beq.n	80031c8 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8003106:	4604      	mov	r4, r0
 8003108:	460d      	mov	r5, r1
 800310a:	2301      	movs	r3, #1
 800310c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003110:	2a0c      	cmp	r2, #12
 8003112:	d81a      	bhi.n	800314a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003114:	e8df f002 	tbb	[pc, r2]
 8003118:	19191907 	.word	0x19191907
 800311c:	1919191d 	.word	0x1919191d
 8003120:	19191931 	.word	0x19191931
 8003124:	44          	.byte	0x44
 8003125:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003126:	6800      	ldr	r0, [r0, #0]
 8003128:	f7ff fdbc 	bl	8002ca4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	6993      	ldr	r3, [r2, #24]
 8003130:	f043 0308 	orr.w	r3, r3, #8
 8003134:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	6993      	ldr	r3, [r2, #24]
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	6993      	ldr	r3, [r2, #24]
 8003144:	6929      	ldr	r1, [r5, #16]
 8003146:	430b      	orrs	r3, r1
 8003148:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800314a:	2000      	movs	r0, #0
 800314c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003150:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003152:	6800      	ldr	r0, [r0, #0]
 8003154:	f7ff ffa0 	bl	8003098 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	6993      	ldr	r3, [r2, #24]
 800315c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003160:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	6993      	ldr	r3, [r2, #24]
 8003166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800316a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	6993      	ldr	r3, [r2, #24]
 8003170:	6929      	ldr	r1, [r5, #16]
 8003172:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003176:	6193      	str	r3, [r2, #24]
      break;
 8003178:	e7e7      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	f7ff fdc0 	bl	8002d00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	69d3      	ldr	r3, [r2, #28]
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	69d3      	ldr	r3, [r2, #28]
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	69d3      	ldr	r3, [r2, #28]
 8003198:	6929      	ldr	r1, [r5, #16]
 800319a:	430b      	orrs	r3, r1
 800319c:	61d3      	str	r3, [r2, #28]
      break;
 800319e:	e7d4      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031a0:	6800      	ldr	r0, [r0, #0]
 80031a2:	f7ff fddf 	bl	8002d64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031a6:	6822      	ldr	r2, [r4, #0]
 80031a8:	69d3      	ldr	r3, [r2, #28]
 80031aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031b0:	6822      	ldr	r2, [r4, #0]
 80031b2:	69d3      	ldr	r3, [r2, #28]
 80031b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	69d3      	ldr	r3, [r2, #28]
 80031be:	6929      	ldr	r1, [r5, #16]
 80031c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80031c4:	61d3      	str	r3, [r2, #28]
      break;
 80031c6:	e7c0      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80031c8:	2002      	movs	r0, #2
 80031ca:	e7c1      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x54>

080031cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031cc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80031d8:	430a      	orrs	r2, r1
 80031da:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031de:	6082      	str	r2, [r0, #8]
}
 80031e0:	bc10      	pop	{r4}
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80031e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d066      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xd6>
{
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80031f0:	2301      	movs	r3, #1
 80031f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80031fc:	6802      	ldr	r2, [r0, #0]
 80031fe:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003204:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003208:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800320a:	680b      	ldr	r3, [r1, #0]
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d040      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xae>
 8003210:	d822      	bhi.n	8003258 <HAL_TIM_ConfigClockSource+0x74>
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d047      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0xc2>
 8003216:	d90b      	bls.n	8003230 <HAL_TIM_ConfigClockSource+0x4c>
 8003218:	2b50      	cmp	r3, #80	; 0x50
 800321a:	d10e      	bne.n	800323a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800321c:	68ca      	ldr	r2, [r1, #12]
 800321e:	6849      	ldr	r1, [r1, #4]
 8003220:	6800      	ldr	r0, [r0, #0]
 8003222:	f7ff fdc3 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003226:	2150      	movs	r1, #80	; 0x50
 8003228:	6820      	ldr	r0, [r4, #0]
 800322a:	f7ff fde4 	bl	8002df6 <TIM_ITRx_SetConfig>
      break;
 800322e:	e004      	b.n	800323a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003230:	2b20      	cmp	r3, #32
 8003232:	d00c      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x6a>
 8003234:	d908      	bls.n	8003248 <HAL_TIM_ConfigClockSource+0x64>
 8003236:	2b30      	cmp	r3, #48	; 0x30
 8003238:	d009      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 800323a:	2301      	movs	r3, #1
 800323c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003240:	2000      	movs	r0, #0
 8003242:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003246:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003248:	b10b      	cbz	r3, 800324e <HAL_TIM_ConfigClockSource+0x6a>
 800324a:	2b10      	cmp	r3, #16
 800324c:	d1f5      	bne.n	800323a <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800324e:	4619      	mov	r1, r3
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	f7ff fdd0 	bl	8002df6 <TIM_ITRx_SetConfig>
        break;
 8003256:	e7f0      	b.n	800323a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003258:	2b70      	cmp	r3, #112	; 0x70
 800325a:	d00e      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x96>
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003260:	d1eb      	bne.n	800323a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003262:	68cb      	ldr	r3, [r1, #12]
 8003264:	684a      	ldr	r2, [r1, #4]
 8003266:	6889      	ldr	r1, [r1, #8]
 8003268:	6800      	ldr	r0, [r0, #0]
 800326a:	f7ff ffaf 	bl	80031cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	6893      	ldr	r3, [r2, #8]
 8003272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003276:	6093      	str	r3, [r2, #8]
      break;
 8003278:	e7df      	b.n	800323a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	68cb      	ldr	r3, [r1, #12]
 800327c:	684a      	ldr	r2, [r1, #4]
 800327e:	6889      	ldr	r1, [r1, #8]
 8003280:	6800      	ldr	r0, [r0, #0]
 8003282:	f7ff ffa3 	bl	80031cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800328a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800328e:	6093      	str	r3, [r2, #8]
      break;
 8003290:	e7d3      	b.n	800323a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	68ca      	ldr	r2, [r1, #12]
 8003294:	6849      	ldr	r1, [r1, #4]
 8003296:	6800      	ldr	r0, [r0, #0]
 8003298:	f7ff fd9a 	bl	8002dd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800329c:	2160      	movs	r1, #96	; 0x60
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	f7ff fda9 	bl	8002df6 <TIM_ITRx_SetConfig>
      break;
 80032a4:	e7c9      	b.n	800323a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	68ca      	ldr	r2, [r1, #12]
 80032a8:	6849      	ldr	r1, [r1, #4]
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	f7ff fd7e 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	6820      	ldr	r0, [r4, #0]
 80032b4:	f7ff fd9f 	bl	8002df6 <TIM_ITRx_SetConfig>
      break;
 80032b8:	e7bf      	b.n	800323a <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80032ba:	2002      	movs	r0, #2
}
 80032bc:	4770      	bx	lr

080032be <TIM_SlaveTimer_SetConfig>:
{
 80032be:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 80032c0:	6804      	ldr	r4, [r0, #0]
 80032c2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80032c8:	684b      	ldr	r3, [r1, #4]
 80032ca:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80032cc:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80032d0:	680a      	ldr	r2, [r1, #0]
 80032d2:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80032d4:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80032d6:	684b      	ldr	r3, [r1, #4]
 80032d8:	2b60      	cmp	r3, #96	; 0x60
 80032da:	d02c      	beq.n	8003336 <TIM_SlaveTimer_SetConfig+0x78>
 80032dc:	d80c      	bhi.n	80032f8 <TIM_SlaveTimer_SetConfig+0x3a>
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d014      	beq.n	800330c <TIM_SlaveTimer_SetConfig+0x4e>
 80032e2:	2b50      	cmp	r3, #80	; 0x50
 80032e4:	d106      	bne.n	80032f4 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	690a      	ldr	r2, [r1, #16]
 80032e8:	6889      	ldr	r1, [r1, #8]
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	f7ff fd5e 	bl	8002dac <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 80032f0:	2000      	movs	r0, #0
      break;
 80032f2:	e028      	b.n	8003346 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 80032f4:	2000      	movs	r0, #0
 80032f6:	e026      	b.n	8003346 <TIM_SlaveTimer_SetConfig+0x88>
 80032f8:	2b70      	cmp	r3, #112	; 0x70
 80032fa:	d123      	bne.n	8003344 <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 80032fc:	690b      	ldr	r3, [r1, #16]
 80032fe:	688a      	ldr	r2, [r1, #8]
 8003300:	68c9      	ldr	r1, [r1, #12]
 8003302:	6800      	ldr	r0, [r0, #0]
 8003304:	f7ff ff62 	bl	80031cc <TIM_ETR_SetConfig>
  return HAL_OK;
 8003308:	2000      	movs	r0, #0
      break;
 800330a:	e01c      	b.n	8003346 <TIM_SlaveTimer_SetConfig+0x88>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800330c:	680b      	ldr	r3, [r1, #0]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d01a      	beq.n	8003348 <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800331e:	6802      	ldr	r2, [r0, #0]
 8003320:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003326:	6909      	ldr	r1, [r1, #16]
 8003328:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800332c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800332e:	6803      	ldr	r3, [r0, #0]
 8003330:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8003332:	2000      	movs	r0, #0
      break;
 8003334:	e007      	b.n	8003346 <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003336:	690a      	ldr	r2, [r1, #16]
 8003338:	6889      	ldr	r1, [r1, #8]
 800333a:	6800      	ldr	r0, [r0, #0]
 800333c:	f7ff fd48 	bl	8002dd0 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003340:	2000      	movs	r0, #0
      break;
 8003342:	e000      	b.n	8003346 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 8003344:	2000      	movs	r0, #0
}
 8003346:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8003348:	2001      	movs	r0, #1
 800334a:	e7fc      	b.n	8003346 <TIM_SlaveTimer_SetConfig+0x88>

0800334c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800334c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d022      	beq.n	800339a <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003358:	2301      	movs	r3, #1
 800335a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003364:	f7ff ffab 	bl	80032be <TIM_SlaveTimer_SetConfig>
 8003368:	b980      	cbnz	r0, 800338c <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	68d3      	ldr	r3, [r2, #12]
 800336e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003372:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	68d3      	ldr	r3, [r2, #12]
 8003378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337c:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800337e:	2301      	movs	r3, #1
 8003380:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003384:	2300      	movs	r3, #0
 8003386:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800338a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800338c:	2001      	movs	r0, #1
 800338e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003392:	2300      	movs	r3, #0
 8003394:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003398:	e7f7      	b.n	800338a <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 800339a:	2002      	movs	r0, #2
}
 800339c:	4770      	bx	lr

0800339e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800339e:	f001 011f 	and.w	r1, r1, #31
 80033a2:	2301      	movs	r3, #1
 80033a4:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033a8:	6a03      	ldr	r3, [r0, #32]
 80033aa:	ea23 030c 	bic.w	r3, r3, ip
 80033ae:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033b0:	6a03      	ldr	r3, [r0, #32]
 80033b2:	fa02 f101 	lsl.w	r1, r2, r1
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6203      	str	r3, [r0, #32]
}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_PWM_Start>:
{
 80033bc:	b510      	push	{r4, lr}
 80033be:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033c0:	4608      	mov	r0, r1
 80033c2:	bb51      	cbnz	r1, 800341a <HAL_TIM_PWM_Start+0x5e>
 80033c4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	bf18      	it	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d15b      	bne.n	800348c <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d139      	bne.n	800344c <HAL_TIM_PWM_Start+0x90>
 80033d8:	2302      	movs	r3, #2
 80033da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033de:	2201      	movs	r2, #1
 80033e0:	4601      	mov	r1, r0
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	f7ff ffdb 	bl	800339e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <HAL_TIM_PWM_Start+0xd8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d03d      	beq.n	800346c <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	4a28      	ldr	r2, [pc, #160]	; (8003494 <HAL_TIM_PWM_Start+0xd8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d03e      	beq.n	8003476 <HAL_TIM_PWM_Start+0xba>
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d03b      	beq.n	8003476 <HAL_TIM_PWM_Start+0xba>
 80033fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003402:	4293      	cmp	r3, r2
 8003404:	d037      	beq.n	8003476 <HAL_TIM_PWM_Start+0xba>
 8003406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800340a:	4293      	cmp	r3, r2
 800340c:	d033      	beq.n	8003476 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003416:	2000      	movs	r0, #0
 8003418:	e039      	b.n	800348e <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800341a:	2904      	cmp	r1, #4
 800341c:	d008      	beq.n	8003430 <HAL_TIM_PWM_Start+0x74>
 800341e:	2908      	cmp	r1, #8
 8003420:	d00d      	beq.n	800343e <HAL_TIM_PWM_Start+0x82>
 8003422:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	bf18      	it	ne
 800342c:	2301      	movne	r3, #1
 800342e:	e7cf      	b.n	80033d0 <HAL_TIM_PWM_Start+0x14>
 8003430:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	bf18      	it	ne
 800343a:	2301      	movne	r3, #1
 800343c:	e7c8      	b.n	80033d0 <HAL_TIM_PWM_Start+0x14>
 800343e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	bf18      	it	ne
 8003448:	2301      	movne	r3, #1
 800344a:	e7c1      	b.n	80033d0 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344c:	2804      	cmp	r0, #4
 800344e:	d005      	beq.n	800345c <HAL_TIM_PWM_Start+0xa0>
 8003450:	2808      	cmp	r0, #8
 8003452:	d007      	beq.n	8003464 <HAL_TIM_PWM_Start+0xa8>
 8003454:	2302      	movs	r3, #2
 8003456:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800345a:	e7c0      	b.n	80033de <HAL_TIM_PWM_Start+0x22>
 800345c:	2302      	movs	r3, #2
 800345e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003462:	e7bc      	b.n	80033de <HAL_TIM_PWM_Start+0x22>
 8003464:	2302      	movs	r3, #2
 8003466:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800346a:	e7b8      	b.n	80033de <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800346c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
 8003474:	e7bc      	b.n	80033f0 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	2a06      	cmp	r2, #6
 800347e:	d007      	beq.n	8003490 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003488:	2000      	movs	r0, #0
 800348a:	e000      	b.n	800348e <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 800348c:	2001      	movs	r0, #1
}
 800348e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003490:	2000      	movs	r0, #0
 8003492:	e7fc      	b.n	800348e <HAL_TIM_PWM_Start+0xd2>
 8003494:	40012c00 	.word	0x40012c00

08003498 <HAL_TIM_PWM_Start_DMA>:
{
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	4604      	mov	r4, r0
 800349c:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800349e:	460d      	mov	r5, r1
 80034a0:	2900      	cmp	r1, #0
 80034a2:	d12d      	bne.n	8003500 <HAL_TIM_PWM_Start_DMA+0x68>
 80034a4:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80034a8:	b2c0      	uxtb	r0, r0
 80034aa:	2802      	cmp	r0, #2
 80034ac:	bf14      	ite	ne
 80034ae:	2000      	movne	r0, #0
 80034b0:	2001      	moveq	r0, #1
 80034b2:	2800      	cmp	r0, #0
 80034b4:	f040 80f8 	bne.w	80036a8 <HAL_TIM_PWM_Start_DMA+0x210>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	d13d      	bne.n	8003538 <HAL_TIM_PWM_Start_DMA+0xa0>
 80034bc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	2a01      	cmp	r2, #1
 80034c4:	bf14      	ite	ne
 80034c6:	2200      	movne	r2, #0
 80034c8:	2201      	moveq	r2, #1
 80034ca:	2a00      	cmp	r2, #0
 80034cc:	f000 80ee 	beq.w	80036ac <HAL_TIM_PWM_Start_DMA+0x214>
    if ((pData == NULL) && (Length > 0U))
 80034d0:	2e00      	cmp	r6, #0
 80034d2:	d04d      	beq.n	8003570 <HAL_TIM_PWM_Start_DMA+0xd8>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d4:	2d00      	cmp	r5, #0
 80034d6:	d14f      	bne.n	8003578 <HAL_TIM_PWM_Start_DMA+0xe0>
 80034d8:	2202      	movs	r2, #2
 80034da:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 80034de:	2d0c      	cmp	r5, #12
 80034e0:	d870      	bhi.n	80035c4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80034e2:	e8df f015 	tbh	[pc, r5, lsl #1]
 80034e6:	0059      	.short	0x0059
 80034e8:	006f006f 	.word	0x006f006f
 80034ec:	008d006f 	.word	0x008d006f
 80034f0:	006f006f 	.word	0x006f006f
 80034f4:	00a4006f 	.word	0x00a4006f
 80034f8:	006f006f 	.word	0x006f006f
 80034fc:	00bb006f 	.word	0x00bb006f
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003500:	2904      	cmp	r1, #4
 8003502:	d009      	beq.n	8003518 <HAL_TIM_PWM_Start_DMA+0x80>
 8003504:	2908      	cmp	r1, #8
 8003506:	d00f      	beq.n	8003528 <HAL_TIM_PWM_Start_DMA+0x90>
 8003508:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800350c:	b2c0      	uxtb	r0, r0
 800350e:	2802      	cmp	r0, #2
 8003510:	bf14      	ite	ne
 8003512:	2000      	movne	r0, #0
 8003514:	2001      	moveq	r0, #1
 8003516:	e7cc      	b.n	80034b2 <HAL_TIM_PWM_Start_DMA+0x1a>
 8003518:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800351c:	b2c0      	uxtb	r0, r0
 800351e:	2802      	cmp	r0, #2
 8003520:	bf14      	ite	ne
 8003522:	2000      	movne	r0, #0
 8003524:	2001      	moveq	r0, #1
 8003526:	e7c4      	b.n	80034b2 <HAL_TIM_PWM_Start_DMA+0x1a>
 8003528:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800352c:	b2c0      	uxtb	r0, r0
 800352e:	2802      	cmp	r0, #2
 8003530:	bf14      	ite	ne
 8003532:	2000      	movne	r0, #0
 8003534:	2001      	moveq	r0, #1
 8003536:	e7bc      	b.n	80034b2 <HAL_TIM_PWM_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003538:	2d04      	cmp	r5, #4
 800353a:	d009      	beq.n	8003550 <HAL_TIM_PWM_Start_DMA+0xb8>
 800353c:	2d08      	cmp	r5, #8
 800353e:	d00f      	beq.n	8003560 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003540:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	2a01      	cmp	r2, #1
 8003548:	bf14      	ite	ne
 800354a:	2200      	movne	r2, #0
 800354c:	2201      	moveq	r2, #1
 800354e:	e7bc      	b.n	80034ca <HAL_TIM_PWM_Start_DMA+0x32>
 8003550:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	2a01      	cmp	r2, #1
 8003558:	bf14      	ite	ne
 800355a:	2200      	movne	r2, #0
 800355c:	2201      	moveq	r2, #1
 800355e:	e7b4      	b.n	80034ca <HAL_TIM_PWM_Start_DMA+0x32>
 8003560:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	2a01      	cmp	r2, #1
 8003568:	bf14      	ite	ne
 800356a:	2200      	movne	r2, #0
 800356c:	2201      	moveq	r2, #1
 800356e:	e7ac      	b.n	80034ca <HAL_TIM_PWM_Start_DMA+0x32>
    if ((pData == NULL) && (Length > 0U))
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0af      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x3c>
      return HAL_ERROR;
 8003574:	2001      	movs	r0, #1
 8003576:	e09a      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003578:	2d04      	cmp	r5, #4
 800357a:	d005      	beq.n	8003588 <HAL_TIM_PWM_Start_DMA+0xf0>
 800357c:	2d08      	cmp	r5, #8
 800357e:	d007      	beq.n	8003590 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003580:	2202      	movs	r2, #2
 8003582:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8003586:	e7aa      	b.n	80034de <HAL_TIM_PWM_Start_DMA+0x46>
 8003588:	2202      	movs	r2, #2
 800358a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 800358e:	e7a6      	b.n	80034de <HAL_TIM_PWM_Start_DMA+0x46>
 8003590:	2202      	movs	r2, #2
 8003592:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8003596:	e7a2      	b.n	80034de <HAL_TIM_PWM_Start_DMA+0x46>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003598:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800359a:	494a      	ldr	r1, [pc, #296]	; (80036c4 <HAL_TIM_PWM_Start_DMA+0x22c>)
 800359c:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800359e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035a0:	4949      	ldr	r1, [pc, #292]	; (80036c8 <HAL_TIM_PWM_Start_DMA+0x230>)
 80035a2:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80035a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035a6:	4949      	ldr	r1, [pc, #292]	; (80036cc <HAL_TIM_PWM_Start_DMA+0x234>)
 80035a8:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	3234      	adds	r2, #52	; 0x34
 80035ae:	4631      	mov	r1, r6
 80035b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80035b2:	f7fe fc37 	bl	8001e24 <HAL_DMA_Start_IT>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d17a      	bne.n	80036b0 <HAL_TIM_PWM_Start_DMA+0x218>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	68d3      	ldr	r3, [r2, #12]
 80035be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c4:	2201      	movs	r2, #1
 80035c6:	4629      	mov	r1, r5
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	f7ff fee8 	bl	800339e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	4a3f      	ldr	r2, [pc, #252]	; (80036d0 <HAL_TIM_PWM_Start_DMA+0x238>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d058      	beq.n	8003688 <HAL_TIM_PWM_Start_DMA+0x1f0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <HAL_TIM_PWM_Start_DMA+0x238>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d059      	beq.n	8003692 <HAL_TIM_PWM_Start_DMA+0x1fa>
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d056      	beq.n	8003692 <HAL_TIM_PWM_Start_DMA+0x1fa>
 80035e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d052      	beq.n	8003692 <HAL_TIM_PWM_Start_DMA+0x1fa>
 80035ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d04e      	beq.n	8003692 <HAL_TIM_PWM_Start_DMA+0x1fa>
    __HAL_TIM_ENABLE(htim);
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035fc:	2000      	movs	r0, #0
 80035fe:	e056      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003600:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003602:	4930      	ldr	r1, [pc, #192]	; (80036c4 <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003604:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003608:	492f      	ldr	r1, [pc, #188]	; (80036c8 <HAL_TIM_PWM_Start_DMA+0x230>)
 800360a:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800360c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800360e:	492f      	ldr	r1, [pc, #188]	; (80036cc <HAL_TIM_PWM_Start_DMA+0x234>)
 8003610:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	3238      	adds	r2, #56	; 0x38
 8003616:	4631      	mov	r1, r6
 8003618:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800361a:	f7fe fc03 	bl	8001e24 <HAL_DMA_Start_IT>
 800361e:	2800      	cmp	r0, #0
 8003620:	d148      	bne.n	80036b4 <HAL_TIM_PWM_Start_DMA+0x21c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	68d3      	ldr	r3, [r2, #12]
 8003626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800362a:	60d3      	str	r3, [r2, #12]
      break;
 800362c:	e7ca      	b.n	80035c4 <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800362e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003630:	4924      	ldr	r1, [pc, #144]	; (80036c4 <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003632:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003634:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003636:	4924      	ldr	r1, [pc, #144]	; (80036c8 <HAL_TIM_PWM_Start_DMA+0x230>)
 8003638:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800363a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800363c:	4923      	ldr	r1, [pc, #140]	; (80036cc <HAL_TIM_PWM_Start_DMA+0x234>)
 800363e:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003640:	6822      	ldr	r2, [r4, #0]
 8003642:	323c      	adds	r2, #60	; 0x3c
 8003644:	4631      	mov	r1, r6
 8003646:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003648:	f7fe fbec 	bl	8001e24 <HAL_DMA_Start_IT>
 800364c:	2800      	cmp	r0, #0
 800364e:	d133      	bne.n	80036b8 <HAL_TIM_PWM_Start_DMA+0x220>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003650:	6822      	ldr	r2, [r4, #0]
 8003652:	68d3      	ldr	r3, [r2, #12]
 8003654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003658:	60d3      	str	r3, [r2, #12]
      break;
 800365a:	e7b3      	b.n	80035c4 <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800365c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800365e:	4919      	ldr	r1, [pc, #100]	; (80036c4 <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003660:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003662:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003664:	4918      	ldr	r1, [pc, #96]	; (80036c8 <HAL_TIM_PWM_Start_DMA+0x230>)
 8003666:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003668:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800366a:	4918      	ldr	r1, [pc, #96]	; (80036cc <HAL_TIM_PWM_Start_DMA+0x234>)
 800366c:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	3240      	adds	r2, #64	; 0x40
 8003672:	4631      	mov	r1, r6
 8003674:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003676:	f7fe fbd5 	bl	8001e24 <HAL_DMA_Start_IT>
 800367a:	b9f8      	cbnz	r0, 80036bc <HAL_TIM_PWM_Start_DMA+0x224>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	68d3      	ldr	r3, [r2, #12]
 8003680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003684:	60d3      	str	r3, [r2, #12]
      break;
 8003686:	e79d      	b.n	80035c4 <HAL_TIM_PWM_Start_DMA+0x12c>
    __HAL_TIM_MOE_ENABLE(htim);
 8003688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800368a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800368e:	645a      	str	r2, [r3, #68]	; 0x44
 8003690:	e7a1      	b.n	80035d6 <HAL_TIM_PWM_Start_DMA+0x13e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003698:	2a06      	cmp	r2, #6
 800369a:	d011      	beq.n	80036c0 <HAL_TIM_PWM_Start_DMA+0x228>
      __HAL_TIM_ENABLE(htim);
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80036a4:	2000      	movs	r0, #0
 80036a6:	e002      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_BUSY;
 80036a8:	2002      	movs	r0, #2
 80036aa:	e000      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_ERROR;
 80036ac:	2001      	movs	r0, #1
}
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80036b0:	2001      	movs	r0, #1
 80036b2:	e7fc      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 80036b4:	2001      	movs	r0, #1
 80036b6:	e7fa      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 80036b8:	2001      	movs	r0, #1
 80036ba:	e7f8      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 80036bc:	2001      	movs	r0, #1
 80036be:	e7f6      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
  return HAL_OK;
 80036c0:	2000      	movs	r0, #0
 80036c2:	e7f4      	b.n	80036ae <HAL_TIM_PWM_Start_DMA+0x216>
 80036c4:	08002e67 	.word	0x08002e67
 80036c8:	08002ed7 	.word	0x08002ed7
 80036cc:	08002f17 	.word	0x08002f17
 80036d0:	40012c00 	.word	0x40012c00

080036d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d02c      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80036dc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80036de:	2301      	movs	r3, #1
 80036e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	2302      	movs	r3, #2
 80036e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ee:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f0:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f4:	680a      	ldr	r2, [r1, #0]
 80036f6:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	6803      	ldr	r3, [r0, #0]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00a      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003708:	d007      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800370a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003716:	4293      	cmp	r3, r2
 8003718:	d104      	bne.n	8003724 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800371e:	684a      	ldr	r2, [r1, #4]
 8003720:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003722:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003724:	2301      	movs	r3, #1
 8003726:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800372a:	2300      	movs	r3, #0
 800372c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003730:	4618      	mov	r0, r3
}
 8003732:	bc10      	pop	{r4}
 8003734:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003736:	2002      	movs	r0, #2
}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40012c00 	.word	0x40012c00

08003740 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003740:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d022      	beq.n	800378e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003748:	2301      	movs	r3, #1
 800374a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800374e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375c:	684a      	ldr	r2, [r1, #4]
 800375e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003764:	680a      	ldr	r2, [r1, #0]
 8003766:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376c:	690a      	ldr	r2, [r1, #16]
 800376e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003774:	694a      	ldr	r2, [r1, #20]
 8003776:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377c:	69ca      	ldr	r2, [r1, #28]
 800377e:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003780:	6802      	ldr	r2, [r0, #0]
 8003782:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003784:	2300      	movs	r3, #0
 8003786:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800378a:	4618      	mov	r0, r3
 800378c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800378e:	2002      	movs	r0, #2
}
 8003790:	4770      	bx	lr
	...

08003794 <ST7920_SendCmd>:
// A replacement for SPI_TRANSMIT

//SPI_HandleTypeDef hspi1;

void ST7920_SendCmd (uint8_t cmd)
{
 8003794:	b530      	push	{r4, r5, lr}
 8003796:	b083      	sub	sp, #12

	uint8_t data[3] = {0};
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <ST7920_SendCmd+0x4c>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80037a0:	2500      	movs	r5, #0
 80037a2:	f88d 5006 	strb.w	r5, [sp, #6]
	data[0] = 0xf8 + (0<<1);
 80037a6:	23f8      	movs	r3, #248	; 0xf8
 80037a8:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = cmd & 0xf0;
 80037ac:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80037b0:	f88d 3005 	strb.w	r3, [sp, #5]
	data[2] = (cmd << 4) & 0xf0;
 80037b4:	0100      	lsls	r0, r0, #4
 80037b6:	f88d 0006 	strb.w	r0, [sp, #6]


	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80037ba:	4c0a      	ldr	r4, [pc, #40]	; (80037e4 <ST7920_SendCmd+0x50>)
 80037bc:	2201      	movs	r2, #1
 80037be:	2140      	movs	r1, #64	; 0x40
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7fe fd1d 	bl	8002200 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 3, 2);
 80037c6:	2302      	movs	r3, #2
 80037c8:	2203      	movs	r2, #3
 80037ca:	a901      	add	r1, sp, #4
 80037cc:	4806      	ldr	r0, [pc, #24]	; (80037e8 <ST7920_SendCmd+0x54>)
 80037ce:	f7ff f98c 	bl	8002aea <HAL_SPI_Transmit>
		//delay_us(50);
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80037d2:	462a      	mov	r2, r5
 80037d4:	2140      	movs	r1, #64	; 0x40
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7fe fd12 	bl	8002200 <HAL_GPIO_WritePin>

}
 80037dc:	b003      	add	sp, #12
 80037de:	bd30      	pop	{r4, r5, pc}
 80037e0:	08007ab8 	.word	0x08007ab8
 80037e4:	40010800 	.word	0x40010800
 80037e8:	200002b8 	.word	0x200002b8

080037ec <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 80037ec:	b530      	push	{r4, r5, lr}
 80037ee:	b083      	sub	sp, #12

	uint8_t dat[3] = {0};
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <ST7920_SendData+0x4c>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80037f8:	2500      	movs	r5, #0
 80037fa:	f88d 5006 	strb.w	r5, [sp, #6]
	dat[0] = 0xf8+(1<<1);
 80037fe:	23fa      	movs	r3, #250	; 0xfa
 8003800:	f88d 3004 	strb.w	r3, [sp, #4]
	dat[1] = data&0xf0;
 8003804:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8003808:	f88d 3005 	strb.w	r3, [sp, #5]
	dat[2] = (data<<4)&0xf0;
 800380c:	0100      	lsls	r0, r0, #4
 800380e:	f88d 0006 	strb.w	r0, [sp, #6]


	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8003812:	4c0a      	ldr	r4, [pc, #40]	; (800383c <ST7920_SendData+0x50>)
 8003814:	2201      	movs	r2, #1
 8003816:	2140      	movs	r1, #64	; 0x40
 8003818:	4620      	mov	r0, r4
 800381a:	f7fe fcf1 	bl	8002200 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&dat, 3, 2);
 800381e:	2302      	movs	r3, #2
 8003820:	2203      	movs	r2, #3
 8003822:	a901      	add	r1, sp, #4
 8003824:	4806      	ldr	r0, [pc, #24]	; (8003840 <ST7920_SendData+0x54>)
 8003826:	f7ff f960 	bl	8002aea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800382a:	462a      	mov	r2, r5
 800382c:	2140      	movs	r1, #64	; 0x40
 800382e:	4620      	mov	r0, r4
 8003830:	f7fe fce6 	bl	8002200 <HAL_GPIO_WritePin>
}
 8003834:	b003      	add	sp, #12
 8003836:	bd30      	pop	{r4, r5, pc}
 8003838:	08007ab8 	.word	0x08007ab8
 800383c:	40010800 	.word	0x40010800
 8003840:	200002b8 	.word	0x200002b8

08003844 <ST7920_GraphicMode>:
    	}
}
// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 8003844:	b508      	push	{r3, lr}
	if (enable == 1)
 8003846:	2801      	cmp	r0, #1
 8003848:	d001      	beq.n	800384e <ST7920_GraphicMode+0xa>
		ST7920_SendCmd(0x36);  // enable graphics
		HAL_Delay (1);
		Graphic_Check = 1;  // update the variable
	}

	else if (enable == 0)
 800384a:	b1b0      	cbz	r0, 800387a <ST7920_GraphicMode+0x36>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 800384c:	bd08      	pop	{r3, pc}
		ST7920_SendCmd(0x30);  // 8 bit mode
 800384e:	2030      	movs	r0, #48	; 0x30
 8003850:	f7ff ffa0 	bl	8003794 <ST7920_SendCmd>
		HAL_Delay (1);
 8003854:	2001      	movs	r0, #1
 8003856:	f7fd ffaf 	bl	80017b8 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 800385a:	2034      	movs	r0, #52	; 0x34
 800385c:	f7ff ff9a 	bl	8003794 <ST7920_SendCmd>
		HAL_Delay (1);
 8003860:	2001      	movs	r0, #1
 8003862:	f7fd ffa9 	bl	80017b8 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 8003866:	2036      	movs	r0, #54	; 0x36
 8003868:	f7ff ff94 	bl	8003794 <ST7920_SendCmd>
		HAL_Delay (1);
 800386c:	2001      	movs	r0, #1
 800386e:	f7fd ffa3 	bl	80017b8 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <ST7920_GraphicMode+0x4c>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e7e8      	b.n	800384c <ST7920_GraphicMode+0x8>
		ST7920_SendCmd(0x30);  // 8 bit mode
 800387a:	2030      	movs	r0, #48	; 0x30
 800387c:	f7ff ff8a 	bl	8003794 <ST7920_SendCmd>
		HAL_Delay (1);
 8003880:	2001      	movs	r0, #1
 8003882:	f7fd ff99 	bl	80017b8 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 8003886:	4b02      	ldr	r3, [pc, #8]	; (8003890 <ST7920_GraphicMode+0x4c>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	e7de      	b.n	800384c <ST7920_GraphicMode+0x8>
 800388e:	bf00      	nop
 8003890:	200007a8 	.word	0x200007a8

08003894 <ST7920_DrawBitmap>:
  ST7920_SendCmd(0x80 | y); // 6-bit (0..63)
  ST7920_SendCmd(0x80 | x); // 4-bit (0..15)
}

void ST7920_DrawBitmap(const unsigned char* graphic, bool half)
{
 8003894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003898:	4607      	mov	r7, r0

	uint8_t x, y;

	uint16_t Index=0;
	uint8_t Temp,Db;
	int Ystart = 0+half*64;
 800389a:	018e      	lsls	r6, r1, #6
	int Yend = 64+half*64;
 800389c:	3101      	adds	r1, #1
 800389e:	ea4f 1881 	mov.w	r8, r1, lsl #6



	for(y=Ystart;y<Yend;y++)
 80038a2:	b2f6      	uxtb	r6, r6
 80038a4:	e096      	b.n	80039d4 <ST7920_DrawBitmap+0x140>
				ST7920_SendCmd(0x80 | y);										//Y(0-31)
				ST7920_SendCmd(0x80 | x);										//X(0-8)
			}
			else
			{
				ST7920_SendCmd(0x80 | y-32);//Y(0-31)
 80038a6:	f1a6 0020 	sub.w	r0, r6, #32
 80038aa:	b240      	sxtb	r0, r0
 80038ac:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80038b0:	b2c0      	uxtb	r0, r0
 80038b2:	f7ff ff6f 	bl	8003794 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);//X(0-8)
 80038b6:	f045 0088 	orr.w	r0, r5, #136	; 0x88
 80038ba:	f7ff ff6b 	bl	8003794 <ST7920_SendCmd>
			}

			Index=((y/8)*128)+(x*16);
 80038be:	f006 04f8 	and.w	r4, r6, #248	; 0xf8
 80038c2:	442c      	add	r4, r5
 80038c4:	0124      	lsls	r4, r4, #4
 80038c6:	b2a4      	uxth	r4, r4
			Db=y%8;
 80038c8:	f006 0907 	and.w	r9, r6, #7

			Temp=	(((graphic[Index+0]>>Db)&0x01)<<7)|
 80038cc:	5d38      	ldrb	r0, [r7, r4]
 80038ce:	fa40 f309 	asr.w	r3, r0, r9
						(((graphic[Index+1]>>Db)&0x01)<<6)|
 80038d2:	443c      	add	r4, r7
 80038d4:	7860      	ldrb	r0, [r4, #1]
 80038d6:	fa40 f009 	asr.w	r0, r0, r9
 80038da:	0180      	lsls	r0, r0, #6
 80038dc:	f000 0040 	and.w	r0, r0, #64	; 0x40
			Temp=	(((graphic[Index+0]>>Db)&0x01)<<7)|
 80038e0:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 80038e4:	b240      	sxtb	r0, r0
						(((graphic[Index+2]>>Db)&0x01)<<5)|
 80038e6:	78a3      	ldrb	r3, [r4, #2]
 80038e8:	fa43 f309 	asr.w	r3, r3, r9
 80038ec:	015b      	lsls	r3, r3, #5
 80038ee:	f003 0320 	and.w	r3, r3, #32
						(((graphic[Index+1]>>Db)&0x01)<<6)|
 80038f2:	4318      	orrs	r0, r3
						(((graphic[Index+3]>>Db)&0x01)<<4)|
 80038f4:	78e3      	ldrb	r3, [r4, #3]
 80038f6:	fa43 f309 	asr.w	r3, r3, r9
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	f003 0310 	and.w	r3, r3, #16
						(((graphic[Index+2]>>Db)&0x01)<<5)|
 8003900:	4318      	orrs	r0, r3
						(((graphic[Index+4]>>Db)&0x01)<<3)|
 8003902:	7923      	ldrb	r3, [r4, #4]
 8003904:	fa43 f309 	asr.w	r3, r3, r9
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	f003 0308 	and.w	r3, r3, #8
						(((graphic[Index+3]>>Db)&0x01)<<4)|
 800390e:	4318      	orrs	r0, r3
						(((graphic[Index+5]>>Db)&0x01)<<2)|
 8003910:	7963      	ldrb	r3, [r4, #5]
 8003912:	fa43 f309 	asr.w	r3, r3, r9
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	f003 0304 	and.w	r3, r3, #4
						(((graphic[Index+4]>>Db)&0x01)<<3)|
 800391c:	4318      	orrs	r0, r3
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 800391e:	79a3      	ldrb	r3, [r4, #6]
 8003920:	fa43 f309 	asr.w	r3, r3, r9
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	f003 0302 	and.w	r3, r3, #2
						(((graphic[Index+5]>>Db)&0x01)<<2)|
 800392a:	4318      	orrs	r0, r3
						(((graphic[Index+7]>>Db)&0x01)<<0);
 800392c:	79e3      	ldrb	r3, [r4, #7]
 800392e:	fa43 f309 	asr.w	r3, r3, r9
 8003932:	f003 0301 	and.w	r3, r3, #1
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003936:	4318      	orrs	r0, r3
			ST7920_SendData(Temp);
 8003938:	b2c0      	uxtb	r0, r0
 800393a:	f7ff ff57 	bl	80037ec <ST7920_SendData>

			Temp=	(((graphic[Index+8]>>Db)&0x01)<<7)|
 800393e:	7a20      	ldrb	r0, [r4, #8]
 8003940:	fa40 f309 	asr.w	r3, r0, r9
						(((graphic[Index+9]>>Db)&0x01)<<6)|
 8003944:	7a60      	ldrb	r0, [r4, #9]
 8003946:	fa40 f009 	asr.w	r0, r0, r9
 800394a:	0180      	lsls	r0, r0, #6
 800394c:	f000 0040 	and.w	r0, r0, #64	; 0x40
			Temp=	(((graphic[Index+8]>>Db)&0x01)<<7)|
 8003950:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8003954:	b240      	sxtb	r0, r0
						(((graphic[Index+10]>>Db)&0x01)<<5)|
 8003956:	7aa3      	ldrb	r3, [r4, #10]
 8003958:	fa43 f309 	asr.w	r3, r3, r9
 800395c:	015b      	lsls	r3, r3, #5
 800395e:	f003 0320 	and.w	r3, r3, #32
						(((graphic[Index+9]>>Db)&0x01)<<6)|
 8003962:	4318      	orrs	r0, r3
						(((graphic[Index+11]>>Db)&0x01)<<4)|
 8003964:	7ae3      	ldrb	r3, [r4, #11]
 8003966:	fa43 f309 	asr.w	r3, r3, r9
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	f003 0310 	and.w	r3, r3, #16
						(((graphic[Index+10]>>Db)&0x01)<<5)|
 8003970:	4318      	orrs	r0, r3
						(((graphic[Index+12]>>Db)&0x01)<<3)|
 8003972:	7b23      	ldrb	r3, [r4, #12]
 8003974:	fa43 f309 	asr.w	r3, r3, r9
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	f003 0308 	and.w	r3, r3, #8
						(((graphic[Index+11]>>Db)&0x01)<<4)|
 800397e:	4318      	orrs	r0, r3
						(((graphic[Index+13]>>Db)&0x01)<<2)|
 8003980:	7b63      	ldrb	r3, [r4, #13]
 8003982:	fa43 f309 	asr.w	r3, r3, r9
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	f003 0304 	and.w	r3, r3, #4
						(((graphic[Index+12]>>Db)&0x01)<<3)|
 800398c:	4318      	orrs	r0, r3
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 800398e:	7ba3      	ldrb	r3, [r4, #14]
 8003990:	fa43 f309 	asr.w	r3, r3, r9
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	f003 0302 	and.w	r3, r3, #2
						(((graphic[Index+13]>>Db)&0x01)<<2)|
 800399a:	4318      	orrs	r0, r3
						(((graphic[Index+15]>>Db)&0x01)<<0);
 800399c:	7be3      	ldrb	r3, [r4, #15]
 800399e:	fa43 f909 	asr.w	r9, r3, r9
 80039a2:	f009 0901 	and.w	r9, r9, #1
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80039a6:	ea40 0009 	orr.w	r0, r0, r9

			ST7920_SendData(Temp);
 80039aa:	b2c0      	uxtb	r0, r0
 80039ac:	f7ff ff1e 	bl	80037ec <ST7920_SendData>
		for(x=0;x<8;x++)
 80039b0:	3501      	adds	r5, #1
 80039b2:	b2ed      	uxtb	r5, r5
 80039b4:	2d07      	cmp	r5, #7
 80039b6:	d80b      	bhi.n	80039d0 <ST7920_DrawBitmap+0x13c>
			if(y<32)//Up
 80039b8:	2e1f      	cmp	r6, #31
 80039ba:	f63f af74 	bhi.w	80038a6 <ST7920_DrawBitmap+0x12>
				ST7920_SendCmd(0x80 | y);										//Y(0-31)
 80039be:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 80039c2:	f7ff fee7 	bl	8003794 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);										//X(0-8)
 80039c6:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 80039ca:	f7ff fee3 	bl	8003794 <ST7920_SendCmd>
 80039ce:	e776      	b.n	80038be <ST7920_DrawBitmap+0x2a>
	for(y=Ystart;y<Yend;y++)
 80039d0:	3601      	adds	r6, #1
 80039d2:	b2f6      	uxtb	r6, r6
 80039d4:	4546      	cmp	r6, r8
 80039d6:	da01      	bge.n	80039dc <ST7920_DrawBitmap+0x148>
		for(x=0;x<8;x++)
 80039d8:	2500      	movs	r5, #0
 80039da:	e7eb      	b.n	80039b4 <ST7920_DrawBitmap+0x120>
		}

	}

}
 80039dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080039e0 <GLCD_Buf_Clear>:

//Clear GLCD Buf
void GLCD_Buf_Clear(void)
{
	uint16_t i;
	for(i=0;i<1024;i++)GLCD_Buf[i]=0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e004      	b.n	80039ee <GLCD_Buf_Clear+0xe>
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <GLCD_Buf_Clear+0x18>)
 80039e6:	2100      	movs	r1, #0
 80039e8:	54d1      	strb	r1, [r2, r3]
 80039ea:	3301      	adds	r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f2:	d3f7      	bcc.n	80039e4 <GLCD_Buf_Clear+0x4>
}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	200003a8 	.word	0x200003a8

080039fc <ST7920_Update>:

#include <stdbool.h>
bool lastHalf;
// Update the display with the selected graphics
void ST7920_Update(void)
{
 80039fc:	b508      	push	{r3, lr}

	ST7920_DrawBitmap(GLCD_Buf, lastHalf);
 80039fe:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <ST7920_Update+0x10>)
 8003a00:	7819      	ldrb	r1, [r3, #0]
 8003a02:	4803      	ldr	r0, [pc, #12]	; (8003a10 <ST7920_Update+0x14>)
 8003a04:	f7ff ff46 	bl	8003894 <ST7920_DrawBitmap>
	//ST7920_Switch(lastHalf);
	//lastHalf = !lastHalf;

}
 8003a08:	bd08      	pop	{r3, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200007ab 	.word	0x200007ab
 8003a10:	200003a8 	.word	0x200003a8

08003a14 <ST7920_Clear>:
	ST7920_SendCmd(0x03);
	ST7920_SendCmd(0x40 + 32 * i);
}

void ST7920_Clear()
{
 8003a14:	b538      	push	{r3, r4, r5, lr}
	if (Graphic_Check == 1)  // if the graphic mode is set
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <ST7920_Clear+0x6c>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d129      	bne.n	8003a72 <ST7920_Clear+0x5e>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 8003a1e:	2500      	movs	r5, #0
 8003a20:	e017      	b.n	8003a52 <ST7920_Clear+0x3e>
				ST7920_SendCmd(0x80 | y);
				ST7920_SendCmd(0x80);
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8003a22:	f1a5 0020 	sub.w	r0, r5, #32
 8003a26:	b240      	sxtb	r0, r0
 8003a28:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003a2c:	b2c0      	uxtb	r0, r0
 8003a2e:	f7ff feb1 	bl	8003794 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8003a32:	2088      	movs	r0, #136	; 0x88
 8003a34:	f7ff feae 	bl	8003794 <ST7920_SendCmd>
 8003a38:	e016      	b.n	8003a68 <ST7920_Clear+0x54>
			}
			for(x = 0; x < 8; x++)
			{
				ST7920_SendData(0);
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7ff fed6 	bl	80037ec <ST7920_SendData>
				ST7920_SendData(0);
 8003a40:	2000      	movs	r0, #0
 8003a42:	f7ff fed3 	bl	80037ec <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8003a46:	3401      	adds	r4, #1
 8003a48:	b2e4      	uxtb	r4, r4
 8003a4a:	2c07      	cmp	r4, #7
 8003a4c:	d9f5      	bls.n	8003a3a <ST7920_Clear+0x26>
		for(y = 0; y < 64; y++)
 8003a4e:	3501      	adds	r5, #1
 8003a50:	b2ed      	uxtb	r5, r5
 8003a52:	2d3f      	cmp	r5, #63	; 0x3f
 8003a54:	d80a      	bhi.n	8003a6c <ST7920_Clear+0x58>
			if(y < 32)
 8003a56:	2d1f      	cmp	r5, #31
 8003a58:	d8e3      	bhi.n	8003a22 <ST7920_Clear+0xe>
				ST7920_SendCmd(0x80 | y);
 8003a5a:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8003a5e:	f7ff fe99 	bl	8003794 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8003a62:	2080      	movs	r0, #128	; 0x80
 8003a64:	f7ff fe96 	bl	8003794 <ST7920_SendCmd>
{
 8003a68:	2400      	movs	r4, #0
 8003a6a:	e7ee      	b.n	8003a4a <ST7920_Clear+0x36>
			}
		}
		GLCD_Buf_Clear();
 8003a6c:	f7ff ffb8 	bl	80039e0 <GLCD_Buf_Clear>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8003a70:	bd38      	pop	{r3, r4, r5, pc}
		ST7920_SendCmd(0x01);   // clear the display using command
 8003a72:	2001      	movs	r0, #1
 8003a74:	f7ff fe8e 	bl	8003794 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8003a78:	2002      	movs	r0, #2
 8003a7a:	f7fd fe9d 	bl	80017b8 <HAL_Delay>
}
 8003a7e:	e7f7      	b.n	8003a70 <ST7920_Clear+0x5c>
 8003a80:	200007a8 	.word	0x200007a8

08003a84 <ST7920_Init>:
#define LCD_LINE1       0x90
#define LCD_LINE2       0x88
#define LCD_LINE3       0x98

void ST7920_Init (void)
{
 8003a84:	b508      	push	{r3, lr}
	//HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
	//HAL_Delay(10);   // wait for 10ms
	//HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1

	HAL_Delay(50);   //wait for >40 ms
 8003a86:	2032      	movs	r0, #50	; 0x32
 8003a88:	f7fd fe96 	bl	80017b8 <HAL_Delay>

	ST7920_SendCmd(LCD_BASIC);  // 8bit mode
 8003a8c:	2030      	movs	r0, #48	; 0x30
 8003a8e:	f7ff fe81 	bl	8003794 <ST7920_SendCmd>
	HAL_Delay(1);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f7fd fe90 	bl	80017b8 <HAL_Delay>

	ST7920_SendCmd(LCD_BASIC);  // 8bit mode
 8003a98:	2030      	movs	r0, #48	; 0x30
 8003a9a:	f7ff fe7b 	bl	8003794 <ST7920_SendCmd>
	HAL_Delay(1);
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f7fd fe8a 	bl	80017b8 <HAL_Delay>

	ST7920_SendCmd(LCD_CLS);  // D=0, C=0, B=0
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f7ff fe75 	bl	8003794 <ST7920_SendCmd>
	HAL_Delay(1);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f7fd fe84 	bl	80017b8 <HAL_Delay>

	ST7920_SendCmd(LCD_ADDRINC);  // clear screen
 8003ab0:	2006      	movs	r0, #6
 8003ab2:	f7ff fe6f 	bl	8003794 <ST7920_SendCmd>
	HAL_Delay(1);
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f7fd fe7e 	bl	80017b8 <HAL_Delay>


	ST7920_SendCmd(LCD_DISPLAYON);  // cursor increment right no shift
 8003abc:	200c      	movs	r0, #12
 8003abe:	f7ff fe69 	bl	8003794 <ST7920_SendCmd>
	//ST7920_SendCmd(0x07);
	HAL_Delay(1);  // 1ms delay
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7fd fe78 	bl	80017b8 <HAL_Delay>

	ST7920_SendCmd(LCD_EXTEND);  // D=1, C=0, B=0
 8003ac8:	2034      	movs	r0, #52	; 0x34
 8003aca:	f7ff fe63 	bl	8003794 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f7fd fe72 	bl	80017b8 <HAL_Delay>

    ST7920_SendCmd(LCD_GFXMODE);  // D=1, C=0, B=0
 8003ad4:	2036      	movs	r0, #54	; 0x36
 8003ad6:	f7ff fe5d 	bl	8003794 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8003ada:	2001      	movs	r0, #1
 8003adc:	f7fd fe6c 	bl	80017b8 <HAL_Delay>


}
 8003ae0:	bd08      	pop	{r3, pc}
	...

08003ae4 <SetPixel>:

// Set Pixel
void SetPixel(uint8_t x, uint8_t y)
{
  if (y < numRows && x < numCols)
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <SetPixel+0x68>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	428b      	cmp	r3, r1
 8003aea:	d92d      	bls.n	8003b48 <SetPixel+0x64>
 8003aec:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <SetPixel+0x6c>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4283      	cmp	r3, r0
 8003af2:	d929      	bls.n	8003b48 <SetPixel+0x64>
{
 8003af4:	b410      	push	{r4}
  {
		GLCD_Buf[(x)+((y/8)*128)]|=0x01<<y%8;
 8003af6:	08cb      	lsrs	r3, r1, #3
 8003af8:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
 8003afc:	f001 0c07 	and.w	ip, r1, #7
 8003b00:	2201      	movs	r2, #1
 8003b02:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003b06:	4c13      	ldr	r4, [pc, #76]	; (8003b54 <SetPixel+0x70>)
 8003b08:	5ce2      	ldrb	r2, [r4, r3]
 8003b0a:	ea42 020c 	orr.w	r2, r2, ip
 8003b0e:	54e2      	strb	r2, [r4, r3]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <SetPixel+0x74>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	428b      	cmp	r3, r1
 8003b16:	d901      	bls.n	8003b1c <SetPixel+0x38>
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <SetPixel+0x74>)
 8003b1a:	7019      	strb	r1, [r3, #0]
    if (endRow <= y)  { endRow = y + 1; }
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <SetPixel+0x78>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d802      	bhi.n	8003b2a <SetPixel+0x46>
 8003b24:	3101      	adds	r1, #1
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <SetPixel+0x78>)
 8003b28:	7019      	strb	r1, [r3, #0]
    if (startCol > x) { startCol = x; }
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <SetPixel+0x7c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	4283      	cmp	r3, r0
 8003b30:	d901      	bls.n	8003b36 <SetPixel+0x52>
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <SetPixel+0x7c>)
 8003b34:	7018      	strb	r0, [r3, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <SetPixel+0x80>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	4283      	cmp	r3, r0
 8003b3c:	d802      	bhi.n	8003b44 <SetPixel+0x60>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <SetPixel+0x80>)
 8003b42:	7018      	strb	r0, [r3, #0]
  }
}
 8003b44:	bc10      	pop	{r4}
 8003b46:	4770      	bx	lr
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	2000000d 	.word	0x2000000d
 8003b50:	2000000c 	.word	0x2000000c
 8003b54:	200003a8 	.word	0x200003a8
 8003b58:	200007ad 	.word	0x200007ad
 8003b5c:	200007aa 	.word	0x200007aa
 8003b60:	200007ac 	.word	0x200007ac
 8003b64:	200007a9 	.word	0x200007a9

08003b68 <GLCD_Font_Print>:
}


//Print Fonted String x=0-15 y=0-7
void GLCD_Font_Print(uint8_t x,uint8_t y,char * String)
{
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	4611      	mov	r1, r2
	int shiftX = 0;
	int shiftY = 1;

	int i;
	while(*String)
 8003b6e:	e015      	b.n	8003b9c <GLCD_Font_Print+0x34>
	{
		for(i=0;i<8;i++)
			GLCD_Buf[i+(x*8)+(y*128)+shiftX/*+shiftY*32*/]=Font[(*String)*8+i-33*8];
 8003b70:	780b      	ldrb	r3, [r1, #0]
 8003b72:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8003b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b7a:	eb0c 0ec0 	add.w	lr, ip, r0, lsl #3
 8003b7e:	eb0e 1ec4 	add.w	lr, lr, r4, lsl #7
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <GLCD_Font_Print+0x40>)
 8003b84:	5cd2      	ldrb	r2, [r2, r3]
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <GLCD_Font_Print+0x44>)
 8003b88:	f803 200e 	strb.w	r2, [r3, lr]
		for(i=0;i<8;i++)
 8003b8c:	f10c 0c01 	add.w	ip, ip, #1
 8003b90:	f1bc 0f07 	cmp.w	ip, #7
 8003b94:	ddec      	ble.n	8003b70 <GLCD_Font_Print+0x8>
		String++;
 8003b96:	3101      	adds	r1, #1
		x++;
 8003b98:	3001      	adds	r0, #1
 8003b9a:	b2c0      	uxtb	r0, r0
	while(*String)
 8003b9c:	780b      	ldrb	r3, [r1, #0]
 8003b9e:	b113      	cbz	r3, 8003ba6 <GLCD_Font_Print+0x3e>
		for(i=0;i<8;i++)
 8003ba0:	f04f 0c00 	mov.w	ip, #0
 8003ba4:	e7f4      	b.n	8003b90 <GLCD_Font_Print+0x28>
			x=0;
			y++;
		}
		*/
	}
}
 8003ba6:	bd10      	pop	{r4, pc}
 8003ba8:	08007ae8 	.word	0x08007ae8
 8003bac:	200003a8 	.word	0x200003a8

08003bb0 <dspInit>:
	//arm_rfft_fast_init_f32(&fftR, FFT_LEN);
}
*/

int outStarted = 0;
void dspInit(void){
 8003bb0:	b530      	push	{r4, r5, lr}
 8003bb2:	b083      	sub	sp, #12
	outStarted = 0;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <dspInit+0x30>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
	arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
 8003bba:	4c0a      	ldr	r4, [pc, #40]	; (8003be4 <dspInit+0x34>)
 8003bbc:	2580      	movs	r5, #128	; 0x80
 8003bbe:	9500      	str	r5, [sp, #0]
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <dspInit+0x38>)
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	2110      	movs	r1, #16
 8003bc6:	4809      	ldr	r0, [pc, #36]	; (8003bec <dspInit+0x3c>)
 8003bc8:	f001 f84c 	bl	8004c64 <arm_fir_init_q31>
	arm_fir_init_q31(&S2, NUM_TAPS, firCoeffs32, firState2, DSP_BLOCK_SIZE);
 8003bcc:	9500      	str	r5, [sp, #0]
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <dspInit+0x40>)
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	4807      	ldr	r0, [pc, #28]	; (8003bf4 <dspInit+0x44>)
 8003bd6:	f001 f845 	bl	8004c64 <arm_fir_init_q31>
}
 8003bda:	b003      	add	sp, #12
 8003bdc:	bd30      	pop	{r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	20001848 	.word	0x20001848
 8003be4:	080081e0 	.word	0x080081e0
 8003be8:	20000dd0 	.word	0x20000dd0
 8003bec:	200007b0 	.word	0x200007b0
 8003bf0:	2000100c 	.word	0x2000100c
 8003bf4:	200007bc 	.word	0x200007bc

08003bf8 <dspStart>:

void dspStart(void){
 8003bf8:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 8003bfa:	4c0b      	ldr	r4, [pc, #44]	; (8003c28 <dspStart+0x30>)
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f7ff f903 	bl	8002e08 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003c02:	2104      	movs	r1, #4
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7ff fbd9 	bl	80033bc <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inBuf, ADC_BUFFER_LEN);
 8003c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0e:	4907      	ldr	r1, [pc, #28]	; (8003c2c <dspStart+0x34>)
 8003c10:	4807      	ldr	r0, [pc, #28]	; (8003c30 <dspStart+0x38>)
 8003c12:	f7fd ff07 	bl	8001a24 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/2);
 8003c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c1a:	4a06      	ldr	r2, [pc, #24]	; (8003c34 <dspStart+0x3c>)
 8003c1c:	2108      	movs	r1, #8
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7ff fc3a 	bl	8003498 <HAL_TIM_PWM_Start_DMA>
}
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	bf00      	nop
 8003c28:	20000310 	.word	0x20000310
 8003c2c:	20001248 	.word	0x20001248
 8003c30:	20000200 	.word	0x20000200
 8003c34:	20001648 	.word	0x20001648

08003c38 <dspPrepareInput>:

//int32_t debugInput[ADC_BUFFER_LEN] = {0xff};
//float debugInputF[ADC_BUFFER_LEN] = {555.0f};


void dspPrepareInput(void){
 8003c38:	b430      	push	{r4, r5}
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,dspRingHalf);
	adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <dspPrepareInput+0x48>)
 8003c3c:	781d      	ldrb	r5, [r3, #0]
 8003c3e:	f085 0501 	eor.w	r5, r5, #1
 8003c42:	022d      	lsls	r5, r5, #8
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <dspPrepareInput+0x4c>)
 8003c46:	601d      	str	r5, [r3, #0]

	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e014      	b.n	8003c76 <dspPrepareInput+0x3e>
		//debugInput[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
		//debugInputF[i] = Q31float(adcToQ31(inBuf[i * 2 + adcBuffStart]));
		dspInI[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
 8003c4c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <dspPrepareInput+0x50>)
 8003c52:	f930 2011 	ldrsh.w	r2, [r0, r1, lsl #1]
	return ((input - ADC_HALF) << 20);
 8003c56:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003c5a:	0512      	lsls	r2, r2, #20
		dspInI[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
 8003c5c:	4c0b      	ldr	r4, [pc, #44]	; (8003c8c <dspPrepareInput+0x54>)
 8003c5e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		dspInQ[i] = adcToQ31(inBuf[i * 2 + adcBuffStart + 1]);
 8003c62:	3101      	adds	r1, #1
 8003c64:	f930 2011 	ldrsh.w	r2, [r0, r1, lsl #1]
	return ((input - ADC_HALF) << 20);
 8003c68:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003c6c:	0512      	lsls	r2, r2, #20
		dspInQ[i] = adcToQ31(inBuf[i * 2 + adcBuffStart + 1]);
 8003c6e:	4908      	ldr	r1, [pc, #32]	; (8003c90 <dspPrepareInput+0x58>)
 8003c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003c74:	3301      	adds	r3, #1
 8003c76:	2b7f      	cmp	r3, #127	; 0x7f
 8003c78:	dde8      	ble.n	8003c4c <dspPrepareInput+0x14>
	}

	//done = 1;
}
 8003c7a:	bc30      	pop	{r4, r5}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000dcd 	.word	0x20000dcd
 8003c84:	200007c8 	.word	0x200007c8
 8003c88:	20001248 	.word	0x20001248
 8003c8c:	200007cc 	.word	0x200007cc
 8003c90:	200009cc 	.word	0x200009cc

08003c94 <dspPrepareOutput>:

void dspPrepareOutput(void){
 8003c94:	b410      	push	{r4}
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,dspRingHalf);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, dspRingHalf);
	adcBuffStart = ADC_BUFFER_LEN/4 * (dspRingHalf == HALF_LOWER);
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <dspPrepareOutput+0x34>)
 8003c98:	781c      	ldrb	r4, [r3, #0]
 8003c9a:	f084 0401 	eor.w	r4, r4, #1
 8003c9e:	01e4      	lsls	r4, r4, #7
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <dspPrepareOutput+0x38>)
 8003ca2:	601c      	str	r4, [r3, #0]
	// если здесь /2, частота будет ниже

	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	e00a      	b.n	8003cbe <dspPrepareOutput+0x2a>
		outBuf[adcBuffStart + k] = 	q31toPwm(dspOut[k]);
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <dspPrepareOutput+0x3c>)
 8003caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cae:	18a0      	adds	r0, r4, r2
	return ((input >> 22) + PWM_HALF);
 8003cb0:	159b      	asrs	r3, r3, #22
 8003cb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
		outBuf[adcBuffStart + k] = 	q31toPwm(dspOut[k]);
 8003cb6:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <dspPrepareOutput+0x40>)
 8003cb8:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 8003cbc:	3201      	adds	r2, #1
 8003cbe:	2a7f      	cmp	r2, #127	; 0x7f
 8003cc0:	ddf2      	ble.n	8003ca8 <dspPrepareOutput+0x14>
	}
}
 8003cc2:	bc10      	pop	{r4}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000dcd 	.word	0x20000dcd
 8003ccc:	200007c8 	.word	0x200007c8
 8003cd0:	20000bcc 	.word	0x20000bcc
 8003cd4:	20001648 	.word	0x20001648

08003cd8 <dspProc>:

q31_t sinX = 0;

void dspProc(void){
 8003cd8:	b538      	push	{r3, r4, r5, lr}

	if (!dspProcDone){
 8003cda:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <dspProc+0x50>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b103      	cbz	r3, 8003ce2 <dspProc+0xa>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
	}
}
 8003ce0:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003ce2:	4d12      	ldr	r5, [pc, #72]	; (8003d2c <dspProc+0x54>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2110      	movs	r1, #16
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f7fe fa89 	bl	8002200 <HAL_GPIO_WritePin>
		dspPrepareInput();
 8003cee:	f7ff ffa3 	bl	8003c38 <dspPrepareInput>
			arm_fir_q31(&S1, dspInQ, dspOut, DSP_BLOCK_SIZE);
 8003cf2:	4c0f      	ldr	r4, [pc, #60]	; (8003d30 <dspProc+0x58>)
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	490e      	ldr	r1, [pc, #56]	; (8003d34 <dspProc+0x5c>)
 8003cfa:	480f      	ldr	r0, [pc, #60]	; (8003d38 <dspProc+0x60>)
 8003cfc:	f000 fe62 	bl	80049c4 <arm_fir_q31>
			arm_fir_q31(&S2, dspInI, dspOut, DSP_BLOCK_SIZE);
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	4622      	mov	r2, r4
 8003d04:	490d      	ldr	r1, [pc, #52]	; (8003d3c <dspProc+0x64>)
 8003d06:	480e      	ldr	r0, [pc, #56]	; (8003d40 <dspProc+0x68>)
 8003d08:	f000 fe5c 	bl	80049c4 <arm_fir_q31>
			fftProcess(dspOut);
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 f84b 	bl	8003da8 <fftProcess>
		dspPrepareOutput();
 8003d12:	f7ff ffbf 	bl	8003c94 <dspPrepareOutput>
		dspProcDone = 1;
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <dspProc+0x50>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2110      	movs	r1, #16
 8003d20:	4628      	mov	r0, r5
 8003d22:	f7fe fa6d 	bl	8002200 <HAL_GPIO_WritePin>
}
 8003d26:	e7db      	b.n	8003ce0 <dspProc+0x8>
 8003d28:	20000dcc 	.word	0x20000dcc
 8003d2c:	40010c00 	.word	0x40010c00
 8003d30:	20000bcc 	.word	0x20000bcc
 8003d34:	200009cc 	.word	0x200009cc
 8003d38:	200007b0 	.word	0x200007b0
 8003d3c:	200007cc 	.word	0x200007cc
 8003d40:	200007bc 	.word	0x200007bc

08003d44 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){

}
 8003d44:	4770      	bx	lr

08003d46 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){



}
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){
 8003d48:	b510      	push	{r4, lr}
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);


	dspRingHalf = HALF_UPPER;
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
	dspProcDone = 0;
 8003d50:	2400      	movs	r4, #0
 8003d52:	4a06      	ldr	r2, [pc, #24]	; (8003d6c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>)
 8003d54:	7014      	strb	r4, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	2108      	movs	r1, #8
 8003d5a:	4805      	ldr	r0, [pc, #20]	; (8003d70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
 8003d5c:	f7fe fa50 	bl	8002200 <HAL_GPIO_WritePin>
	elseDone = 0;
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x2c>)
 8003d62:	701c      	strb	r4, [r3, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

};
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	bf00      	nop
 8003d68:	20000dcd 	.word	0x20000dcd
 8003d6c:	20000dcc 	.word	0x20000dcc
 8003d70:	40010c00 	.word	0x40010c00
 8003d74:	200001fc 	.word	0x200001fc

08003d78 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim1){
 8003d78:	b510      	push	{r4, lr}


	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

		dspRingHalf = HALF_LOWER;
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8003d7c:	2400      	movs	r4, #0
 8003d7e:	701c      	strb	r4, [r3, #0]
		dspProcDone = 0;
 8003d80:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003d82:	7014      	strb	r4, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 8003d84:	781a      	ldrb	r2, [r3, #0]
 8003d86:	2108      	movs	r1, #8
 8003d88:	4804      	ldr	r0, [pc, #16]	; (8003d9c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8003d8a:	f7fe fa39 	bl	8002200 <HAL_GPIO_WritePin>
		elseDone = 0;
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003d90:	701c      	strb	r4, [r3, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

}
 8003d92:	bd10      	pop	{r4, pc}
 8003d94:	20000dcd 	.word	0x20000dcd
 8003d98:	20000dcc 	.word	0x20000dcc
 8003d9c:	40010c00 	.word	0x40010c00
 8003da0:	200001fc 	.word	0x200001fc

08003da4 <fftInit>:

arm_cfft_instance_q31 fftS;

void fftInit(void) {
	//arm_cfft_radix4_init_q31(&fftS, FFT_LEN, 0, 1);
}
 8003da4:	4770      	bx	lr
	...

08003da8 <fftProcess>:

q31_t fftBuf[FFT_LEN*2];
q31_t magnitudes[FFT_LEN/2];

void fftProcess(q31_t *inputF32) {
 8003da8:	b530      	push	{r4, r5, lr}
 8003daa:	b083      	sub	sp, #12
	//arm_cfft_radix4_q31(&fftS, inputF32);

	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 8003dac:	4d0d      	ldr	r5, [pc, #52]	; (8003de4 <fftProcess+0x3c>)
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	4629      	mov	r1, r5
 8003db2:	f000 f81f 	bl	8003df4 <arm_copy_q31>
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
 8003db6:	2301      	movs	r3, #1
 8003db8:	2200      	movs	r2, #0
 8003dba:	4629      	mov	r1, r5
 8003dbc:	480a      	ldr	r0, [pc, #40]	; (8003de8 <fftProcess+0x40>)
 8003dbe:	f000 f993 	bl	80040e8 <arm_cfft_q31>
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 8003dc2:	4c0a      	ldr	r4, [pc, #40]	; (8003dec <fftProcess+0x44>)
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 ff5d 	bl	8004c88 <arm_cmplx_mag_q31>

	arm_scale_q31(magnitudes, 2126008812, -24, magnitudes, FFT_LEN/2);
 8003dce:	2340      	movs	r3, #64	; 0x40
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	f06f 0217 	mvn.w	r2, #23
 8003dd8:	4905      	ldr	r1, [pc, #20]	; (8003df0 <fftProcess+0x48>)
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f001 f84a 	bl	8004e74 <arm_scale_q31>



	//arm_max_f32(fftMagnitudesdB, FFT_LEN, &maxValue, &maxIndex);
}
 8003de0:	b003      	add	sp, #12
 8003de2:	bd30      	pop	{r4, r5, pc}
 8003de4:	2000184c 	.word	0x2000184c
 8003de8:	20001c4c 	.word	0x20001c4c
 8003dec:	20001c5c 	.word	0x20001c5c
 8003df0:	7eb851ec 	.word	0x7eb851ec

08003df4 <arm_copy_q31>:
 8003df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003dfc:	4696      	mov	lr, r2
 8003dfe:	468c      	mov	ip, r1
 8003e00:	d01e      	beq.n	8003e40 <arm_copy_q31+0x4c>
 8003e02:	4645      	mov	r5, r8
 8003e04:	f100 0410 	add.w	r4, r0, #16
 8003e08:	f101 0310 	add.w	r3, r1, #16
 8003e0c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8003e10:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8003e14:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8003e18:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8003e1c:	3d01      	subs	r5, #1
 8003e1e:	f843 1c10 	str.w	r1, [r3, #-16]
 8003e22:	f843 2c0c 	str.w	r2, [r3, #-12]
 8003e26:	f843 7c08 	str.w	r7, [r3, #-8]
 8003e2a:	f843 6c04 	str.w	r6, [r3, #-4]
 8003e2e:	f104 0410 	add.w	r4, r4, #16
 8003e32:	f103 0310 	add.w	r3, r3, #16
 8003e36:	d1e9      	bne.n	8003e0c <arm_copy_q31+0x18>
 8003e38:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003e3c:	4440      	add	r0, r8
 8003e3e:	44c4      	add	ip, r8
 8003e40:	f01e 0203 	ands.w	r2, lr, #3
 8003e44:	d007      	beq.n	8003e56 <arm_copy_q31+0x62>
 8003e46:	f1ac 0104 	sub.w	r1, ip, #4
 8003e4a:	f850 3b04 	ldr.w	r3, [r0], #4
 8003e4e:	3a01      	subs	r2, #1
 8003e50:	f841 3f04 	str.w	r3, [r1, #4]!
 8003e54:	d1f9      	bne.n	8003e4a <arm_copy_q31+0x56>
 8003e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e5a:	bf00      	nop

08003e5c <arm_cfft_radix4by2_q31>:
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b08b      	sub	sp, #44	; 0x2c
 8003e66:	9107      	str	r1, [sp, #28]
 8003e68:	4682      	mov	sl, r0
 8003e6a:	9205      	str	r2, [sp, #20]
 8003e6c:	9306      	str	r3, [sp, #24]
 8003e6e:	f000 8084 	beq.w	8003f7a <arm_cfft_radix4by2_q31+0x11e>
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	eb00 0b03 	add.w	fp, r0, r3
 8003e78:	46de      	mov	lr, fp
 8003e7a:	46d4      	mov	ip, sl
 8003e7c:	4691      	mov	r9, r2
 8003e7e:	9308      	str	r3, [sp, #32]
 8003e80:	2500      	movs	r5, #0
 8003e82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003e86:	f85b 3035 	ldr.w	r3, [fp, r5, lsl #3]
 8003e8a:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8003e8e:	109e      	asrs	r6, r3, #2
 8003e90:	9b05      	ldr	r3, [sp, #20]
 8003e92:	1092      	asrs	r2, r2, #2
 8003e94:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8003e98:	1991      	adds	r1, r2, r6
 8003e9a:	2700      	movs	r7, #0
 8003e9c:	1b92      	subs	r2, r2, r6
 8003e9e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003ea2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8003ea6:	fbc3 6702 	smlal	r6, r7, r3, r2
 8003eaa:	f84a 1035 	str.w	r1, [sl, r5, lsl #3]
 8003eae:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003eb2:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003eb6:	1080      	asrs	r0, r0, #2
 8003eb8:	1089      	asrs	r1, r1, #2
 8003eba:	ebc1 0800 	rsb	r8, r1, r0
 8003ebe:	9701      	str	r7, [sp, #4]
 8003ec0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003ec4:	2700      	movs	r7, #0
 8003ec6:	fbc8 6703 	smlal	r6, r7, r8, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	fb82 2304 	smull	r2, r3, r2, r4
 8003ed4:	9703      	str	r7, [sp, #12]
 8003ed6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003eda:	1ab6      	subs	r6, r6, r2
 8003edc:	eb67 0703 	sbc.w	r7, r7, r3
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003ee8:	fbc4 6708 	smlal	r6, r7, r4, r8
 8003eec:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8003ef0:	f147 0700 	adc.w	r7, r7, #0
 8003ef4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8003ef8:	f143 0300 	adc.w	r3, r3, #0
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4401      	add	r1, r0
 8003f00:	007a      	lsls	r2, r7, #1
 8003f02:	f8cc 1004 	str.w	r1, [ip, #4]
 8003f06:	f84b 2035 	str.w	r2, [fp, r5, lsl #3]
 8003f0a:	f8ce 3004 	str.w	r3, [lr, #4]
 8003f0e:	9b06      	ldr	r3, [sp, #24]
 8003f10:	3501      	adds	r5, #1
 8003f12:	429d      	cmp	r5, r3
 8003f14:	f109 0908 	add.w	r9, r9, #8
 8003f18:	f10c 0c08 	add.w	ip, ip, #8
 8003f1c:	f10e 0e08 	add.w	lr, lr, #8
 8003f20:	d1b1      	bne.n	8003e86 <arm_cfft_radix4by2_q31+0x2a>
 8003f22:	9e05      	ldr	r6, [sp, #20]
 8003f24:	4650      	mov	r0, sl
 8003f26:	4629      	mov	r1, r5
 8003f28:	4632      	mov	r2, r6
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003f2e:	f000 f939 	bl	80041a4 <arm_radix4_butterfly_q31>
 8003f32:	9b07      	ldr	r3, [sp, #28]
 8003f34:	4629      	mov	r1, r5
 8003f36:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8003f3a:	4632      	mov	r2, r6
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f000 f931 	bl	80041a4 <arm_radix4_butterfly_q31>
 8003f42:	9b08      	ldr	r3, [sp, #32]
 8003f44:	f10a 0a04 	add.w	sl, sl, #4
 8003f48:	449b      	add	fp, r3
 8003f4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8003f4e:	1d21      	adds	r1, r4, #4
 8003f50:	c90e      	ldmia	r1, {r1, r2, r3}
 8003f52:	0040      	lsls	r0, r0, #1
 8003f54:	0049      	lsls	r1, r1, #1
 8003f56:	0052      	lsls	r2, r2, #1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	f84a 0c04 	str.w	r0, [sl, #-4]
 8003f5e:	3410      	adds	r4, #16
 8003f60:	f844 1c0c 	str.w	r1, [r4, #-12]
 8003f64:	f844 2c08 	str.w	r2, [r4, #-8]
 8003f68:	f844 3c04 	str.w	r3, [r4, #-4]
 8003f6c:	455c      	cmp	r4, fp
 8003f6e:	f10a 0a10 	add.w	sl, sl, #16
 8003f72:	d1ea      	bne.n	8003f4a <arm_cfft_radix4by2_q31+0xee>
 8003f74:	b00b      	add	sp, #44	; 0x2c
 8003f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7a:	461c      	mov	r4, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	2302      	movs	r3, #2
 8003f80:	f000 f910 	bl	80041a4 <arm_radix4_butterfly_q31>
 8003f84:	4621      	mov	r1, r4
 8003f86:	9b07      	ldr	r3, [sp, #28]
 8003f88:	9a05      	ldr	r2, [sp, #20]
 8003f8a:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8003f8e:	2302      	movs	r3, #2
 8003f90:	b00b      	add	sp, #44	; 0x2c
 8003f92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f96:	f000 b905 	b.w	80041a4 <arm_radix4_butterfly_q31>
 8003f9a:	bf00      	nop

08003f9c <arm_cfft_radix4by2_inverse_q31>:
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	b08b      	sub	sp, #44	; 0x2c
 8003fa6:	9107      	str	r1, [sp, #28]
 8003fa8:	4682      	mov	sl, r0
 8003faa:	4611      	mov	r1, r2
 8003fac:	9205      	str	r2, [sp, #20]
 8003fae:	9306      	str	r3, [sp, #24]
 8003fb0:	f000 8089 	beq.w	80040c6 <arm_cfft_radix4by2_inverse_q31+0x12a>
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	eb00 0b03 	add.w	fp, r0, r3
 8003fba:	46de      	mov	lr, fp
 8003fbc:	4684      	mov	ip, r0
 8003fbe:	9308      	str	r3, [sp, #32]
 8003fc0:	2500      	movs	r5, #0
 8003fc2:	9009      	str	r0, [sp, #36]	; 0x24
 8003fc4:	f85b 2035 	ldr.w	r2, [fp, r5, lsl #3]
 8003fc8:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8003fcc:	9805      	ldr	r0, [sp, #20]
 8003fce:	1096      	asrs	r6, r2, #2
 8003fd0:	f850 4035 	ldr.w	r4, [r0, r5, lsl #3]
 8003fd4:	109b      	asrs	r3, r3, #2
 8003fd6:	199a      	adds	r2, r3, r6
 8003fd8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003fdc:	1b9b      	subs	r3, r3, r6
 8003fde:	f04f 0900 	mov.w	r9, #0
 8003fe2:	6848      	ldr	r0, [r1, #4]
 8003fe4:	fbc4 8903 	smlal	r8, r9, r4, r3
 8003fe8:	f84a 2035 	str.w	r2, [sl, r5, lsl #3]
 8003fec:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8003ff0:	f8de 2004 	ldr.w	r2, [lr, #4]
 8003ff4:	10be      	asrs	r6, r7, #2
 8003ff6:	1092      	asrs	r2, r2, #2
 8003ff8:	9604      	str	r6, [sp, #16]
 8003ffa:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ffe:	1ab6      	subs	r6, r6, r2
 8004000:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004004:	f04f 0900 	mov.w	r9, #0
 8004008:	fbc6 8904 	smlal	r8, r9, r6, r4
 800400c:	fb86 6700 	smull	r6, r7, r6, r0
 8004010:	2400      	movs	r4, #0
 8004012:	9400      	str	r4, [sp, #0]
 8004014:	f8cd 900c 	str.w	r9, [sp, #12]
 8004018:	e9dd 8900 	ldrd	r8, r9, [sp]
 800401c:	f8cd 8008 	str.w	r8, [sp, #8]
 8004020:	ebb8 0806 	subs.w	r8, r8, r6
 8004024:	eb69 0907 	sbc.w	r9, r9, r7
 8004028:	4646      	mov	r6, r8
 800402a:	464f      	mov	r7, r9
 800402c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004030:	fbc0 8903 	smlal	r8, r9, r0, r3
 8004034:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8004038:	9b04      	ldr	r3, [sp, #16]
 800403a:	f147 0700 	adc.w	r7, r7, #0
 800403e:	441a      	add	r2, r3
 8004040:	007b      	lsls	r3, r7, #1
 8004042:	f8cc 2004 	str.w	r2, [ip, #4]
 8004046:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800404a:	f84b 3035 	str.w	r3, [fp, r5, lsl #3]
 800404e:	9b06      	ldr	r3, [sp, #24]
 8004050:	f149 0900 	adc.w	r9, r9, #0
 8004054:	3501      	adds	r5, #1
 8004056:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800405a:	429d      	cmp	r5, r3
 800405c:	f8ce 2004 	str.w	r2, [lr, #4]
 8004060:	f101 0108 	add.w	r1, r1, #8
 8004064:	f10c 0c08 	add.w	ip, ip, #8
 8004068:	f10e 0e08 	add.w	lr, lr, #8
 800406c:	d1aa      	bne.n	8003fc4 <arm_cfft_radix4by2_inverse_q31+0x28>
 800406e:	9e05      	ldr	r6, [sp, #20]
 8004070:	4650      	mov	r0, sl
 8004072:	4629      	mov	r1, r5
 8004074:	4632      	mov	r2, r6
 8004076:	2302      	movs	r3, #2
 8004078:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800407a:	f000 faa1 	bl	80045c0 <arm_radix4_butterfly_inverse_q31>
 800407e:	9b07      	ldr	r3, [sp, #28]
 8004080:	4629      	mov	r1, r5
 8004082:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004086:	4632      	mov	r2, r6
 8004088:	2302      	movs	r3, #2
 800408a:	f000 fa99 	bl	80045c0 <arm_radix4_butterfly_inverse_q31>
 800408e:	9b08      	ldr	r3, [sp, #32]
 8004090:	f10a 0a04 	add.w	sl, sl, #4
 8004094:	449b      	add	fp, r3
 8004096:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800409a:	1d21      	adds	r1, r4, #4
 800409c:	c90e      	ldmia	r1, {r1, r2, r3}
 800409e:	0040      	lsls	r0, r0, #1
 80040a0:	0049      	lsls	r1, r1, #1
 80040a2:	0052      	lsls	r2, r2, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	f84a 0c04 	str.w	r0, [sl, #-4]
 80040aa:	3410      	adds	r4, #16
 80040ac:	f844 1c0c 	str.w	r1, [r4, #-12]
 80040b0:	f844 2c08 	str.w	r2, [r4, #-8]
 80040b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80040b8:	455c      	cmp	r4, fp
 80040ba:	f10a 0a10 	add.w	sl, sl, #16
 80040be:	d1ea      	bne.n	8004096 <arm_cfft_radix4by2_inverse_q31+0xfa>
 80040c0:	b00b      	add	sp, #44	; 0x2c
 80040c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c6:	461c      	mov	r4, r3
 80040c8:	4619      	mov	r1, r3
 80040ca:	2302      	movs	r3, #2
 80040cc:	f000 fa78 	bl	80045c0 <arm_radix4_butterfly_inverse_q31>
 80040d0:	4621      	mov	r1, r4
 80040d2:	9b07      	ldr	r3, [sp, #28]
 80040d4:	9a05      	ldr	r2, [sp, #20]
 80040d6:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 80040da:	2302      	movs	r3, #2
 80040dc:	b00b      	add	sp, #44	; 0x2c
 80040de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e2:	f000 ba6d 	b.w	80045c0 <arm_radix4_butterfly_inverse_q31>
 80040e6:	bf00      	nop

080040e8 <arm_cfft_q31>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	2a01      	cmp	r2, #1
 80040ec:	460d      	mov	r5, r1
 80040ee:	4604      	mov	r4, r0
 80040f0:	461e      	mov	r6, r3
 80040f2:	8801      	ldrh	r1, [r0, #0]
 80040f4:	d024      	beq.n	8004140 <arm_cfft_q31+0x58>
 80040f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80040fa:	d013      	beq.n	8004124 <arm_cfft_q31+0x3c>
 80040fc:	d808      	bhi.n	8004110 <arm_cfft_q31+0x28>
 80040fe:	2920      	cmp	r1, #32
 8004100:	d031      	beq.n	8004166 <arm_cfft_q31+0x7e>
 8004102:	d945      	bls.n	8004190 <arm_cfft_q31+0xa8>
 8004104:	2940      	cmp	r1, #64	; 0x40
 8004106:	d00d      	beq.n	8004124 <arm_cfft_q31+0x3c>
 8004108:	2980      	cmp	r1, #128	; 0x80
 800410a:	d02c      	beq.n	8004166 <arm_cfft_q31+0x7e>
 800410c:	b98e      	cbnz	r6, 8004132 <arm_cfft_q31+0x4a>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004114:	d006      	beq.n	8004124 <arm_cfft_q31+0x3c>
 8004116:	d923      	bls.n	8004160 <arm_cfft_q31+0x78>
 8004118:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800411c:	d023      	beq.n	8004166 <arm_cfft_q31+0x7e>
 800411e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004122:	d1f3      	bne.n	800410c <arm_cfft_q31+0x24>
 8004124:	4628      	mov	r0, r5
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	2301      	movs	r3, #1
 800412a:	f000 f83b 	bl	80041a4 <arm_radix4_butterfly_q31>
 800412e:	2e00      	cmp	r6, #0
 8004130:	d0ed      	beq.n	800410e <arm_cfft_q31+0x26>
 8004132:	4628      	mov	r0, r5
 8004134:	89a1      	ldrh	r1, [r4, #12]
 8004136:	68a2      	ldr	r2, [r4, #8]
 8004138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800413c:	f7fc b808 	b.w	8000150 <arm_bitreversal_32>
 8004140:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004144:	d01e      	beq.n	8004184 <arm_cfft_q31+0x9c>
 8004146:	d813      	bhi.n	8004170 <arm_cfft_q31+0x88>
 8004148:	2920      	cmp	r1, #32
 800414a:	d004      	beq.n	8004156 <arm_cfft_q31+0x6e>
 800414c:	d927      	bls.n	800419e <arm_cfft_q31+0xb6>
 800414e:	2940      	cmp	r1, #64	; 0x40
 8004150:	d018      	beq.n	8004184 <arm_cfft_q31+0x9c>
 8004152:	2980      	cmp	r1, #128	; 0x80
 8004154:	d1da      	bne.n	800410c <arm_cfft_q31+0x24>
 8004156:	4628      	mov	r0, r5
 8004158:	6862      	ldr	r2, [r4, #4]
 800415a:	f7ff ff1f 	bl	8003f9c <arm_cfft_radix4by2_inverse_q31>
 800415e:	e7d5      	b.n	800410c <arm_cfft_q31+0x24>
 8004160:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004164:	d1d2      	bne.n	800410c <arm_cfft_q31+0x24>
 8004166:	4628      	mov	r0, r5
 8004168:	6862      	ldr	r2, [r4, #4]
 800416a:	f7ff fe77 	bl	8003e5c <arm_cfft_radix4by2_q31>
 800416e:	e7cd      	b.n	800410c <arm_cfft_q31+0x24>
 8004170:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004174:	d006      	beq.n	8004184 <arm_cfft_q31+0x9c>
 8004176:	d90e      	bls.n	8004196 <arm_cfft_q31+0xae>
 8004178:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800417c:	d0eb      	beq.n	8004156 <arm_cfft_q31+0x6e>
 800417e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004182:	d1c3      	bne.n	800410c <arm_cfft_q31+0x24>
 8004184:	4628      	mov	r0, r5
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	2301      	movs	r3, #1
 800418a:	f000 fa19 	bl	80045c0 <arm_radix4_butterfly_inverse_q31>
 800418e:	e7bd      	b.n	800410c <arm_cfft_q31+0x24>
 8004190:	2910      	cmp	r1, #16
 8004192:	d1bb      	bne.n	800410c <arm_cfft_q31+0x24>
 8004194:	e7c6      	b.n	8004124 <arm_cfft_q31+0x3c>
 8004196:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800419a:	d0dc      	beq.n	8004156 <arm_cfft_q31+0x6e>
 800419c:	e7b6      	b.n	800410c <arm_cfft_q31+0x24>
 800419e:	2910      	cmp	r1, #16
 80041a0:	d1b4      	bne.n	800410c <arm_cfft_q31+0x24>
 80041a2:	e7ef      	b.n	8004184 <arm_cfft_q31+0x9c>

080041a4 <arm_radix4_butterfly_q31>:
 80041a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a8:	461e      	mov	r6, r3
 80041aa:	b0a1      	sub	sp, #132	; 0x84
 80041ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80041ae:	0889      	lsrs	r1, r1, #2
 80041b0:	930d      	str	r3, [sp, #52]	; 0x34
 80041b2:	00cb      	lsls	r3, r1, #3
 80041b4:	4605      	mov	r5, r0
 80041b6:	901e      	str	r0, [sp, #120]	; 0x78
 80041b8:	4418      	add	r0, r3
 80041ba:	4690      	mov	r8, r2
 80041bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80041be:	911f      	str	r1, [sp, #124]	; 0x7c
 80041c0:	9106      	str	r1, [sp, #24]
 80041c2:	9202      	str	r2, [sp, #8]
 80041c4:	9200      	str	r2, [sp, #0]
 80041c6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80041ca:	18c2      	adds	r2, r0, r3
 80041cc:	3308      	adds	r3, #8
 80041ce:	eb02 0c03 	add.w	ip, r2, r3
 80041d2:	00cb      	lsls	r3, r1, #3
 80041d4:	930a      	str	r3, [sp, #40]	; 0x28
 80041d6:	0133      	lsls	r3, r6, #4
 80041d8:	f102 0b08 	add.w	fp, r2, #8
 80041dc:	9308      	str	r3, [sp, #32]
 80041de:	00f3      	lsls	r3, r6, #3
 80041e0:	930c      	str	r3, [sp, #48]	; 0x30
 80041e2:	465b      	mov	r3, fp
 80041e4:	f105 0a08 	add.w	sl, r5, #8
 80041e8:	46d3      	mov	fp, sl
 80041ea:	469a      	mov	sl, r3
 80041ec:	f100 0908 	add.w	r9, r0, #8
 80041f0:	f8cd 8004 	str.w	r8, [sp, #4]
 80041f4:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 80041f8:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 80041fc:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 8004200:	f859 1c08 	ldr.w	r1, [r9, #-8]
 8004204:	ea4f 1820 	mov.w	r8, r0, asr #4
 8004208:	1112      	asrs	r2, r2, #4
 800420a:	111b      	asrs	r3, r3, #4
 800420c:	eb08 0402 	add.w	r4, r8, r2
 8004210:	eb03 1521 	add.w	r5, r3, r1, asr #4
 8004214:	1963      	adds	r3, r4, r5
 8004216:	9204      	str	r2, [sp, #16]
 8004218:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 800421c:	f84b 3c08 	str.w	r3, [fp, #-8]
 8004220:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8004224:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8004228:	f859 1c04 	ldr.w	r1, [r9, #-4]
 800422c:	ea4f 1e22 	mov.w	lr, r2, asr #4
 8004230:	1106      	asrs	r6, r0, #4
 8004232:	111b      	asrs	r3, r3, #4
 8004234:	9607      	str	r6, [sp, #28]
 8004236:	eb03 1121 	add.w	r1, r3, r1, asr #4
 800423a:	4476      	add	r6, lr
 800423c:	1873      	adds	r3, r6, r1
 800423e:	f84b 3c04 	str.w	r3, [fp, #-4]
 8004242:	9b01      	ldr	r3, [sp, #4]
 8004244:	1a71      	subs	r1, r6, r1
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	fb81 6702 	smull	r6, r7, r1, r2
 800424e:	463e      	mov	r6, r7
 8004250:	1b63      	subs	r3, r4, r5
 8004252:	fb83 4500 	smull	r4, r5, r3, r0
 8004256:	fb80 0101 	smull	r0, r1, r0, r1
 800425a:	fb83 2302 	smull	r2, r3, r3, r2
 800425e:	442e      	add	r6, r5
 8004260:	1acd      	subs	r5, r1, r3
 8004262:	e91c 0006 	ldmdb	ip, {r1, r2}
 8004266:	1110      	asrs	r0, r2, #4
 8004268:	9a04      	ldr	r2, [sp, #16]
 800426a:	e919 0018 	ldmdb	r9, {r3, r4}
 800426e:	ebc2 0208 	rsb	r2, r2, r8
 8004272:	0076      	lsls	r6, r6, #1
 8004274:	ebc0 1824 	rsb	r8, r0, r4, asr #4
 8004278:	006d      	lsls	r5, r5, #1
 800427a:	9800      	ldr	r0, [sp, #0]
 800427c:	f849 6c08 	str.w	r6, [r9, #-8]
 8004280:	f849 5c04 	str.w	r5, [r9, #-4]
 8004284:	6805      	ldr	r5, [r0, #0]
 8004286:	9e07      	ldr	r6, [sp, #28]
 8004288:	1109      	asrs	r1, r1, #4
 800428a:	ebc1 1323 	rsb	r3, r1, r3, asr #4
 800428e:	6841      	ldr	r1, [r0, #4]
 8004290:	eb02 0008 	add.w	r0, r2, r8
 8004294:	ebce 0e06 	rsb	lr, lr, r6
 8004298:	fb80 6705 	smull	r6, r7, r0, r5
 800429c:	ebc3 040e 	rsb	r4, r3, lr
 80042a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80042a4:	fb84 6701 	smull	r6, r7, r4, r1
 80042a8:	463e      	mov	r6, r7
 80042aa:	fb85 4504 	smull	r4, r5, r5, r4
 80042ae:	fb80 0101 	smull	r0, r1, r0, r1
 80042b2:	9f05      	ldr	r7, [sp, #20]
 80042b4:	1a69      	subs	r1, r5, r1
 80042b6:	443e      	add	r6, r7
 80042b8:	0070      	lsls	r0, r6, #1
 80042ba:	0049      	lsls	r1, r1, #1
 80042bc:	e90a 0003 	stmdb	sl, {r0, r1}
 80042c0:	9f02      	ldr	r7, [sp, #8]
 80042c2:	ebc8 0202 	rsb	r2, r8, r2
 80042c6:	6839      	ldr	r1, [r7, #0]
 80042c8:	687e      	ldr	r6, [r7, #4]
 80042ca:	fb82 4501 	smull	r4, r5, r2, r1
 80042ce:	4473      	add	r3, lr
 80042d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80042d4:	fb81 0103 	smull	r0, r1, r1, r3
 80042d8:	fb83 4506 	smull	r4, r5, r3, r6
 80042dc:	fb82 2306 	smull	r2, r3, r2, r6
 80042e0:	9e08      	ldr	r6, [sp, #32]
 80042e2:	1acb      	subs	r3, r1, r3
 80042e4:	9901      	ldr	r1, [sp, #4]
 80042e6:	9c03      	ldr	r4, [sp, #12]
 80042e8:	4431      	add	r1, r6
 80042ea:	9800      	ldr	r0, [sp, #0]
 80042ec:	9101      	str	r1, [sp, #4]
 80042ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042f0:	442c      	add	r4, r5
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	1841      	adds	r1, r0, r1
 80042f6:	0062      	lsls	r2, r4, #1
 80042f8:	e90c 000c 	stmdb	ip, {r2, r3}
 80042fc:	9100      	str	r1, [sp, #0]
 80042fe:	9b06      	ldr	r3, [sp, #24]
 8004300:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004302:	3b01      	subs	r3, #1
 8004304:	4439      	add	r1, r7
 8004306:	f10b 0b08 	add.w	fp, fp, #8
 800430a:	f109 0908 	add.w	r9, r9, #8
 800430e:	f10a 0a08 	add.w	sl, sl, #8
 8004312:	9102      	str	r1, [sp, #8]
 8004314:	f10c 0c08 	add.w	ip, ip, #8
 8004318:	9306      	str	r3, [sp, #24]
 800431a:	f47f af6b 	bne.w	80041f4 <arm_radix4_butterfly_q31+0x50>
 800431e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	9316      	str	r3, [sp, #88]	; 0x58
 8004324:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004326:	2b04      	cmp	r3, #4
 8004328:	f240 80f9 	bls.w	800451e <arm_radix4_butterfly_q31+0x37a>
 800432c:	931c      	str	r3, [sp, #112]	; 0x70
 800432e:	930e      	str	r3, [sp, #56]	; 0x38
 8004330:	2300      	movs	r3, #0
 8004332:	9312      	str	r3, [sp, #72]	; 0x48
 8004334:	9315      	str	r3, [sp, #84]	; 0x54
 8004336:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004338:	980e      	ldr	r0, [sp, #56]	; 0x38
 800433a:	9314      	str	r3, [sp, #80]	; 0x50
 800433c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800433e:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 8004342:	9313      	str	r3, [sp, #76]	; 0x4c
 8004344:	0883      	lsrs	r3, r0, #2
 8004346:	4619      	mov	r1, r3
 8004348:	931d      	str	r3, [sp, #116]	; 0x74
 800434a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800434c:	1e4a      	subs	r2, r1, #1
 800434e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004352:	9218      	str	r2, [sp, #96]	; 0x60
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	00ca      	lsls	r2, r1, #3
 8004358:	9219      	str	r2, [sp, #100]	; 0x64
 800435a:	931a      	str	r3, [sp, #104]	; 0x68
 800435c:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8004360:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004364:	4622      	mov	r2, r4
 8004366:	4618      	mov	r0, r3
 8004368:	00d9      	lsls	r1, r3, #3
 800436a:	440a      	add	r2, r1
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4411      	add	r1, r2
 8004370:	58e3      	ldr	r3, [r4, r3]
 8004372:	6849      	ldr	r1, [r1, #4]
 8004374:	6852      	ldr	r2, [r2, #4]
 8004376:	9310      	str	r3, [sp, #64]	; 0x40
 8004378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800437a:	9104      	str	r1, [sp, #16]
 800437c:	9202      	str	r2, [sp, #8]
 800437e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004380:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 8004384:	18c3      	adds	r3, r0, r3
 8004386:	9206      	str	r2, [sp, #24]
 8004388:	9315      	str	r3, [sp, #84]	; 0x54
 800438a:	680a      	ldr	r2, [r1, #0]
 800438c:	684b      	ldr	r3, [r1, #4]
 800438e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004390:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004392:	9207      	str	r2, [sp, #28]
 8004394:	9311      	str	r3, [sp, #68]	; 0x44
 8004396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800439a:	eb07 0a05 	add.w	sl, r7, r5
 800439e:	eb0a 0b05 	add.w	fp, sl, r5
 80043a2:	4293      	cmp	r3, r2
 80043a4:	eb0b 0e05 	add.w	lr, fp, r5
 80043a8:	f240 80a0 	bls.w	80044ec <arm_radix4_butterfly_q31+0x348>
 80043ac:	4613      	mov	r3, r2
 80043ae:	46d8      	mov	r8, fp
 80043b0:	46d3      	mov	fp, sl
 80043b2:	46ba      	mov	sl, r7
 80043b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b6:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80043ba:	4413      	add	r3, r2
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	9b00      	ldr	r3, [sp, #0]
 80043c0:	f8da c000 	ldr.w	ip, [sl]
 80043c4:	f8d8 5000 	ldr.w	r5, [r8]
 80043c8:	f8db 2000 	ldr.w	r2, [fp]
 80043cc:	930c      	str	r3, [sp, #48]	; 0x30
 80043ce:	f8de 3000 	ldr.w	r3, [lr]
 80043d2:	eb0c 0705 	add.w	r7, ip, r5
 80043d6:	441a      	add	r2, r3
 80043d8:	18b9      	adds	r1, r7, r2
 80043da:	1089      	asrs	r1, r1, #2
 80043dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80043e0:	f8ca 1000 	str.w	r1, [sl]
 80043e4:	f8db 4004 	ldr.w	r4, [fp, #4]
 80043e8:	f8da 1004 	ldr.w	r1, [sl, #4]
 80043ec:	f8de 0004 	ldr.w	r0, [lr, #4]
 80043f0:	18ce      	adds	r6, r1, r3
 80043f2:	4420      	add	r0, r4
 80043f4:	1834      	adds	r4, r6, r0
 80043f6:	10a4      	asrs	r4, r4, #2
 80043f8:	f8ca 4004 	str.w	r4, [sl, #4]
 80043fc:	1ac9      	subs	r1, r1, r3
 80043fe:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004402:	ebc5 050c 	rsb	r5, r5, ip
 8004406:	469c      	mov	ip, r3
 8004408:	f8de 3004 	ldr.w	r3, [lr, #4]
 800440c:	f8de 4000 	ldr.w	r4, [lr]
 8004410:	ebc3 0c0c 	rsb	ip, r3, ip
 8004414:	f8db 3000 	ldr.w	r3, [fp]
 8004418:	1aba      	subs	r2, r7, r2
 800441a:	1b1b      	subs	r3, r3, r4
 800441c:	eb05 040c 	add.w	r4, r5, ip
 8004420:	ebcc 0c05 	rsb	ip, ip, r5
 8004424:	1acd      	subs	r5, r1, r3
 8004426:	440b      	add	r3, r1
 8004428:	9906      	ldr	r1, [sp, #24]
 800442a:	1a30      	subs	r0, r6, r0
 800442c:	fb84 6701 	smull	r6, r7, r4, r1
 8004430:	9902      	ldr	r1, [sp, #8]
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	fb85 0101 	smull	r0, r1, r5, r1
 8004438:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800443c:	9801      	ldr	r0, [sp, #4]
 800443e:	9904      	ldr	r1, [sp, #16]
 8004440:	44ca      	add	sl, r9
 8004442:	fb80 0101 	smull	r0, r1, r0, r1
 8004446:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800444a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800444c:	19cf      	adds	r7, r1, r7
 800444e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004450:	970d      	str	r7, [sp, #52]	; 0x34
 8004452:	4608      	mov	r0, r1
 8004454:	fb82 6701 	smull	r6, r7, r2, r1
 8004458:	9901      	ldr	r1, [sp, #4]
 800445a:	fb81 0100 	smull	r0, r1, r1, r0
 800445e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004464:	19c6      	adds	r6, r0, r7
 8004466:	9601      	str	r6, [sp, #4]
 8004468:	9e04      	ldr	r6, [sp, #16]
 800446a:	4630      	mov	r0, r6
 800446c:	fb82 6700 	smull	r6, r7, r2, r0
 8004470:	9a06      	ldr	r2, [sp, #24]
 8004472:	fb85 0102 	smull	r0, r1, r5, r2
 8004476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800447a:	9d02      	ldr	r5, [sp, #8]
 800447c:	9907      	ldr	r1, [sp, #28]
 800447e:	fb84 4505 	smull	r4, r5, r4, r5
 8004482:	fb8c 0101 	smull	r0, r1, ip, r1
 8004486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004488:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800448c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800448e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004490:	9c07      	ldr	r4, [sp, #28]
 8004492:	1b40      	subs	r0, r0, r5
 8004494:	1bd2      	subs	r2, r2, r7
 8004496:	fb83 4504 	smull	r4, r5, r3, r4
 800449a:	fb83 6701 	smull	r6, r7, r3, r1
 800449e:	9008      	str	r0, [sp, #32]
 80044a0:	fb8c 0101 	smull	r0, r1, ip, r1
 80044a4:	9e01      	ldr	r6, [sp, #4]
 80044a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044a8:	1a69      	subs	r1, r5, r1
 80044aa:	1052      	asrs	r2, r2, #1
 80044ac:	1075      	asrs	r5, r6, #1
 80044ae:	f8cb 5000 	str.w	r5, [fp]
 80044b2:	f8cb 2004 	str.w	r2, [fp, #4]
 80044b6:	443b      	add	r3, r7
 80044b8:	9a00      	ldr	r2, [sp, #0]
 80044ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80044bc:	9808      	ldr	r0, [sp, #32]
 80044be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80044c0:	105b      	asrs	r3, r3, #1
 80044c2:	442a      	add	r2, r5
 80044c4:	107c      	asrs	r4, r7, #1
 80044c6:	1040      	asrs	r0, r0, #1
 80044c8:	f8c8 4000 	str.w	r4, [r8]
 80044cc:	f8c8 0004 	str.w	r0, [r8, #4]
 80044d0:	9200      	str	r2, [sp, #0]
 80044d2:	f8ce 3000 	str.w	r3, [lr]
 80044d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044da:	1049      	asrs	r1, r1, #1
 80044dc:	429a      	cmp	r2, r3
 80044de:	f8ce 1004 	str.w	r1, [lr, #4]
 80044e2:	44cb      	add	fp, r9
 80044e4:	44c8      	add	r8, r9
 80044e6:	44ce      	add	lr, r9
 80044e8:	f63f af69 	bhi.w	80043be <arm_radix4_butterfly_q31+0x21a>
 80044ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044f2:	440a      	add	r2, r1
 80044f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80044f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80044f8:	3301      	adds	r3, #1
 80044fa:	3208      	adds	r2, #8
 80044fc:	9214      	str	r2, [sp, #80]	; 0x50
 80044fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004500:	9312      	str	r3, [sp, #72]	; 0x48
 8004502:	4293      	cmp	r3, r2
 8004504:	f67f af2c 	bls.w	8004360 <arm_radix4_butterfly_q31+0x1bc>
 8004508:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800450a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800450c:	0092      	lsls	r2, r2, #2
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	9216      	str	r2, [sp, #88]	; 0x58
 8004512:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004514:	2b04      	cmp	r3, #4
 8004516:	931c      	str	r3, [sp, #112]	; 0x70
 8004518:	920e      	str	r2, [sp, #56]	; 0x38
 800451a:	f63f af09 	bhi.w	8004330 <arm_radix4_butterfly_q31+0x18c>
 800451e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004520:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8004524:	3020      	adds	r0, #32
 8004526:	f850 2c20 	ldr.w	r2, [r0, #-32]
 800452a:	f850 3c18 	ldr.w	r3, [r0, #-24]
 800452e:	f850 1c14 	ldr.w	r1, [r0, #-20]
 8004532:	f850 8c1c 	ldr.w	r8, [r0, #-28]
 8004536:	f850 ac10 	ldr.w	sl, [r0, #-16]
 800453a:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 800453e:	18d7      	adds	r7, r2, r3
 8004540:	1ad6      	subs	r6, r2, r3
 8004542:	1855      	adds	r5, r2, r1
 8004544:	1a52      	subs	r2, r2, r1
 8004546:	f850 ec08 	ldr.w	lr, [r0, #-8]
 800454a:	f850 bc04 	ldr.w	fp, [r0, #-4]
 800454e:	eb08 0401 	add.w	r4, r8, r1
 8004552:	4457      	add	r7, sl
 8004554:	ebc1 0108 	rsb	r1, r1, r8
 8004558:	4456      	add	r6, sl
 800455a:	ebca 0505 	rsb	r5, sl, r5
 800455e:	ebca 0202 	rsb	r2, sl, r2
 8004562:	ebc3 0a08 	rsb	sl, r3, r8
 8004566:	4443      	add	r3, r8
 8004568:	4461      	add	r1, ip
 800456a:	4464      	add	r4, ip
 800456c:	ebcc 080a 	rsb	r8, ip, sl
 8004570:	ebcc 0303 	rsb	r3, ip, r3
 8004574:	ebcb 0505 	rsb	r5, fp, r5
 8004578:	445a      	add	r2, fp
 800457a:	445c      	add	r4, fp
 800457c:	4477      	add	r7, lr
 800457e:	ebcb 0b01 	rsb	fp, fp, r1
 8004582:	ebce 0606 	rsb	r6, lr, r6
 8004586:	eb08 010e 	add.w	r1, r8, lr
 800458a:	ebce 0303 	rsb	r3, lr, r3
 800458e:	f1b9 0901 	subs.w	r9, r9, #1
 8004592:	f840 7c20 	str.w	r7, [r0, #-32]
 8004596:	f840 6c18 	str.w	r6, [r0, #-24]
 800459a:	f840 5c10 	str.w	r5, [r0, #-16]
 800459e:	f840 2c08 	str.w	r2, [r0, #-8]
 80045a2:	f840 4c1c 	str.w	r4, [r0, #-28]
 80045a6:	f840 bc14 	str.w	fp, [r0, #-20]
 80045aa:	f840 1c0c 	str.w	r1, [r0, #-12]
 80045ae:	f840 3c04 	str.w	r3, [r0, #-4]
 80045b2:	f100 0020 	add.w	r0, r0, #32
 80045b6:	d1b6      	bne.n	8004526 <arm_radix4_butterfly_q31+0x382>
 80045b8:	b021      	add	sp, #132	; 0x84
 80045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop

080045c0 <arm_radix4_butterfly_inverse_q31>:
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	4605      	mov	r5, r0
 80045c6:	4617      	mov	r7, r2
 80045c8:	b0a1      	sub	sp, #132	; 0x84
 80045ca:	461e      	mov	r6, r3
 80045cc:	9111      	str	r1, [sp, #68]	; 0x44
 80045ce:	0889      	lsrs	r1, r1, #2
 80045d0:	930c      	str	r3, [sp, #48]	; 0x30
 80045d2:	00cb      	lsls	r3, r1, #3
 80045d4:	901e      	str	r0, [sp, #120]	; 0x78
 80045d6:	4418      	add	r0, r3
 80045d8:	9218      	str	r2, [sp, #96]	; 0x60
 80045da:	4694      	mov	ip, r2
 80045dc:	18c2      	adds	r2, r0, r3
 80045de:	3308      	adds	r3, #8
 80045e0:	eb02 0b03 	add.w	fp, r2, r3
 80045e4:	f102 0908 	add.w	r9, r2, #8
 80045e8:	f105 0a08 	add.w	sl, r5, #8
 80045ec:	46de      	mov	lr, fp
 80045ee:	46d3      	mov	fp, sl
 80045f0:	46ca      	mov	sl, r9
 80045f2:	46b9      	mov	r9, r7
 80045f4:	911f      	str	r1, [sp, #124]	; 0x7c
 80045f6:	9102      	str	r1, [sp, #8]
 80045f8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80045fc:	00cb      	lsls	r3, r1, #3
 80045fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004600:	0133      	lsls	r3, r6, #4
 8004602:	930a      	str	r3, [sp, #40]	; 0x28
 8004604:	00f3      	lsls	r3, r6, #3
 8004606:	f100 0808 	add.w	r8, r0, #8
 800460a:	9309      	str	r3, [sp, #36]	; 0x24
 800460c:	9701      	str	r7, [sp, #4]
 800460e:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 8004612:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 8004616:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800461a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800461e:	1100      	asrs	r0, r0, #4
 8004620:	1109      	asrs	r1, r1, #4
 8004622:	111b      	asrs	r3, r3, #4
 8004624:	1846      	adds	r6, r0, r1
 8004626:	eb03 1722 	add.w	r7, r3, r2, asr #4
 800462a:	19f3      	adds	r3, r6, r7
 800462c:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8004630:	f84b 3c08 	str.w	r3, [fp, #-8]
 8004634:	9108      	str	r1, [sp, #32]
 8004636:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800463a:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 800463e:	f858 4c04 	ldr.w	r4, [r8, #-4]
 8004642:	111b      	asrs	r3, r3, #4
 8004644:	1112      	asrs	r2, r2, #4
 8004646:	1109      	asrs	r1, r1, #4
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	eb01 1424 	add.w	r4, r1, r4, asr #4
 800464e:	1898      	adds	r0, r3, r2
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	1901      	adds	r1, r0, r4
 8004654:	9b01      	ldr	r3, [sp, #4]
 8004656:	f84b 1c04 	str.w	r1, [fp, #-4]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	681d      	ldr	r5, [r3, #0]
 800465e:	460b      	mov	r3, r1
 8004660:	1bf1      	subs	r1, r6, r7
 8004662:	fb81 6705 	smull	r6, r7, r1, r5
 8004666:	1b04      	subs	r4, r0, r4
 8004668:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800466c:	fb81 0103 	smull	r0, r1, r1, r3
 8004670:	fb84 6703 	smull	r6, r7, r4, r3
 8004674:	fb85 4504 	smull	r4, r5, r5, r4
 8004678:	9b07      	ldr	r3, [sp, #28]
 800467a:	194e      	adds	r6, r1, r5
 800467c:	1bdf      	subs	r7, r3, r7
 800467e:	007f      	lsls	r7, r7, #1
 8004680:	0076      	lsls	r6, r6, #1
 8004682:	e91e 0003 	ldmdb	lr, {r0, r1}
 8004686:	f858 5c08 	ldr.w	r5, [r8, #-8]
 800468a:	f858 4c04 	ldr.w	r4, [r8, #-4]
 800468e:	f848 7c08 	str.w	r7, [r8, #-8]
 8004692:	f848 6c04 	str.w	r6, [r8, #-4]
 8004696:	9b04      	ldr	r3, [sp, #16]
 8004698:	9e03      	ldr	r6, [sp, #12]
 800469a:	9f08      	ldr	r7, [sp, #32]
 800469c:	1109      	asrs	r1, r1, #4
 800469e:	1bf7      	subs	r7, r6, r7
 80046a0:	1a9a      	subs	r2, r3, r2
 80046a2:	1100      	asrs	r0, r0, #4
 80046a4:	ebc1 1324 	rsb	r3, r1, r4, asr #4
 80046a8:	ebc0 1625 	rsb	r6, r0, r5, asr #4
 80046ac:	1afd      	subs	r5, r7, r3
 80046ae:	e899 0011 	ldmia.w	r9, {r0, r4}
 80046b2:	1991      	adds	r1, r2, r6
 80046b4:	9308      	str	r3, [sp, #32]
 80046b6:	9203      	str	r2, [sp, #12]
 80046b8:	fb85 2300 	smull	r2, r3, r5, r0
 80046bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046c0:	fb81 2304 	smull	r2, r3, r1, r4
 80046c4:	fb85 4504 	smull	r4, r5, r5, r4
 80046c8:	fb80 0101 	smull	r0, r1, r0, r1
 80046cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80046d0:	9c05      	ldr	r4, [sp, #20]
 80046d2:	f10b 0b08 	add.w	fp, fp, #8
 80046d6:	1ae2      	subs	r2, r4, r3
 80046d8:	9c07      	ldr	r4, [sp, #28]
 80046da:	0050      	lsls	r0, r2, #1
 80046dc:	4421      	add	r1, r4
 80046de:	0049      	lsls	r1, r1, #1
 80046e0:	e90a 0003 	stmdb	sl, {r0, r1}
 80046e4:	9b08      	ldr	r3, [sp, #32]
 80046e6:	9a03      	ldr	r2, [sp, #12]
 80046e8:	f8dc 1000 	ldr.w	r1, [ip]
 80046ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80046f0:	1b92      	subs	r2, r2, r6
 80046f2:	443b      	add	r3, r7
 80046f4:	fb83 6701 	smull	r6, r7, r3, r1
 80046f8:	fb82 4500 	smull	r4, r5, r2, r0
 80046fc:	fb81 0102 	smull	r0, r1, r1, r2
 8004700:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004704:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004706:	fb83 2302 	smull	r2, r3, r3, r2
 800470a:	440b      	add	r3, r1
 800470c:	9901      	ldr	r1, [sp, #4]
 800470e:	1b7c      	subs	r4, r7, r5
 8004710:	4401      	add	r1, r0
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	0062      	lsls	r2, r4, #1
 8004716:	9101      	str	r1, [sp, #4]
 8004718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800471a:	e90e 000c 	stmdb	lr, {r2, r3}
 800471e:	9b02      	ldr	r3, [sp, #8]
 8004720:	4489      	add	r9, r1
 8004722:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004724:	3b01      	subs	r3, #1
 8004726:	f108 0808 	add.w	r8, r8, #8
 800472a:	f10a 0a08 	add.w	sl, sl, #8
 800472e:	448c      	add	ip, r1
 8004730:	f10e 0e08 	add.w	lr, lr, #8
 8004734:	9302      	str	r3, [sp, #8]
 8004736:	f47f af6a 	bne.w	800460e <arm_radix4_butterfly_inverse_q31+0x4e>
 800473a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004740:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004742:	2b04      	cmp	r3, #4
 8004744:	f240 80ed 	bls.w	8004922 <arm_radix4_butterfly_inverse_q31+0x362>
 8004748:	931c      	str	r3, [sp, #112]	; 0x70
 800474a:	9310      	str	r3, [sp, #64]	; 0x40
 800474c:	2300      	movs	r3, #0
 800474e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004750:	9316      	str	r3, [sp, #88]	; 0x58
 8004752:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004754:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004756:	9315      	str	r3, [sp, #84]	; 0x54
 8004758:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800475a:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800475e:	9314      	str	r3, [sp, #80]	; 0x50
 8004760:	0883      	lsrs	r3, r0, #2
 8004762:	4619      	mov	r1, r3
 8004764:	931d      	str	r3, [sp, #116]	; 0x74
 8004766:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004768:	1e4a      	subs	r2, r1, #1
 800476a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800476e:	9219      	str	r2, [sp, #100]	; 0x64
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	00ca      	lsls	r2, r1, #3
 8004774:	921a      	str	r2, [sp, #104]	; 0x68
 8004776:	931b      	str	r3, [sp, #108]	; 0x6c
 8004778:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800477c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800477e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004780:	4622      	mov	r2, r4
 8004782:	4618      	mov	r0, r3
 8004784:	00d9      	lsls	r1, r3, #3
 8004786:	440a      	add	r2, r1
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	4411      	add	r1, r2
 800478c:	58e3      	ldr	r3, [r4, r3]
 800478e:	6849      	ldr	r1, [r1, #4]
 8004790:	6852      	ldr	r2, [r2, #4]
 8004792:	9304      	str	r3, [sp, #16]
 8004794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004796:	9106      	str	r1, [sp, #24]
 8004798:	9208      	str	r2, [sp, #32]
 800479a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800479c:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 80047a0:	18c3      	adds	r3, r0, r3
 80047a2:	9203      	str	r2, [sp, #12]
 80047a4:	9316      	str	r3, [sp, #88]	; 0x58
 80047a6:	680a      	ldr	r2, [r1, #0]
 80047a8:	684b      	ldr	r3, [r1, #4]
 80047aa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80047ac:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80047ae:	9209      	str	r2, [sp, #36]	; 0x24
 80047b0:	930a      	str	r3, [sp, #40]	; 0x28
 80047b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047b6:	eb07 0a05 	add.w	sl, r7, r5
 80047ba:	eb0a 0b05 	add.w	fp, sl, r5
 80047be:	4293      	cmp	r3, r2
 80047c0:	eb0b 0e05 	add.w	lr, fp, r5
 80047c4:	f240 8094 	bls.w	80048f0 <arm_radix4_butterfly_inverse_q31+0x330>
 80047c8:	4613      	mov	r3, r2
 80047ca:	f8cd b004 	str.w	fp, [sp, #4]
 80047ce:	46d3      	mov	fp, sl
 80047d0:	46ba      	mov	sl, r7
 80047d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047d4:	9801      	ldr	r0, [sp, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	9302      	str	r3, [sp, #8]
 80047da:	9b02      	ldr	r3, [sp, #8]
 80047dc:	f8da c000 	ldr.w	ip, [sl]
 80047e0:	6804      	ldr	r4, [r0, #0]
 80047e2:	f8db 2000 	ldr.w	r2, [fp]
 80047e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80047e8:	f8de 3000 	ldr.w	r3, [lr]
 80047ec:	eb0c 0704 	add.w	r7, ip, r4
 80047f0:	441a      	add	r2, r3
 80047f2:	18b9      	adds	r1, r7, r2
 80047f4:	1089      	asrs	r1, r1, #2
 80047f6:	6843      	ldr	r3, [r0, #4]
 80047f8:	f8ca 1000 	str.w	r1, [sl]
 80047fc:	f8db 5004 	ldr.w	r5, [fp, #4]
 8004800:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004804:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004808:	18ce      	adds	r6, r1, r3
 800480a:	4428      	add	r0, r5
 800480c:	1835      	adds	r5, r6, r0
 800480e:	10ad      	asrs	r5, r5, #2
 8004810:	f8ca 5004 	str.w	r5, [sl, #4]
 8004814:	1ac9      	subs	r1, r1, r3
 8004816:	f8db 3004 	ldr.w	r3, [fp, #4]
 800481a:	ebc4 040c 	rsb	r4, r4, ip
 800481e:	469c      	mov	ip, r3
 8004820:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004824:	f8de 5000 	ldr.w	r5, [lr]
 8004828:	ebc3 0c0c 	rsb	ip, r3, ip
 800482c:	f8db 3000 	ldr.w	r3, [fp]
 8004830:	1aba      	subs	r2, r7, r2
 8004832:	1b5b      	subs	r3, r3, r5
 8004834:	ebcc 0504 	rsb	r5, ip, r4
 8004838:	44a4      	add	ip, r4
 800483a:	18cc      	adds	r4, r1, r3
 800483c:	1acb      	subs	r3, r1, r3
 800483e:	9903      	ldr	r1, [sp, #12]
 8004840:	1a30      	subs	r0, r6, r0
 8004842:	fb85 6701 	smull	r6, r7, r5, r1
 8004846:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 800484a:	9e08      	ldr	r6, [sp, #32]
 800484c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800484e:	fb84 8906 	smull	r8, r9, r4, r6
 8004852:	ebc9 0101 	rsb	r1, r9, r1
 8004856:	910e      	str	r1, [sp, #56]	; 0x38
 8004858:	9904      	ldr	r1, [sp, #16]
 800485a:	9f06      	ldr	r7, [sp, #24]
 800485c:	4688      	mov	r8, r1
 800485e:	fb80 6707 	smull	r6, r7, r0, r7
 8004862:	fb82 8908 	smull	r8, r9, r2, r8
 8004866:	ebc7 0609 	rsb	r6, r7, r9
 800486a:	9f06      	ldr	r7, [sp, #24]
 800486c:	960c      	str	r6, [sp, #48]	; 0x30
 800486e:	fb82 6707 	smull	r6, r7, r2, r7
 8004872:	9a03      	ldr	r2, [sp, #12]
 8004874:	fb80 0101 	smull	r0, r1, r0, r1
 8004878:	fb84 8902 	smull	r8, r9, r4, r2
 800487c:	9c08      	ldr	r4, [sp, #32]
 800487e:	187a      	adds	r2, r7, r1
 8004880:	fb85 4504 	smull	r4, r5, r5, r4
 8004884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004886:	eb05 0409 	add.w	r4, r5, r9
 800488a:	fb8c 6701 	smull	r6, r7, ip, r1
 800488e:	940f      	str	r4, [sp, #60]	; 0x3c
 8004890:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004892:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004894:	fb83 0101 	smull	r0, r1, r3, r1
 8004898:	fb83 4504 	smull	r4, r5, r3, r4
 800489c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80048a0:	4698      	mov	r8, r3
 80048a2:	fb8c 8908 	smull	r8, r9, ip, r8
 80048a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80048a8:	1052      	asrs	r2, r2, #1
 80048aa:	f8cb 2004 	str.w	r2, [fp, #4]
 80048ae:	1a7b      	subs	r3, r7, r1
 80048b0:	9a02      	ldr	r2, [sp, #8]
 80048b2:	eb09 0105 	add.w	r1, r9, r5
 80048b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048b8:	1075      	asrs	r5, r6, #1
 80048ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80048bc:	f8cb 5000 	str.w	r5, [fp]
 80048c0:	9d01      	ldr	r5, [sp, #4]
 80048c2:	1040      	asrs	r0, r0, #1
 80048c4:	105b      	asrs	r3, r3, #1
 80048c6:	4432      	add	r2, r6
 80048c8:	1064      	asrs	r4, r4, #1
 80048ca:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80048cc:	6068      	str	r0, [r5, #4]
 80048ce:	602c      	str	r4, [r5, #0]
 80048d0:	9202      	str	r2, [sp, #8]
 80048d2:	f8ce 3000 	str.w	r3, [lr]
 80048d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80048d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048da:	1049      	asrs	r1, r1, #1
 80048dc:	19e8      	adds	r0, r5, r7
 80048de:	429a      	cmp	r2, r3
 80048e0:	f8ce 1004 	str.w	r1, [lr, #4]
 80048e4:	44ba      	add	sl, r7
 80048e6:	44bb      	add	fp, r7
 80048e8:	9001      	str	r0, [sp, #4]
 80048ea:	44be      	add	lr, r7
 80048ec:	f63f af75 	bhi.w	80047da <arm_radix4_butterfly_inverse_q31+0x21a>
 80048f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80048f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80048f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048f6:	440a      	add	r2, r1
 80048f8:	9214      	str	r2, [sp, #80]	; 0x50
 80048fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048fc:	3301      	adds	r3, #1
 80048fe:	3208      	adds	r2, #8
 8004900:	9215      	str	r2, [sp, #84]	; 0x54
 8004902:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004904:	9313      	str	r3, [sp, #76]	; 0x4c
 8004906:	4293      	cmp	r3, r2
 8004908:	f67f af38 	bls.w	800477c <arm_radix4_butterfly_inverse_q31+0x1bc>
 800490c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800490e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004910:	0092      	lsls	r2, r2, #2
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	9217      	str	r2, [sp, #92]	; 0x5c
 8004916:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004918:	2b04      	cmp	r3, #4
 800491a:	931c      	str	r3, [sp, #112]	; 0x70
 800491c:	9210      	str	r2, [sp, #64]	; 0x40
 800491e:	f63f af15 	bhi.w	800474c <arm_radix4_butterfly_inverse_q31+0x18c>
 8004922:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004924:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8004928:	3020      	adds	r0, #32
 800492a:	f850 2c20 	ldr.w	r2, [r0, #-32]
 800492e:	f850 1c18 	ldr.w	r1, [r0, #-24]
 8004932:	f850 3c14 	ldr.w	r3, [r0, #-20]
 8004936:	f850 9c1c 	ldr.w	r9, [r0, #-28]
 800493a:	f850 ac10 	ldr.w	sl, [r0, #-16]
 800493e:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8004942:	eb02 0e01 	add.w	lr, r2, r1
 8004946:	1a57      	subs	r7, r2, r1
 8004948:	1ad6      	subs	r6, r2, r3
 800494a:	441a      	add	r2, r3
 800494c:	f850 4c08 	ldr.w	r4, [r0, #-8]
 8004950:	f850 bc04 	ldr.w	fp, [r0, #-4]
 8004954:	eb09 0503 	add.w	r5, r9, r3
 8004958:	44d6      	add	lr, sl
 800495a:	4457      	add	r7, sl
 800495c:	ebca 0606 	rsb	r6, sl, r6
 8004960:	ebc3 0309 	rsb	r3, r3, r9
 8004964:	ebca 0a02 	rsb	sl, sl, r2
 8004968:	eb09 0201 	add.w	r2, r9, r1
 800496c:	ebc1 0109 	rsb	r1, r1, r9
 8004970:	4463      	add	r3, ip
 8004972:	4465      	add	r5, ip
 8004974:	ebcc 0202 	rsb	r2, ip, r2
 8004978:	ebcc 0c01 	rsb	ip, ip, r1
 800497c:	445e      	add	r6, fp
 800497e:	ebcb 0a0a 	rsb	sl, fp, sl
 8004982:	445d      	add	r5, fp
 8004984:	eb0e 0104 	add.w	r1, lr, r4
 8004988:	ebcb 0b03 	rsb	fp, fp, r3
 800498c:	1b3f      	subs	r7, r7, r4
 800498e:	1b12      	subs	r2, r2, r4
 8004990:	eb0c 0304 	add.w	r3, ip, r4
 8004994:	f1b8 0801 	subs.w	r8, r8, #1
 8004998:	f840 1c20 	str.w	r1, [r0, #-32]
 800499c:	f840 7c18 	str.w	r7, [r0, #-24]
 80049a0:	f840 6c10 	str.w	r6, [r0, #-16]
 80049a4:	f840 ac08 	str.w	sl, [r0, #-8]
 80049a8:	f840 5c1c 	str.w	r5, [r0, #-28]
 80049ac:	f840 bc14 	str.w	fp, [r0, #-20]
 80049b0:	f840 2c0c 	str.w	r2, [r0, #-12]
 80049b4:	f840 3c04 	str.w	r3, [r0, #-4]
 80049b8:	f100 0020 	add.w	r0, r0, #32
 80049bc:	d1b5      	bne.n	800492a <arm_radix4_butterfly_inverse_q31+0x36a>
 80049be:	b021      	add	sp, #132	; 0x84
 80049c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049c4 <arm_fir_q31>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	4607      	mov	r7, r0
 80049ca:	883c      	ldrh	r4, [r7, #0]
 80049cc:	b095      	sub	sp, #84	; 0x54
 80049ce:	4626      	mov	r6, r4
 80049d0:	9012      	str	r0, [sp, #72]	; 0x48
 80049d2:	48a3      	ldr	r0, [pc, #652]	; (8004c60 <arm_fir_q31+0x29c>)
 80049d4:	940f      	str	r4, [sp, #60]	; 0x3c
 80049d6:	fba0 5403 	umull	r5, r4, r0, r3
 80049da:	4635      	mov	r5, r6
 80049dc:	fba0 5005 	umull	r5, r0, r0, r5
 80049e0:	0840      	lsrs	r0, r0, #1
 80049e2:	0864      	lsrs	r4, r4, #1
 80049e4:	9006      	str	r0, [sp, #24]
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	0065      	lsls	r5, r4, #1
 80049ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80049ec:	4628      	mov	r0, r5
 80049ee:	9513      	str	r5, [sp, #76]	; 0x4c
 80049f0:	4625      	mov	r5, r4
 80049f2:	9411      	str	r4, [sp, #68]	; 0x44
 80049f4:	1904      	adds	r4, r0, r4
 80049f6:	9806      	ldr	r0, [sp, #24]
 80049f8:	1b1c      	subs	r4, r3, r4
 80049fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80049fe:	f106 4c80 	add.w	ip, r6, #1073741824	; 0x40000000
 8004a02:	9410      	str	r4, [sp, #64]	; 0x40
 8004a04:	1a34      	subs	r4, r6, r0
 8004a06:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004a08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a0c:	9408      	str	r4, [sp, #32]
 8004a0e:	68bc      	ldr	r4, [r7, #8]
 8004a10:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 8004a14:	910d      	str	r1, [sp, #52]	; 0x34
 8004a16:	920e      	str	r2, [sp, #56]	; 0x38
 8004a18:	930c      	str	r3, [sp, #48]	; 0x30
 8004a1a:	4627      	mov	r7, r4
 8004a1c:	9407      	str	r4, [sp, #28]
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	f000 80b2 	beq.w	8004b88 <arm_fir_q31+0x1c4>
 8004a24:	330c      	adds	r3, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	4633      	mov	r3, r6
 8004a30:	0080      	lsls	r0, r0, #2
 8004a32:	900a      	str	r0, [sp, #40]	; 0x28
 8004a34:	f101 0b0c 	add.w	fp, r1, #12
 8004a38:	1838      	adds	r0, r7, r0
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	9503      	str	r5, [sp, #12]
 8004a3e:	9009      	str	r0, [sp, #36]	; 0x24
 8004a40:	9302      	str	r3, [sp, #8]
 8004a42:	f8cd b004 	str.w	fp, [sp, #4]
 8004a46:	9a01      	ldr	r2, [sp, #4]
 8004a48:	9c00      	ldr	r4, [sp, #0]
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	f852 3c0c 	ldr.w	r3, [r2, #-12]
 8004a50:	9d02      	ldr	r5, [sp, #8]
 8004a52:	f844 3c0c 	str.w	r3, [r4, #-12]
 8004a56:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f844 3c08 	str.w	r3, [r4, #-8]
 8004a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a64:	9906      	ldr	r1, [sp, #24]
 8004a66:	f844 3c04 	str.w	r3, [r4, #-4]
 8004a6a:	f855 9c08 	ldr.w	r9, [r5, #-8]
 8004a6e:	f855 8c04 	ldr.w	r8, [r5, #-4]
 8004a72:	f04f 0a00 	mov.w	sl, #0
 8004a76:	f04f 0b00 	mov.w	fp, #0
 8004a7a:	2900      	cmp	r1, #0
 8004a7c:	f000 80e5 	beq.w	8004c4a <arm_fir_q31+0x286>
 8004a80:	f105 030c 	add.w	r3, r5, #12
 8004a84:	468e      	mov	lr, r1
 8004a86:	4654      	mov	r4, sl
 8004a88:	465d      	mov	r5, fp
 8004a8a:	4656      	mov	r6, sl
 8004a8c:	465f      	mov	r7, fp
 8004a8e:	4649      	mov	r1, r9
 8004a90:	4640      	mov	r0, r8
 8004a92:	9305      	str	r3, [sp, #20]
 8004a94:	461a      	mov	r2, r3
 8004a96:	9b07      	ldr	r3, [sp, #28]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	f853 8c0c 	ldr.w	r8, [r3, #-12]
 8004a9e:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 8004aa2:	fbc8 ab01 	smlal	sl, fp, r8, r1
 8004aa6:	fbc0 6708 	smlal	r6, r7, r0, r8
 8004aaa:	fbcc 4508 	smlal	r4, r5, ip, r8
 8004aae:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8004ab2:	f853 8c08 	ldr.w	r8, [r3, #-8]
 8004ab6:	f1be 0e01 	subs.w	lr, lr, #1
 8004aba:	fbc8 ab00 	smlal	sl, fp, r8, r0
 8004abe:	fbc8 670c 	smlal	r6, r7, r8, ip
 8004ac2:	fbc1 4508 	smlal	r4, r5, r1, r8
 8004ac6:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004aca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8004ace:	f102 020c 	add.w	r2, r2, #12
 8004ad2:	fbc8 ab0c 	smlal	sl, fp, r8, ip
 8004ad6:	f103 030c 	add.w	r3, r3, #12
 8004ada:	fbc8 6701 	smlal	r6, r7, r8, r1
 8004ade:	fbc0 4508 	smlal	r4, r5, r0, r8
 8004ae2:	d1da      	bne.n	8004a9a <arm_fir_q31+0xd6>
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	4634      	mov	r4, r6
 8004aea:	463d      	mov	r5, r7
 8004aec:	4656      	mov	r6, sl
 8004aee:	465f      	mov	r7, fp
 8004af0:	4692      	mov	sl, r2
 8004af2:	469b      	mov	fp, r3
 8004af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004af6:	9b02      	ldr	r3, [sp, #8]
 8004af8:	4680      	mov	r8, r0
 8004afa:	4413      	add	r3, r2
 8004afc:	4689      	mov	r9, r1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8004b04:	9b08      	ldr	r3, [sp, #32]
 8004b06:	b173      	cbz	r3, 8004b26 <arm_fir_q31+0x162>
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f85e 3b04 	ldr.w	r3, [lr], #4
 8004b0e:	f850 1b04 	ldr.w	r1, [r0], #4
 8004b12:	3a01      	subs	r2, #1
 8004b14:	fbc3 6709 	smlal	r6, r7, r3, r9
 8004b18:	fbc8 4503 	smlal	r4, r5, r8, r3
 8004b1c:	46c1      	mov	r9, r8
 8004b1e:	fbc1 ab03 	smlal	sl, fp, r1, r3
 8004b22:	4688      	mov	r8, r1
 8004b24:	d1f1      	bne.n	8004b0a <arm_fir_q31+0x146>
 8004b26:	9800      	ldr	r0, [sp, #0]
 8004b28:	0fe2      	lsrs	r2, r4, #31
 8004b2a:	300c      	adds	r0, #12
 8004b2c:	9c04      	ldr	r4, [sp, #16]
 8004b2e:	0ff3      	lsrs	r3, r6, #31
 8004b30:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8004b34:	9000      	str	r0, [sp, #0]
 8004b36:	9801      	ldr	r0, [sp, #4]
 8004b38:	f844 3c0c 	str.w	r3, [r4, #-12]
 8004b3c:	f104 030c 	add.w	r3, r4, #12
 8004b40:	300c      	adds	r0, #12
 8004b42:	9304      	str	r3, [sp, #16]
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	ea4f 71da 	mov.w	r1, sl, lsr #31
 8004b4a:	9001      	str	r0, [sp, #4]
 8004b4c:	9805      	ldr	r0, [sp, #20]
 8004b4e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8004b52:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	9002      	str	r0, [sp, #8]
 8004b5a:	f844 2c08 	str.w	r2, [r4, #-8]
 8004b5e:	f844 1c04 	str.w	r1, [r4, #-4]
 8004b62:	9303      	str	r3, [sp, #12]
 8004b64:	f47f af6f 	bne.w	8004a46 <arm_fir_q31+0x82>
 8004b68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b6c:	4413      	add	r3, r2
 8004b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	920c      	str	r2, [sp, #48]	; 0x30
 8004b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b78:	441a      	add	r2, r3
 8004b7a:	920d      	str	r2, [sp, #52]	; 0x34
 8004b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b7e:	441a      	add	r2, r3
 8004b80:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b84:	441a      	add	r2, r3
 8004b86:	920e      	str	r2, [sp, #56]	; 0x38
 8004b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b8a:	b353      	cbz	r3, 8004be2 <arm_fir_q31+0x21e>
 8004b8c:	461f      	mov	r7, r3
 8004b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b90:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8004b94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004b98:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8004b9c:	f1a3 0c04 	sub.w	ip, r3, #4
 8004ba0:	e898 0b00 	ldmia.w	r8, {r8, r9, fp}
 8004ba4:	465b      	mov	r3, fp
 8004ba6:	4654      	mov	r4, sl
 8004ba8:	4672      	mov	r2, lr
 8004baa:	f858 5b04 	ldr.w	r5, [r8], #4
 8004bae:	2000      	movs	r0, #0
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f84c 5f04 	str.w	r5, [ip, #4]!
 8004bb6:	f852 6b04 	ldr.w	r6, [r2], #4
 8004bba:	f854 5b04 	ldr.w	r5, [r4], #4
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	fbc5 0106 	smlal	r0, r1, r5, r6
 8004bc4:	d1f7      	bne.n	8004bb6 <arm_fir_q31+0x1f2>
 8004bc6:	0fc3      	lsrs	r3, r0, #31
 8004bc8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004bcc:	3f01      	subs	r7, #1
 8004bce:	f10e 0e04 	add.w	lr, lr, #4
 8004bd2:	f849 3b04 	str.w	r3, [r9], #4
 8004bd6:	d1e5      	bne.n	8004ba4 <arm_fir_q31+0x1e0>
 8004bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004be4:	1e59      	subs	r1, r3, #1
 8004be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004be8:	088e      	lsrs	r6, r1, #2
 8004bea:	685c      	ldr	r4, [r3, #4]
 8004bec:	d01f      	beq.n	8004c2e <arm_fir_q31+0x26a>
 8004bee:	4630      	mov	r0, r6
 8004bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bf2:	f104 0210 	add.w	r2, r4, #16
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8004bfc:	3801      	subs	r0, #1
 8004bfe:	f842 5c10 	str.w	r5, [r2, #-16]
 8004c02:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8004c06:	f102 0210 	add.w	r2, r2, #16
 8004c0a:	f842 5c1c 	str.w	r5, [r2, #-28]
 8004c0e:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004c12:	f103 0310 	add.w	r3, r3, #16
 8004c16:	f842 5c18 	str.w	r5, [r2, #-24]
 8004c1a:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8004c1e:	f842 5c14 	str.w	r5, [r2, #-20]
 8004c22:	d1e9      	bne.n	8004bf8 <arm_fir_q31+0x234>
 8004c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c26:	0133      	lsls	r3, r6, #4
 8004c28:	441a      	add	r2, r3
 8004c2a:	441c      	add	r4, r3
 8004c2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c2e:	f011 0303 	ands.w	r3, r1, #3
 8004c32:	d007      	beq.n	8004c44 <arm_fir_q31+0x280>
 8004c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c36:	1f22      	subs	r2, r4, #4
 8004c38:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c42:	d1f9      	bne.n	8004c38 <arm_fir_q31+0x274>
 8004c44:	b015      	add	sp, #84	; 0x54
 8004c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4a:	f100 030c 	add.w	r3, r0, #12
 8004c4e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8004c52:	4654      	mov	r4, sl
 8004c54:	465d      	mov	r5, fp
 8004c56:	4656      	mov	r6, sl
 8004c58:	465f      	mov	r7, fp
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	e752      	b.n	8004b04 <arm_fir_q31+0x140>
 8004c5e:	bf00      	nop
 8004c60:	aaaaaaab 	.word	0xaaaaaaab

08004c64 <arm_fir_init_q31>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4604      	mov	r4, r0
 8004c68:	461d      	mov	r5, r3
 8004c6a:	9804      	ldr	r0, [sp, #16]
 8004c6c:	60a2      	str	r2, [r4, #8]
 8004c6e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004c72:	3a01      	subs	r2, #1
 8004c74:	440a      	add	r2, r1
 8004c76:	8021      	strh	r1, [r4, #0]
 8004c78:	0092      	lsls	r2, r2, #2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	f000 f9f9 	bl	8005074 <memset>
 8004c82:	6065      	str	r5, [r4, #4]
 8004c84:	bd38      	pop	{r3, r4, r5, pc}
 8004c86:	bf00      	nop

08004c88 <arm_cmplx_mag_q31>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	0893      	lsrs	r3, r2, #2
 8004c8e:	b085      	sub	sp, #20
 8004c90:	e88d 0005 	stmia.w	sp, {r0, r2}
 8004c94:	460e      	mov	r6, r1
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	d053      	beq.n	8004d42 <arm_cmplx_mag_q31+0xba>
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	46ba      	mov	sl, r7
 8004ca0:	f100 0420 	add.w	r4, r0, #32
 8004ca4:	9103      	str	r1, [sp, #12]
 8004ca6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8004caa:	f854 0c1c 	ldr.w	r0, [r4, #-28]
 8004cae:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8004cb2:	f854 2c18 	ldr.w	r2, [r4, #-24]
 8004cb6:	fb83 8903 	smull	r8, r9, r3, r3
 8004cba:	fb80 0100 	smull	r0, r1, r0, r0
 8004cbe:	fb82 2302 	smull	r2, r3, r2, r2
 8004cc2:	fb86 6706 	smull	r6, r7, r6, r6
 8004cc6:	ea4f 0269 	mov.w	r2, r9, asr #1
 8004cca:	1048      	asrs	r0, r1, #1
 8004ccc:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8004cd0:	f854 8c0c 	ldr.w	r8, [r4, #-12]
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	eb00 0067 	add.w	r0, r0, r7, asr #1
 8004cda:	eb02 0763 	add.w	r7, r2, r3, asr #1
 8004cde:	f854 bc10 	ldr.w	fp, [r4, #-16]
 8004ce2:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8004ce6:	f000 f849 	bl	8004d7c <arm_sqrt_q31>
 8004cea:	1d29      	adds	r1, r5, #4
 8004cec:	4638      	mov	r0, r7
 8004cee:	f000 f845 	bl	8004d7c <arm_sqrt_q31>
 8004cf2:	fb89 0109 	smull	r0, r1, r9, r9
 8004cf6:	fb88 8908 	smull	r8, r9, r8, r8
 8004cfa:	fb8b 230b 	smull	r2, r3, fp, fp
 8004cfe:	fb86 6706 	smull	r6, r7, r6, r6
 8004d02:	ea4f 0069 	mov.w	r0, r9, asr #1
 8004d06:	104e      	asrs	r6, r1, #1
 8004d08:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8004d0c:	f105 0108 	add.w	r1, r5, #8
 8004d10:	eb06 0667 	add.w	r6, r6, r7, asr #1
 8004d14:	f000 f832 	bl	8004d7c <arm_sqrt_q31>
 8004d18:	f105 010c 	add.w	r1, r5, #12
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f000 f82d 	bl	8004d7c <arm_sqrt_q31>
 8004d22:	f1ba 0a01 	subs.w	sl, sl, #1
 8004d26:	f104 0420 	add.w	r4, r4, #32
 8004d2a:	f105 0510 	add.w	r5, r5, #16
 8004d2e:	d1ba      	bne.n	8004ca6 <arm_cmplx_mag_q31+0x1e>
 8004d30:	9b00      	ldr	r3, [sp, #0]
 8004d32:	9a02      	ldr	r2, [sp, #8]
 8004d34:	4619      	mov	r1, r3
 8004d36:	9e03      	ldr	r6, [sp, #12]
 8004d38:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	eb06 1602 	add.w	r6, r6, r2, lsl #4
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	f013 0503 	ands.w	r5, r3, #3
 8004d48:	d015      	beq.n	8004d76 <arm_cmplx_mag_q31+0xee>
 8004d4a:	9c00      	ldr	r4, [sp, #0]
 8004d4c:	3408      	adds	r4, #8
 8004d4e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004d52:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004d56:	fb80 0100 	smull	r0, r1, r0, r0
 8004d5a:	fb82 2302 	smull	r2, r3, r2, r2
 8004d5e:	1048      	asrs	r0, r1, #1
 8004d60:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8004d64:	4631      	mov	r1, r6
 8004d66:	f000 f809 	bl	8004d7c <arm_sqrt_q31>
 8004d6a:	3d01      	subs	r5, #1
 8004d6c:	f106 0604 	add.w	r6, r6, #4
 8004d70:	f104 0408 	add.w	r4, r4, #8
 8004d74:	d1eb      	bne.n	8004d4e <arm_cmplx_mag_q31+0xc6>
 8004d76:	b005      	add	sp, #20
 8004d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004d7c <arm_sqrt_q31>:
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	dd71      	ble.n	8004e64 <arm_sqrt_q31+0xe8>
 8004d80:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8004d84:	fab0 f580 	clz	r5, r0
 8004d88:	1e6e      	subs	r6, r5, #1
 8004d8a:	f016 0701 	ands.w	r7, r6, #1
 8004d8e:	bf1a      	itte	ne
 8004d90:	1eab      	subne	r3, r5, #2
 8004d92:	fa00 f403 	lslne.w	r4, r0, r3
 8004d96:	fa00 f406 	lsleq.w	r4, r0, r6
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4688      	mov	r8, r1
 8004d9e:	f7fc f841 	bl	8000e24 <__aeabi_i2f>
 8004da2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8004da6:	f7fb fa3b 	bl	8000220 <__aeabi_fmul>
 8004daa:	1043      	asrs	r3, r0, #1
 8004dac:	4830      	ldr	r0, [pc, #192]	; (8004e70 <arm_sqrt_q31+0xf4>)
 8004dae:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8004db2:	1ac0      	subs	r0, r0, r3
 8004db4:	f7fb fa34 	bl	8000220 <__aeabi_fmul>
 8004db8:	f7fc f888 	bl	8000ecc <__aeabi_f2iz>
 8004dbc:	fb80 ab00 	smull	sl, fp, r0, r0
 8004dc0:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8004dc4:	ea4f 0e64 	mov.w	lr, r4, asr #1
 8004dc8:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 8004dcc:	fb82 230e 	smull	r2, r3, r2, lr
 8004dd0:	0fd2      	lsrs	r2, r2, #31
 8004dd2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8004dd6:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004dda:	fb80 0102 	smull	r0, r1, r0, r2
 8004dde:	0fc2      	lsrs	r2, r0, #31
 8004de0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004de4:	0093      	lsls	r3, r2, #2
 8004de6:	fb83 ab03 	smull	sl, fp, r3, r3
 8004dea:	ea4f 70da 	mov.w	r0, sl, lsr #31
 8004dee:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
 8004df2:	fb8e 0100 	smull	r0, r1, lr, r0
 8004df6:	0fc2      	lsrs	r2, r0, #31
 8004df8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004dfc:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e00:	fb83 2302 	smull	r2, r3, r3, r2
 8004e04:	0fd2      	lsrs	r2, r2, #31
 8004e06:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8004e0a:	0093      	lsls	r3, r2, #2
 8004e0c:	fb83 0103 	smull	r0, r1, r3, r3
 8004e10:	0fc0      	lsrs	r0, r0, #31
 8004e12:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 8004e16:	fb8e 0100 	smull	r0, r1, lr, r0
 8004e1a:	0fc2      	lsrs	r2, r0, #31
 8004e1c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004e20:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8004e24:	fb83 2302 	smull	r2, r3, r3, r2
 8004e28:	0fd0      	lsrs	r0, r2, #31
 8004e2a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8004e2e:	0080      	lsls	r0, r0, #2
 8004e30:	fb84 0100 	smull	r0, r1, r4, r0
 8004e34:	0fc3      	lsrs	r3, r0, #31
 8004e36:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	b157      	cbz	r7, 8004e54 <arm_sqrt_q31+0xd8>
 8004e3e:	3d02      	subs	r5, #2
 8004e40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e44:	106d      	asrs	r5, r5, #1
 8004e46:	412b      	asrs	r3, r5
 8004e48:	f8c8 3000 	str.w	r3, [r8]
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	b240      	sxtb	r0, r0
 8004e50:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8004e54:	1076      	asrs	r6, r6, #1
 8004e56:	4133      	asrs	r3, r6
 8004e58:	f8c8 3000 	str.w	r3, [r8]
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	b240      	sxtb	r0, r0
 8004e60:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8004e64:	2300      	movs	r3, #0
 8004e66:	20ff      	movs	r0, #255	; 0xff
 8004e68:	600b      	str	r3, [r1, #0]
 8004e6a:	b240      	sxtb	r0, r0
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	5f3759df 	.word	0x5f3759df

08004e74 <arm_scale_q31>:
 8004e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	b089      	sub	sp, #36	; 0x24
 8004e7a:	3201      	adds	r2, #1
 8004e7c:	9305      	str	r3, [sp, #20]
 8004e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e80:	fa4f fc82 	sxtb.w	ip, r2
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	f1bc 0f00 	cmp.w	ip, #0
 8004e8a:	4683      	mov	fp, r0
 8004e8c:	468a      	mov	sl, r1
 8004e8e:	9306      	str	r3, [sp, #24]
 8004e90:	da48      	bge.n	8004f24 <arm_scale_q31+0xb0>
 8004e92:	b39b      	cbz	r3, 8004efc <arm_scale_q31+0x88>
 8004e94:	9b05      	ldr	r3, [sp, #20]
 8004e96:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004e9a:	f1cc 0100 	rsb	r1, ip, #0
 8004e9e:	f100 0210 	add.w	r2, r0, #16
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8004ea8:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8004eac:	fb86 670a 	smull	r6, r7, r6, sl
 8004eb0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004eb4:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8004eb8:	fb85 890a 	smull	r8, r9, r5, sl
 8004ebc:	fb84 450a 	smull	r4, r5, r4, sl
 8004ec0:	fa47 f401 	asr.w	r4, r7, r1
 8004ec4:	fb80 670a 	smull	r6, r7, r0, sl
 8004ec8:	410d      	asrs	r5, r1
 8004eca:	fa49 f601 	asr.w	r6, r9, r1
 8004ece:	fa47 f001 	asr.w	r0, r7, r1
 8004ed2:	f1be 0e01 	subs.w	lr, lr, #1
 8004ed6:	f843 4c10 	str.w	r4, [r3, #-16]
 8004eda:	f843 6c0c 	str.w	r6, [r3, #-12]
 8004ede:	f843 5c08 	str.w	r5, [r3, #-8]
 8004ee2:	f843 0c04 	str.w	r0, [r3, #-4]
 8004ee6:	f102 0210 	add.w	r2, r2, #16
 8004eea:	f103 0310 	add.w	r3, r3, #16
 8004eee:	d1d9      	bne.n	8004ea4 <arm_scale_q31+0x30>
 8004ef0:	9b06      	ldr	r3, [sp, #24]
 8004ef2:	9a05      	ldr	r2, [sp, #20]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	441a      	add	r2, r3
 8004ef8:	449b      	add	fp, r3
 8004efa:	9205      	str	r2, [sp, #20]
 8004efc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004efe:	f013 0103 	ands.w	r1, r3, #3
 8004f02:	d00c      	beq.n	8004f1e <arm_scale_q31+0xaa>
 8004f04:	9805      	ldr	r0, [sp, #20]
 8004f06:	f1cc 0c00 	rsb	ip, ip, #0
 8004f0a:	f85b 2b04 	ldr.w	r2, [fp], #4
 8004f0e:	3901      	subs	r1, #1
 8004f10:	fb82 230a 	smull	r2, r3, r2, sl
 8004f14:	fa43 f30c 	asr.w	r3, r3, ip
 8004f18:	f840 3b04 	str.w	r3, [r0], #4
 8004f1c:	d1f5      	bne.n	8004f0a <arm_scale_q31+0x96>
 8004f1e:	b009      	add	sp, #36	; 0x24
 8004f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d060      	beq.n	8004fea <arm_scale_q31+0x176>
 8004f28:	9304      	str	r3, [sp, #16]
 8004f2a:	9b05      	ldr	r3, [sp, #20]
 8004f2c:	f100 0210 	add.w	r2, r0, #16
 8004f30:	f103 0910 	add.w	r9, r3, #16
 8004f34:	9201      	str	r2, [sp, #4]
 8004f36:	9007      	str	r0, [sp, #28]
 8004f38:	9b01      	ldr	r3, [sp, #4]
 8004f3a:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8004f3e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8004f42:	fb86 670a 	smull	r6, r7, r6, sl
 8004f46:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8004f4a:	fb84 450a 	smull	r4, r5, r4, sl
 8004f4e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004f52:	fb80 010a 	smull	r0, r1, r0, sl
 8004f56:	17fe      	asrs	r6, r7, #31
 8004f58:	fb83 230a 	smull	r2, r3, r3, sl
 8004f5c:	f086 4e00 	eor.w	lr, r6, #2147483648	; 0x80000000
 8004f60:	ea6f 0e0e 	mvn.w	lr, lr
 8004f64:	17ec      	asrs	r4, r5, #31
 8004f66:	17c8      	asrs	r0, r1, #31
 8004f68:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8004f6c:	43e4      	mvns	r4, r4
 8004f6e:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8004f72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f76:	43c0      	mvns	r0, r0
 8004f78:	17db      	asrs	r3, r3, #31
 8004f7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	fa07 f60c 	lsl.w	r6, r7, ip
 8004f84:	fa46 f80c 	asr.w	r8, r6, ip
 8004f88:	45b8      	cmp	r8, r7
 8004f8a:	bf18      	it	ne
 8004f8c:	4676      	movne	r6, lr
 8004f8e:	fa05 f80c 	lsl.w	r8, r5, ip
 8004f92:	fa01 fe0c 	lsl.w	lr, r1, ip
 8004f96:	9f03      	ldr	r7, [sp, #12]
 8004f98:	fa48 fb0c 	asr.w	fp, r8, ip
 8004f9c:	45ab      	cmp	fp, r5
 8004f9e:	bf08      	it	eq
 8004fa0:	4644      	moveq	r4, r8
 8004fa2:	fa4e f50c 	asr.w	r5, lr, ip
 8004fa6:	428d      	cmp	r5, r1
 8004fa8:	bf08      	it	eq
 8004faa:	4670      	moveq	r0, lr
 8004fac:	fa07 f70c 	lsl.w	r7, r7, ip
 8004fb0:	9d03      	ldr	r5, [sp, #12]
 8004fb2:	fa47 f10c 	asr.w	r1, r7, ip
 8004fb6:	42a9      	cmp	r1, r5
 8004fb8:	bf08      	it	eq
 8004fba:	463b      	moveq	r3, r7
 8004fbc:	9a01      	ldr	r2, [sp, #4]
 8004fbe:	e909 0009 	stmdb	r9, {r0, r3}
 8004fc2:	9b04      	ldr	r3, [sp, #16]
 8004fc4:	3210      	adds	r2, #16
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	f849 6c10 	str.w	r6, [r9, #-16]
 8004fcc:	f849 4c0c 	str.w	r4, [r9, #-12]
 8004fd0:	9201      	str	r2, [sp, #4]
 8004fd2:	f109 0910 	add.w	r9, r9, #16
 8004fd6:	9304      	str	r3, [sp, #16]
 8004fd8:	d1ae      	bne.n	8004f38 <arm_scale_q31+0xc4>
 8004fda:	9b06      	ldr	r3, [sp, #24]
 8004fdc:	9a05      	ldr	r2, [sp, #20]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	449b      	add	fp, r3
 8004fe8:	9205      	str	r2, [sp, #20]
 8004fea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fec:	f013 0003 	ands.w	r0, r3, #3
 8004ff0:	d095      	beq.n	8004f1e <arm_scale_q31+0xaa>
 8004ff2:	9905      	ldr	r1, [sp, #20]
 8004ff4:	f85b 4b04 	ldr.w	r4, [fp], #4
 8004ff8:	fb84 450a 	smull	r4, r5, r4, sl
 8004ffc:	17eb      	asrs	r3, r5, #31
 8004ffe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005002:	43db      	mvns	r3, r3
 8005004:	fa05 f20c 	lsl.w	r2, r5, ip
 8005008:	fa42 f40c 	asr.w	r4, r2, ip
 800500c:	42ac      	cmp	r4, r5
 800500e:	bf08      	it	eq
 8005010:	4613      	moveq	r3, r2
 8005012:	3801      	subs	r0, #1
 8005014:	f841 3b04 	str.w	r3, [r1], #4
 8005018:	d1ec      	bne.n	8004ff4 <arm_scale_q31+0x180>
 800501a:	b009      	add	sp, #36	; 0x24
 800501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005020 <__errno>:
 8005020:	4b01      	ldr	r3, [pc, #4]	; (8005028 <__errno+0x8>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000010 	.word	0x20000010

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	2600      	movs	r6, #0
 8005030:	4d0c      	ldr	r5, [pc, #48]	; (8005064 <__libc_init_array+0x38>)
 8005032:	4c0d      	ldr	r4, [pc, #52]	; (8005068 <__libc_init_array+0x3c>)
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	42a6      	cmp	r6, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	f002 fd30 	bl	8007aa0 <_init>
 8005040:	2600      	movs	r6, #0
 8005042:	4d0a      	ldr	r5, [pc, #40]	; (800506c <__libc_init_array+0x40>)
 8005044:	4c0a      	ldr	r4, [pc, #40]	; (8005070 <__libc_init_array+0x44>)
 8005046:	1b64      	subs	r4, r4, r5
 8005048:	10a4      	asrs	r4, r4, #2
 800504a:	42a6      	cmp	r6, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f855 3b04 	ldr.w	r3, [r5], #4
 8005054:	4798      	blx	r3
 8005056:	3601      	adds	r6, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f855 3b04 	ldr.w	r3, [r5], #4
 800505e:	4798      	blx	r3
 8005060:	3601      	adds	r6, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	080085fc 	.word	0x080085fc
 8005068:	080085fc 	.word	0x080085fc
 800506c:	080085fc 	.word	0x080085fc
 8005070:	08008600 	.word	0x08008600

08005074 <memset>:
 8005074:	4603      	mov	r3, r0
 8005076:	4402      	add	r2, r0
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <memset+0xa>
 800507c:	4770      	bx	lr
 800507e:	f803 1b01 	strb.w	r1, [r3], #1
 8005082:	e7f9      	b.n	8005078 <memset+0x4>

08005084 <__cvt>:
 8005084:	2b00      	cmp	r3, #0
 8005086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508a:	461f      	mov	r7, r3
 800508c:	bfbb      	ittet	lt
 800508e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005092:	461f      	movlt	r7, r3
 8005094:	2300      	movge	r3, #0
 8005096:	232d      	movlt	r3, #45	; 0x2d
 8005098:	b088      	sub	sp, #32
 800509a:	4614      	mov	r4, r2
 800509c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800509e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050a0:	7013      	strb	r3, [r2, #0]
 80050a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050a8:	f023 0820 	bic.w	r8, r3, #32
 80050ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050b0:	d005      	beq.n	80050be <__cvt+0x3a>
 80050b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050b6:	d100      	bne.n	80050ba <__cvt+0x36>
 80050b8:	3501      	adds	r5, #1
 80050ba:	2302      	movs	r3, #2
 80050bc:	e000      	b.n	80050c0 <__cvt+0x3c>
 80050be:	2303      	movs	r3, #3
 80050c0:	aa07      	add	r2, sp, #28
 80050c2:	9204      	str	r2, [sp, #16]
 80050c4:	aa06      	add	r2, sp, #24
 80050c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050ca:	e9cd 3500 	strd	r3, r5, [sp]
 80050ce:	4622      	mov	r2, r4
 80050d0:	463b      	mov	r3, r7
 80050d2:	f000 fcc5 	bl	8005a60 <_dtoa_r>
 80050d6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050da:	4606      	mov	r6, r0
 80050dc:	d102      	bne.n	80050e4 <__cvt+0x60>
 80050de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050e0:	07db      	lsls	r3, r3, #31
 80050e2:	d522      	bpl.n	800512a <__cvt+0xa6>
 80050e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050e8:	eb06 0905 	add.w	r9, r6, r5
 80050ec:	d110      	bne.n	8005110 <__cvt+0x8c>
 80050ee:	7833      	ldrb	r3, [r6, #0]
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d10a      	bne.n	800510a <__cvt+0x86>
 80050f4:	2200      	movs	r2, #0
 80050f6:	2300      	movs	r3, #0
 80050f8:	4620      	mov	r0, r4
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb fd68 	bl	8000bd0 <__aeabi_dcmpeq>
 8005100:	b918      	cbnz	r0, 800510a <__cvt+0x86>
 8005102:	f1c5 0501 	rsb	r5, r5, #1
 8005106:	f8ca 5000 	str.w	r5, [sl]
 800510a:	f8da 3000 	ldr.w	r3, [sl]
 800510e:	4499      	add	r9, r3
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	4620      	mov	r0, r4
 8005116:	4639      	mov	r1, r7
 8005118:	f7fb fd5a 	bl	8000bd0 <__aeabi_dcmpeq>
 800511c:	b108      	cbz	r0, 8005122 <__cvt+0x9e>
 800511e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005122:	2230      	movs	r2, #48	; 0x30
 8005124:	9b07      	ldr	r3, [sp, #28]
 8005126:	454b      	cmp	r3, r9
 8005128:	d307      	bcc.n	800513a <__cvt+0xb6>
 800512a:	4630      	mov	r0, r6
 800512c:	9b07      	ldr	r3, [sp, #28]
 800512e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005130:	1b9b      	subs	r3, r3, r6
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	b008      	add	sp, #32
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	1c59      	adds	r1, r3, #1
 800513c:	9107      	str	r1, [sp, #28]
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e7f0      	b.n	8005124 <__cvt+0xa0>

08005142 <__exponent>:
 8005142:	4603      	mov	r3, r0
 8005144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005146:	2900      	cmp	r1, #0
 8005148:	f803 2b02 	strb.w	r2, [r3], #2
 800514c:	bfb6      	itet	lt
 800514e:	222d      	movlt	r2, #45	; 0x2d
 8005150:	222b      	movge	r2, #43	; 0x2b
 8005152:	4249      	neglt	r1, r1
 8005154:	2909      	cmp	r1, #9
 8005156:	7042      	strb	r2, [r0, #1]
 8005158:	dd2b      	ble.n	80051b2 <__exponent+0x70>
 800515a:	f10d 0407 	add.w	r4, sp, #7
 800515e:	46a4      	mov	ip, r4
 8005160:	270a      	movs	r7, #10
 8005162:	fb91 f6f7 	sdiv	r6, r1, r7
 8005166:	460a      	mov	r2, r1
 8005168:	46a6      	mov	lr, r4
 800516a:	fb07 1516 	mls	r5, r7, r6, r1
 800516e:	2a63      	cmp	r2, #99	; 0x63
 8005170:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005174:	4631      	mov	r1, r6
 8005176:	f104 34ff 	add.w	r4, r4, #4294967295
 800517a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800517e:	dcf0      	bgt.n	8005162 <__exponent+0x20>
 8005180:	3130      	adds	r1, #48	; 0x30
 8005182:	f1ae 0502 	sub.w	r5, lr, #2
 8005186:	f804 1c01 	strb.w	r1, [r4, #-1]
 800518a:	4629      	mov	r1, r5
 800518c:	1c44      	adds	r4, r0, #1
 800518e:	4561      	cmp	r1, ip
 8005190:	d30a      	bcc.n	80051a8 <__exponent+0x66>
 8005192:	f10d 0209 	add.w	r2, sp, #9
 8005196:	eba2 020e 	sub.w	r2, r2, lr
 800519a:	4565      	cmp	r5, ip
 800519c:	bf88      	it	hi
 800519e:	2200      	movhi	r2, #0
 80051a0:	4413      	add	r3, r2
 80051a2:	1a18      	subs	r0, r3, r0
 80051a4:	b003      	add	sp, #12
 80051a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ac:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051b0:	e7ed      	b.n	800518e <__exponent+0x4c>
 80051b2:	2330      	movs	r3, #48	; 0x30
 80051b4:	3130      	adds	r1, #48	; 0x30
 80051b6:	7083      	strb	r3, [r0, #2]
 80051b8:	70c1      	strb	r1, [r0, #3]
 80051ba:	1d03      	adds	r3, r0, #4
 80051bc:	e7f1      	b.n	80051a2 <__exponent+0x60>
	...

080051c0 <_printf_float>:
 80051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	b091      	sub	sp, #68	; 0x44
 80051c6:	460c      	mov	r4, r1
 80051c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051cc:	4616      	mov	r6, r2
 80051ce:	461f      	mov	r7, r3
 80051d0:	4605      	mov	r5, r0
 80051d2:	f001 fa33 	bl	800663c <_localeconv_r>
 80051d6:	6803      	ldr	r3, [r0, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	9309      	str	r3, [sp, #36]	; 0x24
 80051dc:	f7fb f818 	bl	8000210 <strlen>
 80051e0:	2300      	movs	r3, #0
 80051e2:	930e      	str	r3, [sp, #56]	; 0x38
 80051e4:	f8d8 3000 	ldr.w	r3, [r8]
 80051e8:	900a      	str	r0, [sp, #40]	; 0x28
 80051ea:	3307      	adds	r3, #7
 80051ec:	f023 0307 	bic.w	r3, r3, #7
 80051f0:	f103 0208 	add.w	r2, r3, #8
 80051f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051f8:	f8d4 b000 	ldr.w	fp, [r4]
 80051fc:	f8c8 2000 	str.w	r2, [r8]
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005208:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800520c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005210:	930b      	str	r3, [sp, #44]	; 0x2c
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	4640      	mov	r0, r8
 8005218:	4b9c      	ldr	r3, [pc, #624]	; (800548c <_printf_float+0x2cc>)
 800521a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800521c:	f7fb fd0a 	bl	8000c34 <__aeabi_dcmpun>
 8005220:	bb70      	cbnz	r0, 8005280 <_printf_float+0xc0>
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	4640      	mov	r0, r8
 8005228:	4b98      	ldr	r3, [pc, #608]	; (800548c <_printf_float+0x2cc>)
 800522a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800522c:	f7fb fce4 	bl	8000bf8 <__aeabi_dcmple>
 8005230:	bb30      	cbnz	r0, 8005280 <_printf_float+0xc0>
 8005232:	2200      	movs	r2, #0
 8005234:	2300      	movs	r3, #0
 8005236:	4640      	mov	r0, r8
 8005238:	4651      	mov	r1, sl
 800523a:	f7fb fcd3 	bl	8000be4 <__aeabi_dcmplt>
 800523e:	b110      	cbz	r0, 8005246 <_printf_float+0x86>
 8005240:	232d      	movs	r3, #45	; 0x2d
 8005242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005246:	4b92      	ldr	r3, [pc, #584]	; (8005490 <_printf_float+0x2d0>)
 8005248:	4892      	ldr	r0, [pc, #584]	; (8005494 <_printf_float+0x2d4>)
 800524a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800524e:	bf94      	ite	ls
 8005250:	4698      	movls	r8, r3
 8005252:	4680      	movhi	r8, r0
 8005254:	2303      	movs	r3, #3
 8005256:	f04f 0a00 	mov.w	sl, #0
 800525a:	6123      	str	r3, [r4, #16]
 800525c:	f02b 0304 	bic.w	r3, fp, #4
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	4633      	mov	r3, r6
 8005264:	4621      	mov	r1, r4
 8005266:	4628      	mov	r0, r5
 8005268:	9700      	str	r7, [sp, #0]
 800526a:	aa0f      	add	r2, sp, #60	; 0x3c
 800526c:	f000 f9d4 	bl	8005618 <_printf_common>
 8005270:	3001      	adds	r0, #1
 8005272:	f040 8090 	bne.w	8005396 <_printf_float+0x1d6>
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	b011      	add	sp, #68	; 0x44
 800527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005280:	4642      	mov	r2, r8
 8005282:	4653      	mov	r3, sl
 8005284:	4640      	mov	r0, r8
 8005286:	4651      	mov	r1, sl
 8005288:	f7fb fcd4 	bl	8000c34 <__aeabi_dcmpun>
 800528c:	b148      	cbz	r0, 80052a2 <_printf_float+0xe2>
 800528e:	f1ba 0f00 	cmp.w	sl, #0
 8005292:	bfb8      	it	lt
 8005294:	232d      	movlt	r3, #45	; 0x2d
 8005296:	4880      	ldr	r0, [pc, #512]	; (8005498 <_printf_float+0x2d8>)
 8005298:	bfb8      	it	lt
 800529a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800529e:	4b7f      	ldr	r3, [pc, #508]	; (800549c <_printf_float+0x2dc>)
 80052a0:	e7d3      	b.n	800524a <_printf_float+0x8a>
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	d142      	bne.n	8005332 <_printf_float+0x172>
 80052ac:	2306      	movs	r3, #6
 80052ae:	6063      	str	r3, [r4, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	9206      	str	r2, [sp, #24]
 80052b4:	aa0e      	add	r2, sp, #56	; 0x38
 80052b6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052ba:	aa0d      	add	r2, sp, #52	; 0x34
 80052bc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052c0:	9203      	str	r2, [sp, #12]
 80052c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	4642      	mov	r2, r8
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	4628      	mov	r0, r5
 80052d4:	4653      	mov	r3, sl
 80052d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80052d8:	f7ff fed4 	bl	8005084 <__cvt>
 80052dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052de:	4680      	mov	r8, r0
 80052e0:	2947      	cmp	r1, #71	; 0x47
 80052e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052e4:	d108      	bne.n	80052f8 <_printf_float+0x138>
 80052e6:	1cc8      	adds	r0, r1, #3
 80052e8:	db02      	blt.n	80052f0 <_printf_float+0x130>
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	4299      	cmp	r1, r3
 80052ee:	dd40      	ble.n	8005372 <_printf_float+0x1b2>
 80052f0:	f1a9 0902 	sub.w	r9, r9, #2
 80052f4:	fa5f f989 	uxtb.w	r9, r9
 80052f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052fc:	d81f      	bhi.n	800533e <_printf_float+0x17e>
 80052fe:	464a      	mov	r2, r9
 8005300:	3901      	subs	r1, #1
 8005302:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005306:	910d      	str	r1, [sp, #52]	; 0x34
 8005308:	f7ff ff1b 	bl	8005142 <__exponent>
 800530c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530e:	4682      	mov	sl, r0
 8005310:	1813      	adds	r3, r2, r0
 8005312:	2a01      	cmp	r2, #1
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	dc02      	bgt.n	800531e <_printf_float+0x15e>
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	07d2      	lsls	r2, r2, #31
 800531c:	d501      	bpl.n	8005322 <_printf_float+0x162>
 800531e:	3301      	adds	r3, #1
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005326:	2b00      	cmp	r3, #0
 8005328:	d09b      	beq.n	8005262 <_printf_float+0xa2>
 800532a:	232d      	movs	r3, #45	; 0x2d
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005330:	e797      	b.n	8005262 <_printf_float+0xa2>
 8005332:	2947      	cmp	r1, #71	; 0x47
 8005334:	d1bc      	bne.n	80052b0 <_printf_float+0xf0>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1ba      	bne.n	80052b0 <_printf_float+0xf0>
 800533a:	2301      	movs	r3, #1
 800533c:	e7b7      	b.n	80052ae <_printf_float+0xee>
 800533e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005342:	d118      	bne.n	8005376 <_printf_float+0x1b6>
 8005344:	2900      	cmp	r1, #0
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	dd0b      	ble.n	8005362 <_printf_float+0x1a2>
 800534a:	6121      	str	r1, [r4, #16]
 800534c:	b913      	cbnz	r3, 8005354 <_printf_float+0x194>
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	07d0      	lsls	r0, r2, #31
 8005352:	d502      	bpl.n	800535a <_printf_float+0x19a>
 8005354:	3301      	adds	r3, #1
 8005356:	440b      	add	r3, r1
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	f04f 0a00 	mov.w	sl, #0
 800535e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005360:	e7df      	b.n	8005322 <_printf_float+0x162>
 8005362:	b913      	cbnz	r3, 800536a <_printf_float+0x1aa>
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	07d2      	lsls	r2, r2, #31
 8005368:	d501      	bpl.n	800536e <_printf_float+0x1ae>
 800536a:	3302      	adds	r3, #2
 800536c:	e7f4      	b.n	8005358 <_printf_float+0x198>
 800536e:	2301      	movs	r3, #1
 8005370:	e7f2      	b.n	8005358 <_printf_float+0x198>
 8005372:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005378:	4299      	cmp	r1, r3
 800537a:	db05      	blt.n	8005388 <_printf_float+0x1c8>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	6121      	str	r1, [r4, #16]
 8005380:	07d8      	lsls	r0, r3, #31
 8005382:	d5ea      	bpl.n	800535a <_printf_float+0x19a>
 8005384:	1c4b      	adds	r3, r1, #1
 8005386:	e7e7      	b.n	8005358 <_printf_float+0x198>
 8005388:	2900      	cmp	r1, #0
 800538a:	bfcc      	ite	gt
 800538c:	2201      	movgt	r2, #1
 800538e:	f1c1 0202 	rsble	r2, r1, #2
 8005392:	4413      	add	r3, r2
 8005394:	e7e0      	b.n	8005358 <_printf_float+0x198>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	055a      	lsls	r2, r3, #21
 800539a:	d407      	bmi.n	80053ac <_printf_float+0x1ec>
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	4642      	mov	r2, r8
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	d12b      	bne.n	8005402 <_printf_float+0x242>
 80053aa:	e764      	b.n	8005276 <_printf_float+0xb6>
 80053ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053b0:	f240 80dd 	bls.w	800556e <_printf_float+0x3ae>
 80053b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053b8:	2200      	movs	r2, #0
 80053ba:	2300      	movs	r3, #0
 80053bc:	f7fb fc08 	bl	8000bd0 <__aeabi_dcmpeq>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d033      	beq.n	800542c <_printf_float+0x26c>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	4a35      	ldr	r2, [pc, #212]	; (80054a0 <_printf_float+0x2e0>)
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f af51 	beq.w	8005276 <_printf_float+0xb6>
 80053d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053d8:	429a      	cmp	r2, r3
 80053da:	db02      	blt.n	80053e2 <_printf_float+0x222>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07d8      	lsls	r0, r3, #31
 80053e0:	d50f      	bpl.n	8005402 <_printf_float+0x242>
 80053e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	f43f af42 	beq.w	8005276 <_printf_float+0xb6>
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	f104 091a 	add.w	r9, r4, #26
 80053fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053fc:	3b01      	subs	r3, #1
 80053fe:	4543      	cmp	r3, r8
 8005400:	dc09      	bgt.n	8005416 <_printf_float+0x256>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	079b      	lsls	r3, r3, #30
 8005406:	f100 8102 	bmi.w	800560e <_printf_float+0x44e>
 800540a:	68e0      	ldr	r0, [r4, #12]
 800540c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800540e:	4298      	cmp	r0, r3
 8005410:	bfb8      	it	lt
 8005412:	4618      	movlt	r0, r3
 8005414:	e731      	b.n	800527a <_printf_float+0xba>
 8005416:	2301      	movs	r3, #1
 8005418:	464a      	mov	r2, r9
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	f43f af28 	beq.w	8005276 <_printf_float+0xb6>
 8005426:	f108 0801 	add.w	r8, r8, #1
 800542a:	e7e6      	b.n	80053fa <_printf_float+0x23a>
 800542c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	dc38      	bgt.n	80054a4 <_printf_float+0x2e4>
 8005432:	2301      	movs	r3, #1
 8005434:	4631      	mov	r1, r6
 8005436:	4628      	mov	r0, r5
 8005438:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <_printf_float+0x2e0>)
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f af1a 	beq.w	8005276 <_printf_float+0xb6>
 8005442:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005446:	4313      	orrs	r3, r2
 8005448:	d102      	bne.n	8005450 <_printf_float+0x290>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	07d9      	lsls	r1, r3, #31
 800544e:	d5d8      	bpl.n	8005402 <_printf_float+0x242>
 8005450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005454:	4631      	mov	r1, r6
 8005456:	4628      	mov	r0, r5
 8005458:	47b8      	blx	r7
 800545a:	3001      	adds	r0, #1
 800545c:	f43f af0b 	beq.w	8005276 <_printf_float+0xb6>
 8005460:	f04f 0900 	mov.w	r9, #0
 8005464:	f104 0a1a 	add.w	sl, r4, #26
 8005468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800546a:	425b      	negs	r3, r3
 800546c:	454b      	cmp	r3, r9
 800546e:	dc01      	bgt.n	8005474 <_printf_float+0x2b4>
 8005470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005472:	e794      	b.n	800539e <_printf_float+0x1de>
 8005474:	2301      	movs	r3, #1
 8005476:	4652      	mov	r2, sl
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f aef9 	beq.w	8005276 <_printf_float+0xb6>
 8005484:	f109 0901 	add.w	r9, r9, #1
 8005488:	e7ee      	b.n	8005468 <_printf_float+0x2a8>
 800548a:	bf00      	nop
 800548c:	7fefffff 	.word	0x7fefffff
 8005490:	08008224 	.word	0x08008224
 8005494:	08008228 	.word	0x08008228
 8005498:	08008230 	.word	0x08008230
 800549c:	0800822c 	.word	0x0800822c
 80054a0:	08008234 	.word	0x08008234
 80054a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054a8:	429a      	cmp	r2, r3
 80054aa:	bfa8      	it	ge
 80054ac:	461a      	movge	r2, r3
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	4691      	mov	r9, r2
 80054b2:	dc37      	bgt.n	8005524 <_printf_float+0x364>
 80054b4:	f04f 0b00 	mov.w	fp, #0
 80054b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054bc:	f104 021a 	add.w	r2, r4, #26
 80054c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054c4:	ebaa 0309 	sub.w	r3, sl, r9
 80054c8:	455b      	cmp	r3, fp
 80054ca:	dc33      	bgt.n	8005534 <_printf_float+0x374>
 80054cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054d0:	429a      	cmp	r2, r3
 80054d2:	db3b      	blt.n	800554c <_printf_float+0x38c>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	07da      	lsls	r2, r3, #31
 80054d8:	d438      	bmi.n	800554c <_printf_float+0x38c>
 80054da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054de:	eba3 020a 	sub.w	r2, r3, sl
 80054e2:	eba3 0901 	sub.w	r9, r3, r1
 80054e6:	4591      	cmp	r9, r2
 80054e8:	bfa8      	it	ge
 80054ea:	4691      	movge	r9, r2
 80054ec:	f1b9 0f00 	cmp.w	r9, #0
 80054f0:	dc34      	bgt.n	800555c <_printf_float+0x39c>
 80054f2:	f04f 0800 	mov.w	r8, #0
 80054f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054fa:	f104 0a1a 	add.w	sl, r4, #26
 80054fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	eba3 0309 	sub.w	r3, r3, r9
 8005508:	4543      	cmp	r3, r8
 800550a:	f77f af7a 	ble.w	8005402 <_printf_float+0x242>
 800550e:	2301      	movs	r3, #1
 8005510:	4652      	mov	r2, sl
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	f43f aeac 	beq.w	8005276 <_printf_float+0xb6>
 800551e:	f108 0801 	add.w	r8, r8, #1
 8005522:	e7ec      	b.n	80054fe <_printf_float+0x33e>
 8005524:	4613      	mov	r3, r2
 8005526:	4631      	mov	r1, r6
 8005528:	4642      	mov	r2, r8
 800552a:	4628      	mov	r0, r5
 800552c:	47b8      	blx	r7
 800552e:	3001      	adds	r0, #1
 8005530:	d1c0      	bne.n	80054b4 <_printf_float+0x2f4>
 8005532:	e6a0      	b.n	8005276 <_printf_float+0xb6>
 8005534:	2301      	movs	r3, #1
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	920b      	str	r2, [sp, #44]	; 0x2c
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	f43f ae99 	beq.w	8005276 <_printf_float+0xb6>
 8005544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005546:	f10b 0b01 	add.w	fp, fp, #1
 800554a:	e7b9      	b.n	80054c0 <_printf_float+0x300>
 800554c:	4631      	mov	r1, r6
 800554e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005552:	4628      	mov	r0, r5
 8005554:	47b8      	blx	r7
 8005556:	3001      	adds	r0, #1
 8005558:	d1bf      	bne.n	80054da <_printf_float+0x31a>
 800555a:	e68c      	b.n	8005276 <_printf_float+0xb6>
 800555c:	464b      	mov	r3, r9
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	eb08 020a 	add.w	r2, r8, sl
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	d1c2      	bne.n	80054f2 <_printf_float+0x332>
 800556c:	e683      	b.n	8005276 <_printf_float+0xb6>
 800556e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005570:	2a01      	cmp	r2, #1
 8005572:	dc01      	bgt.n	8005578 <_printf_float+0x3b8>
 8005574:	07db      	lsls	r3, r3, #31
 8005576:	d537      	bpl.n	80055e8 <_printf_float+0x428>
 8005578:	2301      	movs	r3, #1
 800557a:	4642      	mov	r2, r8
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f ae77 	beq.w	8005276 <_printf_float+0xb6>
 8005588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	47b8      	blx	r7
 8005592:	3001      	adds	r0, #1
 8005594:	f43f ae6f 	beq.w	8005276 <_printf_float+0xb6>
 8005598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800559c:	2200      	movs	r2, #0
 800559e:	2300      	movs	r3, #0
 80055a0:	f7fb fb16 	bl	8000bd0 <__aeabi_dcmpeq>
 80055a4:	b9d8      	cbnz	r0, 80055de <_printf_float+0x41e>
 80055a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055a8:	f108 0201 	add.w	r2, r8, #1
 80055ac:	3b01      	subs	r3, #1
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	d10e      	bne.n	80055d6 <_printf_float+0x416>
 80055b8:	e65d      	b.n	8005276 <_printf_float+0xb6>
 80055ba:	2301      	movs	r3, #1
 80055bc:	464a      	mov	r2, r9
 80055be:	4631      	mov	r1, r6
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b8      	blx	r7
 80055c4:	3001      	adds	r0, #1
 80055c6:	f43f ae56 	beq.w	8005276 <_printf_float+0xb6>
 80055ca:	f108 0801 	add.w	r8, r8, #1
 80055ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d0:	3b01      	subs	r3, #1
 80055d2:	4543      	cmp	r3, r8
 80055d4:	dcf1      	bgt.n	80055ba <_printf_float+0x3fa>
 80055d6:	4653      	mov	r3, sl
 80055d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055dc:	e6e0      	b.n	80053a0 <_printf_float+0x1e0>
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	f104 091a 	add.w	r9, r4, #26
 80055e6:	e7f2      	b.n	80055ce <_printf_float+0x40e>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4642      	mov	r2, r8
 80055ec:	e7df      	b.n	80055ae <_printf_float+0x3ee>
 80055ee:	2301      	movs	r3, #1
 80055f0:	464a      	mov	r2, r9
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f ae3c 	beq.w	8005276 <_printf_float+0xb6>
 80055fe:	f108 0801 	add.w	r8, r8, #1
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005606:	1a5b      	subs	r3, r3, r1
 8005608:	4543      	cmp	r3, r8
 800560a:	dcf0      	bgt.n	80055ee <_printf_float+0x42e>
 800560c:	e6fd      	b.n	800540a <_printf_float+0x24a>
 800560e:	f04f 0800 	mov.w	r8, #0
 8005612:	f104 0919 	add.w	r9, r4, #25
 8005616:	e7f4      	b.n	8005602 <_printf_float+0x442>

08005618 <_printf_common>:
 8005618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	4616      	mov	r6, r2
 800561e:	4699      	mov	r9, r3
 8005620:	688a      	ldr	r2, [r1, #8]
 8005622:	690b      	ldr	r3, [r1, #16]
 8005624:	4607      	mov	r7, r0
 8005626:	4293      	cmp	r3, r2
 8005628:	bfb8      	it	lt
 800562a:	4613      	movlt	r3, r2
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005632:	460c      	mov	r4, r1
 8005634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005638:	b10a      	cbz	r2, 800563e <_printf_common+0x26>
 800563a:	3301      	adds	r3, #1
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	0699      	lsls	r1, r3, #26
 8005642:	bf42      	ittt	mi
 8005644:	6833      	ldrmi	r3, [r6, #0]
 8005646:	3302      	addmi	r3, #2
 8005648:	6033      	strmi	r3, [r6, #0]
 800564a:	6825      	ldr	r5, [r4, #0]
 800564c:	f015 0506 	ands.w	r5, r5, #6
 8005650:	d106      	bne.n	8005660 <_printf_common+0x48>
 8005652:	f104 0a19 	add.w	sl, r4, #25
 8005656:	68e3      	ldr	r3, [r4, #12]
 8005658:	6832      	ldr	r2, [r6, #0]
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	42ab      	cmp	r3, r5
 800565e:	dc28      	bgt.n	80056b2 <_printf_common+0x9a>
 8005660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005664:	1e13      	subs	r3, r2, #0
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	bf18      	it	ne
 800566a:	2301      	movne	r3, #1
 800566c:	0692      	lsls	r2, r2, #26
 800566e:	d42d      	bmi.n	80056cc <_printf_common+0xb4>
 8005670:	4649      	mov	r1, r9
 8005672:	4638      	mov	r0, r7
 8005674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005678:	47c0      	blx	r8
 800567a:	3001      	adds	r0, #1
 800567c:	d020      	beq.n	80056c0 <_printf_common+0xa8>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	68e5      	ldr	r5, [r4, #12]
 8005682:	f003 0306 	and.w	r3, r3, #6
 8005686:	2b04      	cmp	r3, #4
 8005688:	bf18      	it	ne
 800568a:	2500      	movne	r5, #0
 800568c:	6832      	ldr	r2, [r6, #0]
 800568e:	f04f 0600 	mov.w	r6, #0
 8005692:	68a3      	ldr	r3, [r4, #8]
 8005694:	bf08      	it	eq
 8005696:	1aad      	subeq	r5, r5, r2
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	bf08      	it	eq
 800569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfc4      	itt	gt
 80056a4:	1a9b      	subgt	r3, r3, r2
 80056a6:	18ed      	addgt	r5, r5, r3
 80056a8:	341a      	adds	r4, #26
 80056aa:	42b5      	cmp	r5, r6
 80056ac:	d11a      	bne.n	80056e4 <_printf_common+0xcc>
 80056ae:	2000      	movs	r0, #0
 80056b0:	e008      	b.n	80056c4 <_printf_common+0xac>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4652      	mov	r2, sl
 80056b6:	4649      	mov	r1, r9
 80056b8:	4638      	mov	r0, r7
 80056ba:	47c0      	blx	r8
 80056bc:	3001      	adds	r0, #1
 80056be:	d103      	bne.n	80056c8 <_printf_common+0xb0>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c8:	3501      	adds	r5, #1
 80056ca:	e7c4      	b.n	8005656 <_printf_common+0x3e>
 80056cc:	2030      	movs	r0, #48	; 0x30
 80056ce:	18e1      	adds	r1, r4, r3
 80056d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056da:	4422      	add	r2, r4
 80056dc:	3302      	adds	r3, #2
 80056de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e2:	e7c5      	b.n	8005670 <_printf_common+0x58>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4622      	mov	r2, r4
 80056e8:	4649      	mov	r1, r9
 80056ea:	4638      	mov	r0, r7
 80056ec:	47c0      	blx	r8
 80056ee:	3001      	adds	r0, #1
 80056f0:	d0e6      	beq.n	80056c0 <_printf_common+0xa8>
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7d9      	b.n	80056aa <_printf_common+0x92>
	...

080056f8 <_printf_i>:
 80056f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	7e0f      	ldrb	r7, [r1, #24]
 80056fe:	4691      	mov	r9, r2
 8005700:	2f78      	cmp	r7, #120	; 0x78
 8005702:	4680      	mov	r8, r0
 8005704:	460c      	mov	r4, r1
 8005706:	469a      	mov	sl, r3
 8005708:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800570a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800570e:	d807      	bhi.n	8005720 <_printf_i+0x28>
 8005710:	2f62      	cmp	r7, #98	; 0x62
 8005712:	d80a      	bhi.n	800572a <_printf_i+0x32>
 8005714:	2f00      	cmp	r7, #0
 8005716:	f000 80d9 	beq.w	80058cc <_printf_i+0x1d4>
 800571a:	2f58      	cmp	r7, #88	; 0x58
 800571c:	f000 80a4 	beq.w	8005868 <_printf_i+0x170>
 8005720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005728:	e03a      	b.n	80057a0 <_printf_i+0xa8>
 800572a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800572e:	2b15      	cmp	r3, #21
 8005730:	d8f6      	bhi.n	8005720 <_printf_i+0x28>
 8005732:	a101      	add	r1, pc, #4	; (adr r1, 8005738 <_printf_i+0x40>)
 8005734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005738:	08005791 	.word	0x08005791
 800573c:	080057a5 	.word	0x080057a5
 8005740:	08005721 	.word	0x08005721
 8005744:	08005721 	.word	0x08005721
 8005748:	08005721 	.word	0x08005721
 800574c:	08005721 	.word	0x08005721
 8005750:	080057a5 	.word	0x080057a5
 8005754:	08005721 	.word	0x08005721
 8005758:	08005721 	.word	0x08005721
 800575c:	08005721 	.word	0x08005721
 8005760:	08005721 	.word	0x08005721
 8005764:	080058b3 	.word	0x080058b3
 8005768:	080057d5 	.word	0x080057d5
 800576c:	08005895 	.word	0x08005895
 8005770:	08005721 	.word	0x08005721
 8005774:	08005721 	.word	0x08005721
 8005778:	080058d5 	.word	0x080058d5
 800577c:	08005721 	.word	0x08005721
 8005780:	080057d5 	.word	0x080057d5
 8005784:	08005721 	.word	0x08005721
 8005788:	08005721 	.word	0x08005721
 800578c:	0800589d 	.word	0x0800589d
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	602a      	str	r2, [r5, #0]
 8005798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800579c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0a4      	b.n	80058ee <_printf_i+0x1f6>
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	6829      	ldr	r1, [r5, #0]
 80057a8:	0606      	lsls	r6, r0, #24
 80057aa:	f101 0304 	add.w	r3, r1, #4
 80057ae:	d50a      	bpl.n	80057c6 <_printf_i+0xce>
 80057b0:	680e      	ldr	r6, [r1, #0]
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	da03      	bge.n	80057c0 <_printf_i+0xc8>
 80057b8:	232d      	movs	r3, #45	; 0x2d
 80057ba:	4276      	negs	r6, r6
 80057bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c0:	230a      	movs	r3, #10
 80057c2:	485e      	ldr	r0, [pc, #376]	; (800593c <_printf_i+0x244>)
 80057c4:	e019      	b.n	80057fa <_printf_i+0x102>
 80057c6:	680e      	ldr	r6, [r1, #0]
 80057c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	bf18      	it	ne
 80057d0:	b236      	sxthne	r6, r6
 80057d2:	e7ef      	b.n	80057b4 <_printf_i+0xbc>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	6820      	ldr	r0, [r4, #0]
 80057d8:	1d19      	adds	r1, r3, #4
 80057da:	6029      	str	r1, [r5, #0]
 80057dc:	0601      	lsls	r1, r0, #24
 80057de:	d501      	bpl.n	80057e4 <_printf_i+0xec>
 80057e0:	681e      	ldr	r6, [r3, #0]
 80057e2:	e002      	b.n	80057ea <_printf_i+0xf2>
 80057e4:	0646      	lsls	r6, r0, #25
 80057e6:	d5fb      	bpl.n	80057e0 <_printf_i+0xe8>
 80057e8:	881e      	ldrh	r6, [r3, #0]
 80057ea:	2f6f      	cmp	r7, #111	; 0x6f
 80057ec:	bf0c      	ite	eq
 80057ee:	2308      	moveq	r3, #8
 80057f0:	230a      	movne	r3, #10
 80057f2:	4852      	ldr	r0, [pc, #328]	; (800593c <_printf_i+0x244>)
 80057f4:	2100      	movs	r1, #0
 80057f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fa:	6865      	ldr	r5, [r4, #4]
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	bfa8      	it	ge
 8005800:	6821      	ldrge	r1, [r4, #0]
 8005802:	60a5      	str	r5, [r4, #8]
 8005804:	bfa4      	itt	ge
 8005806:	f021 0104 	bicge.w	r1, r1, #4
 800580a:	6021      	strge	r1, [r4, #0]
 800580c:	b90e      	cbnz	r6, 8005812 <_printf_i+0x11a>
 800580e:	2d00      	cmp	r5, #0
 8005810:	d04d      	beq.n	80058ae <_printf_i+0x1b6>
 8005812:	4615      	mov	r5, r2
 8005814:	fbb6 f1f3 	udiv	r1, r6, r3
 8005818:	fb03 6711 	mls	r7, r3, r1, r6
 800581c:	5dc7      	ldrb	r7, [r0, r7]
 800581e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005822:	4637      	mov	r7, r6
 8005824:	42bb      	cmp	r3, r7
 8005826:	460e      	mov	r6, r1
 8005828:	d9f4      	bls.n	8005814 <_printf_i+0x11c>
 800582a:	2b08      	cmp	r3, #8
 800582c:	d10b      	bne.n	8005846 <_printf_i+0x14e>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	07de      	lsls	r6, r3, #31
 8005832:	d508      	bpl.n	8005846 <_printf_i+0x14e>
 8005834:	6923      	ldr	r3, [r4, #16]
 8005836:	6861      	ldr	r1, [r4, #4]
 8005838:	4299      	cmp	r1, r3
 800583a:	bfde      	ittt	le
 800583c:	2330      	movle	r3, #48	; 0x30
 800583e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005842:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005846:	1b52      	subs	r2, r2, r5
 8005848:	6122      	str	r2, [r4, #16]
 800584a:	464b      	mov	r3, r9
 800584c:	4621      	mov	r1, r4
 800584e:	4640      	mov	r0, r8
 8005850:	f8cd a000 	str.w	sl, [sp]
 8005854:	aa03      	add	r2, sp, #12
 8005856:	f7ff fedf 	bl	8005618 <_printf_common>
 800585a:	3001      	adds	r0, #1
 800585c:	d14c      	bne.n	80058f8 <_printf_i+0x200>
 800585e:	f04f 30ff 	mov.w	r0, #4294967295
 8005862:	b004      	add	sp, #16
 8005864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005868:	4834      	ldr	r0, [pc, #208]	; (800593c <_printf_i+0x244>)
 800586a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800586e:	6829      	ldr	r1, [r5, #0]
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	f851 6b04 	ldr.w	r6, [r1], #4
 8005876:	6029      	str	r1, [r5, #0]
 8005878:	061d      	lsls	r5, r3, #24
 800587a:	d514      	bpl.n	80058a6 <_printf_i+0x1ae>
 800587c:	07df      	lsls	r7, r3, #31
 800587e:	bf44      	itt	mi
 8005880:	f043 0320 	orrmi.w	r3, r3, #32
 8005884:	6023      	strmi	r3, [r4, #0]
 8005886:	b91e      	cbnz	r6, 8005890 <_printf_i+0x198>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	f023 0320 	bic.w	r3, r3, #32
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	2310      	movs	r3, #16
 8005892:	e7af      	b.n	80057f4 <_printf_i+0xfc>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	f043 0320 	orr.w	r3, r3, #32
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	2378      	movs	r3, #120	; 0x78
 800589e:	4828      	ldr	r0, [pc, #160]	; (8005940 <_printf_i+0x248>)
 80058a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a4:	e7e3      	b.n	800586e <_printf_i+0x176>
 80058a6:	0659      	lsls	r1, r3, #25
 80058a8:	bf48      	it	mi
 80058aa:	b2b6      	uxthmi	r6, r6
 80058ac:	e7e6      	b.n	800587c <_printf_i+0x184>
 80058ae:	4615      	mov	r5, r2
 80058b0:	e7bb      	b.n	800582a <_printf_i+0x132>
 80058b2:	682b      	ldr	r3, [r5, #0]
 80058b4:	6826      	ldr	r6, [r4, #0]
 80058b6:	1d18      	adds	r0, r3, #4
 80058b8:	6961      	ldr	r1, [r4, #20]
 80058ba:	6028      	str	r0, [r5, #0]
 80058bc:	0635      	lsls	r5, r6, #24
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	d501      	bpl.n	80058c6 <_printf_i+0x1ce>
 80058c2:	6019      	str	r1, [r3, #0]
 80058c4:	e002      	b.n	80058cc <_printf_i+0x1d4>
 80058c6:	0670      	lsls	r0, r6, #25
 80058c8:	d5fb      	bpl.n	80058c2 <_printf_i+0x1ca>
 80058ca:	8019      	strh	r1, [r3, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	4615      	mov	r5, r2
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	e7ba      	b.n	800584a <_printf_i+0x152>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	2100      	movs	r1, #0
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	602a      	str	r2, [r5, #0]
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	6862      	ldr	r2, [r4, #4]
 80058e0:	4628      	mov	r0, r5
 80058e2:	f000 feb7 	bl	8006654 <memchr>
 80058e6:	b108      	cbz	r0, 80058ec <_printf_i+0x1f4>
 80058e8:	1b40      	subs	r0, r0, r5
 80058ea:	6060      	str	r0, [r4, #4]
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	2300      	movs	r3, #0
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f6:	e7a8      	b.n	800584a <_printf_i+0x152>
 80058f8:	462a      	mov	r2, r5
 80058fa:	4649      	mov	r1, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	47d0      	blx	sl
 8005902:	3001      	adds	r0, #1
 8005904:	d0ab      	beq.n	800585e <_printf_i+0x166>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	079b      	lsls	r3, r3, #30
 800590a:	d413      	bmi.n	8005934 <_printf_i+0x23c>
 800590c:	68e0      	ldr	r0, [r4, #12]
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	4298      	cmp	r0, r3
 8005912:	bfb8      	it	lt
 8005914:	4618      	movlt	r0, r3
 8005916:	e7a4      	b.n	8005862 <_printf_i+0x16a>
 8005918:	2301      	movs	r3, #1
 800591a:	4632      	mov	r2, r6
 800591c:	4649      	mov	r1, r9
 800591e:	4640      	mov	r0, r8
 8005920:	47d0      	blx	sl
 8005922:	3001      	adds	r0, #1
 8005924:	d09b      	beq.n	800585e <_printf_i+0x166>
 8005926:	3501      	adds	r5, #1
 8005928:	68e3      	ldr	r3, [r4, #12]
 800592a:	9903      	ldr	r1, [sp, #12]
 800592c:	1a5b      	subs	r3, r3, r1
 800592e:	42ab      	cmp	r3, r5
 8005930:	dcf2      	bgt.n	8005918 <_printf_i+0x220>
 8005932:	e7eb      	b.n	800590c <_printf_i+0x214>
 8005934:	2500      	movs	r5, #0
 8005936:	f104 0619 	add.w	r6, r4, #25
 800593a:	e7f5      	b.n	8005928 <_printf_i+0x230>
 800593c:	08008236 	.word	0x08008236
 8005940:	08008247 	.word	0x08008247

08005944 <quorem>:
 8005944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	6903      	ldr	r3, [r0, #16]
 800594a:	690c      	ldr	r4, [r1, #16]
 800594c:	4607      	mov	r7, r0
 800594e:	42a3      	cmp	r3, r4
 8005950:	f2c0 8082 	blt.w	8005a58 <quorem+0x114>
 8005954:	3c01      	subs	r4, #1
 8005956:	f100 0514 	add.w	r5, r0, #20
 800595a:	f101 0814 	add.w	r8, r1, #20
 800595e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800596c:	3301      	adds	r3, #1
 800596e:	429a      	cmp	r2, r3
 8005970:	fbb2 f6f3 	udiv	r6, r2, r3
 8005974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800597c:	d331      	bcc.n	80059e2 <quorem+0x9e>
 800597e:	f04f 0e00 	mov.w	lr, #0
 8005982:	4640      	mov	r0, r8
 8005984:	46ac      	mov	ip, r5
 8005986:	46f2      	mov	sl, lr
 8005988:	f850 2b04 	ldr.w	r2, [r0], #4
 800598c:	b293      	uxth	r3, r2
 800598e:	fb06 e303 	mla	r3, r6, r3, lr
 8005992:	0c12      	lsrs	r2, r2, #16
 8005994:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005998:	b29b      	uxth	r3, r3
 800599a:	fb06 e202 	mla	r2, r6, r2, lr
 800599e:	ebaa 0303 	sub.w	r3, sl, r3
 80059a2:	f8dc a000 	ldr.w	sl, [ip]
 80059a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059aa:	fa1f fa8a 	uxth.w	sl, sl
 80059ae:	4453      	add	r3, sl
 80059b0:	f8dc a000 	ldr.w	sl, [ip]
 80059b4:	b292      	uxth	r2, r2
 80059b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059be:	b29b      	uxth	r3, r3
 80059c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c4:	4581      	cmp	r9, r0
 80059c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059ca:	f84c 3b04 	str.w	r3, [ip], #4
 80059ce:	d2db      	bcs.n	8005988 <quorem+0x44>
 80059d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80059d4:	b92b      	cbnz	r3, 80059e2 <quorem+0x9e>
 80059d6:	9b01      	ldr	r3, [sp, #4]
 80059d8:	3b04      	subs	r3, #4
 80059da:	429d      	cmp	r5, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	d32f      	bcc.n	8005a40 <quorem+0xfc>
 80059e0:	613c      	str	r4, [r7, #16]
 80059e2:	4638      	mov	r0, r7
 80059e4:	f001 f8d0 	bl	8006b88 <__mcmp>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	db25      	blt.n	8005a38 <quorem+0xf4>
 80059ec:	4628      	mov	r0, r5
 80059ee:	f04f 0c00 	mov.w	ip, #0
 80059f2:	3601      	adds	r6, #1
 80059f4:	f858 1b04 	ldr.w	r1, [r8], #4
 80059f8:	f8d0 e000 	ldr.w	lr, [r0]
 80059fc:	b28b      	uxth	r3, r1
 80059fe:	ebac 0303 	sub.w	r3, ip, r3
 8005a02:	fa1f f28e 	uxth.w	r2, lr
 8005a06:	4413      	add	r3, r2
 8005a08:	0c0a      	lsrs	r2, r1, #16
 8005a0a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a18:	45c1      	cmp	r9, r8
 8005a1a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a1e:	f840 3b04 	str.w	r3, [r0], #4
 8005a22:	d2e7      	bcs.n	80059f4 <quorem+0xb0>
 8005a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a2c:	b922      	cbnz	r2, 8005a38 <quorem+0xf4>
 8005a2e:	3b04      	subs	r3, #4
 8005a30:	429d      	cmp	r5, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	d30a      	bcc.n	8005a4c <quorem+0x108>
 8005a36:	613c      	str	r4, [r7, #16]
 8005a38:	4630      	mov	r0, r6
 8005a3a:	b003      	add	sp, #12
 8005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	3b04      	subs	r3, #4
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	d1cb      	bne.n	80059e0 <quorem+0x9c>
 8005a48:	3c01      	subs	r4, #1
 8005a4a:	e7c6      	b.n	80059da <quorem+0x96>
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	3b04      	subs	r3, #4
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	d1f0      	bne.n	8005a36 <quorem+0xf2>
 8005a54:	3c01      	subs	r4, #1
 8005a56:	e7eb      	b.n	8005a30 <quorem+0xec>
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7ee      	b.n	8005a3a <quorem+0xf6>
 8005a5c:	0000      	movs	r0, r0
	...

08005a60 <_dtoa_r>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	4616      	mov	r6, r2
 8005a66:	461f      	mov	r7, r3
 8005a68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a6a:	b099      	sub	sp, #100	; 0x64
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a76:	b974      	cbnz	r4, 8005a96 <_dtoa_r+0x36>
 8005a78:	2010      	movs	r0, #16
 8005a7a:	f000 fde3 	bl	8006644 <malloc>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6268      	str	r0, [r5, #36]	; 0x24
 8005a82:	b920      	cbnz	r0, 8005a8e <_dtoa_r+0x2e>
 8005a84:	21ea      	movs	r1, #234	; 0xea
 8005a86:	4ba8      	ldr	r3, [pc, #672]	; (8005d28 <_dtoa_r+0x2c8>)
 8005a88:	48a8      	ldr	r0, [pc, #672]	; (8005d2c <_dtoa_r+0x2cc>)
 8005a8a:	f001 fa81 	bl	8006f90 <__assert_func>
 8005a8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a92:	6004      	str	r4, [r0, #0]
 8005a94:	60c4      	str	r4, [r0, #12]
 8005a96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	b151      	cbz	r1, 8005ab2 <_dtoa_r+0x52>
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4093      	lsls	r3, r2
 8005aa2:	604a      	str	r2, [r1, #4]
 8005aa4:	608b      	str	r3, [r1, #8]
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 fe30 	bl	800670c <_Bfree>
 8005aac:	2200      	movs	r2, #0
 8005aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	1e3b      	subs	r3, r7, #0
 8005ab4:	bfaf      	iteee	ge
 8005ab6:	2300      	movge	r3, #0
 8005ab8:	2201      	movlt	r2, #1
 8005aba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005abe:	9305      	strlt	r3, [sp, #20]
 8005ac0:	bfa8      	it	ge
 8005ac2:	f8c8 3000 	strge.w	r3, [r8]
 8005ac6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005aca:	4b99      	ldr	r3, [pc, #612]	; (8005d30 <_dtoa_r+0x2d0>)
 8005acc:	bfb8      	it	lt
 8005ace:	f8c8 2000 	strlt.w	r2, [r8]
 8005ad2:	ea33 0309 	bics.w	r3, r3, r9
 8005ad6:	d119      	bne.n	8005b0c <_dtoa_r+0xac>
 8005ad8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005adc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ae4:	4333      	orrs	r3, r6
 8005ae6:	f000 857f 	beq.w	80065e8 <_dtoa_r+0xb88>
 8005aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005aec:	b953      	cbnz	r3, 8005b04 <_dtoa_r+0xa4>
 8005aee:	4b91      	ldr	r3, [pc, #580]	; (8005d34 <_dtoa_r+0x2d4>)
 8005af0:	e022      	b.n	8005b38 <_dtoa_r+0xd8>
 8005af2:	4b91      	ldr	r3, [pc, #580]	; (8005d38 <_dtoa_r+0x2d8>)
 8005af4:	9303      	str	r3, [sp, #12]
 8005af6:	3308      	adds	r3, #8
 8005af8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	9803      	ldr	r0, [sp, #12]
 8005afe:	b019      	add	sp, #100	; 0x64
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	4b8b      	ldr	r3, [pc, #556]	; (8005d34 <_dtoa_r+0x2d4>)
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	3303      	adds	r3, #3
 8005b0a:	e7f5      	b.n	8005af8 <_dtoa_r+0x98>
 8005b0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f7fb f858 	bl	8000bd0 <__aeabi_dcmpeq>
 8005b20:	4680      	mov	r8, r0
 8005b22:	b158      	cbz	r0, 8005b3c <_dtoa_r+0xdc>
 8005b24:	2301      	movs	r3, #1
 8005b26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8558 	beq.w	80065e2 <_dtoa_r+0xb82>
 8005b32:	4882      	ldr	r0, [pc, #520]	; (8005d3c <_dtoa_r+0x2dc>)
 8005b34:	6018      	str	r0, [r3, #0]
 8005b36:	1e43      	subs	r3, r0, #1
 8005b38:	9303      	str	r3, [sp, #12]
 8005b3a:	e7df      	b.n	8005afc <_dtoa_r+0x9c>
 8005b3c:	ab16      	add	r3, sp, #88	; 0x58
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	ab17      	add	r3, sp, #92	; 0x5c
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	4628      	mov	r0, r5
 8005b46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b4a:	f001 f8c5 	bl	8006cd8 <__d2b>
 8005b4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b52:	4683      	mov	fp, r0
 8005b54:	2c00      	cmp	r4, #0
 8005b56:	d07f      	beq.n	8005c58 <_dtoa_r+0x1f8>
 8005b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005b6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005b6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b72:	2200      	movs	r2, #0
 8005b74:	4b72      	ldr	r3, [pc, #456]	; (8005d40 <_dtoa_r+0x2e0>)
 8005b76:	f7fa fc0b 	bl	8000390 <__aeabi_dsub>
 8005b7a:	a365      	add	r3, pc, #404	; (adr r3, 8005d10 <_dtoa_r+0x2b0>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fdbe 	bl	8000700 <__aeabi_dmul>
 8005b84:	a364      	add	r3, pc, #400	; (adr r3, 8005d18 <_dtoa_r+0x2b8>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fc03 	bl	8000394 <__adddf3>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	4620      	mov	r0, r4
 8005b92:	460f      	mov	r7, r1
 8005b94:	f7fa fd4a 	bl	800062c <__aeabi_i2d>
 8005b98:	a361      	add	r3, pc, #388	; (adr r3, 8005d20 <_dtoa_r+0x2c0>)
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f7fa fdaf 	bl	8000700 <__aeabi_dmul>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	4639      	mov	r1, r7
 8005baa:	f7fa fbf3 	bl	8000394 <__adddf3>
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460f      	mov	r7, r1
 8005bb2:	f7fb f855 	bl	8000c60 <__aeabi_d2iz>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4682      	mov	sl, r0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	f7fb f810 	bl	8000be4 <__aeabi_dcmplt>
 8005bc4:	b148      	cbz	r0, 8005bda <_dtoa_r+0x17a>
 8005bc6:	4650      	mov	r0, sl
 8005bc8:	f7fa fd30 	bl	800062c <__aeabi_i2d>
 8005bcc:	4632      	mov	r2, r6
 8005bce:	463b      	mov	r3, r7
 8005bd0:	f7fa fffe 	bl	8000bd0 <__aeabi_dcmpeq>
 8005bd4:	b908      	cbnz	r0, 8005bda <_dtoa_r+0x17a>
 8005bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bda:	f1ba 0f16 	cmp.w	sl, #22
 8005bde:	d858      	bhi.n	8005c92 <_dtoa_r+0x232>
 8005be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005be4:	4b57      	ldr	r3, [pc, #348]	; (8005d44 <_dtoa_r+0x2e4>)
 8005be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fff9 	bl	8000be4 <__aeabi_dcmplt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d04f      	beq.n	8005c96 <_dtoa_r+0x236>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c00:	1b1c      	subs	r4, r3, r4
 8005c02:	1e63      	subs	r3, r4, #1
 8005c04:	9309      	str	r3, [sp, #36]	; 0x24
 8005c06:	bf49      	itett	mi
 8005c08:	f1c4 0301 	rsbmi	r3, r4, #1
 8005c0c:	2300      	movpl	r3, #0
 8005c0e:	9306      	strmi	r3, [sp, #24]
 8005c10:	2300      	movmi	r3, #0
 8005c12:	bf54      	ite	pl
 8005c14:	9306      	strpl	r3, [sp, #24]
 8005c16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c18:	f1ba 0f00 	cmp.w	sl, #0
 8005c1c:	db3d      	blt.n	8005c9a <_dtoa_r+0x23a>
 8005c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c24:	4453      	add	r3, sl
 8005c26:	9309      	str	r3, [sp, #36]	; 0x24
 8005c28:	2300      	movs	r3, #0
 8005c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c2e:	2b09      	cmp	r3, #9
 8005c30:	f200 808c 	bhi.w	8005d4c <_dtoa_r+0x2ec>
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	bfc4      	itt	gt
 8005c38:	3b04      	subgt	r3, #4
 8005c3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c3e:	bfc8      	it	gt
 8005c40:	2400      	movgt	r4, #0
 8005c42:	f1a3 0302 	sub.w	r3, r3, #2
 8005c46:	bfd8      	it	le
 8005c48:	2401      	movle	r4, #1
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	f200 808a 	bhi.w	8005d64 <_dtoa_r+0x304>
 8005c50:	e8df f003 	tbb	[pc, r3]
 8005c54:	5b4d4f2d 	.word	0x5b4d4f2d
 8005c58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c5c:	441c      	add	r4, r3
 8005c5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	bfc3      	ittte	gt
 8005c66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005c6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005c72:	f1c3 0320 	rsble	r3, r3, #32
 8005c76:	bfc6      	itte	gt
 8005c78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c7c:	4318      	orrgt	r0, r3
 8005c7e:	fa06 f003 	lslle.w	r0, r6, r3
 8005c82:	f7fa fcc3 	bl	800060c <__aeabi_ui2d>
 8005c86:	2301      	movs	r3, #1
 8005c88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c8c:	3c01      	subs	r4, #1
 8005c8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c90:	e76f      	b.n	8005b72 <_dtoa_r+0x112>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e7b2      	b.n	8005bfc <_dtoa_r+0x19c>
 8005c96:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c98:	e7b1      	b.n	8005bfe <_dtoa_r+0x19e>
 8005c9a:	9b06      	ldr	r3, [sp, #24]
 8005c9c:	eba3 030a 	sub.w	r3, r3, sl
 8005ca0:	9306      	str	r3, [sp, #24]
 8005ca2:	f1ca 0300 	rsb	r3, sl, #0
 8005ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca8:	2300      	movs	r3, #0
 8005caa:	930e      	str	r3, [sp, #56]	; 0x38
 8005cac:	e7be      	b.n	8005c2c <_dtoa_r+0x1cc>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dc58      	bgt.n	8005d6a <_dtoa_r+0x30a>
 8005cb8:	f04f 0901 	mov.w	r9, #1
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8005cc2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005cca:	6042      	str	r2, [r0, #4]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	f102 0614 	add.w	r6, r2, #20
 8005cd2:	429e      	cmp	r6, r3
 8005cd4:	6841      	ldr	r1, [r0, #4]
 8005cd6:	d94e      	bls.n	8005d76 <_dtoa_r+0x316>
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 fcd7 	bl	800668c <_Balloc>
 8005cde:	9003      	str	r0, [sp, #12]
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d14c      	bne.n	8005d7e <_dtoa_r+0x31e>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cea:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <_dtoa_r+0x2e8>)
 8005cec:	e6cc      	b.n	8005a88 <_dtoa_r+0x28>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e7de      	b.n	8005cb0 <_dtoa_r+0x250>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cf8:	eb0a 0903 	add.w	r9, sl, r3
 8005cfc:	f109 0301 	add.w	r3, r9, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	9308      	str	r3, [sp, #32]
 8005d04:	bfb8      	it	lt
 8005d06:	2301      	movlt	r3, #1
 8005d08:	e7dd      	b.n	8005cc6 <_dtoa_r+0x266>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e7f2      	b.n	8005cf4 <_dtoa_r+0x294>
 8005d0e:	bf00      	nop
 8005d10:	636f4361 	.word	0x636f4361
 8005d14:	3fd287a7 	.word	0x3fd287a7
 8005d18:	8b60c8b3 	.word	0x8b60c8b3
 8005d1c:	3fc68a28 	.word	0x3fc68a28
 8005d20:	509f79fb 	.word	0x509f79fb
 8005d24:	3fd34413 	.word	0x3fd34413
 8005d28:	08008265 	.word	0x08008265
 8005d2c:	0800827c 	.word	0x0800827c
 8005d30:	7ff00000 	.word	0x7ff00000
 8005d34:	08008261 	.word	0x08008261
 8005d38:	08008258 	.word	0x08008258
 8005d3c:	08008235 	.word	0x08008235
 8005d40:	3ff80000 	.word	0x3ff80000
 8005d44:	08008370 	.word	0x08008370
 8005d48:	080082d7 	.word	0x080082d7
 8005d4c:	2401      	movs	r4, #1
 8005d4e:	2300      	movs	r3, #0
 8005d50:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d52:	9322      	str	r3, [sp, #136]	; 0x88
 8005d54:	f04f 39ff 	mov.w	r9, #4294967295
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2312      	movs	r3, #18
 8005d5c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d60:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d62:	e7b0      	b.n	8005cc6 <_dtoa_r+0x266>
 8005d64:	2301      	movs	r3, #1
 8005d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d68:	e7f4      	b.n	8005d54 <_dtoa_r+0x2f4>
 8005d6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005d6e:	464b      	mov	r3, r9
 8005d70:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d74:	e7a7      	b.n	8005cc6 <_dtoa_r+0x266>
 8005d76:	3101      	adds	r1, #1
 8005d78:	6041      	str	r1, [r0, #4]
 8005d7a:	0052      	lsls	r2, r2, #1
 8005d7c:	e7a7      	b.n	8005cce <_dtoa_r+0x26e>
 8005d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d80:	9a03      	ldr	r2, [sp, #12]
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	9b08      	ldr	r3, [sp, #32]
 8005d86:	2b0e      	cmp	r3, #14
 8005d88:	f200 80a8 	bhi.w	8005edc <_dtoa_r+0x47c>
 8005d8c:	2c00      	cmp	r4, #0
 8005d8e:	f000 80a5 	beq.w	8005edc <_dtoa_r+0x47c>
 8005d92:	f1ba 0f00 	cmp.w	sl, #0
 8005d96:	dd34      	ble.n	8005e02 <_dtoa_r+0x3a2>
 8005d98:	4a9a      	ldr	r2, [pc, #616]	; (8006004 <_dtoa_r+0x5a4>)
 8005d9a:	f00a 030f 	and.w	r3, sl, #15
 8005d9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005da2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005da6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005daa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005db2:	d016      	beq.n	8005de2 <_dtoa_r+0x382>
 8005db4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005db8:	4b93      	ldr	r3, [pc, #588]	; (8006008 <_dtoa_r+0x5a8>)
 8005dba:	2703      	movs	r7, #3
 8005dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dc0:	f7fa fdc8 	bl	8000954 <__aeabi_ddiv>
 8005dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dc8:	f004 040f 	and.w	r4, r4, #15
 8005dcc:	4e8e      	ldr	r6, [pc, #568]	; (8006008 <_dtoa_r+0x5a8>)
 8005dce:	b954      	cbnz	r4, 8005de6 <_dtoa_r+0x386>
 8005dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dd8:	f7fa fdbc 	bl	8000954 <__aeabi_ddiv>
 8005ddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005de0:	e029      	b.n	8005e36 <_dtoa_r+0x3d6>
 8005de2:	2702      	movs	r7, #2
 8005de4:	e7f2      	b.n	8005dcc <_dtoa_r+0x36c>
 8005de6:	07e1      	lsls	r1, r4, #31
 8005de8:	d508      	bpl.n	8005dfc <_dtoa_r+0x39c>
 8005dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005df2:	f7fa fc85 	bl	8000700 <__aeabi_dmul>
 8005df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dfa:	3701      	adds	r7, #1
 8005dfc:	1064      	asrs	r4, r4, #1
 8005dfe:	3608      	adds	r6, #8
 8005e00:	e7e5      	b.n	8005dce <_dtoa_r+0x36e>
 8005e02:	f000 80a5 	beq.w	8005f50 <_dtoa_r+0x4f0>
 8005e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e0a:	f1ca 0400 	rsb	r4, sl, #0
 8005e0e:	4b7d      	ldr	r3, [pc, #500]	; (8006004 <_dtoa_r+0x5a4>)
 8005e10:	f004 020f 	and.w	r2, r4, #15
 8005e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fc70 	bl	8000700 <__aeabi_dmul>
 8005e20:	2702      	movs	r7, #2
 8005e22:	2300      	movs	r3, #0
 8005e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e28:	4e77      	ldr	r6, [pc, #476]	; (8006008 <_dtoa_r+0x5a8>)
 8005e2a:	1124      	asrs	r4, r4, #4
 8005e2c:	2c00      	cmp	r4, #0
 8005e2e:	f040 8084 	bne.w	8005f3a <_dtoa_r+0x4da>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1d2      	bne.n	8005ddc <_dtoa_r+0x37c>
 8005e36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 808b 	beq.w	8005f54 <_dtoa_r+0x4f4>
 8005e3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4b6f      	ldr	r3, [pc, #444]	; (800600c <_dtoa_r+0x5ac>)
 8005e4e:	f7fa fec9 	bl	8000be4 <__aeabi_dcmplt>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d07e      	beq.n	8005f54 <_dtoa_r+0x4f4>
 8005e56:	9b08      	ldr	r3, [sp, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d07b      	beq.n	8005f54 <_dtoa_r+0x4f4>
 8005e5c:	f1b9 0f00 	cmp.w	r9, #0
 8005e60:	dd38      	ble.n	8005ed4 <_dtoa_r+0x474>
 8005e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e66:	2200      	movs	r2, #0
 8005e68:	4b69      	ldr	r3, [pc, #420]	; (8006010 <_dtoa_r+0x5b0>)
 8005e6a:	f7fa fc49 	bl	8000700 <__aeabi_dmul>
 8005e6e:	464c      	mov	r4, r9
 8005e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e74:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005e78:	3701      	adds	r7, #1
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	f7fa fbd6 	bl	800062c <__aeabi_i2d>
 8005e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e84:	f7fa fc3c 	bl	8000700 <__aeabi_dmul>
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4b62      	ldr	r3, [pc, #392]	; (8006014 <_dtoa_r+0x5b4>)
 8005e8c:	f7fa fa82 	bl	8000394 <__adddf3>
 8005e90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e98:	9611      	str	r6, [sp, #68]	; 0x44
 8005e9a:	2c00      	cmp	r4, #0
 8005e9c:	d15d      	bne.n	8005f5a <_dtoa_r+0x4fa>
 8005e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4b5c      	ldr	r3, [pc, #368]	; (8006018 <_dtoa_r+0x5b8>)
 8005ea6:	f7fa fa73 	bl	8000390 <__aeabi_dsub>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005eb2:	4633      	mov	r3, r6
 8005eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005eb6:	f7fa feb3 	bl	8000c20 <__aeabi_dcmpgt>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f040 829c 	bne.w	80063f8 <_dtoa_r+0x998>
 8005ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ec6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005eca:	f7fa fe8b 	bl	8000be4 <__aeabi_dcmplt>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	f040 8290 	bne.w	80063f4 <_dtoa_r+0x994>
 8005ed4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ed8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f2c0 8152 	blt.w	8006188 <_dtoa_r+0x728>
 8005ee4:	f1ba 0f0e 	cmp.w	sl, #14
 8005ee8:	f300 814e 	bgt.w	8006188 <_dtoa_r+0x728>
 8005eec:	4b45      	ldr	r3, [pc, #276]	; (8006004 <_dtoa_r+0x5a4>)
 8005eee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ef2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ef6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005efa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f280 80db 	bge.w	80060b8 <_dtoa_r+0x658>
 8005f02:	9b08      	ldr	r3, [sp, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f300 80d7 	bgt.w	80060b8 <_dtoa_r+0x658>
 8005f0a:	f040 8272 	bne.w	80063f2 <_dtoa_r+0x992>
 8005f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f12:	2200      	movs	r2, #0
 8005f14:	4b40      	ldr	r3, [pc, #256]	; (8006018 <_dtoa_r+0x5b8>)
 8005f16:	f7fa fbf3 	bl	8000700 <__aeabi_dmul>
 8005f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f1e:	f7fa fe75 	bl	8000c0c <__aeabi_dcmpge>
 8005f22:	9c08      	ldr	r4, [sp, #32]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f040 8248 	bne.w	80063bc <_dtoa_r+0x95c>
 8005f2c:	2331      	movs	r3, #49	; 0x31
 8005f2e:	9f03      	ldr	r7, [sp, #12]
 8005f30:	f10a 0a01 	add.w	sl, sl, #1
 8005f34:	f807 3b01 	strb.w	r3, [r7], #1
 8005f38:	e244      	b.n	80063c4 <_dtoa_r+0x964>
 8005f3a:	07e2      	lsls	r2, r4, #31
 8005f3c:	d505      	bpl.n	8005f4a <_dtoa_r+0x4ea>
 8005f3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f42:	f7fa fbdd 	bl	8000700 <__aeabi_dmul>
 8005f46:	2301      	movs	r3, #1
 8005f48:	3701      	adds	r7, #1
 8005f4a:	1064      	asrs	r4, r4, #1
 8005f4c:	3608      	adds	r6, #8
 8005f4e:	e76d      	b.n	8005e2c <_dtoa_r+0x3cc>
 8005f50:	2702      	movs	r7, #2
 8005f52:	e770      	b.n	8005e36 <_dtoa_r+0x3d6>
 8005f54:	46d0      	mov	r8, sl
 8005f56:	9c08      	ldr	r4, [sp, #32]
 8005f58:	e78f      	b.n	8005e7a <_dtoa_r+0x41a>
 8005f5a:	9903      	ldr	r1, [sp, #12]
 8005f5c:	4b29      	ldr	r3, [pc, #164]	; (8006004 <_dtoa_r+0x5a4>)
 8005f5e:	4421      	add	r1, r4
 8005f60:	9112      	str	r1, [sp, #72]	; 0x48
 8005f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f70:	2900      	cmp	r1, #0
 8005f72:	d055      	beq.n	8006020 <_dtoa_r+0x5c0>
 8005f74:	2000      	movs	r0, #0
 8005f76:	4929      	ldr	r1, [pc, #164]	; (800601c <_dtoa_r+0x5bc>)
 8005f78:	f7fa fcec 	bl	8000954 <__aeabi_ddiv>
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	4632      	mov	r2, r6
 8005f80:	f7fa fa06 	bl	8000390 <__aeabi_dsub>
 8005f84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f88:	9f03      	ldr	r7, [sp, #12]
 8005f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f8e:	f7fa fe67 	bl	8000c60 <__aeabi_d2iz>
 8005f92:	4604      	mov	r4, r0
 8005f94:	f7fa fb4a 	bl	800062c <__aeabi_i2d>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa0:	f7fa f9f6 	bl	8000390 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	3430      	adds	r4, #48	; 0x30
 8005faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fb2:	f807 4b01 	strb.w	r4, [r7], #1
 8005fb6:	f7fa fe15 	bl	8000be4 <__aeabi_dcmplt>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d174      	bne.n	80060a8 <_dtoa_r+0x648>
 8005fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	4911      	ldr	r1, [pc, #68]	; (800600c <_dtoa_r+0x5ac>)
 8005fc6:	f7fa f9e3 	bl	8000390 <__aeabi_dsub>
 8005fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fce:	f7fa fe09 	bl	8000be4 <__aeabi_dcmplt>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f040 80b7 	bne.w	8006146 <_dtoa_r+0x6e6>
 8005fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fda:	429f      	cmp	r7, r3
 8005fdc:	f43f af7a 	beq.w	8005ed4 <_dtoa_r+0x474>
 8005fe0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <_dtoa_r+0x5b0>)
 8005fe8:	f7fa fb8a 	bl	8000700 <__aeabi_dmul>
 8005fec:	2200      	movs	r2, #0
 8005fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <_dtoa_r+0x5b0>)
 8005ff8:	f7fa fb82 	bl	8000700 <__aeabi_dmul>
 8005ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006000:	e7c3      	b.n	8005f8a <_dtoa_r+0x52a>
 8006002:	bf00      	nop
 8006004:	08008370 	.word	0x08008370
 8006008:	08008348 	.word	0x08008348
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	40240000 	.word	0x40240000
 8006014:	401c0000 	.word	0x401c0000
 8006018:	40140000 	.word	0x40140000
 800601c:	3fe00000 	.word	0x3fe00000
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	f7fa fb6c 	bl	8000700 <__aeabi_dmul>
 8006028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800602a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800602e:	9c03      	ldr	r4, [sp, #12]
 8006030:	9314      	str	r3, [sp, #80]	; 0x50
 8006032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006036:	f7fa fe13 	bl	8000c60 <__aeabi_d2iz>
 800603a:	9015      	str	r0, [sp, #84]	; 0x54
 800603c:	f7fa faf6 	bl	800062c <__aeabi_i2d>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006048:	f7fa f9a2 	bl	8000390 <__aeabi_dsub>
 800604c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800604e:	4606      	mov	r6, r0
 8006050:	3330      	adds	r3, #48	; 0x30
 8006052:	f804 3b01 	strb.w	r3, [r4], #1
 8006056:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006058:	460f      	mov	r7, r1
 800605a:	429c      	cmp	r4, r3
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	d124      	bne.n	80060ac <_dtoa_r+0x64c>
 8006062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006066:	4bb0      	ldr	r3, [pc, #704]	; (8006328 <_dtoa_r+0x8c8>)
 8006068:	f7fa f994 	bl	8000394 <__adddf3>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4630      	mov	r0, r6
 8006072:	4639      	mov	r1, r7
 8006074:	f7fa fdd4 	bl	8000c20 <__aeabi_dcmpgt>
 8006078:	2800      	cmp	r0, #0
 800607a:	d163      	bne.n	8006144 <_dtoa_r+0x6e4>
 800607c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006080:	2000      	movs	r0, #0
 8006082:	49a9      	ldr	r1, [pc, #676]	; (8006328 <_dtoa_r+0x8c8>)
 8006084:	f7fa f984 	bl	8000390 <__aeabi_dsub>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4630      	mov	r0, r6
 800608e:	4639      	mov	r1, r7
 8006090:	f7fa fda8 	bl	8000be4 <__aeabi_dcmplt>
 8006094:	2800      	cmp	r0, #0
 8006096:	f43f af1d 	beq.w	8005ed4 <_dtoa_r+0x474>
 800609a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800609c:	1e7b      	subs	r3, r7, #1
 800609e:	9314      	str	r3, [sp, #80]	; 0x50
 80060a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d0f8      	beq.n	800609a <_dtoa_r+0x63a>
 80060a8:	46c2      	mov	sl, r8
 80060aa:	e03b      	b.n	8006124 <_dtoa_r+0x6c4>
 80060ac:	4b9f      	ldr	r3, [pc, #636]	; (800632c <_dtoa_r+0x8cc>)
 80060ae:	f7fa fb27 	bl	8000700 <__aeabi_dmul>
 80060b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060b6:	e7bc      	b.n	8006032 <_dtoa_r+0x5d2>
 80060b8:	9f03      	ldr	r7, [sp, #12]
 80060ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060c2:	4640      	mov	r0, r8
 80060c4:	4649      	mov	r1, r9
 80060c6:	f7fa fc45 	bl	8000954 <__aeabi_ddiv>
 80060ca:	f7fa fdc9 	bl	8000c60 <__aeabi_d2iz>
 80060ce:	4604      	mov	r4, r0
 80060d0:	f7fa faac 	bl	800062c <__aeabi_i2d>
 80060d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060d8:	f7fa fb12 	bl	8000700 <__aeabi_dmul>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4640      	mov	r0, r8
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fa f954 	bl	8000390 <__aeabi_dsub>
 80060e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80060ec:	f807 6b01 	strb.w	r6, [r7], #1
 80060f0:	9e03      	ldr	r6, [sp, #12]
 80060f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80060f6:	1bbe      	subs	r6, r7, r6
 80060f8:	45b4      	cmp	ip, r6
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	d136      	bne.n	800616e <_dtoa_r+0x70e>
 8006100:	f7fa f948 	bl	8000394 <__adddf3>
 8006104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006108:	4680      	mov	r8, r0
 800610a:	4689      	mov	r9, r1
 800610c:	f7fa fd88 	bl	8000c20 <__aeabi_dcmpgt>
 8006110:	bb58      	cbnz	r0, 800616a <_dtoa_r+0x70a>
 8006112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006116:	4640      	mov	r0, r8
 8006118:	4649      	mov	r1, r9
 800611a:	f7fa fd59 	bl	8000bd0 <__aeabi_dcmpeq>
 800611e:	b108      	cbz	r0, 8006124 <_dtoa_r+0x6c4>
 8006120:	07e1      	lsls	r1, r4, #31
 8006122:	d422      	bmi.n	800616a <_dtoa_r+0x70a>
 8006124:	4628      	mov	r0, r5
 8006126:	4659      	mov	r1, fp
 8006128:	f000 faf0 	bl	800670c <_Bfree>
 800612c:	2300      	movs	r3, #0
 800612e:	703b      	strb	r3, [r7, #0]
 8006130:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006132:	f10a 0001 	add.w	r0, sl, #1
 8006136:	6018      	str	r0, [r3, #0]
 8006138:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800613a:	2b00      	cmp	r3, #0
 800613c:	f43f acde 	beq.w	8005afc <_dtoa_r+0x9c>
 8006140:	601f      	str	r7, [r3, #0]
 8006142:	e4db      	b.n	8005afc <_dtoa_r+0x9c>
 8006144:	4627      	mov	r7, r4
 8006146:	463b      	mov	r3, r7
 8006148:	461f      	mov	r7, r3
 800614a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800614e:	2a39      	cmp	r2, #57	; 0x39
 8006150:	d107      	bne.n	8006162 <_dtoa_r+0x702>
 8006152:	9a03      	ldr	r2, [sp, #12]
 8006154:	429a      	cmp	r2, r3
 8006156:	d1f7      	bne.n	8006148 <_dtoa_r+0x6e8>
 8006158:	2230      	movs	r2, #48	; 0x30
 800615a:	9903      	ldr	r1, [sp, #12]
 800615c:	f108 0801 	add.w	r8, r8, #1
 8006160:	700a      	strb	r2, [r1, #0]
 8006162:	781a      	ldrb	r2, [r3, #0]
 8006164:	3201      	adds	r2, #1
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e79e      	b.n	80060a8 <_dtoa_r+0x648>
 800616a:	46d0      	mov	r8, sl
 800616c:	e7eb      	b.n	8006146 <_dtoa_r+0x6e6>
 800616e:	2200      	movs	r2, #0
 8006170:	4b6e      	ldr	r3, [pc, #440]	; (800632c <_dtoa_r+0x8cc>)
 8006172:	f7fa fac5 	bl	8000700 <__aeabi_dmul>
 8006176:	2200      	movs	r2, #0
 8006178:	2300      	movs	r3, #0
 800617a:	4680      	mov	r8, r0
 800617c:	4689      	mov	r9, r1
 800617e:	f7fa fd27 	bl	8000bd0 <__aeabi_dcmpeq>
 8006182:	2800      	cmp	r0, #0
 8006184:	d09b      	beq.n	80060be <_dtoa_r+0x65e>
 8006186:	e7cd      	b.n	8006124 <_dtoa_r+0x6c4>
 8006188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800618a:	2a00      	cmp	r2, #0
 800618c:	f000 80d0 	beq.w	8006330 <_dtoa_r+0x8d0>
 8006190:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006192:	2a01      	cmp	r2, #1
 8006194:	f300 80ae 	bgt.w	80062f4 <_dtoa_r+0x894>
 8006198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800619a:	2a00      	cmp	r2, #0
 800619c:	f000 80a6 	beq.w	80062ec <_dtoa_r+0x88c>
 80061a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061a6:	9f06      	ldr	r7, [sp, #24]
 80061a8:	9a06      	ldr	r2, [sp, #24]
 80061aa:	2101      	movs	r1, #1
 80061ac:	441a      	add	r2, r3
 80061ae:	9206      	str	r2, [sp, #24]
 80061b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061b2:	4628      	mov	r0, r5
 80061b4:	441a      	add	r2, r3
 80061b6:	9209      	str	r2, [sp, #36]	; 0x24
 80061b8:	f000 fb5e 	bl	8006878 <__i2b>
 80061bc:	4606      	mov	r6, r0
 80061be:	2f00      	cmp	r7, #0
 80061c0:	dd0c      	ble.n	80061dc <_dtoa_r+0x77c>
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd09      	ble.n	80061dc <_dtoa_r+0x77c>
 80061c8:	42bb      	cmp	r3, r7
 80061ca:	bfa8      	it	ge
 80061cc:	463b      	movge	r3, r7
 80061ce:	9a06      	ldr	r2, [sp, #24]
 80061d0:	1aff      	subs	r7, r7, r3
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	9206      	str	r2, [sp, #24]
 80061d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	9309      	str	r3, [sp, #36]	; 0x24
 80061dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061de:	b1f3      	cbz	r3, 800621e <_dtoa_r+0x7be>
 80061e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80a8 	beq.w	8006338 <_dtoa_r+0x8d8>
 80061e8:	2c00      	cmp	r4, #0
 80061ea:	dd10      	ble.n	800620e <_dtoa_r+0x7ae>
 80061ec:	4631      	mov	r1, r6
 80061ee:	4622      	mov	r2, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fbff 	bl	80069f4 <__pow5mult>
 80061f6:	465a      	mov	r2, fp
 80061f8:	4601      	mov	r1, r0
 80061fa:	4606      	mov	r6, r0
 80061fc:	4628      	mov	r0, r5
 80061fe:	f000 fb51 	bl	80068a4 <__multiply>
 8006202:	4680      	mov	r8, r0
 8006204:	4659      	mov	r1, fp
 8006206:	4628      	mov	r0, r5
 8006208:	f000 fa80 	bl	800670c <_Bfree>
 800620c:	46c3      	mov	fp, r8
 800620e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006210:	1b1a      	subs	r2, r3, r4
 8006212:	d004      	beq.n	800621e <_dtoa_r+0x7be>
 8006214:	4659      	mov	r1, fp
 8006216:	4628      	mov	r0, r5
 8006218:	f000 fbec 	bl	80069f4 <__pow5mult>
 800621c:	4683      	mov	fp, r0
 800621e:	2101      	movs	r1, #1
 8006220:	4628      	mov	r0, r5
 8006222:	f000 fb29 	bl	8006878 <__i2b>
 8006226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006228:	4604      	mov	r4, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	f340 8086 	ble.w	800633c <_dtoa_r+0x8dc>
 8006230:	461a      	mov	r2, r3
 8006232:	4601      	mov	r1, r0
 8006234:	4628      	mov	r0, r5
 8006236:	f000 fbdd 	bl	80069f4 <__pow5mult>
 800623a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623c:	4604      	mov	r4, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	dd7f      	ble.n	8006342 <_dtoa_r+0x8e2>
 8006242:	f04f 0800 	mov.w	r8, #0
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800624c:	6918      	ldr	r0, [r3, #16]
 800624e:	f000 fac5 	bl	80067dc <__hi0bits>
 8006252:	f1c0 0020 	rsb	r0, r0, #32
 8006256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006258:	4418      	add	r0, r3
 800625a:	f010 001f 	ands.w	r0, r0, #31
 800625e:	f000 8092 	beq.w	8006386 <_dtoa_r+0x926>
 8006262:	f1c0 0320 	rsb	r3, r0, #32
 8006266:	2b04      	cmp	r3, #4
 8006268:	f340 808a 	ble.w	8006380 <_dtoa_r+0x920>
 800626c:	f1c0 001c 	rsb	r0, r0, #28
 8006270:	9b06      	ldr	r3, [sp, #24]
 8006272:	4407      	add	r7, r0
 8006274:	4403      	add	r3, r0
 8006276:	9306      	str	r3, [sp, #24]
 8006278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627a:	4403      	add	r3, r0
 800627c:	9309      	str	r3, [sp, #36]	; 0x24
 800627e:	9b06      	ldr	r3, [sp, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	dd05      	ble.n	8006290 <_dtoa_r+0x830>
 8006284:	4659      	mov	r1, fp
 8006286:	461a      	mov	r2, r3
 8006288:	4628      	mov	r0, r5
 800628a:	f000 fc0d 	bl	8006aa8 <__lshift>
 800628e:	4683      	mov	fp, r0
 8006290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006292:	2b00      	cmp	r3, #0
 8006294:	dd05      	ble.n	80062a2 <_dtoa_r+0x842>
 8006296:	4621      	mov	r1, r4
 8006298:	461a      	mov	r2, r3
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fc04 	bl	8006aa8 <__lshift>
 80062a0:	4604      	mov	r4, r0
 80062a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d070      	beq.n	800638a <_dtoa_r+0x92a>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4658      	mov	r0, fp
 80062ac:	f000 fc6c 	bl	8006b88 <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	da6a      	bge.n	800638a <_dtoa_r+0x92a>
 80062b4:	2300      	movs	r3, #0
 80062b6:	4659      	mov	r1, fp
 80062b8:	220a      	movs	r2, #10
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 fa48 	bl	8006750 <__multadd>
 80062c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c2:	4683      	mov	fp, r0
 80062c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8194 	beq.w	80065f6 <_dtoa_r+0xb96>
 80062ce:	4631      	mov	r1, r6
 80062d0:	2300      	movs	r3, #0
 80062d2:	220a      	movs	r2, #10
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 fa3b 	bl	8006750 <__multadd>
 80062da:	f1b9 0f00 	cmp.w	r9, #0
 80062de:	4606      	mov	r6, r0
 80062e0:	f300 8093 	bgt.w	800640a <_dtoa_r+0x9aa>
 80062e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dc57      	bgt.n	800639a <_dtoa_r+0x93a>
 80062ea:	e08e      	b.n	800640a <_dtoa_r+0x9aa>
 80062ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062f2:	e757      	b.n	80061a4 <_dtoa_r+0x744>
 80062f4:	9b08      	ldr	r3, [sp, #32]
 80062f6:	1e5c      	subs	r4, r3, #1
 80062f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	bfb7      	itett	lt
 80062fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006300:	1b1c      	subge	r4, r3, r4
 8006302:	1ae2      	sublt	r2, r4, r3
 8006304:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006306:	bfbe      	ittt	lt
 8006308:	940a      	strlt	r4, [sp, #40]	; 0x28
 800630a:	189b      	addlt	r3, r3, r2
 800630c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800630e:	9b08      	ldr	r3, [sp, #32]
 8006310:	bfb8      	it	lt
 8006312:	2400      	movlt	r4, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfbb      	ittet	lt
 8006318:	9b06      	ldrlt	r3, [sp, #24]
 800631a:	9a08      	ldrlt	r2, [sp, #32]
 800631c:	9f06      	ldrge	r7, [sp, #24]
 800631e:	1a9f      	sublt	r7, r3, r2
 8006320:	bfac      	ite	ge
 8006322:	9b08      	ldrge	r3, [sp, #32]
 8006324:	2300      	movlt	r3, #0
 8006326:	e73f      	b.n	80061a8 <_dtoa_r+0x748>
 8006328:	3fe00000 	.word	0x3fe00000
 800632c:	40240000 	.word	0x40240000
 8006330:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006332:	9f06      	ldr	r7, [sp, #24]
 8006334:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006336:	e742      	b.n	80061be <_dtoa_r+0x75e>
 8006338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800633a:	e76b      	b.n	8006214 <_dtoa_r+0x7b4>
 800633c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800633e:	2b01      	cmp	r3, #1
 8006340:	dc19      	bgt.n	8006376 <_dtoa_r+0x916>
 8006342:	9b04      	ldr	r3, [sp, #16]
 8006344:	b9bb      	cbnz	r3, 8006376 <_dtoa_r+0x916>
 8006346:	9b05      	ldr	r3, [sp, #20]
 8006348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800634c:	b99b      	cbnz	r3, 8006376 <_dtoa_r+0x916>
 800634e:	9b05      	ldr	r3, [sp, #20]
 8006350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006354:	0d1b      	lsrs	r3, r3, #20
 8006356:	051b      	lsls	r3, r3, #20
 8006358:	b183      	cbz	r3, 800637c <_dtoa_r+0x91c>
 800635a:	f04f 0801 	mov.w	r8, #1
 800635e:	9b06      	ldr	r3, [sp, #24]
 8006360:	3301      	adds	r3, #1
 8006362:	9306      	str	r3, [sp, #24]
 8006364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006366:	3301      	adds	r3, #1
 8006368:	9309      	str	r3, [sp, #36]	; 0x24
 800636a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	f47f af6a 	bne.w	8006246 <_dtoa_r+0x7e6>
 8006372:	2001      	movs	r0, #1
 8006374:	e76f      	b.n	8006256 <_dtoa_r+0x7f6>
 8006376:	f04f 0800 	mov.w	r8, #0
 800637a:	e7f6      	b.n	800636a <_dtoa_r+0x90a>
 800637c:	4698      	mov	r8, r3
 800637e:	e7f4      	b.n	800636a <_dtoa_r+0x90a>
 8006380:	f43f af7d 	beq.w	800627e <_dtoa_r+0x81e>
 8006384:	4618      	mov	r0, r3
 8006386:	301c      	adds	r0, #28
 8006388:	e772      	b.n	8006270 <_dtoa_r+0x810>
 800638a:	9b08      	ldr	r3, [sp, #32]
 800638c:	2b00      	cmp	r3, #0
 800638e:	dc36      	bgt.n	80063fe <_dtoa_r+0x99e>
 8006390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006392:	2b02      	cmp	r3, #2
 8006394:	dd33      	ble.n	80063fe <_dtoa_r+0x99e>
 8006396:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800639a:	f1b9 0f00 	cmp.w	r9, #0
 800639e:	d10d      	bne.n	80063bc <_dtoa_r+0x95c>
 80063a0:	4621      	mov	r1, r4
 80063a2:	464b      	mov	r3, r9
 80063a4:	2205      	movs	r2, #5
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 f9d2 	bl	8006750 <__multadd>
 80063ac:	4601      	mov	r1, r0
 80063ae:	4604      	mov	r4, r0
 80063b0:	4658      	mov	r0, fp
 80063b2:	f000 fbe9 	bl	8006b88 <__mcmp>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f73f adb8 	bgt.w	8005f2c <_dtoa_r+0x4cc>
 80063bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063be:	9f03      	ldr	r7, [sp, #12]
 80063c0:	ea6f 0a03 	mvn.w	sl, r3
 80063c4:	f04f 0800 	mov.w	r8, #0
 80063c8:	4621      	mov	r1, r4
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f99e 	bl	800670c <_Bfree>
 80063d0:	2e00      	cmp	r6, #0
 80063d2:	f43f aea7 	beq.w	8006124 <_dtoa_r+0x6c4>
 80063d6:	f1b8 0f00 	cmp.w	r8, #0
 80063da:	d005      	beq.n	80063e8 <_dtoa_r+0x988>
 80063dc:	45b0      	cmp	r8, r6
 80063de:	d003      	beq.n	80063e8 <_dtoa_r+0x988>
 80063e0:	4641      	mov	r1, r8
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 f992 	bl	800670c <_Bfree>
 80063e8:	4631      	mov	r1, r6
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 f98e 	bl	800670c <_Bfree>
 80063f0:	e698      	b.n	8006124 <_dtoa_r+0x6c4>
 80063f2:	2400      	movs	r4, #0
 80063f4:	4626      	mov	r6, r4
 80063f6:	e7e1      	b.n	80063bc <_dtoa_r+0x95c>
 80063f8:	46c2      	mov	sl, r8
 80063fa:	4626      	mov	r6, r4
 80063fc:	e596      	b.n	8005f2c <_dtoa_r+0x4cc>
 80063fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80fd 	beq.w	8006604 <_dtoa_r+0xba4>
 800640a:	2f00      	cmp	r7, #0
 800640c:	dd05      	ble.n	800641a <_dtoa_r+0x9ba>
 800640e:	4631      	mov	r1, r6
 8006410:	463a      	mov	r2, r7
 8006412:	4628      	mov	r0, r5
 8006414:	f000 fb48 	bl	8006aa8 <__lshift>
 8006418:	4606      	mov	r6, r0
 800641a:	f1b8 0f00 	cmp.w	r8, #0
 800641e:	d05c      	beq.n	80064da <_dtoa_r+0xa7a>
 8006420:	4628      	mov	r0, r5
 8006422:	6871      	ldr	r1, [r6, #4]
 8006424:	f000 f932 	bl	800668c <_Balloc>
 8006428:	4607      	mov	r7, r0
 800642a:	b928      	cbnz	r0, 8006438 <_dtoa_r+0x9d8>
 800642c:	4602      	mov	r2, r0
 800642e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006432:	4b7f      	ldr	r3, [pc, #508]	; (8006630 <_dtoa_r+0xbd0>)
 8006434:	f7ff bb28 	b.w	8005a88 <_dtoa_r+0x28>
 8006438:	6932      	ldr	r2, [r6, #16]
 800643a:	f106 010c 	add.w	r1, r6, #12
 800643e:	3202      	adds	r2, #2
 8006440:	0092      	lsls	r2, r2, #2
 8006442:	300c      	adds	r0, #12
 8006444:	f000 f914 	bl	8006670 <memcpy>
 8006448:	2201      	movs	r2, #1
 800644a:	4639      	mov	r1, r7
 800644c:	4628      	mov	r0, r5
 800644e:	f000 fb2b 	bl	8006aa8 <__lshift>
 8006452:	46b0      	mov	r8, r6
 8006454:	4606      	mov	r6, r0
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	9308      	str	r3, [sp, #32]
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	444b      	add	r3, r9
 8006460:	930a      	str	r3, [sp, #40]	; 0x28
 8006462:	9b04      	ldr	r3, [sp, #16]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	9309      	str	r3, [sp, #36]	; 0x24
 800646a:	9b08      	ldr	r3, [sp, #32]
 800646c:	4621      	mov	r1, r4
 800646e:	3b01      	subs	r3, #1
 8006470:	4658      	mov	r0, fp
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	f7ff fa66 	bl	8005944 <quorem>
 8006478:	4603      	mov	r3, r0
 800647a:	4641      	mov	r1, r8
 800647c:	3330      	adds	r3, #48	; 0x30
 800647e:	9006      	str	r0, [sp, #24]
 8006480:	4658      	mov	r0, fp
 8006482:	930b      	str	r3, [sp, #44]	; 0x2c
 8006484:	f000 fb80 	bl	8006b88 <__mcmp>
 8006488:	4632      	mov	r2, r6
 800648a:	4681      	mov	r9, r0
 800648c:	4621      	mov	r1, r4
 800648e:	4628      	mov	r0, r5
 8006490:	f000 fb96 	bl	8006bc0 <__mdiff>
 8006494:	68c2      	ldr	r2, [r0, #12]
 8006496:	4607      	mov	r7, r0
 8006498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649a:	bb02      	cbnz	r2, 80064de <_dtoa_r+0xa7e>
 800649c:	4601      	mov	r1, r0
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 fb72 	bl	8006b88 <__mcmp>
 80064a4:	4602      	mov	r2, r0
 80064a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a8:	4639      	mov	r1, r7
 80064aa:	4628      	mov	r0, r5
 80064ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80064b0:	f000 f92c 	bl	800670c <_Bfree>
 80064b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064b8:	9f08      	ldr	r7, [sp, #32]
 80064ba:	ea43 0102 	orr.w	r1, r3, r2
 80064be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c0:	430b      	orrs	r3, r1
 80064c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c4:	d10d      	bne.n	80064e2 <_dtoa_r+0xa82>
 80064c6:	2b39      	cmp	r3, #57	; 0x39
 80064c8:	d029      	beq.n	800651e <_dtoa_r+0xabe>
 80064ca:	f1b9 0f00 	cmp.w	r9, #0
 80064ce:	dd01      	ble.n	80064d4 <_dtoa_r+0xa74>
 80064d0:	9b06      	ldr	r3, [sp, #24]
 80064d2:	3331      	adds	r3, #49	; 0x31
 80064d4:	9a04      	ldr	r2, [sp, #16]
 80064d6:	7013      	strb	r3, [r2, #0]
 80064d8:	e776      	b.n	80063c8 <_dtoa_r+0x968>
 80064da:	4630      	mov	r0, r6
 80064dc:	e7b9      	b.n	8006452 <_dtoa_r+0x9f2>
 80064de:	2201      	movs	r2, #1
 80064e0:	e7e2      	b.n	80064a8 <_dtoa_r+0xa48>
 80064e2:	f1b9 0f00 	cmp.w	r9, #0
 80064e6:	db06      	blt.n	80064f6 <_dtoa_r+0xa96>
 80064e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80064ea:	ea41 0909 	orr.w	r9, r1, r9
 80064ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064f0:	ea59 0101 	orrs.w	r1, r9, r1
 80064f4:	d120      	bne.n	8006538 <_dtoa_r+0xad8>
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	ddec      	ble.n	80064d4 <_dtoa_r+0xa74>
 80064fa:	4659      	mov	r1, fp
 80064fc:	2201      	movs	r2, #1
 80064fe:	4628      	mov	r0, r5
 8006500:	9308      	str	r3, [sp, #32]
 8006502:	f000 fad1 	bl	8006aa8 <__lshift>
 8006506:	4621      	mov	r1, r4
 8006508:	4683      	mov	fp, r0
 800650a:	f000 fb3d 	bl	8006b88 <__mcmp>
 800650e:	2800      	cmp	r0, #0
 8006510:	9b08      	ldr	r3, [sp, #32]
 8006512:	dc02      	bgt.n	800651a <_dtoa_r+0xaba>
 8006514:	d1de      	bne.n	80064d4 <_dtoa_r+0xa74>
 8006516:	07da      	lsls	r2, r3, #31
 8006518:	d5dc      	bpl.n	80064d4 <_dtoa_r+0xa74>
 800651a:	2b39      	cmp	r3, #57	; 0x39
 800651c:	d1d8      	bne.n	80064d0 <_dtoa_r+0xa70>
 800651e:	2339      	movs	r3, #57	; 0x39
 8006520:	9a04      	ldr	r2, [sp, #16]
 8006522:	7013      	strb	r3, [r2, #0]
 8006524:	463b      	mov	r3, r7
 8006526:	461f      	mov	r7, r3
 8006528:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800652c:	3b01      	subs	r3, #1
 800652e:	2a39      	cmp	r2, #57	; 0x39
 8006530:	d050      	beq.n	80065d4 <_dtoa_r+0xb74>
 8006532:	3201      	adds	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e747      	b.n	80063c8 <_dtoa_r+0x968>
 8006538:	2a00      	cmp	r2, #0
 800653a:	dd03      	ble.n	8006544 <_dtoa_r+0xae4>
 800653c:	2b39      	cmp	r3, #57	; 0x39
 800653e:	d0ee      	beq.n	800651e <_dtoa_r+0xabe>
 8006540:	3301      	adds	r3, #1
 8006542:	e7c7      	b.n	80064d4 <_dtoa_r+0xa74>
 8006544:	9a08      	ldr	r2, [sp, #32]
 8006546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006548:	f802 3c01 	strb.w	r3, [r2, #-1]
 800654c:	428a      	cmp	r2, r1
 800654e:	d02a      	beq.n	80065a6 <_dtoa_r+0xb46>
 8006550:	4659      	mov	r1, fp
 8006552:	2300      	movs	r3, #0
 8006554:	220a      	movs	r2, #10
 8006556:	4628      	mov	r0, r5
 8006558:	f000 f8fa 	bl	8006750 <__multadd>
 800655c:	45b0      	cmp	r8, r6
 800655e:	4683      	mov	fp, r0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	f04f 020a 	mov.w	r2, #10
 8006568:	4641      	mov	r1, r8
 800656a:	4628      	mov	r0, r5
 800656c:	d107      	bne.n	800657e <_dtoa_r+0xb1e>
 800656e:	f000 f8ef 	bl	8006750 <__multadd>
 8006572:	4680      	mov	r8, r0
 8006574:	4606      	mov	r6, r0
 8006576:	9b08      	ldr	r3, [sp, #32]
 8006578:	3301      	adds	r3, #1
 800657a:	9308      	str	r3, [sp, #32]
 800657c:	e775      	b.n	800646a <_dtoa_r+0xa0a>
 800657e:	f000 f8e7 	bl	8006750 <__multadd>
 8006582:	4631      	mov	r1, r6
 8006584:	4680      	mov	r8, r0
 8006586:	2300      	movs	r3, #0
 8006588:	220a      	movs	r2, #10
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f8e0 	bl	8006750 <__multadd>
 8006590:	4606      	mov	r6, r0
 8006592:	e7f0      	b.n	8006576 <_dtoa_r+0xb16>
 8006594:	f1b9 0f00 	cmp.w	r9, #0
 8006598:	bfcc      	ite	gt
 800659a:	464f      	movgt	r7, r9
 800659c:	2701      	movle	r7, #1
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	9a03      	ldr	r2, [sp, #12]
 80065a4:	4417      	add	r7, r2
 80065a6:	4659      	mov	r1, fp
 80065a8:	2201      	movs	r2, #1
 80065aa:	4628      	mov	r0, r5
 80065ac:	9308      	str	r3, [sp, #32]
 80065ae:	f000 fa7b 	bl	8006aa8 <__lshift>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4683      	mov	fp, r0
 80065b6:	f000 fae7 	bl	8006b88 <__mcmp>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	dcb2      	bgt.n	8006524 <_dtoa_r+0xac4>
 80065be:	d102      	bne.n	80065c6 <_dtoa_r+0xb66>
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	07db      	lsls	r3, r3, #31
 80065c4:	d4ae      	bmi.n	8006524 <_dtoa_r+0xac4>
 80065c6:	463b      	mov	r3, r7
 80065c8:	461f      	mov	r7, r3
 80065ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ce:	2a30      	cmp	r2, #48	; 0x30
 80065d0:	d0fa      	beq.n	80065c8 <_dtoa_r+0xb68>
 80065d2:	e6f9      	b.n	80063c8 <_dtoa_r+0x968>
 80065d4:	9a03      	ldr	r2, [sp, #12]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d1a5      	bne.n	8006526 <_dtoa_r+0xac6>
 80065da:	2331      	movs	r3, #49	; 0x31
 80065dc:	f10a 0a01 	add.w	sl, sl, #1
 80065e0:	e779      	b.n	80064d6 <_dtoa_r+0xa76>
 80065e2:	4b14      	ldr	r3, [pc, #80]	; (8006634 <_dtoa_r+0xbd4>)
 80065e4:	f7ff baa8 	b.w	8005b38 <_dtoa_r+0xd8>
 80065e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f47f aa81 	bne.w	8005af2 <_dtoa_r+0x92>
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <_dtoa_r+0xbd8>)
 80065f2:	f7ff baa1 	b.w	8005b38 <_dtoa_r+0xd8>
 80065f6:	f1b9 0f00 	cmp.w	r9, #0
 80065fa:	dc03      	bgt.n	8006604 <_dtoa_r+0xba4>
 80065fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065fe:	2b02      	cmp	r3, #2
 8006600:	f73f aecb 	bgt.w	800639a <_dtoa_r+0x93a>
 8006604:	9f03      	ldr	r7, [sp, #12]
 8006606:	4621      	mov	r1, r4
 8006608:	4658      	mov	r0, fp
 800660a:	f7ff f99b 	bl	8005944 <quorem>
 800660e:	9a03      	ldr	r2, [sp, #12]
 8006610:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006614:	f807 3b01 	strb.w	r3, [r7], #1
 8006618:	1aba      	subs	r2, r7, r2
 800661a:	4591      	cmp	r9, r2
 800661c:	ddba      	ble.n	8006594 <_dtoa_r+0xb34>
 800661e:	4659      	mov	r1, fp
 8006620:	2300      	movs	r3, #0
 8006622:	220a      	movs	r2, #10
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f893 	bl	8006750 <__multadd>
 800662a:	4683      	mov	fp, r0
 800662c:	e7eb      	b.n	8006606 <_dtoa_r+0xba6>
 800662e:	bf00      	nop
 8006630:	080082d7 	.word	0x080082d7
 8006634:	08008234 	.word	0x08008234
 8006638:	08008258 	.word	0x08008258

0800663c <_localeconv_r>:
 800663c:	4800      	ldr	r0, [pc, #0]	; (8006640 <_localeconv_r+0x4>)
 800663e:	4770      	bx	lr
 8006640:	20000164 	.word	0x20000164

08006644 <malloc>:
 8006644:	4b02      	ldr	r3, [pc, #8]	; (8006650 <malloc+0xc>)
 8006646:	4601      	mov	r1, r0
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f000 bc1d 	b.w	8006e88 <_malloc_r>
 800664e:	bf00      	nop
 8006650:	20000010 	.word	0x20000010

08006654 <memchr>:
 8006654:	4603      	mov	r3, r0
 8006656:	b510      	push	{r4, lr}
 8006658:	b2c9      	uxtb	r1, r1
 800665a:	4402      	add	r2, r0
 800665c:	4293      	cmp	r3, r2
 800665e:	4618      	mov	r0, r3
 8006660:	d101      	bne.n	8006666 <memchr+0x12>
 8006662:	2000      	movs	r0, #0
 8006664:	e003      	b.n	800666e <memchr+0x1a>
 8006666:	7804      	ldrb	r4, [r0, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	428c      	cmp	r4, r1
 800666c:	d1f6      	bne.n	800665c <memchr+0x8>
 800666e:	bd10      	pop	{r4, pc}

08006670 <memcpy>:
 8006670:	440a      	add	r2, r1
 8006672:	4291      	cmp	r1, r2
 8006674:	f100 33ff 	add.w	r3, r0, #4294967295
 8006678:	d100      	bne.n	800667c <memcpy+0xc>
 800667a:	4770      	bx	lr
 800667c:	b510      	push	{r4, lr}
 800667e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006682:	4291      	cmp	r1, r2
 8006684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006688:	d1f9      	bne.n	800667e <memcpy+0xe>
 800668a:	bd10      	pop	{r4, pc}

0800668c <_Balloc>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006690:	4604      	mov	r4, r0
 8006692:	460d      	mov	r5, r1
 8006694:	b976      	cbnz	r6, 80066b4 <_Balloc+0x28>
 8006696:	2010      	movs	r0, #16
 8006698:	f7ff ffd4 	bl	8006644 <malloc>
 800669c:	4602      	mov	r2, r0
 800669e:	6260      	str	r0, [r4, #36]	; 0x24
 80066a0:	b920      	cbnz	r0, 80066ac <_Balloc+0x20>
 80066a2:	2166      	movs	r1, #102	; 0x66
 80066a4:	4b17      	ldr	r3, [pc, #92]	; (8006704 <_Balloc+0x78>)
 80066a6:	4818      	ldr	r0, [pc, #96]	; (8006708 <_Balloc+0x7c>)
 80066a8:	f000 fc72 	bl	8006f90 <__assert_func>
 80066ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066b0:	6006      	str	r6, [r0, #0]
 80066b2:	60c6      	str	r6, [r0, #12]
 80066b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066b6:	68f3      	ldr	r3, [r6, #12]
 80066b8:	b183      	cbz	r3, 80066dc <_Balloc+0x50>
 80066ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066c2:	b9b8      	cbnz	r0, 80066f4 <_Balloc+0x68>
 80066c4:	2101      	movs	r1, #1
 80066c6:	fa01 f605 	lsl.w	r6, r1, r5
 80066ca:	1d72      	adds	r2, r6, #5
 80066cc:	4620      	mov	r0, r4
 80066ce:	0092      	lsls	r2, r2, #2
 80066d0:	f000 fb5e 	bl	8006d90 <_calloc_r>
 80066d4:	b160      	cbz	r0, 80066f0 <_Balloc+0x64>
 80066d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066da:	e00e      	b.n	80066fa <_Balloc+0x6e>
 80066dc:	2221      	movs	r2, #33	; 0x21
 80066de:	2104      	movs	r1, #4
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fb55 	bl	8006d90 <_calloc_r>
 80066e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e8:	60f0      	str	r0, [r6, #12]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e4      	bne.n	80066ba <_Balloc+0x2e>
 80066f0:	2000      	movs	r0, #0
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	6802      	ldr	r2, [r0, #0]
 80066f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066fa:	2300      	movs	r3, #0
 80066fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006700:	e7f7      	b.n	80066f2 <_Balloc+0x66>
 8006702:	bf00      	nop
 8006704:	08008265 	.word	0x08008265
 8006708:	080082e8 	.word	0x080082e8

0800670c <_Bfree>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006710:	4605      	mov	r5, r0
 8006712:	460c      	mov	r4, r1
 8006714:	b976      	cbnz	r6, 8006734 <_Bfree+0x28>
 8006716:	2010      	movs	r0, #16
 8006718:	f7ff ff94 	bl	8006644 <malloc>
 800671c:	4602      	mov	r2, r0
 800671e:	6268      	str	r0, [r5, #36]	; 0x24
 8006720:	b920      	cbnz	r0, 800672c <_Bfree+0x20>
 8006722:	218a      	movs	r1, #138	; 0x8a
 8006724:	4b08      	ldr	r3, [pc, #32]	; (8006748 <_Bfree+0x3c>)
 8006726:	4809      	ldr	r0, [pc, #36]	; (800674c <_Bfree+0x40>)
 8006728:	f000 fc32 	bl	8006f90 <__assert_func>
 800672c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006730:	6006      	str	r6, [r0, #0]
 8006732:	60c6      	str	r6, [r0, #12]
 8006734:	b13c      	cbz	r4, 8006746 <_Bfree+0x3a>
 8006736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006738:	6862      	ldr	r2, [r4, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006740:	6021      	str	r1, [r4, #0]
 8006742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	08008265 	.word	0x08008265
 800674c:	080082e8 	.word	0x080082e8

08006750 <__multadd>:
 8006750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	4607      	mov	r7, r0
 8006756:	460c      	mov	r4, r1
 8006758:	461e      	mov	r6, r3
 800675a:	2000      	movs	r0, #0
 800675c:	690d      	ldr	r5, [r1, #16]
 800675e:	f101 0c14 	add.w	ip, r1, #20
 8006762:	f8dc 3000 	ldr.w	r3, [ip]
 8006766:	3001      	adds	r0, #1
 8006768:	b299      	uxth	r1, r3
 800676a:	fb02 6101 	mla	r1, r2, r1, r6
 800676e:	0c1e      	lsrs	r6, r3, #16
 8006770:	0c0b      	lsrs	r3, r1, #16
 8006772:	fb02 3306 	mla	r3, r2, r6, r3
 8006776:	b289      	uxth	r1, r1
 8006778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800677c:	4285      	cmp	r5, r0
 800677e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006782:	f84c 1b04 	str.w	r1, [ip], #4
 8006786:	dcec      	bgt.n	8006762 <__multadd+0x12>
 8006788:	b30e      	cbz	r6, 80067ce <__multadd+0x7e>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	42ab      	cmp	r3, r5
 800678e:	dc19      	bgt.n	80067c4 <__multadd+0x74>
 8006790:	6861      	ldr	r1, [r4, #4]
 8006792:	4638      	mov	r0, r7
 8006794:	3101      	adds	r1, #1
 8006796:	f7ff ff79 	bl	800668c <_Balloc>
 800679a:	4680      	mov	r8, r0
 800679c:	b928      	cbnz	r0, 80067aa <__multadd+0x5a>
 800679e:	4602      	mov	r2, r0
 80067a0:	21b5      	movs	r1, #181	; 0xb5
 80067a2:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <__multadd+0x84>)
 80067a4:	480c      	ldr	r0, [pc, #48]	; (80067d8 <__multadd+0x88>)
 80067a6:	f000 fbf3 	bl	8006f90 <__assert_func>
 80067aa:	6922      	ldr	r2, [r4, #16]
 80067ac:	f104 010c 	add.w	r1, r4, #12
 80067b0:	3202      	adds	r2, #2
 80067b2:	0092      	lsls	r2, r2, #2
 80067b4:	300c      	adds	r0, #12
 80067b6:	f7ff ff5b 	bl	8006670 <memcpy>
 80067ba:	4621      	mov	r1, r4
 80067bc:	4638      	mov	r0, r7
 80067be:	f7ff ffa5 	bl	800670c <_Bfree>
 80067c2:	4644      	mov	r4, r8
 80067c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067c8:	3501      	adds	r5, #1
 80067ca:	615e      	str	r6, [r3, #20]
 80067cc:	6125      	str	r5, [r4, #16]
 80067ce:	4620      	mov	r0, r4
 80067d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d4:	080082d7 	.word	0x080082d7
 80067d8:	080082e8 	.word	0x080082e8

080067dc <__hi0bits>:
 80067dc:	0c02      	lsrs	r2, r0, #16
 80067de:	0412      	lsls	r2, r2, #16
 80067e0:	4603      	mov	r3, r0
 80067e2:	b9ca      	cbnz	r2, 8006818 <__hi0bits+0x3c>
 80067e4:	0403      	lsls	r3, r0, #16
 80067e6:	2010      	movs	r0, #16
 80067e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067ec:	bf04      	itt	eq
 80067ee:	021b      	lsleq	r3, r3, #8
 80067f0:	3008      	addeq	r0, #8
 80067f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067f6:	bf04      	itt	eq
 80067f8:	011b      	lsleq	r3, r3, #4
 80067fa:	3004      	addeq	r0, #4
 80067fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006800:	bf04      	itt	eq
 8006802:	009b      	lsleq	r3, r3, #2
 8006804:	3002      	addeq	r0, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	db05      	blt.n	8006816 <__hi0bits+0x3a>
 800680a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800680e:	f100 0001 	add.w	r0, r0, #1
 8006812:	bf08      	it	eq
 8006814:	2020      	moveq	r0, #32
 8006816:	4770      	bx	lr
 8006818:	2000      	movs	r0, #0
 800681a:	e7e5      	b.n	80067e8 <__hi0bits+0xc>

0800681c <__lo0bits>:
 800681c:	6803      	ldr	r3, [r0, #0]
 800681e:	4602      	mov	r2, r0
 8006820:	f013 0007 	ands.w	r0, r3, #7
 8006824:	d00b      	beq.n	800683e <__lo0bits+0x22>
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d421      	bmi.n	800686e <__lo0bits+0x52>
 800682a:	0798      	lsls	r0, r3, #30
 800682c:	bf49      	itett	mi
 800682e:	085b      	lsrmi	r3, r3, #1
 8006830:	089b      	lsrpl	r3, r3, #2
 8006832:	2001      	movmi	r0, #1
 8006834:	6013      	strmi	r3, [r2, #0]
 8006836:	bf5c      	itt	pl
 8006838:	2002      	movpl	r0, #2
 800683a:	6013      	strpl	r3, [r2, #0]
 800683c:	4770      	bx	lr
 800683e:	b299      	uxth	r1, r3
 8006840:	b909      	cbnz	r1, 8006846 <__lo0bits+0x2a>
 8006842:	2010      	movs	r0, #16
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	b2d9      	uxtb	r1, r3
 8006848:	b909      	cbnz	r1, 800684e <__lo0bits+0x32>
 800684a:	3008      	adds	r0, #8
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	0719      	lsls	r1, r3, #28
 8006850:	bf04      	itt	eq
 8006852:	091b      	lsreq	r3, r3, #4
 8006854:	3004      	addeq	r0, #4
 8006856:	0799      	lsls	r1, r3, #30
 8006858:	bf04      	itt	eq
 800685a:	089b      	lsreq	r3, r3, #2
 800685c:	3002      	addeq	r0, #2
 800685e:	07d9      	lsls	r1, r3, #31
 8006860:	d403      	bmi.n	800686a <__lo0bits+0x4e>
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	f100 0001 	add.w	r0, r0, #1
 8006868:	d003      	beq.n	8006872 <__lo0bits+0x56>
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4770      	bx	lr
 800686e:	2000      	movs	r0, #0
 8006870:	4770      	bx	lr
 8006872:	2020      	movs	r0, #32
 8006874:	4770      	bx	lr
	...

08006878 <__i2b>:
 8006878:	b510      	push	{r4, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	2101      	movs	r1, #1
 800687e:	f7ff ff05 	bl	800668c <_Balloc>
 8006882:	4602      	mov	r2, r0
 8006884:	b928      	cbnz	r0, 8006892 <__i2b+0x1a>
 8006886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800688a:	4b04      	ldr	r3, [pc, #16]	; (800689c <__i2b+0x24>)
 800688c:	4804      	ldr	r0, [pc, #16]	; (80068a0 <__i2b+0x28>)
 800688e:	f000 fb7f 	bl	8006f90 <__assert_func>
 8006892:	2301      	movs	r3, #1
 8006894:	6144      	str	r4, [r0, #20]
 8006896:	6103      	str	r3, [r0, #16]
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	080082d7 	.word	0x080082d7
 80068a0:	080082e8 	.word	0x080082e8

080068a4 <__multiply>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	4691      	mov	r9, r2
 80068aa:	690a      	ldr	r2, [r1, #16]
 80068ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068b0:	460c      	mov	r4, r1
 80068b2:	429a      	cmp	r2, r3
 80068b4:	bfbe      	ittt	lt
 80068b6:	460b      	movlt	r3, r1
 80068b8:	464c      	movlt	r4, r9
 80068ba:	4699      	movlt	r9, r3
 80068bc:	6927      	ldr	r7, [r4, #16]
 80068be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	6861      	ldr	r1, [r4, #4]
 80068c6:	eb07 060a 	add.w	r6, r7, sl
 80068ca:	42b3      	cmp	r3, r6
 80068cc:	b085      	sub	sp, #20
 80068ce:	bfb8      	it	lt
 80068d0:	3101      	addlt	r1, #1
 80068d2:	f7ff fedb 	bl	800668c <_Balloc>
 80068d6:	b930      	cbnz	r0, 80068e6 <__multiply+0x42>
 80068d8:	4602      	mov	r2, r0
 80068da:	f240 115d 	movw	r1, #349	; 0x15d
 80068de:	4b43      	ldr	r3, [pc, #268]	; (80069ec <__multiply+0x148>)
 80068e0:	4843      	ldr	r0, [pc, #268]	; (80069f0 <__multiply+0x14c>)
 80068e2:	f000 fb55 	bl	8006f90 <__assert_func>
 80068e6:	f100 0514 	add.w	r5, r0, #20
 80068ea:	462b      	mov	r3, r5
 80068ec:	2200      	movs	r2, #0
 80068ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068f2:	4543      	cmp	r3, r8
 80068f4:	d321      	bcc.n	800693a <__multiply+0x96>
 80068f6:	f104 0314 	add.w	r3, r4, #20
 80068fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068fe:	f109 0314 	add.w	r3, r9, #20
 8006902:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006906:	9202      	str	r2, [sp, #8]
 8006908:	1b3a      	subs	r2, r7, r4
 800690a:	3a15      	subs	r2, #21
 800690c:	f022 0203 	bic.w	r2, r2, #3
 8006910:	3204      	adds	r2, #4
 8006912:	f104 0115 	add.w	r1, r4, #21
 8006916:	428f      	cmp	r7, r1
 8006918:	bf38      	it	cc
 800691a:	2204      	movcc	r2, #4
 800691c:	9201      	str	r2, [sp, #4]
 800691e:	9a02      	ldr	r2, [sp, #8]
 8006920:	9303      	str	r3, [sp, #12]
 8006922:	429a      	cmp	r2, r3
 8006924:	d80c      	bhi.n	8006940 <__multiply+0x9c>
 8006926:	2e00      	cmp	r6, #0
 8006928:	dd03      	ble.n	8006932 <__multiply+0x8e>
 800692a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800692e:	2b00      	cmp	r3, #0
 8006930:	d059      	beq.n	80069e6 <__multiply+0x142>
 8006932:	6106      	str	r6, [r0, #16]
 8006934:	b005      	add	sp, #20
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	f843 2b04 	str.w	r2, [r3], #4
 800693e:	e7d8      	b.n	80068f2 <__multiply+0x4e>
 8006940:	f8b3 a000 	ldrh.w	sl, [r3]
 8006944:	f1ba 0f00 	cmp.w	sl, #0
 8006948:	d023      	beq.n	8006992 <__multiply+0xee>
 800694a:	46a9      	mov	r9, r5
 800694c:	f04f 0c00 	mov.w	ip, #0
 8006950:	f104 0e14 	add.w	lr, r4, #20
 8006954:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006958:	f8d9 1000 	ldr.w	r1, [r9]
 800695c:	fa1f fb82 	uxth.w	fp, r2
 8006960:	b289      	uxth	r1, r1
 8006962:	fb0a 110b 	mla	r1, sl, fp, r1
 8006966:	4461      	add	r1, ip
 8006968:	f8d9 c000 	ldr.w	ip, [r9]
 800696c:	0c12      	lsrs	r2, r2, #16
 800696e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006972:	fb0a c202 	mla	r2, sl, r2, ip
 8006976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800697a:	b289      	uxth	r1, r1
 800697c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006980:	4577      	cmp	r7, lr
 8006982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006986:	f849 1b04 	str.w	r1, [r9], #4
 800698a:	d8e3      	bhi.n	8006954 <__multiply+0xb0>
 800698c:	9a01      	ldr	r2, [sp, #4]
 800698e:	f845 c002 	str.w	ip, [r5, r2]
 8006992:	9a03      	ldr	r2, [sp, #12]
 8006994:	3304      	adds	r3, #4
 8006996:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800699a:	f1b9 0f00 	cmp.w	r9, #0
 800699e:	d020      	beq.n	80069e2 <__multiply+0x13e>
 80069a0:	46ae      	mov	lr, r5
 80069a2:	f04f 0a00 	mov.w	sl, #0
 80069a6:	6829      	ldr	r1, [r5, #0]
 80069a8:	f104 0c14 	add.w	ip, r4, #20
 80069ac:	f8bc b000 	ldrh.w	fp, [ip]
 80069b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069b4:	b289      	uxth	r1, r1
 80069b6:	fb09 220b 	mla	r2, r9, fp, r2
 80069ba:	4492      	add	sl, r2
 80069bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069c0:	f84e 1b04 	str.w	r1, [lr], #4
 80069c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069c8:	f8be 1000 	ldrh.w	r1, [lr]
 80069cc:	0c12      	lsrs	r2, r2, #16
 80069ce:	fb09 1102 	mla	r1, r9, r2, r1
 80069d2:	4567      	cmp	r7, ip
 80069d4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069dc:	d8e6      	bhi.n	80069ac <__multiply+0x108>
 80069de:	9a01      	ldr	r2, [sp, #4]
 80069e0:	50a9      	str	r1, [r5, r2]
 80069e2:	3504      	adds	r5, #4
 80069e4:	e79b      	b.n	800691e <__multiply+0x7a>
 80069e6:	3e01      	subs	r6, #1
 80069e8:	e79d      	b.n	8006926 <__multiply+0x82>
 80069ea:	bf00      	nop
 80069ec:	080082d7 	.word	0x080082d7
 80069f0:	080082e8 	.word	0x080082e8

080069f4 <__pow5mult>:
 80069f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f8:	4615      	mov	r5, r2
 80069fa:	f012 0203 	ands.w	r2, r2, #3
 80069fe:	4606      	mov	r6, r0
 8006a00:	460f      	mov	r7, r1
 8006a02:	d007      	beq.n	8006a14 <__pow5mult+0x20>
 8006a04:	4c25      	ldr	r4, [pc, #148]	; (8006a9c <__pow5mult+0xa8>)
 8006a06:	3a01      	subs	r2, #1
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a0e:	f7ff fe9f 	bl	8006750 <__multadd>
 8006a12:	4607      	mov	r7, r0
 8006a14:	10ad      	asrs	r5, r5, #2
 8006a16:	d03d      	beq.n	8006a94 <__pow5mult+0xa0>
 8006a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a1a:	b97c      	cbnz	r4, 8006a3c <__pow5mult+0x48>
 8006a1c:	2010      	movs	r0, #16
 8006a1e:	f7ff fe11 	bl	8006644 <malloc>
 8006a22:	4602      	mov	r2, r0
 8006a24:	6270      	str	r0, [r6, #36]	; 0x24
 8006a26:	b928      	cbnz	r0, 8006a34 <__pow5mult+0x40>
 8006a28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <__pow5mult+0xac>)
 8006a2e:	481d      	ldr	r0, [pc, #116]	; (8006aa4 <__pow5mult+0xb0>)
 8006a30:	f000 faae 	bl	8006f90 <__assert_func>
 8006a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a38:	6004      	str	r4, [r0, #0]
 8006a3a:	60c4      	str	r4, [r0, #12]
 8006a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a44:	b94c      	cbnz	r4, 8006a5a <__pow5mult+0x66>
 8006a46:	f240 2171 	movw	r1, #625	; 0x271
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7ff ff14 	bl	8006878 <__i2b>
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a58:	6003      	str	r3, [r0, #0]
 8006a5a:	f04f 0900 	mov.w	r9, #0
 8006a5e:	07eb      	lsls	r3, r5, #31
 8006a60:	d50a      	bpl.n	8006a78 <__pow5mult+0x84>
 8006a62:	4639      	mov	r1, r7
 8006a64:	4622      	mov	r2, r4
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ff1c 	bl	80068a4 <__multiply>
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7ff fe4b 	bl	800670c <_Bfree>
 8006a76:	4647      	mov	r7, r8
 8006a78:	106d      	asrs	r5, r5, #1
 8006a7a:	d00b      	beq.n	8006a94 <__pow5mult+0xa0>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	b938      	cbnz	r0, 8006a90 <__pow5mult+0x9c>
 8006a80:	4622      	mov	r2, r4
 8006a82:	4621      	mov	r1, r4
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff ff0d 	bl	80068a4 <__multiply>
 8006a8a:	6020      	str	r0, [r4, #0]
 8006a8c:	f8c0 9000 	str.w	r9, [r0]
 8006a90:	4604      	mov	r4, r0
 8006a92:	e7e4      	b.n	8006a5e <__pow5mult+0x6a>
 8006a94:	4638      	mov	r0, r7
 8006a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08008438 	.word	0x08008438
 8006aa0:	08008265 	.word	0x08008265
 8006aa4:	080082e8 	.word	0x080082e8

08006aa8 <__lshift>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	4607      	mov	r7, r0
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	6849      	ldr	r1, [r1, #4]
 8006ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ac0:	f108 0601 	add.w	r6, r8, #1
 8006ac4:	42b3      	cmp	r3, r6
 8006ac6:	db0b      	blt.n	8006ae0 <__lshift+0x38>
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7ff fddf 	bl	800668c <_Balloc>
 8006ace:	4605      	mov	r5, r0
 8006ad0:	b948      	cbnz	r0, 8006ae6 <__lshift+0x3e>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ad8:	4b29      	ldr	r3, [pc, #164]	; (8006b80 <__lshift+0xd8>)
 8006ada:	482a      	ldr	r0, [pc, #168]	; (8006b84 <__lshift+0xdc>)
 8006adc:	f000 fa58 	bl	8006f90 <__assert_func>
 8006ae0:	3101      	adds	r1, #1
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	e7ee      	b.n	8006ac4 <__lshift+0x1c>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f100 0114 	add.w	r1, r0, #20
 8006aec:	f100 0210 	add.w	r2, r0, #16
 8006af0:	4618      	mov	r0, r3
 8006af2:	4553      	cmp	r3, sl
 8006af4:	db37      	blt.n	8006b66 <__lshift+0xbe>
 8006af6:	6920      	ldr	r0, [r4, #16]
 8006af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006afc:	f104 0314 	add.w	r3, r4, #20
 8006b00:	f019 091f 	ands.w	r9, r9, #31
 8006b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b0c:	d02f      	beq.n	8006b6e <__lshift+0xc6>
 8006b0e:	468a      	mov	sl, r1
 8006b10:	f04f 0c00 	mov.w	ip, #0
 8006b14:	f1c9 0e20 	rsb	lr, r9, #32
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	fa02 f209 	lsl.w	r2, r2, r9
 8006b1e:	ea42 020c 	orr.w	r2, r2, ip
 8006b22:	f84a 2b04 	str.w	r2, [sl], #4
 8006b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b30:	d8f2      	bhi.n	8006b18 <__lshift+0x70>
 8006b32:	1b03      	subs	r3, r0, r4
 8006b34:	3b15      	subs	r3, #21
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	f104 0215 	add.w	r2, r4, #21
 8006b40:	4290      	cmp	r0, r2
 8006b42:	bf38      	it	cc
 8006b44:	2304      	movcc	r3, #4
 8006b46:	f841 c003 	str.w	ip, [r1, r3]
 8006b4a:	f1bc 0f00 	cmp.w	ip, #0
 8006b4e:	d001      	beq.n	8006b54 <__lshift+0xac>
 8006b50:	f108 0602 	add.w	r6, r8, #2
 8006b54:	3e01      	subs	r6, #1
 8006b56:	4638      	mov	r0, r7
 8006b58:	4621      	mov	r1, r4
 8006b5a:	612e      	str	r6, [r5, #16]
 8006b5c:	f7ff fdd6 	bl	800670c <_Bfree>
 8006b60:	4628      	mov	r0, r5
 8006b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b66:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	e7c1      	b.n	8006af2 <__lshift+0x4a>
 8006b6e:	3904      	subs	r1, #4
 8006b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b74:	4298      	cmp	r0, r3
 8006b76:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b7a:	d8f9      	bhi.n	8006b70 <__lshift+0xc8>
 8006b7c:	e7ea      	b.n	8006b54 <__lshift+0xac>
 8006b7e:	bf00      	nop
 8006b80:	080082d7 	.word	0x080082d7
 8006b84:	080082e8 	.word	0x080082e8

08006b88 <__mcmp>:
 8006b88:	4603      	mov	r3, r0
 8006b8a:	690a      	ldr	r2, [r1, #16]
 8006b8c:	6900      	ldr	r0, [r0, #16]
 8006b8e:	b530      	push	{r4, r5, lr}
 8006b90:	1a80      	subs	r0, r0, r2
 8006b92:	d10d      	bne.n	8006bb0 <__mcmp+0x28>
 8006b94:	3314      	adds	r3, #20
 8006b96:	3114      	adds	r1, #20
 8006b98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ba0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ba4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ba8:	4295      	cmp	r5, r2
 8006baa:	d002      	beq.n	8006bb2 <__mcmp+0x2a>
 8006bac:	d304      	bcc.n	8006bb8 <__mcmp+0x30>
 8006bae:	2001      	movs	r0, #1
 8006bb0:	bd30      	pop	{r4, r5, pc}
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	d3f4      	bcc.n	8006ba0 <__mcmp+0x18>
 8006bb6:	e7fb      	b.n	8006bb0 <__mcmp+0x28>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e7f8      	b.n	8006bb0 <__mcmp+0x28>
	...

08006bc0 <__mdiff>:
 8006bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4614      	mov	r4, r2
 8006bce:	f7ff ffdb 	bl	8006b88 <__mcmp>
 8006bd2:	1e06      	subs	r6, r0, #0
 8006bd4:	d111      	bne.n	8006bfa <__mdiff+0x3a>
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff fd57 	bl	800668c <_Balloc>
 8006bde:	4602      	mov	r2, r0
 8006be0:	b928      	cbnz	r0, 8006bee <__mdiff+0x2e>
 8006be2:	f240 2132 	movw	r1, #562	; 0x232
 8006be6:	4b3a      	ldr	r3, [pc, #232]	; (8006cd0 <__mdiff+0x110>)
 8006be8:	483a      	ldr	r0, [pc, #232]	; (8006cd4 <__mdiff+0x114>)
 8006bea:	f000 f9d1 	bl	8006f90 <__assert_func>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	bfa4      	itt	ge
 8006bfc:	4623      	movge	r3, r4
 8006bfe:	462c      	movge	r4, r5
 8006c00:	4638      	mov	r0, r7
 8006c02:	6861      	ldr	r1, [r4, #4]
 8006c04:	bfa6      	itte	ge
 8006c06:	461d      	movge	r5, r3
 8006c08:	2600      	movge	r6, #0
 8006c0a:	2601      	movlt	r6, #1
 8006c0c:	f7ff fd3e 	bl	800668c <_Balloc>
 8006c10:	4602      	mov	r2, r0
 8006c12:	b918      	cbnz	r0, 8006c1c <__mdiff+0x5c>
 8006c14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c18:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <__mdiff+0x110>)
 8006c1a:	e7e5      	b.n	8006be8 <__mdiff+0x28>
 8006c1c:	f102 0814 	add.w	r8, r2, #20
 8006c20:	46c2      	mov	sl, r8
 8006c22:	f04f 0c00 	mov.w	ip, #0
 8006c26:	6927      	ldr	r7, [r4, #16]
 8006c28:	60c6      	str	r6, [r0, #12]
 8006c2a:	692e      	ldr	r6, [r5, #16]
 8006c2c:	f104 0014 	add.w	r0, r4, #20
 8006c30:	f105 0914 	add.w	r9, r5, #20
 8006c34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006c38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c3c:	3410      	adds	r4, #16
 8006c3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006c42:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c46:	fa1f f18b 	uxth.w	r1, fp
 8006c4a:	448c      	add	ip, r1
 8006c4c:	b299      	uxth	r1, r3
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	ebac 0101 	sub.w	r1, ip, r1
 8006c54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c5c:	b289      	uxth	r1, r1
 8006c5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c62:	454e      	cmp	r6, r9
 8006c64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c68:	f84a 3b04 	str.w	r3, [sl], #4
 8006c6c:	d8e7      	bhi.n	8006c3e <__mdiff+0x7e>
 8006c6e:	1b73      	subs	r3, r6, r5
 8006c70:	3b15      	subs	r3, #21
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	3515      	adds	r5, #21
 8006c78:	3304      	adds	r3, #4
 8006c7a:	42ae      	cmp	r6, r5
 8006c7c:	bf38      	it	cc
 8006c7e:	2304      	movcc	r3, #4
 8006c80:	4418      	add	r0, r3
 8006c82:	4443      	add	r3, r8
 8006c84:	461e      	mov	r6, r3
 8006c86:	4605      	mov	r5, r0
 8006c88:	4575      	cmp	r5, lr
 8006c8a:	d30e      	bcc.n	8006caa <__mdiff+0xea>
 8006c8c:	f10e 0103 	add.w	r1, lr, #3
 8006c90:	1a09      	subs	r1, r1, r0
 8006c92:	f021 0103 	bic.w	r1, r1, #3
 8006c96:	3803      	subs	r0, #3
 8006c98:	4586      	cmp	lr, r0
 8006c9a:	bf38      	it	cc
 8006c9c:	2100      	movcc	r1, #0
 8006c9e:	4419      	add	r1, r3
 8006ca0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ca4:	b18b      	cbz	r3, 8006cca <__mdiff+0x10a>
 8006ca6:	6117      	str	r7, [r2, #16]
 8006ca8:	e7a4      	b.n	8006bf4 <__mdiff+0x34>
 8006caa:	f855 8b04 	ldr.w	r8, [r5], #4
 8006cae:	fa1f f188 	uxth.w	r1, r8
 8006cb2:	4461      	add	r1, ip
 8006cb4:	140c      	asrs	r4, r1, #16
 8006cb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cba:	b289      	uxth	r1, r1
 8006cbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006cc0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006cc4:	f846 1b04 	str.w	r1, [r6], #4
 8006cc8:	e7de      	b.n	8006c88 <__mdiff+0xc8>
 8006cca:	3f01      	subs	r7, #1
 8006ccc:	e7e8      	b.n	8006ca0 <__mdiff+0xe0>
 8006cce:	bf00      	nop
 8006cd0:	080082d7 	.word	0x080082d7
 8006cd4:	080082e8 	.word	0x080082e8

08006cd8 <__d2b>:
 8006cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006cdc:	2101      	movs	r1, #1
 8006cde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006ce2:	4690      	mov	r8, r2
 8006ce4:	461d      	mov	r5, r3
 8006ce6:	f7ff fcd1 	bl	800668c <_Balloc>
 8006cea:	4604      	mov	r4, r0
 8006cec:	b930      	cbnz	r0, 8006cfc <__d2b+0x24>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	f240 310a 	movw	r1, #778	; 0x30a
 8006cf4:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <__d2b+0xb0>)
 8006cf6:	4825      	ldr	r0, [pc, #148]	; (8006d8c <__d2b+0xb4>)
 8006cf8:	f000 f94a 	bl	8006f90 <__assert_func>
 8006cfc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006d04:	bb2d      	cbnz	r5, 8006d52 <__d2b+0x7a>
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	f1b8 0300 	subs.w	r3, r8, #0
 8006d0c:	d026      	beq.n	8006d5c <__d2b+0x84>
 8006d0e:	4668      	mov	r0, sp
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	f7ff fd83 	bl	800681c <__lo0bits>
 8006d16:	9900      	ldr	r1, [sp, #0]
 8006d18:	b1f0      	cbz	r0, 8006d58 <__d2b+0x80>
 8006d1a:	9a01      	ldr	r2, [sp, #4]
 8006d1c:	f1c0 0320 	rsb	r3, r0, #32
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	430b      	orrs	r3, r1
 8006d26:	40c2      	lsrs	r2, r0
 8006d28:	6163      	str	r3, [r4, #20]
 8006d2a:	9201      	str	r2, [sp, #4]
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf14      	ite	ne
 8006d32:	2102      	movne	r1, #2
 8006d34:	2101      	moveq	r1, #1
 8006d36:	61a3      	str	r3, [r4, #24]
 8006d38:	6121      	str	r1, [r4, #16]
 8006d3a:	b1c5      	cbz	r5, 8006d6e <__d2b+0x96>
 8006d3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d40:	4405      	add	r5, r0
 8006d42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d46:	603d      	str	r5, [r7, #0]
 8006d48:	6030      	str	r0, [r6, #0]
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	b002      	add	sp, #8
 8006d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d56:	e7d6      	b.n	8006d06 <__d2b+0x2e>
 8006d58:	6161      	str	r1, [r4, #20]
 8006d5a:	e7e7      	b.n	8006d2c <__d2b+0x54>
 8006d5c:	a801      	add	r0, sp, #4
 8006d5e:	f7ff fd5d 	bl	800681c <__lo0bits>
 8006d62:	2101      	movs	r1, #1
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	6121      	str	r1, [r4, #16]
 8006d68:	6163      	str	r3, [r4, #20]
 8006d6a:	3020      	adds	r0, #32
 8006d6c:	e7e5      	b.n	8006d3a <__d2b+0x62>
 8006d6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006d72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d76:	6038      	str	r0, [r7, #0]
 8006d78:	6918      	ldr	r0, [r3, #16]
 8006d7a:	f7ff fd2f 	bl	80067dc <__hi0bits>
 8006d7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006d82:	6031      	str	r1, [r6, #0]
 8006d84:	e7e1      	b.n	8006d4a <__d2b+0x72>
 8006d86:	bf00      	nop
 8006d88:	080082d7 	.word	0x080082d7
 8006d8c:	080082e8 	.word	0x080082e8

08006d90 <_calloc_r>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	fba1 5402 	umull	r5, r4, r1, r2
 8006d96:	b934      	cbnz	r4, 8006da6 <_calloc_r+0x16>
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f000 f875 	bl	8006e88 <_malloc_r>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	b928      	cbnz	r0, 8006dae <_calloc_r+0x1e>
 8006da2:	4630      	mov	r0, r6
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
 8006da6:	220c      	movs	r2, #12
 8006da8:	2600      	movs	r6, #0
 8006daa:	6002      	str	r2, [r0, #0]
 8006dac:	e7f9      	b.n	8006da2 <_calloc_r+0x12>
 8006dae:	462a      	mov	r2, r5
 8006db0:	4621      	mov	r1, r4
 8006db2:	f7fe f95f 	bl	8005074 <memset>
 8006db6:	e7f4      	b.n	8006da2 <_calloc_r+0x12>

08006db8 <_free_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4605      	mov	r5, r0
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	d040      	beq.n	8006e42 <_free_r+0x8a>
 8006dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc4:	1f0c      	subs	r4, r1, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bfb8      	it	lt
 8006dca:	18e4      	addlt	r4, r4, r3
 8006dcc:	f000 f922 	bl	8007014 <__malloc_lock>
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <_free_r+0x8c>)
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	b933      	cbnz	r3, 8006de4 <_free_r+0x2c>
 8006dd6:	6063      	str	r3, [r4, #4]
 8006dd8:	6014      	str	r4, [r2, #0]
 8006dda:	4628      	mov	r0, r5
 8006ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006de0:	f000 b91e 	b.w	8007020 <__malloc_unlock>
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	d908      	bls.n	8006dfa <_free_r+0x42>
 8006de8:	6820      	ldr	r0, [r4, #0]
 8006dea:	1821      	adds	r1, r4, r0
 8006dec:	428b      	cmp	r3, r1
 8006dee:	bf01      	itttt	eq
 8006df0:	6819      	ldreq	r1, [r3, #0]
 8006df2:	685b      	ldreq	r3, [r3, #4]
 8006df4:	1809      	addeq	r1, r1, r0
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	e7ed      	b.n	8006dd6 <_free_r+0x1e>
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	b10b      	cbz	r3, 8006e04 <_free_r+0x4c>
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	d9fa      	bls.n	8006dfa <_free_r+0x42>
 8006e04:	6811      	ldr	r1, [r2, #0]
 8006e06:	1850      	adds	r0, r2, r1
 8006e08:	42a0      	cmp	r0, r4
 8006e0a:	d10b      	bne.n	8006e24 <_free_r+0x6c>
 8006e0c:	6820      	ldr	r0, [r4, #0]
 8006e0e:	4401      	add	r1, r0
 8006e10:	1850      	adds	r0, r2, r1
 8006e12:	4283      	cmp	r3, r0
 8006e14:	6011      	str	r1, [r2, #0]
 8006e16:	d1e0      	bne.n	8006dda <_free_r+0x22>
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4401      	add	r1, r0
 8006e1e:	6011      	str	r1, [r2, #0]
 8006e20:	6053      	str	r3, [r2, #4]
 8006e22:	e7da      	b.n	8006dda <_free_r+0x22>
 8006e24:	d902      	bls.n	8006e2c <_free_r+0x74>
 8006e26:	230c      	movs	r3, #12
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	e7d6      	b.n	8006dda <_free_r+0x22>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	1821      	adds	r1, r4, r0
 8006e30:	428b      	cmp	r3, r1
 8006e32:	bf01      	itttt	eq
 8006e34:	6819      	ldreq	r1, [r3, #0]
 8006e36:	685b      	ldreq	r3, [r3, #4]
 8006e38:	1809      	addeq	r1, r1, r0
 8006e3a:	6021      	streq	r1, [r4, #0]
 8006e3c:	6063      	str	r3, [r4, #4]
 8006e3e:	6054      	str	r4, [r2, #4]
 8006e40:	e7cb      	b.n	8006dda <_free_r+0x22>
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20001d5c 	.word	0x20001d5c

08006e48 <sbrk_aligned>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	4e0e      	ldr	r6, [pc, #56]	; (8006e84 <sbrk_aligned+0x3c>)
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	6831      	ldr	r1, [r6, #0]
 8006e50:	4605      	mov	r5, r0
 8006e52:	b911      	cbnz	r1, 8006e5a <sbrk_aligned+0x12>
 8006e54:	f000 f88c 	bl	8006f70 <_sbrk_r>
 8006e58:	6030      	str	r0, [r6, #0]
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 f887 	bl	8006f70 <_sbrk_r>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	d00a      	beq.n	8006e7c <sbrk_aligned+0x34>
 8006e66:	1cc4      	adds	r4, r0, #3
 8006e68:	f024 0403 	bic.w	r4, r4, #3
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d007      	beq.n	8006e80 <sbrk_aligned+0x38>
 8006e70:	1a21      	subs	r1, r4, r0
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f87c 	bl	8006f70 <_sbrk_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d101      	bne.n	8006e80 <sbrk_aligned+0x38>
 8006e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e80:	4620      	mov	r0, r4
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	20001d60 	.word	0x20001d60

08006e88 <_malloc_r>:
 8006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8c:	1ccd      	adds	r5, r1, #3
 8006e8e:	f025 0503 	bic.w	r5, r5, #3
 8006e92:	3508      	adds	r5, #8
 8006e94:	2d0c      	cmp	r5, #12
 8006e96:	bf38      	it	cc
 8006e98:	250c      	movcc	r5, #12
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	db01      	blt.n	8006ea4 <_malloc_r+0x1c>
 8006ea0:	42a9      	cmp	r1, r5
 8006ea2:	d905      	bls.n	8006eb0 <_malloc_r+0x28>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	4630      	mov	r0, r6
 8006eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb0:	4e2e      	ldr	r6, [pc, #184]	; (8006f6c <_malloc_r+0xe4>)
 8006eb2:	f000 f8af 	bl	8007014 <__malloc_lock>
 8006eb6:	6833      	ldr	r3, [r6, #0]
 8006eb8:	461c      	mov	r4, r3
 8006eba:	bb34      	cbnz	r4, 8006f0a <_malloc_r+0x82>
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f7ff ffc2 	bl	8006e48 <sbrk_aligned>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	d14d      	bne.n	8006f66 <_malloc_r+0xde>
 8006eca:	6834      	ldr	r4, [r6, #0]
 8006ecc:	4626      	mov	r6, r4
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	d140      	bne.n	8006f54 <_malloc_r+0xcc>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	eb04 0803 	add.w	r8, r4, r3
 8006edc:	f000 f848 	bl	8006f70 <_sbrk_r>
 8006ee0:	4580      	cmp	r8, r0
 8006ee2:	d13a      	bne.n	8006f5a <_malloc_r+0xd2>
 8006ee4:	6821      	ldr	r1, [r4, #0]
 8006ee6:	3503      	adds	r5, #3
 8006ee8:	1a6d      	subs	r5, r5, r1
 8006eea:	f025 0503 	bic.w	r5, r5, #3
 8006eee:	3508      	adds	r5, #8
 8006ef0:	2d0c      	cmp	r5, #12
 8006ef2:	bf38      	it	cc
 8006ef4:	250c      	movcc	r5, #12
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7ff ffa5 	bl	8006e48 <sbrk_aligned>
 8006efe:	3001      	adds	r0, #1
 8006f00:	d02b      	beq.n	8006f5a <_malloc_r+0xd2>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	442b      	add	r3, r5
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	e00e      	b.n	8006f28 <_malloc_r+0xa0>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	1b52      	subs	r2, r2, r5
 8006f0e:	d41e      	bmi.n	8006f4e <_malloc_r+0xc6>
 8006f10:	2a0b      	cmp	r2, #11
 8006f12:	d916      	bls.n	8006f42 <_malloc_r+0xba>
 8006f14:	1961      	adds	r1, r4, r5
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	6025      	str	r5, [r4, #0]
 8006f1a:	bf18      	it	ne
 8006f1c:	6059      	strne	r1, [r3, #4]
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	bf08      	it	eq
 8006f22:	6031      	streq	r1, [r6, #0]
 8006f24:	5162      	str	r2, [r4, r5]
 8006f26:	604b      	str	r3, [r1, #4]
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f104 060b 	add.w	r6, r4, #11
 8006f2e:	f000 f877 	bl	8007020 <__malloc_unlock>
 8006f32:	f026 0607 	bic.w	r6, r6, #7
 8006f36:	1d23      	adds	r3, r4, #4
 8006f38:	1af2      	subs	r2, r6, r3
 8006f3a:	d0b6      	beq.n	8006eaa <_malloc_r+0x22>
 8006f3c:	1b9b      	subs	r3, r3, r6
 8006f3e:	50a3      	str	r3, [r4, r2]
 8006f40:	e7b3      	b.n	8006eaa <_malloc_r+0x22>
 8006f42:	6862      	ldr	r2, [r4, #4]
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	bf0c      	ite	eq
 8006f48:	6032      	streq	r2, [r6, #0]
 8006f4a:	605a      	strne	r2, [r3, #4]
 8006f4c:	e7ec      	b.n	8006f28 <_malloc_r+0xa0>
 8006f4e:	4623      	mov	r3, r4
 8006f50:	6864      	ldr	r4, [r4, #4]
 8006f52:	e7b2      	b.n	8006eba <_malloc_r+0x32>
 8006f54:	4634      	mov	r4, r6
 8006f56:	6876      	ldr	r6, [r6, #4]
 8006f58:	e7b9      	b.n	8006ece <_malloc_r+0x46>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	f000 f85e 	bl	8007020 <__malloc_unlock>
 8006f64:	e7a1      	b.n	8006eaa <_malloc_r+0x22>
 8006f66:	6025      	str	r5, [r4, #0]
 8006f68:	e7de      	b.n	8006f28 <_malloc_r+0xa0>
 8006f6a:	bf00      	nop
 8006f6c:	20001d5c 	.word	0x20001d5c

08006f70 <_sbrk_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	2300      	movs	r3, #0
 8006f74:	4d05      	ldr	r5, [pc, #20]	; (8006f8c <_sbrk_r+0x1c>)
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fa fb86 	bl	800168c <_sbrk>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_sbrk_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_sbrk_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20001d64 	.word	0x20001d64

08006f90 <__assert_func>:
 8006f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f92:	4614      	mov	r4, r2
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <__assert_func+0x2c>)
 8006f98:	4605      	mov	r5, r0
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68d8      	ldr	r0, [r3, #12]
 8006f9e:	b14c      	cbz	r4, 8006fb4 <__assert_func+0x24>
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <__assert_func+0x30>)
 8006fa2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fa6:	9100      	str	r1, [sp, #0]
 8006fa8:	462b      	mov	r3, r5
 8006faa:	4906      	ldr	r1, [pc, #24]	; (8006fc4 <__assert_func+0x34>)
 8006fac:	f000 f80e 	bl	8006fcc <fiprintf>
 8006fb0:	f000 fa62 	bl	8007478 <abort>
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <__assert_func+0x38>)
 8006fb6:	461c      	mov	r4, r3
 8006fb8:	e7f3      	b.n	8006fa2 <__assert_func+0x12>
 8006fba:	bf00      	nop
 8006fbc:	20000010 	.word	0x20000010
 8006fc0:	08008444 	.word	0x08008444
 8006fc4:	08008451 	.word	0x08008451
 8006fc8:	0800847f 	.word	0x0800847f

08006fcc <fiprintf>:
 8006fcc:	b40e      	push	{r1, r2, r3}
 8006fce:	b503      	push	{r0, r1, lr}
 8006fd0:	4601      	mov	r1, r0
 8006fd2:	ab03      	add	r3, sp, #12
 8006fd4:	4805      	ldr	r0, [pc, #20]	; (8006fec <fiprintf+0x20>)
 8006fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	f000 f84d 	bl	800707c <_vfiprintf_r>
 8006fe2:	b002      	add	sp, #8
 8006fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fe8:	b003      	add	sp, #12
 8006fea:	4770      	bx	lr
 8006fec:	20000010 	.word	0x20000010

08006ff0 <__ascii_mbtowc>:
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	b901      	cbnz	r1, 8006ff6 <__ascii_mbtowc+0x6>
 8006ff4:	a901      	add	r1, sp, #4
 8006ff6:	b142      	cbz	r2, 800700a <__ascii_mbtowc+0x1a>
 8006ff8:	b14b      	cbz	r3, 800700e <__ascii_mbtowc+0x1e>
 8006ffa:	7813      	ldrb	r3, [r2, #0]
 8006ffc:	600b      	str	r3, [r1, #0]
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	1e10      	subs	r0, r2, #0
 8007002:	bf18      	it	ne
 8007004:	2001      	movne	r0, #1
 8007006:	b002      	add	sp, #8
 8007008:	4770      	bx	lr
 800700a:	4610      	mov	r0, r2
 800700c:	e7fb      	b.n	8007006 <__ascii_mbtowc+0x16>
 800700e:	f06f 0001 	mvn.w	r0, #1
 8007012:	e7f8      	b.n	8007006 <__ascii_mbtowc+0x16>

08007014 <__malloc_lock>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__malloc_lock+0x8>)
 8007016:	f000 bbeb 	b.w	80077f0 <__retarget_lock_acquire_recursive>
 800701a:	bf00      	nop
 800701c:	20001d68 	.word	0x20001d68

08007020 <__malloc_unlock>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__malloc_unlock+0x8>)
 8007022:	f000 bbe6 	b.w	80077f2 <__retarget_lock_release_recursive>
 8007026:	bf00      	nop
 8007028:	20001d68 	.word	0x20001d68

0800702c <__sfputc_r>:
 800702c:	6893      	ldr	r3, [r2, #8]
 800702e:	b410      	push	{r4}
 8007030:	3b01      	subs	r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	6093      	str	r3, [r2, #8]
 8007036:	da07      	bge.n	8007048 <__sfputc_r+0x1c>
 8007038:	6994      	ldr	r4, [r2, #24]
 800703a:	42a3      	cmp	r3, r4
 800703c:	db01      	blt.n	8007042 <__sfputc_r+0x16>
 800703e:	290a      	cmp	r1, #10
 8007040:	d102      	bne.n	8007048 <__sfputc_r+0x1c>
 8007042:	bc10      	pop	{r4}
 8007044:	f000 b94a 	b.w	80072dc <__swbuf_r>
 8007048:	6813      	ldr	r3, [r2, #0]
 800704a:	1c58      	adds	r0, r3, #1
 800704c:	6010      	str	r0, [r2, #0]
 800704e:	7019      	strb	r1, [r3, #0]
 8007050:	4608      	mov	r0, r1
 8007052:	bc10      	pop	{r4}
 8007054:	4770      	bx	lr

08007056 <__sfputs_r>:
 8007056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	4614      	mov	r4, r2
 800705e:	18d5      	adds	r5, r2, r3
 8007060:	42ac      	cmp	r4, r5
 8007062:	d101      	bne.n	8007068 <__sfputs_r+0x12>
 8007064:	2000      	movs	r0, #0
 8007066:	e007      	b.n	8007078 <__sfputs_r+0x22>
 8007068:	463a      	mov	r2, r7
 800706a:	4630      	mov	r0, r6
 800706c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007070:	f7ff ffdc 	bl	800702c <__sfputc_r>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d1f3      	bne.n	8007060 <__sfputs_r+0xa>
 8007078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800707c <_vfiprintf_r>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	460d      	mov	r5, r1
 8007082:	4614      	mov	r4, r2
 8007084:	4698      	mov	r8, r3
 8007086:	4606      	mov	r6, r0
 8007088:	b09d      	sub	sp, #116	; 0x74
 800708a:	b118      	cbz	r0, 8007094 <_vfiprintf_r+0x18>
 800708c:	6983      	ldr	r3, [r0, #24]
 800708e:	b90b      	cbnz	r3, 8007094 <_vfiprintf_r+0x18>
 8007090:	f000 fb10 	bl	80076b4 <__sinit>
 8007094:	4b89      	ldr	r3, [pc, #548]	; (80072bc <_vfiprintf_r+0x240>)
 8007096:	429d      	cmp	r5, r3
 8007098:	d11b      	bne.n	80070d2 <_vfiprintf_r+0x56>
 800709a:	6875      	ldr	r5, [r6, #4]
 800709c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800709e:	07d9      	lsls	r1, r3, #31
 80070a0:	d405      	bmi.n	80070ae <_vfiprintf_r+0x32>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	059a      	lsls	r2, r3, #22
 80070a6:	d402      	bmi.n	80070ae <_vfiprintf_r+0x32>
 80070a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070aa:	f000 fba1 	bl	80077f0 <__retarget_lock_acquire_recursive>
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	071b      	lsls	r3, r3, #28
 80070b2:	d501      	bpl.n	80070b8 <_vfiprintf_r+0x3c>
 80070b4:	692b      	ldr	r3, [r5, #16]
 80070b6:	b9eb      	cbnz	r3, 80070f4 <_vfiprintf_r+0x78>
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f000 f96e 	bl	800739c <__swsetup_r>
 80070c0:	b1c0      	cbz	r0, 80070f4 <_vfiprintf_r+0x78>
 80070c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070c4:	07dc      	lsls	r4, r3, #31
 80070c6:	d50e      	bpl.n	80070e6 <_vfiprintf_r+0x6a>
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	b01d      	add	sp, #116	; 0x74
 80070ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d2:	4b7b      	ldr	r3, [pc, #492]	; (80072c0 <_vfiprintf_r+0x244>)
 80070d4:	429d      	cmp	r5, r3
 80070d6:	d101      	bne.n	80070dc <_vfiprintf_r+0x60>
 80070d8:	68b5      	ldr	r5, [r6, #8]
 80070da:	e7df      	b.n	800709c <_vfiprintf_r+0x20>
 80070dc:	4b79      	ldr	r3, [pc, #484]	; (80072c4 <_vfiprintf_r+0x248>)
 80070de:	429d      	cmp	r5, r3
 80070e0:	bf08      	it	eq
 80070e2:	68f5      	ldreq	r5, [r6, #12]
 80070e4:	e7da      	b.n	800709c <_vfiprintf_r+0x20>
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	0598      	lsls	r0, r3, #22
 80070ea:	d4ed      	bmi.n	80070c8 <_vfiprintf_r+0x4c>
 80070ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ee:	f000 fb80 	bl	80077f2 <__retarget_lock_release_recursive>
 80070f2:	e7e9      	b.n	80070c8 <_vfiprintf_r+0x4c>
 80070f4:	2300      	movs	r3, #0
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	2320      	movs	r3, #32
 80070fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fe:	2330      	movs	r3, #48	; 0x30
 8007100:	f04f 0901 	mov.w	r9, #1
 8007104:	f8cd 800c 	str.w	r8, [sp, #12]
 8007108:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80072c8 <_vfiprintf_r+0x24c>
 800710c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007110:	4623      	mov	r3, r4
 8007112:	469a      	mov	sl, r3
 8007114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007118:	b10a      	cbz	r2, 800711e <_vfiprintf_r+0xa2>
 800711a:	2a25      	cmp	r2, #37	; 0x25
 800711c:	d1f9      	bne.n	8007112 <_vfiprintf_r+0x96>
 800711e:	ebba 0b04 	subs.w	fp, sl, r4
 8007122:	d00b      	beq.n	800713c <_vfiprintf_r+0xc0>
 8007124:	465b      	mov	r3, fp
 8007126:	4622      	mov	r2, r4
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ff93 	bl	8007056 <__sfputs_r>
 8007130:	3001      	adds	r0, #1
 8007132:	f000 80aa 	beq.w	800728a <_vfiprintf_r+0x20e>
 8007136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007138:	445a      	add	r2, fp
 800713a:	9209      	str	r2, [sp, #36]	; 0x24
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80a2 	beq.w	800728a <_vfiprintf_r+0x20e>
 8007146:	2300      	movs	r3, #0
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007150:	f10a 0a01 	add.w	sl, sl, #1
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800715c:	931a      	str	r3, [sp, #104]	; 0x68
 800715e:	4654      	mov	r4, sl
 8007160:	2205      	movs	r2, #5
 8007162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007166:	4858      	ldr	r0, [pc, #352]	; (80072c8 <_vfiprintf_r+0x24c>)
 8007168:	f7ff fa74 	bl	8006654 <memchr>
 800716c:	9a04      	ldr	r2, [sp, #16]
 800716e:	b9d8      	cbnz	r0, 80071a8 <_vfiprintf_r+0x12c>
 8007170:	06d1      	lsls	r1, r2, #27
 8007172:	bf44      	itt	mi
 8007174:	2320      	movmi	r3, #32
 8007176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800717a:	0713      	lsls	r3, r2, #28
 800717c:	bf44      	itt	mi
 800717e:	232b      	movmi	r3, #43	; 0x2b
 8007180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007184:	f89a 3000 	ldrb.w	r3, [sl]
 8007188:	2b2a      	cmp	r3, #42	; 0x2a
 800718a:	d015      	beq.n	80071b8 <_vfiprintf_r+0x13c>
 800718c:	4654      	mov	r4, sl
 800718e:	2000      	movs	r0, #0
 8007190:	f04f 0c0a 	mov.w	ip, #10
 8007194:	9a07      	ldr	r2, [sp, #28]
 8007196:	4621      	mov	r1, r4
 8007198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719c:	3b30      	subs	r3, #48	; 0x30
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d94e      	bls.n	8007240 <_vfiprintf_r+0x1c4>
 80071a2:	b1b0      	cbz	r0, 80071d2 <_vfiprintf_r+0x156>
 80071a4:	9207      	str	r2, [sp, #28]
 80071a6:	e014      	b.n	80071d2 <_vfiprintf_r+0x156>
 80071a8:	eba0 0308 	sub.w	r3, r0, r8
 80071ac:	fa09 f303 	lsl.w	r3, r9, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	46a2      	mov	sl, r4
 80071b4:	9304      	str	r3, [sp, #16]
 80071b6:	e7d2      	b.n	800715e <_vfiprintf_r+0xe2>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	1d19      	adds	r1, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	9103      	str	r1, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbb      	ittet	lt
 80071c4:	425b      	neglt	r3, r3
 80071c6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ca:	9307      	strge	r3, [sp, #28]
 80071cc:	9307      	strlt	r3, [sp, #28]
 80071ce:	bfb8      	it	lt
 80071d0:	9204      	strlt	r2, [sp, #16]
 80071d2:	7823      	ldrb	r3, [r4, #0]
 80071d4:	2b2e      	cmp	r3, #46	; 0x2e
 80071d6:	d10c      	bne.n	80071f2 <_vfiprintf_r+0x176>
 80071d8:	7863      	ldrb	r3, [r4, #1]
 80071da:	2b2a      	cmp	r3, #42	; 0x2a
 80071dc:	d135      	bne.n	800724a <_vfiprintf_r+0x1ce>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	3402      	adds	r4, #2
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9203      	str	r2, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfb8      	it	lt
 80071ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80071f0:	9305      	str	r3, [sp, #20]
 80071f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80072cc <_vfiprintf_r+0x250>
 80071f6:	2203      	movs	r2, #3
 80071f8:	4650      	mov	r0, sl
 80071fa:	7821      	ldrb	r1, [r4, #0]
 80071fc:	f7ff fa2a 	bl	8006654 <memchr>
 8007200:	b140      	cbz	r0, 8007214 <_vfiprintf_r+0x198>
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	eba0 000a 	sub.w	r0, r0, sl
 8007208:	fa03 f000 	lsl.w	r0, r3, r0
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	3401      	adds	r4, #1
 8007210:	4303      	orrs	r3, r0
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007218:	2206      	movs	r2, #6
 800721a:	482d      	ldr	r0, [pc, #180]	; (80072d0 <_vfiprintf_r+0x254>)
 800721c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007220:	f7ff fa18 	bl	8006654 <memchr>
 8007224:	2800      	cmp	r0, #0
 8007226:	d03f      	beq.n	80072a8 <_vfiprintf_r+0x22c>
 8007228:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <_vfiprintf_r+0x258>)
 800722a:	bb1b      	cbnz	r3, 8007274 <_vfiprintf_r+0x1f8>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	3307      	adds	r3, #7
 8007230:	f023 0307 	bic.w	r3, r3, #7
 8007234:	3308      	adds	r3, #8
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723a:	443b      	add	r3, r7
 800723c:	9309      	str	r3, [sp, #36]	; 0x24
 800723e:	e767      	b.n	8007110 <_vfiprintf_r+0x94>
 8007240:	460c      	mov	r4, r1
 8007242:	2001      	movs	r0, #1
 8007244:	fb0c 3202 	mla	r2, ip, r2, r3
 8007248:	e7a5      	b.n	8007196 <_vfiprintf_r+0x11a>
 800724a:	2300      	movs	r3, #0
 800724c:	f04f 0c0a 	mov.w	ip, #10
 8007250:	4619      	mov	r1, r3
 8007252:	3401      	adds	r4, #1
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	4620      	mov	r0, r4
 8007258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725c:	3a30      	subs	r2, #48	; 0x30
 800725e:	2a09      	cmp	r2, #9
 8007260:	d903      	bls.n	800726a <_vfiprintf_r+0x1ee>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0c5      	beq.n	80071f2 <_vfiprintf_r+0x176>
 8007266:	9105      	str	r1, [sp, #20]
 8007268:	e7c3      	b.n	80071f2 <_vfiprintf_r+0x176>
 800726a:	4604      	mov	r4, r0
 800726c:	2301      	movs	r3, #1
 800726e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007272:	e7f0      	b.n	8007256 <_vfiprintf_r+0x1da>
 8007274:	ab03      	add	r3, sp, #12
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	462a      	mov	r2, r5
 800727a:	4630      	mov	r0, r6
 800727c:	4b16      	ldr	r3, [pc, #88]	; (80072d8 <_vfiprintf_r+0x25c>)
 800727e:	a904      	add	r1, sp, #16
 8007280:	f7fd ff9e 	bl	80051c0 <_printf_float>
 8007284:	4607      	mov	r7, r0
 8007286:	1c78      	adds	r0, r7, #1
 8007288:	d1d6      	bne.n	8007238 <_vfiprintf_r+0x1bc>
 800728a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800728c:	07d9      	lsls	r1, r3, #31
 800728e:	d405      	bmi.n	800729c <_vfiprintf_r+0x220>
 8007290:	89ab      	ldrh	r3, [r5, #12]
 8007292:	059a      	lsls	r2, r3, #22
 8007294:	d402      	bmi.n	800729c <_vfiprintf_r+0x220>
 8007296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007298:	f000 faab 	bl	80077f2 <__retarget_lock_release_recursive>
 800729c:	89ab      	ldrh	r3, [r5, #12]
 800729e:	065b      	lsls	r3, r3, #25
 80072a0:	f53f af12 	bmi.w	80070c8 <_vfiprintf_r+0x4c>
 80072a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a6:	e711      	b.n	80070cc <_vfiprintf_r+0x50>
 80072a8:	ab03      	add	r3, sp, #12
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	462a      	mov	r2, r5
 80072ae:	4630      	mov	r0, r6
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <_vfiprintf_r+0x25c>)
 80072b2:	a904      	add	r1, sp, #16
 80072b4:	f7fe fa20 	bl	80056f8 <_printf_i>
 80072b8:	e7e4      	b.n	8007284 <_vfiprintf_r+0x208>
 80072ba:	bf00      	nop
 80072bc:	080085bc 	.word	0x080085bc
 80072c0:	080085dc 	.word	0x080085dc
 80072c4:	0800859c 	.word	0x0800859c
 80072c8:	0800848a 	.word	0x0800848a
 80072cc:	08008490 	.word	0x08008490
 80072d0:	08008494 	.word	0x08008494
 80072d4:	080051c1 	.word	0x080051c1
 80072d8:	08007057 	.word	0x08007057

080072dc <__swbuf_r>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	460e      	mov	r6, r1
 80072e0:	4614      	mov	r4, r2
 80072e2:	4605      	mov	r5, r0
 80072e4:	b118      	cbz	r0, 80072ee <__swbuf_r+0x12>
 80072e6:	6983      	ldr	r3, [r0, #24]
 80072e8:	b90b      	cbnz	r3, 80072ee <__swbuf_r+0x12>
 80072ea:	f000 f9e3 	bl	80076b4 <__sinit>
 80072ee:	4b21      	ldr	r3, [pc, #132]	; (8007374 <__swbuf_r+0x98>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	d12b      	bne.n	800734c <__swbuf_r+0x70>
 80072f4:	686c      	ldr	r4, [r5, #4]
 80072f6:	69a3      	ldr	r3, [r4, #24]
 80072f8:	60a3      	str	r3, [r4, #8]
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	071a      	lsls	r2, r3, #28
 80072fe:	d52f      	bpl.n	8007360 <__swbuf_r+0x84>
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	b36b      	cbz	r3, 8007360 <__swbuf_r+0x84>
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	6820      	ldr	r0, [r4, #0]
 8007308:	b2f6      	uxtb	r6, r6
 800730a:	1ac0      	subs	r0, r0, r3
 800730c:	6963      	ldr	r3, [r4, #20]
 800730e:	4637      	mov	r7, r6
 8007310:	4283      	cmp	r3, r0
 8007312:	dc04      	bgt.n	800731e <__swbuf_r+0x42>
 8007314:	4621      	mov	r1, r4
 8007316:	4628      	mov	r0, r5
 8007318:	f000 f938 	bl	800758c <_fflush_r>
 800731c:	bb30      	cbnz	r0, 800736c <__swbuf_r+0x90>
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	3001      	adds	r0, #1
 8007322:	3b01      	subs	r3, #1
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	6022      	str	r2, [r4, #0]
 800732c:	701e      	strb	r6, [r3, #0]
 800732e:	6963      	ldr	r3, [r4, #20]
 8007330:	4283      	cmp	r3, r0
 8007332:	d004      	beq.n	800733e <__swbuf_r+0x62>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	07db      	lsls	r3, r3, #31
 8007338:	d506      	bpl.n	8007348 <__swbuf_r+0x6c>
 800733a:	2e0a      	cmp	r6, #10
 800733c:	d104      	bne.n	8007348 <__swbuf_r+0x6c>
 800733e:	4621      	mov	r1, r4
 8007340:	4628      	mov	r0, r5
 8007342:	f000 f923 	bl	800758c <_fflush_r>
 8007346:	b988      	cbnz	r0, 800736c <__swbuf_r+0x90>
 8007348:	4638      	mov	r0, r7
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734c:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <__swbuf_r+0x9c>)
 800734e:	429c      	cmp	r4, r3
 8007350:	d101      	bne.n	8007356 <__swbuf_r+0x7a>
 8007352:	68ac      	ldr	r4, [r5, #8]
 8007354:	e7cf      	b.n	80072f6 <__swbuf_r+0x1a>
 8007356:	4b09      	ldr	r3, [pc, #36]	; (800737c <__swbuf_r+0xa0>)
 8007358:	429c      	cmp	r4, r3
 800735a:	bf08      	it	eq
 800735c:	68ec      	ldreq	r4, [r5, #12]
 800735e:	e7ca      	b.n	80072f6 <__swbuf_r+0x1a>
 8007360:	4621      	mov	r1, r4
 8007362:	4628      	mov	r0, r5
 8007364:	f000 f81a 	bl	800739c <__swsetup_r>
 8007368:	2800      	cmp	r0, #0
 800736a:	d0cb      	beq.n	8007304 <__swbuf_r+0x28>
 800736c:	f04f 37ff 	mov.w	r7, #4294967295
 8007370:	e7ea      	b.n	8007348 <__swbuf_r+0x6c>
 8007372:	bf00      	nop
 8007374:	080085bc 	.word	0x080085bc
 8007378:	080085dc 	.word	0x080085dc
 800737c:	0800859c 	.word	0x0800859c

08007380 <__ascii_wctomb>:
 8007380:	4603      	mov	r3, r0
 8007382:	4608      	mov	r0, r1
 8007384:	b141      	cbz	r1, 8007398 <__ascii_wctomb+0x18>
 8007386:	2aff      	cmp	r2, #255	; 0xff
 8007388:	d904      	bls.n	8007394 <__ascii_wctomb+0x14>
 800738a:	228a      	movs	r2, #138	; 0x8a
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	4770      	bx	lr
 8007394:	2001      	movs	r0, #1
 8007396:	700a      	strb	r2, [r1, #0]
 8007398:	4770      	bx	lr
	...

0800739c <__swsetup_r>:
 800739c:	4b32      	ldr	r3, [pc, #200]	; (8007468 <__swsetup_r+0xcc>)
 800739e:	b570      	push	{r4, r5, r6, lr}
 80073a0:	681d      	ldr	r5, [r3, #0]
 80073a2:	4606      	mov	r6, r0
 80073a4:	460c      	mov	r4, r1
 80073a6:	b125      	cbz	r5, 80073b2 <__swsetup_r+0x16>
 80073a8:	69ab      	ldr	r3, [r5, #24]
 80073aa:	b913      	cbnz	r3, 80073b2 <__swsetup_r+0x16>
 80073ac:	4628      	mov	r0, r5
 80073ae:	f000 f981 	bl	80076b4 <__sinit>
 80073b2:	4b2e      	ldr	r3, [pc, #184]	; (800746c <__swsetup_r+0xd0>)
 80073b4:	429c      	cmp	r4, r3
 80073b6:	d10f      	bne.n	80073d8 <__swsetup_r+0x3c>
 80073b8:	686c      	ldr	r4, [r5, #4]
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073c0:	0719      	lsls	r1, r3, #28
 80073c2:	d42c      	bmi.n	800741e <__swsetup_r+0x82>
 80073c4:	06dd      	lsls	r5, r3, #27
 80073c6:	d411      	bmi.n	80073ec <__swsetup_r+0x50>
 80073c8:	2309      	movs	r3, #9
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	e03e      	b.n	8007456 <__swsetup_r+0xba>
 80073d8:	4b25      	ldr	r3, [pc, #148]	; (8007470 <__swsetup_r+0xd4>)
 80073da:	429c      	cmp	r4, r3
 80073dc:	d101      	bne.n	80073e2 <__swsetup_r+0x46>
 80073de:	68ac      	ldr	r4, [r5, #8]
 80073e0:	e7eb      	b.n	80073ba <__swsetup_r+0x1e>
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <__swsetup_r+0xd8>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	bf08      	it	eq
 80073e8:	68ec      	ldreq	r4, [r5, #12]
 80073ea:	e7e6      	b.n	80073ba <__swsetup_r+0x1e>
 80073ec:	0758      	lsls	r0, r3, #29
 80073ee:	d512      	bpl.n	8007416 <__swsetup_r+0x7a>
 80073f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073f2:	b141      	cbz	r1, 8007406 <__swsetup_r+0x6a>
 80073f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073f8:	4299      	cmp	r1, r3
 80073fa:	d002      	beq.n	8007402 <__swsetup_r+0x66>
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff fcdb 	bl	8006db8 <_free_r>
 8007402:	2300      	movs	r3, #0
 8007404:	6363      	str	r3, [r4, #52]	; 0x34
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	2300      	movs	r3, #0
 8007410:	6063      	str	r3, [r4, #4]
 8007412:	6923      	ldr	r3, [r4, #16]
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f043 0308 	orr.w	r3, r3, #8
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	b94b      	cbnz	r3, 8007436 <__swsetup_r+0x9a>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742c:	d003      	beq.n	8007436 <__swsetup_r+0x9a>
 800742e:	4621      	mov	r1, r4
 8007430:	4630      	mov	r0, r6
 8007432:	f000 fa05 	bl	8007840 <__smakebuf_r>
 8007436:	89a0      	ldrh	r0, [r4, #12]
 8007438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800743c:	f010 0301 	ands.w	r3, r0, #1
 8007440:	d00a      	beq.n	8007458 <__swsetup_r+0xbc>
 8007442:	2300      	movs	r3, #0
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	6963      	ldr	r3, [r4, #20]
 8007448:	425b      	negs	r3, r3
 800744a:	61a3      	str	r3, [r4, #24]
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	b943      	cbnz	r3, 8007462 <__swsetup_r+0xc6>
 8007450:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007454:	d1ba      	bne.n	80073cc <__swsetup_r+0x30>
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	0781      	lsls	r1, r0, #30
 800745a:	bf58      	it	pl
 800745c:	6963      	ldrpl	r3, [r4, #20]
 800745e:	60a3      	str	r3, [r4, #8]
 8007460:	e7f4      	b.n	800744c <__swsetup_r+0xb0>
 8007462:	2000      	movs	r0, #0
 8007464:	e7f7      	b.n	8007456 <__swsetup_r+0xba>
 8007466:	bf00      	nop
 8007468:	20000010 	.word	0x20000010
 800746c:	080085bc 	.word	0x080085bc
 8007470:	080085dc 	.word	0x080085dc
 8007474:	0800859c 	.word	0x0800859c

08007478 <abort>:
 8007478:	2006      	movs	r0, #6
 800747a:	b508      	push	{r3, lr}
 800747c:	f000 fa48 	bl	8007910 <raise>
 8007480:	2001      	movs	r0, #1
 8007482:	f7fa f8d3 	bl	800162c <_exit>
	...

08007488 <__sflush_r>:
 8007488:	898a      	ldrh	r2, [r1, #12]
 800748a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748c:	4605      	mov	r5, r0
 800748e:	0710      	lsls	r0, r2, #28
 8007490:	460c      	mov	r4, r1
 8007492:	d457      	bmi.n	8007544 <__sflush_r+0xbc>
 8007494:	684b      	ldr	r3, [r1, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dc04      	bgt.n	80074a4 <__sflush_r+0x1c>
 800749a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	dc01      	bgt.n	80074a4 <__sflush_r+0x1c>
 80074a0:	2000      	movs	r0, #0
 80074a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074a6:	2e00      	cmp	r6, #0
 80074a8:	d0fa      	beq.n	80074a0 <__sflush_r+0x18>
 80074aa:	2300      	movs	r3, #0
 80074ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074b0:	682f      	ldr	r7, [r5, #0]
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	d032      	beq.n	800751c <__sflush_r+0x94>
 80074b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	075a      	lsls	r2, r3, #29
 80074bc:	d505      	bpl.n	80074ca <__sflush_r+0x42>
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	1ac0      	subs	r0, r0, r3
 80074c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074c4:	b10b      	cbz	r3, 80074ca <__sflush_r+0x42>
 80074c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074c8:	1ac0      	subs	r0, r0, r3
 80074ca:	2300      	movs	r3, #0
 80074cc:	4602      	mov	r2, r0
 80074ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074d0:	4628      	mov	r0, r5
 80074d2:	6a21      	ldr	r1, [r4, #32]
 80074d4:	47b0      	blx	r6
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	d106      	bne.n	80074ea <__sflush_r+0x62>
 80074dc:	6829      	ldr	r1, [r5, #0]
 80074de:	291d      	cmp	r1, #29
 80074e0:	d82c      	bhi.n	800753c <__sflush_r+0xb4>
 80074e2:	4a29      	ldr	r2, [pc, #164]	; (8007588 <__sflush_r+0x100>)
 80074e4:	40ca      	lsrs	r2, r1
 80074e6:	07d6      	lsls	r6, r2, #31
 80074e8:	d528      	bpl.n	800753c <__sflush_r+0xb4>
 80074ea:	2200      	movs	r2, #0
 80074ec:	6062      	str	r2, [r4, #4]
 80074ee:	6922      	ldr	r2, [r4, #16]
 80074f0:	04d9      	lsls	r1, r3, #19
 80074f2:	6022      	str	r2, [r4, #0]
 80074f4:	d504      	bpl.n	8007500 <__sflush_r+0x78>
 80074f6:	1c42      	adds	r2, r0, #1
 80074f8:	d101      	bne.n	80074fe <__sflush_r+0x76>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	b903      	cbnz	r3, 8007500 <__sflush_r+0x78>
 80074fe:	6560      	str	r0, [r4, #84]	; 0x54
 8007500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007502:	602f      	str	r7, [r5, #0]
 8007504:	2900      	cmp	r1, #0
 8007506:	d0cb      	beq.n	80074a0 <__sflush_r+0x18>
 8007508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800750c:	4299      	cmp	r1, r3
 800750e:	d002      	beq.n	8007516 <__sflush_r+0x8e>
 8007510:	4628      	mov	r0, r5
 8007512:	f7ff fc51 	bl	8006db8 <_free_r>
 8007516:	2000      	movs	r0, #0
 8007518:	6360      	str	r0, [r4, #52]	; 0x34
 800751a:	e7c2      	b.n	80074a2 <__sflush_r+0x1a>
 800751c:	6a21      	ldr	r1, [r4, #32]
 800751e:	2301      	movs	r3, #1
 8007520:	4628      	mov	r0, r5
 8007522:	47b0      	blx	r6
 8007524:	1c41      	adds	r1, r0, #1
 8007526:	d1c7      	bne.n	80074b8 <__sflush_r+0x30>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0c4      	beq.n	80074b8 <__sflush_r+0x30>
 800752e:	2b1d      	cmp	r3, #29
 8007530:	d001      	beq.n	8007536 <__sflush_r+0xae>
 8007532:	2b16      	cmp	r3, #22
 8007534:	d101      	bne.n	800753a <__sflush_r+0xb2>
 8007536:	602f      	str	r7, [r5, #0]
 8007538:	e7b2      	b.n	80074a0 <__sflush_r+0x18>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	e7ae      	b.n	80074a2 <__sflush_r+0x1a>
 8007544:	690f      	ldr	r7, [r1, #16]
 8007546:	2f00      	cmp	r7, #0
 8007548:	d0aa      	beq.n	80074a0 <__sflush_r+0x18>
 800754a:	0793      	lsls	r3, r2, #30
 800754c:	bf18      	it	ne
 800754e:	2300      	movne	r3, #0
 8007550:	680e      	ldr	r6, [r1, #0]
 8007552:	bf08      	it	eq
 8007554:	694b      	ldreq	r3, [r1, #20]
 8007556:	1bf6      	subs	r6, r6, r7
 8007558:	600f      	str	r7, [r1, #0]
 800755a:	608b      	str	r3, [r1, #8]
 800755c:	2e00      	cmp	r6, #0
 800755e:	dd9f      	ble.n	80074a0 <__sflush_r+0x18>
 8007560:	4633      	mov	r3, r6
 8007562:	463a      	mov	r2, r7
 8007564:	4628      	mov	r0, r5
 8007566:	6a21      	ldr	r1, [r4, #32]
 8007568:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800756c:	47e0      	blx	ip
 800756e:	2800      	cmp	r0, #0
 8007570:	dc06      	bgt.n	8007580 <__sflush_r+0xf8>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	e790      	b.n	80074a2 <__sflush_r+0x1a>
 8007580:	4407      	add	r7, r0
 8007582:	1a36      	subs	r6, r6, r0
 8007584:	e7ea      	b.n	800755c <__sflush_r+0xd4>
 8007586:	bf00      	nop
 8007588:	20400001 	.word	0x20400001

0800758c <_fflush_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	690b      	ldr	r3, [r1, #16]
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	b913      	cbnz	r3, 800759c <_fflush_r+0x10>
 8007596:	2500      	movs	r5, #0
 8007598:	4628      	mov	r0, r5
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	b118      	cbz	r0, 80075a6 <_fflush_r+0x1a>
 800759e:	6983      	ldr	r3, [r0, #24]
 80075a0:	b90b      	cbnz	r3, 80075a6 <_fflush_r+0x1a>
 80075a2:	f000 f887 	bl	80076b4 <__sinit>
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <_fflush_r+0x6c>)
 80075a8:	429c      	cmp	r4, r3
 80075aa:	d11b      	bne.n	80075e4 <_fflush_r+0x58>
 80075ac:	686c      	ldr	r4, [r5, #4]
 80075ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0ef      	beq.n	8007596 <_fflush_r+0xa>
 80075b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075b8:	07d0      	lsls	r0, r2, #31
 80075ba:	d404      	bmi.n	80075c6 <_fflush_r+0x3a>
 80075bc:	0599      	lsls	r1, r3, #22
 80075be:	d402      	bmi.n	80075c6 <_fflush_r+0x3a>
 80075c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075c2:	f000 f915 	bl	80077f0 <__retarget_lock_acquire_recursive>
 80075c6:	4628      	mov	r0, r5
 80075c8:	4621      	mov	r1, r4
 80075ca:	f7ff ff5d 	bl	8007488 <__sflush_r>
 80075ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075d0:	4605      	mov	r5, r0
 80075d2:	07da      	lsls	r2, r3, #31
 80075d4:	d4e0      	bmi.n	8007598 <_fflush_r+0xc>
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	059b      	lsls	r3, r3, #22
 80075da:	d4dd      	bmi.n	8007598 <_fflush_r+0xc>
 80075dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075de:	f000 f908 	bl	80077f2 <__retarget_lock_release_recursive>
 80075e2:	e7d9      	b.n	8007598 <_fflush_r+0xc>
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <_fflush_r+0x70>)
 80075e6:	429c      	cmp	r4, r3
 80075e8:	d101      	bne.n	80075ee <_fflush_r+0x62>
 80075ea:	68ac      	ldr	r4, [r5, #8]
 80075ec:	e7df      	b.n	80075ae <_fflush_r+0x22>
 80075ee:	4b04      	ldr	r3, [pc, #16]	; (8007600 <_fflush_r+0x74>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	bf08      	it	eq
 80075f4:	68ec      	ldreq	r4, [r5, #12]
 80075f6:	e7da      	b.n	80075ae <_fflush_r+0x22>
 80075f8:	080085bc 	.word	0x080085bc
 80075fc:	080085dc 	.word	0x080085dc
 8007600:	0800859c 	.word	0x0800859c

08007604 <std>:
 8007604:	2300      	movs	r3, #0
 8007606:	b510      	push	{r4, lr}
 8007608:	4604      	mov	r4, r0
 800760a:	e9c0 3300 	strd	r3, r3, [r0]
 800760e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007612:	6083      	str	r3, [r0, #8]
 8007614:	8181      	strh	r1, [r0, #12]
 8007616:	6643      	str	r3, [r0, #100]	; 0x64
 8007618:	81c2      	strh	r2, [r0, #14]
 800761a:	6183      	str	r3, [r0, #24]
 800761c:	4619      	mov	r1, r3
 800761e:	2208      	movs	r2, #8
 8007620:	305c      	adds	r0, #92	; 0x5c
 8007622:	f7fd fd27 	bl	8005074 <memset>
 8007626:	4b05      	ldr	r3, [pc, #20]	; (800763c <std+0x38>)
 8007628:	6224      	str	r4, [r4, #32]
 800762a:	6263      	str	r3, [r4, #36]	; 0x24
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <std+0x3c>)
 800762e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <std+0x40>)
 8007632:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <std+0x44>)
 8007636:	6323      	str	r3, [r4, #48]	; 0x30
 8007638:	bd10      	pop	{r4, pc}
 800763a:	bf00      	nop
 800763c:	08007949 	.word	0x08007949
 8007640:	0800796b 	.word	0x0800796b
 8007644:	080079a3 	.word	0x080079a3
 8007648:	080079c7 	.word	0x080079c7

0800764c <_cleanup_r>:
 800764c:	4901      	ldr	r1, [pc, #4]	; (8007654 <_cleanup_r+0x8>)
 800764e:	f000 b8af 	b.w	80077b0 <_fwalk_reent>
 8007652:	bf00      	nop
 8007654:	0800758d 	.word	0x0800758d

08007658 <__sfmoreglue>:
 8007658:	2268      	movs	r2, #104	; 0x68
 800765a:	b570      	push	{r4, r5, r6, lr}
 800765c:	1e4d      	subs	r5, r1, #1
 800765e:	4355      	muls	r5, r2
 8007660:	460e      	mov	r6, r1
 8007662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007666:	f7ff fc0f 	bl	8006e88 <_malloc_r>
 800766a:	4604      	mov	r4, r0
 800766c:	b140      	cbz	r0, 8007680 <__sfmoreglue+0x28>
 800766e:	2100      	movs	r1, #0
 8007670:	e9c0 1600 	strd	r1, r6, [r0]
 8007674:	300c      	adds	r0, #12
 8007676:	60a0      	str	r0, [r4, #8]
 8007678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800767c:	f7fd fcfa 	bl	8005074 <memset>
 8007680:	4620      	mov	r0, r4
 8007682:	bd70      	pop	{r4, r5, r6, pc}

08007684 <__sfp_lock_acquire>:
 8007684:	4801      	ldr	r0, [pc, #4]	; (800768c <__sfp_lock_acquire+0x8>)
 8007686:	f000 b8b3 	b.w	80077f0 <__retarget_lock_acquire_recursive>
 800768a:	bf00      	nop
 800768c:	20001d69 	.word	0x20001d69

08007690 <__sfp_lock_release>:
 8007690:	4801      	ldr	r0, [pc, #4]	; (8007698 <__sfp_lock_release+0x8>)
 8007692:	f000 b8ae 	b.w	80077f2 <__retarget_lock_release_recursive>
 8007696:	bf00      	nop
 8007698:	20001d69 	.word	0x20001d69

0800769c <__sinit_lock_acquire>:
 800769c:	4801      	ldr	r0, [pc, #4]	; (80076a4 <__sinit_lock_acquire+0x8>)
 800769e:	f000 b8a7 	b.w	80077f0 <__retarget_lock_acquire_recursive>
 80076a2:	bf00      	nop
 80076a4:	20001d6a 	.word	0x20001d6a

080076a8 <__sinit_lock_release>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__sinit_lock_release+0x8>)
 80076aa:	f000 b8a2 	b.w	80077f2 <__retarget_lock_release_recursive>
 80076ae:	bf00      	nop
 80076b0:	20001d6a 	.word	0x20001d6a

080076b4 <__sinit>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	4604      	mov	r4, r0
 80076b8:	f7ff fff0 	bl	800769c <__sinit_lock_acquire>
 80076bc:	69a3      	ldr	r3, [r4, #24]
 80076be:	b11b      	cbz	r3, 80076c8 <__sinit+0x14>
 80076c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c4:	f7ff bff0 	b.w	80076a8 <__sinit_lock_release>
 80076c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076cc:	6523      	str	r3, [r4, #80]	; 0x50
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <__sinit+0x68>)
 80076d0:	4a13      	ldr	r2, [pc, #76]	; (8007720 <__sinit+0x6c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	bf08      	it	eq
 80076da:	2301      	moveq	r3, #1
 80076dc:	4620      	mov	r0, r4
 80076de:	bf08      	it	eq
 80076e0:	61a3      	streq	r3, [r4, #24]
 80076e2:	f000 f81f 	bl	8007724 <__sfp>
 80076e6:	6060      	str	r0, [r4, #4]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 f81b 	bl	8007724 <__sfp>
 80076ee:	60a0      	str	r0, [r4, #8]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 f817 	bl	8007724 <__sfp>
 80076f6:	2200      	movs	r2, #0
 80076f8:	2104      	movs	r1, #4
 80076fa:	60e0      	str	r0, [r4, #12]
 80076fc:	6860      	ldr	r0, [r4, #4]
 80076fe:	f7ff ff81 	bl	8007604 <std>
 8007702:	2201      	movs	r2, #1
 8007704:	2109      	movs	r1, #9
 8007706:	68a0      	ldr	r0, [r4, #8]
 8007708:	f7ff ff7c 	bl	8007604 <std>
 800770c:	2202      	movs	r2, #2
 800770e:	2112      	movs	r1, #18
 8007710:	68e0      	ldr	r0, [r4, #12]
 8007712:	f7ff ff77 	bl	8007604 <std>
 8007716:	2301      	movs	r3, #1
 8007718:	61a3      	str	r3, [r4, #24]
 800771a:	e7d1      	b.n	80076c0 <__sinit+0xc>
 800771c:	08008220 	.word	0x08008220
 8007720:	0800764d 	.word	0x0800764d

08007724 <__sfp>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	4607      	mov	r7, r0
 8007728:	f7ff ffac 	bl	8007684 <__sfp_lock_acquire>
 800772c:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <__sfp+0x84>)
 800772e:	681e      	ldr	r6, [r3, #0]
 8007730:	69b3      	ldr	r3, [r6, #24]
 8007732:	b913      	cbnz	r3, 800773a <__sfp+0x16>
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff ffbd 	bl	80076b4 <__sinit>
 800773a:	3648      	adds	r6, #72	; 0x48
 800773c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007740:	3b01      	subs	r3, #1
 8007742:	d503      	bpl.n	800774c <__sfp+0x28>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	b30b      	cbz	r3, 800778c <__sfp+0x68>
 8007748:	6836      	ldr	r6, [r6, #0]
 800774a:	e7f7      	b.n	800773c <__sfp+0x18>
 800774c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007750:	b9d5      	cbnz	r5, 8007788 <__sfp+0x64>
 8007752:	4b16      	ldr	r3, [pc, #88]	; (80077ac <__sfp+0x88>)
 8007754:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007758:	60e3      	str	r3, [r4, #12]
 800775a:	6665      	str	r5, [r4, #100]	; 0x64
 800775c:	f000 f847 	bl	80077ee <__retarget_lock_init_recursive>
 8007760:	f7ff ff96 	bl	8007690 <__sfp_lock_release>
 8007764:	2208      	movs	r2, #8
 8007766:	4629      	mov	r1, r5
 8007768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800776c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007770:	6025      	str	r5, [r4, #0]
 8007772:	61a5      	str	r5, [r4, #24]
 8007774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007778:	f7fd fc7c 	bl	8005074 <memset>
 800777c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007784:	4620      	mov	r0, r4
 8007786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007788:	3468      	adds	r4, #104	; 0x68
 800778a:	e7d9      	b.n	8007740 <__sfp+0x1c>
 800778c:	2104      	movs	r1, #4
 800778e:	4638      	mov	r0, r7
 8007790:	f7ff ff62 	bl	8007658 <__sfmoreglue>
 8007794:	4604      	mov	r4, r0
 8007796:	6030      	str	r0, [r6, #0]
 8007798:	2800      	cmp	r0, #0
 800779a:	d1d5      	bne.n	8007748 <__sfp+0x24>
 800779c:	f7ff ff78 	bl	8007690 <__sfp_lock_release>
 80077a0:	230c      	movs	r3, #12
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	e7ee      	b.n	8007784 <__sfp+0x60>
 80077a6:	bf00      	nop
 80077a8:	08008220 	.word	0x08008220
 80077ac:	ffff0001 	.word	0xffff0001

080077b0 <_fwalk_reent>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	4606      	mov	r6, r0
 80077b6:	4688      	mov	r8, r1
 80077b8:	2700      	movs	r7, #0
 80077ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077c2:	f1b9 0901 	subs.w	r9, r9, #1
 80077c6:	d505      	bpl.n	80077d4 <_fwalk_reent+0x24>
 80077c8:	6824      	ldr	r4, [r4, #0]
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	d1f7      	bne.n	80077be <_fwalk_reent+0xe>
 80077ce:	4638      	mov	r0, r7
 80077d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d4:	89ab      	ldrh	r3, [r5, #12]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d907      	bls.n	80077ea <_fwalk_reent+0x3a>
 80077da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077de:	3301      	adds	r3, #1
 80077e0:	d003      	beq.n	80077ea <_fwalk_reent+0x3a>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
 80077e6:	47c0      	blx	r8
 80077e8:	4307      	orrs	r7, r0
 80077ea:	3568      	adds	r5, #104	; 0x68
 80077ec:	e7e9      	b.n	80077c2 <_fwalk_reent+0x12>

080077ee <__retarget_lock_init_recursive>:
 80077ee:	4770      	bx	lr

080077f0 <__retarget_lock_acquire_recursive>:
 80077f0:	4770      	bx	lr

080077f2 <__retarget_lock_release_recursive>:
 80077f2:	4770      	bx	lr

080077f4 <__swhatbuf_r>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	460e      	mov	r6, r1
 80077f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fc:	4614      	mov	r4, r2
 80077fe:	2900      	cmp	r1, #0
 8007800:	461d      	mov	r5, r3
 8007802:	b096      	sub	sp, #88	; 0x58
 8007804:	da08      	bge.n	8007818 <__swhatbuf_r+0x24>
 8007806:	2200      	movs	r2, #0
 8007808:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	061a      	lsls	r2, r3, #24
 8007810:	d410      	bmi.n	8007834 <__swhatbuf_r+0x40>
 8007812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007816:	e00e      	b.n	8007836 <__swhatbuf_r+0x42>
 8007818:	466a      	mov	r2, sp
 800781a:	f000 f8fb 	bl	8007a14 <_fstat_r>
 800781e:	2800      	cmp	r0, #0
 8007820:	dbf1      	blt.n	8007806 <__swhatbuf_r+0x12>
 8007822:	9a01      	ldr	r2, [sp, #4]
 8007824:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007828:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800782c:	425a      	negs	r2, r3
 800782e:	415a      	adcs	r2, r3
 8007830:	602a      	str	r2, [r5, #0]
 8007832:	e7ee      	b.n	8007812 <__swhatbuf_r+0x1e>
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	2000      	movs	r0, #0
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	b016      	add	sp, #88	; 0x58
 800783c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007840 <__smakebuf_r>:
 8007840:	898b      	ldrh	r3, [r1, #12]
 8007842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007844:	079d      	lsls	r5, r3, #30
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
 800784a:	d507      	bpl.n	800785c <__smakebuf_r+0x1c>
 800784c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	2301      	movs	r3, #1
 8007856:	6163      	str	r3, [r4, #20]
 8007858:	b002      	add	sp, #8
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	466a      	mov	r2, sp
 800785e:	ab01      	add	r3, sp, #4
 8007860:	f7ff ffc8 	bl	80077f4 <__swhatbuf_r>
 8007864:	9900      	ldr	r1, [sp, #0]
 8007866:	4605      	mov	r5, r0
 8007868:	4630      	mov	r0, r6
 800786a:	f7ff fb0d 	bl	8006e88 <_malloc_r>
 800786e:	b948      	cbnz	r0, 8007884 <__smakebuf_r+0x44>
 8007870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007874:	059a      	lsls	r2, r3, #22
 8007876:	d4ef      	bmi.n	8007858 <__smakebuf_r+0x18>
 8007878:	f023 0303 	bic.w	r3, r3, #3
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	81a3      	strh	r3, [r4, #12]
 8007882:	e7e3      	b.n	800784c <__smakebuf_r+0xc>
 8007884:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <__smakebuf_r+0x7c>)
 8007886:	62b3      	str	r3, [r6, #40]	; 0x28
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	6020      	str	r0, [r4, #0]
 800788c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	9b00      	ldr	r3, [sp, #0]
 8007894:	6120      	str	r0, [r4, #16]
 8007896:	6163      	str	r3, [r4, #20]
 8007898:	9b01      	ldr	r3, [sp, #4]
 800789a:	b15b      	cbz	r3, 80078b4 <__smakebuf_r+0x74>
 800789c:	4630      	mov	r0, r6
 800789e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a2:	f000 f8c9 	bl	8007a38 <_isatty_r>
 80078a6:	b128      	cbz	r0, 80078b4 <__smakebuf_r+0x74>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	89a0      	ldrh	r0, [r4, #12]
 80078b6:	4305      	orrs	r5, r0
 80078b8:	81a5      	strh	r5, [r4, #12]
 80078ba:	e7cd      	b.n	8007858 <__smakebuf_r+0x18>
 80078bc:	0800764d 	.word	0x0800764d

080078c0 <_raise_r>:
 80078c0:	291f      	cmp	r1, #31
 80078c2:	b538      	push	{r3, r4, r5, lr}
 80078c4:	4604      	mov	r4, r0
 80078c6:	460d      	mov	r5, r1
 80078c8:	d904      	bls.n	80078d4 <_raise_r+0x14>
 80078ca:	2316      	movs	r3, #22
 80078cc:	6003      	str	r3, [r0, #0]
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078d6:	b112      	cbz	r2, 80078de <_raise_r+0x1e>
 80078d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078dc:	b94b      	cbnz	r3, 80078f2 <_raise_r+0x32>
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 f830 	bl	8007944 <_getpid_r>
 80078e4:	462a      	mov	r2, r5
 80078e6:	4601      	mov	r1, r0
 80078e8:	4620      	mov	r0, r4
 80078ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ee:	f000 b817 	b.w	8007920 <_kill_r>
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d00a      	beq.n	800790c <_raise_r+0x4c>
 80078f6:	1c59      	adds	r1, r3, #1
 80078f8:	d103      	bne.n	8007902 <_raise_r+0x42>
 80078fa:	2316      	movs	r3, #22
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	2001      	movs	r0, #1
 8007900:	e7e7      	b.n	80078d2 <_raise_r+0x12>
 8007902:	2400      	movs	r4, #0
 8007904:	4628      	mov	r0, r5
 8007906:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800790a:	4798      	blx	r3
 800790c:	2000      	movs	r0, #0
 800790e:	e7e0      	b.n	80078d2 <_raise_r+0x12>

08007910 <raise>:
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <raise+0xc>)
 8007912:	4601      	mov	r1, r0
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	f7ff bfd3 	b.w	80078c0 <_raise_r>
 800791a:	bf00      	nop
 800791c:	20000010 	.word	0x20000010

08007920 <_kill_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	2300      	movs	r3, #0
 8007924:	4d06      	ldr	r5, [pc, #24]	; (8007940 <_kill_r+0x20>)
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f7f9 fe75 	bl	800161c <_kill>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	d102      	bne.n	800793c <_kill_r+0x1c>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	b103      	cbz	r3, 800793c <_kill_r+0x1c>
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	20001d64 	.word	0x20001d64

08007944 <_getpid_r>:
 8007944:	f7f9 be68 	b.w	8001618 <_getpid>

08007948 <__sread>:
 8007948:	b510      	push	{r4, lr}
 800794a:	460c      	mov	r4, r1
 800794c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007950:	f000 f894 	bl	8007a7c <_read_r>
 8007954:	2800      	cmp	r0, #0
 8007956:	bfab      	itete	ge
 8007958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800795a:	89a3      	ldrhlt	r3, [r4, #12]
 800795c:	181b      	addge	r3, r3, r0
 800795e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007962:	bfac      	ite	ge
 8007964:	6563      	strge	r3, [r4, #84]	; 0x54
 8007966:	81a3      	strhlt	r3, [r4, #12]
 8007968:	bd10      	pop	{r4, pc}

0800796a <__swrite>:
 800796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800796e:	461f      	mov	r7, r3
 8007970:	898b      	ldrh	r3, [r1, #12]
 8007972:	4605      	mov	r5, r0
 8007974:	05db      	lsls	r3, r3, #23
 8007976:	460c      	mov	r4, r1
 8007978:	4616      	mov	r6, r2
 800797a:	d505      	bpl.n	8007988 <__swrite+0x1e>
 800797c:	2302      	movs	r3, #2
 800797e:	2200      	movs	r2, #0
 8007980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007984:	f000 f868 	bl	8007a58 <_lseek_r>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	4632      	mov	r2, r6
 800798c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	4628      	mov	r0, r5
 8007994:	463b      	mov	r3, r7
 8007996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800799a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800799e:	f000 b817 	b.w	80079d0 <_write_r>

080079a2 <__sseek>:
 80079a2:	b510      	push	{r4, lr}
 80079a4:	460c      	mov	r4, r1
 80079a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079aa:	f000 f855 	bl	8007a58 <_lseek_r>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	bf15      	itete	ne
 80079b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079be:	81a3      	strheq	r3, [r4, #12]
 80079c0:	bf18      	it	ne
 80079c2:	81a3      	strhne	r3, [r4, #12]
 80079c4:	bd10      	pop	{r4, pc}

080079c6 <__sclose>:
 80079c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ca:	f000 b813 	b.w	80079f4 <_close_r>
	...

080079d0 <_write_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	2200      	movs	r2, #0
 80079da:	4d05      	ldr	r5, [pc, #20]	; (80079f0 <_write_r+0x20>)
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7f9 fe3a 	bl	8001658 <_write>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_write_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_write_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	20001d64 	.word	0x20001d64

080079f4 <_close_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	2300      	movs	r3, #0
 80079f8:	4d05      	ldr	r5, [pc, #20]	; (8007a10 <_close_r+0x1c>)
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7f9 fe38 	bl	8001674 <_close>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_close_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_close_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	20001d64 	.word	0x20001d64

08007a14 <_fstat_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	2300      	movs	r3, #0
 8007a18:	4d06      	ldr	r5, [pc, #24]	; (8007a34 <_fstat_r+0x20>)
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	4611      	mov	r1, r2
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	f7f9 fe2a 	bl	800167a <_fstat>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d102      	bne.n	8007a30 <_fstat_r+0x1c>
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	b103      	cbz	r3, 8007a30 <_fstat_r+0x1c>
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	bd38      	pop	{r3, r4, r5, pc}
 8007a32:	bf00      	nop
 8007a34:	20001d64 	.word	0x20001d64

08007a38 <_isatty_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	4d05      	ldr	r5, [pc, #20]	; (8007a54 <_isatty_r+0x1c>)
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	f7f9 fe1e 	bl	8001684 <_isatty>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_isatty_r+0x1a>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_isatty_r+0x1a>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	20001d64 	.word	0x20001d64

08007a58 <_lseek_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	2200      	movs	r2, #0
 8007a62:	4d05      	ldr	r5, [pc, #20]	; (8007a78 <_lseek_r+0x20>)
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7f9 fe0e 	bl	8001688 <_lseek>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_lseek_r+0x1e>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_lseek_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20001d64 	.word	0x20001d64

08007a7c <_read_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	2200      	movs	r2, #0
 8007a86:	4d05      	ldr	r5, [pc, #20]	; (8007a9c <_read_r+0x20>)
 8007a88:	602a      	str	r2, [r5, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f7f9 fdd4 	bl	8001638 <_read>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_read_r+0x1e>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_read_r+0x1e>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20001d64 	.word	0x20001d64

08007aa0 <_init>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	bf00      	nop
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr

08007aac <_fini>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	bf00      	nop
 8007ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab2:	bc08      	pop	{r3}
 8007ab4:	469e      	mov	lr, r3
 8007ab6:	4770      	bx	lr

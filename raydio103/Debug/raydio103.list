
raydio103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  080088c8  080088c8  000188c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d94  08008d94  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008d94  08008d94  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d94  08008d94  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d94  08008d94  00018d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b8  200001e4  08008f80  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b9c  08008f80  00021b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0ff  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e02  00000000  00000000  0003b30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  00040680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bec6  00000000  00000000  00041b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020586  00000000  00000000  0005d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f1e  00000000  00000000  0007df54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00114e72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  00114f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00015076  00000000  00000000  00119b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080088b0 	.word	0x080088b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080088b0 	.word	0x080088b0

08000150 <arm_bitreversal_32>:
 8000150:	1c4b      	adds	r3, r1, #1
 8000152:	2b01      	cmp	r3, #1
 8000154:	bf98      	it	ls
 8000156:	4770      	bxls	lr
 8000158:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800015c:	1c91      	adds	r1, r2, #2
 800015e:	089b      	lsrs	r3, r3, #2

08000160 <arm_bitreversal_32_0>:
 8000160:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000164:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000168:	880a      	ldrh	r2, [r1, #0]
 800016a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800016e:	4480      	add	r8, r0
 8000170:	4481      	add	r9, r0
 8000172:	4402      	add	r2, r0
 8000174:	4484      	add	ip, r0
 8000176:	f8d9 7000 	ldr.w	r7, [r9]
 800017a:	f8d8 6000 	ldr.w	r6, [r8]
 800017e:	6815      	ldr	r5, [r2, #0]
 8000180:	f8dc 4000 	ldr.w	r4, [ip]
 8000184:	f8c9 6000 	str.w	r6, [r9]
 8000188:	f8c8 7000 	str.w	r7, [r8]
 800018c:	f8cc 5000 	str.w	r5, [ip]
 8000190:	6014      	str	r4, [r2, #0]
 8000192:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000196:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800019a:	6855      	ldr	r5, [r2, #4]
 800019c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80001a0:	f8c9 6004 	str.w	r6, [r9, #4]
 80001a4:	f8c8 7004 	str.w	r7, [r8, #4]
 80001a8:	f8cc 5004 	str.w	r5, [ip, #4]
 80001ac:	6054      	str	r4, [r2, #4]
 80001ae:	3108      	adds	r1, #8
 80001b0:	3b01      	subs	r3, #1
 80001b2:	d1d5      	bne.n	8000160 <arm_bitreversal_32_0>
 80001b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80001b8:	4770      	bx	lr

080001ba <arm_bitreversal_16>:
 80001ba:	1c4b      	adds	r3, r1, #1
 80001bc:	2b01      	cmp	r3, #1
 80001be:	bf98      	it	ls
 80001c0:	4770      	bxls	lr
 80001c2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001c6:	1c91      	adds	r1, r2, #2
 80001c8:	089b      	lsrs	r3, r3, #2

080001ca <arm_bitreversal_16_0>:
 80001ca:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ce:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001d2:	880a      	ldrh	r2, [r1, #0]
 80001d4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001d8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80001dc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80001e0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80001e4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80001e8:	f8d9 7000 	ldr.w	r7, [r9]
 80001ec:	f8d8 6000 	ldr.w	r6, [r8]
 80001f0:	6815      	ldr	r5, [r2, #0]
 80001f2:	f8dc 4000 	ldr.w	r4, [ip]
 80001f6:	f8c9 6000 	str.w	r6, [r9]
 80001fa:	f8c8 7000 	str.w	r7, [r8]
 80001fe:	f8cc 5000 	str.w	r5, [ip]
 8000202:	6014      	str	r4, [r2, #0]
 8000204:	3108      	adds	r1, #8
 8000206:	3b01      	subs	r3, #1
 8000208:	d1df      	bne.n	80001ca <arm_bitreversal_16_0>
 800020a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800020e:	4770      	bx	lr

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca8:	d2ed      	bcs.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fmul>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d06f      	beq.n	8000efc <__aeabi_fmul+0xf8>
 8000e1c:	441a      	add	r2, r3
 8000e1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e22:	0240      	lsls	r0, r0, #9
 8000e24:	bf18      	it	ne
 8000e26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e2a:	d01e      	beq.n	8000e6a <__aeabi_fmul+0x66>
 8000e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e38:	fba0 3101 	umull	r3, r1, r0, r1
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e44:	bf3e      	ittt	cc
 8000e46:	0049      	lslcc	r1, r1, #1
 8000e48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	ea40 0001 	orr.w	r0, r0, r1
 8000e52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e56:	2afd      	cmp	r2, #253	; 0xfd
 8000e58:	d81d      	bhi.n	8000e96 <__aeabi_fmul+0x92>
 8000e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e72:	bf08      	it	eq
 8000e74:	0249      	lsleq	r1, r1, #9
 8000e76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e7e:	3a7f      	subs	r2, #127	; 0x7f
 8000e80:	bfc2      	ittt	gt
 8000e82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8a:	4770      	bxgt	lr
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	3a01      	subs	r2, #1
 8000e96:	dc5d      	bgt.n	8000f54 <__aeabi_fmul+0x150>
 8000e98:	f112 0f19 	cmn.w	r2, #25
 8000e9c:	bfdc      	itt	le
 8000e9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ea2:	4770      	bxle	lr
 8000ea4:	f1c2 0200 	rsb	r2, r2, #0
 8000ea8:	0041      	lsls	r1, r0, #1
 8000eaa:	fa21 f102 	lsr.w	r1, r1, r2
 8000eae:	f1c2 0220 	rsb	r2, r2, #32
 8000eb2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eba:	f140 0000 	adc.w	r0, r0, #0
 8000ebe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ec2:	bf08      	it	eq
 8000ec4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec8:	4770      	bx	lr
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fmul+0xce>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xe6>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e78f      	b.n	8000e1c <__aeabi_fmul+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	bf18      	it	ne
 8000f06:	ea93 0f0c 	teqne	r3, ip
 8000f0a:	d00a      	beq.n	8000f22 <__aeabi_fmul+0x11e>
 8000f0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f10:	bf18      	it	ne
 8000f12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	d1d8      	bne.n	8000eca <__aeabi_fmul+0xc6>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	4770      	bx	lr
 8000f22:	f090 0f00 	teq	r0, #0
 8000f26:	bf17      	itett	ne
 8000f28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f2c:	4608      	moveq	r0, r1
 8000f2e:	f091 0f00 	teqne	r1, #0
 8000f32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f36:	d014      	beq.n	8000f62 <__aeabi_fmul+0x15e>
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d101      	bne.n	8000f42 <__aeabi_fmul+0x13e>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	d10f      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f42:	ea93 0f0c 	teq	r3, ip
 8000f46:	d103      	bne.n	8000f50 <__aeabi_fmul+0x14c>
 8000f48:	024b      	lsls	r3, r1, #9
 8000f4a:	bf18      	it	ne
 8000f4c:	4608      	movne	r0, r1
 8000f4e:	d108      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f50:	ea80 0001 	eor.w	r0, r0, r1
 8000f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f60:	4770      	bx	lr
 8000f62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bx	lr

08000f6c <__aeabi_fdiv>:
 8000f6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f74:	bf1e      	ittt	ne
 8000f76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f7a:	ea92 0f0c 	teqne	r2, ip
 8000f7e:	ea93 0f0c 	teqne	r3, ip
 8000f82:	d069      	beq.n	8001058 <__aeabi_fdiv+0xec>
 8000f84:	eba2 0203 	sub.w	r2, r2, r3
 8000f88:	ea80 0c01 	eor.w	ip, r0, r1
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f92:	d037      	beq.n	8001004 <__aeabi_fdiv+0x98>
 8000f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fa0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	bf38      	it	cc
 8000fa8:	005b      	lslcc	r3, r3, #1
 8000faa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	bf24      	itt	cs
 8000fb6:	1a5b      	subcs	r3, r3, r1
 8000fb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fbc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fc6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fce:	bf24      	itt	cs
 8000fd0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fe2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	bf18      	it	ne
 8000fea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fee:	d1e0      	bne.n	8000fb2 <__aeabi_fdiv+0x46>
 8000ff0:	2afd      	cmp	r2, #253	; 0xfd
 8000ff2:	f63f af50 	bhi.w	8000e96 <__aeabi_fmul+0x92>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ffc:	bf08      	it	eq
 8000ffe:	f020 0001 	biceq.w	r0, r0, #1
 8001002:	4770      	bx	lr
 8001004:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001008:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800100c:	327f      	adds	r2, #127	; 0x7f
 800100e:	bfc2      	ittt	gt
 8001010:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001014:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001018:	4770      	bxgt	lr
 800101a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	3a01      	subs	r2, #1
 8001024:	e737      	b.n	8000e96 <__aeabi_fmul+0x92>
 8001026:	f092 0f00 	teq	r2, #0
 800102a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800102e:	bf02      	ittt	eq
 8001030:	0040      	lsleq	r0, r0, #1
 8001032:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001036:	3a01      	subeq	r2, #1
 8001038:	d0f9      	beq.n	800102e <__aeabi_fdiv+0xc2>
 800103a:	ea40 000c 	orr.w	r0, r0, ip
 800103e:	f093 0f00 	teq	r3, #0
 8001042:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0049      	lsleq	r1, r1, #1
 800104a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800104e:	3b01      	subeq	r3, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xda>
 8001052:	ea41 010c 	orr.w	r1, r1, ip
 8001056:	e795      	b.n	8000f84 <__aeabi_fdiv+0x18>
 8001058:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800105c:	ea92 0f0c 	teq	r2, ip
 8001060:	d108      	bne.n	8001074 <__aeabi_fdiv+0x108>
 8001062:	0242      	lsls	r2, r0, #9
 8001064:	f47f af7d 	bne.w	8000f62 <__aeabi_fmul+0x15e>
 8001068:	ea93 0f0c 	teq	r3, ip
 800106c:	f47f af70 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001070:	4608      	mov	r0, r1
 8001072:	e776      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	d104      	bne.n	8001084 <__aeabi_fdiv+0x118>
 800107a:	024b      	lsls	r3, r1, #9
 800107c:	f43f af4c 	beq.w	8000f18 <__aeabi_fmul+0x114>
 8001080:	4608      	mov	r0, r1
 8001082:	e76e      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001084:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001088:	bf18      	it	ne
 800108a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800108e:	d1ca      	bne.n	8001026 <__aeabi_fdiv+0xba>
 8001090:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001094:	f47f af5c 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001098:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800109c:	f47f af3c 	bne.w	8000f18 <__aeabi_fmul+0x114>
 80010a0:	e75f      	b.n	8000f62 <__aeabi_fmul+0x15e>
 80010a2:	bf00      	nop

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010f4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	2400      	movs	r4, #0
 80010f8:	9404      	str	r4, [sp, #16]
 80010fa:	9405      	str	r4, [sp, #20]
 80010fc:	9406      	str	r4, [sp, #24]
 80010fe:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001102:	699a      	ldr	r2, [r3, #24]
 8001104:	f042 0210 	orr.w	r2, r2, #16
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	699a      	ldr	r2, [r3, #24]
 800110c:	f002 0210 	and.w	r2, r2, #16
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	f042 0220 	orr.w	r2, r2, #32
 800111a:	619a      	str	r2, [r3, #24]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	f002 0220 	and.w	r2, r2, #32
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	f042 0204 	orr.w	r2, r2, #4
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	f002 0204 	and.w	r2, r2, #4
 8001134:	9202      	str	r2, [sp, #8]
 8001136:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	f042 0208 	orr.w	r2, r2, #8
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 800114a:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80011c4 <MX_GPIO_Init+0xd4>
 800114e:	4622      	mov	r2, r4
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4648      	mov	r0, r9
 8001156:	f001 fb5f 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN_LCD_CS_Pin|PIN_LCD_DC_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800115a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80011c8 <MX_GPIO_Init+0xd8>
 800115e:	4622      	mov	r2, r4
 8001160:	f240 3103 	movw	r1, #771	; 0x303
 8001164:	4640      	mov	r0, r8
 8001166:	f001 fb57 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_EXT_GPIO_Port, PIN_CS_EXT_Pin, GPIO_PIN_RESET);
 800116a:	4f18      	ldr	r7, [pc, #96]	; (80011cc <MX_GPIO_Init+0xdc>)
 800116c:	4622      	mov	r2, r4
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4638      	mov	r0, r7
 8001174:	f001 fb50 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2601      	movs	r6, #1
 8001180:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2502      	movs	r5, #2
 8001186:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001188:	a904      	add	r1, sp, #16
 800118a:	4648      	mov	r0, r9
 800118c:	f001 fa32 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_LCD_CS_Pin PIN_LCD_DC_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = PIN_LCD_CS_Pin|PIN_LCD_DC_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001190:	f240 3303 	movw	r3, #771	; 0x303
 8001194:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	a904      	add	r1, sp, #16
 800119e:	4640      	mov	r0, r8
 80011a0:	f001 fa28 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_CS_EXT_Pin */
  GPIO_InitStruct.Pin = PIN_CS_EXT_Pin;
 80011a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(PIN_CS_EXT_GPIO_Port, &GPIO_InitStruct);
 80011b0:	a904      	add	r1, sp, #16
 80011b2:	4638      	mov	r0, r7
 80011b4:	f001 fa1e 	bl	80025f4 <HAL_GPIO_Init>

}
 80011b8:	b009      	add	sp, #36	; 0x24
 80011ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40010800 	.word	0x40010800

080011d0 <MX_DMA_Init>:
{
 80011d0:	b500      	push	{lr}
 80011d2:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_DMA_Init+0x70>)
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	f042 0201 	orr.w	r2, r2, #1
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	4611      	mov	r1, r2
 80011ec:	200b      	movs	r0, #11
 80011ee:	f001 f811 	bl	8002214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011f2:	200b      	movs	r0, #11
 80011f4:	f001 f846 	bl	8002284 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	4611      	mov	r1, r2
 80011fc:	200c      	movs	r0, #12
 80011fe:	f001 f809 	bl	8002214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001202:	200c      	movs	r0, #12
 8001204:	f001 f83e 	bl	8002284 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	4611      	mov	r1, r2
 800120c:	200d      	movs	r0, #13
 800120e:	f001 f801 	bl	8002214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001212:	200d      	movs	r0, #13
 8001214:	f001 f836 	bl	8002284 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	4611      	mov	r1, r2
 800121c:	200e      	movs	r0, #14
 800121e:	f000 fff9 	bl	8002214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001222:	200e      	movs	r0, #14
 8001224:	f001 f82e 	bl	8002284 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	4611      	mov	r1, r2
 800122c:	2010      	movs	r0, #16
 800122e:	f000 fff1 	bl	8002214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001232:	2010      	movs	r0, #16
 8001234:	f001 f826 	bl	8002284 <HAL_NVIC_EnableIRQ>
}
 8001238:	b003      	add	sp, #12
 800123a:	f85d fb04 	ldr.w	pc, [sp], #4
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <everythingElse>:
	if (!elseDone){
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <everythingElse+0x30>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b993      	cbnz	r3, 8001270 <everythingElse+0x2c>
void everythingElse(void){
 800124a:	b500      	push	{lr}
 800124c:	b091      	sub	sp, #68	; 0x44
	char str[64] = "hello!\n";
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <everythingElse+0x34>)
 8001250:	466b      	mov	r3, sp
 8001252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001256:	e883 0003 	stmia.w	r3, {r0, r1}
 800125a:	2238      	movs	r2, #56	; 0x38
 800125c:	2100      	movs	r1, #0
 800125e:	a802      	add	r0, sp, #8
 8001260:	f004 fe10 	bl	8005e84 <memset>
	elseDone = 1;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <everythingElse+0x30>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
}
 800126a:	b011      	add	sp, #68	; 0x44
 800126c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000200 	.word	0x20000200
 8001278:	080088c8 	.word	0x080088c8

0800127c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127e:	e7fe      	b.n	800127e <Error_Handler+0x2>

08001280 <MX_ADC1_Init>:
{
 8001280:	b500      	push	{lr}
 8001282:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001284:	2300      	movs	r3, #0
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800128c:	4816      	ldr	r0, [pc, #88]	; (80012e8 <MX_ADC1_Init+0x68>)
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <MX_ADC1_Init+0x6c>)
 8001290:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001296:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001298:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 800129c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012a0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a8:	f000 ff1e 	bl	80020e8 <HAL_ADC_Init>
 80012ac:	b9b0      	cbnz	r0, 80012dc <MX_ADC1_Init+0x5c>
  sConfig.Channel = ADC_CHANNEL_0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80012b6:	2306      	movs	r3, #6
 80012b8:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ba:	a901      	add	r1, sp, #4
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <MX_ADC1_Init+0x68>)
 80012be:	f000 fd69 	bl	8001d94 <HAL_ADC_ConfigChannel>
 80012c2:	b968      	cbnz	r0, 80012e0 <MX_ADC1_Init+0x60>
  sConfig.Channel = ADC_CHANNEL_1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	a901      	add	r1, sp, #4
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_ADC1_Init+0x68>)
 80012d0:	f000 fd60 	bl	8001d94 <HAL_ADC_ConfigChannel>
 80012d4:	b930      	cbnz	r0, 80012e4 <MX_ADC1_Init+0x64>
}
 80012d6:	b005      	add	sp, #20
 80012d8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012dc:	f7ff ffce 	bl	800127c <Error_Handler>
    Error_Handler();
 80012e0:	f7ff ffcc 	bl	800127c <Error_Handler>
    Error_Handler();
 80012e4:	f7ff ffca 	bl	800127c <Error_Handler>
 80012e8:	20000204 	.word	0x20000204
 80012ec:	40012400 	.word	0x40012400

080012f0 <MX_TIM1_Init>:
{
 80012f0:	b510      	push	{r4, lr}
 80012f2:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f4:	2400      	movs	r4, #0
 80012f6:	9412      	str	r4, [sp, #72]	; 0x48
 80012f8:	9413      	str	r4, [sp, #76]	; 0x4c
 80012fa:	9414      	str	r4, [sp, #80]	; 0x50
 80012fc:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	9410      	str	r4, [sp, #64]	; 0x40
 8001300:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	9409      	str	r4, [sp, #36]	; 0x24
 8001304:	940a      	str	r4, [sp, #40]	; 0x28
 8001306:	940b      	str	r4, [sp, #44]	; 0x2c
 8001308:	940c      	str	r4, [sp, #48]	; 0x30
 800130a:	940d      	str	r4, [sp, #52]	; 0x34
 800130c:	940e      	str	r4, [sp, #56]	; 0x38
 800130e:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001310:	2220      	movs	r2, #32
 8001312:	4621      	mov	r1, r4
 8001314:	a801      	add	r0, sp, #4
 8001316:	f004 fdb5 	bl	8005e84 <memset>
  htim1.Instance = TIM1;
 800131a:	483a      	ldr	r0, [pc, #232]	; (8001404 <MX_TIM1_Init+0x114>)
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <MX_TIM1_Init+0x118>)
 800131e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 2-1;
 8001320:	2301      	movs	r3, #1
 8001322:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 2048-1;
 8001326:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800132a:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800132e:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001334:	f002 fb84 	bl	8003a40 <HAL_TIM_Base_Init>
 8001338:	2800      	cmp	r0, #0
 800133a:	d150      	bne.n	80013de <MX_TIM1_Init+0xee>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001342:	a912      	add	r1, sp, #72	; 0x48
 8001344:	482f      	ldr	r0, [pc, #188]	; (8001404 <MX_TIM1_Init+0x114>)
 8001346:	f002 fc79 	bl	8003c3c <HAL_TIM_ConfigClockSource>
 800134a:	2800      	cmp	r0, #0
 800134c:	d149      	bne.n	80013e2 <MX_TIM1_Init+0xf2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800134e:	482d      	ldr	r0, [pc, #180]	; (8001404 <MX_TIM1_Init+0x114>)
 8001350:	f002 fba2 	bl	8003a98 <HAL_TIM_PWM_Init>
 8001354:	2800      	cmp	r0, #0
 8001356:	d146      	bne.n	80013e6 <MX_TIM1_Init+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001358:	2310      	movs	r3, #16
 800135a:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001360:	a910      	add	r1, sp, #64	; 0x40
 8001362:	4828      	ldr	r0, [pc, #160]	; (8001404 <MX_TIM1_Init+0x114>)
 8001364:	f002 fee2 	bl	800412c <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	2800      	cmp	r0, #0
 800136a:	d13e      	bne.n	80013ea <MX_TIM1_Init+0xfa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001370:	2200      	movs	r2, #0
 8001372:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001376:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137a:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137c:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	a909      	add	r1, sp, #36	; 0x24
 8001380:	4820      	ldr	r0, [pc, #128]	; (8001404 <MX_TIM1_Init+0x114>)
 8001382:	f002 fbe7 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 8001386:	2800      	cmp	r0, #0
 8001388:	d131      	bne.n	80013ee <MX_TIM1_Init+0xfe>
  sConfigOC.Pulse = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138e:	2204      	movs	r2, #4
 8001390:	a909      	add	r1, sp, #36	; 0x24
 8001392:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_TIM1_Init+0x114>)
 8001394:	f002 fbde 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 8001398:	bb58      	cbnz	r0, 80013f2 <MX_TIM1_Init+0x102>
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800139e:	2208      	movs	r2, #8
 80013a0:	a909      	add	r1, sp, #36	; 0x24
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_TIM1_Init+0x114>)
 80013a4:	f002 fbd6 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	bb28      	cbnz	r0, 80013f6 <MX_TIM1_Init+0x106>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013aa:	220c      	movs	r2, #12
 80013ac:	a909      	add	r1, sp, #36	; 0x24
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <MX_TIM1_Init+0x114>)
 80013b0:	f002 fbd0 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	bb08      	cbnz	r0, 80013fa <MX_TIM1_Init+0x10a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ba:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013bc:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013be:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c0:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c6:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c8:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ca:	a901      	add	r1, sp, #4
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM1_Init+0x114>)
 80013ce:	f002 fee3 	bl	8004198 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d2:	b9a0      	cbnz	r0, 80013fe <MX_TIM1_Init+0x10e>
  HAL_TIM_MspPostInit(&htim1);
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <MX_TIM1_Init+0x114>)
 80013d6:	f000 fb0d 	bl	80019f4 <HAL_TIM_MspPostInit>
}
 80013da:	b016      	add	sp, #88	; 0x58
 80013dc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013de:	f7ff ff4d 	bl	800127c <Error_Handler>
    Error_Handler();
 80013e2:	f7ff ff4b 	bl	800127c <Error_Handler>
    Error_Handler();
 80013e6:	f7ff ff49 	bl	800127c <Error_Handler>
    Error_Handler();
 80013ea:	f7ff ff47 	bl	800127c <Error_Handler>
    Error_Handler();
 80013ee:	f7ff ff45 	bl	800127c <Error_Handler>
    Error_Handler();
 80013f2:	f7ff ff43 	bl	800127c <Error_Handler>
    Error_Handler();
 80013f6:	f7ff ff41 	bl	800127c <Error_Handler>
    Error_Handler();
 80013fa:	f7ff ff3f 	bl	800127c <Error_Handler>
    Error_Handler();
 80013fe:	f7ff ff3d 	bl	800127c <Error_Handler>
 8001402:	bf00      	nop
 8001404:	20000464 	.word	0x20000464
 8001408:	40012c00 	.word	0x40012c00

0800140c <MX_SPI1_Init>:
{
 800140c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <MX_SPI1_Init+0x3c>)
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_SPI1_Init+0x40>)
 8001412:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001414:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001418:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	2300      	movs	r3, #0
 800141c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800141e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001420:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001422:	2201      	movs	r2, #1
 8001424:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800142c:	2230      	movs	r2, #48	; 0x30
 800142e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001430:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001432:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001436:	230a      	movs	r3, #10
 8001438:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800143a:	f001 ff0b 	bl	8003254 <HAL_SPI_Init>
 800143e:	b900      	cbnz	r0, 8001442 <MX_SPI1_Init+0x36>
}
 8001440:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001442:	f7ff ff1b 	bl	800127c <Error_Handler>
 8001446:	bf00      	nop
 8001448:	2000040c 	.word	0x2000040c
 800144c:	40013000 	.word	0x40013000

08001450 <MX_USART1_UART_Init>:
{
 8001450:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001452:	480a      	ldr	r0, [pc, #40]	; (800147c <MX_USART1_UART_Init+0x2c>)
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_USART1_UART_Init+0x30>)
 8001456:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001458:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800145c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	2300      	movs	r3, #0
 8001460:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001462:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001464:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001466:	220c      	movs	r2, #12
 8001468:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146e:	f002 ff4f 	bl	8004310 <HAL_UART_Init>
 8001472:	b900      	cbnz	r0, 8001476 <MX_USART1_UART_Init+0x26>
}
 8001474:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001476:	f7ff ff01 	bl	800127c <Error_Handler>
 800147a:	bf00      	nop
 800147c:	200004f4 	.word	0x200004f4
 8001480:	40013800 	.word	0x40013800

08001484 <MX_TIM2_Init>:
{
 8001484:	b500      	push	{lr}
 8001486:	b093      	sub	sp, #76	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001488:	2300      	movs	r3, #0
 800148a:	930e      	str	r3, [sp, #56]	; 0x38
 800148c:	930f      	str	r3, [sp, #60]	; 0x3c
 800148e:	9310      	str	r3, [sp, #64]	; 0x40
 8001490:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001492:	9309      	str	r3, [sp, #36]	; 0x24
 8001494:	930a      	str	r3, [sp, #40]	; 0x28
 8001496:	930b      	str	r3, [sp, #44]	; 0x2c
 8001498:	930c      	str	r3, [sp, #48]	; 0x30
 800149a:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	9307      	str	r3, [sp, #28]
 800149e:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	9304      	str	r3, [sp, #16]
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 80014ae:	4824      	ldr	r0, [pc, #144]	; (8001540 <MX_TIM2_Init+0xbc>)
 80014b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 2-1;
 80014b6:	2201      	movs	r2, #1
 80014b8:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 2048-1;
 80014bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014c0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c6:	f002 fabb 	bl	8003a40 <HAL_TIM_Base_Init>
 80014ca:	bb68      	cbnz	r0, 8001528 <MX_TIM2_Init+0xa4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d2:	a90e      	add	r1, sp, #56	; 0x38
 80014d4:	481a      	ldr	r0, [pc, #104]	; (8001540 <MX_TIM2_Init+0xbc>)
 80014d6:	f002 fbb1 	bl	8003c3c <HAL_TIM_ConfigClockSource>
 80014da:	bb38      	cbnz	r0, 800152c <MX_TIM2_Init+0xa8>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <MX_TIM2_Init+0xbc>)
 80014de:	f002 fadb 	bl	8003a98 <HAL_TIM_PWM_Init>
 80014e2:	bb28      	cbnz	r0, 8001530 <MX_TIM2_Init+0xac>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80014e4:	2306      	movs	r3, #6
 80014e6:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80014ec:	a909      	add	r1, sp, #36	; 0x24
 80014ee:	4814      	ldr	r0, [pc, #80]	; (8001540 <MX_TIM2_Init+0xbc>)
 80014f0:	f002 fc58 	bl	8003da4 <HAL_TIM_SlaveConfigSynchro>
 80014f4:	b9f0      	cbnz	r0, 8001534 <MX_TIM2_Init+0xb0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80014f6:	2310      	movs	r3, #16
 80014f8:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fe:	a907      	add	r1, sp, #28
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <MX_TIM2_Init+0xbc>)
 8001502:	f002 fe13 	bl	800412c <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	b9b8      	cbnz	r0, 8001538 <MX_TIM2_Init+0xb4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001508:	2360      	movs	r3, #96	; 0x60
 800150a:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 1;
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	2204      	movs	r2, #4
 8001518:	4669      	mov	r1, sp
 800151a:	4809      	ldr	r0, [pc, #36]	; (8001540 <MX_TIM2_Init+0xbc>)
 800151c:	f002 fb1a 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 8001520:	b960      	cbnz	r0, 800153c <MX_TIM2_Init+0xb8>
}
 8001522:	b013      	add	sp, #76	; 0x4c
 8001524:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001528:	f7ff fea8 	bl	800127c <Error_Handler>
    Error_Handler();
 800152c:	f7ff fea6 	bl	800127c <Error_Handler>
    Error_Handler();
 8001530:	f7ff fea4 	bl	800127c <Error_Handler>
    Error_Handler();
 8001534:	f7ff fea2 	bl	800127c <Error_Handler>
    Error_Handler();
 8001538:	f7ff fea0 	bl	800127c <Error_Handler>
    Error_Handler();
 800153c:	f7ff fe9e 	bl	800127c <Error_Handler>
 8001540:	200004ac 	.word	0x200004ac

08001544 <MX_ADC2_Init>:
{
 8001544:	b500      	push	{lr}
 8001546:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001548:	2300      	movs	r3, #0
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	9302      	str	r3, [sp, #8]
 800154e:	9303      	str	r3, [sp, #12]
  hadc2.Instance = ADC2;
 8001550:	4810      	ldr	r0, [pc, #64]	; (8001594 <MX_ADC2_Init+0x50>)
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <MX_ADC2_Init+0x54>)
 8001554:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001556:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001558:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800155a:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001560:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001562:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001564:	2301      	movs	r3, #1
 8001566:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001568:	f000 fdbe 	bl	80020e8 <HAL_ADC_Init>
 800156c:	b968      	cbnz	r0, 800158a <MX_ADC2_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_4;
 800156e:	2304      	movs	r3, #4
 8001570:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001572:	2301      	movs	r3, #1
 8001574:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001576:	2300      	movs	r3, #0
 8001578:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800157a:	a901      	add	r1, sp, #4
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_ADC2_Init+0x50>)
 800157e:	f000 fc09 	bl	8001d94 <HAL_ADC_ConfigChannel>
 8001582:	b920      	cbnz	r0, 800158e <MX_ADC2_Init+0x4a>
}
 8001584:	b005      	add	sp, #20
 8001586:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800158a:	f7ff fe77 	bl	800127c <Error_Handler>
    Error_Handler();
 800158e:	f7ff fe75 	bl	800127c <Error_Handler>
 8001592:	bf00      	nop
 8001594:	20000234 	.word	0x20000234
 8001598:	40012800 	.word	0x40012800

0800159c <MX_I2C2_Init>:
{
 800159c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800159e:	480a      	ldr	r0, [pc, #40]	; (80015c8 <MX_I2C2_Init+0x2c>)
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_I2C2_Init+0x30>)
 80015a2:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_I2C2_Init+0x34>)
 80015a6:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a8:	2300      	movs	r3, #0
 80015aa:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015ac:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b2:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b4:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b8:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015bc:	f001 f932 	bl	8002824 <HAL_I2C_Init>
 80015c0:	b900      	cbnz	r0, 80015c4 <MX_I2C2_Init+0x28>
}
 80015c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015c4:	f7ff fe5a 	bl	800127c <Error_Handler>
 80015c8:	200003b8 	.word	0x200003b8
 80015cc:	40005800 	.word	0x40005800
 80015d0:	000186a0 	.word	0x000186a0

080015d4 <SystemClock_Config>:
{
 80015d4:	b500      	push	{lr}
 80015d6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d8:	2228      	movs	r2, #40	; 0x28
 80015da:	2100      	movs	r1, #0
 80015dc:	eb0d 0002 	add.w	r0, sp, r2
 80015e0:	f004 fc50 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	2300      	movs	r3, #0
 80015e6:	9305      	str	r3, [sp, #20]
 80015e8:	9306      	str	r3, [sp, #24]
 80015ea:	9307      	str	r3, [sp, #28]
 80015ec:	9308      	str	r3, [sp, #32]
 80015ee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	9303      	str	r3, [sp, #12]
 80015f6:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f8:	2201      	movs	r2, #1
 80015fa:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001600:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001602:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001604:	2202      	movs	r2, #2
 8001606:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001608:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800160a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800160e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	a80a      	add	r0, sp, #40	; 0x28
 8001612:	f001 f9fb 	bl	8002a0c <HAL_RCC_OscConfig>
 8001616:	b9b8      	cbnz	r0, 8001648 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	230f      	movs	r3, #15
 800161a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2102      	movs	r1, #2
 800161e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001624:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001628:	a805      	add	r0, sp, #20
 800162a:	f001 fc2f 	bl	8002e8c <HAL_RCC_ClockConfig>
 800162e:	b968      	cbnz	r0, 800164c <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001630:	2302      	movs	r3, #2
 8001632:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001638:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163a:	a801      	add	r0, sp, #4
 800163c:	f001 fd02 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8001640:	b930      	cbnz	r0, 8001650 <SystemClock_Config+0x7c>
}
 8001642:	b015      	add	sp, #84	; 0x54
 8001644:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001648:	f7ff fe18 	bl	800127c <Error_Handler>
    Error_Handler();
 800164c:	f7ff fe16 	bl	800127c <Error_Handler>
    Error_Handler();
 8001650:	f7ff fe14 	bl	800127c <Error_Handler>

08001654 <main>:
{
 8001654:	b508      	push	{r3, lr}
  HAL_Init();
 8001656:	f000 fb29 	bl	8001cac <HAL_Init>
  SystemClock_Config();
 800165a:	f7ff ffbb 	bl	80015d4 <SystemClock_Config>
  MX_GPIO_Init();
 800165e:	f7ff fd47 	bl	80010f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001662:	f7ff fdb5 	bl	80011d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001666:	f7ff fe0b 	bl	8001280 <MX_ADC1_Init>
  MX_TIM1_Init();
 800166a:	f7ff fe41 	bl	80012f0 <MX_TIM1_Init>
  MX_SPI1_Init();
 800166e:	f7ff fecd 	bl	800140c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001672:	f7ff feed 	bl	8001450 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001676:	f7ff ff05 	bl	8001484 <MX_TIM2_Init>
  MX_ADC2_Init();
 800167a:	f7ff ff63 	bl	8001544 <MX_ADC2_Init>
  MX_I2C2_Init();
 800167e:	f7ff ff8d 	bl	800159c <MX_I2C2_Init>
  expanderInit();
 8001682:	f003 f869 	bl	8004758 <expanderInit>
  HAL_Delay(10);
 8001686:	200a      	movs	r0, #10
 8001688:	f000 fb34 	bl	8001cf4 <HAL_Delay>
  dspInit();
 800168c:	f003 f926 	bl	80048dc <dspInit>
  HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f000 fb2f 	bl	8001cf4 <HAL_Delay>
  dspStart();
 8001696:	f003 f955 	bl	8004944 <dspStart>
	 dspProc();
 800169a:	f003 f9c3 	bl	8004a24 <dspProc>
	 everythingElse();
 800169e:	f7ff fdd1 	bl	8001244 <everythingElse>
  while (1)
 80016a2:	e7fa      	b.n	800169a <main+0x46>

080016a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_MspInit+0x3c>)
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	619a      	str	r2, [r3, #24]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	f002 0201 	and.w	r2, r2, #1
 80016b6:	9200      	str	r2, [sp, #0]
 80016b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016c0:	61da      	str	r2, [r3, #28]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_MspInit+0x40>)
 80016ce:	6853      	ldr	r3, [r2, #4]
 80016d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	b002      	add	sp, #8
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000

080016e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e8:	b510      	push	{r4, lr}
 80016ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	2300      	movs	r3, #0
 80016ee:	9304      	str	r3, [sp, #16]
 80016f0:	9305      	str	r3, [sp, #20]
 80016f2:	9306      	str	r3, [sp, #24]
 80016f4:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80016f6:	6803      	ldr	r3, [r0, #0]
 80016f8:	4a2d      	ldr	r2, [pc, #180]	; (80017b0 <HAL_ADC_MspInit+0xc8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_ADC_MspInit+0x20>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80016fe:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <HAL_ADC_MspInit+0xcc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d039      	beq.n	8001778 <HAL_ADC_MspInit+0x90>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001704:	b008      	add	sp, #32
 8001706:	bd10      	pop	{r4, pc}
 8001708:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_ADC_MspInit+0xd0>)
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	619a      	str	r2, [r3, #24]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_RX_I_Pin|ADC_RX_Q_Pin;
 8001730:	2303      	movs	r3, #3
 8001732:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001734:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	a904      	add	r1, sp, #16
 8001738:	4820      	ldr	r0, [pc, #128]	; (80017bc <HAL_ADC_MspInit+0xd4>)
 800173a:	f000 ff5b 	bl	80025f4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800173e:	4820      	ldr	r0, [pc, #128]	; (80017c0 <HAL_ADC_MspInit+0xd8>)
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_ADC_MspInit+0xdc>)
 8001742:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001744:	2300      	movs	r3, #0
 8001746:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800174e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001752:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001758:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800175a:	2320      	movs	r3, #32
 800175c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800175e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001762:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001764:	f000 fdc6 	bl	80022f4 <HAL_DMA_Init>
 8001768:	b918      	cbnz	r0, 8001772 <HAL_ADC_MspInit+0x8a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_ADC_MspInit+0xd8>)
 800176c:	6223      	str	r3, [r4, #32]
 800176e:	625c      	str	r4, [r3, #36]	; 0x24
 8001770:	e7c8      	b.n	8001704 <HAL_ADC_MspInit+0x1c>
      Error_Handler();
 8001772:	f7ff fd83 	bl	800127c <Error_Handler>
 8001776:	e7f8      	b.n	800176a <HAL_ADC_MspInit+0x82>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_ADC_MspInit+0xd0>)
 800177a:	699a      	ldr	r2, [r3, #24]
 800177c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	699a      	ldr	r2, [r3, #24]
 8001784:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001788:	9202      	str	r2, [sp, #8]
 800178a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	f042 0204 	orr.w	r2, r2, #4
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	9303      	str	r3, [sp, #12]
 800179c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|ADC_SWR_F_Pin|ADC_SWR_R_Pin
 800179e:	23fc      	movs	r3, #252	; 0xfc
 80017a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a2:	2303      	movs	r3, #3
 80017a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	a904      	add	r1, sp, #16
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <HAL_ADC_MspInit+0xd4>)
 80017aa:	f000 ff23 	bl	80025f4 <HAL_GPIO_Init>
}
 80017ae:	e7a9      	b.n	8001704 <HAL_ADC_MspInit+0x1c>
 80017b0:	40012400 	.word	0x40012400
 80017b4:	40012800 	.word	0x40012800
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010800 	.word	0x40010800
 80017c0:	20000264 	.word	0x20000264
 80017c4:	40020008 	.word	0x40020008

080017c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	2300      	movs	r3, #0
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	9303      	str	r3, [sp, #12]
 80017d2:	9304      	str	r3, [sp, #16]
 80017d4:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C2)
 80017d6:	6802      	ldr	r2, [r0, #0]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_I2C_MspInit+0x58>)
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017de:	b006      	add	sp, #24
 80017e0:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4c10      	ldr	r4, [pc, #64]	; (8001824 <HAL_I2C_MspInit+0x5c>)
 80017e4:	69a3      	ldr	r3, [r4, #24]
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	61a3      	str	r3, [r4, #24]
 80017ec:	69a3      	ldr	r3, [r4, #24]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	a902      	add	r1, sp, #8
 8001806:	4808      	ldr	r0, [pc, #32]	; (8001828 <HAL_I2C_MspInit+0x60>)
 8001808:	f000 fef4 	bl	80025f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800180c:	69e3      	ldr	r3, [r4, #28]
 800180e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001812:	61e3      	str	r3, [r4, #28]
 8001814:	69e3      	ldr	r3, [r4, #28]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	9b01      	ldr	r3, [sp, #4]
}
 800181e:	e7de      	b.n	80017de <HAL_I2C_MspInit+0x16>
 8001820:	40005800 	.word	0x40005800
 8001824:	40021000 	.word	0x40021000
 8001828:	40010c00 	.word	0x40010c00

0800182c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	2300      	movs	r3, #0
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	9303      	str	r3, [sp, #12]
 8001836:	9304      	str	r3, [sp, #16]
 8001838:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 800183a:	6802      	ldr	r2, [r0, #0]
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_SPI_MspInit+0xa4>)
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001842:	b007      	add	sp, #28
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001846:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001848:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001852:	619a      	str	r2, [r3, #24]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	f042 0208 	orr.w	r2, r2, #8
 8001864:	619a      	str	r2, [r3, #24]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001870:	2328      	movs	r3, #40	; 0x28
 8001872:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	4f15      	ldr	r7, [pc, #84]	; (80018d4 <HAL_SPI_MspInit+0xa8>)
 800187e:	a902      	add	r1, sp, #8
 8001880:	4638      	mov	r0, r7
 8001882:	f000 feb7 	bl	80025f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001886:	2610      	movs	r6, #16
 8001888:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2500      	movs	r5, #0
 800188c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	a902      	add	r1, sp, #8
 8001892:	4638      	mov	r0, r7
 8001894:	f000 feae 	bl	80025f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_SPI_MspInit+0xac>)
 800189a:	6853      	ldr	r3, [r2, #4]
 800189c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <HAL_SPI_MspInit+0xb0>)
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_SPI_MspInit+0xb4>)
 80018aa:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ac:	6046      	str	r6, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ae:	6085      	str	r5, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b4:	6105      	str	r5, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b6:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80018b8:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018ba:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018bc:	f000 fd1a 	bl	80022f4 <HAL_DMA_Init>
 80018c0:	b918      	cbnz	r0, 80018ca <HAL_SPI_MspInit+0x9e>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_SPI_MspInit+0xb0>)
 80018c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80018c6:	625c      	str	r4, [r3, #36]	; 0x24
}
 80018c8:	e7bb      	b.n	8001842 <HAL_SPI_MspInit+0x16>
      Error_Handler();
 80018ca:	f7ff fcd7 	bl	800127c <Error_Handler>
 80018ce:	e7f8      	b.n	80018c2 <HAL_SPI_MspInit+0x96>
 80018d0:	40013000 	.word	0x40013000
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	40010000 	.word	0x40010000
 80018dc:	200002a8 	.word	0x200002a8
 80018e0:	40020030 	.word	0x40020030

080018e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e4:	b510      	push	{r4, lr}
 80018e6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80018e8:	6803      	ldr	r3, [r0, #0]
 80018ea:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <HAL_TIM_Base_MspInit+0xf0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d004      	beq.n	80018fa <HAL_TIM_Base_MspInit+0x16>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f4:	d061      	beq.n	80019ba <HAL_TIM_Base_MspInit+0xd6>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018f6:	b002      	add	sp, #8
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	4604      	mov	r4, r0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_TIM_Base_MspInit+0xf4>)
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001904:	619a      	str	r2, [r3, #24]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8001910:	4832      	ldr	r0, [pc, #200]	; (80019dc <HAL_TIM_Base_MspInit+0xf8>)
 8001912:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <HAL_TIM_Base_MspInit+0xfc>)
 8001914:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001916:	2310      	movs	r3, #16
 8001918:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001926:	6103      	str	r3, [r0, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192c:	6143      	str	r3, [r0, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 800192e:	2320      	movs	r3, #32
 8001930:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001938:	f000 fcdc 	bl	80022f4 <HAL_DMA_Init>
 800193c:	2800      	cmp	r0, #0
 800193e:	d133      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_TIM_Base_MspInit+0xf8>)
 8001942:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001944:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8001946:	4827      	ldr	r0, [pc, #156]	; (80019e4 <HAL_TIM_Base_MspInit+0x100>)
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_TIM_Base_MspInit+0x104>)
 800194a:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800194c:	2310      	movs	r3, #16
 800194e:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	60c2      	str	r2, [r0, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195c:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800195e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001962:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001964:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001966:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001968:	f000 fcc4 	bl	80022f4 <HAL_DMA_Init>
 800196c:	b9f8      	cbnz	r0, 80019ae <HAL_TIM_Base_MspInit+0xca>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_TIM_Base_MspInit+0x100>)
 8001970:	6323      	str	r3, [r4, #48]	; 0x30
 8001972:	625c      	str	r4, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8001974:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8001976:	6363      	str	r3, [r4, #52]	; 0x34
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001978:	481c      	ldr	r0, [pc, #112]	; (80019ec <HAL_TIM_Base_MspInit+0x108>)
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_TIM_Base_MspInit+0x10c>)
 800197c:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197e:	2310      	movs	r3, #16
 8001980:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	60c2      	str	r2, [r0, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001994:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001996:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001998:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800199a:	f000 fcab 	bl	80022f4 <HAL_DMA_Init>
 800199e:	b948      	cbnz	r0, 80019b4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_TIM_Base_MspInit+0x108>)
 80019a2:	6263      	str	r3, [r4, #36]	; 0x24
 80019a4:	625c      	str	r4, [r3, #36]	; 0x24
 80019a6:	e7a6      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x12>
      Error_Handler();
 80019a8:	f7ff fc68 	bl	800127c <Error_Handler>
 80019ac:	e7c8      	b.n	8001940 <HAL_TIM_Base_MspInit+0x5c>
      Error_Handler();
 80019ae:	f7ff fc65 	bl	800127c <Error_Handler>
 80019b2:	e7dc      	b.n	800196e <HAL_TIM_Base_MspInit+0x8a>
      Error_Handler();
 80019b4:	f7ff fc62 	bl	800127c <Error_Handler>
 80019b8:	e7f2      	b.n	80019a0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	f042 0201 	orr.w	r2, r2, #1
 80019c4:	61da      	str	r2, [r3, #28]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	9b01      	ldr	r3, [sp, #4]
}
 80019d0:	e791      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x12>
 80019d2:	bf00      	nop
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	20000330 	.word	0x20000330
 80019e0:	4002006c 	.word	0x4002006c
 80019e4:	20000374 	.word	0x20000374
 80019e8:	40020044 	.word	0x40020044
 80019ec:	200002ec 	.word	0x200002ec
 80019f0:	4002001c 	.word	0x4002001c

080019f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f4:	b500      	push	{lr}
 80019f6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	2300      	movs	r3, #0
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	9304      	str	r3, [sp, #16]
 8001a00:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001a02:	6802      	ldr	r2, [r0, #0]
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_TIM_MspPostInit+0x48>)
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d002      	beq.n	8001a10 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a0a:	b007      	add	sp, #28
 8001a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	f042 0204 	orr.w	r2, r2, #4
 8001a1a:	619a      	str	r2, [r3, #24]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TX_Q_PWM_Pin|AUDIO_PWM_Pin|TX_Q_PWMA11_Pin;
 8001a26:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001a2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	a902      	add	r1, sp, #8
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <HAL_TIM_MspPostInit+0x4c>)
 8001a36:	f000 fddd 	bl	80025f4 <HAL_GPIO_Init>
}
 8001a3a:	e7e6      	b.n	8001a0a <HAL_TIM_MspPostInit+0x16>
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40010800 	.word	0x40010800

08001a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a44:	b530      	push	{r4, r5, lr}
 8001a46:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	9303      	str	r3, [sp, #12]
 8001a4e:	9304      	str	r3, [sp, #16]
 8001a50:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_UART_MspInit+0x8c>)
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a5a:	b007      	add	sp, #28
 8001a5c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a5e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a68:	619a      	str	r2, [r3, #24]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a70:	9200      	str	r2, [sp, #0]
 8001a72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	f042 0208 	orr.w	r2, r2, #8
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a86:	2340      	movs	r3, #64	; 0x40
 8001a88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	4d10      	ldr	r5, [pc, #64]	; (8001ad4 <HAL_UART_MspInit+0x90>)
 8001a94:	a902      	add	r1, sp, #8
 8001a96:	4628      	mov	r0, r5
 8001a98:	f000 fdac 	bl	80025f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	a902      	add	r1, sp, #8
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 fda3 	bl	80025f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_UART_MspInit+0x94>)
 8001ab0:	6853      	ldr	r3, [r2, #4]
 8001ab2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001abc:	4622      	mov	r2, r4
 8001abe:	4621      	mov	r1, r4
 8001ac0:	2025      	movs	r0, #37	; 0x25
 8001ac2:	f000 fba7 	bl	8002214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ac6:	2025      	movs	r0, #37	; 0x25
 8001ac8:	f000 fbdc 	bl	8002284 <HAL_NVIC_EnableIRQ>
}
 8001acc:	e7c5      	b.n	8001a5a <HAL_UART_MspInit+0x16>
 8001ace:	bf00      	nop
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	40010000 	.word	0x40010000

08001adc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler>

08001ade <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <HardFault_Handler>

08001ae0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler>

08001ae2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler>

08001ae4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler>

08001ae6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	4770      	bx	lr

08001aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 f8ef 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bd08      	pop	{r3, pc}

08001af4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001af4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001af6:	4802      	ldr	r0, [pc, #8]	; (8001b00 <DMA1_Channel1_IRQHandler+0xc>)
 8001af8:	f000 fcda 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001afc:	bd08      	pop	{r3, pc}
 8001afe:	bf00      	nop
 8001b00:	20000264 	.word	0x20000264

08001b04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001b06:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA1_Channel2_IRQHandler+0xc>)
 8001b08:	f000 fcd2 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b0c:	bd08      	pop	{r3, pc}
 8001b0e:	bf00      	nop
 8001b10:	200002ec 	.word	0x200002ec

08001b14 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b16:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA1_Channel3_IRQHandler+0xc>)
 8001b18:	f000 fcca 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b1c:	bd08      	pop	{r3, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002a8 	.word	0x200002a8

08001b24 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001b26:	4802      	ldr	r0, [pc, #8]	; (8001b30 <DMA1_Channel4_IRQHandler+0xc>)
 8001b28:	f000 fcc2 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b2c:	bd08      	pop	{r3, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000374 	.word	0x20000374

08001b34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001b36:	4802      	ldr	r0, [pc, #8]	; (8001b40 <DMA1_Channel6_IRQHandler+0xc>)
 8001b38:	f000 fcba 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b3c:	bd08      	pop	{r3, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000330 	.word	0x20000330

08001b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b46:	4802      	ldr	r0, [pc, #8]	; (8001b50 <USART1_IRQHandler+0xc>)
 8001b48:	f002 fc94 	bl	8004474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b4c:	bd08      	pop	{r3, pc}
 8001b4e:	bf00      	nop
 8001b50:	200004f4 	.word	0x200004f4

08001b54 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001b54:	2001      	movs	r0, #1
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b5a:	f004 f969 	bl	8005e30 <__errno>
 8001b5e:	2316      	movs	r3, #22
 8001b60:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001b62:	f04f 30ff 	mov.w	r0, #4294967295
 8001b66:	bd08      	pop	{r3, pc}

08001b68 <_exit>:

void _exit (int status)
{
 8001b68:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6e:	f7ff fff3 	bl	8001b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b72:	e7fe      	b.n	8001b72 <_exit+0xa>

08001b74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	460c      	mov	r4, r1
 8001b78:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	2500      	movs	r5, #0
 8001b7c:	e006      	b.n	8001b8c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001b7e:	f3af 8000 	nop.w
 8001b82:	4621      	mov	r1, r4
 8001b84:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001b8a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8c:	42b5      	cmp	r5, r6
 8001b8e:	dbf6      	blt.n	8001b7e <_read+0xa>
	}

return len;
}
 8001b90:	4630      	mov	r0, r6
 8001b92:	bd70      	pop	{r4, r5, r6, pc}

08001b94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	460c      	mov	r4, r1
 8001b98:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	2500      	movs	r5, #0
 8001b9c:	e004      	b.n	8001ba8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001b9e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ba2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	3501      	adds	r5, #1
 8001ba8:	42b5      	cmp	r5, r6
 8001baa:	dbf8      	blt.n	8001b9e <_write+0xa>
	}
	return len;
}
 8001bac:	4630      	mov	r0, r6
 8001bae:	bd70      	pop	{r4, r5, r6, pc}

08001bb0 <_close>:

int _close(int file)
{
	return -1;
}
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bba:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	4770      	bx	lr

08001bc0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4770      	bx	lr

08001bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	4770      	bx	lr

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b510      	push	{r4, lr}
 8001bca:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <_sbrk+0x38>)
 8001bce:	490d      	ldr	r1, [pc, #52]	; (8001c04 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <_sbrk+0x40>)
 8001bd2:	6800      	ldr	r0, [r0, #0]
 8001bd4:	b140      	cbz	r0, 8001be8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <_sbrk+0x40>)
 8001bd8:	6800      	ldr	r0, [r0, #0]
 8001bda:	4403      	add	r3, r0
 8001bdc:	1a52      	subs	r2, r2, r1
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d806      	bhi.n	8001bf0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <_sbrk+0x40>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001be6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <_sbrk+0x40>)
 8001bea:	4c08      	ldr	r4, [pc, #32]	; (8001c0c <_sbrk+0x44>)
 8001bec:	6004      	str	r4, [r0, #0]
 8001bee:	e7f2      	b.n	8001bd6 <_sbrk+0xe>
    errno = ENOMEM;
 8001bf0:	f004 f91e 	bl	8005e30 <__errno>
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	e7f3      	b.n	8001be6 <_sbrk+0x1e>
 8001bfe:	bf00      	nop
 8001c00:	20005000 	.word	0x20005000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	20000538 	.word	0x20000538
 8001c0c:	20001ba0 	.word	0x20001ba0

08001c10 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	4770      	bx	lr
	...

08001c14 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

     ldr r0, =_sdata
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c16:	490d      	ldr	r1, [pc, #52]	; (8001c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	; (8001c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c3a:	f7ff ffe9 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f004 f8fd 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c42:	f7ff fd07 	bl	8001654 <main>
  bx lr
 8001c46:	4770      	bx	lr
     ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c50:	08008d9c 	.word	0x08008d9c
  ldr r2, =_sbss
 8001c54:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c58:	20001b9c 	.word	0x20001b9c

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>
	...

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b510      	push	{r4, lr}
 8001c62:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_InitTick+0x40>)
 8001c66:	7818      	ldrb	r0, [r3, #0]
 8001c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_InitTick+0x44>)
 8001c72:	6810      	ldr	r0, [r2, #0]
 8001c74:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c78:	f000 fb12 	bl	80022a0 <HAL_SYSTICK_Config>
 8001c7c:	b968      	cbnz	r0, 8001c9a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	2c0f      	cmp	r4, #15
 8001c80:	d901      	bls.n	8001c86 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
 8001c84:	e00a      	b.n	8001c9c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c86:	2200      	movs	r2, #0
 8001c88:	4621      	mov	r1, r4
 8001c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8e:	f000 fac1 	bl	8002214 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_InitTick+0x48>)
 8001c94:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
}
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000008 	.word	0x20000008

08001cac <HAL_Init>:
{
 8001cac:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_Init+0x20>)
 8001cb0:	6813      	ldr	r3, [r2, #0]
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 fa99 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f7ff ffce 	bl	8001c60 <HAL_InitTick>
  HAL_MspInit();
 8001cc4:	f7ff fcee 	bl	80016a4 <HAL_MspInit>
}
 8001cc8:	2000      	movs	r0, #0
 8001cca:	bd08      	pop	{r3, pc}
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001cd0:	4a03      	ldr	r2, [pc, #12]	; (8001ce0 <HAL_IncTick+0x10>)
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_IncTick+0x14>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	440b      	add	r3, r1
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000053c 	.word	0x2000053c
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ce8:	4b01      	ldr	r3, [pc, #4]	; (8001cf0 <HAL_GetTick+0x8>)
 8001cea:	6818      	ldr	r0, [r3, #0]
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000053c 	.word	0x2000053c

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b538      	push	{r3, r4, r5, lr}
 8001cf6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff fff6 	bl	8001ce8 <HAL_GetTick>
 8001cfc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001d02:	d002      	beq.n	8001d0a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_Delay+0x24>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0a:	f7ff ffed 	bl	8001ce8 <HAL_GetTick>
 8001d0e:	1b40      	subs	r0, r0, r5
 8001d10:	42a0      	cmp	r0, r4
 8001d12:	d3fa      	bcc.n	8001d0a <HAL_Delay+0x16>
  {
  }
}
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
 8001d16:	bf00      	nop
 8001d18:	20000004 	.word	0x20000004

08001d1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d22:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001d26:	d11e      	bne.n	8001d66 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	6892      	ldr	r2, [r2, #8]
 8001d34:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001d38:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001d3c:	d003      	beq.n	8001d46 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fe9b 	bl	8004a7a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d44:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d46:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d48:	2a00      	cmp	r2, #0
 8001d4a:	d1f8      	bne.n	8001d3e <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d56:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001d5a:	d1f0      	bne.n	8001d3e <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
 8001d64:	e7eb      	b.n	8001d3e <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4798      	blx	r3
}
 8001d6c:	e7ea      	b.n	8001d44 <ADC_DMAConvCplt+0x28>

08001d6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d6e:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d70:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d72:	f002 fe81 	bl	8004a78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d76:	bd08      	pop	{r3, pc}

08001d78 <HAL_ADC_ErrorCallback>:
}
 8001d78:	4770      	bx	lr

08001d7a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d7a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d84:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d8e:	f7ff fff3 	bl	8001d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d92:	bd08      	pop	{r3, pc}

08001d94 <HAL_ADC_ConfigChannel>:
{ 
 8001d94:	b430      	push	{r4, r5}
 8001d96:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001d98:	2200      	movs	r2, #0
 8001d9a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001d9c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8001da0:	2a01      	cmp	r2, #1
 8001da2:	f000 8091 	beq.w	8001ec8 <HAL_ADC_ConfigChannel+0x134>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2201      	movs	r2, #1
 8001daa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001dae:	684a      	ldr	r2, [r1, #4]
 8001db0:	2a06      	cmp	r2, #6
 8001db2:	d82d      	bhi.n	8001e10 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001db4:	6804      	ldr	r4, [r0, #0]
 8001db6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001db8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001dbc:	3a05      	subs	r2, #5
 8001dbe:	f04f 0c1f 	mov.w	ip, #31
 8001dc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8001dc6:	ea20 000c 	bic.w	r0, r0, ip
 8001dca:	680d      	ldr	r5, [r1, #0]
 8001dcc:	fa05 f202 	lsl.w	r2, r5, r2
 8001dd0:	4302      	orrs	r2, r0
 8001dd2:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dd4:	680a      	ldr	r2, [r1, #0]
 8001dd6:	2a09      	cmp	r2, #9
 8001dd8:	d93a      	bls.n	8001e50 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dda:	681c      	ldr	r4, [r3, #0]
 8001ddc:	68e0      	ldr	r0, [r4, #12]
 8001dde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001de2:	3a1e      	subs	r2, #30
 8001de4:	f04f 0c07 	mov.w	ip, #7
 8001de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8001dec:	ea20 000c 	bic.w	r0, r0, ip
 8001df0:	688d      	ldr	r5, [r1, #8]
 8001df2:	fa05 f202 	lsl.w	r2, r5, r2
 8001df6:	4302      	orrs	r2, r0
 8001df8:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dfa:	680a      	ldr	r2, [r1, #0]
 8001dfc:	3a10      	subs	r2, #16
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d936      	bls.n	8001e70 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e02:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bc30      	pop	{r4, r5}
 8001e0e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001e10:	2a0c      	cmp	r2, #12
 8001e12:	d80e      	bhi.n	8001e32 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e14:	6805      	ldr	r5, [r0, #0]
 8001e16:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e1c:	3a23      	subs	r2, #35	; 0x23
 8001e1e:	241f      	movs	r4, #31
 8001e20:	4094      	lsls	r4, r2
 8001e22:	ea20 0004 	bic.w	r0, r0, r4
 8001e26:	680c      	ldr	r4, [r1, #0]
 8001e28:	fa04 f202 	lsl.w	r2, r4, r2
 8001e2c:	4302      	orrs	r2, r0
 8001e2e:	632a      	str	r2, [r5, #48]	; 0x30
 8001e30:	e7d0      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e32:	6805      	ldr	r5, [r0, #0]
 8001e34:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001e36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e3a:	3a41      	subs	r2, #65	; 0x41
 8001e3c:	241f      	movs	r4, #31
 8001e3e:	4094      	lsls	r4, r2
 8001e40:	ea20 0004 	bic.w	r0, r0, r4
 8001e44:	680c      	ldr	r4, [r1, #0]
 8001e46:	fa04 f202 	lsl.w	r2, r4, r2
 8001e4a:	4302      	orrs	r2, r0
 8001e4c:	62ea      	str	r2, [r5, #44]	; 0x2c
 8001e4e:	e7c1      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e50:	681c      	ldr	r4, [r3, #0]
 8001e52:	6920      	ldr	r0, [r4, #16]
 8001e54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e58:	f04f 0c07 	mov.w	ip, #7
 8001e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001e60:	ea20 000c 	bic.w	r0, r0, ip
 8001e64:	688d      	ldr	r5, [r1, #8]
 8001e66:	fa05 f202 	lsl.w	r2, r5, r2
 8001e6a:	4302      	orrs	r2, r0
 8001e6c:	6122      	str	r2, [r4, #16]
 8001e6e:	e7c4      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4816      	ldr	r0, [pc, #88]	; (8001ecc <HAL_ADC_ConfigChannel+0x138>)
 8001e74:	4282      	cmp	r2, r0
 8001e76:	d005      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
 8001e82:	e7bf      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e84:	6890      	ldr	r0, [r2, #8]
 8001e86:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e8c:	6890      	ldr	r0, [r2, #8]
 8001e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001e92:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e94:	680a      	ldr	r2, [r1, #0]
 8001e96:	2a10      	cmp	r2, #16
 8001e98:	d001      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x10a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	e7b2      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_ADC_ConfigChannel+0x13c>)
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <HAL_ADC_ConfigChannel+0x140>)
 8001ea4:	fba1 1202 	umull	r1, r2, r1, r2
 8001ea8:	0c92      	lsrs	r2, r2, #18
 8001eaa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001eae:	0052      	lsls	r2, r2, #1
 8001eb0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001eb2:	e002      	b.n	8001eba <HAL_ADC_ConfigChannel+0x126>
            wait_loop_index--;
 8001eb4:	9a01      	ldr	r2, [sp, #4]
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001eba:	9a01      	ldr	r2, [sp, #4]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e79f      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x70>
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	e79d      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001ec8:	2002      	movs	r0, #2
 8001eca:	e79e      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x76>
 8001ecc:	40012400 	.word	0x40012400
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	431bde83 	.word	0x431bde83

08001ed8 <ADC_Enable>:
{
 8001ed8:	b530      	push	{r4, r5, lr}
 8001eda:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	f012 0f01 	tst.w	r2, #1
 8001ee8:	d133      	bne.n	8001f52 <ADC_Enable+0x7a>
 8001eea:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <ADC_Enable+0x80>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <ADC_Enable+0x84>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0c9b      	lsrs	r3, r3, #18
 8001f00:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001f02:	e002      	b.n	8001f0a <ADC_Enable+0x32>
      wait_loop_index--;
 8001f04:	9b01      	ldr	r3, [sp, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001f0a:	9b01      	ldr	r3, [sp, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f9      	bne.n	8001f04 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8001f10:	f7ff feea 	bl	8001ce8 <HAL_GetTick>
 8001f14:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f013 0f01 	tst.w	r3, #1
 8001f1e:	d116      	bne.n	8001f4e <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f20:	f7ff fee2 	bl	8001ce8 <HAL_GetTick>
 8001f24:	1b43      	subs	r3, r0, r5
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d9f5      	bls.n	8001f16 <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f013 0f01 	tst.w	r3, #1
 8001f32:	d1f0      	bne.n	8001f16 <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001f44:	2300      	movs	r3, #0
 8001f46:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e002      	b.n	8001f54 <ADC_Enable+0x7c>
  return HAL_OK;
 8001f4e:	2000      	movs	r0, #0
 8001f50:	e000      	b.n	8001f54 <ADC_Enable+0x7c>
 8001f52:	2000      	movs	r0, #0
}
 8001f54:	b003      	add	sp, #12
 8001f56:	bd30      	pop	{r4, r5, pc}
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <HAL_ADC_Start_DMA>:
{
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	4604      	mov	r4, r0
 8001f64:	460d      	mov	r5, r1
 8001f66:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f68:	6801      	ldr	r1, [r0, #0]
 8001f6a:	4844      	ldr	r0, [pc, #272]	; (800207c <HAL_ADC_Start_DMA+0x11c>)
 8001f6c:	4281      	cmp	r1, r0
 8001f6e:	d059      	beq.n	8002024 <HAL_ADC_Start_DMA+0xc4>
 8001f70:	4b43      	ldr	r3, [pc, #268]	; (8002080 <HAL_ADC_Start_DMA+0x120>)
 8001f72:	4299      	cmp	r1, r3
 8001f74:	d056      	beq.n	8002024 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8001f76:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d07c      	beq.n	8002078 <HAL_ADC_Start_DMA+0x118>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001f84:	4620      	mov	r0, r4
 8001f86:	f7ff ffa7 	bl	8001ed8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001f8a:	4607      	mov	r7, r0
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d16e      	bne.n	800206e <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8001f90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f92:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001f96:	f021 0101 	bic.w	r1, r1, #1
 8001f9a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001f9e:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fa0:	6822      	ldr	r2, [r4, #0]
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_ADC_Start_DMA+0x120>)
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d044      	beq.n	8002032 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001faa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fae:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fb0:	6853      	ldr	r3, [r2, #4]
 8001fb2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001fb6:	d005      	beq.n	8001fc4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fc6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001fca:	d048      	beq.n	800205e <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fce:	f023 0306 	bic.w	r3, r3, #6
 8001fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fda:	6a23      	ldr	r3, [r4, #32]
 8001fdc:	4a29      	ldr	r2, [pc, #164]	; (8002084 <HAL_ADC_Start_DMA+0x124>)
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe0:	6a23      	ldr	r3, [r4, #32]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_ADC_Start_DMA+0x128>)
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fe6:	6a23      	ldr	r3, [r4, #32]
 8001fe8:	4a28      	ldr	r2, [pc, #160]	; (800208c <HAL_ADC_Start_DMA+0x12c>)
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	f06f 0202 	mvn.w	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ff4:	6822      	ldr	r2, [r4, #0]
 8001ff6:	6893      	ldr	r3, [r2, #8]
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ffe:	6821      	ldr	r1, [r4, #0]
 8002000:	4633      	mov	r3, r6
 8002002:	462a      	mov	r2, r5
 8002004:	314c      	adds	r1, #76	; 0x4c
 8002006:	6a20      	ldr	r0, [r4, #32]
 8002008:	f000 f9aa 	bl	8002360 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002014:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002018:	d024      	beq.n	8002064 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	e027      	b.n	8002074 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_ADC_Start_DMA+0x11c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800202c:	d0a3      	beq.n	8001f76 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800202e:	2701      	movs	r7, #1
 8002030:	e020      	b.n	8002074 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002032:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800203c:	d0b4      	beq.n	8001fa8 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800203e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002044:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_ADC_Start_DMA+0x11c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800204e:	d0b9      	beq.n	8001fc4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002056:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800205a:	62a3      	str	r3, [r4, #40]	; 0x28
 800205c:	e7b2      	b.n	8001fc4 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 800205e:	2300      	movs	r3, #0
 8002060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002062:	e7b7      	b.n	8001fd4 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	e002      	b.n	8002074 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800206e:	2300      	movs	r3, #0
 8002070:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002074:	4638      	mov	r0, r7
 8002076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002078:	2702      	movs	r7, #2
 800207a:	e7fb      	b.n	8002074 <HAL_ADC_Start_DMA+0x114>
 800207c:	40012400 	.word	0x40012400
 8002080:	40012800 	.word	0x40012800
 8002084:	08001d1d 	.word	0x08001d1d
 8002088:	08001d6f 	.word	0x08001d6f
 800208c:	08001d7b 	.word	0x08001d7b

08002090 <ADC_ConversionStop_Disable>:
{
 8002090:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002092:	6803      	ldr	r3, [r0, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	f012 0f01 	tst.w	r2, #1
 800209a:	d101      	bne.n	80020a0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800209c:	2000      	movs	r0, #0
}
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80020aa:	f7ff fe1d 	bl	8001ce8 <HAL_GetTick>
 80020ae:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f013 0f01 	tst.w	r3, #1
 80020b8:	d013      	beq.n	80020e2 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ba:	f7ff fe15 	bl	8001ce8 <HAL_GetTick>
 80020be:	1b43      	subs	r3, r0, r5
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d9f5      	bls.n	80020b0 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f013 0f01 	tst.w	r3, #1
 80020cc:	d0f0      	beq.n	80020b0 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80020de:	2001      	movs	r0, #1
 80020e0:	e7dd      	b.n	800209e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80020e2:	2000      	movs	r0, #0
 80020e4:	e7db      	b.n	800209e <ADC_ConversionStop_Disable+0xe>
	...

080020e8 <HAL_ADC_Init>:
  if(hadc == NULL)
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d07b      	beq.n	80021e4 <HAL_ADC_Init+0xfc>
{
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d04d      	beq.n	8002192 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7ff ffca 	bl	8002090 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020fe:	f013 0310 	ands.w	r3, r3, #16
 8002102:	d169      	bne.n	80021d8 <HAL_ADC_Init+0xf0>
 8002104:	2800      	cmp	r0, #0
 8002106:	d167      	bne.n	80021d8 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8002108:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800210a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800210e:	f022 0202 	bic.w	r2, r2, #2
 8002112:	f042 0202 	orr.w	r2, r2, #2
 8002116:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002118:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800211a:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211c:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800211e:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002120:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002124:	68a5      	ldr	r5, [r4, #8]
 8002126:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800212a:	d002      	beq.n	8002132 <HAL_ADC_Init+0x4a>
 800212c:	2d01      	cmp	r5, #1
 800212e:	d036      	beq.n	800219e <HAL_ADC_Init+0xb6>
 8002130:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002132:	7d26      	ldrb	r6, [r4, #20]
 8002134:	2e01      	cmp	r6, #1
 8002136:	d035      	beq.n	80021a4 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8002138:	6826      	ldr	r6, [r4, #0]
 800213a:	6871      	ldr	r1, [r6, #4]
 800213c:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002140:	4329      	orrs	r1, r5
 8002142:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002144:	6825      	ldr	r5, [r4, #0]
 8002146:	68ae      	ldr	r6, [r5, #8]
 8002148:	4927      	ldr	r1, [pc, #156]	; (80021e8 <HAL_ADC_Init+0x100>)
 800214a:	4031      	ands	r1, r6
 800214c:	4311      	orrs	r1, r2
 800214e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002150:	68a1      	ldr	r1, [r4, #8]
 8002152:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002156:	d001      	beq.n	800215c <HAL_ADC_Init+0x74>
 8002158:	2901      	cmp	r1, #1
 800215a:	d102      	bne.n	8002162 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800215c:	6923      	ldr	r3, [r4, #16]
 800215e:	3b01      	subs	r3, #1
 8002160:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002166:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800216a:	430b      	orrs	r3, r1
 800216c:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_ADC_Init+0x104>)
 8002174:	400b      	ands	r3, r1
 8002176:	429a      	cmp	r2, r3
 8002178:	d025      	beq.n	80021c6 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 800217a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800217c:	f023 0312 	bic.w	r3, r3, #18
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800218e:	2001      	movs	r0, #1
 8002190:	e027      	b.n	80021e2 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8002192:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002194:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002198:	f7ff faa6 	bl	80016e8 <HAL_ADC_MspInit>
 800219c:	e7ab      	b.n	80020f6 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800219e:	f44f 7580 	mov.w	r5, #256	; 0x100
 80021a2:	e7c6      	b.n	8002132 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021a4:	b931      	cbnz	r1, 80021b4 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021a6:	69a1      	ldr	r1, [r4, #24]
 80021a8:	3901      	subs	r1, #1
 80021aa:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80021ae:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 80021b2:	e7c1      	b.n	8002138 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80021b6:	f041 0120 	orr.w	r1, r1, #32
 80021ba:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80021be:	f041 0101 	orr.w	r1, r1, #1
 80021c2:	62e1      	str	r1, [r4, #44]	; 0x2c
 80021c4:	e7b8      	b.n	8002138 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80021c6:	2300      	movs	r3, #0
 80021c8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80021ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021cc:	f023 0303 	bic.w	r3, r3, #3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80021d6:	e004      	b.n	80021e2 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80021e0:	2001      	movs	r0, #1
}
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
}
 80021e6:	4770      	bx	lr
 80021e8:	ffe1f7fd 	.word	0xffe1f7fd
 80021ec:	ff1f0efe 	.word	0xff1f0efe

080021f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021fc:	0200      	lsls	r0, r0, #8
 80021fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002202:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800220c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002214:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_NVIC_SetPriority+0x68>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221e:	f1c3 0c07 	rsb	ip, r3, #7
 8002222:	f1bc 0f04 	cmp.w	ip, #4
 8002226:	bf28      	it	cs
 8002228:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222c:	f103 0e04 	add.w	lr, r3, #4
 8002230:	f1be 0f06 	cmp.w	lr, #6
 8002234:	d918      	bls.n	8002268 <HAL_NVIC_SetPriority+0x54>
 8002236:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 3eff 	mov.w	lr, #4294967295
 800223c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002240:	ea21 010c 	bic.w	r1, r1, ip
 8002244:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002246:	fa0e f303 	lsl.w	r3, lr, r3
 800224a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002250:	2800      	cmp	r0, #0
 8002252:	db0b      	blt.n	800226c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	0109      	lsls	r1, r1, #4
 8002256:	b2c9      	uxtb	r1, r1
 8002258:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800225c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002260:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002264:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002268:	2300      	movs	r3, #0
 800226a:	e7e5      	b.n	8002238 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	f000 000f 	and.w	r0, r0, #15
 8002270:	0109      	lsls	r1, r1, #4
 8002272:	b2c9      	uxtb	r1, r1
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <HAL_NVIC_SetPriority+0x6c>)
 8002276:	5419      	strb	r1, [r3, r0]
 8002278:	e7f4      	b.n	8002264 <HAL_NVIC_SetPriority+0x50>
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00
 8002280:	e000ed14 	.word	0xe000ed14

08002284 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002284:	2800      	cmp	r0, #0
 8002286:	db07      	blt.n	8002298 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002288:	f000 021f 	and.w	r2, r0, #31
 800228c:	0940      	lsrs	r0, r0, #5
 800228e:	2301      	movs	r3, #1
 8002290:	4093      	lsls	r3, r2
 8002292:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_NVIC_EnableIRQ+0x18>)
 8002294:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	3801      	subs	r0, #1
 80022a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022a6:	d20b      	bcs.n	80022c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80022ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <HAL_SYSTICK_Config+0x24>)
 80022b0:	21f0      	movs	r1, #240	; 0xf0
 80022b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b6:	2000      	movs	r0, #0
 80022b8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ba:	2207      	movs	r2, #7
 80022bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80022c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c8:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ca:	2401      	movs	r4, #1
 80022cc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80022ce:	40ac      	lsls	r4, r5
 80022d0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80022d2:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022d4:	6804      	ldr	r4, [r0, #0]
 80022d6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d8:	6843      	ldr	r3, [r0, #4]
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d005      	beq.n	80022ea <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80022de:	6803      	ldr	r3, [r0, #0]
 80022e0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80022e2:	6803      	ldr	r3, [r0, #0]
 80022e4:	60da      	str	r2, [r3, #12]
  }
}
 80022e6:	bc30      	pop	{r4, r5}
 80022e8:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80022ea:	6803      	ldr	r3, [r0, #0]
 80022ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80022ee:	6803      	ldr	r3, [r0, #0]
 80022f0:	60d9      	str	r1, [r3, #12]
 80022f2:	e7f8      	b.n	80022e6 <DMA_SetConfig+0x1e>

080022f4 <HAL_DMA_Init>:
  if(hdma == NULL)
 80022f4:	b360      	cbz	r0, 8002350 <HAL_DMA_Init+0x5c>
{
 80022f6:	b410      	push	{r4}
 80022f8:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022fa:	6801      	ldr	r1, [r0, #0]
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_DMA_Init+0x60>)
 80022fe:	440b      	add	r3, r1
 8002300:	4815      	ldr	r0, [pc, #84]	; (8002358 <HAL_DMA_Init+0x64>)
 8002302:	fba0 0303 	umull	r0, r3, r0, r3
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_DMA_Init+0x68>)
 800230e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002310:	2302      	movs	r3, #2
 8002312:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002316:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002318:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 800231c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002320:	6853      	ldr	r3, [r2, #4]
 8002322:	6894      	ldr	r4, [r2, #8]
 8002324:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	68d4      	ldr	r4, [r2, #12]
 8002328:	4323      	orrs	r3, r4
 800232a:	6914      	ldr	r4, [r2, #16]
 800232c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	6954      	ldr	r4, [r2, #20]
 8002330:	4323      	orrs	r3, r4
 8002332:	6994      	ldr	r4, [r2, #24]
 8002334:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002336:	69d4      	ldr	r4, [r2, #28]
 8002338:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800233a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 800233c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233e:	2000      	movs	r0, #0
 8002340:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002342:	2301      	movs	r3, #1
 8002344:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002348:	f882 0020 	strb.w	r0, [r2, #32]
}
 800234c:	bc10      	pop	{r4}
 800234e:	4770      	bx	lr
    return HAL_ERROR;
 8002350:	2001      	movs	r0, #1
}
 8002352:	4770      	bx	lr
 8002354:	bffdfff8 	.word	0xbffdfff8
 8002358:	cccccccd 	.word	0xcccccccd
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_DMA_Start_IT>:
{
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002364:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002368:	2801      	cmp	r0, #1
 800236a:	d031      	beq.n	80023d0 <HAL_DMA_Start_IT+0x70>
 800236c:	2001      	movs	r0, #1
 800236e:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002372:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8002376:	2801      	cmp	r0, #1
 8002378:	d004      	beq.n	8002384 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 800237a:	2300      	movs	r3, #0
 800237c:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002380:	2002      	movs	r0, #2
}
 8002382:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002384:	2002      	movs	r0, #2
 8002386:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238a:	2000      	movs	r0, #0
 800238c:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800238e:	6825      	ldr	r5, [r4, #0]
 8002390:	6828      	ldr	r0, [r5, #0]
 8002392:	f020 0001 	bic.w	r0, r0, #1
 8002396:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff ff95 	bl	80022c8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800239e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023a0:	b15b      	cbz	r3, 80023ba <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a2:	6822      	ldr	r2, [r4, #0]
 80023a4:	6813      	ldr	r3, [r2, #0]
 80023a6:	f043 030e 	orr.w	r3, r3, #14
 80023aa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80023ac:	6822      	ldr	r2, [r4, #0]
 80023ae:	6813      	ldr	r3, [r2, #0]
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2000      	movs	r0, #0
 80023b8:	e7e3      	b.n	8002382 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	6813      	ldr	r3, [r2, #0]
 80023be:	f023 0304 	bic.w	r3, r3, #4
 80023c2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023c4:	6822      	ldr	r2, [r4, #0]
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	f043 030a 	orr.w	r3, r3, #10
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e7ed      	b.n	80023ac <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80023d0:	2002      	movs	r0, #2
 80023d2:	e7d6      	b.n	8002382 <HAL_DMA_Start_IT+0x22>

080023d4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d006      	beq.n	80023ea <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023dc:	2304      	movs	r3, #4
 80023de:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80023e0:	2300      	movs	r3, #0
 80023e2:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
 80023e8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	f023 030e 	bic.w	r3, r3, #14
 80023f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80023f4:	6802      	ldr	r2, [r0, #0]
 80023f6:	6813      	ldr	r3, [r2, #0]
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002400:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002402:	2201      	movs	r2, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800240a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 800240e:	2300      	movs	r3, #0
 8002410:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002414:	4618      	mov	r0, r3
}
 8002416:	4770      	bx	lr

08002418 <HAL_DMA_Abort_IT>:
{  
 8002418:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800241a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800241e:	2b02      	cmp	r3, #2
 8002420:	d003      	beq.n	800242a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	2304      	movs	r3, #4
 8002424:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002426:	2001      	movs	r0, #1
}
 8002428:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242a:	6802      	ldr	r2, [r0, #0]
 800242c:	6813      	ldr	r3, [r2, #0]
 800242e:	f023 030e 	bic.w	r3, r3, #14
 8002432:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002434:	6802      	ldr	r2, [r0, #0]
 8002436:	6813      	ldr	r3, [r2, #0]
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800243e:	6803      	ldr	r3, [r0, #0]
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <HAL_DMA_Abort_IT+0x90>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d014      	beq.n	8002470 <HAL_DMA_Abort_IT+0x58>
 8002446:	3214      	adds	r2, #20
 8002448:	4293      	cmp	r3, r2
 800244a:	d01f      	beq.n	800248c <HAL_DMA_Abort_IT+0x74>
 800244c:	3214      	adds	r2, #20
 800244e:	4293      	cmp	r3, r2
 8002450:	d01e      	beq.n	8002490 <HAL_DMA_Abort_IT+0x78>
 8002452:	3214      	adds	r2, #20
 8002454:	4293      	cmp	r3, r2
 8002456:	d01e      	beq.n	8002496 <HAL_DMA_Abort_IT+0x7e>
 8002458:	3214      	adds	r2, #20
 800245a:	4293      	cmp	r3, r2
 800245c:	d01e      	beq.n	800249c <HAL_DMA_Abort_IT+0x84>
 800245e:	3214      	adds	r2, #20
 8002460:	4293      	cmp	r3, r2
 8002462:	d002      	beq.n	800246a <HAL_DMA_Abort_IT+0x52>
 8002464:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002468:	e003      	b.n	8002472 <HAL_DMA_Abort_IT+0x5a>
 800246a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800246e:	e000      	b.n	8002472 <HAL_DMA_Abort_IT+0x5a>
 8002470:	2201      	movs	r2, #1
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_DMA_Abort_IT+0x94>)
 8002474:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002476:	2301      	movs	r3, #1
 8002478:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800247c:	2300      	movs	r3, #0
 800247e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002482:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002484:	b16b      	cbz	r3, 80024a2 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002486:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2000      	movs	r0, #0
 800248a:	e7cd      	b.n	8002428 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800248c:	2210      	movs	r2, #16
 800248e:	e7f0      	b.n	8002472 <HAL_DMA_Abort_IT+0x5a>
 8002490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002494:	e7ed      	b.n	8002472 <HAL_DMA_Abort_IT+0x5a>
 8002496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800249a:	e7ea      	b.n	8002472 <HAL_DMA_Abort_IT+0x5a>
 800249c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024a0:	e7e7      	b.n	8002472 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2000      	movs	r0, #0
 80024a4:	e7c0      	b.n	8002428 <HAL_DMA_Abort_IT+0x10>
 80024a6:	bf00      	nop
 80024a8:	40020008 	.word	0x40020008
 80024ac:	40020000 	.word	0x40020000

080024b0 <HAL_DMA_IRQHandler>:
{
 80024b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80024b4:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80024b6:	6804      	ldr	r4, [r0, #0]
 80024b8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024ba:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80024bc:	2304      	movs	r3, #4
 80024be:	408b      	lsls	r3, r1
 80024c0:	4213      	tst	r3, r2
 80024c2:	d035      	beq.n	8002530 <HAL_DMA_IRQHandler+0x80>
 80024c4:	f015 0f04 	tst.w	r5, #4
 80024c8:	d032      	beq.n	8002530 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	f013 0f20 	tst.w	r3, #32
 80024d0:	d103      	bne.n	80024da <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024da:	6803      	ldr	r3, [r0, #0]
 80024dc:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_DMA_IRQHandler+0x13c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d014      	beq.n	800250c <HAL_DMA_IRQHandler+0x5c>
 80024e2:	3214      	adds	r2, #20
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d018      	beq.n	800251a <HAL_DMA_IRQHandler+0x6a>
 80024e8:	3214      	adds	r2, #20
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d017      	beq.n	800251e <HAL_DMA_IRQHandler+0x6e>
 80024ee:	3214      	adds	r2, #20
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d017      	beq.n	8002524 <HAL_DMA_IRQHandler+0x74>
 80024f4:	3214      	adds	r2, #20
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d017      	beq.n	800252a <HAL_DMA_IRQHandler+0x7a>
 80024fa:	3214      	adds	r2, #20
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d002      	beq.n	8002506 <HAL_DMA_IRQHandler+0x56>
 8002500:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002504:	e003      	b.n	800250e <HAL_DMA_IRQHandler+0x5e>
 8002506:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800250a:	e000      	b.n	800250e <HAL_DMA_IRQHandler+0x5e>
 800250c:	2204      	movs	r2, #4
 800250e:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_DMA_IRQHandler+0x140>)
 8002510:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002512:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002514:	b103      	cbz	r3, 8002518 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8002516:	4798      	blx	r3
}
 8002518:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	e7f7      	b.n	800250e <HAL_DMA_IRQHandler+0x5e>
 800251e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002522:	e7f4      	b.n	800250e <HAL_DMA_IRQHandler+0x5e>
 8002524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002528:	e7f1      	b.n	800250e <HAL_DMA_IRQHandler+0x5e>
 800252a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800252e:	e7ee      	b.n	800250e <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002530:	2302      	movs	r3, #2
 8002532:	408b      	lsls	r3, r1
 8002534:	4213      	tst	r3, r2
 8002536:	d03c      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x102>
 8002538:	f015 0f02 	tst.w	r5, #2
 800253c:	d039      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	f013 0f20 	tst.w	r3, #32
 8002544:	d106      	bne.n	8002554 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	f023 030a 	bic.w	r3, r3, #10
 800254c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800254e:	2301      	movs	r3, #1
 8002550:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002554:	6803      	ldr	r3, [r0, #0]
 8002556:	4a25      	ldr	r2, [pc, #148]	; (80025ec <HAL_DMA_IRQHandler+0x13c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d014      	beq.n	8002586 <HAL_DMA_IRQHandler+0xd6>
 800255c:	3214      	adds	r2, #20
 800255e:	4293      	cmp	r3, r2
 8002560:	d01c      	beq.n	800259c <HAL_DMA_IRQHandler+0xec>
 8002562:	3214      	adds	r2, #20
 8002564:	4293      	cmp	r3, r2
 8002566:	d01b      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xf0>
 8002568:	3214      	adds	r2, #20
 800256a:	4293      	cmp	r3, r2
 800256c:	d01b      	beq.n	80025a6 <HAL_DMA_IRQHandler+0xf6>
 800256e:	3214      	adds	r2, #20
 8002570:	4293      	cmp	r3, r2
 8002572:	d01b      	beq.n	80025ac <HAL_DMA_IRQHandler+0xfc>
 8002574:	3214      	adds	r2, #20
 8002576:	4293      	cmp	r3, r2
 8002578:	d002      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd0>
 800257a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800257e:	e003      	b.n	8002588 <HAL_DMA_IRQHandler+0xd8>
 8002580:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002584:	e000      	b.n	8002588 <HAL_DMA_IRQHandler+0xd8>
 8002586:	2202      	movs	r2, #2
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_DMA_IRQHandler+0x140>)
 800258a:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 800258c:	2300      	movs	r3, #0
 800258e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002592:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0bf      	beq.n	8002518 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8002598:	4798      	blx	r3
 800259a:	e7bd      	b.n	8002518 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800259c:	2220      	movs	r2, #32
 800259e:	e7f3      	b.n	8002588 <HAL_DMA_IRQHandler+0xd8>
 80025a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a4:	e7f0      	b.n	8002588 <HAL_DMA_IRQHandler+0xd8>
 80025a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025aa:	e7ed      	b.n	8002588 <HAL_DMA_IRQHandler+0xd8>
 80025ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b0:	e7ea      	b.n	8002588 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025b2:	2308      	movs	r3, #8
 80025b4:	fa03 f101 	lsl.w	r1, r3, r1
 80025b8:	4211      	tst	r1, r2
 80025ba:	d0ad      	beq.n	8002518 <HAL_DMA_IRQHandler+0x68>
 80025bc:	f015 0f08 	tst.w	r5, #8
 80025c0:	d0aa      	beq.n	8002518 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	f023 030e 	bic.w	r3, r3, #14
 80025c8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80025cc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80025ce:	2301      	movs	r3, #1
 80025d0:	fa03 f202 	lsl.w	r2, r3, r2
 80025d4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025d6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80025d8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80025dc:	2300      	movs	r3, #0
 80025de:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80025e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d097      	beq.n	8002518 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 80025e8:	4798      	blx	r3
  return;
 80025ea:	e795      	b.n	8002518 <HAL_DMA_IRQHandler+0x68>
 80025ec:	40020008 	.word	0x40020008
 80025f0:	40020000 	.word	0x40020000

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b570      	push	{r4, r5, r6, lr}
 80025f6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025f8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80025fa:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fc:	e0a6      	b.n	800274c <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025fe:	4d80      	ldr	r5, [pc, #512]	; (8002800 <HAL_GPIO_Init+0x20c>)
 8002600:	42aa      	cmp	r2, r5
 8002602:	d010      	beq.n	8002626 <HAL_GPIO_Init+0x32>
 8002604:	d907      	bls.n	8002616 <HAL_GPIO_Init+0x22>
 8002606:	4d7f      	ldr	r5, [pc, #508]	; (8002804 <HAL_GPIO_Init+0x210>)
 8002608:	42aa      	cmp	r2, r5
 800260a:	d00c      	beq.n	8002626 <HAL_GPIO_Init+0x32>
 800260c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8002610:	42aa      	cmp	r2, r5
 8002612:	d008      	beq.n	8002626 <HAL_GPIO_Init+0x32>
 8002614:	e013      	b.n	800263e <HAL_GPIO_Init+0x4a>
 8002616:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800261a:	42aa      	cmp	r2, r5
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x32>
 800261e:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8002622:	42aa      	cmp	r2, r5
 8002624:	d107      	bne.n	8002636 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002626:	688a      	ldr	r2, [r1, #8]
 8002628:	2a00      	cmp	r2, #0
 800262a:	d058      	beq.n	80026de <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800262c:	2a01      	cmp	r2, #1
 800262e:	d051      	beq.n	80026d4 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002630:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002632:	2408      	movs	r4, #8
 8002634:	e003      	b.n	800263e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8002636:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800263a:	42aa      	cmp	r2, r5
 800263c:	d0f3      	beq.n	8002626 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800263e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002642:	d84e      	bhi.n	80026e2 <HAL_GPIO_Init+0xee>
 8002644:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002646:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800264a:	d84c      	bhi.n	80026e6 <HAL_GPIO_Init+0xf2>
 800264c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002650:	6833      	ldr	r3, [r6, #0]
 8002652:	250f      	movs	r5, #15
 8002654:	4095      	lsls	r5, r2
 8002656:	ea23 0305 	bic.w	r3, r3, r5
 800265a:	fa04 f202 	lsl.w	r2, r4, r2
 800265e:	4313      	orrs	r3, r2
 8002660:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002662:	684b      	ldr	r3, [r1, #4]
 8002664:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002668:	d06e      	beq.n	8002748 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_GPIO_Init+0x214>)
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	619a      	str	r2, [r3, #24]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800267e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8002682:	1c95      	adds	r5, r2, #2
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_GPIO_Init+0x218>)
 8002686:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268a:	f00c 0303 	and.w	r3, ip, #3
 800268e:	009d      	lsls	r5, r3, #2
 8002690:	230f      	movs	r3, #15
 8002692:	40ab      	lsls	r3, r5
 8002694:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002698:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_GPIO_Init+0x21c>)
 800269a:	4298      	cmp	r0, r3
 800269c:	d029      	beq.n	80026f2 <HAL_GPIO_Init+0xfe>
 800269e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a2:	4298      	cmp	r0, r3
 80026a4:	f000 808e 	beq.w	80027c4 <HAL_GPIO_Init+0x1d0>
 80026a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ac:	4298      	cmp	r0, r3
 80026ae:	f000 808b 	beq.w	80027c8 <HAL_GPIO_Init+0x1d4>
 80026b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b6:	4298      	cmp	r0, r3
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0xfa>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e01a      	b.n	80026f4 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026be:	68cc      	ldr	r4, [r1, #12]
          break;
 80026c0:	e7bd      	b.n	800263e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026c2:	68cc      	ldr	r4, [r1, #12]
 80026c4:	3404      	adds	r4, #4
          break;
 80026c6:	e7ba      	b.n	800263e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026c8:	68cc      	ldr	r4, [r1, #12]
 80026ca:	3408      	adds	r4, #8
          break;
 80026cc:	e7b7      	b.n	800263e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026ce:	68cc      	ldr	r4, [r1, #12]
 80026d0:	340c      	adds	r4, #12
          break;
 80026d2:	e7b4      	b.n	800263e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80026d4:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d6:	2408      	movs	r4, #8
 80026d8:	e7b1      	b.n	800263e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026da:	2400      	movs	r4, #0
 80026dc:	e7af      	b.n	800263e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026de:	2404      	movs	r4, #4
 80026e0:	e7ad      	b.n	800263e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026e2:	1d06      	adds	r6, r0, #4
 80026e4:	e7af      	b.n	8002646 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e6:	f1ac 0208 	sub.w	r2, ip, #8
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	e7b0      	b.n	8002650 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026ee:	2303      	movs	r3, #3
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x100>
 80026f2:	2300      	movs	r3, #0
 80026f4:	40ab      	lsls	r3, r5
 80026f6:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80026f8:	3202      	adds	r2, #2
 80026fa:	4d44      	ldr	r5, [pc, #272]	; (800280c <HAL_GPIO_Init+0x218>)
 80026fc:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002700:	684b      	ldr	r3, [r1, #4]
 8002702:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002706:	d061      	beq.n	80027cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002708:	4a42      	ldr	r2, [pc, #264]	; (8002814 <HAL_GPIO_Init+0x220>)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	ea43 030e 	orr.w	r3, r3, lr
 8002710:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002712:	684b      	ldr	r3, [r1, #4]
 8002714:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002718:	d05e      	beq.n	80027d8 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800271a:	4a3e      	ldr	r2, [pc, #248]	; (8002814 <HAL_GPIO_Init+0x220>)
 800271c:	6853      	ldr	r3, [r2, #4]
 800271e:	ea43 030e 	orr.w	r3, r3, lr
 8002722:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002724:	684b      	ldr	r3, [r1, #4]
 8002726:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800272a:	d05b      	beq.n	80027e4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800272c:	4a39      	ldr	r2, [pc, #228]	; (8002814 <HAL_GPIO_Init+0x220>)
 800272e:	6893      	ldr	r3, [r2, #8]
 8002730:	ea43 030e 	orr.w	r3, r3, lr
 8002734:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002736:	684b      	ldr	r3, [r1, #4]
 8002738:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800273c:	d058      	beq.n	80027f0 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_GPIO_Init+0x220>)
 8002740:	68d3      	ldr	r3, [r2, #12]
 8002742:	ea43 030e 	orr.w	r3, r3, lr
 8002746:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002748:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274c:	680a      	ldr	r2, [r1, #0]
 800274e:	fa32 f30c 	lsrs.w	r3, r2, ip
 8002752:	d053      	beq.n	80027fc <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8002754:	2301      	movs	r3, #1
 8002756:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 800275e:	ea33 0202 	bics.w	r2, r3, r2
 8002762:	d1f1      	bne.n	8002748 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8002764:	684a      	ldr	r2, [r1, #4]
 8002766:	2a12      	cmp	r2, #18
 8002768:	f63f af49 	bhi.w	80025fe <HAL_GPIO_Init+0xa>
 800276c:	2a12      	cmp	r2, #18
 800276e:	f63f af66 	bhi.w	800263e <HAL_GPIO_Init+0x4a>
 8002772:	a501      	add	r5, pc, #4	; (adr r5, 8002778 <HAL_GPIO_Init+0x184>)
 8002774:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002778:	08002627 	.word	0x08002627
 800277c:	080026bf 	.word	0x080026bf
 8002780:	080026c9 	.word	0x080026c9
 8002784:	080026db 	.word	0x080026db
 8002788:	0800263f 	.word	0x0800263f
 800278c:	0800263f 	.word	0x0800263f
 8002790:	0800263f 	.word	0x0800263f
 8002794:	0800263f 	.word	0x0800263f
 8002798:	0800263f 	.word	0x0800263f
 800279c:	0800263f 	.word	0x0800263f
 80027a0:	0800263f 	.word	0x0800263f
 80027a4:	0800263f 	.word	0x0800263f
 80027a8:	0800263f 	.word	0x0800263f
 80027ac:	0800263f 	.word	0x0800263f
 80027b0:	0800263f 	.word	0x0800263f
 80027b4:	0800263f 	.word	0x0800263f
 80027b8:	0800263f 	.word	0x0800263f
 80027bc:	080026c3 	.word	0x080026c3
 80027c0:	080026cf 	.word	0x080026cf
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027c4:	2301      	movs	r3, #1
 80027c6:	e795      	b.n	80026f4 <HAL_GPIO_Init+0x100>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e793      	b.n	80026f4 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027cc:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_GPIO_Init+0x220>)
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	ea23 030e 	bic.w	r3, r3, lr
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e79c      	b.n	8002712 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_GPIO_Init+0x220>)
 80027da:	6853      	ldr	r3, [r2, #4]
 80027dc:	ea23 030e 	bic.w	r3, r3, lr
 80027e0:	6053      	str	r3, [r2, #4]
 80027e2:	e79f      	b.n	8002724 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <HAL_GPIO_Init+0x220>)
 80027e6:	6893      	ldr	r3, [r2, #8]
 80027e8:	ea23 030e 	bic.w	r3, r3, lr
 80027ec:	6093      	str	r3, [r2, #8]
 80027ee:	e7a2      	b.n	8002736 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_GPIO_Init+0x220>)
 80027f2:	68d3      	ldr	r3, [r2, #12]
 80027f4:	ea23 030e 	bic.w	r3, r3, lr
 80027f8:	60d3      	str	r3, [r2, #12]
 80027fa:	e7a5      	b.n	8002748 <HAL_GPIO_Init+0x154>
  }
}
 80027fc:	b002      	add	sp, #8
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	10220000 	.word	0x10220000
 8002804:	10310000 	.word	0x10310000
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000
 8002810:	40010800 	.word	0x40010800
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002818:	b10a      	cbz	r2, 800281e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281a:	6101      	str	r1, [r0, #16]
 800281c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281e:	0409      	lsls	r1, r1, #16
 8002820:	6101      	str	r1, [r0, #16]
  }
}
 8002822:	4770      	bx	lr

08002824 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	2800      	cmp	r0, #0
 8002826:	f000 80cc 	beq.w	80029c2 <HAL_I2C_Init+0x19e>
{
 800282a:	b570      	push	{r4, r5, r6, lr}
 800282c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002832:	2b00      	cmp	r3, #0
 8002834:	d077      	beq.n	8002926 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002836:	2324      	movs	r3, #36	; 0x24
 8002838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002858:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800285a:	f000 fbd3 	bl	8003004 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285e:	6862      	ldr	r2, [r4, #4]
 8002860:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_I2C_Init+0x1a8>)
 8002862:	429a      	cmp	r2, r3
 8002864:	d864      	bhi.n	8002930 <HAL_I2C_Init+0x10c>
 8002866:	4b5a      	ldr	r3, [pc, #360]	; (80029d0 <HAL_I2C_Init+0x1ac>)
 8002868:	4298      	cmp	r0, r3
 800286a:	bf8c      	ite	hi
 800286c:	2300      	movhi	r3, #0
 800286e:	2301      	movls	r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 80a8 	bne.w	80029c6 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002876:	4957      	ldr	r1, [pc, #348]	; (80029d4 <HAL_I2C_Init+0x1b0>)
 8002878:	fba1 3100 	umull	r3, r1, r1, r0
 800287c:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800287e:	6825      	ldr	r5, [r4, #0]
 8002880:	686a      	ldr	r2, [r5, #4]
 8002882:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002886:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800288a:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288c:	6821      	ldr	r1, [r4, #0]
 800288e:	6a0a      	ldr	r2, [r1, #32]
 8002890:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002894:	6866      	ldr	r6, [r4, #4]
 8002896:	4d4d      	ldr	r5, [pc, #308]	; (80029cc <HAL_I2C_Init+0x1a8>)
 8002898:	42ae      	cmp	r6, r5
 800289a:	d84f      	bhi.n	800293c <HAL_I2C_Init+0x118>
 800289c:	3301      	adds	r3, #1
 800289e:	4313      	orrs	r3, r2
 80028a0:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a2:	6821      	ldr	r1, [r4, #0]
 80028a4:	69ca      	ldr	r2, [r1, #28]
 80028a6:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80028aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ae:	6866      	ldr	r6, [r4, #4]
 80028b0:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_I2C_Init+0x1a8>)
 80028b2:	429e      	cmp	r6, r3
 80028b4:	d84c      	bhi.n	8002950 <HAL_I2C_Init+0x12c>
 80028b6:	1e43      	subs	r3, r0, #1
 80028b8:	0076      	lsls	r6, r6, #1
 80028ba:	fbb3 f3f6 	udiv	r3, r3, r6
 80028be:	3301      	adds	r3, #1
 80028c0:	f640 70fc 	movw	r0, #4092	; 0xffc
 80028c4:	4203      	tst	r3, r0
 80028c6:	d078      	beq.n	80029ba <HAL_I2C_Init+0x196>
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d0:	6821      	ldr	r1, [r4, #0]
 80028d2:	680b      	ldr	r3, [r1, #0]
 80028d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028d8:	69e2      	ldr	r2, [r4, #28]
 80028da:	6a20      	ldr	r0, [r4, #32]
 80028dc:	4302      	orrs	r2, r0
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028e2:	6821      	ldr	r1, [r4, #0]
 80028e4:	688b      	ldr	r3, [r1, #8]
 80028e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ee:	6922      	ldr	r2, [r4, #16]
 80028f0:	68e0      	ldr	r0, [r4, #12]
 80028f2:	4302      	orrs	r2, r0
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f8:	6821      	ldr	r1, [r4, #0]
 80028fa:	68cb      	ldr	r3, [r1, #12]
 80028fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002900:	6962      	ldr	r2, [r4, #20]
 8002902:	69a0      	ldr	r0, [r4, #24]
 8002904:	4302      	orrs	r2, r0
 8002906:	4313      	orrs	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800290a:	6822      	ldr	r2, [r4, #0]
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	2000      	movs	r0, #0
 8002916:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002918:	2320      	movs	r3, #32
 800291a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800291e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8002924:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002926:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800292a:	f7fe ff4d 	bl	80017c8 <HAL_I2C_MspInit>
 800292e:	e782      	b.n	8002836 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_I2C_Init+0x1b4>)
 8002932:	4298      	cmp	r0, r3
 8002934:	bf8c      	ite	hi
 8002936:	2300      	movhi	r3, #0
 8002938:	2301      	movls	r3, #1
 800293a:	e799      	b.n	8002870 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800293c:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002940:	fb05 f303 	mul.w	r3, r5, r3
 8002944:	4d25      	ldr	r5, [pc, #148]	; (80029dc <HAL_I2C_Init+0x1b8>)
 8002946:	fba5 5303 	umull	r5, r3, r5, r3
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	3301      	adds	r3, #1
 800294e:	e7a6      	b.n	800289e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002950:	68a3      	ldr	r3, [r4, #8]
 8002952:	b9bb      	cbnz	r3, 8002984 <HAL_I2C_Init+0x160>
 8002954:	1e45      	subs	r5, r0, #1
 8002956:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 800295a:	fbb5 f5fc 	udiv	r5, r5, ip
 800295e:	3501      	adds	r5, #1
 8002960:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8002964:	fab5 f585 	clz	r5, r5
 8002968:	096d      	lsrs	r5, r5, #5
 800296a:	bb45      	cbnz	r5, 80029be <HAL_I2C_Init+0x19a>
 800296c:	b9c3      	cbnz	r3, 80029a0 <HAL_I2C_Init+0x17c>
 800296e:	3801      	subs	r0, #1
 8002970:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002974:	fbb0 f3f3 	udiv	r3, r0, r3
 8002978:	3301      	adds	r3, #1
 800297a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	e7a3      	b.n	80028cc <HAL_I2C_Init+0xa8>
 8002984:	1e45      	subs	r5, r0, #1
 8002986:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 800298a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800298e:	fbb5 f5fc 	udiv	r5, r5, ip
 8002992:	3501      	adds	r5, #1
 8002994:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8002998:	fab5 f585 	clz	r5, r5
 800299c:	096d      	lsrs	r5, r5, #5
 800299e:	e7e4      	b.n	800296a <HAL_I2C_Init+0x146>
 80029a0:	3801      	subs	r0, #1
 80029a2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80029a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b8:	e788      	b.n	80028cc <HAL_I2C_Init+0xa8>
 80029ba:	2304      	movs	r3, #4
 80029bc:	e786      	b.n	80028cc <HAL_I2C_Init+0xa8>
 80029be:	2301      	movs	r3, #1
 80029c0:	e784      	b.n	80028cc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
}
 80029c4:	4770      	bx	lr
    return HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
 80029c8:	e7ac      	b.n	8002924 <HAL_I2C_Init+0x100>
 80029ca:	bf00      	nop
 80029cc:	000186a0 	.word	0x000186a0
 80029d0:	001e847f 	.word	0x001e847f
 80029d4:	431bde83 	.word	0x431bde83
 80029d8:	003d08ff 	.word	0x003d08ff
 80029dc:	10624dd3 	.word	0x10624dd3

080029e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <RCC_Delay+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <RCC_Delay+0x28>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	0a5b      	lsrs	r3, r3, #9
 80029ee:	fb00 f303 	mul.w	r3, r0, r3
 80029f2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80029f4:	bf00      	nop
  }
  while (Delay --);
 80029f6:	9b01      	ldr	r3, [sp, #4]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	9201      	str	r2, [sp, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <RCC_Delay+0x14>
}
 8002a00:	b002      	add	sp, #8
 8002a02:	4770      	bx	lr
 8002a04:	20000000 	.word	0x20000000
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	f000 81f1 	beq.w	8002df4 <HAL_RCC_OscConfig+0x3e8>
{
 8002a12:	b570      	push	{r4, r5, r6, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a18:	6803      	ldr	r3, [r0, #0]
 8002a1a:	f013 0f01 	tst.w	r3, #1
 8002a1e:	d02c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a20:	4b99      	ldr	r3, [pc, #612]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d01d      	beq.n	8002a68 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a2c:	4b96      	ldr	r3, [pc, #600]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d012      	beq.n	8002a5e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d041      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xb8>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d155      	bne.n	8002af0 <HAL_RCC_OscConfig+0xe4>
 8002a44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a48:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e037      	b.n	8002ace <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5e:	4b8a      	ldr	r3, [pc, #552]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a66:	d0e7      	beq.n	8002a38 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	4b87      	ldr	r3, [pc, #540]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_OscConfig+0x6e>
 8002a72:	6863      	ldr	r3, [r4, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 81bf 	beq.w	8002df8 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	f013 0f02 	tst.w	r3, #2
 8002a80:	d075      	beq.n	8002b6e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a82:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f013 0f0c 	tst.w	r3, #12
 8002a8a:	d05f      	beq.n	8002b4c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a8c:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d054      	beq.n	8002b42 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a98:	6923      	ldr	r3, [r4, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 808a 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002aa0:	4b7a      	ldr	r3, [pc, #488]	; (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002aa6:	f7ff f91f 	bl	8001ce8 <HAL_GetTick>
 8002aaa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f013 0f02 	tst.w	r3, #2
 8002ab4:	d175      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7ff f917 	bl	8001ce8 <HAL_GetTick>
 8002aba:	1b40      	subs	r0, r0, r5
 8002abc:	2802      	cmp	r0, #2
 8002abe:	d9f5      	bls.n	8002aac <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	e19e      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	4a70      	ldr	r2, [pc, #448]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	b343      	cbz	r3, 8002b24 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002ad2:	f7ff f909 	bl	8001ce8 <HAL_GetTick>
 8002ad6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad8:	4b6b      	ldr	r3, [pc, #428]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ae0:	d1cb      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7ff f901 	bl	8001ce8 <HAL_GetTick>
 8002ae6:	1b40      	subs	r0, r0, r5
 8002ae8:	2864      	cmp	r0, #100	; 0x64
 8002aea:	d9f5      	bls.n	8002ad8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
 8002aee:	e188      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_OscConfig+0xfe>
 8002af6:	4b64      	ldr	r3, [pc, #400]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e7e1      	b.n	8002ace <HAL_RCC_OscConfig+0xc2>
 8002b0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b0e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e7d4      	b.n	8002ace <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002b24:	f7ff f8e0 	bl	8001ce8 <HAL_GetTick>
 8002b28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b32:	d0a2      	beq.n	8002a7a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7ff f8d8 	bl	8001ce8 <HAL_GetTick>
 8002b38:	1b40      	subs	r0, r0, r5
 8002b3a:	2864      	cmp	r0, #100	; 0x64
 8002b3c:	d9f5      	bls.n	8002b2a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002b3e:	2003      	movs	r0, #3
 8002b40:	e15f      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b42:	4b51      	ldr	r3, [pc, #324]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002b4a:	d1a5      	bne.n	8002a98 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4c:	4b4e      	ldr	r3, [pc, #312]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f013 0f02 	tst.w	r3, #2
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_OscConfig+0x152>
 8002b56:	6923      	ldr	r3, [r4, #16]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	f040 814f 	bne.w	8002dfc <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4a4a      	ldr	r2, [pc, #296]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002b60:	6813      	ldr	r3, [r2, #0]
 8002b62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b66:	6961      	ldr	r1, [r4, #20]
 8002b68:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b6c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	f013 0f08 	tst.w	r3, #8
 8002b74:	d033      	beq.n	8002bde <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b76:	69a3      	ldr	r3, [r4, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002b7c:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002b84:	f7ff f8b0 	bl	8001ce8 <HAL_GetTick>
 8002b88:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f013 0f02 	tst.w	r3, #2
 8002b92:	d121      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b94:	f7ff f8a8 	bl	8001ce8 <HAL_GetTick>
 8002b98:	1b40      	subs	r0, r0, r5
 8002b9a:	2802      	cmp	r0, #2
 8002b9c:	d9f5      	bls.n	8002b8a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	e12f      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002ba4:	6813      	ldr	r3, [r2, #0]
 8002ba6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002baa:	6961      	ldr	r1, [r4, #20]
 8002bac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e7dc      	b.n	8002b6e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bba:	f7ff f895 	bl	8001ce8 <HAL_GetTick>
 8002bbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f013 0f02 	tst.w	r3, #2
 8002bc8:	d0d1      	beq.n	8002b6e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7ff f88d 	bl	8001ce8 <HAL_GetTick>
 8002bce:	1b40      	subs	r0, r0, r5
 8002bd0:	2802      	cmp	r0, #2
 8002bd2:	d9f5      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	e114      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7ff ff01 	bl	80029e0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f013 0f04 	tst.w	r3, #4
 8002be4:	f000 8096 	beq.w	8002d14 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002bf0:	d134      	bne.n	8002c5c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bfa:	61da      	str	r2, [r3, #28]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c06:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCC_OscConfig+0x284>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c10:	d026      	beq.n	8002c60 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c12:	68e3      	ldr	r3, [r4, #12]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d03d      	beq.n	8002c94 <HAL_RCC_OscConfig+0x288>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d153      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2b8>
 8002c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c20:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	621a      	str	r2, [r3, #32]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	621a      	str	r2, [r3, #32]
 8002c34:	e033      	b.n	8002c9e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002c3e:	f7ff f853 	bl	8001ce8 <HAL_GetTick>
 8002c42:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f013 0f02 	tst.w	r3, #2
 8002c4c:	d0c7      	beq.n	8002bde <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7ff f84b 	bl	8001ce8 <HAL_GetTick>
 8002c52:	1b40      	subs	r0, r0, r5
 8002c54:	2802      	cmp	r0, #2
 8002c56:	d9f5      	bls.n	8002c44 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8002c58:	2003      	movs	r0, #3
 8002c5a:	e0d2      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8002c5c:	2500      	movs	r5, #0
 8002c5e:	e7d3      	b.n	8002c08 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c60:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x284>)
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c6a:	f7ff f83d 	bl	8001ce8 <HAL_GetTick>
 8002c6e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_RCC_OscConfig+0x284>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c78:	d1cb      	bne.n	8002c12 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7ff f835 	bl	8001ce8 <HAL_GetTick>
 8002c7e:	1b80      	subs	r0, r0, r6
 8002c80:	2864      	cmp	r0, #100	; 0x64
 8002c82:	d9f5      	bls.n	8002c70 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8002c84:	2003      	movs	r0, #3
 8002c86:	e0bc      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	42420000 	.word	0x42420000
 8002c90:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	4a5f      	ldr	r2, [pc, #380]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002c96:	6a13      	ldr	r3, [r2, #32]
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9e:	68e3      	ldr	r3, [r4, #12]
 8002ca0:	b333      	cbz	r3, 8002cf0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8002ca2:	f7ff f821 	bl	8001ce8 <HAL_GetTick>
 8002ca6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f013 0f02 	tst.w	r3, #2
 8002cb0:	d12f      	bne.n	8002d12 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7ff f819 	bl	8001ce8 <HAL_GetTick>
 8002cb6:	1b80      	subs	r0, r0, r6
 8002cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	d9f3      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	e09e      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d009      	beq.n	8002cdc <HAL_RCC_OscConfig+0x2d0>
 8002cc8:	4b52      	ldr	r3, [pc, #328]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	621a      	str	r2, [r3, #32]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	f022 0204 	bic.w	r2, r2, #4
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	e7e0      	b.n	8002c9e <HAL_RCC_OscConfig+0x292>
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	f042 0204 	orr.w	r2, r2, #4
 8002ce4:	621a      	str	r2, [r3, #32]
 8002ce6:	6a1a      	ldr	r2, [r3, #32]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	621a      	str	r2, [r3, #32]
 8002cee:	e7d6      	b.n	8002c9e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fffa 	bl	8001ce8 <HAL_GetTick>
 8002cf4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f013 0f02 	tst.w	r3, #2
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe fff2 	bl	8001ce8 <HAL_GetTick>
 8002d04:	1b80      	subs	r0, r0, r6
 8002d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d0a:	4298      	cmp	r0, r3
 8002d0c:	d9f3      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002d0e:	2003      	movs	r0, #3
 8002d10:	e077      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002d12:	b9e5      	cbnz	r5, 8002d4e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d14:	69e3      	ldr	r3, [r4, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d072      	beq.n	8002e00 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d1a:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002d1c:	6852      	ldr	r2, [r2, #4]
 8002d1e:	f002 020c 	and.w	r2, r2, #12
 8002d22:	2a08      	cmp	r2, #8
 8002d24:	d056      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d017      	beq.n	8002d5a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_OscConfig+0x40c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002d30:	f7fe ffda 	bl	8001ce8 <HAL_GetTick>
 8002d34:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d3e:	d047      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe ffd2 	bl	8001ce8 <HAL_GetTick>
 8002d44:	1b00      	subs	r0, r0, r4
 8002d46:	2802      	cmp	r0, #2
 8002d48:	d9f5      	bls.n	8002d36 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	e059      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4a31      	ldr	r2, [pc, #196]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002d50:	69d3      	ldr	r3, [r2, #28]
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d56:	61d3      	str	r3, [r2, #28]
 8002d58:	e7dc      	b.n	8002d14 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_RCC_OscConfig+0x40c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002d60:	f7fe ffc2 	bl	8001ce8 <HAL_GetTick>
 8002d64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d6e:	d006      	beq.n	8002d7e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe ffba 	bl	8001ce8 <HAL_GetTick>
 8002d74:	1b40      	subs	r0, r0, r5
 8002d76:	2802      	cmp	r0, #2
 8002d78:	d9f5      	bls.n	8002d66 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002d7a:	2003      	movs	r0, #3
 8002d7c:	e041      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d7e:	6a23      	ldr	r3, [r4, #32]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d01a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d86:	4923      	ldr	r1, [pc, #140]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002d88:	684b      	ldr	r3, [r1, #4]
 8002d8a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002d8e:	6a22      	ldr	r2, [r4, #32]
 8002d90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d92:	4302      	orrs	r2, r0
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_RCC_OscConfig+0x40c>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002d9e:	f7fe ffa3 	bl	8001ce8 <HAL_GetTick>
 8002da2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dac:	d10e      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe ff9b 	bl	8001ce8 <HAL_GetTick>
 8002db2:	1b00      	subs	r0, r0, r4
 8002db4:	2802      	cmp	r0, #2
 8002db6:	d9f5      	bls.n	8002da4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002db8:	2003      	movs	r0, #3
 8002dba:	e022      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002dbe:	6853      	ldr	r3, [r2, #4]
 8002dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002dc4:	68a1      	ldr	r1, [r4, #8]
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6053      	str	r3, [r2, #4]
 8002dca:	e7dc      	b.n	8002d86 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002dcc:	2000      	movs	r0, #0
 8002dce:	e018      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	e016      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d016      	beq.n	8002e06 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_RCC_OscConfig+0x408>)
 8002dda:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002de0:	6a22      	ldr	r2, [r4, #32]
 8002de2:	4291      	cmp	r1, r2
 8002de4:	d111      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002de6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002dea:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d10e      	bne.n	8002e0e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002df0:	2000      	movs	r0, #0
 8002df2:	e006      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002df4:	2001      	movs	r0, #1
}
 8002df6:	4770      	bx	lr
        return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e002      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002e00:	2000      	movs	r0, #0
}
 8002e02:	b002      	add	sp, #8
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
 8002e08:	e7fb      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e7f9      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
 8002e0e:	2001      	movs	r0, #1
 8002e10:	e7f7      	b.n	8002e02 <HAL_RCC_OscConfig+0x3f6>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	42420000 	.word	0x42420000

08002e1c <HAL_RCC_GetSysClockFreq>:
{
 8002e1c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x60>)
 8002e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e22:	f10d 0c18 	add.w	ip, sp, #24
 8002e26:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e2a:	f240 2301 	movw	r3, #513	; 0x201
 8002e2e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x64>)
 8002e34:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	2a08      	cmp	r2, #8
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8002e3e:	4811      	ldr	r0, [pc, #68]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002e40:	b006      	add	sp, #24
 8002e42:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e44:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002e48:	3218      	adds	r2, #24
 8002e4a:	446a      	add	r2, sp
 8002e4c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002e54:	d00d      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x64>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002e5e:	3318      	adds	r3, #24
 8002e60:	446b      	add	r3, sp
 8002e62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e66:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x68>)
 8002e68:	fb02 f000 	mul.w	r0, r2, r0
 8002e6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e70:	e7e6      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002e74:	fb03 f000 	mul.w	r0, r3, r0
 8002e78:	e7e2      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x24>
 8002e7a:	bf00      	nop
 8002e7c:	08008920 	.word	0x08008920
 8002e80:	40021000 	.word	0x40021000
 8002e84:	007a1200 	.word	0x007a1200
 8002e88:	003d0900 	.word	0x003d0900

08002e8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	f000 80a0 	beq.w	8002fd2 <HAL_RCC_ClockConfig+0x146>
{
 8002e92:	b570      	push	{r4, r5, r6, lr}
 8002e94:	460d      	mov	r5, r1
 8002e96:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <HAL_RCC_ClockConfig+0x158>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d20b      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea4:	4a4f      	ldr	r2, [pc, #316]	; (8002fe4 <HAL_RCC_ClockConfig+0x158>)
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	f023 0307 	bic.w	r3, r3, #7
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb0:	6813      	ldr	r3, [r2, #0]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	428b      	cmp	r3, r1
 8002eb8:	f040 808d 	bne.w	8002fd6 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	f013 0f02 	tst.w	r3, #2
 8002ec2:	d017      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	f013 0f04 	tst.w	r3, #4
 8002ec8:	d004      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eca:	4a47      	ldr	r2, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002ecc:	6853      	ldr	r3, [r2, #4]
 8002ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ed2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	f013 0f08 	tst.w	r3, #8
 8002eda:	d004      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002edc:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002ede:	6853      	ldr	r3, [r2, #4]
 8002ee0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ee4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002ee8:	6853      	ldr	r3, [r2, #4]
 8002eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eee:	68a1      	ldr	r1, [r4, #8]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	f013 0f01 	tst.w	r3, #1
 8002efa:	d031      	beq.n	8002f60 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efc:	6863      	ldr	r3, [r4, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d020      	beq.n	8002f44 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d025      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	4a38      	ldr	r2, [pc, #224]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	f012 0f02 	tst.w	r2, #2
 8002f0e:	d064      	beq.n	8002fda <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f10:	4935      	ldr	r1, [pc, #212]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002f12:	684a      	ldr	r2, [r1, #4]
 8002f14:	f022 0203 	bic.w	r2, r2, #3
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fee4 	bl	8001ce8 <HAL_GetTick>
 8002f20:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	6862      	ldr	r2, [r4, #4]
 8002f2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002f30:	d016      	beq.n	8002f60 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f32:	f7fe fed9 	bl	8001ce8 <HAL_GetTick>
 8002f36:	1b80      	subs	r0, r0, r6
 8002f38:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f3c:	4298      	cmp	r0, r3
 8002f3e:	d9f0      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002f40:	2003      	movs	r0, #3
 8002f42:	e045      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f44:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002f4c:	d1e0      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e03e      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002f5a:	d1d9      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	e037      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCC_ClockConfig+0x158>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	42ab      	cmp	r3, r5
 8002f6a:	d90a      	bls.n	8002f82 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6c:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_RCC_ClockConfig+0x158>)
 8002f6e:	6813      	ldr	r3, [r2, #0]
 8002f70:	f023 0307 	bic.w	r3, r3, #7
 8002f74:	432b      	orrs	r3, r5
 8002f76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	42ab      	cmp	r3, r5
 8002f80:	d12d      	bne.n	8002fde <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	f013 0f04 	tst.w	r3, #4
 8002f88:	d006      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002f8c:	6853      	ldr	r3, [r2, #4]
 8002f8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f92:	68e1      	ldr	r1, [r4, #12]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	f013 0f08 	tst.w	r3, #8
 8002f9e:	d007      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002fa2:	6853      	ldr	r3, [r2, #4]
 8002fa4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002fa8:	6921      	ldr	r1, [r4, #16]
 8002faa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002fae:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fb0:	f7ff ff34 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCC_ClockConfig+0x15c>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fbc:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x160>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	40d8      	lsrs	r0, r3
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x164>)
 8002fc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x168>)
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	f7fe fe49 	bl	8001c60 <HAL_InitTick>
  return HAL_OK;
 8002fce:	2000      	movs	r0, #0
}
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
}
 8002fd4:	4770      	bx	lr
    return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	e7fa      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e7f8      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
 8002fe0:	e7f6      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x144>
 8002fe2:	bf00      	nop
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08008908 	.word	0x08008908
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000008 	.word	0x20000008

08002ff8 <HAL_RCC_GetHCLKFreq>:
}
 8002ff8:	4b01      	ldr	r3, [pc, #4]	; (8003000 <HAL_RCC_GetHCLKFreq+0x8>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000000 	.word	0x20000000

08003004 <HAL_RCC_GetPCLK1Freq>:
{
 8003004:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003006:	f7ff fff7 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_RCC_GetPCLK1Freq+0x18>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003012:	4a03      	ldr	r2, [pc, #12]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
}
 8003016:	40d8      	lsrs	r0, r3
 8003018:	bd08      	pop	{r3, pc}
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	08008918 	.word	0x08008918

08003024 <HAL_RCC_GetPCLK2Freq>:
{
 8003024:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003026:	f7ff ffe7 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_RCC_GetPCLK2Freq+0x18>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003032:	4a03      	ldr	r2, [pc, #12]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
}
 8003036:	40d8      	lsrs	r0, r3
 8003038:	bd08      	pop	{r3, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	08008918 	.word	0x08008918

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800304a:	6803      	ldr	r3, [r0, #0]
 800304c:	f013 0f01 	tst.w	r3, #1
 8003050:	d036      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800305a:	d149      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003070:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f413 7f80 	tst.w	r3, #256	; 0x100
 800307a:	d03b      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800307c:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003080:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003084:	d013      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800308c:	429a      	cmp	r2, r3
 800308e:	d00e      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003090:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003092:	6a13      	ldr	r3, [r2, #32]
 8003094:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003098:	492f      	ldr	r1, [pc, #188]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800309a:	2601      	movs	r6, #1
 800309c:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030a0:	2600      	movs	r6, #0
 80030a2:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030a6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030a8:	f013 0f01 	tst.w	r3, #1
 80030ac:	d136      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ae:	4a28      	ldr	r2, [pc, #160]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80030b0:	6a13      	ldr	r3, [r2, #32]
 80030b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b6:	6861      	ldr	r1, [r4, #4]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030bc:	2d00      	cmp	r5, #0
 80030be:	d13e      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	f013 0f02 	tst.w	r3, #2
 80030c6:	d006      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c8:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80030ca:	6853      	ldr	r3, [r2, #4]
 80030cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030d0:	68a1      	ldr	r1, [r4, #8]
 80030d2:	430b      	orrs	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	f013 0f10 	tst.w	r3, #16
 80030dc:	d034      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80030e0:	6853      	ldr	r3, [r2, #4]
 80030e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030e6:	68e1      	ldr	r1, [r4, #12]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030ec:	2000      	movs	r0, #0
 80030ee:	e02c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 80030f0:	2500      	movs	r5, #0
 80030f2:	e7be      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80030fe:	f7fe fdf3 	bl	8001ce8 <HAL_GetTick>
 8003102:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	4b13      	ldr	r3, [pc, #76]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f413 7f80 	tst.w	r3, #256	; 0x100
 800310c:	d1b6      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fe fdeb 	bl	8001ce8 <HAL_GetTick>
 8003112:	1b80      	subs	r0, r0, r6
 8003114:	2864      	cmp	r0, #100	; 0x64
 8003116:	d9f5      	bls.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003118:	2003      	movs	r0, #3
 800311a:	e016      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800311c:	f7fe fde4 	bl	8001ce8 <HAL_GetTick>
 8003120:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f013 0f02 	tst.w	r3, #2
 800312a:	d1c0      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe fddc 	bl	8001ce8 <HAL_GetTick>
 8003130:	1b80      	subs	r0, r0, r6
 8003132:	f241 3388 	movw	r3, #5000	; 0x1388
 8003136:	4298      	cmp	r0, r3
 8003138:	d9f3      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800313a:	2003      	movs	r0, #3
 800313c:	e005      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800313e:	69d3      	ldr	r3, [r2, #28]
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	e7bb      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8003148:	2000      	movs	r0, #0
}
 800314a:	b002      	add	sp, #8
 800314c:	bd70      	pop	{r4, r5, r6, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	40007000 	.word	0x40007000
 8003158:	42420000 	.word	0x42420000

0800315c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	4605      	mov	r5, r0
 8003164:	4688      	mov	r8, r1
 8003166:	4617      	mov	r7, r2
 8003168:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800316a:	f7fe fdbd 	bl	8001ce8 <HAL_GetTick>
 800316e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003170:	1a1b      	subs	r3, r3, r0
 8003172:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003176:	f7fe fdb7 	bl	8001ce8 <HAL_GetTick>
 800317a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003184:	fb09 f303 	mul.w	r3, r9, r3
 8003188:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800318a:	682b      	ldr	r3, [r5, #0]
 800318c:	689c      	ldr	r4, [r3, #8]
 800318e:	ea38 0304 	bics.w	r3, r8, r4
 8003192:	bf0c      	ite	eq
 8003194:	f04f 0c01 	moveq.w	ip, #1
 8003198:	f04f 0c00 	movne.w	ip, #0
 800319c:	45bc      	cmp	ip, r7
 800319e:	d040      	beq.n	8003222 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80031a4:	d0f1      	beq.n	800318a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a6:	f7fe fd9f 	bl	8001ce8 <HAL_GetTick>
 80031aa:	eba0 000a 	sub.w	r0, r0, sl
 80031ae:	4548      	cmp	r0, r9
 80031b0:	d20a      	bcs.n	80031c8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80031b2:	f1b9 0f00 	cmp.w	r9, #0
 80031b6:	d007      	beq.n	80031c8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031b8:	9a01      	ldr	r2, [sp, #4]
 80031ba:	b102      	cbz	r2, 80031be <SPI_WaitFlagStateUntilTimeout+0x62>
 80031bc:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80031be:	9b01      	ldr	r3, [sp, #4]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	4691      	mov	r9, r2
 80031c6:	e7e0      	b.n	800318a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c8:	682a      	ldr	r2, [r5, #0]
 80031ca:	6853      	ldr	r3, [r2, #4]
 80031cc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80031d0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d2:	686b      	ldr	r3, [r5, #4]
 80031d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d8:	d00b      	beq.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e0:	d014      	beq.n	800320c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80031e8:	2300      	movs	r3, #0
 80031ea:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80031ee:	2003      	movs	r0, #3
 80031f0:	e018      	b.n	8003224 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f2:	68ab      	ldr	r3, [r5, #8]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f8:	d002      	beq.n	8003200 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d1ec      	bne.n	80031da <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8003200:	682a      	ldr	r2, [r5, #0]
 8003202:	6813      	ldr	r3, [r2, #0]
 8003204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e7e6      	b.n	80031da <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800320c:	682a      	ldr	r2, [r5, #0]
 800320e:	6813      	ldr	r3, [r2, #0]
 8003210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	682a      	ldr	r2, [r5, #0]
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e7df      	b.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8003222:	2000      	movs	r0, #0
}
 8003224:	b002      	add	sp, #8
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	bf00      	nop
 800322c:	20000000 	.word	0x20000000

08003230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b510      	push	{r4, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	4604      	mov	r4, r0
 8003236:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003238:	9200      	str	r2, [sp, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	f7ff ff8d 	bl	800315c <SPI_WaitFlagStateUntilTimeout>
 8003242:	b908      	cbnz	r0, 8003248 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8003244:	b002      	add	sp, #8
 8003246:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003248:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8003250:	2003      	movs	r0, #3
 8003252:	e7f7      	b.n	8003244 <SPI_EndRxTxTransaction+0x14>

08003254 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003254:	2800      	cmp	r0, #0
 8003256:	d056      	beq.n	8003306 <HAL_SPI_Init+0xb2>
{
 8003258:	b510      	push	{r4, lr}
 800325a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800325e:	b933      	cbnz	r3, 800326e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003260:	6843      	ldr	r3, [r0, #4]
 8003262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003266:	d005      	beq.n	8003274 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003268:	2300      	movs	r3, #0
 800326a:	61c3      	str	r3, [r0, #28]
 800326c:	e002      	b.n	8003274 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003272:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003278:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800327c:	2b00      	cmp	r3, #0
 800327e:	d03c      	beq.n	80032fa <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003280:	2302      	movs	r3, #2
 8003282:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003290:	6863      	ldr	r3, [r4, #4]
 8003292:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003296:	68a2      	ldr	r2, [r4, #8]
 8003298:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800329c:	4313      	orrs	r3, r2
 800329e:	68e2      	ldr	r2, [r4, #12]
 80032a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032a4:	4313      	orrs	r3, r2
 80032a6:	6922      	ldr	r2, [r4, #16]
 80032a8:	f002 0202 	and.w	r2, r2, #2
 80032ac:	4313      	orrs	r3, r2
 80032ae:	6962      	ldr	r2, [r4, #20]
 80032b0:	f002 0201 	and.w	r2, r2, #1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	69a2      	ldr	r2, [r4, #24]
 80032b8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80032bc:	4313      	orrs	r3, r2
 80032be:	69e2      	ldr	r2, [r4, #28]
 80032c0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80032c4:	4313      	orrs	r3, r2
 80032c6:	6a22      	ldr	r2, [r4, #32]
 80032c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032d4:	6821      	ldr	r1, [r4, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032da:	8b63      	ldrh	r3, [r4, #26]
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	69d3      	ldr	r3, [r2, #28]
 80032e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ec:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ee:	2000      	movs	r0, #0
 80032f0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80032f8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80032fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80032fe:	4620      	mov	r0, r4
 8003300:	f7fe fa94 	bl	800182c <HAL_SPI_MspInit>
 8003304:	e7bc      	b.n	8003280 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003306:	2001      	movs	r0, #1
}
 8003308:	4770      	bx	lr

0800330a <HAL_SPI_Transmit>:
{
 800330a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800330e:	b083      	sub	sp, #12
 8003310:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003312:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003316:	2b01      	cmp	r3, #1
 8003318:	f000 80d1 	beq.w	80034be <HAL_SPI_Transmit+0x1b4>
 800331c:	4604      	mov	r4, r0
 800331e:	4688      	mov	r8, r1
 8003320:	4691      	mov	r9, r2
 8003322:	2301      	movs	r3, #1
 8003324:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003328:	f7fe fcde 	bl	8001ce8 <HAL_GetTick>
 800332c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800332e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8003332:	b2f6      	uxtb	r6, r6
 8003334:	2e01      	cmp	r6, #1
 8003336:	f040 80af 	bne.w	8003498 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 800333a:	f1b8 0f00 	cmp.w	r8, #0
 800333e:	f000 80ac 	beq.w	800349a <HAL_SPI_Transmit+0x190>
 8003342:	f1b9 0f00 	cmp.w	r9, #0
 8003346:	f000 80a8 	beq.w	800349a <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800334a:	2303      	movs	r3, #3
 800334c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003350:	2300      	movs	r3, #0
 8003352:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003354:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003358:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800335c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003360:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003362:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003364:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003366:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003368:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336a:	68a3      	ldr	r3, [r4, #8]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003370:	d01e      	beq.n	80033b0 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f012 0f40 	tst.w	r2, #64	; 0x40
 800337a:	d103      	bne.n	8003384 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003382:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003384:	68e3      	ldr	r3, [r4, #12]
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338a:	d01c      	beq.n	80033c6 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	b113      	cbz	r3, 8003396 <HAL_SPI_Transmit+0x8c>
 8003390:	f1b9 0f01 	cmp.w	r9, #1
 8003394:	d152      	bne.n	800343c <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003396:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033a0:	3301      	adds	r3, #1
 80033a2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	86e3      	strh	r3, [r4, #54]	; 0x36
 80033ae:	e045      	b.n	800343c <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e7d5      	b.n	8003372 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c6:	6863      	ldr	r3, [r4, #4]
 80033c8:	b113      	cbz	r3, 80033d0 <HAL_SPI_Transmit+0xc6>
 80033ca:	f1b9 0f01 	cmp.w	r9, #1
 80033ce:	d116      	bne.n	80033fe <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033da:	3302      	adds	r3, #2
 80033dc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80033e8:	e009      	b.n	80033fe <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ea:	f7fe fc7d 	bl	8001ce8 <HAL_GetTick>
 80033ee:	1bc0      	subs	r0, r0, r7
 80033f0:	42a8      	cmp	r0, r5
 80033f2:	d302      	bcc.n	80033fa <HAL_SPI_Transmit+0xf0>
 80033f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80033f8:	d159      	bne.n	80034ae <HAL_SPI_Transmit+0x1a4>
 80033fa:	2d00      	cmp	r5, #0
 80033fc:	d059      	beq.n	80034b2 <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 80033fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d033      	beq.n	800346e <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	f012 0f02 	tst.w	r2, #2
 800340e:	d0ec      	beq.n	80033ea <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003410:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003416:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003418:	3302      	adds	r3, #2
 800341a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800341c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29b      	uxth	r3, r3
 8003424:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003426:	e7ea      	b.n	80033fe <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003428:	f7fe fc5e 	bl	8001ce8 <HAL_GetTick>
 800342c:	1bc0      	subs	r0, r0, r7
 800342e:	42a8      	cmp	r0, r5
 8003430:	d302      	bcc.n	8003438 <HAL_SPI_Transmit+0x12e>
 8003432:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003436:	d13e      	bne.n	80034b6 <HAL_SPI_Transmit+0x1ac>
 8003438:	2d00      	cmp	r5, #0
 800343a:	d03e      	beq.n	80034ba <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 800343c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800343e:	b29b      	uxth	r3, r3
 8003440:	b1ab      	cbz	r3, 800346e <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	f012 0f02 	tst.w	r2, #2
 800344a:	d0ed      	beq.n	8003428 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800344c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003452:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003454:	3301      	adds	r3, #1
 8003456:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003458:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 800345c:	fa1f fc8c 	uxth.w	ip, ip
 8003460:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003464:	fa1f fc8c 	uxth.w	ip, ip
 8003468:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 800346c:	e7e6      	b.n	800343c <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800346e:	463a      	mov	r2, r7
 8003470:	4629      	mov	r1, r5
 8003472:	4620      	mov	r0, r4
 8003474:	f7ff fedc 	bl	8003230 <SPI_EndRxTxTransaction>
 8003478:	b108      	cbz	r0, 800347e <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800347a:	2320      	movs	r3, #32
 800347c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347e:	68a3      	ldr	r3, [r4, #8]
 8003480:	b933      	cbnz	r3, 8003490 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	9201      	str	r2, [sp, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003490:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003492:	b913      	cbnz	r3, 800349a <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003494:	2600      	movs	r6, #0
 8003496:	e000      	b.n	800349a <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 8003498:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800349a:	2301      	movs	r3, #1
 800349c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034a0:	2300      	movs	r3, #0
 80034a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80034a6:	4630      	mov	r0, r6
 80034a8:	b003      	add	sp, #12
 80034aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80034ae:	2603      	movs	r6, #3
 80034b0:	e7f3      	b.n	800349a <HAL_SPI_Transmit+0x190>
 80034b2:	2603      	movs	r6, #3
 80034b4:	e7f1      	b.n	800349a <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 80034b6:	2603      	movs	r6, #3
 80034b8:	e7ef      	b.n	800349a <HAL_SPI_Transmit+0x190>
 80034ba:	2603      	movs	r6, #3
 80034bc:	e7ed      	b.n	800349a <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 80034be:	2602      	movs	r6, #2
 80034c0:	e7f1      	b.n	80034a6 <HAL_SPI_Transmit+0x19c>

080034c2 <HAL_SPI_TransmitReceive>:
{
 80034c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034c6:	b083      	sub	sp, #12
 80034c8:	461f      	mov	r7, r3
 80034ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80034cc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f000 8110 	beq.w	80036f6 <HAL_SPI_TransmitReceive+0x234>
 80034d6:	4604      	mov	r4, r0
 80034d8:	4688      	mov	r8, r1
 80034da:	4691      	mov	r9, r2
 80034dc:	2301      	movs	r3, #1
 80034de:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80034e2:	f7fe fc01 	bl	8001ce8 <HAL_GetTick>
 80034e6:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80034e8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80034ec:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80034ee:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d00a      	beq.n	800350a <HAL_SPI_TransmitReceive+0x48>
 80034f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80034f8:	f040 80e3 	bne.w	80036c2 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034fc:	68a2      	ldr	r2, [r4, #8]
 80034fe:	2a00      	cmp	r2, #0
 8003500:	f040 80e9 	bne.w	80036d6 <HAL_SPI_TransmitReceive+0x214>
 8003504:	2b04      	cmp	r3, #4
 8003506:	f040 80e8 	bne.w	80036da <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800350a:	f1b8 0f00 	cmp.w	r8, #0
 800350e:	f000 80e6 	beq.w	80036de <HAL_SPI_TransmitReceive+0x21c>
 8003512:	f1b9 0f00 	cmp.w	r9, #0
 8003516:	f000 80e4 	beq.w	80036e2 <HAL_SPI_TransmitReceive+0x220>
 800351a:	2f00      	cmp	r7, #0
 800351c:	f000 80e3 	beq.w	80036e6 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003520:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b04      	cmp	r3, #4
 8003528:	d002      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800352a:	2305      	movs	r3, #5
 800352c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003530:	2300      	movs	r3, #0
 8003532:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003534:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003538:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800353a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800353c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003540:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003542:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8003544:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003546:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003550:	d103      	bne.n	800355a <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003558:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003560:	d011      	beq.n	8003586 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	b10b      	cbz	r3, 800356a <HAL_SPI_TransmitReceive+0xa8>
 8003566:	2f01      	cmp	r7, #1
 8003568:	d10b      	bne.n	8003582 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800356a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003574:	3301      	adds	r3, #1
 8003576:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003578:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003582:	2701      	movs	r7, #1
 8003584:	e06b      	b.n	800365e <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	b10b      	cbz	r3, 800358e <HAL_SPI_TransmitReceive+0xcc>
 800358a:	2f01      	cmp	r7, #1
 800358c:	d10b      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	8812      	ldrh	r2, [r2, #0]
 8003594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003598:	3302      	adds	r3, #2
 800359a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800359c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80035a6:	2701      	movs	r7, #1
 80035a8:	e01c      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	f012 0f01 	tst.w	r2, #1
 80035b2:	d00e      	beq.n	80035d2 <HAL_SPI_TransmitReceive+0x110>
 80035b4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80035b6:	b292      	uxth	r2, r2
 80035b8:	b15a      	cbz	r2, 80035d2 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035c2:	3302      	adds	r3, #2
 80035c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80035c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80035d0:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035d2:	f7fe fb89 	bl	8001ce8 <HAL_GetTick>
 80035d6:	1b80      	subs	r0, r0, r6
 80035d8:	42a8      	cmp	r0, r5
 80035da:	d303      	bcc.n	80035e4 <HAL_SPI_TransmitReceive+0x122>
 80035dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80035e0:	f040 8083 	bne.w	80036ea <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b91b      	cbnz	r3, 80035f2 <HAL_SPI_TransmitReceive+0x130>
 80035ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d053      	beq.n	800369a <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	f012 0f02 	tst.w	r2, #2
 80035fa:	d0d6      	beq.n	80035aa <HAL_SPI_TransmitReceive+0xe8>
 80035fc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80035fe:	b292      	uxth	r2, r2
 8003600:	2a00      	cmp	r2, #0
 8003602:	d0d2      	beq.n	80035aa <HAL_SPI_TransmitReceive+0xe8>
 8003604:	2f00      	cmp	r7, #0
 8003606:	d0d0      	beq.n	80035aa <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003608:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800360a:	8812      	ldrh	r2, [r2, #0]
 800360c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003610:	3302      	adds	r3, #2
 8003612:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003614:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29b      	uxth	r3, r3
 800361c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800361e:	2700      	movs	r7, #0
 8003620:	e7c3      	b.n	80035aa <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	f012 0f01 	tst.w	r2, #1
 800362a:	d00e      	beq.n	800364a <HAL_SPI_TransmitReceive+0x188>
 800362c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800362e:	b292      	uxth	r2, r2
 8003630:	b15a      	cbz	r2, 800364a <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800363a:	3301      	adds	r3, #1
 800363c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800363e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29b      	uxth	r3, r3
 8003646:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003648:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800364a:	f7fe fb4d 	bl	8001ce8 <HAL_GetTick>
 800364e:	1b83      	subs	r3, r0, r6
 8003650:	42ab      	cmp	r3, r5
 8003652:	d302      	bcc.n	800365a <HAL_SPI_TransmitReceive+0x198>
 8003654:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003658:	d149      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x22c>
 800365a:	2d00      	cmp	r5, #0
 800365c:	d049      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003660:	b29b      	uxth	r3, r3
 8003662:	b913      	cbnz	r3, 800366a <HAL_SPI_TransmitReceive+0x1a8>
 8003664:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	b1bb      	cbz	r3, 800369a <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	f012 0f02 	tst.w	r2, #2
 8003672:	d0d6      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x160>
 8003674:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003676:	b292      	uxth	r2, r2
 8003678:	2a00      	cmp	r2, #0
 800367a:	d0d2      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x160>
 800367c:	2f00      	cmp	r7, #0
 800367e:	d0d0      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003680:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003686:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003688:	3301      	adds	r3, #1
 800368a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800368c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003696:	2700      	movs	r7, #0
 8003698:	e7c3      	b.n	8003622 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800369a:	4632      	mov	r2, r6
 800369c:	4629      	mov	r1, r5
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff fdc6 	bl	8003230 <SPI_EndRxTxTransaction>
 80036a4:	b948      	cbnz	r0, 80036ba <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036a6:	68a3      	ldr	r3, [r4, #8]
 80036a8:	b963      	cbnz	r3, 80036c4 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	9201      	str	r2, [sp, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	9b01      	ldr	r3, [sp, #4]
 80036b8:	e004      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ba:	2320      	movs	r3, #32
 80036bc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80036be:	2001      	movs	r0, #1
    goto error;
 80036c0:	e000      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 80036c2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036ca:	2300      	movs	r3, #0
 80036cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80036d0:	b003      	add	sp, #12
 80036d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80036d6:	2002      	movs	r0, #2
 80036d8:	e7f4      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
 80036da:	2002      	movs	r0, #2
 80036dc:	e7f2      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80036de:	2001      	movs	r0, #1
 80036e0:	e7f0      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
 80036e2:	2001      	movs	r0, #1
 80036e4:	e7ee      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
 80036e6:	2001      	movs	r0, #1
 80036e8:	e7ec      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80036ea:	2003      	movs	r0, #3
 80036ec:	e7ea      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80036ee:	2003      	movs	r0, #3
 80036f0:	e7e8      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
 80036f2:	2003      	movs	r0, #3
 80036f4:	e7e6      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80036f6:	2002      	movs	r0, #2
 80036f8:	e7ea      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x20e>
	...

080036fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fe:	6a03      	ldr	r3, [r0, #32]
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800370c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	680c      	ldr	r4, [r1, #0]
 8003712:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003716:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800371a:	688b      	ldr	r3, [r1, #8]
 800371c:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800371e:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <TIM_OC1_SetConfig+0x58>)
 8003720:	42a0      	cmp	r0, r4
 8003722:	d009      	beq.n	8003738 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	4c0b      	ldr	r4, [pc, #44]	; (8003754 <TIM_OC1_SetConfig+0x58>)
 8003726:	42a0      	cmp	r0, r4
 8003728:	d00d      	beq.n	8003746 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372a:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372c:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800372e:	684a      	ldr	r2, [r1, #4]
 8003730:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	6203      	str	r3, [r0, #32]
}
 8003734:	bc70      	pop	{r4, r5, r6}
 8003736:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003738:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800373c:	68ca      	ldr	r2, [r1, #12]
 800373e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	e7ee      	b.n	8003724 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003746:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800374a:	694a      	ldr	r2, [r1, #20]
 800374c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800374e:	698e      	ldr	r6, [r1, #24]
 8003750:	4316      	orrs	r6, r2
 8003752:	e7ea      	b.n	800372a <TIM_OC1_SetConfig+0x2e>
 8003754:	40012c00 	.word	0x40012c00

08003758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800375a:	6a03      	ldr	r3, [r0, #32]
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003766:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003768:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800376c:	680c      	ldr	r4, [r1, #0]
 800376e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003774:	688c      	ldr	r4, [r1, #8]
 8003776:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800377a:	4c0f      	ldr	r4, [pc, #60]	; (80037b8 <TIM_OC3_SetConfig+0x60>)
 800377c:	42a0      	cmp	r0, r4
 800377e:	d009      	beq.n	8003794 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <TIM_OC3_SetConfig+0x60>)
 8003782:	42a0      	cmp	r0, r4
 8003784:	d00e      	beq.n	80037a4 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003788:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378a:	684a      	ldr	r2, [r1, #4]
 800378c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378e:	6203      	str	r3, [r0, #32]
}
 8003790:	bc30      	pop	{r4, r5}
 8003792:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003798:	68cc      	ldr	r4, [r1, #12]
 800379a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800379e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a2:	e7ed      	b.n	8003780 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037a4:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a8:	694c      	ldr	r4, [r1, #20]
 80037aa:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ae:	698c      	ldr	r4, [r1, #24]
 80037b0:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 80037b4:	e7e7      	b.n	8003786 <TIM_OC3_SetConfig+0x2e>
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00

080037bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037be:	6a03      	ldr	r3, [r0, #32]
 80037c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037cc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	680d      	ldr	r5, [r1, #0]
 80037d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037da:	688d      	ldr	r5, [r1, #8]
 80037dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	4d07      	ldr	r5, [pc, #28]	; (8003800 <TIM_OC4_SetConfig+0x44>)
 80037e2:	42a8      	cmp	r0, r5
 80037e4:	d006      	beq.n	80037f4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037ea:	684a      	ldr	r2, [r1, #4]
 80037ec:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ee:	6203      	str	r3, [r0, #32]
}
 80037f0:	bc30      	pop	{r4, r5}
 80037f2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037f4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f8:	694d      	ldr	r5, [r1, #20]
 80037fa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80037fe:	e7f2      	b.n	80037e6 <TIM_OC4_SetConfig+0x2a>
 8003800:	40012c00 	.word	0x40012c00

08003804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003804:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003806:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003808:	6a04      	ldr	r4, [r0, #32]
 800380a:	f024 0401 	bic.w	r4, r4, #1
 800380e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003810:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003812:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003816:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800381a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800381e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003820:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003822:	6203      	str	r3, [r0, #32]
}
 8003824:	bc10      	pop	{r4}
 8003826:	4770      	bx	lr

08003828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382a:	6a04      	ldr	r4, [r0, #32]
 800382c:	f024 0410 	bic.w	r4, r4, #16
 8003830:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003832:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003834:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003836:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800383a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800383e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003842:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003846:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003848:	6203      	str	r3, [r0, #32]
}
 800384a:	bc10      	pop	{r4}
 800384c:	4770      	bx	lr

0800384e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800384e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003854:	430b      	orrs	r3, r1
 8003856:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385a:	6083      	str	r3, [r0, #8]
}
 800385c:	4770      	bx	lr
	...

08003860 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003860:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800386a:	2302      	movs	r3, #2
 800386c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003870:	6803      	ldr	r3, [r0, #0]
 8003872:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <HAL_TIM_Base_Start+0x58>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d010      	beq.n	800389a <HAL_TIM_Base_Start+0x3a>
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d00d      	beq.n	800389a <HAL_TIM_Base_Start+0x3a>
 800387e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_TIM_Base_Start+0x3a>
 8003886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800388a:	4293      	cmp	r3, r2
 800388c:	d005      	beq.n	800389a <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003896:	2000      	movs	r0, #0
 8003898:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a0:	2a06      	cmp	r2, #6
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038ac:	2000      	movs	r0, #0
 80038ae:	4770      	bx	lr
    return HAL_ERROR;
 80038b0:	2001      	movs	r0, #1
 80038b2:	4770      	bx	lr
  return HAL_OK;
 80038b4:	2000      	movs	r0, #0
}
 80038b6:	4770      	bx	lr
 80038b8:	40012c00 	.word	0x40012c00

080038bc <HAL_TIM_PWM_MspInit>:
}
 80038bc:	4770      	bx	lr

080038be <TIM_DMADelayPulseCplt>:
{
 80038be:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038c4:	4283      	cmp	r3, r0
 80038c6:	d00e      	beq.n	80038e6 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038ca:	4283      	cmp	r3, r0
 80038cc:	d014      	beq.n	80038f8 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038d0:	4283      	cmp	r3, r0
 80038d2:	d01a      	beq.n	800390a <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038d6:	4283      	cmp	r3, r0
 80038d8:	d020      	beq.n	800391c <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038da:	4620      	mov	r0, r4
 80038dc:	f001 f8de 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e0:	2300      	movs	r3, #0
 80038e2:	7723      	strb	r3, [r4, #28]
}
 80038e4:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80038ea:	6983      	ldr	r3, [r0, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f4      	bne.n	80038da <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038f0:	2301      	movs	r3, #1
 80038f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80038f6:	e7f0      	b.n	80038da <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038f8:	2302      	movs	r3, #2
 80038fa:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80038fc:	6983      	ldr	r3, [r0, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1eb      	bne.n	80038da <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003902:	2301      	movs	r3, #1
 8003904:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003908:	e7e7      	b.n	80038da <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800390a:	2304      	movs	r3, #4
 800390c:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800390e:	6983      	ldr	r3, [r0, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e2      	bne.n	80038da <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	2301      	movs	r3, #1
 8003916:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800391a:	e7de      	b.n	80038da <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391c:	2308      	movs	r3, #8
 800391e:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003920:	6983      	ldr	r3, [r0, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1d9      	bne.n	80038da <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	2301      	movs	r3, #1
 8003928:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800392c:	e7d5      	b.n	80038da <TIM_DMADelayPulseCplt+0x1c>

0800392e <TIM_DMADelayPulseHalfCplt>:
{
 800392e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003934:	4283      	cmp	r3, r0
 8003936:	d00b      	beq.n	8003950 <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003938:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800393a:	4283      	cmp	r3, r0
 800393c:	d010      	beq.n	8003960 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800393e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003940:	4283      	cmp	r3, r0
 8003942:	d010      	beq.n	8003966 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003944:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003946:	4283      	cmp	r3, r0
 8003948:	d104      	bne.n	8003954 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394a:	2308      	movs	r3, #8
 800394c:	7723      	strb	r3, [r4, #28]
 800394e:	e001      	b.n	8003954 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003950:	2301      	movs	r3, #1
 8003952:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003954:	4620      	mov	r0, r4
 8003956:	f001 f891 	bl	8004a7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	2300      	movs	r3, #0
 800395c:	7723      	strb	r3, [r4, #28]
}
 800395e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003960:	2302      	movs	r3, #2
 8003962:	7723      	strb	r3, [r4, #28]
 8003964:	e7f6      	b.n	8003954 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003966:	2304      	movs	r3, #4
 8003968:	7723      	strb	r3, [r4, #28]
 800396a:	e7f3      	b.n	8003954 <TIM_DMADelayPulseHalfCplt+0x26>

0800396c <HAL_TIM_ErrorCallback>:
}
 800396c:	4770      	bx	lr

0800396e <TIM_DMAError>:
{
 800396e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003970:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003974:	4283      	cmp	r3, r0
 8003976:	d00c      	beq.n	8003992 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800397a:	4283      	cmp	r3, r0
 800397c:	d013      	beq.n	80039a6 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800397e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003980:	4283      	cmp	r3, r0
 8003982:	d016      	beq.n	80039b2 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003984:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003986:	4283      	cmp	r3, r0
 8003988:	d019      	beq.n	80039be <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 800398a:	2301      	movs	r3, #1
 800398c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003990:	e003      	b.n	800399a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003992:	2301      	movs	r3, #1
 8003994:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003996:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800399a:	4620      	mov	r0, r4
 800399c:	f7ff ffe6 	bl	800396c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a0:	2300      	movs	r3, #0
 80039a2:	7723      	strb	r3, [r4, #28]
}
 80039a4:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a6:	2302      	movs	r3, #2
 80039a8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	2301      	movs	r3, #1
 80039ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039b0:	e7f3      	b.n	800399a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b2:	2304      	movs	r3, #4
 80039b4:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	2301      	movs	r3, #1
 80039b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039bc:	e7ed      	b.n	800399a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039be:	2308      	movs	r3, #8
 80039c0:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80039c2:	2301      	movs	r3, #1
 80039c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80039c8:	e7e7      	b.n	800399a <TIM_DMAError+0x2c>
	...

080039cc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80039cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <TIM_Base_SetConfig+0x70>)
 80039d0:	4290      	cmp	r0, r2
 80039d2:	d00a      	beq.n	80039ea <TIM_Base_SetConfig+0x1e>
 80039d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80039d8:	d007      	beq.n	80039ea <TIM_Base_SetConfig+0x1e>
 80039da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80039de:	4290      	cmp	r0, r2
 80039e0:	d003      	beq.n	80039ea <TIM_Base_SetConfig+0x1e>
 80039e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039e6:	4290      	cmp	r0, r2
 80039e8:	d103      	bne.n	80039f2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039ee:	684a      	ldr	r2, [r1, #4]
 80039f0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <TIM_Base_SetConfig+0x70>)
 80039f4:	4290      	cmp	r0, r2
 80039f6:	d00a      	beq.n	8003a0e <TIM_Base_SetConfig+0x42>
 80039f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80039fc:	d007      	beq.n	8003a0e <TIM_Base_SetConfig+0x42>
 80039fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a02:	4290      	cmp	r0, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_Base_SetConfig+0x42>
 8003a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a0a:	4290      	cmp	r0, r2
 8003a0c:	d103      	bne.n	8003a16 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a12:	68ca      	ldr	r2, [r1, #12]
 8003a14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1a:	694a      	ldr	r2, [r1, #20]
 8003a1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	688b      	ldr	r3, [r1, #8]
 8003a22:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a24:	680b      	ldr	r3, [r1, #0]
 8003a26:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <TIM_Base_SetConfig+0x70>)
 8003a2a:	4298      	cmp	r0, r3
 8003a2c:	d002      	beq.n	8003a34 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	6143      	str	r3, [r0, #20]
}
 8003a32:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003a34:	690b      	ldr	r3, [r1, #16]
 8003a36:	6303      	str	r3, [r0, #48]	; 0x30
 8003a38:	e7f9      	b.n	8003a2e <TIM_Base_SetConfig+0x62>
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00

08003a40 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003a40:	b340      	cbz	r0, 8003a94 <HAL_TIM_Base_Init+0x54>
{
 8003a42:	b510      	push	{r4, lr}
 8003a44:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a4a:	b1f3      	cbz	r3, 8003a8a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a52:	4621      	mov	r1, r4
 8003a54:	f851 0b04 	ldr.w	r0, [r1], #4
 8003a58:	f7ff ffb8 	bl	80039cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a86:	2000      	movs	r0, #0
}
 8003a88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a8e:	f7fd ff29 	bl	80018e4 <HAL_TIM_Base_MspInit>
 8003a92:	e7db      	b.n	8003a4c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003a94:	2001      	movs	r0, #1
}
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003a98:	b340      	cbz	r0, 8003aec <HAL_TIM_PWM_Init+0x54>
{
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003aa2:	b1f3      	cbz	r3, 8003ae2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aaa:	4621      	mov	r1, r4
 8003aac:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ab0:	f7ff ff8c 	bl	80039cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003abe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ac2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003ac6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ad2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003ada:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ade:	2000      	movs	r0, #0
}
 8003ae0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003ae6:	f7ff fee9 	bl	80038bc <HAL_TIM_PWM_MspInit>
 8003aea:	e7db      	b.n	8003aa4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003aec:	2001      	movs	r0, #1
}
 8003aee:	4770      	bx	lr

08003af0 <TIM_OC2_SetConfig>:
{
 8003af0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af2:	6a03      	ldr	r3, [r0, #32]
 8003af4:	f023 0310 	bic.w	r3, r3, #16
 8003af8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003afa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003afc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003afe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b00:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b04:	680d      	ldr	r5, [r1, #0]
 8003b06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003b0a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b0e:	688d      	ldr	r5, [r1, #8]
 8003b10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b14:	4d0e      	ldr	r5, [pc, #56]	; (8003b50 <TIM_OC2_SetConfig+0x60>)
 8003b16:	42a8      	cmp	r0, r5
 8003b18:	d009      	beq.n	8003b2e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	4d0d      	ldr	r5, [pc, #52]	; (8003b50 <TIM_OC2_SetConfig+0x60>)
 8003b1c:	42a8      	cmp	r0, r5
 8003b1e:	d00e      	beq.n	8003b3e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8003b20:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b22:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b24:	684a      	ldr	r2, [r1, #4]
 8003b26:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003b28:	6203      	str	r3, [r0, #32]
}
 8003b2a:	bc30      	pop	{r4, r5}
 8003b2c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b32:	68cd      	ldr	r5, [r1, #12]
 8003b34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3c:	e7ed      	b.n	8003b1a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b3e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b42:	694d      	ldr	r5, [r1, #20]
 8003b44:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b48:	698d      	ldr	r5, [r1, #24]
 8003b4a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003b4e:	e7e7      	b.n	8003b20 <TIM_OC2_SetConfig+0x30>
 8003b50:	40012c00 	.word	0x40012c00

08003b54 <HAL_TIM_PWM_ConfigChannel>:
{
 8003b54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003b56:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d060      	beq.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	460d      	mov	r5, r1
 8003b62:	2301      	movs	r3, #1
 8003b64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003b68:	2a0c      	cmp	r2, #12
 8003b6a:	d81a      	bhi.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003b6c:	e8df f002 	tbb	[pc, r2]
 8003b70:	19191907 	.word	0x19191907
 8003b74:	1919191d 	.word	0x1919191d
 8003b78:	19191931 	.word	0x19191931
 8003b7c:	44          	.byte	0x44
 8003b7d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b7e:	6800      	ldr	r0, [r0, #0]
 8003b80:	f7ff fdbc 	bl	80036fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	6993      	ldr	r3, [r2, #24]
 8003b88:	f043 0308 	orr.w	r3, r3, #8
 8003b8c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	6993      	ldr	r3, [r2, #24]
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	6993      	ldr	r3, [r2, #24]
 8003b9c:	6929      	ldr	r1, [r5, #16]
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003ba8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	f7ff ffa0 	bl	8003af0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	6993      	ldr	r3, [r2, #24]
 8003bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bb8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bba:	6822      	ldr	r2, [r4, #0]
 8003bbc:	6993      	ldr	r3, [r2, #24]
 8003bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bc2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	6993      	ldr	r3, [r2, #24]
 8003bc8:	6929      	ldr	r1, [r5, #16]
 8003bca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bce:	6193      	str	r3, [r2, #24]
      break;
 8003bd0:	e7e7      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bd2:	6800      	ldr	r0, [r0, #0]
 8003bd4:	f7ff fdc0 	bl	8003758 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	69d3      	ldr	r3, [r2, #28]
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	69d3      	ldr	r3, [r2, #28]
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bec:	6822      	ldr	r2, [r4, #0]
 8003bee:	69d3      	ldr	r3, [r2, #28]
 8003bf0:	6929      	ldr	r1, [r5, #16]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	61d3      	str	r3, [r2, #28]
      break;
 8003bf6:	e7d4      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bf8:	6800      	ldr	r0, [r0, #0]
 8003bfa:	f7ff fddf 	bl	80037bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	69d3      	ldr	r3, [r2, #28]
 8003c02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c06:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	69d3      	ldr	r3, [r2, #28]
 8003c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c10:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	69d3      	ldr	r3, [r2, #28]
 8003c16:	6929      	ldr	r1, [r5, #16]
 8003c18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c1c:	61d3      	str	r3, [r2, #28]
      break;
 8003c1e:	e7c0      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8003c20:	2002      	movs	r0, #2
 8003c22:	e7c1      	b.n	8003ba8 <HAL_TIM_PWM_ConfigChannel+0x54>

08003c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c24:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c26:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c2c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003c30:	430a      	orrs	r2, r1
 8003c32:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c36:	6082      	str	r2, [r0, #8]
}
 8003c38:	bc10      	pop	{r4}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d066      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0xd6>
{
 8003c44:	b510      	push	{r4, lr}
 8003c46:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	6802      	ldr	r2, [r0, #0]
 8003c56:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003c60:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c62:	680b      	ldr	r3, [r1, #0]
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d040      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xae>
 8003c68:	d822      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x74>
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d047      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0xc2>
 8003c6e:	d90b      	bls.n	8003c88 <HAL_TIM_ConfigClockSource+0x4c>
 8003c70:	2b50      	cmp	r3, #80	; 0x50
 8003c72:	d10e      	bne.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c74:	68ca      	ldr	r2, [r1, #12]
 8003c76:	6849      	ldr	r1, [r1, #4]
 8003c78:	6800      	ldr	r0, [r0, #0]
 8003c7a:	f7ff fdc3 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c7e:	2150      	movs	r1, #80	; 0x50
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	f7ff fde4 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003c86:	e004      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x6a>
 8003c8c:	d908      	bls.n	8003ca0 <HAL_TIM_ConfigClockSource+0x64>
 8003c8e:	2b30      	cmp	r3, #48	; 0x30
 8003c90:	d009      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003c9e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003ca0:	b10b      	cbz	r3, 8003ca6 <HAL_TIM_ConfigClockSource+0x6a>
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d1f5      	bne.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	f7ff fdd0 	bl	800384e <TIM_ITRx_SetConfig>
        break;
 8003cae:	e7f0      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003cb0:	2b70      	cmp	r3, #112	; 0x70
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x96>
 8003cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb8:	d1eb      	bne.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003cba:	68cb      	ldr	r3, [r1, #12]
 8003cbc:	684a      	ldr	r2, [r1, #4]
 8003cbe:	6889      	ldr	r1, [r1, #8]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	f7ff ffaf 	bl	8003c24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc6:	6822      	ldr	r2, [r4, #0]
 8003cc8:	6893      	ldr	r3, [r2, #8]
 8003cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cce:	6093      	str	r3, [r2, #8]
      break;
 8003cd0:	e7df      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd2:	68cb      	ldr	r3, [r1, #12]
 8003cd4:	684a      	ldr	r2, [r1, #4]
 8003cd6:	6889      	ldr	r1, [r1, #8]
 8003cd8:	6800      	ldr	r0, [r0, #0]
 8003cda:	f7ff ffa3 	bl	8003c24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003ce6:	6093      	str	r3, [r2, #8]
      break;
 8003ce8:	e7d3      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	68ca      	ldr	r2, [r1, #12]
 8003cec:	6849      	ldr	r1, [r1, #4]
 8003cee:	6800      	ldr	r0, [r0, #0]
 8003cf0:	f7ff fd9a 	bl	8003828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf4:	2160      	movs	r1, #96	; 0x60
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	f7ff fda9 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e7c9      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfe:	68ca      	ldr	r2, [r1, #12]
 8003d00:	6849      	ldr	r1, [r1, #4]
 8003d02:	6800      	ldr	r0, [r0, #0]
 8003d04:	f7ff fd7e 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	6820      	ldr	r0, [r4, #0]
 8003d0c:	f7ff fd9f 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003d10:	e7bf      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8003d12:	2002      	movs	r0, #2
}
 8003d14:	4770      	bx	lr

08003d16 <TIM_SlaveTimer_SetConfig>:
{
 8003d16:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	6804      	ldr	r4, [r0, #0]
 8003d1a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d20:	684b      	ldr	r3, [r1, #4]
 8003d22:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d24:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d28:	680a      	ldr	r2, [r1, #0]
 8003d2a:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003d2c:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003d2e:	684b      	ldr	r3, [r1, #4]
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d02c      	beq.n	8003d8e <TIM_SlaveTimer_SetConfig+0x78>
 8003d34:	d80c      	bhi.n	8003d50 <TIM_SlaveTimer_SetConfig+0x3a>
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d014      	beq.n	8003d64 <TIM_SlaveTimer_SetConfig+0x4e>
 8003d3a:	2b50      	cmp	r3, #80	; 0x50
 8003d3c:	d106      	bne.n	8003d4c <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3e:	690a      	ldr	r2, [r1, #16]
 8003d40:	6889      	ldr	r1, [r1, #8]
 8003d42:	6800      	ldr	r0, [r0, #0]
 8003d44:	f7ff fd5e 	bl	8003804 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8003d48:	2000      	movs	r0, #0
      break;
 8003d4a:	e028      	b.n	8003d9e <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e026      	b.n	8003d9e <TIM_SlaveTimer_SetConfig+0x88>
 8003d50:	2b70      	cmp	r3, #112	; 0x70
 8003d52:	d123      	bne.n	8003d9c <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 8003d54:	690b      	ldr	r3, [r1, #16]
 8003d56:	688a      	ldr	r2, [r1, #8]
 8003d58:	68c9      	ldr	r1, [r1, #12]
 8003d5a:	6800      	ldr	r0, [r0, #0]
 8003d5c:	f7ff ff62 	bl	8003c24 <TIM_ETR_SetConfig>
  return HAL_OK;
 8003d60:	2000      	movs	r0, #0
      break;
 8003d62:	e01c      	b.n	8003d9e <TIM_SlaveTimer_SetConfig+0x88>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003d64:	680b      	ldr	r3, [r1, #0]
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d01a      	beq.n	8003da0 <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 8003d6a:	6803      	ldr	r3, [r0, #0]
 8003d6c:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003d76:	6802      	ldr	r2, [r0, #0]
 8003d78:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003d7e:	6909      	ldr	r1, [r1, #16]
 8003d80:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003d84:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003d86:	6803      	ldr	r3, [r0, #0]
 8003d88:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8003d8a:	2000      	movs	r0, #0
      break;
 8003d8c:	e007      	b.n	8003d9e <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8e:	690a      	ldr	r2, [r1, #16]
 8003d90:	6889      	ldr	r1, [r1, #8]
 8003d92:	6800      	ldr	r0, [r0, #0]
 8003d94:	f7ff fd48 	bl	8003828 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003d98:	2000      	movs	r0, #0
      break;
 8003d9a:	e000      	b.n	8003d9e <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 8003d9c:	2000      	movs	r0, #0
}
 8003d9e:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8003da0:	2001      	movs	r0, #1
 8003da2:	e7fc      	b.n	8003d9e <TIM_SlaveTimer_SetConfig+0x88>

08003da4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003da4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d022      	beq.n	8003df2 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8003dac:	b510      	push	{r4, lr}
 8003dae:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003db0:	2301      	movs	r3, #1
 8003db2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003db6:	2302      	movs	r3, #2
 8003db8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003dbc:	f7ff ffab 	bl	8003d16 <TIM_SlaveTimer_SetConfig>
 8003dc0:	b980      	cbnz	r0, 8003de4 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	68d3      	ldr	r3, [r2, #12]
 8003dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dca:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	68d3      	ldr	r3, [r2, #12]
 8003dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd4:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003de2:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8003de4:	2001      	movs	r0, #1
 8003de6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003dea:	2300      	movs	r3, #0
 8003dec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003df0:	e7f7      	b.n	8003de2 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8003df2:	2002      	movs	r0, #2
}
 8003df4:	4770      	bx	lr

08003df6 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003df6:	f001 011f 	and.w	r1, r1, #31
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e00:	6a03      	ldr	r3, [r0, #32]
 8003e02:	ea23 030c 	bic.w	r3, r3, ip
 8003e06:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e08:	6a03      	ldr	r3, [r0, #32]
 8003e0a:	fa02 f101 	lsl.w	r1, r2, r1
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	6203      	str	r3, [r0, #32]
}
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIM_PWM_Start>:
{
 8003e14:	b510      	push	{r4, lr}
 8003e16:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e18:	4608      	mov	r0, r1
 8003e1a:	bb51      	cbnz	r1, 8003e72 <HAL_TIM_PWM_Start+0x5e>
 8003e1c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	bf18      	it	ne
 8003e26:	2301      	movne	r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d15b      	bne.n	8003ee4 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d139      	bne.n	8003ea4 <HAL_TIM_PWM_Start+0x90>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e36:	2201      	movs	r2, #1
 8003e38:	4601      	mov	r1, r0
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	f7ff ffdb 	bl	8003df6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <HAL_TIM_PWM_Start+0xd8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d03d      	beq.n	8003ec4 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	4a28      	ldr	r2, [pc, #160]	; (8003eec <HAL_TIM_PWM_Start+0xd8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d03e      	beq.n	8003ece <HAL_TIM_PWM_Start+0xba>
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d03b      	beq.n	8003ece <HAL_TIM_PWM_Start+0xba>
 8003e56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d037      	beq.n	8003ece <HAL_TIM_PWM_Start+0xba>
 8003e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d033      	beq.n	8003ece <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003e6e:	2000      	movs	r0, #0
 8003e70:	e039      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e72:	2904      	cmp	r1, #4
 8003e74:	d008      	beq.n	8003e88 <HAL_TIM_PWM_Start+0x74>
 8003e76:	2908      	cmp	r1, #8
 8003e78:	d00d      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x82>
 8003e7a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	bf18      	it	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	e7cf      	b.n	8003e28 <HAL_TIM_PWM_Start+0x14>
 8003e88:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	bf18      	it	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	e7c8      	b.n	8003e28 <HAL_TIM_PWM_Start+0x14>
 8003e96:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	bf18      	it	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	e7c1      	b.n	8003e28 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea4:	2804      	cmp	r0, #4
 8003ea6:	d005      	beq.n	8003eb4 <HAL_TIM_PWM_Start+0xa0>
 8003ea8:	2808      	cmp	r0, #8
 8003eaa:	d007      	beq.n	8003ebc <HAL_TIM_PWM_Start+0xa8>
 8003eac:	2302      	movs	r3, #2
 8003eae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003eb2:	e7c0      	b.n	8003e36 <HAL_TIM_PWM_Start+0x22>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003eba:	e7bc      	b.n	8003e36 <HAL_TIM_PWM_Start+0x22>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003ec2:	e7b8      	b.n	8003e36 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
 8003ecc:	e7bc      	b.n	8003e48 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	2a06      	cmp	r2, #6
 8003ed6:	d007      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8003ee4:	2001      	movs	r0, #1
}
 8003ee6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003ee8:	2000      	movs	r0, #0
 8003eea:	e7fc      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xd2>
 8003eec:	40012c00 	.word	0x40012c00

08003ef0 <HAL_TIM_PWM_Start_DMA>:
{
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003ef6:	460d      	mov	r5, r1
 8003ef8:	2900      	cmp	r1, #0
 8003efa:	d12d      	bne.n	8003f58 <HAL_TIM_PWM_Start_DMA+0x68>
 8003efc:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8003f00:	b2c0      	uxtb	r0, r0
 8003f02:	2802      	cmp	r0, #2
 8003f04:	bf14      	ite	ne
 8003f06:	2000      	movne	r0, #0
 8003f08:	2001      	moveq	r0, #1
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	f040 80f8 	bne.w	8004100 <HAL_TIM_PWM_Start_DMA+0x210>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003f10:	2d00      	cmp	r5, #0
 8003f12:	d13d      	bne.n	8003f90 <HAL_TIM_PWM_Start_DMA+0xa0>
 8003f14:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	2a01      	cmp	r2, #1
 8003f1c:	bf14      	ite	ne
 8003f1e:	2200      	movne	r2, #0
 8003f20:	2201      	moveq	r2, #1
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	f000 80ee 	beq.w	8004104 <HAL_TIM_PWM_Start_DMA+0x214>
    if ((pData == NULL) && (Length > 0U))
 8003f28:	2e00      	cmp	r6, #0
 8003f2a:	d04d      	beq.n	8003fc8 <HAL_TIM_PWM_Start_DMA+0xd8>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	d14f      	bne.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0xe0>
 8003f30:	2202      	movs	r2, #2
 8003f32:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 8003f36:	2d0c      	cmp	r5, #12
 8003f38:	d870      	bhi.n	800401c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003f3a:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003f3e:	0059      	.short	0x0059
 8003f40:	006f006f 	.word	0x006f006f
 8003f44:	008d006f 	.word	0x008d006f
 8003f48:	006f006f 	.word	0x006f006f
 8003f4c:	00a4006f 	.word	0x00a4006f
 8003f50:	006f006f 	.word	0x006f006f
 8003f54:	00bb006f 	.word	0x00bb006f
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f58:	2904      	cmp	r1, #4
 8003f5a:	d009      	beq.n	8003f70 <HAL_TIM_PWM_Start_DMA+0x80>
 8003f5c:	2908      	cmp	r1, #8
 8003f5e:	d00f      	beq.n	8003f80 <HAL_TIM_PWM_Start_DMA+0x90>
 8003f60:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8003f64:	b2c0      	uxtb	r0, r0
 8003f66:	2802      	cmp	r0, #2
 8003f68:	bf14      	ite	ne
 8003f6a:	2000      	movne	r0, #0
 8003f6c:	2001      	moveq	r0, #1
 8003f6e:	e7cc      	b.n	8003f0a <HAL_TIM_PWM_Start_DMA+0x1a>
 8003f70:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8003f74:	b2c0      	uxtb	r0, r0
 8003f76:	2802      	cmp	r0, #2
 8003f78:	bf14      	ite	ne
 8003f7a:	2000      	movne	r0, #0
 8003f7c:	2001      	moveq	r0, #1
 8003f7e:	e7c4      	b.n	8003f0a <HAL_TIM_PWM_Start_DMA+0x1a>
 8003f80:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003f84:	b2c0      	uxtb	r0, r0
 8003f86:	2802      	cmp	r0, #2
 8003f88:	bf14      	ite	ne
 8003f8a:	2000      	movne	r0, #0
 8003f8c:	2001      	moveq	r0, #1
 8003f8e:	e7bc      	b.n	8003f0a <HAL_TIM_PWM_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003f90:	2d04      	cmp	r5, #4
 8003f92:	d009      	beq.n	8003fa8 <HAL_TIM_PWM_Start_DMA+0xb8>
 8003f94:	2d08      	cmp	r5, #8
 8003f96:	d00f      	beq.n	8003fb8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003f98:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	2a01      	cmp	r2, #1
 8003fa0:	bf14      	ite	ne
 8003fa2:	2200      	movne	r2, #0
 8003fa4:	2201      	moveq	r2, #1
 8003fa6:	e7bc      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x32>
 8003fa8:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	2a01      	cmp	r2, #1
 8003fb0:	bf14      	ite	ne
 8003fb2:	2200      	movne	r2, #0
 8003fb4:	2201      	moveq	r2, #1
 8003fb6:	e7b4      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x32>
 8003fb8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	2a01      	cmp	r2, #1
 8003fc0:	bf14      	ite	ne
 8003fc2:	2200      	movne	r2, #0
 8003fc4:	2201      	moveq	r2, #1
 8003fc6:	e7ac      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x32>
    if ((pData == NULL) && (Length > 0U))
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0af      	beq.n	8003f2c <HAL_TIM_PWM_Start_DMA+0x3c>
      return HAL_ERROR;
 8003fcc:	2001      	movs	r0, #1
 8003fce:	e09a      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd0:	2d04      	cmp	r5, #4
 8003fd2:	d005      	beq.n	8003fe0 <HAL_TIM_PWM_Start_DMA+0xf0>
 8003fd4:	2d08      	cmp	r5, #8
 8003fd6:	d007      	beq.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8003fde:	e7aa      	b.n	8003f36 <HAL_TIM_PWM_Start_DMA+0x46>
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8003fe6:	e7a6      	b.n	8003f36 <HAL_TIM_PWM_Start_DMA+0x46>
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8003fee:	e7a2      	b.n	8003f36 <HAL_TIM_PWM_Start_DMA+0x46>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ff0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ff2:	494a      	ldr	r1, [pc, #296]	; (800411c <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003ff4:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ff6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ff8:	4949      	ldr	r1, [pc, #292]	; (8004120 <HAL_TIM_PWM_Start_DMA+0x230>)
 8003ffa:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ffc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ffe:	4949      	ldr	r1, [pc, #292]	; (8004124 <HAL_TIM_PWM_Start_DMA+0x234>)
 8004000:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	3234      	adds	r2, #52	; 0x34
 8004006:	4631      	mov	r1, r6
 8004008:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800400a:	f7fe f9a9 	bl	8002360 <HAL_DMA_Start_IT>
 800400e:	2800      	cmp	r0, #0
 8004010:	d17a      	bne.n	8004108 <HAL_TIM_PWM_Start_DMA+0x218>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	68d3      	ldr	r3, [r2, #12]
 8004016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800401a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800401c:	2201      	movs	r2, #1
 800401e:	4629      	mov	r1, r5
 8004020:	6820      	ldr	r0, [r4, #0]
 8004022:	f7ff fee8 	bl	8003df6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <HAL_TIM_PWM_Start_DMA+0x238>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d058      	beq.n	80040e0 <HAL_TIM_PWM_Start_DMA+0x1f0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	4a3d      	ldr	r2, [pc, #244]	; (8004128 <HAL_TIM_PWM_Start_DMA+0x238>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d059      	beq.n	80040ea <HAL_TIM_PWM_Start_DMA+0x1fa>
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d056      	beq.n	80040ea <HAL_TIM_PWM_Start_DMA+0x1fa>
 800403c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004040:	4293      	cmp	r3, r2
 8004042:	d052      	beq.n	80040ea <HAL_TIM_PWM_Start_DMA+0x1fa>
 8004044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004048:	4293      	cmp	r3, r2
 800404a:	d04e      	beq.n	80040ea <HAL_TIM_PWM_Start_DMA+0x1fa>
    __HAL_TIM_ENABLE(htim);
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004054:	2000      	movs	r0, #0
 8004056:	e056      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004058:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800405a:	4930      	ldr	r1, [pc, #192]	; (800411c <HAL_TIM_PWM_Start_DMA+0x22c>)
 800405c:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800405e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004060:	492f      	ldr	r1, [pc, #188]	; (8004120 <HAL_TIM_PWM_Start_DMA+0x230>)
 8004062:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004064:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004066:	492f      	ldr	r1, [pc, #188]	; (8004124 <HAL_TIM_PWM_Start_DMA+0x234>)
 8004068:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	3238      	adds	r2, #56	; 0x38
 800406e:	4631      	mov	r1, r6
 8004070:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004072:	f7fe f975 	bl	8002360 <HAL_DMA_Start_IT>
 8004076:	2800      	cmp	r0, #0
 8004078:	d148      	bne.n	800410c <HAL_TIM_PWM_Start_DMA+0x21c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	68d3      	ldr	r3, [r2, #12]
 800407e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004082:	60d3      	str	r3, [r2, #12]
      break;
 8004084:	e7ca      	b.n	800401c <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004088:	4924      	ldr	r1, [pc, #144]	; (800411c <HAL_TIM_PWM_Start_DMA+0x22c>)
 800408a:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800408c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800408e:	4924      	ldr	r1, [pc, #144]	; (8004120 <HAL_TIM_PWM_Start_DMA+0x230>)
 8004090:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004092:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004094:	4923      	ldr	r1, [pc, #140]	; (8004124 <HAL_TIM_PWM_Start_DMA+0x234>)
 8004096:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	323c      	adds	r2, #60	; 0x3c
 800409c:	4631      	mov	r1, r6
 800409e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80040a0:	f7fe f95e 	bl	8002360 <HAL_DMA_Start_IT>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d133      	bne.n	8004110 <HAL_TIM_PWM_Start_DMA+0x220>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	68d3      	ldr	r3, [r2, #12]
 80040ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040b0:	60d3      	str	r3, [r2, #12]
      break;
 80040b2:	e7b3      	b.n	800401c <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040b6:	4919      	ldr	r1, [pc, #100]	; (800411c <HAL_TIM_PWM_Start_DMA+0x22c>)
 80040b8:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040bc:	4918      	ldr	r1, [pc, #96]	; (8004120 <HAL_TIM_PWM_Start_DMA+0x230>)
 80040be:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80040c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040c2:	4918      	ldr	r1, [pc, #96]	; (8004124 <HAL_TIM_PWM_Start_DMA+0x234>)
 80040c4:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	3240      	adds	r2, #64	; 0x40
 80040ca:	4631      	mov	r1, r6
 80040cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80040ce:	f7fe f947 	bl	8002360 <HAL_DMA_Start_IT>
 80040d2:	b9f8      	cbnz	r0, 8004114 <HAL_TIM_PWM_Start_DMA+0x224>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	68d3      	ldr	r3, [r2, #12]
 80040d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040dc:	60d3      	str	r3, [r2, #12]
      break;
 80040de:	e79d      	b.n	800401c <HAL_TIM_PWM_Start_DMA+0x12c>
    __HAL_TIM_MOE_ENABLE(htim);
 80040e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e6:	645a      	str	r2, [r3, #68]	; 0x44
 80040e8:	e7a1      	b.n	800402e <HAL_TIM_PWM_Start_DMA+0x13e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	2a06      	cmp	r2, #6
 80040f2:	d011      	beq.n	8004118 <HAL_TIM_PWM_Start_DMA+0x228>
      __HAL_TIM_ENABLE(htim);
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80040fc:	2000      	movs	r0, #0
 80040fe:	e002      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_BUSY;
 8004100:	2002      	movs	r0, #2
 8004102:	e000      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_ERROR;
 8004104:	2001      	movs	r0, #1
}
 8004106:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004108:	2001      	movs	r0, #1
 800410a:	e7fc      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 800410c:	2001      	movs	r0, #1
 800410e:	e7fa      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 8004110:	2001      	movs	r0, #1
 8004112:	e7f8      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 8004114:	2001      	movs	r0, #1
 8004116:	e7f6      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
  return HAL_OK;
 8004118:	2000      	movs	r0, #0
 800411a:	e7f4      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x216>
 800411c:	080038bf 	.word	0x080038bf
 8004120:	0800392f 	.word	0x0800392f
 8004124:	0800396f 	.word	0x0800396f
 8004128:	40012c00 	.word	0x40012c00

0800412c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800412c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d02c      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004134:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004136:	2301      	movs	r3, #1
 8004138:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	2302      	movs	r3, #2
 800413e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004142:	6803      	ldr	r3, [r0, #0]
 8004144:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004146:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004148:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800414c:	680a      	ldr	r2, [r1, #0]
 800414e:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004152:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004154:	6803      	ldr	r3, [r0, #0]
 8004156:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00a      	beq.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d007      	beq.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004162:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800416a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800416e:	4293      	cmp	r3, r2
 8004170:	d104      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004172:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004176:	684a      	ldr	r2, [r1, #4]
 8004178:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800417a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800417c:	2301      	movs	r3, #1
 800417e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004182:	2300      	movs	r3, #0
 8004184:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004188:	4618      	mov	r0, r3
}
 800418a:	bc10      	pop	{r4}
 800418c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800418e:	2002      	movs	r0, #2
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40012c00 	.word	0x40012c00

08004198 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d022      	beq.n	80041e6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80041a0:	2301      	movs	r3, #1
 80041a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041a6:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ac:	688a      	ldr	r2, [r1, #8]
 80041ae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b4:	684a      	ldr	r2, [r1, #4]
 80041b6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041bc:	680a      	ldr	r2, [r1, #0]
 80041be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041c4:	690a      	ldr	r2, [r1, #16]
 80041c6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041cc:	694a      	ldr	r2, [r1, #20]
 80041ce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d4:	69ca      	ldr	r2, [r1, #28]
 80041d6:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041dc:	2300      	movs	r3, #0
 80041de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80041e2:	4618      	mov	r0, r3
 80041e4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80041e6:	2002      	movs	r0, #2
}
 80041e8:	4770      	bx	lr

080041ea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ea:	6802      	ldr	r2, [r0, #0]
 80041ec:	68d3      	ldr	r3, [r2, #12]
 80041ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f4:	6802      	ldr	r2, [r0, #0]
 80041f6:	6953      	ldr	r3, [r2, #20]
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004200:	2b01      	cmp	r3, #1
 8004202:	d005      	beq.n	8004210 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004204:	2320      	movs	r3, #32
 8004206:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	2300      	movs	r3, #0
 800420c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800420e:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	6802      	ldr	r2, [r0, #0]
 8004212:	68d3      	ldr	r3, [r2, #12]
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	60d3      	str	r3, [r2, #12]
 800421a:	e7f3      	b.n	8004204 <UART_EndRxTransfer+0x1a>

0800421c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800421c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b21      	cmp	r3, #33	; 0x21
 8004224:	d001      	beq.n	800422a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004226:	2002      	movs	r0, #2
  }
}
 8004228:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422a:	6883      	ldr	r3, [r0, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d017      	beq.n	8004262 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004232:	6a03      	ldr	r3, [r0, #32]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	6202      	str	r2, [r0, #32]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	6803      	ldr	r3, [r0, #0]
 800423c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800423e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	84c3      	strh	r3, [r0, #38]	; 0x26
 8004248:	b94b      	cbnz	r3, 800425e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800424a:	6802      	ldr	r2, [r0, #0]
 800424c:	68d3      	ldr	r3, [r2, #12]
 800424e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004252:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004254:	6802      	ldr	r2, [r0, #0]
 8004256:	68d3      	ldr	r3, [r2, #12]
 8004258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800425e:	2000      	movs	r0, #0
 8004260:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004262:	6903      	ldr	r3, [r0, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e4      	bne.n	8004232 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004268:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	6802      	ldr	r2, [r0, #0]
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004274:	6a03      	ldr	r3, [r0, #32]
 8004276:	3302      	adds	r3, #2
 8004278:	6203      	str	r3, [r0, #32]
 800427a:	e7e0      	b.n	800423e <UART_Transmit_IT+0x22>

0800427c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	b510      	push	{r4, lr}
 800427e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004280:	6802      	ldr	r2, [r0, #0]
 8004282:	6913      	ldr	r3, [r2, #16]
 8004284:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004288:	68c1      	ldr	r1, [r0, #12]
 800428a:	430b      	orrs	r3, r1
 800428c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800428e:	6883      	ldr	r3, [r0, #8]
 8004290:	6902      	ldr	r2, [r0, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	6942      	ldr	r2, [r0, #20]
 8004296:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004298:	6801      	ldr	r1, [r0, #0]
 800429a:	68cb      	ldr	r3, [r1, #12]
 800429c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042a0:	f023 030c 	bic.w	r3, r3, #12
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a8:	6802      	ldr	r2, [r0, #0]
 80042aa:	6953      	ldr	r3, [r2, #20]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	6981      	ldr	r1, [r0, #24]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80042b6:	6802      	ldr	r2, [r0, #0]
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <UART_SetConfig+0x8c>)
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d020      	beq.n	8004300 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042be:	f7fe fea1 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80042c2:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d4:	480d      	ldr	r0, [pc, #52]	; (800430c <UART_SetConfig+0x90>)
 80042d6:	fba0 3102 	umull	r3, r1, r0, r2
 80042da:	0949      	lsrs	r1, r1, #5
 80042dc:	2364      	movs	r3, #100	; 0x64
 80042de:	fb03 2311 	mls	r3, r3, r1, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	3332      	adds	r3, #50	; 0x32
 80042e6:	fba0 2303 	umull	r2, r3, r0, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	6821      	ldr	r1, [r4, #0]
 80042fa:	4413      	add	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80042fe:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe fe90 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8004304:	4602      	mov	r2, r0
 8004306:	e7dd      	b.n	80042c4 <UART_SetConfig+0x48>
 8004308:	40013800 	.word	0x40013800
 800430c:	51eb851f 	.word	0x51eb851f

08004310 <HAL_UART_Init>:
  if (huart == NULL)
 8004310:	b358      	cbz	r0, 800436a <HAL_UART_Init+0x5a>
{
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800431a:	b30b      	cbz	r3, 8004360 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	2324      	movs	r3, #36	; 0x24
 800431e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	68d3      	ldr	r3, [r2, #12]
 8004326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800432c:	4620      	mov	r0, r4
 800432e:	f7ff ffa5 	bl	800427c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004332:	6822      	ldr	r2, [r4, #0]
 8004334:	6913      	ldr	r3, [r2, #16]
 8004336:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800433a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	6953      	ldr	r3, [r2, #20]
 8004340:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004344:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	68d3      	ldr	r3, [r2, #12]
 800434a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800434e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	2000      	movs	r0, #0
 8004352:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004354:	2320      	movs	r3, #32
 8004356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800435a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800435e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004360:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004364:	f7fd fb6e 	bl	8001a44 <HAL_UART_MspInit>
 8004368:	e7d8      	b.n	800431c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800436a:	2001      	movs	r0, #1
}
 800436c:	4770      	bx	lr

0800436e <HAL_UART_TxCpltCallback>:
}
 800436e:	4770      	bx	lr

08004370 <UART_EndTransmit_IT>:
{
 8004370:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004372:	6801      	ldr	r1, [r0, #0]
 8004374:	68ca      	ldr	r2, [r1, #12]
 8004376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437a:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800437c:	2220      	movs	r2, #32
 800437e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004382:	f7ff fff4 	bl	800436e <HAL_UART_TxCpltCallback>
}
 8004386:	2000      	movs	r0, #0
 8004388:	bd08      	pop	{r3, pc}

0800438a <HAL_UART_RxCpltCallback>:
}
 800438a:	4770      	bx	lr

0800438c <HAL_UART_ErrorCallback>:
}
 800438c:	4770      	bx	lr

0800438e <UART_DMAAbortOnError>:
{
 800438e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004390:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004392:	2300      	movs	r3, #0
 8004394:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004396:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004398:	f7ff fff8 	bl	800438c <HAL_UART_ErrorCallback>
}
 800439c:	bd08      	pop	{r3, pc}

0800439e <HAL_UARTEx_RxEventCallback>:
}
 800439e:	4770      	bx	lr

080043a0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043a0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b22      	cmp	r3, #34	; 0x22
 80043a8:	d160      	bne.n	800446c <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	6883      	ldr	r3, [r0, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d046      	beq.n	8004440 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	d004      	beq.n	80043c4 <UART_Receive_IT+0x24>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d14d      	bne.n	800445a <UART_Receive_IT+0xba>
 80043be:	6903      	ldr	r3, [r0, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d14a      	bne.n	800445a <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c4:	6803      	ldr	r3, [r0, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80043ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043cc:	3301      	adds	r3, #1
 80043ce:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80043d0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d148      	bne.n	8004470 <UART_Receive_IT+0xd0>
{
 80043de:	b500      	push	{lr}
 80043e0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043e2:	6802      	ldr	r2, [r0, #0]
 80043e4:	68d3      	ldr	r3, [r2, #12]
 80043e6:	f023 0320 	bic.w	r3, r3, #32
 80043ea:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ec:	6802      	ldr	r2, [r0, #0]
 80043ee:	68d3      	ldr	r3, [r2, #12]
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043f6:	6802      	ldr	r2, [r0, #0]
 80043f8:	6953      	ldr	r3, [r2, #20]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004400:	2320      	movs	r3, #32
 8004402:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004406:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004408:	2b01      	cmp	r3, #1
 800440a:	d12c      	bne.n	8004466 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	2300      	movs	r3, #0
 800440e:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004410:	6802      	ldr	r2, [r0, #0]
 8004412:	68d3      	ldr	r3, [r2, #12]
 8004414:	f023 0310 	bic.w	r3, r3, #16
 8004418:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800441a:	6803      	ldr	r3, [r0, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	f012 0f10 	tst.w	r2, #16
 8004422:	d006      	beq.n	8004432 <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004424:	2200      	movs	r2, #0
 8004426:	9201      	str	r2, [sp, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	9201      	str	r2, [sp, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004432:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004434:	f7ff ffb3 	bl	800439e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004438:	2000      	movs	r0, #0
}
 800443a:	b003      	add	sp, #12
 800443c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	6902      	ldr	r2, [r0, #16]
 8004442:	2a00      	cmp	r2, #0
 8004444:	d1b5      	bne.n	80043b2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004446:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004448:	6803      	ldr	r3, [r0, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004450:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004452:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004454:	3302      	adds	r3, #2
 8004456:	6283      	str	r3, [r0, #40]	; 0x28
 8004458:	e7ba      	b.n	80043d0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800445a:	6803      	ldr	r3, [r0, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004462:	7013      	strb	r3, [r2, #0]
 8004464:	e7b1      	b.n	80043ca <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8004466:	f7ff ff90 	bl	800438a <HAL_UART_RxCpltCallback>
 800446a:	e7e5      	b.n	8004438 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 800446c:	2002      	movs	r0, #2
 800446e:	4770      	bx	lr
    return HAL_OK;
 8004470:	2000      	movs	r0, #0
}
 8004472:	4770      	bx	lr

08004474 <HAL_UART_IRQHandler>:
{
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	b083      	sub	sp, #12
 8004478:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800447a:	6802      	ldr	r2, [r0, #0]
 800447c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800447e:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004480:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004482:	f013 050f 	ands.w	r5, r3, #15
 8004486:	d105      	bne.n	8004494 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004488:	f013 0f20 	tst.w	r3, #32
 800448c:	d002      	beq.n	8004494 <HAL_UART_IRQHandler+0x20>
 800448e:	f010 0f20 	tst.w	r0, #32
 8004492:	d119      	bne.n	80044c8 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004494:	b12d      	cbz	r5, 80044a2 <HAL_UART_IRQHandler+0x2e>
 8004496:	f011 0101 	ands.w	r1, r1, #1
 800449a:	d119      	bne.n	80044d0 <HAL_UART_IRQHandler+0x5c>
 800449c:	f410 7f90 	tst.w	r0, #288	; 0x120
 80044a0:	d116      	bne.n	80044d0 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80044a4:	2901      	cmp	r1, #1
 80044a6:	d075      	beq.n	8004594 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044ac:	d003      	beq.n	80044b6 <HAL_UART_IRQHandler+0x42>
 80044ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80044b2:	f040 80d7 	bne.w	8004664 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044ba:	d003      	beq.n	80044c4 <HAL_UART_IRQHandler+0x50>
 80044bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044c0:	f040 80d4 	bne.w	800466c <HAL_UART_IRQHandler+0x1f8>
}
 80044c4:	b003      	add	sp, #12
 80044c6:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7ff ff69 	bl	80043a0 <UART_Receive_IT>
      return;
 80044ce:	e7f9      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044d0:	f013 0f01 	tst.w	r3, #1
 80044d4:	d006      	beq.n	80044e4 <HAL_UART_IRQHandler+0x70>
 80044d6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80044da:	d003      	beq.n	80044e4 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e4:	f013 0f04 	tst.w	r3, #4
 80044e8:	d004      	beq.n	80044f4 <HAL_UART_IRQHandler+0x80>
 80044ea:	b119      	cbz	r1, 80044f4 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044ee:	f042 0202 	orr.w	r2, r2, #2
 80044f2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044f4:	f013 0f02 	tst.w	r3, #2
 80044f8:	d004      	beq.n	8004504 <HAL_UART_IRQHandler+0x90>
 80044fa:	b119      	cbz	r1, 8004504 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044fe:	f042 0204 	orr.w	r2, r2, #4
 8004502:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004504:	f013 0f08 	tst.w	r3, #8
 8004508:	d007      	beq.n	800451a <HAL_UART_IRQHandler+0xa6>
 800450a:	f010 0f20 	tst.w	r0, #32
 800450e:	d100      	bne.n	8004512 <HAL_UART_IRQHandler+0x9e>
 8004510:	b119      	cbz	r1, 800451a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004512:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004514:	f042 0208 	orr.w	r2, r2, #8
 8004518:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800451a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800451c:	2a00      	cmp	r2, #0
 800451e:	d0d1      	beq.n	80044c4 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004520:	f013 0f20 	tst.w	r3, #32
 8004524:	d002      	beq.n	800452c <HAL_UART_IRQHandler+0xb8>
 8004526:	f010 0f20 	tst.w	r0, #32
 800452a:	d121      	bne.n	8004570 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004534:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004536:	f012 0f08 	tst.w	r2, #8
 800453a:	d100      	bne.n	800453e <HAL_UART_IRQHandler+0xca>
 800453c:	b323      	cbz	r3, 8004588 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 800453e:	4620      	mov	r0, r4
 8004540:	f7ff fe53 	bl	80041ea <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	f012 0f40 	tst.w	r2, #64	; 0x40
 800454c:	d018      	beq.n	8004580 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004554:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004558:	b173      	cbz	r3, 8004578 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800455a:	4a46      	ldr	r2, [pc, #280]	; (8004674 <HAL_UART_IRQHandler+0x200>)
 800455c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800455e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004560:	f7fd ff5a 	bl	8002418 <HAL_DMA_Abort_IT>
 8004564:	2800      	cmp	r0, #0
 8004566:	d0ad      	beq.n	80044c4 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004568:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800456a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800456c:	4798      	blx	r3
 800456e:	e7a9      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff ff15 	bl	80043a0 <UART_Receive_IT>
 8004576:	e7d9      	b.n	800452c <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff ff07 	bl	800438c <HAL_UART_ErrorCallback>
 800457e:	e7a1      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8004580:	4620      	mov	r0, r4
 8004582:	f7ff ff03 	bl	800438c <HAL_UART_ErrorCallback>
 8004586:	e79d      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8004588:	4620      	mov	r0, r4
 800458a:	f7ff feff 	bl	800438c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	2300      	movs	r3, #0
 8004590:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8004592:	e797      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004594:	f013 0f10 	tst.w	r3, #16
 8004598:	d086      	beq.n	80044a8 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800459a:	f010 0f10 	tst.w	r0, #16
 800459e:	d083      	beq.n	80044a8 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a0:	2300      	movs	r3, #0
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	6813      	ldr	r3, [r2, #0]
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	6853      	ldr	r3, [r2, #4]
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ae:	6953      	ldr	r3, [r2, #20]
 80045b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045b4:	d032      	beq.n	800461c <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045b8:	680b      	ldr	r3, [r1, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d080      	beq.n	80044c4 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80045c2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80045c4:	4298      	cmp	r0, r3
 80045c6:	f67f af7d 	bls.w	80044c4 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 80045ca:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045cc:	698b      	ldr	r3, [r1, #24]
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d108      	bne.n	80045e4 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045d2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80045d4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	1ac9      	subs	r1, r1, r3
 80045da:	b289      	uxth	r1, r1
 80045dc:	4620      	mov	r0, r4
 80045de:	f7ff fede 	bl	800439e <HAL_UARTEx_RxEventCallback>
      return;
 80045e2:	e76f      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e4:	68d3      	ldr	r3, [r2, #12]
 80045e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ea:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	6953      	ldr	r3, [r2, #20]
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	6953      	ldr	r3, [r2, #20]
 80045fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fe:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004600:	2320      	movs	r3, #32
 8004602:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	2300      	movs	r3, #0
 8004608:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	68d3      	ldr	r3, [r2, #12]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004614:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004616:	f7fd fedd 	bl	80023d4 <HAL_DMA_Abort>
 800461a:	e7da      	b.n	80045d2 <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800461c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800461e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004620:	b29b      	uxth	r3, r3
 8004622:	1ac9      	subs	r1, r1, r3
 8004624:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8004626:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	f43f af4a 	beq.w	80044c4 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8004630:	2900      	cmp	r1, #0
 8004632:	f43f af47 	beq.w	80044c4 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	68d3      	ldr	r3, [r2, #12]
 8004638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800463c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	6953      	ldr	r3, [r2, #20]
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004648:	2320      	movs	r3, #32
 800464a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464e:	2300      	movs	r3, #0
 8004650:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	68d3      	ldr	r3, [r2, #12]
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fe9e 	bl	800439e <HAL_UARTEx_RxEventCallback>
      return;
 8004662:	e72f      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8004664:	4620      	mov	r0, r4
 8004666:	f7ff fdd9 	bl	800421c <UART_Transmit_IT>
    return;
 800466a:	e72b      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 800466c:	4620      	mov	r0, r4
 800466e:	f7ff fe7f 	bl	8004370 <UART_EndTransmit_IT>
    return;
 8004672:	e727      	b.n	80044c4 <HAL_UART_IRQHandler+0x50>
 8004674:	0800438f 	.word	0x0800438f

08004678 <expanderSelect>:
#include "main.h"
#include "stm32f1xx_hal.h"

uint8_t expanderOk = 0;

void expanderSelect(void) {HAL_GPIO_WritePin(EXP_GPIO, EXP_PIN, 0);}
 8004678:	b508      	push	{r3, lr}
 800467a:	2200      	movs	r2, #0
 800467c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <expanderSelect+0x10>)
 8004682:	f7fe f8c9 	bl	8002818 <HAL_GPIO_WritePin>
 8004686:	bd08      	pop	{r3, pc}
 8004688:	40010800 	.word	0x40010800

0800468c <expanderDeselect>:
void expanderDeselect(void) {HAL_GPIO_WritePin(EXP_GPIO, EXP_PIN, 1);}
 800468c:	b508      	push	{r3, lr}
 800468e:	2201      	movs	r2, #1
 8004690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <expanderDeselect+0x10>)
 8004696:	f7fe f8bf 	bl	8002818 <HAL_GPIO_WritePin>
 800469a:	bd08      	pop	{r3, pc}
 800469c:	40010800 	.word	0x40010800

080046a0 <expanderReadReg>:
	HAL_Delay(500);
	write8(0, 0);

}

uint8_t expanderReadReg(uint8_t addr) {
 80046a0:	b500      	push	{lr}
 80046a2:	b085      	sub	sp, #20
	  uint8_t txData[3];
	  txData[0] = READ_CMD | (EXP_ADDR << 1) | 0x40;
 80046a4:	2341      	movs	r3, #65	; 0x41
 80046a6:	f88d 300c 	strb.w	r3, [sp, #12]
	  txData[1] = addr;
 80046aa:	f88d 000d 	strb.w	r0, [sp, #13]
	  txData[2] = 0xFF; //dummy data for Tx
 80046ae:	23ff      	movs	r3, #255	; 0xff
 80046b0:	f88d 300e 	strb.w	r3, [sp, #14]

	  uint8_t rxData[3] = {0x55, 0x55, 0x55};
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <expanderReadReg+0x44>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f88d 300a 	strb.w	r3, [sp, #10]

	  expanderSelect();
 80046c2:	f7ff ffd9 	bl	8004678 <expanderSelect>
	  	  HAL_SPI_TransmitReceive(EXP_SPI_HANDLE, txData, rxData, 3, 1);
 80046c6:	2301      	movs	r3, #1
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	2303      	movs	r3, #3
 80046cc:	aa02      	add	r2, sp, #8
 80046ce:	a903      	add	r1, sp, #12
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <expanderReadReg+0x48>)
 80046d2:	f7fe fef6 	bl	80034c2 <HAL_SPI_TransmitReceive>
	  expanderDeselect();
 80046d6:	f7ff ffd9 	bl	800468c <expanderDeselect>

	  return rxData[2];
}
 80046da:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80046de:	b005      	add	sp, #20
 80046e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80046e4:	08008934 	.word	0x08008934
 80046e8:	2000040c 	.word	0x2000040c

080046ec <expanderWriteReg>:

void expanderWriteReg(uint8_t addr, uint8_t value) {
 80046ec:	b500      	push	{lr}
 80046ee:	b083      	sub	sp, #12
	  uint8_t txData[3];
	  txData[0] = WRITE_CMD | (EXP_ADDR << 1) | 0x40;
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	f88d 3004 	strb.w	r3, [sp, #4]
	  txData[1] = addr;
 80046f6:	f88d 0005 	strb.w	r0, [sp, #5]
	  txData[2] = value;
 80046fa:	f88d 1006 	strb.w	r1, [sp, #6]

	  expanderSelect();
 80046fe:	f7ff ffbb 	bl	8004678 <expanderSelect>
	  	  HAL_SPI_Transmit(EXP_SPI_HANDLE, txData, 3, 1);
 8004702:	2301      	movs	r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	a901      	add	r1, sp, #4
 8004708:	4803      	ldr	r0, [pc, #12]	; (8004718 <expanderWriteReg+0x2c>)
 800470a:	f7fe fdfe 	bl	800330a <HAL_SPI_Transmit>
	  expanderDeselect();
 800470e:	f7ff ffbd 	bl	800468c <expanderDeselect>
}
 8004712:	b003      	add	sp, #12
 8004714:	f85d fb04 	ldr.w	pc, [sp], #4
 8004718:	2000040c 	.word	0x2000040c

0800471c <write8>:
void pinMode8(uint8_t port, uint8_t value){
	if (!port) 	expanderWriteReg(MCP23S17_DDR_A, value);
	else 		expanderWriteReg(MCP23S17_DDR_B, value);
}

void write8(uint8_t port, uint8_t value) {
 800471c:	b508      	push	{r3, lr}
	if (!port) 	expanderWriteReg(MCP23S17_GPIO_A, value);
 800471e:	b918      	cbnz	r0, 8004728 <write8+0xc>
 8004720:	2012      	movs	r0, #18
 8004722:	f7ff ffe3 	bl	80046ec <expanderWriteReg>
	else 		expanderWriteReg(MCP23S17_GPIO_B, value);
}
 8004726:	bd08      	pop	{r3, pc}
	else 		expanderWriteReg(MCP23S17_GPIO_B, value);
 8004728:	2013      	movs	r0, #19
 800472a:	f7ff ffdf 	bl	80046ec <expanderWriteReg>
}
 800472e:	e7fa      	b.n	8004726 <write8+0xa>

08004730 <setPolarity8>:
int read8(uint8_t port){
  if (!port) return expanderReadReg(MCP23S17_GPIO_A);
  return 			expanderReadReg(MCP23S17_GPIO_B);
}

void setPolarity8(uint8_t port,  uint8_t mask){
 8004730:	b508      	push	{r3, lr}
  if (!port) 	expanderWriteReg(MCP23S17_POL_A, mask);
 8004732:	b918      	cbnz	r0, 800473c <setPolarity8+0xc>
 8004734:	2002      	movs	r0, #2
 8004736:	f7ff ffd9 	bl	80046ec <expanderWriteReg>
  else 			expanderWriteReg(MCP23S17_POL_B, mask);
}
 800473a:	bd08      	pop	{r3, pc}
  else 			expanderWriteReg(MCP23S17_POL_B, mask);
 800473c:	2003      	movs	r0, #3
 800473e:	f7ff ffd5 	bl	80046ec <expanderWriteReg>
}
 8004742:	e7fa      	b.n	800473a <setPolarity8+0xa>

08004744 <getPolarity8>:

int getPolarity8(uint8_t port){
 8004744:	b508      	push	{r3, lr}
	if (!port)	 return expanderReadReg(MCP23S17_POL_A);
 8004746:	b118      	cbz	r0, 8004750 <getPolarity8+0xc>
	return 				expanderReadReg(MCP23S17_POL_B);
 8004748:	2003      	movs	r0, #3
 800474a:	f7ff ffa9 	bl	80046a0 <expanderReadReg>
}
 800474e:	bd08      	pop	{r3, pc}
	if (!port)	 return expanderReadReg(MCP23S17_POL_A);
 8004750:	2002      	movs	r0, #2
 8004752:	f7ff ffa5 	bl	80046a0 <expanderReadReg>
 8004756:	e7fa      	b.n	800474e <getPolarity8+0xa>

08004758 <expanderInit>:
void expanderInit(void){
 8004758:	b510      	push	{r4, lr}
	expanderOk = 0;
 800475a:	2400      	movs	r4, #0
 800475c:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <expanderInit+0x60>)
 800475e:	701c      	strb	r4, [r3, #0]
	expanderDeselect();
 8004760:	f7ff ff94 	bl	800468c <expanderDeselect>
	HAL_Delay(100);
 8004764:	2064      	movs	r0, #100	; 0x64
 8004766:	f7fd fac5 	bl	8001cf4 <HAL_Delay>
	expanderWriteReg(MCP23S17_DDR_A, 0);
 800476a:	4621      	mov	r1, r4
 800476c:	4620      	mov	r0, r4
 800476e:	f7ff ffbd 	bl	80046ec <expanderWriteReg>
	expanderWriteReg(MCP23S17_DDR_B, 0);
 8004772:	4621      	mov	r1, r4
 8004774:	2001      	movs	r0, #1
 8004776:	f7ff ffb9 	bl	80046ec <expanderWriteReg>
	setPolarity8(0, testVal);
 800477a:	21be      	movs	r1, #190	; 0xbe
 800477c:	4620      	mov	r0, r4
 800477e:	f7ff ffd7 	bl	8004730 <setPolarity8>
	uint8_t readBack = getPolarity8(0);
 8004782:	4620      	mov	r0, r4
 8004784:	f7ff ffde 	bl	8004744 <getPolarity8>
 8004788:	b2c0      	uxtb	r0, r0
	if (readBack == testVal){
 800478a:	28be      	cmp	r0, #190	; 0xbe
 800478c:	d00f      	beq.n	80047ae <expanderInit+0x56>
	write8(0, expanderOk * 0xff);
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <expanderInit+0x60>)
 8004790:	7819      	ldrb	r1, [r3, #0]
 8004792:	4249      	negs	r1, r1
 8004794:	b2c9      	uxtb	r1, r1
 8004796:	2000      	movs	r0, #0
 8004798:	f7ff ffc0 	bl	800471c <write8>
	HAL_Delay(500);
 800479c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047a0:	f7fd faa8 	bl	8001cf4 <HAL_Delay>
	write8(0, 0);
 80047a4:	2100      	movs	r1, #0
 80047a6:	4608      	mov	r0, r1
 80047a8:	f7ff ffb8 	bl	800471c <write8>
}
 80047ac:	bd10      	pop	{r4, pc}
		expanderOk = 1;
 80047ae:	4b02      	ldr	r3, [pc, #8]	; (80047b8 <expanderInit+0x60>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e7eb      	b.n	800478e <expanderInit+0x36>
 80047b6:	bf00      	nop
 80047b8:	20000540 	.word	0x20000540

080047bc <agcPrasolovFloat>:
float Falpha = 0.02f;
float FR = 0.7f;
float FAn = 0;


void agcPrasolovFloat(q31_t* source, q31_t* destination, uint16_t blockSize){
 80047bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c0:	b083      	sub	sp, #12
 80047c2:	4683      	mov	fp, r0
 80047c4:	460f      	mov	r7, r1
 80047c6:	4692      	mov	sl, r2
	for (uint16_t i=0; i<blockSize; i++){
 80047c8:	2400      	movs	r4, #0
 80047ca:	e04d      	b.n	8004868 <agcPrasolovFloat+0xac>
		float input = Q31toF(source[i]);
 80047cc:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 80047d0:	f7fc fac4 	bl	8000d5c <__aeabi_i2f>
 80047d4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 80047d8:	f7fc fb14 	bl	8000e04 <__aeabi_fmul>
 80047dc:	4601      	mov	r1, r0
		input = input * FAn;
 80047de:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004874 <agcPrasolovFloat+0xb8>
 80047e2:	f8d8 6000 	ldr.w	r6, [r8]
 80047e6:	4630      	mov	r0, r6
 80047e8:	f7fc fb0c 	bl	8000e04 <__aeabi_fmul>
 80047ec:	4605      	mov	r5, r0

		//float Anew =;
		FAn =  FAn * (1 - Falpha * fabs(input)) + Falpha * FR;
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <agcPrasolovFloat+0xbc>)
 80047f0:	f8d3 9000 	ldr.w	r9, [r3]
 80047f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80047f8:	f7fb fe76 	bl	80004e8 <__aeabi_f2d>
 80047fc:	e9cd 0100 	strd	r0, r1, [sp]
 8004800:	4648      	mov	r0, r9
 8004802:	f7fb fe71 	bl	80004e8 <__aeabi_f2d>
 8004806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800480a:	f7fb fec5 	bl	8000598 <__aeabi_dmul>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	2000      	movs	r0, #0
 8004814:	4919      	ldr	r1, [pc, #100]	; (800487c <agcPrasolovFloat+0xc0>)
 8004816:	f7fb fd07 	bl	8000228 <__aeabi_dsub>
 800481a:	e9cd 0100 	strd	r0, r1, [sp]
 800481e:	4630      	mov	r0, r6
 8004820:	f7fb fe62 	bl	80004e8 <__aeabi_f2d>
 8004824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004828:	f7fb feb6 	bl	8000598 <__aeabi_dmul>
 800482c:	e9cd 0100 	strd	r0, r1, [sp]
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <agcPrasolovFloat+0xc4>)
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	4648      	mov	r0, r9
 8004836:	f7fc fae5 	bl	8000e04 <__aeabi_fmul>
 800483a:	f7fb fe55 	bl	80004e8 <__aeabi_f2d>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004846:	f7fb fcf1 	bl	800022c <__adddf3>
 800484a:	f7fc f97d 	bl	8000b48 <__aeabi_d2f>
 800484e:	f8c8 0000 	str.w	r0, [r8]
		destination[i] = FtoQ31(input);
 8004852:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
 8004856:	4628      	mov	r0, r5
 8004858:	f7fc fad4 	bl	8000e04 <__aeabi_fmul>
 800485c:	f7fc fc22 	bl	80010a4 <__aeabi_f2iz>
 8004860:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
	for (uint16_t i=0; i<blockSize; i++){
 8004864:	3401      	adds	r4, #1
 8004866:	b2a4      	uxth	r4, r4
 8004868:	4554      	cmp	r4, sl
 800486a:	d3af      	bcc.n	80047cc <agcPrasolovFloat+0x10>
	}
}
 800486c:	b003      	add	sp, #12
 800486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	20000544 	.word	0x20000544
 8004878:	20000010 	.word	0x20000010
 800487c:	3ff00000 	.word	0x3ff00000
 8004880:	2000000c 	.word	0x2000000c

08004884 <softClip>:
#include "audio.h"
#include "arm_math.h"
#include <stdbool.h>
#include <stdint.h>

q31_t softClip(q31_t* source, q31_t* destination, uint16_t blockSize){
 8004884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af02      	add	r7, sp, #8
 800488c:	4606      	mov	r6, r0
 800488e:	4688      	mov	r8, r1
 8004890:	4614      	mov	r4, r2
	//in = in - 0.33333333333333f * in * in * in;
	//if (in > 0.999) in = 0.999;
	//if (in < -0.999) in = -0.999;

	q31_t multResult[blockSize];
 8004892:	0093      	lsls	r3, r2, #2
 8004894:	3307      	adds	r3, #7
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	466a      	mov	r2, sp
 800489a:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800489e:	469d      	mov	sp, r3
 80048a0:	ad02      	add	r5, sp, #8
	q31_t cilpA = FtoQ31(0.333333333f);

	arm_mult_q31(source, source, multResult, blockSize); // in^2
 80048a2:	4623      	mov	r3, r4
 80048a4:	462a      	mov	r2, r5
 80048a6:	4601      	mov	r1, r0
 80048a8:	f001 fa5a 	bl	8005d60 <arm_mult_q31>
	arm_mult_q31(source, multResult, multResult, blockSize); // in^3
 80048ac:	4623      	mov	r3, r4
 80048ae:	462a      	mov	r2, r5
 80048b0:	4629      	mov	r1, r5
 80048b2:	4630      	mov	r0, r6
 80048b4:	f001 fa54 	bl	8005d60 <arm_mult_q31>
	arm_scale_q31(multResult, cilpA, 0, multResult, blockSize); // in^3 * 1/3
 80048b8:	9400      	str	r4, [sp, #0]
 80048ba:	462b      	mov	r3, r5
 80048bc:	2200      	movs	r2, #0
 80048be:	4906      	ldr	r1, [pc, #24]	; (80048d8 <softClip+0x54>)
 80048c0:	4628      	mov	r0, r5
 80048c2:	f001 f977 	bl	8005bb4 <arm_scale_q31>
	//arm_negate_q31(multResult, multResult, blockSize); // - (in^3 * 1/3)
	//arm_add_q31(source, multResult, destination, blockSize); // in - (in^3 * 1/3)
	arm_sub_q31(source, multResult, destination, blockSize); // in - (in^3 * 1/3)
 80048c6:	4623      	mov	r3, r4
 80048c8:	4642      	mov	r2, r8
 80048ca:	4629      	mov	r1, r5
 80048cc:	4630      	mov	r0, r6
 80048ce:	f001 f8e5 	bl	8005a9c <arm_sub_q31>

		destination[i] = input - cube;

	}
	*/
}
 80048d2:	46bd      	mov	sp, r7
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d8:	2aaaaac0 	.word	0x2aaaaac0

080048dc <dspInit>:

arm_fir_decimate_instance_q31	firInstanceDecI;
arm_fir_decimate_instance_q31	firInstanceDecQ;

int outStarted = 0;
void dspInit(void){
 80048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048de:	b083      	sub	sp, #12
	outStarted = 0;
 80048e0:	4e11      	ldr	r6, [pc, #68]	; (8004928 <dspInit+0x4c>)
 80048e2:	2300      	movs	r3, #0
 80048e4:	6033      	str	r3, [r6, #0]
	firInit();
 80048e6:	f000 f90f 	bl	8004b08 <firInit>

	arm_fir_init_q31(&firInstanceI, FIR_NUM_TAPS, firCoeffs, firStateI, DSP_BLOCK_SIZE);
 80048ea:	4f10      	ldr	r7, [pc, #64]	; (800492c <dspInit+0x50>)
 80048ec:	4c10      	ldr	r4, [pc, #64]	; (8004930 <dspInit+0x54>)
 80048ee:	2580      	movs	r5, #128	; 0x80
 80048f0:	9500      	str	r5, [sp, #0]
 80048f2:	463b      	mov	r3, r7
 80048f4:	4622      	mov	r2, r4
 80048f6:	2120      	movs	r1, #32
 80048f8:	480e      	ldr	r0, [pc, #56]	; (8004934 <dspInit+0x58>)
 80048fa:	f000 feef 	bl	80056dc <arm_fir_init_q31>
	arm_fir_init_q31(&firInstanceQ, FIR_NUM_TAPS, firCoeffs, firStateQ, DSP_BLOCK_SIZE);
 80048fe:	9500      	str	r5, [sp, #0]
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <dspInit+0x5c>)
 8004902:	4622      	mov	r2, r4
 8004904:	2120      	movs	r1, #32
 8004906:	480d      	ldr	r0, [pc, #52]	; (800493c <dspInit+0x60>)
 8004908:	f000 fee8 	bl	80056dc <arm_fir_init_q31>

	arm_fir_decimate_init_q31(&firInstanceDecI, FIR_NUM_TAPS, 2, firCoeffs, firStateI, DSP_BLOCK_SIZE);
 800490c:	9501      	str	r5, [sp, #4]
 800490e:	9700      	str	r7, [sp, #0]
 8004910:	4623      	mov	r3, r4
 8004912:	2202      	movs	r2, #2
 8004914:	2120      	movs	r1, #32
 8004916:	480a      	ldr	r0, [pc, #40]	; (8004940 <dspInit+0x64>)
 8004918:	f000 ffae 	bl	8005878 <arm_fir_decimate_init_q31>
	//arm_fir_decimate_init_q31(&firInstanceDecQ, FIR_NUM_TAPS, 2, firCoeffs, firStateQ, DSP_BLOCK_SIZE);


	 fftInit();
 800491c:	f000 f8cc 	bl	8004ab8 <fftInit>
	//arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	//arm_fir_init_q31(&S2, NUM_TAPS, firCoeffs32, firState2, DSP_BLOCK_SIZE);

	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&S1, NUM_TAPS, 2, firCoeffs32, firState1, DSP_BLOCK_SIZE);
	 outStarted = 1;
 8004920:	2301      	movs	r3, #1
 8004922:	6033      	str	r3, [r6, #0]

}
 8004924:	b003      	add	sp, #12
 8004926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004928:	20001678 	.word	0x20001678
 800492c:	20000b70 	.word	0x20000b70
 8004930:	08008938 	.word	0x08008938
 8004934:	20000b58 	.word	0x20000b58
 8004938:	20000df4 	.word	0x20000df4
 800493c:	20000b64 	.word	0x20000b64
 8004940:	20000b4c 	.word	0x20000b4c

08004944 <dspStart>:

void dspStart(void){
 8004944:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 8004946:	4c0b      	ldr	r4, [pc, #44]	; (8004974 <dspStart+0x30>)
 8004948:	4620      	mov	r0, r4
 800494a:	f7fe ff89 	bl	8003860 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // TIM1 CH2 = ADC trigger
 800494e:	2104      	movs	r1, #4
 8004950:	4620      	mov	r0, r4
 8004952:	f7ff fa5f 	bl	8003e14 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inBuf, ADC_BUFFER_LEN); // CH3 = audio output
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	4907      	ldr	r1, [pc, #28]	; (8004978 <dspStart+0x34>)
 800495c:	4807      	ldr	r0, [pc, #28]	; (800497c <dspStart+0x38>)
 800495e:	f7fd faff 	bl	8001f60 <HAL_ADC_Start_DMA>
																	// ADC_BUFFER_LEN/(ADC_DMA_CHANNELS)
	//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS)/2);

	#ifdef DSP_DECIMATED
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
 8004962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004966:	4a06      	ldr	r2, [pc, #24]	; (8004980 <dspStart+0x3c>)
 8004968:	2108      	movs	r1, #8
 800496a:	4620      	mov	r0, r4
 800496c:	f7ff fac0 	bl	8003ef0 <HAL_TIM_PWM_Start_DMA>

	#ifndef DSP_DECIMATED
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/(ADC_DMA_CHANNELS));
	#endif

}
 8004970:	bd10      	pop	{r4, pc}
 8004972:	bf00      	nop
 8004974:	20000464 	.word	0x20000464
 8004978:	20001078 	.word	0x20001078
 800497c:	20000204 	.word	0x20000204
 8004980:	20001478 	.word	0x20001478

08004984 <dspPrepareInput>:
int start = 0;
int end  = 0;
//int adcBuffStart = 0;

void dspPrepareInput(void){
	int adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8004984:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <dspPrepareInput+0x4c>)
 8004986:	f893 c000 	ldrb.w	ip, [r3]
 800498a:	f08c 0c01 	eor.w	ip, ip, #1
 800498e:	ea4f 2c0c 	mov.w	ip, ip, lsl #8

	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8004992:	2300      	movs	r3, #0
 8004994:	2b7f      	cmp	r3, #127	; 0x7f
 8004996:	dc19      	bgt.n	80049cc <dspPrepareInput+0x48>
void dspPrepareInput(void){
 8004998:	b410      	push	{r4}
		int ptr = i * ADC_DMA_CHANNELS + adcBuffStart;
 800499a:	eb0c 0143 	add.w	r1, ip, r3, lsl #1
		dspInI[i] = adcToQ31(inBuf[ptr]);
 800499e:	480d      	ldr	r0, [pc, #52]	; (80049d4 <dspPrepareInput+0x50>)
 80049a0:	f930 2011 	ldrsh.w	r2, [r0, r1, lsl #1]
#define FtoQ31(x) 			(q31_t)(x * 2147483648.0f)
#define Q31toF(x) 			(float)(x / 2147483648.0f)
//#define q31ToPwm(x)			(uint16_t)((x >> 21) + PWM_HALF)
//#define adcToQ31(x)			(q31_t)((x - ADC_HALF) << 20)
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
inline q31_t	adcToQ31(int16_t input)	{return ((input - ADC_HALF) << 20);}
 80049a4:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80049a8:	0512      	lsls	r2, r2, #20
 80049aa:	4c0b      	ldr	r4, [pc, #44]	; (80049d8 <dspPrepareInput+0x54>)
 80049ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		dspInQ[i] = adcToQ31(inBuf[ptr + 1]);
 80049b0:	3101      	adds	r1, #1
 80049b2:	f930 2011 	ldrsh.w	r2, [r0, r1, lsl #1]
 80049b6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80049ba:	0512      	lsls	r2, r2, #20
 80049bc:	4907      	ldr	r1, [pc, #28]	; (80049dc <dspPrepareInput+0x58>)
 80049be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 80049c2:	3301      	adds	r3, #1
 80049c4:	2b7f      	cmp	r3, #127	; 0x7f
 80049c6:	dde8      	ble.n	800499a <dspPrepareInput+0x16>
	}
}
 80049c8:	bc10      	pop	{r4}
 80049ca:	4770      	bx	lr
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000b49 	.word	0x20000b49
 80049d4:	20001078 	.word	0x20001078
 80049d8:	20000548 	.word	0x20000548
 80049dc:	20000748 	.word	0x20000748

080049e0 <dspPrepareOutput>:

void dspPrepareOutput(void){

#ifdef DSP_DECIMATED
	int adcBuffStart = ADC_BUFFER_LEN/(ADC_DMA_CHANNELS*2) * (dspRingHalf == HALF_LOWER);
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <dspPrepareOutput+0x38>)
 80049e2:	f893 c000 	ldrb.w	ip, [r3]
 80049e6:	f08c 0c01 	eor.w	ip, ip, #1
 80049ea:	ea4f 1ccc 	mov.w	ip, ip, lsl #7

	for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 80049ee:	2200      	movs	r2, #0
 80049f0:	e00f      	b.n	8004a12 <dspPrepareOutput+0x32>
		int ptr = adcBuffStart + k*2;
 80049f2:	eb0c 0142 	add.w	r1, ip, r2, lsl #1
		outBuf[ptr] = 		q31toPwm(dspOut[k]);
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <dspPrepareOutput+0x3c>)
 80049f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
inline uint16_t q31toPwm(q31_t input)	{return ((input >> 21) + PWM_HALF);}
 80049fc:	155b      	asrs	r3, r3, #21
 80049fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4806      	ldr	r0, [pc, #24]	; (8004a20 <dspPrepareOutput+0x40>)
 8004a06:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
		outBuf[ptr + 1] = 	q31toPwm(dspOut[k]);
 8004a0a:	3101      	adds	r1, #1
 8004a0c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
	for (int k=0; k < DSP_BLOCK_SIZE/2; k++){
 8004a10:	3201      	adds	r2, #1
 8004a12:	2a3f      	cmp	r2, #63	; 0x3f
 8004a14:	dded      	ble.n	80049f2 <dspPrepareOutput+0x12>
	for (int k=0; k < DSP_BLOCK_SIZE; k++){
		outBuf[adcBuffStart + k] = 		q31toPwm(dspOut[k]);
	}
#endif

}
 8004a16:	4770      	bx	lr
 8004a18:	20000b49 	.word	0x20000b49
 8004a1c:	20000948 	.word	0x20000948
 8004a20:	20001478 	.word	0x20001478

08004a24 <dspProc>:

q31_t sinX = 0;
void dspProc(void){

	if (!dspProcDone){
 8004a24:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <dspProc+0x44>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	b103      	cbz	r3, 8004a2c <dspProc+0x8>
 8004a2a:	4770      	bx	lr
void dspProc(void){
 8004a2c:	b510      	push	{r4, lr}

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);

		//arm_scale_f32(blockIN, (1.0f/4096.0f), blockOUT, BUF_LEN/2);

		dspPrepareInput();
 8004a2e:	f7ff ffa9 	bl	8004984 <dspPrepareInput>
			//arm_scale_q31(dspInI, floatQ31(2.0), 0, dspOut, BUF_LEN/2);
			//arm_copy_q31(dspInI, dspOut, DSP_BLOCK_SIZE);


			//arm_cfft_q31(&fftS, blockOUT, 0, 1);
			fftProcess(dspOut);
 8004a32:	4c0e      	ldr	r4, [pc, #56]	; (8004a6c <dspProc+0x48>)
 8004a34:	4620      	mov	r0, r4
 8004a36:	f000 f841 	bl	8004abc <fftProcess>

			// main selection filter

#ifdef DSP_DECIMATED
			arm_fir_decimate_q31(&firInstanceDecI, dspInI, dspOut, DSP_BLOCK_SIZE);
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	490c      	ldr	r1, [pc, #48]	; (8004a70 <dspProc+0x4c>)
 8004a40:	480c      	ldr	r0, [pc, #48]	; (8004a74 <dspProc+0x50>)
 8004a42:	f000 fe5d 	bl	8005700 <arm_fir_decimate_q31>
#ifndef DSP_DECIMATED
			arm_fir_q31(&firInstanceI, dspInI, dspOut, DSP_BLOCK_SIZE);
			//arm_fir_q31(&firInstanceQ, dspInQ, dspOut, DSP_BLOCK_SIZE);
#endif

				agcPrasolovFloat(dspOut, dspOut, DSP_BLOCK_SIZE_DEC);
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f7ff feb6 	bl	80047bc <agcPrasolovFloat>
				softClip(dspOut, dspOut, DSP_BLOCK_SIZE_DEC);
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	4621      	mov	r1, r4
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff ff15 	bl	8004884 <softClip>


		dspPrepareOutput();
 8004a5a:	f7ff ffc1 	bl	80049e0 <dspPrepareOutput>
		dspProcDone = 1;
 8004a5e:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <dspProc+0x44>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
	}
}
 8004a64:	bd10      	pop	{r4, pc}
 8004a66:	bf00      	nop
 8004a68:	20000b48 	.word	0x20000b48
 8004a6c:	20000948 	.word	0x20000948
 8004a70:	20000548 	.word	0x20000548
 8004a74:	20000b4c 	.word	0x20000b4c

08004a78 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){

}
 8004a78:	4770      	bx	lr

08004a7a <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){



}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);


	dspRingHalf = HALF_UPPER;
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
	dspProcDone = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8004a86:	7013      	strb	r3, [r2, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,dspRingHalf);
	elseDone = 0;
 8004a88:	4a03      	ldr	r2, [pc, #12]	; (8004a98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1c>)
 8004a8a:	7013      	strb	r3, [r2, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

};
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000b49 	.word	0x20000b49
 8004a94:	20000b48 	.word	0x20000b48
 8004a98:	20000200 	.word	0x20000200

08004a9c <HAL_TIM_PWM_PulseFinishedCallback>:


	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

		dspRingHalf = HALF_LOWER;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4a03      	ldr	r2, [pc, #12]	; (8004aac <HAL_TIM_PWM_PulseFinishedCallback+0x10>)
 8004aa0:	7013      	strb	r3, [r2, #0]
		dspProcDone = 0;
 8004aa2:	4a03      	ldr	r2, [pc, #12]	; (8004ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x14>)
 8004aa4:	7013      	strb	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,dspRingHalf);
		elseDone = 0;
 8004aa6:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8004aa8:	7013      	strb	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

}
 8004aaa:	4770      	bx	lr
 8004aac:	20000b49 	.word	0x20000b49
 8004ab0:	20000b48 	.word	0x20000b48
 8004ab4:	20000200 	.word	0x20000200

08004ab8 <fftInit>:

arm_cfft_instance_q31 fftS;

void fftInit(void) {
	//arm_cfft_radix4_init_q31(&fftS, FFT_LEN, 0, 1);
}
 8004ab8:	4770      	bx	lr
	...

08004abc <fftProcess>:

q31_t fftBuf[FFT_LEN*2];
q31_t magnitudes[FFT_LEN/2];

void fftProcess(q31_t *inputF32) {
 8004abc:	b530      	push	{r4, r5, lr}
 8004abe:	b083      	sub	sp, #12
	//arm_cfft_radix4_q31(&fftS, inputF32);

	arm_copy_q31(inputF32, fftBuf, FFT_LEN);
 8004ac0:	4d0d      	ldr	r5, [pc, #52]	; (8004af8 <fftProcess+0x3c>)
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f000 f821 	bl	8004b0c <arm_copy_q31>
	arm_cfft_q31(&fftS, fftBuf, 0, 1);
 8004aca:	2301      	movs	r3, #1
 8004acc:	2200      	movs	r2, #0
 8004ace:	4629      	mov	r1, r5
 8004ad0:	480a      	ldr	r0, [pc, #40]	; (8004afc <fftProcess+0x40>)
 8004ad2:	f000 f995 	bl	8004e00 <arm_cfft_q31>
	arm_cmplx_mag_q31(fftBuf, magnitudes, FFT_LEN);
 8004ad6:	4c0a      	ldr	r4, [pc, #40]	; (8004b00 <fftProcess+0x44>)
 8004ad8:	2280      	movs	r2, #128	; 0x80
 8004ada:	4621      	mov	r1, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	f000 fee7 	bl	80058b0 <arm_cmplx_mag_q31>

	arm_scale_q31(magnitudes, 2126008812, -24, magnitudes, FFT_LEN/2);
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	f06f 0217 	mvn.w	r2, #23
 8004aec:	4905      	ldr	r1, [pc, #20]	; (8004b04 <fftProcess+0x48>)
 8004aee:	4620      	mov	r0, r4
 8004af0:	f001 f860 	bl	8005bb4 <arm_scale_q31>



	//arm_max_f32(fftMagnitudesdB, FFT_LEN, &maxValue, &maxIndex);
}
 8004af4:	b003      	add	sp, #12
 8004af6:	bd30      	pop	{r4, r5, pc}
 8004af8:	2000167c 	.word	0x2000167c
 8004afc:	20001a7c 	.word	0x20001a7c
 8004b00:	20001a8c 	.word	0x20001a8c
 8004b04:	7eb851ec 	.word	0x7eb851ec

08004b08 <firInit>:


	//arm_fir_decimate_init_q31(&firInstanceI, FIR_NUM_TAPS, 2, firCoeffs, firStateI, DSP_BLOCK_SIZE);
	//arm_fir_decimate_init_q31(&firInstanceQ, FIR_NUM_TAPS, 2, firCoeffs, firStateQ, DSP_BLOCK_SIZE);

}
 8004b08:	4770      	bx	lr
	...

08004b0c <arm_copy_q31>:
 8004b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b10:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004b14:	4696      	mov	lr, r2
 8004b16:	468c      	mov	ip, r1
 8004b18:	d01e      	beq.n	8004b58 <arm_copy_q31+0x4c>
 8004b1a:	4645      	mov	r5, r8
 8004b1c:	f100 0410 	add.w	r4, r0, #16
 8004b20:	f101 0310 	add.w	r3, r1, #16
 8004b24:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8004b28:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004b2c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004b30:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8004b34:	3d01      	subs	r5, #1
 8004b36:	f843 1c10 	str.w	r1, [r3, #-16]
 8004b3a:	f843 2c0c 	str.w	r2, [r3, #-12]
 8004b3e:	f843 7c08 	str.w	r7, [r3, #-8]
 8004b42:	f843 6c04 	str.w	r6, [r3, #-4]
 8004b46:	f104 0410 	add.w	r4, r4, #16
 8004b4a:	f103 0310 	add.w	r3, r3, #16
 8004b4e:	d1e9      	bne.n	8004b24 <arm_copy_q31+0x18>
 8004b50:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004b54:	4440      	add	r0, r8
 8004b56:	44c4      	add	ip, r8
 8004b58:	f01e 0203 	ands.w	r2, lr, #3
 8004b5c:	d007      	beq.n	8004b6e <arm_copy_q31+0x62>
 8004b5e:	f1ac 0104 	sub.w	r1, ip, #4
 8004b62:	f850 3b04 	ldr.w	r3, [r0], #4
 8004b66:	3a01      	subs	r2, #1
 8004b68:	f841 3f04 	str.w	r3, [r1, #4]!
 8004b6c:	d1f9      	bne.n	8004b62 <arm_copy_q31+0x56>
 8004b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b72:	bf00      	nop

08004b74 <arm_cfft_radix4by2_q31>:
 8004b74:	460b      	mov	r3, r1
 8004b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	b08b      	sub	sp, #44	; 0x2c
 8004b7e:	9107      	str	r1, [sp, #28]
 8004b80:	4682      	mov	sl, r0
 8004b82:	9205      	str	r2, [sp, #20]
 8004b84:	9306      	str	r3, [sp, #24]
 8004b86:	f000 8084 	beq.w	8004c92 <arm_cfft_radix4by2_q31+0x11e>
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	eb00 0b03 	add.w	fp, r0, r3
 8004b90:	46de      	mov	lr, fp
 8004b92:	46d4      	mov	ip, sl
 8004b94:	4691      	mov	r9, r2
 8004b96:	9308      	str	r3, [sp, #32]
 8004b98:	2500      	movs	r5, #0
 8004b9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004b9e:	f85b 3035 	ldr.w	r3, [fp, r5, lsl #3]
 8004ba2:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8004ba6:	109e      	asrs	r6, r3, #2
 8004ba8:	9b05      	ldr	r3, [sp, #20]
 8004baa:	1092      	asrs	r2, r2, #2
 8004bac:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8004bb0:	1991      	adds	r1, r2, r6
 8004bb2:	2700      	movs	r7, #0
 8004bb4:	1b92      	subs	r2, r2, r6
 8004bb6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004bba:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8004bbe:	fbc3 6702 	smlal	r6, r7, r3, r2
 8004bc2:	f84a 1035 	str.w	r1, [sl, r5, lsl #3]
 8004bc6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004bca:	f8de 1004 	ldr.w	r1, [lr, #4]
 8004bce:	1080      	asrs	r0, r0, #2
 8004bd0:	1089      	asrs	r1, r1, #2
 8004bd2:	ebc1 0800 	rsb	r8, r1, r0
 8004bd6:	9701      	str	r7, [sp, #4]
 8004bd8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004bdc:	2700      	movs	r7, #0
 8004bde:	fbc8 6703 	smlal	r6, r7, r8, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	fb82 2304 	smull	r2, r3, r2, r4
 8004bec:	9703      	str	r7, [sp, #12]
 8004bee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bf2:	1ab6      	subs	r6, r6, r2
 8004bf4:	eb67 0703 	sbc.w	r7, r7, r3
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004c00:	fbc4 6708 	smlal	r6, r7, r4, r8
 8004c04:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8004c08:	f147 0700 	adc.w	r7, r7, #0
 8004c0c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004c10:	f143 0300 	adc.w	r3, r3, #0
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4401      	add	r1, r0
 8004c18:	007a      	lsls	r2, r7, #1
 8004c1a:	f8cc 1004 	str.w	r1, [ip, #4]
 8004c1e:	f84b 2035 	str.w	r2, [fp, r5, lsl #3]
 8004c22:	f8ce 3004 	str.w	r3, [lr, #4]
 8004c26:	9b06      	ldr	r3, [sp, #24]
 8004c28:	3501      	adds	r5, #1
 8004c2a:	429d      	cmp	r5, r3
 8004c2c:	f109 0908 	add.w	r9, r9, #8
 8004c30:	f10c 0c08 	add.w	ip, ip, #8
 8004c34:	f10e 0e08 	add.w	lr, lr, #8
 8004c38:	d1b1      	bne.n	8004b9e <arm_cfft_radix4by2_q31+0x2a>
 8004c3a:	9e05      	ldr	r6, [sp, #20]
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	4629      	mov	r1, r5
 8004c40:	4632      	mov	r2, r6
 8004c42:	2302      	movs	r3, #2
 8004c44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004c46:	f000 f939 	bl	8004ebc <arm_radix4_butterfly_q31>
 8004c4a:	9b07      	ldr	r3, [sp, #28]
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004c52:	4632      	mov	r2, r6
 8004c54:	2302      	movs	r3, #2
 8004c56:	f000 f931 	bl	8004ebc <arm_radix4_butterfly_q31>
 8004c5a:	9b08      	ldr	r3, [sp, #32]
 8004c5c:	f10a 0a04 	add.w	sl, sl, #4
 8004c60:	449b      	add	fp, r3
 8004c62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004c66:	1d21      	adds	r1, r4, #4
 8004c68:	c90e      	ldmia	r1, {r1, r2, r3}
 8004c6a:	0040      	lsls	r0, r0, #1
 8004c6c:	0049      	lsls	r1, r1, #1
 8004c6e:	0052      	lsls	r2, r2, #1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	f84a 0c04 	str.w	r0, [sl, #-4]
 8004c76:	3410      	adds	r4, #16
 8004c78:	f844 1c0c 	str.w	r1, [r4, #-12]
 8004c7c:	f844 2c08 	str.w	r2, [r4, #-8]
 8004c80:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c84:	455c      	cmp	r4, fp
 8004c86:	f10a 0a10 	add.w	sl, sl, #16
 8004c8a:	d1ea      	bne.n	8004c62 <arm_cfft_radix4by2_q31+0xee>
 8004c8c:	b00b      	add	sp, #44	; 0x2c
 8004c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c92:	461c      	mov	r4, r3
 8004c94:	4619      	mov	r1, r3
 8004c96:	2302      	movs	r3, #2
 8004c98:	f000 f910 	bl	8004ebc <arm_radix4_butterfly_q31>
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	9b07      	ldr	r3, [sp, #28]
 8004ca0:	9a05      	ldr	r2, [sp, #20]
 8004ca2:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	b00b      	add	sp, #44	; 0x2c
 8004caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cae:	f000 b905 	b.w	8004ebc <arm_radix4_butterfly_q31>
 8004cb2:	bf00      	nop

08004cb4 <arm_cfft_radix4by2_inverse_q31>:
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	b08b      	sub	sp, #44	; 0x2c
 8004cbe:	9107      	str	r1, [sp, #28]
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	9205      	str	r2, [sp, #20]
 8004cc6:	9306      	str	r3, [sp, #24]
 8004cc8:	f000 8089 	beq.w	8004dde <arm_cfft_radix4by2_inverse_q31+0x12a>
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	eb00 0b03 	add.w	fp, r0, r3
 8004cd2:	46de      	mov	lr, fp
 8004cd4:	4684      	mov	ip, r0
 8004cd6:	9308      	str	r3, [sp, #32]
 8004cd8:	2500      	movs	r5, #0
 8004cda:	9009      	str	r0, [sp, #36]	; 0x24
 8004cdc:	f85b 2035 	ldr.w	r2, [fp, r5, lsl #3]
 8004ce0:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8004ce4:	9805      	ldr	r0, [sp, #20]
 8004ce6:	1096      	asrs	r6, r2, #2
 8004ce8:	f850 4035 	ldr.w	r4, [r0, r5, lsl #3]
 8004cec:	109b      	asrs	r3, r3, #2
 8004cee:	199a      	adds	r2, r3, r6
 8004cf0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004cf4:	1b9b      	subs	r3, r3, r6
 8004cf6:	f04f 0900 	mov.w	r9, #0
 8004cfa:	6848      	ldr	r0, [r1, #4]
 8004cfc:	fbc4 8903 	smlal	r8, r9, r4, r3
 8004d00:	f84a 2035 	str.w	r2, [sl, r5, lsl #3]
 8004d04:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8004d08:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004d0c:	10be      	asrs	r6, r7, #2
 8004d0e:	1092      	asrs	r2, r2, #2
 8004d10:	9604      	str	r6, [sp, #16]
 8004d12:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d16:	1ab6      	subs	r6, r6, r2
 8004d18:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004d1c:	f04f 0900 	mov.w	r9, #0
 8004d20:	fbc6 8904 	smlal	r8, r9, r6, r4
 8004d24:	fb86 6700 	smull	r6, r7, r6, r0
 8004d28:	2400      	movs	r4, #0
 8004d2a:	9400      	str	r4, [sp, #0]
 8004d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d30:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004d34:	f8cd 8008 	str.w	r8, [sp, #8]
 8004d38:	ebb8 0806 	subs.w	r8, r8, r6
 8004d3c:	eb69 0907 	sbc.w	r9, r9, r7
 8004d40:	4646      	mov	r6, r8
 8004d42:	464f      	mov	r7, r9
 8004d44:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004d48:	fbc0 8903 	smlal	r8, r9, r0, r3
 8004d4c:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8004d50:	9b04      	ldr	r3, [sp, #16]
 8004d52:	f147 0700 	adc.w	r7, r7, #0
 8004d56:	441a      	add	r2, r3
 8004d58:	007b      	lsls	r3, r7, #1
 8004d5a:	f8cc 2004 	str.w	r2, [ip, #4]
 8004d5e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004d62:	f84b 3035 	str.w	r3, [fp, r5, lsl #3]
 8004d66:	9b06      	ldr	r3, [sp, #24]
 8004d68:	f149 0900 	adc.w	r9, r9, #0
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8004d72:	429d      	cmp	r5, r3
 8004d74:	f8ce 2004 	str.w	r2, [lr, #4]
 8004d78:	f101 0108 	add.w	r1, r1, #8
 8004d7c:	f10c 0c08 	add.w	ip, ip, #8
 8004d80:	f10e 0e08 	add.w	lr, lr, #8
 8004d84:	d1aa      	bne.n	8004cdc <arm_cfft_radix4by2_inverse_q31+0x28>
 8004d86:	9e05      	ldr	r6, [sp, #20]
 8004d88:	4650      	mov	r0, sl
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	2302      	movs	r3, #2
 8004d90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004d92:	f000 faa1 	bl	80052d8 <arm_radix4_butterfly_inverse_q31>
 8004d96:	9b07      	ldr	r3, [sp, #28]
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004d9e:	4632      	mov	r2, r6
 8004da0:	2302      	movs	r3, #2
 8004da2:	f000 fa99 	bl	80052d8 <arm_radix4_butterfly_inverse_q31>
 8004da6:	9b08      	ldr	r3, [sp, #32]
 8004da8:	f10a 0a04 	add.w	sl, sl, #4
 8004dac:	449b      	add	fp, r3
 8004dae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004db2:	1d21      	adds	r1, r4, #4
 8004db4:	c90e      	ldmia	r1, {r1, r2, r3}
 8004db6:	0040      	lsls	r0, r0, #1
 8004db8:	0049      	lsls	r1, r1, #1
 8004dba:	0052      	lsls	r2, r2, #1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	f84a 0c04 	str.w	r0, [sl, #-4]
 8004dc2:	3410      	adds	r4, #16
 8004dc4:	f844 1c0c 	str.w	r1, [r4, #-12]
 8004dc8:	f844 2c08 	str.w	r2, [r4, #-8]
 8004dcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8004dd0:	455c      	cmp	r4, fp
 8004dd2:	f10a 0a10 	add.w	sl, sl, #16
 8004dd6:	d1ea      	bne.n	8004dae <arm_cfft_radix4by2_inverse_q31+0xfa>
 8004dd8:	b00b      	add	sp, #44	; 0x2c
 8004dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dde:	461c      	mov	r4, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	2302      	movs	r3, #2
 8004de4:	f000 fa78 	bl	80052d8 <arm_radix4_butterfly_inverse_q31>
 8004de8:	4621      	mov	r1, r4
 8004dea:	9b07      	ldr	r3, [sp, #28]
 8004dec:	9a05      	ldr	r2, [sp, #20]
 8004dee:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8004df2:	2302      	movs	r3, #2
 8004df4:	b00b      	add	sp, #44	; 0x2c
 8004df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfa:	f000 ba6d 	b.w	80052d8 <arm_radix4_butterfly_inverse_q31>
 8004dfe:	bf00      	nop

08004e00 <arm_cfft_q31>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	2a01      	cmp	r2, #1
 8004e04:	460d      	mov	r5, r1
 8004e06:	4604      	mov	r4, r0
 8004e08:	461e      	mov	r6, r3
 8004e0a:	8801      	ldrh	r1, [r0, #0]
 8004e0c:	d024      	beq.n	8004e58 <arm_cfft_q31+0x58>
 8004e0e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004e12:	d013      	beq.n	8004e3c <arm_cfft_q31+0x3c>
 8004e14:	d808      	bhi.n	8004e28 <arm_cfft_q31+0x28>
 8004e16:	2920      	cmp	r1, #32
 8004e18:	d031      	beq.n	8004e7e <arm_cfft_q31+0x7e>
 8004e1a:	d945      	bls.n	8004ea8 <arm_cfft_q31+0xa8>
 8004e1c:	2940      	cmp	r1, #64	; 0x40
 8004e1e:	d00d      	beq.n	8004e3c <arm_cfft_q31+0x3c>
 8004e20:	2980      	cmp	r1, #128	; 0x80
 8004e22:	d02c      	beq.n	8004e7e <arm_cfft_q31+0x7e>
 8004e24:	b98e      	cbnz	r6, 8004e4a <arm_cfft_q31+0x4a>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e2c:	d006      	beq.n	8004e3c <arm_cfft_q31+0x3c>
 8004e2e:	d923      	bls.n	8004e78 <arm_cfft_q31+0x78>
 8004e30:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004e34:	d023      	beq.n	8004e7e <arm_cfft_q31+0x7e>
 8004e36:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004e3a:	d1f3      	bne.n	8004e24 <arm_cfft_q31+0x24>
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	6862      	ldr	r2, [r4, #4]
 8004e40:	2301      	movs	r3, #1
 8004e42:	f000 f83b 	bl	8004ebc <arm_radix4_butterfly_q31>
 8004e46:	2e00      	cmp	r6, #0
 8004e48:	d0ed      	beq.n	8004e26 <arm_cfft_q31+0x26>
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	89a1      	ldrh	r1, [r4, #12]
 8004e4e:	68a2      	ldr	r2, [r4, #8]
 8004e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e54:	f7fb b97c 	b.w	8000150 <arm_bitreversal_32>
 8004e58:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004e5c:	d01e      	beq.n	8004e9c <arm_cfft_q31+0x9c>
 8004e5e:	d813      	bhi.n	8004e88 <arm_cfft_q31+0x88>
 8004e60:	2920      	cmp	r1, #32
 8004e62:	d004      	beq.n	8004e6e <arm_cfft_q31+0x6e>
 8004e64:	d927      	bls.n	8004eb6 <arm_cfft_q31+0xb6>
 8004e66:	2940      	cmp	r1, #64	; 0x40
 8004e68:	d018      	beq.n	8004e9c <arm_cfft_q31+0x9c>
 8004e6a:	2980      	cmp	r1, #128	; 0x80
 8004e6c:	d1da      	bne.n	8004e24 <arm_cfft_q31+0x24>
 8004e6e:	4628      	mov	r0, r5
 8004e70:	6862      	ldr	r2, [r4, #4]
 8004e72:	f7ff ff1f 	bl	8004cb4 <arm_cfft_radix4by2_inverse_q31>
 8004e76:	e7d5      	b.n	8004e24 <arm_cfft_q31+0x24>
 8004e78:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004e7c:	d1d2      	bne.n	8004e24 <arm_cfft_q31+0x24>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	6862      	ldr	r2, [r4, #4]
 8004e82:	f7ff fe77 	bl	8004b74 <arm_cfft_radix4by2_q31>
 8004e86:	e7cd      	b.n	8004e24 <arm_cfft_q31+0x24>
 8004e88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e8c:	d006      	beq.n	8004e9c <arm_cfft_q31+0x9c>
 8004e8e:	d90e      	bls.n	8004eae <arm_cfft_q31+0xae>
 8004e90:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004e94:	d0eb      	beq.n	8004e6e <arm_cfft_q31+0x6e>
 8004e96:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004e9a:	d1c3      	bne.n	8004e24 <arm_cfft_q31+0x24>
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	6862      	ldr	r2, [r4, #4]
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f000 fa19 	bl	80052d8 <arm_radix4_butterfly_inverse_q31>
 8004ea6:	e7bd      	b.n	8004e24 <arm_cfft_q31+0x24>
 8004ea8:	2910      	cmp	r1, #16
 8004eaa:	d1bb      	bne.n	8004e24 <arm_cfft_q31+0x24>
 8004eac:	e7c6      	b.n	8004e3c <arm_cfft_q31+0x3c>
 8004eae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004eb2:	d0dc      	beq.n	8004e6e <arm_cfft_q31+0x6e>
 8004eb4:	e7b6      	b.n	8004e24 <arm_cfft_q31+0x24>
 8004eb6:	2910      	cmp	r1, #16
 8004eb8:	d1b4      	bne.n	8004e24 <arm_cfft_q31+0x24>
 8004eba:	e7ef      	b.n	8004e9c <arm_cfft_q31+0x9c>

08004ebc <arm_radix4_butterfly_q31>:
 8004ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	461e      	mov	r6, r3
 8004ec2:	b0a1      	sub	sp, #132	; 0x84
 8004ec4:	910f      	str	r1, [sp, #60]	; 0x3c
 8004ec6:	0889      	lsrs	r1, r1, #2
 8004ec8:	930d      	str	r3, [sp, #52]	; 0x34
 8004eca:	00cb      	lsls	r3, r1, #3
 8004ecc:	4605      	mov	r5, r0
 8004ece:	901e      	str	r0, [sp, #120]	; 0x78
 8004ed0:	4418      	add	r0, r3
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ed6:	911f      	str	r1, [sp, #124]	; 0x7c
 8004ed8:	9106      	str	r1, [sp, #24]
 8004eda:	9202      	str	r2, [sp, #8]
 8004edc:	9200      	str	r2, [sp, #0]
 8004ede:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004ee2:	18c2      	adds	r2, r0, r3
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	eb02 0c03 	add.w	ip, r2, r3
 8004eea:	00cb      	lsls	r3, r1, #3
 8004eec:	930a      	str	r3, [sp, #40]	; 0x28
 8004eee:	0133      	lsls	r3, r6, #4
 8004ef0:	f102 0b08 	add.w	fp, r2, #8
 8004ef4:	9308      	str	r3, [sp, #32]
 8004ef6:	00f3      	lsls	r3, r6, #3
 8004ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8004efa:	465b      	mov	r3, fp
 8004efc:	f105 0a08 	add.w	sl, r5, #8
 8004f00:	46d3      	mov	fp, sl
 8004f02:	469a      	mov	sl, r3
 8004f04:	f100 0908 	add.w	r9, r0, #8
 8004f08:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f0c:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8004f10:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 8004f14:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 8004f18:	f859 1c08 	ldr.w	r1, [r9, #-8]
 8004f1c:	ea4f 1820 	mov.w	r8, r0, asr #4
 8004f20:	1112      	asrs	r2, r2, #4
 8004f22:	111b      	asrs	r3, r3, #4
 8004f24:	eb08 0402 	add.w	r4, r8, r2
 8004f28:	eb03 1521 	add.w	r5, r3, r1, asr #4
 8004f2c:	1963      	adds	r3, r4, r5
 8004f2e:	9204      	str	r2, [sp, #16]
 8004f30:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8004f34:	f84b 3c08 	str.w	r3, [fp, #-8]
 8004f38:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8004f3c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8004f40:	f859 1c04 	ldr.w	r1, [r9, #-4]
 8004f44:	ea4f 1e22 	mov.w	lr, r2, asr #4
 8004f48:	1106      	asrs	r6, r0, #4
 8004f4a:	111b      	asrs	r3, r3, #4
 8004f4c:	9607      	str	r6, [sp, #28]
 8004f4e:	eb03 1121 	add.w	r1, r3, r1, asr #4
 8004f52:	4476      	add	r6, lr
 8004f54:	1873      	adds	r3, r6, r1
 8004f56:	f84b 3c04 	str.w	r3, [fp, #-4]
 8004f5a:	9b01      	ldr	r3, [sp, #4]
 8004f5c:	1a71      	subs	r1, r6, r1
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	fb81 6702 	smull	r6, r7, r1, r2
 8004f66:	463e      	mov	r6, r7
 8004f68:	1b63      	subs	r3, r4, r5
 8004f6a:	fb83 4500 	smull	r4, r5, r3, r0
 8004f6e:	fb80 0101 	smull	r0, r1, r0, r1
 8004f72:	fb83 2302 	smull	r2, r3, r3, r2
 8004f76:	442e      	add	r6, r5
 8004f78:	1acd      	subs	r5, r1, r3
 8004f7a:	e91c 0006 	ldmdb	ip, {r1, r2}
 8004f7e:	1110      	asrs	r0, r2, #4
 8004f80:	9a04      	ldr	r2, [sp, #16]
 8004f82:	e919 0018 	ldmdb	r9, {r3, r4}
 8004f86:	ebc2 0208 	rsb	r2, r2, r8
 8004f8a:	0076      	lsls	r6, r6, #1
 8004f8c:	ebc0 1824 	rsb	r8, r0, r4, asr #4
 8004f90:	006d      	lsls	r5, r5, #1
 8004f92:	9800      	ldr	r0, [sp, #0]
 8004f94:	f849 6c08 	str.w	r6, [r9, #-8]
 8004f98:	f849 5c04 	str.w	r5, [r9, #-4]
 8004f9c:	6805      	ldr	r5, [r0, #0]
 8004f9e:	9e07      	ldr	r6, [sp, #28]
 8004fa0:	1109      	asrs	r1, r1, #4
 8004fa2:	ebc1 1323 	rsb	r3, r1, r3, asr #4
 8004fa6:	6841      	ldr	r1, [r0, #4]
 8004fa8:	eb02 0008 	add.w	r0, r2, r8
 8004fac:	ebce 0e06 	rsb	lr, lr, r6
 8004fb0:	fb80 6705 	smull	r6, r7, r0, r5
 8004fb4:	ebc3 040e 	rsb	r4, r3, lr
 8004fb8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fbc:	fb84 6701 	smull	r6, r7, r4, r1
 8004fc0:	463e      	mov	r6, r7
 8004fc2:	fb85 4504 	smull	r4, r5, r5, r4
 8004fc6:	fb80 0101 	smull	r0, r1, r0, r1
 8004fca:	9f05      	ldr	r7, [sp, #20]
 8004fcc:	1a69      	subs	r1, r5, r1
 8004fce:	443e      	add	r6, r7
 8004fd0:	0070      	lsls	r0, r6, #1
 8004fd2:	0049      	lsls	r1, r1, #1
 8004fd4:	e90a 0003 	stmdb	sl, {r0, r1}
 8004fd8:	9f02      	ldr	r7, [sp, #8]
 8004fda:	ebc8 0202 	rsb	r2, r8, r2
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	687e      	ldr	r6, [r7, #4]
 8004fe2:	fb82 4501 	smull	r4, r5, r2, r1
 8004fe6:	4473      	add	r3, lr
 8004fe8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004fec:	fb81 0103 	smull	r0, r1, r1, r3
 8004ff0:	fb83 4506 	smull	r4, r5, r3, r6
 8004ff4:	fb82 2306 	smull	r2, r3, r2, r6
 8004ff8:	9e08      	ldr	r6, [sp, #32]
 8004ffa:	1acb      	subs	r3, r1, r3
 8004ffc:	9901      	ldr	r1, [sp, #4]
 8004ffe:	9c03      	ldr	r4, [sp, #12]
 8005000:	4431      	add	r1, r6
 8005002:	9800      	ldr	r0, [sp, #0]
 8005004:	9101      	str	r1, [sp, #4]
 8005006:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005008:	442c      	add	r4, r5
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	1841      	adds	r1, r0, r1
 800500e:	0062      	lsls	r2, r4, #1
 8005010:	e90c 000c 	stmdb	ip, {r2, r3}
 8005014:	9100      	str	r1, [sp, #0]
 8005016:	9b06      	ldr	r3, [sp, #24]
 8005018:	990a      	ldr	r1, [sp, #40]	; 0x28
 800501a:	3b01      	subs	r3, #1
 800501c:	4439      	add	r1, r7
 800501e:	f10b 0b08 	add.w	fp, fp, #8
 8005022:	f109 0908 	add.w	r9, r9, #8
 8005026:	f10a 0a08 	add.w	sl, sl, #8
 800502a:	9102      	str	r1, [sp, #8]
 800502c:	f10c 0c08 	add.w	ip, ip, #8
 8005030:	9306      	str	r3, [sp, #24]
 8005032:	f47f af6b 	bne.w	8004f0c <arm_radix4_butterfly_q31+0x50>
 8005036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	9316      	str	r3, [sp, #88]	; 0x58
 800503c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800503e:	2b04      	cmp	r3, #4
 8005040:	f240 80f9 	bls.w	8005236 <arm_radix4_butterfly_q31+0x37a>
 8005044:	931c      	str	r3, [sp, #112]	; 0x70
 8005046:	930e      	str	r3, [sp, #56]	; 0x38
 8005048:	2300      	movs	r3, #0
 800504a:	9312      	str	r3, [sp, #72]	; 0x48
 800504c:	9315      	str	r3, [sp, #84]	; 0x54
 800504e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005050:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005052:	9314      	str	r3, [sp, #80]	; 0x50
 8005054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005056:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800505a:	9313      	str	r3, [sp, #76]	; 0x4c
 800505c:	0883      	lsrs	r3, r0, #2
 800505e:	4619      	mov	r1, r3
 8005060:	931d      	str	r3, [sp, #116]	; 0x74
 8005062:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005064:	1e4a      	subs	r2, r1, #1
 8005066:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800506a:	9218      	str	r2, [sp, #96]	; 0x60
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	00ca      	lsls	r2, r1, #3
 8005070:	9219      	str	r2, [sp, #100]	; 0x64
 8005072:	931a      	str	r3, [sp, #104]	; 0x68
 8005074:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8005078:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800507a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800507c:	4622      	mov	r2, r4
 800507e:	4618      	mov	r0, r3
 8005080:	00d9      	lsls	r1, r3, #3
 8005082:	440a      	add	r2, r1
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	4411      	add	r1, r2
 8005088:	58e3      	ldr	r3, [r4, r3]
 800508a:	6849      	ldr	r1, [r1, #4]
 800508c:	6852      	ldr	r2, [r2, #4]
 800508e:	9310      	str	r3, [sp, #64]	; 0x40
 8005090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005092:	9104      	str	r1, [sp, #16]
 8005094:	9202      	str	r2, [sp, #8]
 8005096:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005098:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 800509c:	18c3      	adds	r3, r0, r3
 800509e:	9206      	str	r2, [sp, #24]
 80050a0:	9315      	str	r3, [sp, #84]	; 0x54
 80050a2:	680a      	ldr	r2, [r1, #0]
 80050a4:	684b      	ldr	r3, [r1, #4]
 80050a6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80050a8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050aa:	9207      	str	r2, [sp, #28]
 80050ac:	9311      	str	r3, [sp, #68]	; 0x44
 80050ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050b2:	eb07 0a05 	add.w	sl, r7, r5
 80050b6:	eb0a 0b05 	add.w	fp, sl, r5
 80050ba:	4293      	cmp	r3, r2
 80050bc:	eb0b 0e05 	add.w	lr, fp, r5
 80050c0:	f240 80a0 	bls.w	8005204 <arm_radix4_butterfly_q31+0x348>
 80050c4:	4613      	mov	r3, r2
 80050c6:	46d8      	mov	r8, fp
 80050c8:	46d3      	mov	fp, sl
 80050ca:	46ba      	mov	sl, r7
 80050cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ce:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80050d2:	4413      	add	r3, r2
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	9b00      	ldr	r3, [sp, #0]
 80050d8:	f8da c000 	ldr.w	ip, [sl]
 80050dc:	f8d8 5000 	ldr.w	r5, [r8]
 80050e0:	f8db 2000 	ldr.w	r2, [fp]
 80050e4:	930c      	str	r3, [sp, #48]	; 0x30
 80050e6:	f8de 3000 	ldr.w	r3, [lr]
 80050ea:	eb0c 0705 	add.w	r7, ip, r5
 80050ee:	441a      	add	r2, r3
 80050f0:	18b9      	adds	r1, r7, r2
 80050f2:	1089      	asrs	r1, r1, #2
 80050f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80050f8:	f8ca 1000 	str.w	r1, [sl]
 80050fc:	f8db 4004 	ldr.w	r4, [fp, #4]
 8005100:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005104:	f8de 0004 	ldr.w	r0, [lr, #4]
 8005108:	18ce      	adds	r6, r1, r3
 800510a:	4420      	add	r0, r4
 800510c:	1834      	adds	r4, r6, r0
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	f8ca 4004 	str.w	r4, [sl, #4]
 8005114:	1ac9      	subs	r1, r1, r3
 8005116:	f8db 3004 	ldr.w	r3, [fp, #4]
 800511a:	ebc5 050c 	rsb	r5, r5, ip
 800511e:	469c      	mov	ip, r3
 8005120:	f8de 3004 	ldr.w	r3, [lr, #4]
 8005124:	f8de 4000 	ldr.w	r4, [lr]
 8005128:	ebc3 0c0c 	rsb	ip, r3, ip
 800512c:	f8db 3000 	ldr.w	r3, [fp]
 8005130:	1aba      	subs	r2, r7, r2
 8005132:	1b1b      	subs	r3, r3, r4
 8005134:	eb05 040c 	add.w	r4, r5, ip
 8005138:	ebcc 0c05 	rsb	ip, ip, r5
 800513c:	1acd      	subs	r5, r1, r3
 800513e:	440b      	add	r3, r1
 8005140:	9906      	ldr	r1, [sp, #24]
 8005142:	1a30      	subs	r0, r6, r0
 8005144:	fb84 6701 	smull	r6, r7, r4, r1
 8005148:	9902      	ldr	r1, [sp, #8]
 800514a:	9001      	str	r0, [sp, #4]
 800514c:	fb85 0101 	smull	r0, r1, r5, r1
 8005150:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005154:	9801      	ldr	r0, [sp, #4]
 8005156:	9904      	ldr	r1, [sp, #16]
 8005158:	44ca      	add	sl, r9
 800515a:	fb80 0101 	smull	r0, r1, r0, r1
 800515e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005164:	19cf      	adds	r7, r1, r7
 8005166:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005168:	970d      	str	r7, [sp, #52]	; 0x34
 800516a:	4608      	mov	r0, r1
 800516c:	fb82 6701 	smull	r6, r7, r2, r1
 8005170:	9901      	ldr	r1, [sp, #4]
 8005172:	fb81 0100 	smull	r0, r1, r1, r0
 8005176:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800517a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800517c:	19c6      	adds	r6, r0, r7
 800517e:	9601      	str	r6, [sp, #4]
 8005180:	9e04      	ldr	r6, [sp, #16]
 8005182:	4630      	mov	r0, r6
 8005184:	fb82 6700 	smull	r6, r7, r2, r0
 8005188:	9a06      	ldr	r2, [sp, #24]
 800518a:	fb85 0102 	smull	r0, r1, r5, r2
 800518e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005192:	9d02      	ldr	r5, [sp, #8]
 8005194:	9907      	ldr	r1, [sp, #28]
 8005196:	fb84 4505 	smull	r4, r5, r4, r5
 800519a:	fb8c 0101 	smull	r0, r1, ip, r1
 800519e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80051a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80051a8:	9c07      	ldr	r4, [sp, #28]
 80051aa:	1b40      	subs	r0, r0, r5
 80051ac:	1bd2      	subs	r2, r2, r7
 80051ae:	fb83 4504 	smull	r4, r5, r3, r4
 80051b2:	fb83 6701 	smull	r6, r7, r3, r1
 80051b6:	9008      	str	r0, [sp, #32]
 80051b8:	fb8c 0101 	smull	r0, r1, ip, r1
 80051bc:	9e01      	ldr	r6, [sp, #4]
 80051be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051c0:	1a69      	subs	r1, r5, r1
 80051c2:	1052      	asrs	r2, r2, #1
 80051c4:	1075      	asrs	r5, r6, #1
 80051c6:	f8cb 5000 	str.w	r5, [fp]
 80051ca:	f8cb 2004 	str.w	r2, [fp, #4]
 80051ce:	443b      	add	r3, r7
 80051d0:	9a00      	ldr	r2, [sp, #0]
 80051d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80051d4:	9808      	ldr	r0, [sp, #32]
 80051d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80051d8:	105b      	asrs	r3, r3, #1
 80051da:	442a      	add	r2, r5
 80051dc:	107c      	asrs	r4, r7, #1
 80051de:	1040      	asrs	r0, r0, #1
 80051e0:	f8c8 4000 	str.w	r4, [r8]
 80051e4:	f8c8 0004 	str.w	r0, [r8, #4]
 80051e8:	9200      	str	r2, [sp, #0]
 80051ea:	f8ce 3000 	str.w	r3, [lr]
 80051ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051f2:	1049      	asrs	r1, r1, #1
 80051f4:	429a      	cmp	r2, r3
 80051f6:	f8ce 1004 	str.w	r1, [lr, #4]
 80051fa:	44cb      	add	fp, r9
 80051fc:	44c8      	add	r8, r9
 80051fe:	44ce      	add	lr, r9
 8005200:	f63f af69 	bhi.w	80050d6 <arm_radix4_butterfly_q31+0x21a>
 8005204:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005206:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800520a:	440a      	add	r2, r1
 800520c:	9213      	str	r2, [sp, #76]	; 0x4c
 800520e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005210:	3301      	adds	r3, #1
 8005212:	3208      	adds	r2, #8
 8005214:	9214      	str	r2, [sp, #80]	; 0x50
 8005216:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005218:	9312      	str	r3, [sp, #72]	; 0x48
 800521a:	4293      	cmp	r3, r2
 800521c:	f67f af2c 	bls.w	8005078 <arm_radix4_butterfly_q31+0x1bc>
 8005220:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005222:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	9216      	str	r2, [sp, #88]	; 0x58
 800522a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800522c:	2b04      	cmp	r3, #4
 800522e:	931c      	str	r3, [sp, #112]	; 0x70
 8005230:	920e      	str	r2, [sp, #56]	; 0x38
 8005232:	f63f af09 	bhi.w	8005048 <arm_radix4_butterfly_q31+0x18c>
 8005236:	981e      	ldr	r0, [sp, #120]	; 0x78
 8005238:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 800523c:	3020      	adds	r0, #32
 800523e:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8005242:	f850 3c18 	ldr.w	r3, [r0, #-24]
 8005246:	f850 1c14 	ldr.w	r1, [r0, #-20]
 800524a:	f850 8c1c 	ldr.w	r8, [r0, #-28]
 800524e:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8005252:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8005256:	18d7      	adds	r7, r2, r3
 8005258:	1ad6      	subs	r6, r2, r3
 800525a:	1855      	adds	r5, r2, r1
 800525c:	1a52      	subs	r2, r2, r1
 800525e:	f850 ec08 	ldr.w	lr, [r0, #-8]
 8005262:	f850 bc04 	ldr.w	fp, [r0, #-4]
 8005266:	eb08 0401 	add.w	r4, r8, r1
 800526a:	4457      	add	r7, sl
 800526c:	ebc1 0108 	rsb	r1, r1, r8
 8005270:	4456      	add	r6, sl
 8005272:	ebca 0505 	rsb	r5, sl, r5
 8005276:	ebca 0202 	rsb	r2, sl, r2
 800527a:	ebc3 0a08 	rsb	sl, r3, r8
 800527e:	4443      	add	r3, r8
 8005280:	4461      	add	r1, ip
 8005282:	4464      	add	r4, ip
 8005284:	ebcc 080a 	rsb	r8, ip, sl
 8005288:	ebcc 0303 	rsb	r3, ip, r3
 800528c:	ebcb 0505 	rsb	r5, fp, r5
 8005290:	445a      	add	r2, fp
 8005292:	445c      	add	r4, fp
 8005294:	4477      	add	r7, lr
 8005296:	ebcb 0b01 	rsb	fp, fp, r1
 800529a:	ebce 0606 	rsb	r6, lr, r6
 800529e:	eb08 010e 	add.w	r1, r8, lr
 80052a2:	ebce 0303 	rsb	r3, lr, r3
 80052a6:	f1b9 0901 	subs.w	r9, r9, #1
 80052aa:	f840 7c20 	str.w	r7, [r0, #-32]
 80052ae:	f840 6c18 	str.w	r6, [r0, #-24]
 80052b2:	f840 5c10 	str.w	r5, [r0, #-16]
 80052b6:	f840 2c08 	str.w	r2, [r0, #-8]
 80052ba:	f840 4c1c 	str.w	r4, [r0, #-28]
 80052be:	f840 bc14 	str.w	fp, [r0, #-20]
 80052c2:	f840 1c0c 	str.w	r1, [r0, #-12]
 80052c6:	f840 3c04 	str.w	r3, [r0, #-4]
 80052ca:	f100 0020 	add.w	r0, r0, #32
 80052ce:	d1b6      	bne.n	800523e <arm_radix4_butterfly_q31+0x382>
 80052d0:	b021      	add	sp, #132	; 0x84
 80052d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d6:	bf00      	nop

080052d8 <arm_radix4_butterfly_inverse_q31>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	4605      	mov	r5, r0
 80052de:	4617      	mov	r7, r2
 80052e0:	b0a1      	sub	sp, #132	; 0x84
 80052e2:	461e      	mov	r6, r3
 80052e4:	9111      	str	r1, [sp, #68]	; 0x44
 80052e6:	0889      	lsrs	r1, r1, #2
 80052e8:	930c      	str	r3, [sp, #48]	; 0x30
 80052ea:	00cb      	lsls	r3, r1, #3
 80052ec:	901e      	str	r0, [sp, #120]	; 0x78
 80052ee:	4418      	add	r0, r3
 80052f0:	9218      	str	r2, [sp, #96]	; 0x60
 80052f2:	4694      	mov	ip, r2
 80052f4:	18c2      	adds	r2, r0, r3
 80052f6:	3308      	adds	r3, #8
 80052f8:	eb02 0b03 	add.w	fp, r2, r3
 80052fc:	f102 0908 	add.w	r9, r2, #8
 8005300:	f105 0a08 	add.w	sl, r5, #8
 8005304:	46de      	mov	lr, fp
 8005306:	46d3      	mov	fp, sl
 8005308:	46ca      	mov	sl, r9
 800530a:	46b9      	mov	r9, r7
 800530c:	911f      	str	r1, [sp, #124]	; 0x7c
 800530e:	9102      	str	r1, [sp, #8]
 8005310:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8005314:	00cb      	lsls	r3, r1, #3
 8005316:	930b      	str	r3, [sp, #44]	; 0x2c
 8005318:	0133      	lsls	r3, r6, #4
 800531a:	930a      	str	r3, [sp, #40]	; 0x28
 800531c:	00f3      	lsls	r3, r6, #3
 800531e:	f100 0808 	add.w	r8, r0, #8
 8005322:	9309      	str	r3, [sp, #36]	; 0x24
 8005324:	9701      	str	r7, [sp, #4]
 8005326:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 800532a:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 800532e:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8005332:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005336:	1100      	asrs	r0, r0, #4
 8005338:	1109      	asrs	r1, r1, #4
 800533a:	111b      	asrs	r3, r3, #4
 800533c:	1846      	adds	r6, r0, r1
 800533e:	eb03 1722 	add.w	r7, r3, r2, asr #4
 8005342:	19f3      	adds	r3, r6, r7
 8005344:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8005348:	f84b 3c08 	str.w	r3, [fp, #-8]
 800534c:	9108      	str	r1, [sp, #32]
 800534e:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8005352:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8005356:	f858 4c04 	ldr.w	r4, [r8, #-4]
 800535a:	111b      	asrs	r3, r3, #4
 800535c:	1112      	asrs	r2, r2, #4
 800535e:	1109      	asrs	r1, r1, #4
 8005360:	9003      	str	r0, [sp, #12]
 8005362:	eb01 1424 	add.w	r4, r1, r4, asr #4
 8005366:	1898      	adds	r0, r3, r2
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	1901      	adds	r1, r0, r4
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	f84b 1c04 	str.w	r1, [fp, #-4]
 8005372:	6859      	ldr	r1, [r3, #4]
 8005374:	681d      	ldr	r5, [r3, #0]
 8005376:	460b      	mov	r3, r1
 8005378:	1bf1      	subs	r1, r6, r7
 800537a:	fb81 6705 	smull	r6, r7, r1, r5
 800537e:	1b04      	subs	r4, r0, r4
 8005380:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005384:	fb81 0103 	smull	r0, r1, r1, r3
 8005388:	fb84 6703 	smull	r6, r7, r4, r3
 800538c:	fb85 4504 	smull	r4, r5, r5, r4
 8005390:	9b07      	ldr	r3, [sp, #28]
 8005392:	194e      	adds	r6, r1, r5
 8005394:	1bdf      	subs	r7, r3, r7
 8005396:	007f      	lsls	r7, r7, #1
 8005398:	0076      	lsls	r6, r6, #1
 800539a:	e91e 0003 	ldmdb	lr, {r0, r1}
 800539e:	f858 5c08 	ldr.w	r5, [r8, #-8]
 80053a2:	f858 4c04 	ldr.w	r4, [r8, #-4]
 80053a6:	f848 7c08 	str.w	r7, [r8, #-8]
 80053aa:	f848 6c04 	str.w	r6, [r8, #-4]
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	9e03      	ldr	r6, [sp, #12]
 80053b2:	9f08      	ldr	r7, [sp, #32]
 80053b4:	1109      	asrs	r1, r1, #4
 80053b6:	1bf7      	subs	r7, r6, r7
 80053b8:	1a9a      	subs	r2, r3, r2
 80053ba:	1100      	asrs	r0, r0, #4
 80053bc:	ebc1 1324 	rsb	r3, r1, r4, asr #4
 80053c0:	ebc0 1625 	rsb	r6, r0, r5, asr #4
 80053c4:	1afd      	subs	r5, r7, r3
 80053c6:	e899 0011 	ldmia.w	r9, {r0, r4}
 80053ca:	1991      	adds	r1, r2, r6
 80053cc:	9308      	str	r3, [sp, #32]
 80053ce:	9203      	str	r2, [sp, #12]
 80053d0:	fb85 2300 	smull	r2, r3, r5, r0
 80053d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053d8:	fb81 2304 	smull	r2, r3, r1, r4
 80053dc:	fb85 4504 	smull	r4, r5, r5, r4
 80053e0:	fb80 0101 	smull	r0, r1, r0, r1
 80053e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80053e8:	9c05      	ldr	r4, [sp, #20]
 80053ea:	f10b 0b08 	add.w	fp, fp, #8
 80053ee:	1ae2      	subs	r2, r4, r3
 80053f0:	9c07      	ldr	r4, [sp, #28]
 80053f2:	0050      	lsls	r0, r2, #1
 80053f4:	4421      	add	r1, r4
 80053f6:	0049      	lsls	r1, r1, #1
 80053f8:	e90a 0003 	stmdb	sl, {r0, r1}
 80053fc:	9b08      	ldr	r3, [sp, #32]
 80053fe:	9a03      	ldr	r2, [sp, #12]
 8005400:	f8dc 1000 	ldr.w	r1, [ip]
 8005404:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005408:	1b92      	subs	r2, r2, r6
 800540a:	443b      	add	r3, r7
 800540c:	fb83 6701 	smull	r6, r7, r3, r1
 8005410:	fb82 4500 	smull	r4, r5, r2, r0
 8005414:	fb81 0102 	smull	r0, r1, r1, r2
 8005418:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800541c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800541e:	fb83 2302 	smull	r2, r3, r3, r2
 8005422:	440b      	add	r3, r1
 8005424:	9901      	ldr	r1, [sp, #4]
 8005426:	1b7c      	subs	r4, r7, r5
 8005428:	4401      	add	r1, r0
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	0062      	lsls	r2, r4, #1
 800542e:	9101      	str	r1, [sp, #4]
 8005430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005432:	e90e 000c 	stmdb	lr, {r2, r3}
 8005436:	9b02      	ldr	r3, [sp, #8]
 8005438:	4489      	add	r9, r1
 800543a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800543c:	3b01      	subs	r3, #1
 800543e:	f108 0808 	add.w	r8, r8, #8
 8005442:	f10a 0a08 	add.w	sl, sl, #8
 8005446:	448c      	add	ip, r1
 8005448:	f10e 0e08 	add.w	lr, lr, #8
 800544c:	9302      	str	r3, [sp, #8]
 800544e:	f47f af6a 	bne.w	8005326 <arm_radix4_butterfly_inverse_q31+0x4e>
 8005452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	9317      	str	r3, [sp, #92]	; 0x5c
 8005458:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800545a:	2b04      	cmp	r3, #4
 800545c:	f240 80ed 	bls.w	800563a <arm_radix4_butterfly_inverse_q31+0x362>
 8005460:	931c      	str	r3, [sp, #112]	; 0x70
 8005462:	9310      	str	r3, [sp, #64]	; 0x40
 8005464:	2300      	movs	r3, #0
 8005466:	9313      	str	r3, [sp, #76]	; 0x4c
 8005468:	9316      	str	r3, [sp, #88]	; 0x58
 800546a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800546c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800546e:	9315      	str	r3, [sp, #84]	; 0x54
 8005470:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005472:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 8005476:	9314      	str	r3, [sp, #80]	; 0x50
 8005478:	0883      	lsrs	r3, r0, #2
 800547a:	4619      	mov	r1, r3
 800547c:	931d      	str	r3, [sp, #116]	; 0x74
 800547e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005480:	1e4a      	subs	r2, r1, #1
 8005482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005486:	9219      	str	r2, [sp, #100]	; 0x64
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	00ca      	lsls	r2, r1, #3
 800548c:	921a      	str	r2, [sp, #104]	; 0x68
 800548e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005490:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8005494:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005496:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005498:	4622      	mov	r2, r4
 800549a:	4618      	mov	r0, r3
 800549c:	00d9      	lsls	r1, r3, #3
 800549e:	440a      	add	r2, r1
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	4411      	add	r1, r2
 80054a4:	58e3      	ldr	r3, [r4, r3]
 80054a6:	6849      	ldr	r1, [r1, #4]
 80054a8:	6852      	ldr	r2, [r2, #4]
 80054aa:	9304      	str	r3, [sp, #16]
 80054ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054ae:	9106      	str	r1, [sp, #24]
 80054b0:	9208      	str	r2, [sp, #32]
 80054b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80054b4:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 80054b8:	18c3      	adds	r3, r0, r3
 80054ba:	9203      	str	r2, [sp, #12]
 80054bc:	9316      	str	r3, [sp, #88]	; 0x58
 80054be:	680a      	ldr	r2, [r1, #0]
 80054c0:	684b      	ldr	r3, [r1, #4]
 80054c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80054c4:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80054c6:	9209      	str	r2, [sp, #36]	; 0x24
 80054c8:	930a      	str	r3, [sp, #40]	; 0x28
 80054ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054ce:	eb07 0a05 	add.w	sl, r7, r5
 80054d2:	eb0a 0b05 	add.w	fp, sl, r5
 80054d6:	4293      	cmp	r3, r2
 80054d8:	eb0b 0e05 	add.w	lr, fp, r5
 80054dc:	f240 8094 	bls.w	8005608 <arm_radix4_butterfly_inverse_q31+0x330>
 80054e0:	4613      	mov	r3, r2
 80054e2:	f8cd b004 	str.w	fp, [sp, #4]
 80054e6:	46d3      	mov	fp, sl
 80054e8:	46ba      	mov	sl, r7
 80054ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054ec:	9801      	ldr	r0, [sp, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	9302      	str	r3, [sp, #8]
 80054f2:	9b02      	ldr	r3, [sp, #8]
 80054f4:	f8da c000 	ldr.w	ip, [sl]
 80054f8:	6804      	ldr	r4, [r0, #0]
 80054fa:	f8db 2000 	ldr.w	r2, [fp]
 80054fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005500:	f8de 3000 	ldr.w	r3, [lr]
 8005504:	eb0c 0704 	add.w	r7, ip, r4
 8005508:	441a      	add	r2, r3
 800550a:	18b9      	adds	r1, r7, r2
 800550c:	1089      	asrs	r1, r1, #2
 800550e:	6843      	ldr	r3, [r0, #4]
 8005510:	f8ca 1000 	str.w	r1, [sl]
 8005514:	f8db 5004 	ldr.w	r5, [fp, #4]
 8005518:	f8da 1004 	ldr.w	r1, [sl, #4]
 800551c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8005520:	18ce      	adds	r6, r1, r3
 8005522:	4428      	add	r0, r5
 8005524:	1835      	adds	r5, r6, r0
 8005526:	10ad      	asrs	r5, r5, #2
 8005528:	f8ca 5004 	str.w	r5, [sl, #4]
 800552c:	1ac9      	subs	r1, r1, r3
 800552e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005532:	ebc4 040c 	rsb	r4, r4, ip
 8005536:	469c      	mov	ip, r3
 8005538:	f8de 3004 	ldr.w	r3, [lr, #4]
 800553c:	f8de 5000 	ldr.w	r5, [lr]
 8005540:	ebc3 0c0c 	rsb	ip, r3, ip
 8005544:	f8db 3000 	ldr.w	r3, [fp]
 8005548:	1aba      	subs	r2, r7, r2
 800554a:	1b5b      	subs	r3, r3, r5
 800554c:	ebcc 0504 	rsb	r5, ip, r4
 8005550:	44a4      	add	ip, r4
 8005552:	18cc      	adds	r4, r1, r3
 8005554:	1acb      	subs	r3, r1, r3
 8005556:	9903      	ldr	r1, [sp, #12]
 8005558:	1a30      	subs	r0, r6, r0
 800555a:	fb85 6701 	smull	r6, r7, r5, r1
 800555e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8005562:	9e08      	ldr	r6, [sp, #32]
 8005564:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005566:	fb84 8906 	smull	r8, r9, r4, r6
 800556a:	ebc9 0101 	rsb	r1, r9, r1
 800556e:	910e      	str	r1, [sp, #56]	; 0x38
 8005570:	9904      	ldr	r1, [sp, #16]
 8005572:	9f06      	ldr	r7, [sp, #24]
 8005574:	4688      	mov	r8, r1
 8005576:	fb80 6707 	smull	r6, r7, r0, r7
 800557a:	fb82 8908 	smull	r8, r9, r2, r8
 800557e:	ebc7 0609 	rsb	r6, r7, r9
 8005582:	9f06      	ldr	r7, [sp, #24]
 8005584:	960c      	str	r6, [sp, #48]	; 0x30
 8005586:	fb82 6707 	smull	r6, r7, r2, r7
 800558a:	9a03      	ldr	r2, [sp, #12]
 800558c:	fb80 0101 	smull	r0, r1, r0, r1
 8005590:	fb84 8902 	smull	r8, r9, r4, r2
 8005594:	9c08      	ldr	r4, [sp, #32]
 8005596:	187a      	adds	r2, r7, r1
 8005598:	fb85 4504 	smull	r4, r5, r5, r4
 800559c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800559e:	eb05 0409 	add.w	r4, r5, r9
 80055a2:	fb8c 6701 	smull	r6, r7, ip, r1
 80055a6:	940f      	str	r4, [sp, #60]	; 0x3c
 80055a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80055ac:	fb83 0101 	smull	r0, r1, r3, r1
 80055b0:	fb83 4504 	smull	r4, r5, r3, r4
 80055b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80055b8:	4698      	mov	r8, r3
 80055ba:	fb8c 8908 	smull	r8, r9, ip, r8
 80055be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80055c0:	1052      	asrs	r2, r2, #1
 80055c2:	f8cb 2004 	str.w	r2, [fp, #4]
 80055c6:	1a7b      	subs	r3, r7, r1
 80055c8:	9a02      	ldr	r2, [sp, #8]
 80055ca:	eb09 0105 	add.w	r1, r9, r5
 80055ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80055d0:	1075      	asrs	r5, r6, #1
 80055d2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80055d4:	f8cb 5000 	str.w	r5, [fp]
 80055d8:	9d01      	ldr	r5, [sp, #4]
 80055da:	1040      	asrs	r0, r0, #1
 80055dc:	105b      	asrs	r3, r3, #1
 80055de:	4432      	add	r2, r6
 80055e0:	1064      	asrs	r4, r4, #1
 80055e2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80055e4:	6068      	str	r0, [r5, #4]
 80055e6:	602c      	str	r4, [r5, #0]
 80055e8:	9202      	str	r2, [sp, #8]
 80055ea:	f8ce 3000 	str.w	r3, [lr]
 80055ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f2:	1049      	asrs	r1, r1, #1
 80055f4:	19e8      	adds	r0, r5, r7
 80055f6:	429a      	cmp	r2, r3
 80055f8:	f8ce 1004 	str.w	r1, [lr, #4]
 80055fc:	44ba      	add	sl, r7
 80055fe:	44bb      	add	fp, r7
 8005600:	9001      	str	r0, [sp, #4]
 8005602:	44be      	add	lr, r7
 8005604:	f63f af75 	bhi.w	80054f2 <arm_radix4_butterfly_inverse_q31+0x21a>
 8005608:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800560a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800560c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800560e:	440a      	add	r2, r1
 8005610:	9214      	str	r2, [sp, #80]	; 0x50
 8005612:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005614:	3301      	adds	r3, #1
 8005616:	3208      	adds	r2, #8
 8005618:	9215      	str	r2, [sp, #84]	; 0x54
 800561a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800561c:	9313      	str	r3, [sp, #76]	; 0x4c
 800561e:	4293      	cmp	r3, r2
 8005620:	f67f af38 	bls.w	8005494 <arm_radix4_butterfly_inverse_q31+0x1bc>
 8005624:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005626:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005628:	0092      	lsls	r2, r2, #2
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	9217      	str	r2, [sp, #92]	; 0x5c
 800562e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005630:	2b04      	cmp	r3, #4
 8005632:	931c      	str	r3, [sp, #112]	; 0x70
 8005634:	9210      	str	r2, [sp, #64]	; 0x40
 8005636:	f63f af15 	bhi.w	8005464 <arm_radix4_butterfly_inverse_q31+0x18c>
 800563a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800563c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8005640:	3020      	adds	r0, #32
 8005642:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8005646:	f850 1c18 	ldr.w	r1, [r0, #-24]
 800564a:	f850 3c14 	ldr.w	r3, [r0, #-20]
 800564e:	f850 9c1c 	ldr.w	r9, [r0, #-28]
 8005652:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8005656:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 800565a:	eb02 0e01 	add.w	lr, r2, r1
 800565e:	1a57      	subs	r7, r2, r1
 8005660:	1ad6      	subs	r6, r2, r3
 8005662:	441a      	add	r2, r3
 8005664:	f850 4c08 	ldr.w	r4, [r0, #-8]
 8005668:	f850 bc04 	ldr.w	fp, [r0, #-4]
 800566c:	eb09 0503 	add.w	r5, r9, r3
 8005670:	44d6      	add	lr, sl
 8005672:	4457      	add	r7, sl
 8005674:	ebca 0606 	rsb	r6, sl, r6
 8005678:	ebc3 0309 	rsb	r3, r3, r9
 800567c:	ebca 0a02 	rsb	sl, sl, r2
 8005680:	eb09 0201 	add.w	r2, r9, r1
 8005684:	ebc1 0109 	rsb	r1, r1, r9
 8005688:	4463      	add	r3, ip
 800568a:	4465      	add	r5, ip
 800568c:	ebcc 0202 	rsb	r2, ip, r2
 8005690:	ebcc 0c01 	rsb	ip, ip, r1
 8005694:	445e      	add	r6, fp
 8005696:	ebcb 0a0a 	rsb	sl, fp, sl
 800569a:	445d      	add	r5, fp
 800569c:	eb0e 0104 	add.w	r1, lr, r4
 80056a0:	ebcb 0b03 	rsb	fp, fp, r3
 80056a4:	1b3f      	subs	r7, r7, r4
 80056a6:	1b12      	subs	r2, r2, r4
 80056a8:	eb0c 0304 	add.w	r3, ip, r4
 80056ac:	f1b8 0801 	subs.w	r8, r8, #1
 80056b0:	f840 1c20 	str.w	r1, [r0, #-32]
 80056b4:	f840 7c18 	str.w	r7, [r0, #-24]
 80056b8:	f840 6c10 	str.w	r6, [r0, #-16]
 80056bc:	f840 ac08 	str.w	sl, [r0, #-8]
 80056c0:	f840 5c1c 	str.w	r5, [r0, #-28]
 80056c4:	f840 bc14 	str.w	fp, [r0, #-20]
 80056c8:	f840 2c0c 	str.w	r2, [r0, #-12]
 80056cc:	f840 3c04 	str.w	r3, [r0, #-4]
 80056d0:	f100 0020 	add.w	r0, r0, #32
 80056d4:	d1b5      	bne.n	8005642 <arm_radix4_butterfly_inverse_q31+0x36a>
 80056d6:	b021      	add	sp, #132	; 0x84
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056dc <arm_fir_init_q31>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4604      	mov	r4, r0
 80056e0:	461d      	mov	r5, r3
 80056e2:	9804      	ldr	r0, [sp, #16]
 80056e4:	60a2      	str	r2, [r4, #8]
 80056e6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80056ea:	3a01      	subs	r2, #1
 80056ec:	440a      	add	r2, r1
 80056ee:	8021      	strh	r1, [r4, #0]
 80056f0:	0092      	lsls	r2, r2, #2
 80056f2:	4618      	mov	r0, r3
 80056f4:	2100      	movs	r1, #0
 80056f6:	f000 fbc5 	bl	8005e84 <memset>
 80056fa:	6065      	str	r5, [r4, #4]
 80056fc:	bd38      	pop	{r3, r4, r5, pc}
 80056fe:	bf00      	nop

08005700 <arm_fir_decimate_q31>:
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	4680      	mov	r8, r0
 8005706:	7805      	ldrb	r5, [r0, #0]
 8005708:	8840      	ldrh	r0, [r0, #2]
 800570a:	fbb3 f9f5 	udiv	r9, r3, r5
 800570e:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 8005712:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005716:	f8d8 e008 	ldr.w	lr, [r8, #8]
 800571a:	b087      	sub	sp, #28
 800571c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005720:	9005      	str	r0, [sp, #20]
 8005722:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 8005726:	461c      	mov	r4, r3
 8005728:	9302      	str	r3, [sp, #8]
 800572a:	f1b9 0f00 	cmp.w	r9, #0
 800572e:	f000 80a0 	beq.w	8005872 <arm_fir_decimate_q31+0x172>
 8005732:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 8005736:	4692      	mov	sl, r2
 8005738:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800573c:	4603      	mov	r3, r0
 800573e:	9203      	str	r2, [sp, #12]
 8005740:	4610      	mov	r0, r2
 8005742:	4622      	mov	r2, r4
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	4402      	add	r2, r0
 800574a:	9204      	str	r2, [sp, #16]
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	462b      	mov	r3, r5
 8005750:	4608      	mov	r0, r1
 8005752:	f1ac 0204 	sub.w	r2, ip, #4
 8005756:	f850 4b04 	ldr.w	r4, [r0], #4
 800575a:	3b01      	subs	r3, #1
 800575c:	f842 4f04 	str.w	r4, [r2, #4]!
 8005760:	d1f9      	bne.n	8005756 <arm_fir_decimate_q31+0x56>
 8005762:	00ad      	lsls	r5, r5, #2
 8005764:	44ac      	add	ip, r5
 8005766:	4429      	add	r1, r5
 8005768:	f1bb 0f00 	cmp.w	fp, #0
 800576c:	d04b      	beq.n	8005806 <arm_fir_decimate_q31+0x106>
 800576e:	9b02      	ldr	r3, [sp, #8]
 8005770:	2600      	movs	r6, #0
 8005772:	2700      	movs	r7, #0
 8005774:	f103 0410 	add.w	r4, r3, #16
 8005778:	465d      	mov	r5, fp
 800577a:	4632      	mov	r2, r6
 800577c:	463b      	mov	r3, r7
 800577e:	f10e 0010 	add.w	r0, lr, #16
 8005782:	9100      	str	r1, [sp, #0]
 8005784:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8005788:	f850 7c10 	ldr.w	r7, [r0, #-16]
 800578c:	3d01      	subs	r5, #1
 800578e:	fbc6 2307 	smlal	r2, r3, r6, r7
 8005792:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 8005796:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 800579a:	f100 0010 	add.w	r0, r0, #16
 800579e:	fbc7 2306 	smlal	r2, r3, r7, r6
 80057a2:	e914 0082 	ldmdb	r4, {r1, r7}
 80057a6:	f850 6c18 	ldr.w	r6, [r0, #-24]
 80057aa:	f104 0410 	add.w	r4, r4, #16
 80057ae:	fbc1 2306 	smlal	r2, r3, r1, r6
 80057b2:	f850 6c14 	ldr.w	r6, [r0, #-20]
 80057b6:	fbc7 2306 	smlal	r2, r3, r7, r6
 80057ba:	d1e3      	bne.n	8005784 <arm_fir_decimate_q31+0x84>
 80057bc:	4616      	mov	r6, r2
 80057be:	461f      	mov	r7, r3
 80057c0:	9b03      	ldr	r3, [sp, #12]
 80057c2:	9900      	ldr	r1, [sp, #0]
 80057c4:	9c04      	ldr	r4, [sp, #16]
 80057c6:	eb0e 0503 	add.w	r5, lr, r3
 80057ca:	9b01      	ldr	r3, [sp, #4]
 80057cc:	b163      	cbz	r3, 80057e8 <arm_fir_decimate_q31+0xe8>
 80057ce:	4618      	mov	r0, r3
 80057d0:	4632      	mov	r2, r6
 80057d2:	463b      	mov	r3, r7
 80057d4:	f854 6b04 	ldr.w	r6, [r4], #4
 80057d8:	f855 7b04 	ldr.w	r7, [r5], #4
 80057dc:	3801      	subs	r0, #1
 80057de:	fbc6 2307 	smlal	r2, r3, r6, r7
 80057e2:	d1f7      	bne.n	80057d4 <arm_fir_decimate_q31+0xd4>
 80057e4:	4616      	mov	r6, r2
 80057e6:	461f      	mov	r7, r3
 80057e8:	f898 0000 	ldrb.w	r0, [r8]
 80057ec:	0ff2      	lsrs	r2, r6, #31
 80057ee:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 80057f2:	f1b9 0901 	subs.w	r9, r9, #1
 80057f6:	f84a 2b04 	str.w	r2, [sl], #4
 80057fa:	eb0e 0e80 	add.w	lr, lr, r0, lsl #2
 80057fe:	d007      	beq.n	8005810 <arm_fir_decimate_q31+0x110>
 8005800:	f898 5000 	ldrb.w	r5, [r8]
 8005804:	e7a3      	b.n	800574e <arm_fir_decimate_q31+0x4e>
 8005806:	9c02      	ldr	r4, [sp, #8]
 8005808:	4675      	mov	r5, lr
 800580a:	2600      	movs	r6, #0
 800580c:	2700      	movs	r7, #0
 800580e:	e7dc      	b.n	80057ca <arm_fir_decimate_q31+0xca>
 8005810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005814:	9b05      	ldr	r3, [sp, #20]
 8005816:	1e59      	subs	r1, r3, #1
 8005818:	088e      	lsrs	r6, r1, #2
 800581a:	d01d      	beq.n	8005858 <arm_fir_decimate_q31+0x158>
 800581c:	4630      	mov	r0, r6
 800581e:	f104 0210 	add.w	r2, r4, #16
 8005822:	f10e 0310 	add.w	r3, lr, #16
 8005826:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800582a:	3801      	subs	r0, #1
 800582c:	f842 5c10 	str.w	r5, [r2, #-16]
 8005830:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005834:	f102 0210 	add.w	r2, r2, #16
 8005838:	f842 5c1c 	str.w	r5, [r2, #-28]
 800583c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005840:	f103 0310 	add.w	r3, r3, #16
 8005844:	f842 5c18 	str.w	r5, [r2, #-24]
 8005848:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800584c:	f842 5c14 	str.w	r5, [r2, #-20]
 8005850:	d1e9      	bne.n	8005826 <arm_fir_decimate_q31+0x126>
 8005852:	0133      	lsls	r3, r6, #4
 8005854:	441c      	add	r4, r3
 8005856:	449e      	add	lr, r3
 8005858:	f011 0303 	ands.w	r3, r1, #3
 800585c:	d006      	beq.n	800586c <arm_fir_decimate_q31+0x16c>
 800585e:	1f22      	subs	r2, r4, #4
 8005860:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005864:	3b01      	subs	r3, #1
 8005866:	f842 1f04 	str.w	r1, [r2, #4]!
 800586a:	d1f9      	bne.n	8005860 <arm_fir_decimate_q31+0x160>
 800586c:	b007      	add	sp, #28
 800586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005872:	4674      	mov	r4, lr
 8005874:	e7ce      	b.n	8005814 <arm_fir_decimate_q31+0x114>
 8005876:	bf00      	nop

08005878 <arm_fir_decimate_init_q31>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4616      	mov	r6, r2
 800587c:	9a05      	ldr	r2, [sp, #20]
 800587e:	fbb2 f4f6 	udiv	r4, r2, r6
 8005882:	fb06 2414 	mls	r4, r6, r4, r2
 8005886:	b98c      	cbnz	r4, 80058ac <arm_fir_decimate_init_q31+0x34>
 8005888:	4605      	mov	r5, r0
 800588a:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 800588e:	3801      	subs	r0, #1
 8005890:	4402      	add	r2, r0
 8005892:	8069      	strh	r1, [r5, #2]
 8005894:	606b      	str	r3, [r5, #4]
 8005896:	0092      	lsls	r2, r2, #2
 8005898:	9804      	ldr	r0, [sp, #16]
 800589a:	4621      	mov	r1, r4
 800589c:	f000 faf2 	bl	8005e84 <memset>
 80058a0:	4620      	mov	r0, r4
 80058a2:	9b04      	ldr	r3, [sp, #16]
 80058a4:	702e      	strb	r6, [r5, #0]
 80058a6:	60ab      	str	r3, [r5, #8]
 80058a8:	b240      	sxtb	r0, r0
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	20fe      	movs	r0, #254	; 0xfe
 80058ae:	e7fb      	b.n	80058a8 <arm_fir_decimate_init_q31+0x30>

080058b0 <arm_cmplx_mag_q31>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	0893      	lsrs	r3, r2, #2
 80058b6:	b085      	sub	sp, #20
 80058b8:	e88d 0005 	stmia.w	sp, {r0, r2}
 80058bc:	460e      	mov	r6, r1
 80058be:	9302      	str	r3, [sp, #8]
 80058c0:	d053      	beq.n	800596a <arm_cmplx_mag_q31+0xba>
 80058c2:	461f      	mov	r7, r3
 80058c4:	460d      	mov	r5, r1
 80058c6:	46ba      	mov	sl, r7
 80058c8:	f100 0420 	add.w	r4, r0, #32
 80058cc:	9103      	str	r1, [sp, #12]
 80058ce:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80058d2:	f854 0c1c 	ldr.w	r0, [r4, #-28]
 80058d6:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80058da:	f854 2c18 	ldr.w	r2, [r4, #-24]
 80058de:	fb83 8903 	smull	r8, r9, r3, r3
 80058e2:	fb80 0100 	smull	r0, r1, r0, r0
 80058e6:	fb82 2302 	smull	r2, r3, r2, r2
 80058ea:	fb86 6706 	smull	r6, r7, r6, r6
 80058ee:	ea4f 0269 	mov.w	r2, r9, asr #1
 80058f2:	1048      	asrs	r0, r1, #1
 80058f4:	f854 9c04 	ldr.w	r9, [r4, #-4]
 80058f8:	f854 8c0c 	ldr.w	r8, [r4, #-12]
 80058fc:	4629      	mov	r1, r5
 80058fe:	eb00 0067 	add.w	r0, r0, r7, asr #1
 8005902:	eb02 0763 	add.w	r7, r2, r3, asr #1
 8005906:	f854 bc10 	ldr.w	fp, [r4, #-16]
 800590a:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800590e:	f000 f849 	bl	80059a4 <arm_sqrt_q31>
 8005912:	1d29      	adds	r1, r5, #4
 8005914:	4638      	mov	r0, r7
 8005916:	f000 f845 	bl	80059a4 <arm_sqrt_q31>
 800591a:	fb89 0109 	smull	r0, r1, r9, r9
 800591e:	fb88 8908 	smull	r8, r9, r8, r8
 8005922:	fb8b 230b 	smull	r2, r3, fp, fp
 8005926:	fb86 6706 	smull	r6, r7, r6, r6
 800592a:	ea4f 0069 	mov.w	r0, r9, asr #1
 800592e:	104e      	asrs	r6, r1, #1
 8005930:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8005934:	f105 0108 	add.w	r1, r5, #8
 8005938:	eb06 0667 	add.w	r6, r6, r7, asr #1
 800593c:	f000 f832 	bl	80059a4 <arm_sqrt_q31>
 8005940:	f105 010c 	add.w	r1, r5, #12
 8005944:	4630      	mov	r0, r6
 8005946:	f000 f82d 	bl	80059a4 <arm_sqrt_q31>
 800594a:	f1ba 0a01 	subs.w	sl, sl, #1
 800594e:	f104 0420 	add.w	r4, r4, #32
 8005952:	f105 0510 	add.w	r5, r5, #16
 8005956:	d1ba      	bne.n	80058ce <arm_cmplx_mag_q31+0x1e>
 8005958:	9b00      	ldr	r3, [sp, #0]
 800595a:	9a02      	ldr	r2, [sp, #8]
 800595c:	4619      	mov	r1, r3
 800595e:	9e03      	ldr	r6, [sp, #12]
 8005960:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	eb06 1602 	add.w	r6, r6, r2, lsl #4
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	f013 0503 	ands.w	r5, r3, #3
 8005970:	d015      	beq.n	800599e <arm_cmplx_mag_q31+0xee>
 8005972:	9c00      	ldr	r4, [sp, #0]
 8005974:	3408      	adds	r4, #8
 8005976:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800597a:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800597e:	fb80 0100 	smull	r0, r1, r0, r0
 8005982:	fb82 2302 	smull	r2, r3, r2, r2
 8005986:	1048      	asrs	r0, r1, #1
 8005988:	eb00 0063 	add.w	r0, r0, r3, asr #1
 800598c:	4631      	mov	r1, r6
 800598e:	f000 f809 	bl	80059a4 <arm_sqrt_q31>
 8005992:	3d01      	subs	r5, #1
 8005994:	f106 0604 	add.w	r6, r6, #4
 8005998:	f104 0408 	add.w	r4, r4, #8
 800599c:	d1eb      	bne.n	8005976 <arm_cmplx_mag_q31+0xc6>
 800599e:	b005      	add	sp, #20
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059a4 <arm_sqrt_q31>:
 80059a4:	2800      	cmp	r0, #0
 80059a6:	dd71      	ble.n	8005a8c <arm_sqrt_q31+0xe8>
 80059a8:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80059ac:	fab0 f580 	clz	r5, r0
 80059b0:	1e6e      	subs	r6, r5, #1
 80059b2:	f016 0701 	ands.w	r7, r6, #1
 80059b6:	bf1a      	itte	ne
 80059b8:	1eab      	subne	r3, r5, #2
 80059ba:	fa00 f403 	lslne.w	r4, r0, r3
 80059be:	fa00 f406 	lsleq.w	r4, r0, r6
 80059c2:	4620      	mov	r0, r4
 80059c4:	4688      	mov	r8, r1
 80059c6:	f7fb f9c9 	bl	8000d5c <__aeabi_i2f>
 80059ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 80059ce:	f7fb fa19 	bl	8000e04 <__aeabi_fmul>
 80059d2:	1043      	asrs	r3, r0, #1
 80059d4:	4830      	ldr	r0, [pc, #192]	; (8005a98 <arm_sqrt_q31+0xf4>)
 80059d6:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80059da:	1ac0      	subs	r0, r0, r3
 80059dc:	f7fb fa12 	bl	8000e04 <__aeabi_fmul>
 80059e0:	f7fb fb60 	bl	80010a4 <__aeabi_f2iz>
 80059e4:	fb80 ab00 	smull	sl, fp, r0, r0
 80059e8:	ea4f 72da 	mov.w	r2, sl, lsr #31
 80059ec:	ea4f 0e64 	mov.w	lr, r4, asr #1
 80059f0:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 80059f4:	fb82 230e 	smull	r2, r3, r2, lr
 80059f8:	0fd2      	lsrs	r2, r2, #31
 80059fa:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 80059fe:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8005a02:	fb80 0102 	smull	r0, r1, r0, r2
 8005a06:	0fc2      	lsrs	r2, r0, #31
 8005a08:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005a0c:	0093      	lsls	r3, r2, #2
 8005a0e:	fb83 ab03 	smull	sl, fp, r3, r3
 8005a12:	ea4f 70da 	mov.w	r0, sl, lsr #31
 8005a16:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
 8005a1a:	fb8e 0100 	smull	r0, r1, lr, r0
 8005a1e:	0fc2      	lsrs	r2, r0, #31
 8005a20:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005a24:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8005a28:	fb83 2302 	smull	r2, r3, r3, r2
 8005a2c:	0fd2      	lsrs	r2, r2, #31
 8005a2e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8005a32:	0093      	lsls	r3, r2, #2
 8005a34:	fb83 0103 	smull	r0, r1, r3, r3
 8005a38:	0fc0      	lsrs	r0, r0, #31
 8005a3a:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 8005a3e:	fb8e 0100 	smull	r0, r1, lr, r0
 8005a42:	0fc2      	lsrs	r2, r0, #31
 8005a44:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005a48:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8005a4c:	fb83 2302 	smull	r2, r3, r3, r2
 8005a50:	0fd0      	lsrs	r0, r2, #31
 8005a52:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8005a56:	0080      	lsls	r0, r0, #2
 8005a58:	fb84 0100 	smull	r0, r1, r4, r0
 8005a5c:	0fc3      	lsrs	r3, r0, #31
 8005a5e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	b157      	cbz	r7, 8005a7c <arm_sqrt_q31+0xd8>
 8005a66:	3d02      	subs	r5, #2
 8005a68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a6c:	106d      	asrs	r5, r5, #1
 8005a6e:	412b      	asrs	r3, r5
 8005a70:	f8c8 3000 	str.w	r3, [r8]
 8005a74:	2000      	movs	r0, #0
 8005a76:	b240      	sxtb	r0, r0
 8005a78:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8005a7c:	1076      	asrs	r6, r6, #1
 8005a7e:	4133      	asrs	r3, r6
 8005a80:	f8c8 3000 	str.w	r3, [r8]
 8005a84:	2000      	movs	r0, #0
 8005a86:	b240      	sxtb	r0, r0
 8005a88:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	20ff      	movs	r0, #255	; 0xff
 8005a90:	600b      	str	r3, [r1, #0]
 8005a92:	b240      	sxtb	r0, r0
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	5f3759df 	.word	0x5f3759df

08005a9c <arm_sub_q31>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	9302      	str	r3, [sp, #8]
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	4683      	mov	fp, r0
 8005aa8:	468a      	mov	sl, r1
 8005aaa:	9201      	str	r2, [sp, #4]
 8005aac:	9303      	str	r3, [sp, #12]
 8005aae:	d063      	beq.n	8005b78 <arm_sub_q31+0xdc>
 8005ab0:	461f      	mov	r7, r3
 8005ab2:	f100 0e10 	add.w	lr, r0, #16
 8005ab6:	f101 0610 	add.w	r6, r1, #16
 8005aba:	f102 0510 	add.w	r5, r2, #16
 8005abe:	f856 1c10 	ldr.w	r1, [r6, #-16]
 8005ac2:	f85e 2c10 	ldr.w	r2, [lr, #-16]
 8005ac6:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 8005aca:	17d3      	asrs	r3, r2, #31
 8005acc:	1a52      	subs	r2, r2, r1
 8005ace:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8005ad2:	f85e 0c0c 	ldr.w	r0, [lr, #-12]
 8005ad6:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8005ada:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8005ade:	f08c 4c00 	eor.w	ip, ip, #2147483648	; 0x80000000
 8005ae2:	ea6f 0c0c 	mvn.w	ip, ip
 8005ae6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005aea:	bf08      	it	eq
 8005aec:	4694      	moveq	ip, r2
 8005aee:	1b00      	subs	r0, r0, r4
 8005af0:	eb61 71e4 	sbc.w	r1, r1, r4, asr #31
 8005af4:	ea4f 78e1 	mov.w	r8, r1, asr #31
 8005af8:	f088 4800 	eor.w	r8, r8, #2147483648	; 0x80000000
 8005afc:	ea6f 0808 	mvn.w	r8, r8
 8005b00:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8005b04:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 8005b08:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8005b0c:	bf18      	it	ne
 8005b0e:	4640      	movne	r0, r8
 8005b10:	17d3      	asrs	r3, r2, #31
 8005b12:	1b12      	subs	r2, r2, r4
 8005b14:	eb63 73e4 	sbc.w	r3, r3, r4, asr #31
 8005b18:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8005b1c:	17dc      	asrs	r4, r3, #31
 8005b1e:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8005b22:	4688      	mov	r8, r1
 8005b24:	43e4      	mvns	r4, r4
 8005b26:	ea4f 79e1 	mov.w	r9, r1, asr #31
 8005b2a:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8005b2e:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8005b32:	bf18      	it	ne
 8005b34:	4622      	movne	r2, r4
 8005b36:	ebb8 0801 	subs.w	r8, r8, r1
 8005b3a:	eb69 79e1 	sbc.w	r9, r9, r1, asr #31
 8005b3e:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8005b42:	ebb9 7fe8 	cmp.w	r9, r8, asr #31
 8005b46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b4a:	ea6f 0303 	mvn.w	r3, r3
 8005b4e:	bf08      	it	eq
 8005b50:	4643      	moveq	r3, r8
 8005b52:	3f01      	subs	r7, #1
 8005b54:	f845 cc10 	str.w	ip, [r5, #-16]
 8005b58:	e905 000d 	stmdb	r5, {r0, r2, r3}
 8005b5c:	f10e 0e10 	add.w	lr, lr, #16
 8005b60:	f106 0610 	add.w	r6, r6, #16
 8005b64:	f105 0510 	add.w	r5, r5, #16
 8005b68:	d1a9      	bne.n	8005abe <arm_sub_q31+0x22>
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	9a01      	ldr	r2, [sp, #4]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	441a      	add	r2, r3
 8005b72:	449b      	add	fp, r3
 8005b74:	449a      	add	sl, r3
 8005b76:	9201      	str	r2, [sp, #4]
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	f013 0303 	ands.w	r3, r3, #3
 8005b7e:	d015      	beq.n	8005bac <arm_sub_q31+0x110>
 8005b80:	9a01      	ldr	r2, [sp, #4]
 8005b82:	3a04      	subs	r2, #4
 8005b84:	f85a 4b04 	ldr.w	r4, [sl], #4
 8005b88:	f85b 0b04 	ldr.w	r0, [fp], #4
 8005b8c:	17c1      	asrs	r1, r0, #31
 8005b8e:	1b00      	subs	r0, r0, r4
 8005b90:	eb61 71e4 	sbc.w	r1, r1, r4, asr #31
 8005b94:	17cc      	asrs	r4, r1, #31
 8005b96:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8005b9a:	43e4      	mvns	r4, r4
 8005b9c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8005ba0:	bf18      	it	ne
 8005ba2:	4620      	movne	r0, r4
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005baa:	d1eb      	bne.n	8005b84 <arm_sub_q31+0xe8>
 8005bac:	b005      	add	sp, #20
 8005bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb2:	bf00      	nop

08005bb4 <arm_scale_q31>:
 8005bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	b089      	sub	sp, #36	; 0x24
 8005bba:	3201      	adds	r2, #1
 8005bbc:	9305      	str	r3, [sp, #20]
 8005bbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bc0:	fa4f fc82 	sxtb.w	ip, r2
 8005bc4:	089b      	lsrs	r3, r3, #2
 8005bc6:	f1bc 0f00 	cmp.w	ip, #0
 8005bca:	4683      	mov	fp, r0
 8005bcc:	468a      	mov	sl, r1
 8005bce:	9306      	str	r3, [sp, #24]
 8005bd0:	da48      	bge.n	8005c64 <arm_scale_q31+0xb0>
 8005bd2:	b39b      	cbz	r3, 8005c3c <arm_scale_q31+0x88>
 8005bd4:	9b05      	ldr	r3, [sp, #20]
 8005bd6:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005bda:	f1cc 0100 	rsb	r1, ip, #0
 8005bde:	f100 0210 	add.w	r2, r0, #16
 8005be2:	3310      	adds	r3, #16
 8005be4:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8005be8:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8005bec:	fb86 670a 	smull	r6, r7, r6, sl
 8005bf0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005bf4:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8005bf8:	fb85 890a 	smull	r8, r9, r5, sl
 8005bfc:	fb84 450a 	smull	r4, r5, r4, sl
 8005c00:	fa47 f401 	asr.w	r4, r7, r1
 8005c04:	fb80 670a 	smull	r6, r7, r0, sl
 8005c08:	410d      	asrs	r5, r1
 8005c0a:	fa49 f601 	asr.w	r6, r9, r1
 8005c0e:	fa47 f001 	asr.w	r0, r7, r1
 8005c12:	f1be 0e01 	subs.w	lr, lr, #1
 8005c16:	f843 4c10 	str.w	r4, [r3, #-16]
 8005c1a:	f843 6c0c 	str.w	r6, [r3, #-12]
 8005c1e:	f843 5c08 	str.w	r5, [r3, #-8]
 8005c22:	f843 0c04 	str.w	r0, [r3, #-4]
 8005c26:	f102 0210 	add.w	r2, r2, #16
 8005c2a:	f103 0310 	add.w	r3, r3, #16
 8005c2e:	d1d9      	bne.n	8005be4 <arm_scale_q31+0x30>
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	9a05      	ldr	r2, [sp, #20]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	441a      	add	r2, r3
 8005c38:	449b      	add	fp, r3
 8005c3a:	9205      	str	r2, [sp, #20]
 8005c3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c3e:	f013 0103 	ands.w	r1, r3, #3
 8005c42:	d00c      	beq.n	8005c5e <arm_scale_q31+0xaa>
 8005c44:	9805      	ldr	r0, [sp, #20]
 8005c46:	f1cc 0c00 	rsb	ip, ip, #0
 8005c4a:	f85b 2b04 	ldr.w	r2, [fp], #4
 8005c4e:	3901      	subs	r1, #1
 8005c50:	fb82 230a 	smull	r2, r3, r2, sl
 8005c54:	fa43 f30c 	asr.w	r3, r3, ip
 8005c58:	f840 3b04 	str.w	r3, [r0], #4
 8005c5c:	d1f5      	bne.n	8005c4a <arm_scale_q31+0x96>
 8005c5e:	b009      	add	sp, #36	; 0x24
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d060      	beq.n	8005d2a <arm_scale_q31+0x176>
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	9b05      	ldr	r3, [sp, #20]
 8005c6c:	f100 0210 	add.w	r2, r0, #16
 8005c70:	f103 0910 	add.w	r9, r3, #16
 8005c74:	9201      	str	r2, [sp, #4]
 8005c76:	9007      	str	r0, [sp, #28]
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8005c7e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8005c82:	fb86 670a 	smull	r6, r7, r6, sl
 8005c86:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8005c8a:	fb84 450a 	smull	r4, r5, r4, sl
 8005c8e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8005c92:	fb80 010a 	smull	r0, r1, r0, sl
 8005c96:	17fe      	asrs	r6, r7, #31
 8005c98:	fb83 230a 	smull	r2, r3, r3, sl
 8005c9c:	f086 4e00 	eor.w	lr, r6, #2147483648	; 0x80000000
 8005ca0:	ea6f 0e0e 	mvn.w	lr, lr
 8005ca4:	17ec      	asrs	r4, r5, #31
 8005ca6:	17c8      	asrs	r0, r1, #31
 8005ca8:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8005cac:	43e4      	mvns	r4, r4
 8005cae:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005cb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cb6:	43c0      	mvns	r0, r0
 8005cb8:	17db      	asrs	r3, r3, #31
 8005cba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	fa07 f60c 	lsl.w	r6, r7, ip
 8005cc4:	fa46 f80c 	asr.w	r8, r6, ip
 8005cc8:	45b8      	cmp	r8, r7
 8005cca:	bf18      	it	ne
 8005ccc:	4676      	movne	r6, lr
 8005cce:	fa05 f80c 	lsl.w	r8, r5, ip
 8005cd2:	fa01 fe0c 	lsl.w	lr, r1, ip
 8005cd6:	9f03      	ldr	r7, [sp, #12]
 8005cd8:	fa48 fb0c 	asr.w	fp, r8, ip
 8005cdc:	45ab      	cmp	fp, r5
 8005cde:	bf08      	it	eq
 8005ce0:	4644      	moveq	r4, r8
 8005ce2:	fa4e f50c 	asr.w	r5, lr, ip
 8005ce6:	428d      	cmp	r5, r1
 8005ce8:	bf08      	it	eq
 8005cea:	4670      	moveq	r0, lr
 8005cec:	fa07 f70c 	lsl.w	r7, r7, ip
 8005cf0:	9d03      	ldr	r5, [sp, #12]
 8005cf2:	fa47 f10c 	asr.w	r1, r7, ip
 8005cf6:	42a9      	cmp	r1, r5
 8005cf8:	bf08      	it	eq
 8005cfa:	463b      	moveq	r3, r7
 8005cfc:	9a01      	ldr	r2, [sp, #4]
 8005cfe:	e909 0009 	stmdb	r9, {r0, r3}
 8005d02:	9b04      	ldr	r3, [sp, #16]
 8005d04:	3210      	adds	r2, #16
 8005d06:	3b01      	subs	r3, #1
 8005d08:	f849 6c10 	str.w	r6, [r9, #-16]
 8005d0c:	f849 4c0c 	str.w	r4, [r9, #-12]
 8005d10:	9201      	str	r2, [sp, #4]
 8005d12:	f109 0910 	add.w	r9, r9, #16
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	d1ae      	bne.n	8005c78 <arm_scale_q31+0xc4>
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	9a05      	ldr	r2, [sp, #20]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005d24:	441a      	add	r2, r3
 8005d26:	449b      	add	fp, r3
 8005d28:	9205      	str	r2, [sp, #20]
 8005d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d2c:	f013 0003 	ands.w	r0, r3, #3
 8005d30:	d095      	beq.n	8005c5e <arm_scale_q31+0xaa>
 8005d32:	9905      	ldr	r1, [sp, #20]
 8005d34:	f85b 4b04 	ldr.w	r4, [fp], #4
 8005d38:	fb84 450a 	smull	r4, r5, r4, sl
 8005d3c:	17eb      	asrs	r3, r5, #31
 8005d3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d42:	43db      	mvns	r3, r3
 8005d44:	fa05 f20c 	lsl.w	r2, r5, ip
 8005d48:	fa42 f40c 	asr.w	r4, r2, ip
 8005d4c:	42ac      	cmp	r4, r5
 8005d4e:	bf08      	it	eq
 8005d50:	4613      	moveq	r3, r2
 8005d52:	3801      	subs	r0, #1
 8005d54:	f841 3b04 	str.w	r3, [r1], #4
 8005d58:	d1ec      	bne.n	8005d34 <arm_scale_q31+0x180>
 8005d5a:	b009      	add	sp, #36	; 0x24
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d60 <arm_mult_q31>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 8005d68:	b083      	sub	sp, #12
 8005d6a:	469a      	mov	sl, r3
 8005d6c:	d04a      	beq.n	8005e04 <arm_mult_q31+0xa4>
 8005d6e:	46dc      	mov	ip, fp
 8005d70:	f8cd b004 	str.w	fp, [sp, #4]
 8005d74:	468e      	mov	lr, r1
 8005d76:	4683      	mov	fp, r0
 8005d78:	f100 0510 	add.w	r5, r0, #16
 8005d7c:	f101 0410 	add.w	r4, r1, #16
 8005d80:	f102 0310 	add.w	r3, r2, #16
 8005d84:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8005d88:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8005d8c:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 8005d90:	fb80 0101 	smull	r0, r1, r0, r1
 8005d94:	f301 011e 	ssat	r1, #31, r1
 8005d98:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8005d9c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8005da0:	fb87 8900 	smull	r8, r9, r7, r0
 8005da4:	f309 071e 	ssat	r7, #31, r9
 8005da8:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8005dac:	0049      	lsls	r1, r1, #1
 8005dae:	4680      	mov	r8, r0
 8005db0:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8005db4:	f1bc 0c01 	subs.w	ip, ip, #1
 8005db8:	fb88 8900 	smull	r8, r9, r8, r0
 8005dbc:	f309 001e 	ssat	r0, #31, r9
 8005dc0:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8005dc4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8005dc8:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8005dcc:	fb87 6706 	smull	r6, r7, r7, r6
 8005dd0:	f307 061e 	ssat	r6, #31, r7
 8005dd4:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8005dd8:	f843 1c10 	str.w	r1, [r3, #-16]
 8005ddc:	f843 8c0c 	str.w	r8, [r3, #-12]
 8005de0:	e903 0041 	stmdb	r3, {r0, r6}
 8005de4:	f105 0510 	add.w	r5, r5, #16
 8005de8:	f104 0410 	add.w	r4, r4, #16
 8005dec:	f103 0310 	add.w	r3, r3, #16
 8005df0:	d1c8      	bne.n	8005d84 <arm_mult_q31+0x24>
 8005df2:	4658      	mov	r0, fp
 8005df4:	4671      	mov	r1, lr
 8005df6:	f8dd b004 	ldr.w	fp, [sp, #4]
 8005dfa:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8005dfe:	4458      	add	r0, fp
 8005e00:	4459      	add	r1, fp
 8005e02:	445a      	add	r2, fp
 8005e04:	f01a 0a03 	ands.w	sl, sl, #3
 8005e08:	d00e      	beq.n	8005e28 <arm_mult_q31+0xc8>
 8005e0a:	f850 3b04 	ldr.w	r3, [r0], #4
 8005e0e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005e12:	f1ba 0a01 	subs.w	sl, sl, #1
 8005e16:	fb83 4504 	smull	r4, r5, r3, r4
 8005e1a:	f305 031e 	ssat	r3, #31, r5
 8005e1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e22:	f842 3b04 	str.w	r3, [r2], #4
 8005e26:	d1f0      	bne.n	8005e0a <arm_mult_q31+0xaa>
 8005e28:	b003      	add	sp, #12
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000014 	.word	0x20000014

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	2600      	movs	r6, #0
 8005e40:	4d0c      	ldr	r5, [pc, #48]	; (8005e74 <__libc_init_array+0x38>)
 8005e42:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e44:	1b64      	subs	r4, r4, r5
 8005e46:	10a4      	asrs	r4, r4, #2
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	f002 fd30 	bl	80088b0 <_init>
 8005e50:	2600      	movs	r6, #0
 8005e52:	4d0a      	ldr	r5, [pc, #40]	; (8005e7c <__libc_init_array+0x40>)
 8005e54:	4c0a      	ldr	r4, [pc, #40]	; (8005e80 <__libc_init_array+0x44>)
 8005e56:	1b64      	subs	r4, r4, r5
 8005e58:	10a4      	asrs	r4, r4, #2
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08008d94 	.word	0x08008d94
 8005e78:	08008d94 	.word	0x08008d94
 8005e7c:	08008d94 	.word	0x08008d94
 8005e80:	08008d98 	.word	0x08008d98

08005e84 <memset>:
 8005e84:	4603      	mov	r3, r0
 8005e86:	4402      	add	r2, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <__cvt>:
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	bfbb      	ittet	lt
 8005e9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ea2:	461f      	movlt	r7, r3
 8005ea4:	2300      	movge	r3, #0
 8005ea6:	232d      	movlt	r3, #45	; 0x2d
 8005ea8:	b088      	sub	sp, #32
 8005eaa:	4614      	mov	r4, r2
 8005eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005eae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005eb0:	7013      	strb	r3, [r2, #0]
 8005eb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005eb8:	f023 0820 	bic.w	r8, r3, #32
 8005ebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ec0:	d005      	beq.n	8005ece <__cvt+0x3a>
 8005ec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ec6:	d100      	bne.n	8005eca <__cvt+0x36>
 8005ec8:	3501      	adds	r5, #1
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e000      	b.n	8005ed0 <__cvt+0x3c>
 8005ece:	2303      	movs	r3, #3
 8005ed0:	aa07      	add	r2, sp, #28
 8005ed2:	9204      	str	r2, [sp, #16]
 8005ed4:	aa06      	add	r2, sp, #24
 8005ed6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005eda:	e9cd 3500 	strd	r3, r5, [sp]
 8005ede:	4622      	mov	r2, r4
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	f000 fcc5 	bl	8006870 <_dtoa_r>
 8005ee6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005eea:	4606      	mov	r6, r0
 8005eec:	d102      	bne.n	8005ef4 <__cvt+0x60>
 8005eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ef0:	07db      	lsls	r3, r3, #31
 8005ef2:	d522      	bpl.n	8005f3a <__cvt+0xa6>
 8005ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ef8:	eb06 0905 	add.w	r9, r6, r5
 8005efc:	d110      	bne.n	8005f20 <__cvt+0x8c>
 8005efe:	7833      	ldrb	r3, [r6, #0]
 8005f00:	2b30      	cmp	r3, #48	; 0x30
 8005f02:	d10a      	bne.n	8005f1a <__cvt+0x86>
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa fdac 	bl	8000a68 <__aeabi_dcmpeq>
 8005f10:	b918      	cbnz	r0, 8005f1a <__cvt+0x86>
 8005f12:	f1c5 0501 	rsb	r5, r5, #1
 8005f16:	f8ca 5000 	str.w	r5, [sl]
 8005f1a:	f8da 3000 	ldr.w	r3, [sl]
 8005f1e:	4499      	add	r9, r3
 8005f20:	2200      	movs	r2, #0
 8005f22:	2300      	movs	r3, #0
 8005f24:	4620      	mov	r0, r4
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa fd9e 	bl	8000a68 <__aeabi_dcmpeq>
 8005f2c:	b108      	cbz	r0, 8005f32 <__cvt+0x9e>
 8005f2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005f32:	2230      	movs	r2, #48	; 0x30
 8005f34:	9b07      	ldr	r3, [sp, #28]
 8005f36:	454b      	cmp	r3, r9
 8005f38:	d307      	bcc.n	8005f4a <__cvt+0xb6>
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	9b07      	ldr	r3, [sp, #28]
 8005f3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f40:	1b9b      	subs	r3, r3, r6
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	b008      	add	sp, #32
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	1c59      	adds	r1, r3, #1
 8005f4c:	9107      	str	r1, [sp, #28]
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e7f0      	b.n	8005f34 <__cvt+0xa0>

08005f52 <__exponent>:
 8005f52:	4603      	mov	r3, r0
 8005f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f56:	2900      	cmp	r1, #0
 8005f58:	f803 2b02 	strb.w	r2, [r3], #2
 8005f5c:	bfb6      	itet	lt
 8005f5e:	222d      	movlt	r2, #45	; 0x2d
 8005f60:	222b      	movge	r2, #43	; 0x2b
 8005f62:	4249      	neglt	r1, r1
 8005f64:	2909      	cmp	r1, #9
 8005f66:	7042      	strb	r2, [r0, #1]
 8005f68:	dd2b      	ble.n	8005fc2 <__exponent+0x70>
 8005f6a:	f10d 0407 	add.w	r4, sp, #7
 8005f6e:	46a4      	mov	ip, r4
 8005f70:	270a      	movs	r7, #10
 8005f72:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f76:	460a      	mov	r2, r1
 8005f78:	46a6      	mov	lr, r4
 8005f7a:	fb07 1516 	mls	r5, r7, r6, r1
 8005f7e:	2a63      	cmp	r2, #99	; 0x63
 8005f80:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005f84:	4631      	mov	r1, r6
 8005f86:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f8e:	dcf0      	bgt.n	8005f72 <__exponent+0x20>
 8005f90:	3130      	adds	r1, #48	; 0x30
 8005f92:	f1ae 0502 	sub.w	r5, lr, #2
 8005f96:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	1c44      	adds	r4, r0, #1
 8005f9e:	4561      	cmp	r1, ip
 8005fa0:	d30a      	bcc.n	8005fb8 <__exponent+0x66>
 8005fa2:	f10d 0209 	add.w	r2, sp, #9
 8005fa6:	eba2 020e 	sub.w	r2, r2, lr
 8005faa:	4565      	cmp	r5, ip
 8005fac:	bf88      	it	hi
 8005fae:	2200      	movhi	r2, #0
 8005fb0:	4413      	add	r3, r2
 8005fb2:	1a18      	subs	r0, r3, r0
 8005fb4:	b003      	add	sp, #12
 8005fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fbc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005fc0:	e7ed      	b.n	8005f9e <__exponent+0x4c>
 8005fc2:	2330      	movs	r3, #48	; 0x30
 8005fc4:	3130      	adds	r1, #48	; 0x30
 8005fc6:	7083      	strb	r3, [r0, #2]
 8005fc8:	70c1      	strb	r1, [r0, #3]
 8005fca:	1d03      	adds	r3, r0, #4
 8005fcc:	e7f1      	b.n	8005fb2 <__exponent+0x60>
	...

08005fd0 <_printf_float>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	b091      	sub	sp, #68	; 0x44
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005fdc:	4616      	mov	r6, r2
 8005fde:	461f      	mov	r7, r3
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	f001 fa33 	bl	800744c <_localeconv_r>
 8005fe6:	6803      	ldr	r3, [r0, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	9309      	str	r3, [sp, #36]	; 0x24
 8005fec:	f7fa f910 	bl	8000210 <strlen>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff8:	900a      	str	r0, [sp, #40]	; 0x28
 8005ffa:	3307      	adds	r3, #7
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	f103 0208 	add.w	r2, r3, #8
 8006004:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006008:	f8d4 b000 	ldr.w	fp, [r4]
 800600c:	f8c8 2000 	str.w	r2, [r8]
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006018:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800601c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006020:	930b      	str	r3, [sp, #44]	; 0x2c
 8006022:	f04f 32ff 	mov.w	r2, #4294967295
 8006026:	4640      	mov	r0, r8
 8006028:	4b9c      	ldr	r3, [pc, #624]	; (800629c <_printf_float+0x2cc>)
 800602a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800602c:	f7fa fd4e 	bl	8000acc <__aeabi_dcmpun>
 8006030:	bb70      	cbnz	r0, 8006090 <_printf_float+0xc0>
 8006032:	f04f 32ff 	mov.w	r2, #4294967295
 8006036:	4640      	mov	r0, r8
 8006038:	4b98      	ldr	r3, [pc, #608]	; (800629c <_printf_float+0x2cc>)
 800603a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800603c:	f7fa fd28 	bl	8000a90 <__aeabi_dcmple>
 8006040:	bb30      	cbnz	r0, 8006090 <_printf_float+0xc0>
 8006042:	2200      	movs	r2, #0
 8006044:	2300      	movs	r3, #0
 8006046:	4640      	mov	r0, r8
 8006048:	4651      	mov	r1, sl
 800604a:	f7fa fd17 	bl	8000a7c <__aeabi_dcmplt>
 800604e:	b110      	cbz	r0, 8006056 <_printf_float+0x86>
 8006050:	232d      	movs	r3, #45	; 0x2d
 8006052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006056:	4b92      	ldr	r3, [pc, #584]	; (80062a0 <_printf_float+0x2d0>)
 8006058:	4892      	ldr	r0, [pc, #584]	; (80062a4 <_printf_float+0x2d4>)
 800605a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800605e:	bf94      	ite	ls
 8006060:	4698      	movls	r8, r3
 8006062:	4680      	movhi	r8, r0
 8006064:	2303      	movs	r3, #3
 8006066:	f04f 0a00 	mov.w	sl, #0
 800606a:	6123      	str	r3, [r4, #16]
 800606c:	f02b 0304 	bic.w	r3, fp, #4
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	4633      	mov	r3, r6
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	9700      	str	r7, [sp, #0]
 800607a:	aa0f      	add	r2, sp, #60	; 0x3c
 800607c:	f000 f9d4 	bl	8006428 <_printf_common>
 8006080:	3001      	adds	r0, #1
 8006082:	f040 8090 	bne.w	80061a6 <_printf_float+0x1d6>
 8006086:	f04f 30ff 	mov.w	r0, #4294967295
 800608a:	b011      	add	sp, #68	; 0x44
 800608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006090:	4642      	mov	r2, r8
 8006092:	4653      	mov	r3, sl
 8006094:	4640      	mov	r0, r8
 8006096:	4651      	mov	r1, sl
 8006098:	f7fa fd18 	bl	8000acc <__aeabi_dcmpun>
 800609c:	b148      	cbz	r0, 80060b2 <_printf_float+0xe2>
 800609e:	f1ba 0f00 	cmp.w	sl, #0
 80060a2:	bfb8      	it	lt
 80060a4:	232d      	movlt	r3, #45	; 0x2d
 80060a6:	4880      	ldr	r0, [pc, #512]	; (80062a8 <_printf_float+0x2d8>)
 80060a8:	bfb8      	it	lt
 80060aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060ae:	4b7f      	ldr	r3, [pc, #508]	; (80062ac <_printf_float+0x2dc>)
 80060b0:	e7d3      	b.n	800605a <_printf_float+0x8a>
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	d142      	bne.n	8006142 <_printf_float+0x172>
 80060bc:	2306      	movs	r3, #6
 80060be:	6063      	str	r3, [r4, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	9206      	str	r2, [sp, #24]
 80060c4:	aa0e      	add	r2, sp, #56	; 0x38
 80060c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80060ca:	aa0d      	add	r2, sp, #52	; 0x34
 80060cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80060d0:	9203      	str	r2, [sp, #12]
 80060d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80060d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	6863      	ldr	r3, [r4, #4]
 80060de:	4642      	mov	r2, r8
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	4628      	mov	r0, r5
 80060e4:	4653      	mov	r3, sl
 80060e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80060e8:	f7ff fed4 	bl	8005e94 <__cvt>
 80060ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ee:	4680      	mov	r8, r0
 80060f0:	2947      	cmp	r1, #71	; 0x47
 80060f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060f4:	d108      	bne.n	8006108 <_printf_float+0x138>
 80060f6:	1cc8      	adds	r0, r1, #3
 80060f8:	db02      	blt.n	8006100 <_printf_float+0x130>
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	4299      	cmp	r1, r3
 80060fe:	dd40      	ble.n	8006182 <_printf_float+0x1b2>
 8006100:	f1a9 0902 	sub.w	r9, r9, #2
 8006104:	fa5f f989 	uxtb.w	r9, r9
 8006108:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800610c:	d81f      	bhi.n	800614e <_printf_float+0x17e>
 800610e:	464a      	mov	r2, r9
 8006110:	3901      	subs	r1, #1
 8006112:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006116:	910d      	str	r1, [sp, #52]	; 0x34
 8006118:	f7ff ff1b 	bl	8005f52 <__exponent>
 800611c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800611e:	4682      	mov	sl, r0
 8006120:	1813      	adds	r3, r2, r0
 8006122:	2a01      	cmp	r2, #1
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	dc02      	bgt.n	800612e <_printf_float+0x15e>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	07d2      	lsls	r2, r2, #31
 800612c:	d501      	bpl.n	8006132 <_printf_float+0x162>
 800612e:	3301      	adds	r3, #1
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006136:	2b00      	cmp	r3, #0
 8006138:	d09b      	beq.n	8006072 <_printf_float+0xa2>
 800613a:	232d      	movs	r3, #45	; 0x2d
 800613c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006140:	e797      	b.n	8006072 <_printf_float+0xa2>
 8006142:	2947      	cmp	r1, #71	; 0x47
 8006144:	d1bc      	bne.n	80060c0 <_printf_float+0xf0>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1ba      	bne.n	80060c0 <_printf_float+0xf0>
 800614a:	2301      	movs	r3, #1
 800614c:	e7b7      	b.n	80060be <_printf_float+0xee>
 800614e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006152:	d118      	bne.n	8006186 <_printf_float+0x1b6>
 8006154:	2900      	cmp	r1, #0
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	dd0b      	ble.n	8006172 <_printf_float+0x1a2>
 800615a:	6121      	str	r1, [r4, #16]
 800615c:	b913      	cbnz	r3, 8006164 <_printf_float+0x194>
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	07d0      	lsls	r0, r2, #31
 8006162:	d502      	bpl.n	800616a <_printf_float+0x19a>
 8006164:	3301      	adds	r3, #1
 8006166:	440b      	add	r3, r1
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	f04f 0a00 	mov.w	sl, #0
 800616e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006170:	e7df      	b.n	8006132 <_printf_float+0x162>
 8006172:	b913      	cbnz	r3, 800617a <_printf_float+0x1aa>
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	07d2      	lsls	r2, r2, #31
 8006178:	d501      	bpl.n	800617e <_printf_float+0x1ae>
 800617a:	3302      	adds	r3, #2
 800617c:	e7f4      	b.n	8006168 <_printf_float+0x198>
 800617e:	2301      	movs	r3, #1
 8006180:	e7f2      	b.n	8006168 <_printf_float+0x198>
 8006182:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006188:	4299      	cmp	r1, r3
 800618a:	db05      	blt.n	8006198 <_printf_float+0x1c8>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	6121      	str	r1, [r4, #16]
 8006190:	07d8      	lsls	r0, r3, #31
 8006192:	d5ea      	bpl.n	800616a <_printf_float+0x19a>
 8006194:	1c4b      	adds	r3, r1, #1
 8006196:	e7e7      	b.n	8006168 <_printf_float+0x198>
 8006198:	2900      	cmp	r1, #0
 800619a:	bfcc      	ite	gt
 800619c:	2201      	movgt	r2, #1
 800619e:	f1c1 0202 	rsble	r2, r1, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	e7e0      	b.n	8006168 <_printf_float+0x198>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	055a      	lsls	r2, r3, #21
 80061aa:	d407      	bmi.n	80061bc <_printf_float+0x1ec>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	4642      	mov	r2, r8
 80061b0:	4631      	mov	r1, r6
 80061b2:	4628      	mov	r0, r5
 80061b4:	47b8      	blx	r7
 80061b6:	3001      	adds	r0, #1
 80061b8:	d12b      	bne.n	8006212 <_printf_float+0x242>
 80061ba:	e764      	b.n	8006086 <_printf_float+0xb6>
 80061bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80061c0:	f240 80dd 	bls.w	800637e <_printf_float+0x3ae>
 80061c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061c8:	2200      	movs	r2, #0
 80061ca:	2300      	movs	r3, #0
 80061cc:	f7fa fc4c 	bl	8000a68 <__aeabi_dcmpeq>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d033      	beq.n	800623c <_printf_float+0x26c>
 80061d4:	2301      	movs	r3, #1
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	4a35      	ldr	r2, [pc, #212]	; (80062b0 <_printf_float+0x2e0>)
 80061dc:	47b8      	blx	r7
 80061de:	3001      	adds	r0, #1
 80061e0:	f43f af51 	beq.w	8006086 <_printf_float+0xb6>
 80061e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061e8:	429a      	cmp	r2, r3
 80061ea:	db02      	blt.n	80061f2 <_printf_float+0x222>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	07d8      	lsls	r0, r3, #31
 80061f0:	d50f      	bpl.n	8006212 <_printf_float+0x242>
 80061f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061f6:	4631      	mov	r1, r6
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b8      	blx	r7
 80061fc:	3001      	adds	r0, #1
 80061fe:	f43f af42 	beq.w	8006086 <_printf_float+0xb6>
 8006202:	f04f 0800 	mov.w	r8, #0
 8006206:	f104 091a 	add.w	r9, r4, #26
 800620a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620c:	3b01      	subs	r3, #1
 800620e:	4543      	cmp	r3, r8
 8006210:	dc09      	bgt.n	8006226 <_printf_float+0x256>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	079b      	lsls	r3, r3, #30
 8006216:	f100 8102 	bmi.w	800641e <_printf_float+0x44e>
 800621a:	68e0      	ldr	r0, [r4, #12]
 800621c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800621e:	4298      	cmp	r0, r3
 8006220:	bfb8      	it	lt
 8006222:	4618      	movlt	r0, r3
 8006224:	e731      	b.n	800608a <_printf_float+0xba>
 8006226:	2301      	movs	r3, #1
 8006228:	464a      	mov	r2, r9
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	f43f af28 	beq.w	8006086 <_printf_float+0xb6>
 8006236:	f108 0801 	add.w	r8, r8, #1
 800623a:	e7e6      	b.n	800620a <_printf_float+0x23a>
 800623c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800623e:	2b00      	cmp	r3, #0
 8006240:	dc38      	bgt.n	80062b4 <_printf_float+0x2e4>
 8006242:	2301      	movs	r3, #1
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <_printf_float+0x2e0>)
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f af1a 	beq.w	8006086 <_printf_float+0xb6>
 8006252:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006256:	4313      	orrs	r3, r2
 8006258:	d102      	bne.n	8006260 <_printf_float+0x290>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	07d9      	lsls	r1, r3, #31
 800625e:	d5d8      	bpl.n	8006212 <_printf_float+0x242>
 8006260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f af0b 	beq.w	8006086 <_printf_float+0xb6>
 8006270:	f04f 0900 	mov.w	r9, #0
 8006274:	f104 0a1a 	add.w	sl, r4, #26
 8006278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800627a:	425b      	negs	r3, r3
 800627c:	454b      	cmp	r3, r9
 800627e:	dc01      	bgt.n	8006284 <_printf_float+0x2b4>
 8006280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006282:	e794      	b.n	80061ae <_printf_float+0x1de>
 8006284:	2301      	movs	r3, #1
 8006286:	4652      	mov	r2, sl
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f aef9 	beq.w	8006086 <_printf_float+0xb6>
 8006294:	f109 0901 	add.w	r9, r9, #1
 8006298:	e7ee      	b.n	8006278 <_printf_float+0x2a8>
 800629a:	bf00      	nop
 800629c:	7fefffff 	.word	0x7fefffff
 80062a0:	080089bc 	.word	0x080089bc
 80062a4:	080089c0 	.word	0x080089c0
 80062a8:	080089c8 	.word	0x080089c8
 80062ac:	080089c4 	.word	0x080089c4
 80062b0:	080089cc 	.word	0x080089cc
 80062b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062b8:	429a      	cmp	r2, r3
 80062ba:	bfa8      	it	ge
 80062bc:	461a      	movge	r2, r3
 80062be:	2a00      	cmp	r2, #0
 80062c0:	4691      	mov	r9, r2
 80062c2:	dc37      	bgt.n	8006334 <_printf_float+0x364>
 80062c4:	f04f 0b00 	mov.w	fp, #0
 80062c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062cc:	f104 021a 	add.w	r2, r4, #26
 80062d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80062d4:	ebaa 0309 	sub.w	r3, sl, r9
 80062d8:	455b      	cmp	r3, fp
 80062da:	dc33      	bgt.n	8006344 <_printf_float+0x374>
 80062dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062e0:	429a      	cmp	r2, r3
 80062e2:	db3b      	blt.n	800635c <_printf_float+0x38c>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	07da      	lsls	r2, r3, #31
 80062e8:	d438      	bmi.n	800635c <_printf_float+0x38c>
 80062ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062ee:	eba3 020a 	sub.w	r2, r3, sl
 80062f2:	eba3 0901 	sub.w	r9, r3, r1
 80062f6:	4591      	cmp	r9, r2
 80062f8:	bfa8      	it	ge
 80062fa:	4691      	movge	r9, r2
 80062fc:	f1b9 0f00 	cmp.w	r9, #0
 8006300:	dc34      	bgt.n	800636c <_printf_float+0x39c>
 8006302:	f04f 0800 	mov.w	r8, #0
 8006306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800630a:	f104 0a1a 	add.w	sl, r4, #26
 800630e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	eba3 0309 	sub.w	r3, r3, r9
 8006318:	4543      	cmp	r3, r8
 800631a:	f77f af7a 	ble.w	8006212 <_printf_float+0x242>
 800631e:	2301      	movs	r3, #1
 8006320:	4652      	mov	r2, sl
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	f43f aeac 	beq.w	8006086 <_printf_float+0xb6>
 800632e:	f108 0801 	add.w	r8, r8, #1
 8006332:	e7ec      	b.n	800630e <_printf_float+0x33e>
 8006334:	4613      	mov	r3, r2
 8006336:	4631      	mov	r1, r6
 8006338:	4642      	mov	r2, r8
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d1c0      	bne.n	80062c4 <_printf_float+0x2f4>
 8006342:	e6a0      	b.n	8006086 <_printf_float+0xb6>
 8006344:	2301      	movs	r3, #1
 8006346:	4631      	mov	r1, r6
 8006348:	4628      	mov	r0, r5
 800634a:	920b      	str	r2, [sp, #44]	; 0x2c
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f ae99 	beq.w	8006086 <_printf_float+0xb6>
 8006354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006356:	f10b 0b01 	add.w	fp, fp, #1
 800635a:	e7b9      	b.n	80062d0 <_printf_float+0x300>
 800635c:	4631      	mov	r1, r6
 800635e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	d1bf      	bne.n	80062ea <_printf_float+0x31a>
 800636a:	e68c      	b.n	8006086 <_printf_float+0xb6>
 800636c:	464b      	mov	r3, r9
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	eb08 020a 	add.w	r2, r8, sl
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	d1c2      	bne.n	8006302 <_printf_float+0x332>
 800637c:	e683      	b.n	8006086 <_printf_float+0xb6>
 800637e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006380:	2a01      	cmp	r2, #1
 8006382:	dc01      	bgt.n	8006388 <_printf_float+0x3b8>
 8006384:	07db      	lsls	r3, r3, #31
 8006386:	d537      	bpl.n	80063f8 <_printf_float+0x428>
 8006388:	2301      	movs	r3, #1
 800638a:	4642      	mov	r2, r8
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f ae77 	beq.w	8006086 <_printf_float+0xb6>
 8006398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	f43f ae6f 	beq.w	8006086 <_printf_float+0xb6>
 80063a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	f7fa fb5a 	bl	8000a68 <__aeabi_dcmpeq>
 80063b4:	b9d8      	cbnz	r0, 80063ee <_printf_float+0x41e>
 80063b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b8:	f108 0201 	add.w	r2, r8, #1
 80063bc:	3b01      	subs	r3, #1
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	47b8      	blx	r7
 80063c4:	3001      	adds	r0, #1
 80063c6:	d10e      	bne.n	80063e6 <_printf_float+0x416>
 80063c8:	e65d      	b.n	8006086 <_printf_float+0xb6>
 80063ca:	2301      	movs	r3, #1
 80063cc:	464a      	mov	r2, r9
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f ae56 	beq.w	8006086 <_printf_float+0xb6>
 80063da:	f108 0801 	add.w	r8, r8, #1
 80063de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063e0:	3b01      	subs	r3, #1
 80063e2:	4543      	cmp	r3, r8
 80063e4:	dcf1      	bgt.n	80063ca <_printf_float+0x3fa>
 80063e6:	4653      	mov	r3, sl
 80063e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063ec:	e6e0      	b.n	80061b0 <_printf_float+0x1e0>
 80063ee:	f04f 0800 	mov.w	r8, #0
 80063f2:	f104 091a 	add.w	r9, r4, #26
 80063f6:	e7f2      	b.n	80063de <_printf_float+0x40e>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4642      	mov	r2, r8
 80063fc:	e7df      	b.n	80063be <_printf_float+0x3ee>
 80063fe:	2301      	movs	r3, #1
 8006400:	464a      	mov	r2, r9
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f ae3c 	beq.w	8006086 <_printf_float+0xb6>
 800640e:	f108 0801 	add.w	r8, r8, #1
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006416:	1a5b      	subs	r3, r3, r1
 8006418:	4543      	cmp	r3, r8
 800641a:	dcf0      	bgt.n	80063fe <_printf_float+0x42e>
 800641c:	e6fd      	b.n	800621a <_printf_float+0x24a>
 800641e:	f04f 0800 	mov.w	r8, #0
 8006422:	f104 0919 	add.w	r9, r4, #25
 8006426:	e7f4      	b.n	8006412 <_printf_float+0x442>

08006428 <_printf_common>:
 8006428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	4616      	mov	r6, r2
 800642e:	4699      	mov	r9, r3
 8006430:	688a      	ldr	r2, [r1, #8]
 8006432:	690b      	ldr	r3, [r1, #16]
 8006434:	4607      	mov	r7, r0
 8006436:	4293      	cmp	r3, r2
 8006438:	bfb8      	it	lt
 800643a:	4613      	movlt	r3, r2
 800643c:	6033      	str	r3, [r6, #0]
 800643e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006442:	460c      	mov	r4, r1
 8006444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006448:	b10a      	cbz	r2, 800644e <_printf_common+0x26>
 800644a:	3301      	adds	r3, #1
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	0699      	lsls	r1, r3, #26
 8006452:	bf42      	ittt	mi
 8006454:	6833      	ldrmi	r3, [r6, #0]
 8006456:	3302      	addmi	r3, #2
 8006458:	6033      	strmi	r3, [r6, #0]
 800645a:	6825      	ldr	r5, [r4, #0]
 800645c:	f015 0506 	ands.w	r5, r5, #6
 8006460:	d106      	bne.n	8006470 <_printf_common+0x48>
 8006462:	f104 0a19 	add.w	sl, r4, #25
 8006466:	68e3      	ldr	r3, [r4, #12]
 8006468:	6832      	ldr	r2, [r6, #0]
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	42ab      	cmp	r3, r5
 800646e:	dc28      	bgt.n	80064c2 <_printf_common+0x9a>
 8006470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006474:	1e13      	subs	r3, r2, #0
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	bf18      	it	ne
 800647a:	2301      	movne	r3, #1
 800647c:	0692      	lsls	r2, r2, #26
 800647e:	d42d      	bmi.n	80064dc <_printf_common+0xb4>
 8006480:	4649      	mov	r1, r9
 8006482:	4638      	mov	r0, r7
 8006484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006488:	47c0      	blx	r8
 800648a:	3001      	adds	r0, #1
 800648c:	d020      	beq.n	80064d0 <_printf_common+0xa8>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	68e5      	ldr	r5, [r4, #12]
 8006492:	f003 0306 	and.w	r3, r3, #6
 8006496:	2b04      	cmp	r3, #4
 8006498:	bf18      	it	ne
 800649a:	2500      	movne	r5, #0
 800649c:	6832      	ldr	r2, [r6, #0]
 800649e:	f04f 0600 	mov.w	r6, #0
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	bf08      	it	eq
 80064a6:	1aad      	subeq	r5, r5, r2
 80064a8:	6922      	ldr	r2, [r4, #16]
 80064aa:	bf08      	it	eq
 80064ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bfc4      	itt	gt
 80064b4:	1a9b      	subgt	r3, r3, r2
 80064b6:	18ed      	addgt	r5, r5, r3
 80064b8:	341a      	adds	r4, #26
 80064ba:	42b5      	cmp	r5, r6
 80064bc:	d11a      	bne.n	80064f4 <_printf_common+0xcc>
 80064be:	2000      	movs	r0, #0
 80064c0:	e008      	b.n	80064d4 <_printf_common+0xac>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4652      	mov	r2, sl
 80064c6:	4649      	mov	r1, r9
 80064c8:	4638      	mov	r0, r7
 80064ca:	47c0      	blx	r8
 80064cc:	3001      	adds	r0, #1
 80064ce:	d103      	bne.n	80064d8 <_printf_common+0xb0>
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d8:	3501      	adds	r5, #1
 80064da:	e7c4      	b.n	8006466 <_printf_common+0x3e>
 80064dc:	2030      	movs	r0, #48	; 0x30
 80064de:	18e1      	adds	r1, r4, r3
 80064e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064ea:	4422      	add	r2, r4
 80064ec:	3302      	adds	r3, #2
 80064ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064f2:	e7c5      	b.n	8006480 <_printf_common+0x58>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4622      	mov	r2, r4
 80064f8:	4649      	mov	r1, r9
 80064fa:	4638      	mov	r0, r7
 80064fc:	47c0      	blx	r8
 80064fe:	3001      	adds	r0, #1
 8006500:	d0e6      	beq.n	80064d0 <_printf_common+0xa8>
 8006502:	3601      	adds	r6, #1
 8006504:	e7d9      	b.n	80064ba <_printf_common+0x92>
	...

08006508 <_printf_i>:
 8006508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800650c:	7e0f      	ldrb	r7, [r1, #24]
 800650e:	4691      	mov	r9, r2
 8006510:	2f78      	cmp	r7, #120	; 0x78
 8006512:	4680      	mov	r8, r0
 8006514:	460c      	mov	r4, r1
 8006516:	469a      	mov	sl, r3
 8006518:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800651a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800651e:	d807      	bhi.n	8006530 <_printf_i+0x28>
 8006520:	2f62      	cmp	r7, #98	; 0x62
 8006522:	d80a      	bhi.n	800653a <_printf_i+0x32>
 8006524:	2f00      	cmp	r7, #0
 8006526:	f000 80d9 	beq.w	80066dc <_printf_i+0x1d4>
 800652a:	2f58      	cmp	r7, #88	; 0x58
 800652c:	f000 80a4 	beq.w	8006678 <_printf_i+0x170>
 8006530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006538:	e03a      	b.n	80065b0 <_printf_i+0xa8>
 800653a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800653e:	2b15      	cmp	r3, #21
 8006540:	d8f6      	bhi.n	8006530 <_printf_i+0x28>
 8006542:	a101      	add	r1, pc, #4	; (adr r1, 8006548 <_printf_i+0x40>)
 8006544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006548:	080065a1 	.word	0x080065a1
 800654c:	080065b5 	.word	0x080065b5
 8006550:	08006531 	.word	0x08006531
 8006554:	08006531 	.word	0x08006531
 8006558:	08006531 	.word	0x08006531
 800655c:	08006531 	.word	0x08006531
 8006560:	080065b5 	.word	0x080065b5
 8006564:	08006531 	.word	0x08006531
 8006568:	08006531 	.word	0x08006531
 800656c:	08006531 	.word	0x08006531
 8006570:	08006531 	.word	0x08006531
 8006574:	080066c3 	.word	0x080066c3
 8006578:	080065e5 	.word	0x080065e5
 800657c:	080066a5 	.word	0x080066a5
 8006580:	08006531 	.word	0x08006531
 8006584:	08006531 	.word	0x08006531
 8006588:	080066e5 	.word	0x080066e5
 800658c:	08006531 	.word	0x08006531
 8006590:	080065e5 	.word	0x080065e5
 8006594:	08006531 	.word	0x08006531
 8006598:	08006531 	.word	0x08006531
 800659c:	080066ad 	.word	0x080066ad
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	602a      	str	r2, [r5, #0]
 80065a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0a4      	b.n	80066fe <_printf_i+0x1f6>
 80065b4:	6820      	ldr	r0, [r4, #0]
 80065b6:	6829      	ldr	r1, [r5, #0]
 80065b8:	0606      	lsls	r6, r0, #24
 80065ba:	f101 0304 	add.w	r3, r1, #4
 80065be:	d50a      	bpl.n	80065d6 <_printf_i+0xce>
 80065c0:	680e      	ldr	r6, [r1, #0]
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	da03      	bge.n	80065d0 <_printf_i+0xc8>
 80065c8:	232d      	movs	r3, #45	; 0x2d
 80065ca:	4276      	negs	r6, r6
 80065cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d0:	230a      	movs	r3, #10
 80065d2:	485e      	ldr	r0, [pc, #376]	; (800674c <_printf_i+0x244>)
 80065d4:	e019      	b.n	800660a <_printf_i+0x102>
 80065d6:	680e      	ldr	r6, [r1, #0]
 80065d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065dc:	602b      	str	r3, [r5, #0]
 80065de:	bf18      	it	ne
 80065e0:	b236      	sxthne	r6, r6
 80065e2:	e7ef      	b.n	80065c4 <_printf_i+0xbc>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	6820      	ldr	r0, [r4, #0]
 80065e8:	1d19      	adds	r1, r3, #4
 80065ea:	6029      	str	r1, [r5, #0]
 80065ec:	0601      	lsls	r1, r0, #24
 80065ee:	d501      	bpl.n	80065f4 <_printf_i+0xec>
 80065f0:	681e      	ldr	r6, [r3, #0]
 80065f2:	e002      	b.n	80065fa <_printf_i+0xf2>
 80065f4:	0646      	lsls	r6, r0, #25
 80065f6:	d5fb      	bpl.n	80065f0 <_printf_i+0xe8>
 80065f8:	881e      	ldrh	r6, [r3, #0]
 80065fa:	2f6f      	cmp	r7, #111	; 0x6f
 80065fc:	bf0c      	ite	eq
 80065fe:	2308      	moveq	r3, #8
 8006600:	230a      	movne	r3, #10
 8006602:	4852      	ldr	r0, [pc, #328]	; (800674c <_printf_i+0x244>)
 8006604:	2100      	movs	r1, #0
 8006606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800660a:	6865      	ldr	r5, [r4, #4]
 800660c:	2d00      	cmp	r5, #0
 800660e:	bfa8      	it	ge
 8006610:	6821      	ldrge	r1, [r4, #0]
 8006612:	60a5      	str	r5, [r4, #8]
 8006614:	bfa4      	itt	ge
 8006616:	f021 0104 	bicge.w	r1, r1, #4
 800661a:	6021      	strge	r1, [r4, #0]
 800661c:	b90e      	cbnz	r6, 8006622 <_printf_i+0x11a>
 800661e:	2d00      	cmp	r5, #0
 8006620:	d04d      	beq.n	80066be <_printf_i+0x1b6>
 8006622:	4615      	mov	r5, r2
 8006624:	fbb6 f1f3 	udiv	r1, r6, r3
 8006628:	fb03 6711 	mls	r7, r3, r1, r6
 800662c:	5dc7      	ldrb	r7, [r0, r7]
 800662e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006632:	4637      	mov	r7, r6
 8006634:	42bb      	cmp	r3, r7
 8006636:	460e      	mov	r6, r1
 8006638:	d9f4      	bls.n	8006624 <_printf_i+0x11c>
 800663a:	2b08      	cmp	r3, #8
 800663c:	d10b      	bne.n	8006656 <_printf_i+0x14e>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	07de      	lsls	r6, r3, #31
 8006642:	d508      	bpl.n	8006656 <_printf_i+0x14e>
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	6861      	ldr	r1, [r4, #4]
 8006648:	4299      	cmp	r1, r3
 800664a:	bfde      	ittt	le
 800664c:	2330      	movle	r3, #48	; 0x30
 800664e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006652:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006656:	1b52      	subs	r2, r2, r5
 8006658:	6122      	str	r2, [r4, #16]
 800665a:	464b      	mov	r3, r9
 800665c:	4621      	mov	r1, r4
 800665e:	4640      	mov	r0, r8
 8006660:	f8cd a000 	str.w	sl, [sp]
 8006664:	aa03      	add	r2, sp, #12
 8006666:	f7ff fedf 	bl	8006428 <_printf_common>
 800666a:	3001      	adds	r0, #1
 800666c:	d14c      	bne.n	8006708 <_printf_i+0x200>
 800666e:	f04f 30ff 	mov.w	r0, #4294967295
 8006672:	b004      	add	sp, #16
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	4834      	ldr	r0, [pc, #208]	; (800674c <_printf_i+0x244>)
 800667a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800667e:	6829      	ldr	r1, [r5, #0]
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	f851 6b04 	ldr.w	r6, [r1], #4
 8006686:	6029      	str	r1, [r5, #0]
 8006688:	061d      	lsls	r5, r3, #24
 800668a:	d514      	bpl.n	80066b6 <_printf_i+0x1ae>
 800668c:	07df      	lsls	r7, r3, #31
 800668e:	bf44      	itt	mi
 8006690:	f043 0320 	orrmi.w	r3, r3, #32
 8006694:	6023      	strmi	r3, [r4, #0]
 8006696:	b91e      	cbnz	r6, 80066a0 <_printf_i+0x198>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	f023 0320 	bic.w	r3, r3, #32
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	2310      	movs	r3, #16
 80066a2:	e7af      	b.n	8006604 <_printf_i+0xfc>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	f043 0320 	orr.w	r3, r3, #32
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	2378      	movs	r3, #120	; 0x78
 80066ae:	4828      	ldr	r0, [pc, #160]	; (8006750 <_printf_i+0x248>)
 80066b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066b4:	e7e3      	b.n	800667e <_printf_i+0x176>
 80066b6:	0659      	lsls	r1, r3, #25
 80066b8:	bf48      	it	mi
 80066ba:	b2b6      	uxthmi	r6, r6
 80066bc:	e7e6      	b.n	800668c <_printf_i+0x184>
 80066be:	4615      	mov	r5, r2
 80066c0:	e7bb      	b.n	800663a <_printf_i+0x132>
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	6826      	ldr	r6, [r4, #0]
 80066c6:	1d18      	adds	r0, r3, #4
 80066c8:	6961      	ldr	r1, [r4, #20]
 80066ca:	6028      	str	r0, [r5, #0]
 80066cc:	0635      	lsls	r5, r6, #24
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	d501      	bpl.n	80066d6 <_printf_i+0x1ce>
 80066d2:	6019      	str	r1, [r3, #0]
 80066d4:	e002      	b.n	80066dc <_printf_i+0x1d4>
 80066d6:	0670      	lsls	r0, r6, #25
 80066d8:	d5fb      	bpl.n	80066d2 <_printf_i+0x1ca>
 80066da:	8019      	strh	r1, [r3, #0]
 80066dc:	2300      	movs	r3, #0
 80066de:	4615      	mov	r5, r2
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	e7ba      	b.n	800665a <_printf_i+0x152>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	2100      	movs	r1, #0
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	602a      	str	r2, [r5, #0]
 80066ec:	681d      	ldr	r5, [r3, #0]
 80066ee:	6862      	ldr	r2, [r4, #4]
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 feb7 	bl	8007464 <memchr>
 80066f6:	b108      	cbz	r0, 80066fc <_printf_i+0x1f4>
 80066f8:	1b40      	subs	r0, r0, r5
 80066fa:	6060      	str	r0, [r4, #4]
 80066fc:	6863      	ldr	r3, [r4, #4]
 80066fe:	6123      	str	r3, [r4, #16]
 8006700:	2300      	movs	r3, #0
 8006702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006706:	e7a8      	b.n	800665a <_printf_i+0x152>
 8006708:	462a      	mov	r2, r5
 800670a:	4649      	mov	r1, r9
 800670c:	4640      	mov	r0, r8
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	47d0      	blx	sl
 8006712:	3001      	adds	r0, #1
 8006714:	d0ab      	beq.n	800666e <_printf_i+0x166>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	079b      	lsls	r3, r3, #30
 800671a:	d413      	bmi.n	8006744 <_printf_i+0x23c>
 800671c:	68e0      	ldr	r0, [r4, #12]
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	4298      	cmp	r0, r3
 8006722:	bfb8      	it	lt
 8006724:	4618      	movlt	r0, r3
 8006726:	e7a4      	b.n	8006672 <_printf_i+0x16a>
 8006728:	2301      	movs	r3, #1
 800672a:	4632      	mov	r2, r6
 800672c:	4649      	mov	r1, r9
 800672e:	4640      	mov	r0, r8
 8006730:	47d0      	blx	sl
 8006732:	3001      	adds	r0, #1
 8006734:	d09b      	beq.n	800666e <_printf_i+0x166>
 8006736:	3501      	adds	r5, #1
 8006738:	68e3      	ldr	r3, [r4, #12]
 800673a:	9903      	ldr	r1, [sp, #12]
 800673c:	1a5b      	subs	r3, r3, r1
 800673e:	42ab      	cmp	r3, r5
 8006740:	dcf2      	bgt.n	8006728 <_printf_i+0x220>
 8006742:	e7eb      	b.n	800671c <_printf_i+0x214>
 8006744:	2500      	movs	r5, #0
 8006746:	f104 0619 	add.w	r6, r4, #25
 800674a:	e7f5      	b.n	8006738 <_printf_i+0x230>
 800674c:	080089ce 	.word	0x080089ce
 8006750:	080089df 	.word	0x080089df

08006754 <quorem>:
 8006754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	6903      	ldr	r3, [r0, #16]
 800675a:	690c      	ldr	r4, [r1, #16]
 800675c:	4607      	mov	r7, r0
 800675e:	42a3      	cmp	r3, r4
 8006760:	f2c0 8082 	blt.w	8006868 <quorem+0x114>
 8006764:	3c01      	subs	r4, #1
 8006766:	f100 0514 	add.w	r5, r0, #20
 800676a:	f101 0814 	add.w	r8, r1, #20
 800676e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800677c:	3301      	adds	r3, #1
 800677e:	429a      	cmp	r2, r3
 8006780:	fbb2 f6f3 	udiv	r6, r2, r3
 8006784:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006788:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800678c:	d331      	bcc.n	80067f2 <quorem+0x9e>
 800678e:	f04f 0e00 	mov.w	lr, #0
 8006792:	4640      	mov	r0, r8
 8006794:	46ac      	mov	ip, r5
 8006796:	46f2      	mov	sl, lr
 8006798:	f850 2b04 	ldr.w	r2, [r0], #4
 800679c:	b293      	uxth	r3, r2
 800679e:	fb06 e303 	mla	r3, r6, r3, lr
 80067a2:	0c12      	lsrs	r2, r2, #16
 80067a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	fb06 e202 	mla	r2, r6, r2, lr
 80067ae:	ebaa 0303 	sub.w	r3, sl, r3
 80067b2:	f8dc a000 	ldr.w	sl, [ip]
 80067b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067ba:	fa1f fa8a 	uxth.w	sl, sl
 80067be:	4453      	add	r3, sl
 80067c0:	f8dc a000 	ldr.w	sl, [ip]
 80067c4:	b292      	uxth	r2, r2
 80067c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067d4:	4581      	cmp	r9, r0
 80067d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067da:	f84c 3b04 	str.w	r3, [ip], #4
 80067de:	d2db      	bcs.n	8006798 <quorem+0x44>
 80067e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80067e4:	b92b      	cbnz	r3, 80067f2 <quorem+0x9e>
 80067e6:	9b01      	ldr	r3, [sp, #4]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	429d      	cmp	r5, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	d32f      	bcc.n	8006850 <quorem+0xfc>
 80067f0:	613c      	str	r4, [r7, #16]
 80067f2:	4638      	mov	r0, r7
 80067f4:	f001 f8d0 	bl	8007998 <__mcmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	db25      	blt.n	8006848 <quorem+0xf4>
 80067fc:	4628      	mov	r0, r5
 80067fe:	f04f 0c00 	mov.w	ip, #0
 8006802:	3601      	adds	r6, #1
 8006804:	f858 1b04 	ldr.w	r1, [r8], #4
 8006808:	f8d0 e000 	ldr.w	lr, [r0]
 800680c:	b28b      	uxth	r3, r1
 800680e:	ebac 0303 	sub.w	r3, ip, r3
 8006812:	fa1f f28e 	uxth.w	r2, lr
 8006816:	4413      	add	r3, r2
 8006818:	0c0a      	lsrs	r2, r1, #16
 800681a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800681e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006828:	45c1      	cmp	r9, r8
 800682a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800682e:	f840 3b04 	str.w	r3, [r0], #4
 8006832:	d2e7      	bcs.n	8006804 <quorem+0xb0>
 8006834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800683c:	b922      	cbnz	r2, 8006848 <quorem+0xf4>
 800683e:	3b04      	subs	r3, #4
 8006840:	429d      	cmp	r5, r3
 8006842:	461a      	mov	r2, r3
 8006844:	d30a      	bcc.n	800685c <quorem+0x108>
 8006846:	613c      	str	r4, [r7, #16]
 8006848:	4630      	mov	r0, r6
 800684a:	b003      	add	sp, #12
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	3b04      	subs	r3, #4
 8006854:	2a00      	cmp	r2, #0
 8006856:	d1cb      	bne.n	80067f0 <quorem+0x9c>
 8006858:	3c01      	subs	r4, #1
 800685a:	e7c6      	b.n	80067ea <quorem+0x96>
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	3b04      	subs	r3, #4
 8006860:	2a00      	cmp	r2, #0
 8006862:	d1f0      	bne.n	8006846 <quorem+0xf2>
 8006864:	3c01      	subs	r4, #1
 8006866:	e7eb      	b.n	8006840 <quorem+0xec>
 8006868:	2000      	movs	r0, #0
 800686a:	e7ee      	b.n	800684a <quorem+0xf6>
 800686c:	0000      	movs	r0, r0
	...

08006870 <_dtoa_r>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	4616      	mov	r6, r2
 8006876:	461f      	mov	r7, r3
 8006878:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800687a:	b099      	sub	sp, #100	; 0x64
 800687c:	4605      	mov	r5, r0
 800687e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006882:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006886:	b974      	cbnz	r4, 80068a6 <_dtoa_r+0x36>
 8006888:	2010      	movs	r0, #16
 800688a:	f000 fde3 	bl	8007454 <malloc>
 800688e:	4602      	mov	r2, r0
 8006890:	6268      	str	r0, [r5, #36]	; 0x24
 8006892:	b920      	cbnz	r0, 800689e <_dtoa_r+0x2e>
 8006894:	21ea      	movs	r1, #234	; 0xea
 8006896:	4ba8      	ldr	r3, [pc, #672]	; (8006b38 <_dtoa_r+0x2c8>)
 8006898:	48a8      	ldr	r0, [pc, #672]	; (8006b3c <_dtoa_r+0x2cc>)
 800689a:	f001 fa81 	bl	8007da0 <__assert_func>
 800689e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068a2:	6004      	str	r4, [r0, #0]
 80068a4:	60c4      	str	r4, [r0, #12]
 80068a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	b151      	cbz	r1, 80068c2 <_dtoa_r+0x52>
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	2301      	movs	r3, #1
 80068b0:	4093      	lsls	r3, r2
 80068b2:	604a      	str	r2, [r1, #4]
 80068b4:	608b      	str	r3, [r1, #8]
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fe30 	bl	800751c <_Bfree>
 80068bc:	2200      	movs	r2, #0
 80068be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	1e3b      	subs	r3, r7, #0
 80068c4:	bfaf      	iteee	ge
 80068c6:	2300      	movge	r3, #0
 80068c8:	2201      	movlt	r2, #1
 80068ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068ce:	9305      	strlt	r3, [sp, #20]
 80068d0:	bfa8      	it	ge
 80068d2:	f8c8 3000 	strge.w	r3, [r8]
 80068d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068da:	4b99      	ldr	r3, [pc, #612]	; (8006b40 <_dtoa_r+0x2d0>)
 80068dc:	bfb8      	it	lt
 80068de:	f8c8 2000 	strlt.w	r2, [r8]
 80068e2:	ea33 0309 	bics.w	r3, r3, r9
 80068e6:	d119      	bne.n	800691c <_dtoa_r+0xac>
 80068e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80068ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068f4:	4333      	orrs	r3, r6
 80068f6:	f000 857f 	beq.w	80073f8 <_dtoa_r+0xb88>
 80068fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068fc:	b953      	cbnz	r3, 8006914 <_dtoa_r+0xa4>
 80068fe:	4b91      	ldr	r3, [pc, #580]	; (8006b44 <_dtoa_r+0x2d4>)
 8006900:	e022      	b.n	8006948 <_dtoa_r+0xd8>
 8006902:	4b91      	ldr	r3, [pc, #580]	; (8006b48 <_dtoa_r+0x2d8>)
 8006904:	9303      	str	r3, [sp, #12]
 8006906:	3308      	adds	r3, #8
 8006908:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	9803      	ldr	r0, [sp, #12]
 800690e:	b019      	add	sp, #100	; 0x64
 8006910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	4b8b      	ldr	r3, [pc, #556]	; (8006b44 <_dtoa_r+0x2d4>)
 8006916:	9303      	str	r3, [sp, #12]
 8006918:	3303      	adds	r3, #3
 800691a:	e7f5      	b.n	8006908 <_dtoa_r+0x98>
 800691c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006920:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006928:	2200      	movs	r2, #0
 800692a:	2300      	movs	r3, #0
 800692c:	f7fa f89c 	bl	8000a68 <__aeabi_dcmpeq>
 8006930:	4680      	mov	r8, r0
 8006932:	b158      	cbz	r0, 800694c <_dtoa_r+0xdc>
 8006934:	2301      	movs	r3, #1
 8006936:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8558 	beq.w	80073f2 <_dtoa_r+0xb82>
 8006942:	4882      	ldr	r0, [pc, #520]	; (8006b4c <_dtoa_r+0x2dc>)
 8006944:	6018      	str	r0, [r3, #0]
 8006946:	1e43      	subs	r3, r0, #1
 8006948:	9303      	str	r3, [sp, #12]
 800694a:	e7df      	b.n	800690c <_dtoa_r+0x9c>
 800694c:	ab16      	add	r3, sp, #88	; 0x58
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	ab17      	add	r3, sp, #92	; 0x5c
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4628      	mov	r0, r5
 8006956:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800695a:	f001 f8c5 	bl	8007ae8 <__d2b>
 800695e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006962:	4683      	mov	fp, r0
 8006964:	2c00      	cmp	r4, #0
 8006966:	d07f      	beq.n	8006a68 <_dtoa_r+0x1f8>
 8006968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800696c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006976:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800697a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800697e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006982:	2200      	movs	r2, #0
 8006984:	4b72      	ldr	r3, [pc, #456]	; (8006b50 <_dtoa_r+0x2e0>)
 8006986:	f7f9 fc4f 	bl	8000228 <__aeabi_dsub>
 800698a:	a365      	add	r3, pc, #404	; (adr r3, 8006b20 <_dtoa_r+0x2b0>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fe02 	bl	8000598 <__aeabi_dmul>
 8006994:	a364      	add	r3, pc, #400	; (adr r3, 8006b28 <_dtoa_r+0x2b8>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f7f9 fc47 	bl	800022c <__adddf3>
 800699e:	4606      	mov	r6, r0
 80069a0:	4620      	mov	r0, r4
 80069a2:	460f      	mov	r7, r1
 80069a4:	f7f9 fd8e 	bl	80004c4 <__aeabi_i2d>
 80069a8:	a361      	add	r3, pc, #388	; (adr r3, 8006b30 <_dtoa_r+0x2c0>)
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f7f9 fdf3 	bl	8000598 <__aeabi_dmul>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7f9 fc37 	bl	800022c <__adddf3>
 80069be:	4606      	mov	r6, r0
 80069c0:	460f      	mov	r7, r1
 80069c2:	f7fa f899 	bl	8000af8 <__aeabi_d2iz>
 80069c6:	2200      	movs	r2, #0
 80069c8:	4682      	mov	sl, r0
 80069ca:	2300      	movs	r3, #0
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	f7fa f854 	bl	8000a7c <__aeabi_dcmplt>
 80069d4:	b148      	cbz	r0, 80069ea <_dtoa_r+0x17a>
 80069d6:	4650      	mov	r0, sl
 80069d8:	f7f9 fd74 	bl	80004c4 <__aeabi_i2d>
 80069dc:	4632      	mov	r2, r6
 80069de:	463b      	mov	r3, r7
 80069e0:	f7fa f842 	bl	8000a68 <__aeabi_dcmpeq>
 80069e4:	b908      	cbnz	r0, 80069ea <_dtoa_r+0x17a>
 80069e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ea:	f1ba 0f16 	cmp.w	sl, #22
 80069ee:	d858      	bhi.n	8006aa2 <_dtoa_r+0x232>
 80069f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069f4:	4b57      	ldr	r3, [pc, #348]	; (8006b54 <_dtoa_r+0x2e4>)
 80069f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7fa f83d 	bl	8000a7c <__aeabi_dcmplt>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d04f      	beq.n	8006aa6 <_dtoa_r+0x236>
 8006a06:	2300      	movs	r3, #0
 8006a08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a10:	1b1c      	subs	r4, r3, r4
 8006a12:	1e63      	subs	r3, r4, #1
 8006a14:	9309      	str	r3, [sp, #36]	; 0x24
 8006a16:	bf49      	itett	mi
 8006a18:	f1c4 0301 	rsbmi	r3, r4, #1
 8006a1c:	2300      	movpl	r3, #0
 8006a1e:	9306      	strmi	r3, [sp, #24]
 8006a20:	2300      	movmi	r3, #0
 8006a22:	bf54      	ite	pl
 8006a24:	9306      	strpl	r3, [sp, #24]
 8006a26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a28:	f1ba 0f00 	cmp.w	sl, #0
 8006a2c:	db3d      	blt.n	8006aaa <_dtoa_r+0x23a>
 8006a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a34:	4453      	add	r3, sl
 8006a36:	9309      	str	r3, [sp, #36]	; 0x24
 8006a38:	2300      	movs	r3, #0
 8006a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a3e:	2b09      	cmp	r3, #9
 8006a40:	f200 808c 	bhi.w	8006b5c <_dtoa_r+0x2ec>
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	bfc4      	itt	gt
 8006a48:	3b04      	subgt	r3, #4
 8006a4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a4e:	bfc8      	it	gt
 8006a50:	2400      	movgt	r4, #0
 8006a52:	f1a3 0302 	sub.w	r3, r3, #2
 8006a56:	bfd8      	it	le
 8006a58:	2401      	movle	r4, #1
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	f200 808a 	bhi.w	8006b74 <_dtoa_r+0x304>
 8006a60:	e8df f003 	tbb	[pc, r3]
 8006a64:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a6c:	441c      	add	r4, r3
 8006a6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	bfc3      	ittte	gt
 8006a76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a82:	f1c3 0320 	rsble	r3, r3, #32
 8006a86:	bfc6      	itte	gt
 8006a88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a8c:	4318      	orrgt	r0, r3
 8006a8e:	fa06 f003 	lslle.w	r0, r6, r3
 8006a92:	f7f9 fd07 	bl	80004a4 <__aeabi_ui2d>
 8006a96:	2301      	movs	r3, #1
 8006a98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a9c:	3c01      	subs	r4, #1
 8006a9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006aa0:	e76f      	b.n	8006982 <_dtoa_r+0x112>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e7b2      	b.n	8006a0c <_dtoa_r+0x19c>
 8006aa6:	900f      	str	r0, [sp, #60]	; 0x3c
 8006aa8:	e7b1      	b.n	8006a0e <_dtoa_r+0x19e>
 8006aaa:	9b06      	ldr	r3, [sp, #24]
 8006aac:	eba3 030a 	sub.w	r3, r3, sl
 8006ab0:	9306      	str	r3, [sp, #24]
 8006ab2:	f1ca 0300 	rsb	r3, sl, #0
 8006ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ab8:	2300      	movs	r3, #0
 8006aba:	930e      	str	r3, [sp, #56]	; 0x38
 8006abc:	e7be      	b.n	8006a3c <_dtoa_r+0x1cc>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dc58      	bgt.n	8006b7a <_dtoa_r+0x30a>
 8006ac8:	f04f 0901 	mov.w	r9, #1
 8006acc:	464b      	mov	r3, r9
 8006ace:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ad2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006ada:	6042      	str	r2, [r0, #4]
 8006adc:	2204      	movs	r2, #4
 8006ade:	f102 0614 	add.w	r6, r2, #20
 8006ae2:	429e      	cmp	r6, r3
 8006ae4:	6841      	ldr	r1, [r0, #4]
 8006ae6:	d94e      	bls.n	8006b86 <_dtoa_r+0x316>
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fcd7 	bl	800749c <_Balloc>
 8006aee:	9003      	str	r0, [sp, #12]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d14c      	bne.n	8006b8e <_dtoa_r+0x31e>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006afa:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <_dtoa_r+0x2e8>)
 8006afc:	e6cc      	b.n	8006898 <_dtoa_r+0x28>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e7de      	b.n	8006ac0 <_dtoa_r+0x250>
 8006b02:	2300      	movs	r3, #0
 8006b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b08:	eb0a 0903 	add.w	r9, sl, r3
 8006b0c:	f109 0301 	add.w	r3, r9, #1
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	9308      	str	r3, [sp, #32]
 8006b14:	bfb8      	it	lt
 8006b16:	2301      	movlt	r3, #1
 8006b18:	e7dd      	b.n	8006ad6 <_dtoa_r+0x266>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e7f2      	b.n	8006b04 <_dtoa_r+0x294>
 8006b1e:	bf00      	nop
 8006b20:	636f4361 	.word	0x636f4361
 8006b24:	3fd287a7 	.word	0x3fd287a7
 8006b28:	8b60c8b3 	.word	0x8b60c8b3
 8006b2c:	3fc68a28 	.word	0x3fc68a28
 8006b30:	509f79fb 	.word	0x509f79fb
 8006b34:	3fd34413 	.word	0x3fd34413
 8006b38:	080089fd 	.word	0x080089fd
 8006b3c:	08008a14 	.word	0x08008a14
 8006b40:	7ff00000 	.word	0x7ff00000
 8006b44:	080089f9 	.word	0x080089f9
 8006b48:	080089f0 	.word	0x080089f0
 8006b4c:	080089cd 	.word	0x080089cd
 8006b50:	3ff80000 	.word	0x3ff80000
 8006b54:	08008b08 	.word	0x08008b08
 8006b58:	08008a6f 	.word	0x08008a6f
 8006b5c:	2401      	movs	r4, #1
 8006b5e:	2300      	movs	r3, #0
 8006b60:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b62:	9322      	str	r3, [sp, #136]	; 0x88
 8006b64:	f04f 39ff 	mov.w	r9, #4294967295
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2312      	movs	r3, #18
 8006b6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b70:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b72:	e7b0      	b.n	8006ad6 <_dtoa_r+0x266>
 8006b74:	2301      	movs	r3, #1
 8006b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b78:	e7f4      	b.n	8006b64 <_dtoa_r+0x2f4>
 8006b7a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b84:	e7a7      	b.n	8006ad6 <_dtoa_r+0x266>
 8006b86:	3101      	adds	r1, #1
 8006b88:	6041      	str	r1, [r0, #4]
 8006b8a:	0052      	lsls	r2, r2, #1
 8006b8c:	e7a7      	b.n	8006ade <_dtoa_r+0x26e>
 8006b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b90:	9a03      	ldr	r2, [sp, #12]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	9b08      	ldr	r3, [sp, #32]
 8006b96:	2b0e      	cmp	r3, #14
 8006b98:	f200 80a8 	bhi.w	8006cec <_dtoa_r+0x47c>
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	f000 80a5 	beq.w	8006cec <_dtoa_r+0x47c>
 8006ba2:	f1ba 0f00 	cmp.w	sl, #0
 8006ba6:	dd34      	ble.n	8006c12 <_dtoa_r+0x3a2>
 8006ba8:	4a9a      	ldr	r2, [pc, #616]	; (8006e14 <_dtoa_r+0x5a4>)
 8006baa:	f00a 030f 	and.w	r3, sl, #15
 8006bae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006bb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006bbe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006bc2:	d016      	beq.n	8006bf2 <_dtoa_r+0x382>
 8006bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bc8:	4b93      	ldr	r3, [pc, #588]	; (8006e18 <_dtoa_r+0x5a8>)
 8006bca:	2703      	movs	r7, #3
 8006bcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bd0:	f7f9 fe0c 	bl	80007ec <__aeabi_ddiv>
 8006bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd8:	f004 040f 	and.w	r4, r4, #15
 8006bdc:	4e8e      	ldr	r6, [pc, #568]	; (8006e18 <_dtoa_r+0x5a8>)
 8006bde:	b954      	cbnz	r4, 8006bf6 <_dtoa_r+0x386>
 8006be0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006be8:	f7f9 fe00 	bl	80007ec <__aeabi_ddiv>
 8006bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf0:	e029      	b.n	8006c46 <_dtoa_r+0x3d6>
 8006bf2:	2702      	movs	r7, #2
 8006bf4:	e7f2      	b.n	8006bdc <_dtoa_r+0x36c>
 8006bf6:	07e1      	lsls	r1, r4, #31
 8006bf8:	d508      	bpl.n	8006c0c <_dtoa_r+0x39c>
 8006bfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bfe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c02:	f7f9 fcc9 	bl	8000598 <__aeabi_dmul>
 8006c06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c0a:	3701      	adds	r7, #1
 8006c0c:	1064      	asrs	r4, r4, #1
 8006c0e:	3608      	adds	r6, #8
 8006c10:	e7e5      	b.n	8006bde <_dtoa_r+0x36e>
 8006c12:	f000 80a5 	beq.w	8006d60 <_dtoa_r+0x4f0>
 8006c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c1a:	f1ca 0400 	rsb	r4, sl, #0
 8006c1e:	4b7d      	ldr	r3, [pc, #500]	; (8006e14 <_dtoa_r+0x5a4>)
 8006c20:	f004 020f 	and.w	r2, r4, #15
 8006c24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7f9 fcb4 	bl	8000598 <__aeabi_dmul>
 8006c30:	2702      	movs	r7, #2
 8006c32:	2300      	movs	r3, #0
 8006c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c38:	4e77      	ldr	r6, [pc, #476]	; (8006e18 <_dtoa_r+0x5a8>)
 8006c3a:	1124      	asrs	r4, r4, #4
 8006c3c:	2c00      	cmp	r4, #0
 8006c3e:	f040 8084 	bne.w	8006d4a <_dtoa_r+0x4da>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1d2      	bne.n	8006bec <_dtoa_r+0x37c>
 8006c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 808b 	beq.w	8006d64 <_dtoa_r+0x4f4>
 8006c4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	4b6f      	ldr	r3, [pc, #444]	; (8006e1c <_dtoa_r+0x5ac>)
 8006c5e:	f7f9 ff0d 	bl	8000a7c <__aeabi_dcmplt>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d07e      	beq.n	8006d64 <_dtoa_r+0x4f4>
 8006c66:	9b08      	ldr	r3, [sp, #32]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d07b      	beq.n	8006d64 <_dtoa_r+0x4f4>
 8006c6c:	f1b9 0f00 	cmp.w	r9, #0
 8006c70:	dd38      	ble.n	8006ce4 <_dtoa_r+0x474>
 8006c72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c76:	2200      	movs	r2, #0
 8006c78:	4b69      	ldr	r3, [pc, #420]	; (8006e20 <_dtoa_r+0x5b0>)
 8006c7a:	f7f9 fc8d 	bl	8000598 <__aeabi_dmul>
 8006c7e:	464c      	mov	r4, r9
 8006c80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c84:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006c88:	3701      	adds	r7, #1
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	f7f9 fc1a 	bl	80004c4 <__aeabi_i2d>
 8006c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c94:	f7f9 fc80 	bl	8000598 <__aeabi_dmul>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b62      	ldr	r3, [pc, #392]	; (8006e24 <_dtoa_r+0x5b4>)
 8006c9c:	f7f9 fac6 	bl	800022c <__adddf3>
 8006ca0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006ca4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ca8:	9611      	str	r6, [sp, #68]	; 0x44
 8006caa:	2c00      	cmp	r4, #0
 8006cac:	d15d      	bne.n	8006d6a <_dtoa_r+0x4fa>
 8006cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4b5c      	ldr	r3, [pc, #368]	; (8006e28 <_dtoa_r+0x5b8>)
 8006cb6:	f7f9 fab7 	bl	8000228 <__aeabi_dsub>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cc2:	4633      	mov	r3, r6
 8006cc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cc6:	f7f9 fef7 	bl	8000ab8 <__aeabi_dcmpgt>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f040 829c 	bne.w	8007208 <_dtoa_r+0x998>
 8006cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cd6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006cda:	f7f9 fecf 	bl	8000a7c <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f040 8290 	bne.w	8007204 <_dtoa_r+0x994>
 8006ce4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006ce8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f2c0 8152 	blt.w	8006f98 <_dtoa_r+0x728>
 8006cf4:	f1ba 0f0e 	cmp.w	sl, #14
 8006cf8:	f300 814e 	bgt.w	8006f98 <_dtoa_r+0x728>
 8006cfc:	4b45      	ldr	r3, [pc, #276]	; (8006e14 <_dtoa_r+0x5a4>)
 8006cfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d06:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006d0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f280 80db 	bge.w	8006ec8 <_dtoa_r+0x658>
 8006d12:	9b08      	ldr	r3, [sp, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f300 80d7 	bgt.w	8006ec8 <_dtoa_r+0x658>
 8006d1a:	f040 8272 	bne.w	8007202 <_dtoa_r+0x992>
 8006d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d22:	2200      	movs	r2, #0
 8006d24:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <_dtoa_r+0x5b8>)
 8006d26:	f7f9 fc37 	bl	8000598 <__aeabi_dmul>
 8006d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2e:	f7f9 feb9 	bl	8000aa4 <__aeabi_dcmpge>
 8006d32:	9c08      	ldr	r4, [sp, #32]
 8006d34:	4626      	mov	r6, r4
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f040 8248 	bne.w	80071cc <_dtoa_r+0x95c>
 8006d3c:	2331      	movs	r3, #49	; 0x31
 8006d3e:	9f03      	ldr	r7, [sp, #12]
 8006d40:	f10a 0a01 	add.w	sl, sl, #1
 8006d44:	f807 3b01 	strb.w	r3, [r7], #1
 8006d48:	e244      	b.n	80071d4 <_dtoa_r+0x964>
 8006d4a:	07e2      	lsls	r2, r4, #31
 8006d4c:	d505      	bpl.n	8006d5a <_dtoa_r+0x4ea>
 8006d4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d52:	f7f9 fc21 	bl	8000598 <__aeabi_dmul>
 8006d56:	2301      	movs	r3, #1
 8006d58:	3701      	adds	r7, #1
 8006d5a:	1064      	asrs	r4, r4, #1
 8006d5c:	3608      	adds	r6, #8
 8006d5e:	e76d      	b.n	8006c3c <_dtoa_r+0x3cc>
 8006d60:	2702      	movs	r7, #2
 8006d62:	e770      	b.n	8006c46 <_dtoa_r+0x3d6>
 8006d64:	46d0      	mov	r8, sl
 8006d66:	9c08      	ldr	r4, [sp, #32]
 8006d68:	e78f      	b.n	8006c8a <_dtoa_r+0x41a>
 8006d6a:	9903      	ldr	r1, [sp, #12]
 8006d6c:	4b29      	ldr	r3, [pc, #164]	; (8006e14 <_dtoa_r+0x5a4>)
 8006d6e:	4421      	add	r1, r4
 8006d70:	9112      	str	r1, [sp, #72]	; 0x48
 8006d72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d78:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d80:	2900      	cmp	r1, #0
 8006d82:	d055      	beq.n	8006e30 <_dtoa_r+0x5c0>
 8006d84:	2000      	movs	r0, #0
 8006d86:	4929      	ldr	r1, [pc, #164]	; (8006e2c <_dtoa_r+0x5bc>)
 8006d88:	f7f9 fd30 	bl	80007ec <__aeabi_ddiv>
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	4632      	mov	r2, r6
 8006d90:	f7f9 fa4a 	bl	8000228 <__aeabi_dsub>
 8006d94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d98:	9f03      	ldr	r7, [sp, #12]
 8006d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d9e:	f7f9 feab 	bl	8000af8 <__aeabi_d2iz>
 8006da2:	4604      	mov	r4, r0
 8006da4:	f7f9 fb8e 	bl	80004c4 <__aeabi_i2d>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db0:	f7f9 fa3a 	bl	8000228 <__aeabi_dsub>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	3430      	adds	r4, #48	; 0x30
 8006dba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dc2:	f807 4b01 	strb.w	r4, [r7], #1
 8006dc6:	f7f9 fe59 	bl	8000a7c <__aeabi_dcmplt>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d174      	bne.n	8006eb8 <_dtoa_r+0x648>
 8006dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	4911      	ldr	r1, [pc, #68]	; (8006e1c <_dtoa_r+0x5ac>)
 8006dd6:	f7f9 fa27 	bl	8000228 <__aeabi_dsub>
 8006dda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dde:	f7f9 fe4d 	bl	8000a7c <__aeabi_dcmplt>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	f040 80b7 	bne.w	8006f56 <_dtoa_r+0x6e6>
 8006de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dea:	429f      	cmp	r7, r3
 8006dec:	f43f af7a 	beq.w	8006ce4 <_dtoa_r+0x474>
 8006df0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006df4:	2200      	movs	r2, #0
 8006df6:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <_dtoa_r+0x5b0>)
 8006df8:	f7f9 fbce 	bl	8000598 <__aeabi_dmul>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <_dtoa_r+0x5b0>)
 8006e08:	f7f9 fbc6 	bl	8000598 <__aeabi_dmul>
 8006e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e10:	e7c3      	b.n	8006d9a <_dtoa_r+0x52a>
 8006e12:	bf00      	nop
 8006e14:	08008b08 	.word	0x08008b08
 8006e18:	08008ae0 	.word	0x08008ae0
 8006e1c:	3ff00000 	.word	0x3ff00000
 8006e20:	40240000 	.word	0x40240000
 8006e24:	401c0000 	.word	0x401c0000
 8006e28:	40140000 	.word	0x40140000
 8006e2c:	3fe00000 	.word	0x3fe00000
 8006e30:	4630      	mov	r0, r6
 8006e32:	4639      	mov	r1, r7
 8006e34:	f7f9 fbb0 	bl	8000598 <__aeabi_dmul>
 8006e38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e3e:	9c03      	ldr	r4, [sp, #12]
 8006e40:	9314      	str	r3, [sp, #80]	; 0x50
 8006e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e46:	f7f9 fe57 	bl	8000af8 <__aeabi_d2iz>
 8006e4a:	9015      	str	r0, [sp, #84]	; 0x54
 8006e4c:	f7f9 fb3a 	bl	80004c4 <__aeabi_i2d>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e58:	f7f9 f9e6 	bl	8000228 <__aeabi_dsub>
 8006e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e5e:	4606      	mov	r6, r0
 8006e60:	3330      	adds	r3, #48	; 0x30
 8006e62:	f804 3b01 	strb.w	r3, [r4], #1
 8006e66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e68:	460f      	mov	r7, r1
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	d124      	bne.n	8006ebc <_dtoa_r+0x64c>
 8006e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e76:	4bb0      	ldr	r3, [pc, #704]	; (8007138 <_dtoa_r+0x8c8>)
 8006e78:	f7f9 f9d8 	bl	800022c <__adddf3>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4630      	mov	r0, r6
 8006e82:	4639      	mov	r1, r7
 8006e84:	f7f9 fe18 	bl	8000ab8 <__aeabi_dcmpgt>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d163      	bne.n	8006f54 <_dtoa_r+0x6e4>
 8006e8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e90:	2000      	movs	r0, #0
 8006e92:	49a9      	ldr	r1, [pc, #676]	; (8007138 <_dtoa_r+0x8c8>)
 8006e94:	f7f9 f9c8 	bl	8000228 <__aeabi_dsub>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 fdec 	bl	8000a7c <__aeabi_dcmplt>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f43f af1d 	beq.w	8006ce4 <_dtoa_r+0x474>
 8006eaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006eac:	1e7b      	subs	r3, r7, #1
 8006eae:	9314      	str	r3, [sp, #80]	; 0x50
 8006eb0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006eb4:	2b30      	cmp	r3, #48	; 0x30
 8006eb6:	d0f8      	beq.n	8006eaa <_dtoa_r+0x63a>
 8006eb8:	46c2      	mov	sl, r8
 8006eba:	e03b      	b.n	8006f34 <_dtoa_r+0x6c4>
 8006ebc:	4b9f      	ldr	r3, [pc, #636]	; (800713c <_dtoa_r+0x8cc>)
 8006ebe:	f7f9 fb6b 	bl	8000598 <__aeabi_dmul>
 8006ec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ec6:	e7bc      	b.n	8006e42 <_dtoa_r+0x5d2>
 8006ec8:	9f03      	ldr	r7, [sp, #12]
 8006eca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	f7f9 fc89 	bl	80007ec <__aeabi_ddiv>
 8006eda:	f7f9 fe0d 	bl	8000af8 <__aeabi_d2iz>
 8006ede:	4604      	mov	r4, r0
 8006ee0:	f7f9 faf0 	bl	80004c4 <__aeabi_i2d>
 8006ee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ee8:	f7f9 fb56 	bl	8000598 <__aeabi_dmul>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 f998 	bl	8000228 <__aeabi_dsub>
 8006ef8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006efc:	f807 6b01 	strb.w	r6, [r7], #1
 8006f00:	9e03      	ldr	r6, [sp, #12]
 8006f02:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006f06:	1bbe      	subs	r6, r7, r6
 8006f08:	45b4      	cmp	ip, r6
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	d136      	bne.n	8006f7e <_dtoa_r+0x70e>
 8006f10:	f7f9 f98c 	bl	800022c <__adddf3>
 8006f14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f18:	4680      	mov	r8, r0
 8006f1a:	4689      	mov	r9, r1
 8006f1c:	f7f9 fdcc 	bl	8000ab8 <__aeabi_dcmpgt>
 8006f20:	bb58      	cbnz	r0, 8006f7a <_dtoa_r+0x70a>
 8006f22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fd9d 	bl	8000a68 <__aeabi_dcmpeq>
 8006f2e:	b108      	cbz	r0, 8006f34 <_dtoa_r+0x6c4>
 8006f30:	07e1      	lsls	r1, r4, #31
 8006f32:	d422      	bmi.n	8006f7a <_dtoa_r+0x70a>
 8006f34:	4628      	mov	r0, r5
 8006f36:	4659      	mov	r1, fp
 8006f38:	f000 faf0 	bl	800751c <_Bfree>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	703b      	strb	r3, [r7, #0]
 8006f40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f42:	f10a 0001 	add.w	r0, sl, #1
 8006f46:	6018      	str	r0, [r3, #0]
 8006f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f43f acde 	beq.w	800690c <_dtoa_r+0x9c>
 8006f50:	601f      	str	r7, [r3, #0]
 8006f52:	e4db      	b.n	800690c <_dtoa_r+0x9c>
 8006f54:	4627      	mov	r7, r4
 8006f56:	463b      	mov	r3, r7
 8006f58:	461f      	mov	r7, r3
 8006f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f5e:	2a39      	cmp	r2, #57	; 0x39
 8006f60:	d107      	bne.n	8006f72 <_dtoa_r+0x702>
 8006f62:	9a03      	ldr	r2, [sp, #12]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d1f7      	bne.n	8006f58 <_dtoa_r+0x6e8>
 8006f68:	2230      	movs	r2, #48	; 0x30
 8006f6a:	9903      	ldr	r1, [sp, #12]
 8006f6c:	f108 0801 	add.w	r8, r8, #1
 8006f70:	700a      	strb	r2, [r1, #0]
 8006f72:	781a      	ldrb	r2, [r3, #0]
 8006f74:	3201      	adds	r2, #1
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e79e      	b.n	8006eb8 <_dtoa_r+0x648>
 8006f7a:	46d0      	mov	r8, sl
 8006f7c:	e7eb      	b.n	8006f56 <_dtoa_r+0x6e6>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b6e      	ldr	r3, [pc, #440]	; (800713c <_dtoa_r+0x8cc>)
 8006f82:	f7f9 fb09 	bl	8000598 <__aeabi_dmul>
 8006f86:	2200      	movs	r2, #0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	4689      	mov	r9, r1
 8006f8e:	f7f9 fd6b 	bl	8000a68 <__aeabi_dcmpeq>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d09b      	beq.n	8006ece <_dtoa_r+0x65e>
 8006f96:	e7cd      	b.n	8006f34 <_dtoa_r+0x6c4>
 8006f98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	f000 80d0 	beq.w	8007140 <_dtoa_r+0x8d0>
 8006fa0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fa2:	2a01      	cmp	r2, #1
 8006fa4:	f300 80ae 	bgt.w	8007104 <_dtoa_r+0x894>
 8006fa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	f000 80a6 	beq.w	80070fc <_dtoa_r+0x88c>
 8006fb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006fb6:	9f06      	ldr	r7, [sp, #24]
 8006fb8:	9a06      	ldr	r2, [sp, #24]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	441a      	add	r2, r3
 8006fbe:	9206      	str	r2, [sp, #24]
 8006fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	441a      	add	r2, r3
 8006fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fc8:	f000 fb5e 	bl	8007688 <__i2b>
 8006fcc:	4606      	mov	r6, r0
 8006fce:	2f00      	cmp	r7, #0
 8006fd0:	dd0c      	ble.n	8006fec <_dtoa_r+0x77c>
 8006fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dd09      	ble.n	8006fec <_dtoa_r+0x77c>
 8006fd8:	42bb      	cmp	r3, r7
 8006fda:	bfa8      	it	ge
 8006fdc:	463b      	movge	r3, r7
 8006fde:	9a06      	ldr	r2, [sp, #24]
 8006fe0:	1aff      	subs	r7, r7, r3
 8006fe2:	1ad2      	subs	r2, r2, r3
 8006fe4:	9206      	str	r2, [sp, #24]
 8006fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	9309      	str	r3, [sp, #36]	; 0x24
 8006fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fee:	b1f3      	cbz	r3, 800702e <_dtoa_r+0x7be>
 8006ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80a8 	beq.w	8007148 <_dtoa_r+0x8d8>
 8006ff8:	2c00      	cmp	r4, #0
 8006ffa:	dd10      	ble.n	800701e <_dtoa_r+0x7ae>
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4622      	mov	r2, r4
 8007000:	4628      	mov	r0, r5
 8007002:	f000 fbff 	bl	8007804 <__pow5mult>
 8007006:	465a      	mov	r2, fp
 8007008:	4601      	mov	r1, r0
 800700a:	4606      	mov	r6, r0
 800700c:	4628      	mov	r0, r5
 800700e:	f000 fb51 	bl	80076b4 <__multiply>
 8007012:	4680      	mov	r8, r0
 8007014:	4659      	mov	r1, fp
 8007016:	4628      	mov	r0, r5
 8007018:	f000 fa80 	bl	800751c <_Bfree>
 800701c:	46c3      	mov	fp, r8
 800701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007020:	1b1a      	subs	r2, r3, r4
 8007022:	d004      	beq.n	800702e <_dtoa_r+0x7be>
 8007024:	4659      	mov	r1, fp
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fbec 	bl	8007804 <__pow5mult>
 800702c:	4683      	mov	fp, r0
 800702e:	2101      	movs	r1, #1
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fb29 	bl	8007688 <__i2b>
 8007036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007038:	4604      	mov	r4, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	f340 8086 	ble.w	800714c <_dtoa_r+0x8dc>
 8007040:	461a      	mov	r2, r3
 8007042:	4601      	mov	r1, r0
 8007044:	4628      	mov	r0, r5
 8007046:	f000 fbdd 	bl	8007804 <__pow5mult>
 800704a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800704c:	4604      	mov	r4, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	dd7f      	ble.n	8007152 <_dtoa_r+0x8e2>
 8007052:	f04f 0800 	mov.w	r8, #0
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800705c:	6918      	ldr	r0, [r3, #16]
 800705e:	f000 fac5 	bl	80075ec <__hi0bits>
 8007062:	f1c0 0020 	rsb	r0, r0, #32
 8007066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007068:	4418      	add	r0, r3
 800706a:	f010 001f 	ands.w	r0, r0, #31
 800706e:	f000 8092 	beq.w	8007196 <_dtoa_r+0x926>
 8007072:	f1c0 0320 	rsb	r3, r0, #32
 8007076:	2b04      	cmp	r3, #4
 8007078:	f340 808a 	ble.w	8007190 <_dtoa_r+0x920>
 800707c:	f1c0 001c 	rsb	r0, r0, #28
 8007080:	9b06      	ldr	r3, [sp, #24]
 8007082:	4407      	add	r7, r0
 8007084:	4403      	add	r3, r0
 8007086:	9306      	str	r3, [sp, #24]
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	4403      	add	r3, r0
 800708c:	9309      	str	r3, [sp, #36]	; 0x24
 800708e:	9b06      	ldr	r3, [sp, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	dd05      	ble.n	80070a0 <_dtoa_r+0x830>
 8007094:	4659      	mov	r1, fp
 8007096:	461a      	mov	r2, r3
 8007098:	4628      	mov	r0, r5
 800709a:	f000 fc0d 	bl	80078b8 <__lshift>
 800709e:	4683      	mov	fp, r0
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dd05      	ble.n	80070b2 <_dtoa_r+0x842>
 80070a6:	4621      	mov	r1, r4
 80070a8:	461a      	mov	r2, r3
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 fc04 	bl	80078b8 <__lshift>
 80070b0:	4604      	mov	r4, r0
 80070b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d070      	beq.n	800719a <_dtoa_r+0x92a>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4658      	mov	r0, fp
 80070bc:	f000 fc6c 	bl	8007998 <__mcmp>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	da6a      	bge.n	800719a <_dtoa_r+0x92a>
 80070c4:	2300      	movs	r3, #0
 80070c6:	4659      	mov	r1, fp
 80070c8:	220a      	movs	r2, #10
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 fa48 	bl	8007560 <__multadd>
 80070d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d2:	4683      	mov	fp, r0
 80070d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8194 	beq.w	8007406 <_dtoa_r+0xb96>
 80070de:	4631      	mov	r1, r6
 80070e0:	2300      	movs	r3, #0
 80070e2:	220a      	movs	r2, #10
 80070e4:	4628      	mov	r0, r5
 80070e6:	f000 fa3b 	bl	8007560 <__multadd>
 80070ea:	f1b9 0f00 	cmp.w	r9, #0
 80070ee:	4606      	mov	r6, r0
 80070f0:	f300 8093 	bgt.w	800721a <_dtoa_r+0x9aa>
 80070f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	dc57      	bgt.n	80071aa <_dtoa_r+0x93a>
 80070fa:	e08e      	b.n	800721a <_dtoa_r+0x9aa>
 80070fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007102:	e757      	b.n	8006fb4 <_dtoa_r+0x744>
 8007104:	9b08      	ldr	r3, [sp, #32]
 8007106:	1e5c      	subs	r4, r3, #1
 8007108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710a:	42a3      	cmp	r3, r4
 800710c:	bfb7      	itett	lt
 800710e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007110:	1b1c      	subge	r4, r3, r4
 8007112:	1ae2      	sublt	r2, r4, r3
 8007114:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007116:	bfbe      	ittt	lt
 8007118:	940a      	strlt	r4, [sp, #40]	; 0x28
 800711a:	189b      	addlt	r3, r3, r2
 800711c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800711e:	9b08      	ldr	r3, [sp, #32]
 8007120:	bfb8      	it	lt
 8007122:	2400      	movlt	r4, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbb      	ittet	lt
 8007128:	9b06      	ldrlt	r3, [sp, #24]
 800712a:	9a08      	ldrlt	r2, [sp, #32]
 800712c:	9f06      	ldrge	r7, [sp, #24]
 800712e:	1a9f      	sublt	r7, r3, r2
 8007130:	bfac      	ite	ge
 8007132:	9b08      	ldrge	r3, [sp, #32]
 8007134:	2300      	movlt	r3, #0
 8007136:	e73f      	b.n	8006fb8 <_dtoa_r+0x748>
 8007138:	3fe00000 	.word	0x3fe00000
 800713c:	40240000 	.word	0x40240000
 8007140:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007142:	9f06      	ldr	r7, [sp, #24]
 8007144:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007146:	e742      	b.n	8006fce <_dtoa_r+0x75e>
 8007148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800714a:	e76b      	b.n	8007024 <_dtoa_r+0x7b4>
 800714c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800714e:	2b01      	cmp	r3, #1
 8007150:	dc19      	bgt.n	8007186 <_dtoa_r+0x916>
 8007152:	9b04      	ldr	r3, [sp, #16]
 8007154:	b9bb      	cbnz	r3, 8007186 <_dtoa_r+0x916>
 8007156:	9b05      	ldr	r3, [sp, #20]
 8007158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800715c:	b99b      	cbnz	r3, 8007186 <_dtoa_r+0x916>
 800715e:	9b05      	ldr	r3, [sp, #20]
 8007160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007164:	0d1b      	lsrs	r3, r3, #20
 8007166:	051b      	lsls	r3, r3, #20
 8007168:	b183      	cbz	r3, 800718c <_dtoa_r+0x91c>
 800716a:	f04f 0801 	mov.w	r8, #1
 800716e:	9b06      	ldr	r3, [sp, #24]
 8007170:	3301      	adds	r3, #1
 8007172:	9306      	str	r3, [sp, #24]
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	3301      	adds	r3, #1
 8007178:	9309      	str	r3, [sp, #36]	; 0x24
 800717a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	f47f af6a 	bne.w	8007056 <_dtoa_r+0x7e6>
 8007182:	2001      	movs	r0, #1
 8007184:	e76f      	b.n	8007066 <_dtoa_r+0x7f6>
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	e7f6      	b.n	800717a <_dtoa_r+0x90a>
 800718c:	4698      	mov	r8, r3
 800718e:	e7f4      	b.n	800717a <_dtoa_r+0x90a>
 8007190:	f43f af7d 	beq.w	800708e <_dtoa_r+0x81e>
 8007194:	4618      	mov	r0, r3
 8007196:	301c      	adds	r0, #28
 8007198:	e772      	b.n	8007080 <_dtoa_r+0x810>
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dc36      	bgt.n	800720e <_dtoa_r+0x99e>
 80071a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	dd33      	ble.n	800720e <_dtoa_r+0x99e>
 80071a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071aa:	f1b9 0f00 	cmp.w	r9, #0
 80071ae:	d10d      	bne.n	80071cc <_dtoa_r+0x95c>
 80071b0:	4621      	mov	r1, r4
 80071b2:	464b      	mov	r3, r9
 80071b4:	2205      	movs	r2, #5
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 f9d2 	bl	8007560 <__multadd>
 80071bc:	4601      	mov	r1, r0
 80071be:	4604      	mov	r4, r0
 80071c0:	4658      	mov	r0, fp
 80071c2:	f000 fbe9 	bl	8007998 <__mcmp>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f73f adb8 	bgt.w	8006d3c <_dtoa_r+0x4cc>
 80071cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071ce:	9f03      	ldr	r7, [sp, #12]
 80071d0:	ea6f 0a03 	mvn.w	sl, r3
 80071d4:	f04f 0800 	mov.w	r8, #0
 80071d8:	4621      	mov	r1, r4
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 f99e 	bl	800751c <_Bfree>
 80071e0:	2e00      	cmp	r6, #0
 80071e2:	f43f aea7 	beq.w	8006f34 <_dtoa_r+0x6c4>
 80071e6:	f1b8 0f00 	cmp.w	r8, #0
 80071ea:	d005      	beq.n	80071f8 <_dtoa_r+0x988>
 80071ec:	45b0      	cmp	r8, r6
 80071ee:	d003      	beq.n	80071f8 <_dtoa_r+0x988>
 80071f0:	4641      	mov	r1, r8
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f992 	bl	800751c <_Bfree>
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 f98e 	bl	800751c <_Bfree>
 8007200:	e698      	b.n	8006f34 <_dtoa_r+0x6c4>
 8007202:	2400      	movs	r4, #0
 8007204:	4626      	mov	r6, r4
 8007206:	e7e1      	b.n	80071cc <_dtoa_r+0x95c>
 8007208:	46c2      	mov	sl, r8
 800720a:	4626      	mov	r6, r4
 800720c:	e596      	b.n	8006d3c <_dtoa_r+0x4cc>
 800720e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80fd 	beq.w	8007414 <_dtoa_r+0xba4>
 800721a:	2f00      	cmp	r7, #0
 800721c:	dd05      	ble.n	800722a <_dtoa_r+0x9ba>
 800721e:	4631      	mov	r1, r6
 8007220:	463a      	mov	r2, r7
 8007222:	4628      	mov	r0, r5
 8007224:	f000 fb48 	bl	80078b8 <__lshift>
 8007228:	4606      	mov	r6, r0
 800722a:	f1b8 0f00 	cmp.w	r8, #0
 800722e:	d05c      	beq.n	80072ea <_dtoa_r+0xa7a>
 8007230:	4628      	mov	r0, r5
 8007232:	6871      	ldr	r1, [r6, #4]
 8007234:	f000 f932 	bl	800749c <_Balloc>
 8007238:	4607      	mov	r7, r0
 800723a:	b928      	cbnz	r0, 8007248 <_dtoa_r+0x9d8>
 800723c:	4602      	mov	r2, r0
 800723e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007242:	4b7f      	ldr	r3, [pc, #508]	; (8007440 <_dtoa_r+0xbd0>)
 8007244:	f7ff bb28 	b.w	8006898 <_dtoa_r+0x28>
 8007248:	6932      	ldr	r2, [r6, #16]
 800724a:	f106 010c 	add.w	r1, r6, #12
 800724e:	3202      	adds	r2, #2
 8007250:	0092      	lsls	r2, r2, #2
 8007252:	300c      	adds	r0, #12
 8007254:	f000 f914 	bl	8007480 <memcpy>
 8007258:	2201      	movs	r2, #1
 800725a:	4639      	mov	r1, r7
 800725c:	4628      	mov	r0, r5
 800725e:	f000 fb2b 	bl	80078b8 <__lshift>
 8007262:	46b0      	mov	r8, r6
 8007264:	4606      	mov	r6, r0
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	9308      	str	r3, [sp, #32]
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	444b      	add	r3, r9
 8007270:	930a      	str	r3, [sp, #40]	; 0x28
 8007272:	9b04      	ldr	r3, [sp, #16]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	9309      	str	r3, [sp, #36]	; 0x24
 800727a:	9b08      	ldr	r3, [sp, #32]
 800727c:	4621      	mov	r1, r4
 800727e:	3b01      	subs	r3, #1
 8007280:	4658      	mov	r0, fp
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	f7ff fa66 	bl	8006754 <quorem>
 8007288:	4603      	mov	r3, r0
 800728a:	4641      	mov	r1, r8
 800728c:	3330      	adds	r3, #48	; 0x30
 800728e:	9006      	str	r0, [sp, #24]
 8007290:	4658      	mov	r0, fp
 8007292:	930b      	str	r3, [sp, #44]	; 0x2c
 8007294:	f000 fb80 	bl	8007998 <__mcmp>
 8007298:	4632      	mov	r2, r6
 800729a:	4681      	mov	r9, r0
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 fb96 	bl	80079d0 <__mdiff>
 80072a4:	68c2      	ldr	r2, [r0, #12]
 80072a6:	4607      	mov	r7, r0
 80072a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072aa:	bb02      	cbnz	r2, 80072ee <_dtoa_r+0xa7e>
 80072ac:	4601      	mov	r1, r0
 80072ae:	4658      	mov	r0, fp
 80072b0:	f000 fb72 	bl	8007998 <__mcmp>
 80072b4:	4602      	mov	r2, r0
 80072b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b8:	4639      	mov	r1, r7
 80072ba:	4628      	mov	r0, r5
 80072bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80072c0:	f000 f92c 	bl	800751c <_Bfree>
 80072c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c8:	9f08      	ldr	r7, [sp, #32]
 80072ca:	ea43 0102 	orr.w	r1, r3, r2
 80072ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d0:	430b      	orrs	r3, r1
 80072d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d4:	d10d      	bne.n	80072f2 <_dtoa_r+0xa82>
 80072d6:	2b39      	cmp	r3, #57	; 0x39
 80072d8:	d029      	beq.n	800732e <_dtoa_r+0xabe>
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	dd01      	ble.n	80072e4 <_dtoa_r+0xa74>
 80072e0:	9b06      	ldr	r3, [sp, #24]
 80072e2:	3331      	adds	r3, #49	; 0x31
 80072e4:	9a04      	ldr	r2, [sp, #16]
 80072e6:	7013      	strb	r3, [r2, #0]
 80072e8:	e776      	b.n	80071d8 <_dtoa_r+0x968>
 80072ea:	4630      	mov	r0, r6
 80072ec:	e7b9      	b.n	8007262 <_dtoa_r+0x9f2>
 80072ee:	2201      	movs	r2, #1
 80072f0:	e7e2      	b.n	80072b8 <_dtoa_r+0xa48>
 80072f2:	f1b9 0f00 	cmp.w	r9, #0
 80072f6:	db06      	blt.n	8007306 <_dtoa_r+0xa96>
 80072f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072fa:	ea41 0909 	orr.w	r9, r1, r9
 80072fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007300:	ea59 0101 	orrs.w	r1, r9, r1
 8007304:	d120      	bne.n	8007348 <_dtoa_r+0xad8>
 8007306:	2a00      	cmp	r2, #0
 8007308:	ddec      	ble.n	80072e4 <_dtoa_r+0xa74>
 800730a:	4659      	mov	r1, fp
 800730c:	2201      	movs	r2, #1
 800730e:	4628      	mov	r0, r5
 8007310:	9308      	str	r3, [sp, #32]
 8007312:	f000 fad1 	bl	80078b8 <__lshift>
 8007316:	4621      	mov	r1, r4
 8007318:	4683      	mov	fp, r0
 800731a:	f000 fb3d 	bl	8007998 <__mcmp>
 800731e:	2800      	cmp	r0, #0
 8007320:	9b08      	ldr	r3, [sp, #32]
 8007322:	dc02      	bgt.n	800732a <_dtoa_r+0xaba>
 8007324:	d1de      	bne.n	80072e4 <_dtoa_r+0xa74>
 8007326:	07da      	lsls	r2, r3, #31
 8007328:	d5dc      	bpl.n	80072e4 <_dtoa_r+0xa74>
 800732a:	2b39      	cmp	r3, #57	; 0x39
 800732c:	d1d8      	bne.n	80072e0 <_dtoa_r+0xa70>
 800732e:	2339      	movs	r3, #57	; 0x39
 8007330:	9a04      	ldr	r2, [sp, #16]
 8007332:	7013      	strb	r3, [r2, #0]
 8007334:	463b      	mov	r3, r7
 8007336:	461f      	mov	r7, r3
 8007338:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800733c:	3b01      	subs	r3, #1
 800733e:	2a39      	cmp	r2, #57	; 0x39
 8007340:	d050      	beq.n	80073e4 <_dtoa_r+0xb74>
 8007342:	3201      	adds	r2, #1
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	e747      	b.n	80071d8 <_dtoa_r+0x968>
 8007348:	2a00      	cmp	r2, #0
 800734a:	dd03      	ble.n	8007354 <_dtoa_r+0xae4>
 800734c:	2b39      	cmp	r3, #57	; 0x39
 800734e:	d0ee      	beq.n	800732e <_dtoa_r+0xabe>
 8007350:	3301      	adds	r3, #1
 8007352:	e7c7      	b.n	80072e4 <_dtoa_r+0xa74>
 8007354:	9a08      	ldr	r2, [sp, #32]
 8007356:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007358:	f802 3c01 	strb.w	r3, [r2, #-1]
 800735c:	428a      	cmp	r2, r1
 800735e:	d02a      	beq.n	80073b6 <_dtoa_r+0xb46>
 8007360:	4659      	mov	r1, fp
 8007362:	2300      	movs	r3, #0
 8007364:	220a      	movs	r2, #10
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f8fa 	bl	8007560 <__multadd>
 800736c:	45b0      	cmp	r8, r6
 800736e:	4683      	mov	fp, r0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	f04f 020a 	mov.w	r2, #10
 8007378:	4641      	mov	r1, r8
 800737a:	4628      	mov	r0, r5
 800737c:	d107      	bne.n	800738e <_dtoa_r+0xb1e>
 800737e:	f000 f8ef 	bl	8007560 <__multadd>
 8007382:	4680      	mov	r8, r0
 8007384:	4606      	mov	r6, r0
 8007386:	9b08      	ldr	r3, [sp, #32]
 8007388:	3301      	adds	r3, #1
 800738a:	9308      	str	r3, [sp, #32]
 800738c:	e775      	b.n	800727a <_dtoa_r+0xa0a>
 800738e:	f000 f8e7 	bl	8007560 <__multadd>
 8007392:	4631      	mov	r1, r6
 8007394:	4680      	mov	r8, r0
 8007396:	2300      	movs	r3, #0
 8007398:	220a      	movs	r2, #10
 800739a:	4628      	mov	r0, r5
 800739c:	f000 f8e0 	bl	8007560 <__multadd>
 80073a0:	4606      	mov	r6, r0
 80073a2:	e7f0      	b.n	8007386 <_dtoa_r+0xb16>
 80073a4:	f1b9 0f00 	cmp.w	r9, #0
 80073a8:	bfcc      	ite	gt
 80073aa:	464f      	movgt	r7, r9
 80073ac:	2701      	movle	r7, #1
 80073ae:	f04f 0800 	mov.w	r8, #0
 80073b2:	9a03      	ldr	r2, [sp, #12]
 80073b4:	4417      	add	r7, r2
 80073b6:	4659      	mov	r1, fp
 80073b8:	2201      	movs	r2, #1
 80073ba:	4628      	mov	r0, r5
 80073bc:	9308      	str	r3, [sp, #32]
 80073be:	f000 fa7b 	bl	80078b8 <__lshift>
 80073c2:	4621      	mov	r1, r4
 80073c4:	4683      	mov	fp, r0
 80073c6:	f000 fae7 	bl	8007998 <__mcmp>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	dcb2      	bgt.n	8007334 <_dtoa_r+0xac4>
 80073ce:	d102      	bne.n	80073d6 <_dtoa_r+0xb66>
 80073d0:	9b08      	ldr	r3, [sp, #32]
 80073d2:	07db      	lsls	r3, r3, #31
 80073d4:	d4ae      	bmi.n	8007334 <_dtoa_r+0xac4>
 80073d6:	463b      	mov	r3, r7
 80073d8:	461f      	mov	r7, r3
 80073da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073de:	2a30      	cmp	r2, #48	; 0x30
 80073e0:	d0fa      	beq.n	80073d8 <_dtoa_r+0xb68>
 80073e2:	e6f9      	b.n	80071d8 <_dtoa_r+0x968>
 80073e4:	9a03      	ldr	r2, [sp, #12]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d1a5      	bne.n	8007336 <_dtoa_r+0xac6>
 80073ea:	2331      	movs	r3, #49	; 0x31
 80073ec:	f10a 0a01 	add.w	sl, sl, #1
 80073f0:	e779      	b.n	80072e6 <_dtoa_r+0xa76>
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <_dtoa_r+0xbd4>)
 80073f4:	f7ff baa8 	b.w	8006948 <_dtoa_r+0xd8>
 80073f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f47f aa81 	bne.w	8006902 <_dtoa_r+0x92>
 8007400:	4b11      	ldr	r3, [pc, #68]	; (8007448 <_dtoa_r+0xbd8>)
 8007402:	f7ff baa1 	b.w	8006948 <_dtoa_r+0xd8>
 8007406:	f1b9 0f00 	cmp.w	r9, #0
 800740a:	dc03      	bgt.n	8007414 <_dtoa_r+0xba4>
 800740c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800740e:	2b02      	cmp	r3, #2
 8007410:	f73f aecb 	bgt.w	80071aa <_dtoa_r+0x93a>
 8007414:	9f03      	ldr	r7, [sp, #12]
 8007416:	4621      	mov	r1, r4
 8007418:	4658      	mov	r0, fp
 800741a:	f7ff f99b 	bl	8006754 <quorem>
 800741e:	9a03      	ldr	r2, [sp, #12]
 8007420:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007424:	f807 3b01 	strb.w	r3, [r7], #1
 8007428:	1aba      	subs	r2, r7, r2
 800742a:	4591      	cmp	r9, r2
 800742c:	ddba      	ble.n	80073a4 <_dtoa_r+0xb34>
 800742e:	4659      	mov	r1, fp
 8007430:	2300      	movs	r3, #0
 8007432:	220a      	movs	r2, #10
 8007434:	4628      	mov	r0, r5
 8007436:	f000 f893 	bl	8007560 <__multadd>
 800743a:	4683      	mov	fp, r0
 800743c:	e7eb      	b.n	8007416 <_dtoa_r+0xba6>
 800743e:	bf00      	nop
 8007440:	08008a6f 	.word	0x08008a6f
 8007444:	080089cc 	.word	0x080089cc
 8007448:	080089f0 	.word	0x080089f0

0800744c <_localeconv_r>:
 800744c:	4800      	ldr	r0, [pc, #0]	; (8007450 <_localeconv_r+0x4>)
 800744e:	4770      	bx	lr
 8007450:	20000168 	.word	0x20000168

08007454 <malloc>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <malloc+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f000 bc1d 	b.w	8007c98 <_malloc_r>
 800745e:	bf00      	nop
 8007460:	20000014 	.word	0x20000014

08007464 <memchr>:
 8007464:	4603      	mov	r3, r0
 8007466:	b510      	push	{r4, lr}
 8007468:	b2c9      	uxtb	r1, r1
 800746a:	4402      	add	r2, r0
 800746c:	4293      	cmp	r3, r2
 800746e:	4618      	mov	r0, r3
 8007470:	d101      	bne.n	8007476 <memchr+0x12>
 8007472:	2000      	movs	r0, #0
 8007474:	e003      	b.n	800747e <memchr+0x1a>
 8007476:	7804      	ldrb	r4, [r0, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	428c      	cmp	r4, r1
 800747c:	d1f6      	bne.n	800746c <memchr+0x8>
 800747e:	bd10      	pop	{r4, pc}

08007480 <memcpy>:
 8007480:	440a      	add	r2, r1
 8007482:	4291      	cmp	r1, r2
 8007484:	f100 33ff 	add.w	r3, r0, #4294967295
 8007488:	d100      	bne.n	800748c <memcpy+0xc>
 800748a:	4770      	bx	lr
 800748c:	b510      	push	{r4, lr}
 800748e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007492:	4291      	cmp	r1, r2
 8007494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007498:	d1f9      	bne.n	800748e <memcpy+0xe>
 800749a:	bd10      	pop	{r4, pc}

0800749c <_Balloc>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	b976      	cbnz	r6, 80074c4 <_Balloc+0x28>
 80074a6:	2010      	movs	r0, #16
 80074a8:	f7ff ffd4 	bl	8007454 <malloc>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6260      	str	r0, [r4, #36]	; 0x24
 80074b0:	b920      	cbnz	r0, 80074bc <_Balloc+0x20>
 80074b2:	2166      	movs	r1, #102	; 0x66
 80074b4:	4b17      	ldr	r3, [pc, #92]	; (8007514 <_Balloc+0x78>)
 80074b6:	4818      	ldr	r0, [pc, #96]	; (8007518 <_Balloc+0x7c>)
 80074b8:	f000 fc72 	bl	8007da0 <__assert_func>
 80074bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c0:	6006      	str	r6, [r0, #0]
 80074c2:	60c6      	str	r6, [r0, #12]
 80074c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074c6:	68f3      	ldr	r3, [r6, #12]
 80074c8:	b183      	cbz	r3, 80074ec <_Balloc+0x50>
 80074ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074d2:	b9b8      	cbnz	r0, 8007504 <_Balloc+0x68>
 80074d4:	2101      	movs	r1, #1
 80074d6:	fa01 f605 	lsl.w	r6, r1, r5
 80074da:	1d72      	adds	r2, r6, #5
 80074dc:	4620      	mov	r0, r4
 80074de:	0092      	lsls	r2, r2, #2
 80074e0:	f000 fb5e 	bl	8007ba0 <_calloc_r>
 80074e4:	b160      	cbz	r0, 8007500 <_Balloc+0x64>
 80074e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ea:	e00e      	b.n	800750a <_Balloc+0x6e>
 80074ec:	2221      	movs	r2, #33	; 0x21
 80074ee:	2104      	movs	r1, #4
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fb55 	bl	8007ba0 <_calloc_r>
 80074f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074f8:	60f0      	str	r0, [r6, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e4      	bne.n	80074ca <_Balloc+0x2e>
 8007500:	2000      	movs	r0, #0
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	6802      	ldr	r2, [r0, #0]
 8007506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800750a:	2300      	movs	r3, #0
 800750c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007510:	e7f7      	b.n	8007502 <_Balloc+0x66>
 8007512:	bf00      	nop
 8007514:	080089fd 	.word	0x080089fd
 8007518:	08008a80 	.word	0x08008a80

0800751c <_Bfree>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b976      	cbnz	r6, 8007544 <_Bfree+0x28>
 8007526:	2010      	movs	r0, #16
 8007528:	f7ff ff94 	bl	8007454 <malloc>
 800752c:	4602      	mov	r2, r0
 800752e:	6268      	str	r0, [r5, #36]	; 0x24
 8007530:	b920      	cbnz	r0, 800753c <_Bfree+0x20>
 8007532:	218a      	movs	r1, #138	; 0x8a
 8007534:	4b08      	ldr	r3, [pc, #32]	; (8007558 <_Bfree+0x3c>)
 8007536:	4809      	ldr	r0, [pc, #36]	; (800755c <_Bfree+0x40>)
 8007538:	f000 fc32 	bl	8007da0 <__assert_func>
 800753c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007540:	6006      	str	r6, [r0, #0]
 8007542:	60c6      	str	r6, [r0, #12]
 8007544:	b13c      	cbz	r4, 8007556 <_Bfree+0x3a>
 8007546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007548:	6862      	ldr	r2, [r4, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007550:	6021      	str	r1, [r4, #0]
 8007552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	080089fd 	.word	0x080089fd
 800755c:	08008a80 	.word	0x08008a80

08007560 <__multadd>:
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	4607      	mov	r7, r0
 8007566:	460c      	mov	r4, r1
 8007568:	461e      	mov	r6, r3
 800756a:	2000      	movs	r0, #0
 800756c:	690d      	ldr	r5, [r1, #16]
 800756e:	f101 0c14 	add.w	ip, r1, #20
 8007572:	f8dc 3000 	ldr.w	r3, [ip]
 8007576:	3001      	adds	r0, #1
 8007578:	b299      	uxth	r1, r3
 800757a:	fb02 6101 	mla	r1, r2, r1, r6
 800757e:	0c1e      	lsrs	r6, r3, #16
 8007580:	0c0b      	lsrs	r3, r1, #16
 8007582:	fb02 3306 	mla	r3, r2, r6, r3
 8007586:	b289      	uxth	r1, r1
 8007588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800758c:	4285      	cmp	r5, r0
 800758e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007592:	f84c 1b04 	str.w	r1, [ip], #4
 8007596:	dcec      	bgt.n	8007572 <__multadd+0x12>
 8007598:	b30e      	cbz	r6, 80075de <__multadd+0x7e>
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	42ab      	cmp	r3, r5
 800759e:	dc19      	bgt.n	80075d4 <__multadd+0x74>
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4638      	mov	r0, r7
 80075a4:	3101      	adds	r1, #1
 80075a6:	f7ff ff79 	bl	800749c <_Balloc>
 80075aa:	4680      	mov	r8, r0
 80075ac:	b928      	cbnz	r0, 80075ba <__multadd+0x5a>
 80075ae:	4602      	mov	r2, r0
 80075b0:	21b5      	movs	r1, #181	; 0xb5
 80075b2:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <__multadd+0x84>)
 80075b4:	480c      	ldr	r0, [pc, #48]	; (80075e8 <__multadd+0x88>)
 80075b6:	f000 fbf3 	bl	8007da0 <__assert_func>
 80075ba:	6922      	ldr	r2, [r4, #16]
 80075bc:	f104 010c 	add.w	r1, r4, #12
 80075c0:	3202      	adds	r2, #2
 80075c2:	0092      	lsls	r2, r2, #2
 80075c4:	300c      	adds	r0, #12
 80075c6:	f7ff ff5b 	bl	8007480 <memcpy>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff ffa5 	bl	800751c <_Bfree>
 80075d2:	4644      	mov	r4, r8
 80075d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075d8:	3501      	adds	r5, #1
 80075da:	615e      	str	r6, [r3, #20]
 80075dc:	6125      	str	r5, [r4, #16]
 80075de:	4620      	mov	r0, r4
 80075e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e4:	08008a6f 	.word	0x08008a6f
 80075e8:	08008a80 	.word	0x08008a80

080075ec <__hi0bits>:
 80075ec:	0c02      	lsrs	r2, r0, #16
 80075ee:	0412      	lsls	r2, r2, #16
 80075f0:	4603      	mov	r3, r0
 80075f2:	b9ca      	cbnz	r2, 8007628 <__hi0bits+0x3c>
 80075f4:	0403      	lsls	r3, r0, #16
 80075f6:	2010      	movs	r0, #16
 80075f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80075fc:	bf04      	itt	eq
 80075fe:	021b      	lsleq	r3, r3, #8
 8007600:	3008      	addeq	r0, #8
 8007602:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007606:	bf04      	itt	eq
 8007608:	011b      	lsleq	r3, r3, #4
 800760a:	3004      	addeq	r0, #4
 800760c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007610:	bf04      	itt	eq
 8007612:	009b      	lsleq	r3, r3, #2
 8007614:	3002      	addeq	r0, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	db05      	blt.n	8007626 <__hi0bits+0x3a>
 800761a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800761e:	f100 0001 	add.w	r0, r0, #1
 8007622:	bf08      	it	eq
 8007624:	2020      	moveq	r0, #32
 8007626:	4770      	bx	lr
 8007628:	2000      	movs	r0, #0
 800762a:	e7e5      	b.n	80075f8 <__hi0bits+0xc>

0800762c <__lo0bits>:
 800762c:	6803      	ldr	r3, [r0, #0]
 800762e:	4602      	mov	r2, r0
 8007630:	f013 0007 	ands.w	r0, r3, #7
 8007634:	d00b      	beq.n	800764e <__lo0bits+0x22>
 8007636:	07d9      	lsls	r1, r3, #31
 8007638:	d421      	bmi.n	800767e <__lo0bits+0x52>
 800763a:	0798      	lsls	r0, r3, #30
 800763c:	bf49      	itett	mi
 800763e:	085b      	lsrmi	r3, r3, #1
 8007640:	089b      	lsrpl	r3, r3, #2
 8007642:	2001      	movmi	r0, #1
 8007644:	6013      	strmi	r3, [r2, #0]
 8007646:	bf5c      	itt	pl
 8007648:	2002      	movpl	r0, #2
 800764a:	6013      	strpl	r3, [r2, #0]
 800764c:	4770      	bx	lr
 800764e:	b299      	uxth	r1, r3
 8007650:	b909      	cbnz	r1, 8007656 <__lo0bits+0x2a>
 8007652:	2010      	movs	r0, #16
 8007654:	0c1b      	lsrs	r3, r3, #16
 8007656:	b2d9      	uxtb	r1, r3
 8007658:	b909      	cbnz	r1, 800765e <__lo0bits+0x32>
 800765a:	3008      	adds	r0, #8
 800765c:	0a1b      	lsrs	r3, r3, #8
 800765e:	0719      	lsls	r1, r3, #28
 8007660:	bf04      	itt	eq
 8007662:	091b      	lsreq	r3, r3, #4
 8007664:	3004      	addeq	r0, #4
 8007666:	0799      	lsls	r1, r3, #30
 8007668:	bf04      	itt	eq
 800766a:	089b      	lsreq	r3, r3, #2
 800766c:	3002      	addeq	r0, #2
 800766e:	07d9      	lsls	r1, r3, #31
 8007670:	d403      	bmi.n	800767a <__lo0bits+0x4e>
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	f100 0001 	add.w	r0, r0, #1
 8007678:	d003      	beq.n	8007682 <__lo0bits+0x56>
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	4770      	bx	lr
 800767e:	2000      	movs	r0, #0
 8007680:	4770      	bx	lr
 8007682:	2020      	movs	r0, #32
 8007684:	4770      	bx	lr
	...

08007688 <__i2b>:
 8007688:	b510      	push	{r4, lr}
 800768a:	460c      	mov	r4, r1
 800768c:	2101      	movs	r1, #1
 800768e:	f7ff ff05 	bl	800749c <_Balloc>
 8007692:	4602      	mov	r2, r0
 8007694:	b928      	cbnz	r0, 80076a2 <__i2b+0x1a>
 8007696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800769a:	4b04      	ldr	r3, [pc, #16]	; (80076ac <__i2b+0x24>)
 800769c:	4804      	ldr	r0, [pc, #16]	; (80076b0 <__i2b+0x28>)
 800769e:	f000 fb7f 	bl	8007da0 <__assert_func>
 80076a2:	2301      	movs	r3, #1
 80076a4:	6144      	str	r4, [r0, #20]
 80076a6:	6103      	str	r3, [r0, #16]
 80076a8:	bd10      	pop	{r4, pc}
 80076aa:	bf00      	nop
 80076ac:	08008a6f 	.word	0x08008a6f
 80076b0:	08008a80 	.word	0x08008a80

080076b4 <__multiply>:
 80076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	4691      	mov	r9, r2
 80076ba:	690a      	ldr	r2, [r1, #16]
 80076bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076c0:	460c      	mov	r4, r1
 80076c2:	429a      	cmp	r2, r3
 80076c4:	bfbe      	ittt	lt
 80076c6:	460b      	movlt	r3, r1
 80076c8:	464c      	movlt	r4, r9
 80076ca:	4699      	movlt	r9, r3
 80076cc:	6927      	ldr	r7, [r4, #16]
 80076ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	6861      	ldr	r1, [r4, #4]
 80076d6:	eb07 060a 	add.w	r6, r7, sl
 80076da:	42b3      	cmp	r3, r6
 80076dc:	b085      	sub	sp, #20
 80076de:	bfb8      	it	lt
 80076e0:	3101      	addlt	r1, #1
 80076e2:	f7ff fedb 	bl	800749c <_Balloc>
 80076e6:	b930      	cbnz	r0, 80076f6 <__multiply+0x42>
 80076e8:	4602      	mov	r2, r0
 80076ea:	f240 115d 	movw	r1, #349	; 0x15d
 80076ee:	4b43      	ldr	r3, [pc, #268]	; (80077fc <__multiply+0x148>)
 80076f0:	4843      	ldr	r0, [pc, #268]	; (8007800 <__multiply+0x14c>)
 80076f2:	f000 fb55 	bl	8007da0 <__assert_func>
 80076f6:	f100 0514 	add.w	r5, r0, #20
 80076fa:	462b      	mov	r3, r5
 80076fc:	2200      	movs	r2, #0
 80076fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007702:	4543      	cmp	r3, r8
 8007704:	d321      	bcc.n	800774a <__multiply+0x96>
 8007706:	f104 0314 	add.w	r3, r4, #20
 800770a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800770e:	f109 0314 	add.w	r3, r9, #20
 8007712:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007716:	9202      	str	r2, [sp, #8]
 8007718:	1b3a      	subs	r2, r7, r4
 800771a:	3a15      	subs	r2, #21
 800771c:	f022 0203 	bic.w	r2, r2, #3
 8007720:	3204      	adds	r2, #4
 8007722:	f104 0115 	add.w	r1, r4, #21
 8007726:	428f      	cmp	r7, r1
 8007728:	bf38      	it	cc
 800772a:	2204      	movcc	r2, #4
 800772c:	9201      	str	r2, [sp, #4]
 800772e:	9a02      	ldr	r2, [sp, #8]
 8007730:	9303      	str	r3, [sp, #12]
 8007732:	429a      	cmp	r2, r3
 8007734:	d80c      	bhi.n	8007750 <__multiply+0x9c>
 8007736:	2e00      	cmp	r6, #0
 8007738:	dd03      	ble.n	8007742 <__multiply+0x8e>
 800773a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800773e:	2b00      	cmp	r3, #0
 8007740:	d059      	beq.n	80077f6 <__multiply+0x142>
 8007742:	6106      	str	r6, [r0, #16]
 8007744:	b005      	add	sp, #20
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	f843 2b04 	str.w	r2, [r3], #4
 800774e:	e7d8      	b.n	8007702 <__multiply+0x4e>
 8007750:	f8b3 a000 	ldrh.w	sl, [r3]
 8007754:	f1ba 0f00 	cmp.w	sl, #0
 8007758:	d023      	beq.n	80077a2 <__multiply+0xee>
 800775a:	46a9      	mov	r9, r5
 800775c:	f04f 0c00 	mov.w	ip, #0
 8007760:	f104 0e14 	add.w	lr, r4, #20
 8007764:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007768:	f8d9 1000 	ldr.w	r1, [r9]
 800776c:	fa1f fb82 	uxth.w	fp, r2
 8007770:	b289      	uxth	r1, r1
 8007772:	fb0a 110b 	mla	r1, sl, fp, r1
 8007776:	4461      	add	r1, ip
 8007778:	f8d9 c000 	ldr.w	ip, [r9]
 800777c:	0c12      	lsrs	r2, r2, #16
 800777e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007782:	fb0a c202 	mla	r2, sl, r2, ip
 8007786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800778a:	b289      	uxth	r1, r1
 800778c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007790:	4577      	cmp	r7, lr
 8007792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007796:	f849 1b04 	str.w	r1, [r9], #4
 800779a:	d8e3      	bhi.n	8007764 <__multiply+0xb0>
 800779c:	9a01      	ldr	r2, [sp, #4]
 800779e:	f845 c002 	str.w	ip, [r5, r2]
 80077a2:	9a03      	ldr	r2, [sp, #12]
 80077a4:	3304      	adds	r3, #4
 80077a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077aa:	f1b9 0f00 	cmp.w	r9, #0
 80077ae:	d020      	beq.n	80077f2 <__multiply+0x13e>
 80077b0:	46ae      	mov	lr, r5
 80077b2:	f04f 0a00 	mov.w	sl, #0
 80077b6:	6829      	ldr	r1, [r5, #0]
 80077b8:	f104 0c14 	add.w	ip, r4, #20
 80077bc:	f8bc b000 	ldrh.w	fp, [ip]
 80077c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077c4:	b289      	uxth	r1, r1
 80077c6:	fb09 220b 	mla	r2, r9, fp, r2
 80077ca:	4492      	add	sl, r2
 80077cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077d0:	f84e 1b04 	str.w	r1, [lr], #4
 80077d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077d8:	f8be 1000 	ldrh.w	r1, [lr]
 80077dc:	0c12      	lsrs	r2, r2, #16
 80077de:	fb09 1102 	mla	r1, r9, r2, r1
 80077e2:	4567      	cmp	r7, ip
 80077e4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077ec:	d8e6      	bhi.n	80077bc <__multiply+0x108>
 80077ee:	9a01      	ldr	r2, [sp, #4]
 80077f0:	50a9      	str	r1, [r5, r2]
 80077f2:	3504      	adds	r5, #4
 80077f4:	e79b      	b.n	800772e <__multiply+0x7a>
 80077f6:	3e01      	subs	r6, #1
 80077f8:	e79d      	b.n	8007736 <__multiply+0x82>
 80077fa:	bf00      	nop
 80077fc:	08008a6f 	.word	0x08008a6f
 8007800:	08008a80 	.word	0x08008a80

08007804 <__pow5mult>:
 8007804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007808:	4615      	mov	r5, r2
 800780a:	f012 0203 	ands.w	r2, r2, #3
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	d007      	beq.n	8007824 <__pow5mult+0x20>
 8007814:	4c25      	ldr	r4, [pc, #148]	; (80078ac <__pow5mult+0xa8>)
 8007816:	3a01      	subs	r2, #1
 8007818:	2300      	movs	r3, #0
 800781a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800781e:	f7ff fe9f 	bl	8007560 <__multadd>
 8007822:	4607      	mov	r7, r0
 8007824:	10ad      	asrs	r5, r5, #2
 8007826:	d03d      	beq.n	80078a4 <__pow5mult+0xa0>
 8007828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800782a:	b97c      	cbnz	r4, 800784c <__pow5mult+0x48>
 800782c:	2010      	movs	r0, #16
 800782e:	f7ff fe11 	bl	8007454 <malloc>
 8007832:	4602      	mov	r2, r0
 8007834:	6270      	str	r0, [r6, #36]	; 0x24
 8007836:	b928      	cbnz	r0, 8007844 <__pow5mult+0x40>
 8007838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800783c:	4b1c      	ldr	r3, [pc, #112]	; (80078b0 <__pow5mult+0xac>)
 800783e:	481d      	ldr	r0, [pc, #116]	; (80078b4 <__pow5mult+0xb0>)
 8007840:	f000 faae 	bl	8007da0 <__assert_func>
 8007844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007848:	6004      	str	r4, [r0, #0]
 800784a:	60c4      	str	r4, [r0, #12]
 800784c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007854:	b94c      	cbnz	r4, 800786a <__pow5mult+0x66>
 8007856:	f240 2171 	movw	r1, #625	; 0x271
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ff14 	bl	8007688 <__i2b>
 8007860:	2300      	movs	r3, #0
 8007862:	4604      	mov	r4, r0
 8007864:	f8c8 0008 	str.w	r0, [r8, #8]
 8007868:	6003      	str	r3, [r0, #0]
 800786a:	f04f 0900 	mov.w	r9, #0
 800786e:	07eb      	lsls	r3, r5, #31
 8007870:	d50a      	bpl.n	8007888 <__pow5mult+0x84>
 8007872:	4639      	mov	r1, r7
 8007874:	4622      	mov	r2, r4
 8007876:	4630      	mov	r0, r6
 8007878:	f7ff ff1c 	bl	80076b4 <__multiply>
 800787c:	4680      	mov	r8, r0
 800787e:	4639      	mov	r1, r7
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff fe4b 	bl	800751c <_Bfree>
 8007886:	4647      	mov	r7, r8
 8007888:	106d      	asrs	r5, r5, #1
 800788a:	d00b      	beq.n	80078a4 <__pow5mult+0xa0>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	b938      	cbnz	r0, 80078a0 <__pow5mult+0x9c>
 8007890:	4622      	mov	r2, r4
 8007892:	4621      	mov	r1, r4
 8007894:	4630      	mov	r0, r6
 8007896:	f7ff ff0d 	bl	80076b4 <__multiply>
 800789a:	6020      	str	r0, [r4, #0]
 800789c:	f8c0 9000 	str.w	r9, [r0]
 80078a0:	4604      	mov	r4, r0
 80078a2:	e7e4      	b.n	800786e <__pow5mult+0x6a>
 80078a4:	4638      	mov	r0, r7
 80078a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078aa:	bf00      	nop
 80078ac:	08008bd0 	.word	0x08008bd0
 80078b0:	080089fd 	.word	0x080089fd
 80078b4:	08008a80 	.word	0x08008a80

080078b8 <__lshift>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	460c      	mov	r4, r1
 80078be:	4607      	mov	r7, r0
 80078c0:	4691      	mov	r9, r2
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	6849      	ldr	r1, [r1, #4]
 80078c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078d0:	f108 0601 	add.w	r6, r8, #1
 80078d4:	42b3      	cmp	r3, r6
 80078d6:	db0b      	blt.n	80078f0 <__lshift+0x38>
 80078d8:	4638      	mov	r0, r7
 80078da:	f7ff fddf 	bl	800749c <_Balloc>
 80078de:	4605      	mov	r5, r0
 80078e0:	b948      	cbnz	r0, 80078f6 <__lshift+0x3e>
 80078e2:	4602      	mov	r2, r0
 80078e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078e8:	4b29      	ldr	r3, [pc, #164]	; (8007990 <__lshift+0xd8>)
 80078ea:	482a      	ldr	r0, [pc, #168]	; (8007994 <__lshift+0xdc>)
 80078ec:	f000 fa58 	bl	8007da0 <__assert_func>
 80078f0:	3101      	adds	r1, #1
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	e7ee      	b.n	80078d4 <__lshift+0x1c>
 80078f6:	2300      	movs	r3, #0
 80078f8:	f100 0114 	add.w	r1, r0, #20
 80078fc:	f100 0210 	add.w	r2, r0, #16
 8007900:	4618      	mov	r0, r3
 8007902:	4553      	cmp	r3, sl
 8007904:	db37      	blt.n	8007976 <__lshift+0xbe>
 8007906:	6920      	ldr	r0, [r4, #16]
 8007908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800790c:	f104 0314 	add.w	r3, r4, #20
 8007910:	f019 091f 	ands.w	r9, r9, #31
 8007914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800791c:	d02f      	beq.n	800797e <__lshift+0xc6>
 800791e:	468a      	mov	sl, r1
 8007920:	f04f 0c00 	mov.w	ip, #0
 8007924:	f1c9 0e20 	rsb	lr, r9, #32
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	fa02 f209 	lsl.w	r2, r2, r9
 800792e:	ea42 020c 	orr.w	r2, r2, ip
 8007932:	f84a 2b04 	str.w	r2, [sl], #4
 8007936:	f853 2b04 	ldr.w	r2, [r3], #4
 800793a:	4298      	cmp	r0, r3
 800793c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007940:	d8f2      	bhi.n	8007928 <__lshift+0x70>
 8007942:	1b03      	subs	r3, r0, r4
 8007944:	3b15      	subs	r3, #21
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	3304      	adds	r3, #4
 800794c:	f104 0215 	add.w	r2, r4, #21
 8007950:	4290      	cmp	r0, r2
 8007952:	bf38      	it	cc
 8007954:	2304      	movcc	r3, #4
 8007956:	f841 c003 	str.w	ip, [r1, r3]
 800795a:	f1bc 0f00 	cmp.w	ip, #0
 800795e:	d001      	beq.n	8007964 <__lshift+0xac>
 8007960:	f108 0602 	add.w	r6, r8, #2
 8007964:	3e01      	subs	r6, #1
 8007966:	4638      	mov	r0, r7
 8007968:	4621      	mov	r1, r4
 800796a:	612e      	str	r6, [r5, #16]
 800796c:	f7ff fdd6 	bl	800751c <_Bfree>
 8007970:	4628      	mov	r0, r5
 8007972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007976:	f842 0f04 	str.w	r0, [r2, #4]!
 800797a:	3301      	adds	r3, #1
 800797c:	e7c1      	b.n	8007902 <__lshift+0x4a>
 800797e:	3904      	subs	r1, #4
 8007980:	f853 2b04 	ldr.w	r2, [r3], #4
 8007984:	4298      	cmp	r0, r3
 8007986:	f841 2f04 	str.w	r2, [r1, #4]!
 800798a:	d8f9      	bhi.n	8007980 <__lshift+0xc8>
 800798c:	e7ea      	b.n	8007964 <__lshift+0xac>
 800798e:	bf00      	nop
 8007990:	08008a6f 	.word	0x08008a6f
 8007994:	08008a80 	.word	0x08008a80

08007998 <__mcmp>:
 8007998:	4603      	mov	r3, r0
 800799a:	690a      	ldr	r2, [r1, #16]
 800799c:	6900      	ldr	r0, [r0, #16]
 800799e:	b530      	push	{r4, r5, lr}
 80079a0:	1a80      	subs	r0, r0, r2
 80079a2:	d10d      	bne.n	80079c0 <__mcmp+0x28>
 80079a4:	3314      	adds	r3, #20
 80079a6:	3114      	adds	r1, #20
 80079a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079b8:	4295      	cmp	r5, r2
 80079ba:	d002      	beq.n	80079c2 <__mcmp+0x2a>
 80079bc:	d304      	bcc.n	80079c8 <__mcmp+0x30>
 80079be:	2001      	movs	r0, #1
 80079c0:	bd30      	pop	{r4, r5, pc}
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	d3f4      	bcc.n	80079b0 <__mcmp+0x18>
 80079c6:	e7fb      	b.n	80079c0 <__mcmp+0x28>
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	e7f8      	b.n	80079c0 <__mcmp+0x28>
	...

080079d0 <__mdiff>:
 80079d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	460d      	mov	r5, r1
 80079d6:	4607      	mov	r7, r0
 80079d8:	4611      	mov	r1, r2
 80079da:	4628      	mov	r0, r5
 80079dc:	4614      	mov	r4, r2
 80079de:	f7ff ffdb 	bl	8007998 <__mcmp>
 80079e2:	1e06      	subs	r6, r0, #0
 80079e4:	d111      	bne.n	8007a0a <__mdiff+0x3a>
 80079e6:	4631      	mov	r1, r6
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff fd57 	bl	800749c <_Balloc>
 80079ee:	4602      	mov	r2, r0
 80079f0:	b928      	cbnz	r0, 80079fe <__mdiff+0x2e>
 80079f2:	f240 2132 	movw	r1, #562	; 0x232
 80079f6:	4b3a      	ldr	r3, [pc, #232]	; (8007ae0 <__mdiff+0x110>)
 80079f8:	483a      	ldr	r0, [pc, #232]	; (8007ae4 <__mdiff+0x114>)
 80079fa:	f000 f9d1 	bl	8007da0 <__assert_func>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a04:	4610      	mov	r0, r2
 8007a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	bfa4      	itt	ge
 8007a0c:	4623      	movge	r3, r4
 8007a0e:	462c      	movge	r4, r5
 8007a10:	4638      	mov	r0, r7
 8007a12:	6861      	ldr	r1, [r4, #4]
 8007a14:	bfa6      	itte	ge
 8007a16:	461d      	movge	r5, r3
 8007a18:	2600      	movge	r6, #0
 8007a1a:	2601      	movlt	r6, #1
 8007a1c:	f7ff fd3e 	bl	800749c <_Balloc>
 8007a20:	4602      	mov	r2, r0
 8007a22:	b918      	cbnz	r0, 8007a2c <__mdiff+0x5c>
 8007a24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a28:	4b2d      	ldr	r3, [pc, #180]	; (8007ae0 <__mdiff+0x110>)
 8007a2a:	e7e5      	b.n	80079f8 <__mdiff+0x28>
 8007a2c:	f102 0814 	add.w	r8, r2, #20
 8007a30:	46c2      	mov	sl, r8
 8007a32:	f04f 0c00 	mov.w	ip, #0
 8007a36:	6927      	ldr	r7, [r4, #16]
 8007a38:	60c6      	str	r6, [r0, #12]
 8007a3a:	692e      	ldr	r6, [r5, #16]
 8007a3c:	f104 0014 	add.w	r0, r4, #20
 8007a40:	f105 0914 	add.w	r9, r5, #20
 8007a44:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007a48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a4c:	3410      	adds	r4, #16
 8007a4e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007a52:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a56:	fa1f f18b 	uxth.w	r1, fp
 8007a5a:	448c      	add	ip, r1
 8007a5c:	b299      	uxth	r1, r3
 8007a5e:	0c1b      	lsrs	r3, r3, #16
 8007a60:	ebac 0101 	sub.w	r1, ip, r1
 8007a64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a6c:	b289      	uxth	r1, r1
 8007a6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a72:	454e      	cmp	r6, r9
 8007a74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a78:	f84a 3b04 	str.w	r3, [sl], #4
 8007a7c:	d8e7      	bhi.n	8007a4e <__mdiff+0x7e>
 8007a7e:	1b73      	subs	r3, r6, r5
 8007a80:	3b15      	subs	r3, #21
 8007a82:	f023 0303 	bic.w	r3, r3, #3
 8007a86:	3515      	adds	r5, #21
 8007a88:	3304      	adds	r3, #4
 8007a8a:	42ae      	cmp	r6, r5
 8007a8c:	bf38      	it	cc
 8007a8e:	2304      	movcc	r3, #4
 8007a90:	4418      	add	r0, r3
 8007a92:	4443      	add	r3, r8
 8007a94:	461e      	mov	r6, r3
 8007a96:	4605      	mov	r5, r0
 8007a98:	4575      	cmp	r5, lr
 8007a9a:	d30e      	bcc.n	8007aba <__mdiff+0xea>
 8007a9c:	f10e 0103 	add.w	r1, lr, #3
 8007aa0:	1a09      	subs	r1, r1, r0
 8007aa2:	f021 0103 	bic.w	r1, r1, #3
 8007aa6:	3803      	subs	r0, #3
 8007aa8:	4586      	cmp	lr, r0
 8007aaa:	bf38      	it	cc
 8007aac:	2100      	movcc	r1, #0
 8007aae:	4419      	add	r1, r3
 8007ab0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ab4:	b18b      	cbz	r3, 8007ada <__mdiff+0x10a>
 8007ab6:	6117      	str	r7, [r2, #16]
 8007ab8:	e7a4      	b.n	8007a04 <__mdiff+0x34>
 8007aba:	f855 8b04 	ldr.w	r8, [r5], #4
 8007abe:	fa1f f188 	uxth.w	r1, r8
 8007ac2:	4461      	add	r1, ip
 8007ac4:	140c      	asrs	r4, r1, #16
 8007ac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007aca:	b289      	uxth	r1, r1
 8007acc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ad0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007ad4:	f846 1b04 	str.w	r1, [r6], #4
 8007ad8:	e7de      	b.n	8007a98 <__mdiff+0xc8>
 8007ada:	3f01      	subs	r7, #1
 8007adc:	e7e8      	b.n	8007ab0 <__mdiff+0xe0>
 8007ade:	bf00      	nop
 8007ae0:	08008a6f 	.word	0x08008a6f
 8007ae4:	08008a80 	.word	0x08008a80

08007ae8 <__d2b>:
 8007ae8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007aec:	2101      	movs	r1, #1
 8007aee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007af2:	4690      	mov	r8, r2
 8007af4:	461d      	mov	r5, r3
 8007af6:	f7ff fcd1 	bl	800749c <_Balloc>
 8007afa:	4604      	mov	r4, r0
 8007afc:	b930      	cbnz	r0, 8007b0c <__d2b+0x24>
 8007afe:	4602      	mov	r2, r0
 8007b00:	f240 310a 	movw	r1, #778	; 0x30a
 8007b04:	4b24      	ldr	r3, [pc, #144]	; (8007b98 <__d2b+0xb0>)
 8007b06:	4825      	ldr	r0, [pc, #148]	; (8007b9c <__d2b+0xb4>)
 8007b08:	f000 f94a 	bl	8007da0 <__assert_func>
 8007b0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b14:	bb2d      	cbnz	r5, 8007b62 <__d2b+0x7a>
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	f1b8 0300 	subs.w	r3, r8, #0
 8007b1c:	d026      	beq.n	8007b6c <__d2b+0x84>
 8007b1e:	4668      	mov	r0, sp
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	f7ff fd83 	bl	800762c <__lo0bits>
 8007b26:	9900      	ldr	r1, [sp, #0]
 8007b28:	b1f0      	cbz	r0, 8007b68 <__d2b+0x80>
 8007b2a:	9a01      	ldr	r2, [sp, #4]
 8007b2c:	f1c0 0320 	rsb	r3, r0, #32
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	430b      	orrs	r3, r1
 8007b36:	40c2      	lsrs	r2, r0
 8007b38:	6163      	str	r3, [r4, #20]
 8007b3a:	9201      	str	r2, [sp, #4]
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf14      	ite	ne
 8007b42:	2102      	movne	r1, #2
 8007b44:	2101      	moveq	r1, #1
 8007b46:	61a3      	str	r3, [r4, #24]
 8007b48:	6121      	str	r1, [r4, #16]
 8007b4a:	b1c5      	cbz	r5, 8007b7e <__d2b+0x96>
 8007b4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b50:	4405      	add	r5, r0
 8007b52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b56:	603d      	str	r5, [r7, #0]
 8007b58:	6030      	str	r0, [r6, #0]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	b002      	add	sp, #8
 8007b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b66:	e7d6      	b.n	8007b16 <__d2b+0x2e>
 8007b68:	6161      	str	r1, [r4, #20]
 8007b6a:	e7e7      	b.n	8007b3c <__d2b+0x54>
 8007b6c:	a801      	add	r0, sp, #4
 8007b6e:	f7ff fd5d 	bl	800762c <__lo0bits>
 8007b72:	2101      	movs	r1, #1
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	6121      	str	r1, [r4, #16]
 8007b78:	6163      	str	r3, [r4, #20]
 8007b7a:	3020      	adds	r0, #32
 8007b7c:	e7e5      	b.n	8007b4a <__d2b+0x62>
 8007b7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007b82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b86:	6038      	str	r0, [r7, #0]
 8007b88:	6918      	ldr	r0, [r3, #16]
 8007b8a:	f7ff fd2f 	bl	80075ec <__hi0bits>
 8007b8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007b92:	6031      	str	r1, [r6, #0]
 8007b94:	e7e1      	b.n	8007b5a <__d2b+0x72>
 8007b96:	bf00      	nop
 8007b98:	08008a6f 	.word	0x08008a6f
 8007b9c:	08008a80 	.word	0x08008a80

08007ba0 <_calloc_r>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	fba1 5402 	umull	r5, r4, r1, r2
 8007ba6:	b934      	cbnz	r4, 8007bb6 <_calloc_r+0x16>
 8007ba8:	4629      	mov	r1, r5
 8007baa:	f000 f875 	bl	8007c98 <_malloc_r>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	b928      	cbnz	r0, 8007bbe <_calloc_r+0x1e>
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	bd70      	pop	{r4, r5, r6, pc}
 8007bb6:	220c      	movs	r2, #12
 8007bb8:	2600      	movs	r6, #0
 8007bba:	6002      	str	r2, [r0, #0]
 8007bbc:	e7f9      	b.n	8007bb2 <_calloc_r+0x12>
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	f7fe f95f 	bl	8005e84 <memset>
 8007bc6:	e7f4      	b.n	8007bb2 <_calloc_r+0x12>

08007bc8 <_free_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4605      	mov	r5, r0
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	d040      	beq.n	8007c52 <_free_r+0x8a>
 8007bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd4:	1f0c      	subs	r4, r1, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bfb8      	it	lt
 8007bda:	18e4      	addlt	r4, r4, r3
 8007bdc:	f000 f922 	bl	8007e24 <__malloc_lock>
 8007be0:	4a1c      	ldr	r2, [pc, #112]	; (8007c54 <_free_r+0x8c>)
 8007be2:	6813      	ldr	r3, [r2, #0]
 8007be4:	b933      	cbnz	r3, 8007bf4 <_free_r+0x2c>
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	6014      	str	r4, [r2, #0]
 8007bea:	4628      	mov	r0, r5
 8007bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf0:	f000 b91e 	b.w	8007e30 <__malloc_unlock>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d908      	bls.n	8007c0a <_free_r+0x42>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	1821      	adds	r1, r4, r0
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	bf01      	itttt	eq
 8007c00:	6819      	ldreq	r1, [r3, #0]
 8007c02:	685b      	ldreq	r3, [r3, #4]
 8007c04:	1809      	addeq	r1, r1, r0
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	e7ed      	b.n	8007be6 <_free_r+0x1e>
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b10b      	cbz	r3, 8007c14 <_free_r+0x4c>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d9fa      	bls.n	8007c0a <_free_r+0x42>
 8007c14:	6811      	ldr	r1, [r2, #0]
 8007c16:	1850      	adds	r0, r2, r1
 8007c18:	42a0      	cmp	r0, r4
 8007c1a:	d10b      	bne.n	8007c34 <_free_r+0x6c>
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	4401      	add	r1, r0
 8007c20:	1850      	adds	r0, r2, r1
 8007c22:	4283      	cmp	r3, r0
 8007c24:	6011      	str	r1, [r2, #0]
 8007c26:	d1e0      	bne.n	8007bea <_free_r+0x22>
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4401      	add	r1, r0
 8007c2e:	6011      	str	r1, [r2, #0]
 8007c30:	6053      	str	r3, [r2, #4]
 8007c32:	e7da      	b.n	8007bea <_free_r+0x22>
 8007c34:	d902      	bls.n	8007c3c <_free_r+0x74>
 8007c36:	230c      	movs	r3, #12
 8007c38:	602b      	str	r3, [r5, #0]
 8007c3a:	e7d6      	b.n	8007bea <_free_r+0x22>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	1821      	adds	r1, r4, r0
 8007c40:	428b      	cmp	r3, r1
 8007c42:	bf01      	itttt	eq
 8007c44:	6819      	ldreq	r1, [r3, #0]
 8007c46:	685b      	ldreq	r3, [r3, #4]
 8007c48:	1809      	addeq	r1, r1, r0
 8007c4a:	6021      	streq	r1, [r4, #0]
 8007c4c:	6063      	str	r3, [r4, #4]
 8007c4e:	6054      	str	r4, [r2, #4]
 8007c50:	e7cb      	b.n	8007bea <_free_r+0x22>
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	20001b8c 	.word	0x20001b8c

08007c58 <sbrk_aligned>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	4e0e      	ldr	r6, [pc, #56]	; (8007c94 <sbrk_aligned+0x3c>)
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	6831      	ldr	r1, [r6, #0]
 8007c60:	4605      	mov	r5, r0
 8007c62:	b911      	cbnz	r1, 8007c6a <sbrk_aligned+0x12>
 8007c64:	f000 f88c 	bl	8007d80 <_sbrk_r>
 8007c68:	6030      	str	r0, [r6, #0]
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f887 	bl	8007d80 <_sbrk_r>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	d00a      	beq.n	8007c8c <sbrk_aligned+0x34>
 8007c76:	1cc4      	adds	r4, r0, #3
 8007c78:	f024 0403 	bic.w	r4, r4, #3
 8007c7c:	42a0      	cmp	r0, r4
 8007c7e:	d007      	beq.n	8007c90 <sbrk_aligned+0x38>
 8007c80:	1a21      	subs	r1, r4, r0
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 f87c 	bl	8007d80 <_sbrk_r>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d101      	bne.n	8007c90 <sbrk_aligned+0x38>
 8007c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c90:	4620      	mov	r0, r4
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	20001b90 	.word	0x20001b90

08007c98 <_malloc_r>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	1ccd      	adds	r5, r1, #3
 8007c9e:	f025 0503 	bic.w	r5, r5, #3
 8007ca2:	3508      	adds	r5, #8
 8007ca4:	2d0c      	cmp	r5, #12
 8007ca6:	bf38      	it	cc
 8007ca8:	250c      	movcc	r5, #12
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	4607      	mov	r7, r0
 8007cae:	db01      	blt.n	8007cb4 <_malloc_r+0x1c>
 8007cb0:	42a9      	cmp	r1, r5
 8007cb2:	d905      	bls.n	8007cc0 <_malloc_r+0x28>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	603b      	str	r3, [r7, #0]
 8007cba:	4630      	mov	r0, r6
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc0:	4e2e      	ldr	r6, [pc, #184]	; (8007d7c <_malloc_r+0xe4>)
 8007cc2:	f000 f8af 	bl	8007e24 <__malloc_lock>
 8007cc6:	6833      	ldr	r3, [r6, #0]
 8007cc8:	461c      	mov	r4, r3
 8007cca:	bb34      	cbnz	r4, 8007d1a <_malloc_r+0x82>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7ff ffc2 	bl	8007c58 <sbrk_aligned>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	d14d      	bne.n	8007d76 <_malloc_r+0xde>
 8007cda:	6834      	ldr	r4, [r6, #0]
 8007cdc:	4626      	mov	r6, r4
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	d140      	bne.n	8007d64 <_malloc_r+0xcc>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	eb04 0803 	add.w	r8, r4, r3
 8007cec:	f000 f848 	bl	8007d80 <_sbrk_r>
 8007cf0:	4580      	cmp	r8, r0
 8007cf2:	d13a      	bne.n	8007d6a <_malloc_r+0xd2>
 8007cf4:	6821      	ldr	r1, [r4, #0]
 8007cf6:	3503      	adds	r5, #3
 8007cf8:	1a6d      	subs	r5, r5, r1
 8007cfa:	f025 0503 	bic.w	r5, r5, #3
 8007cfe:	3508      	adds	r5, #8
 8007d00:	2d0c      	cmp	r5, #12
 8007d02:	bf38      	it	cc
 8007d04:	250c      	movcc	r5, #12
 8007d06:	4638      	mov	r0, r7
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7ff ffa5 	bl	8007c58 <sbrk_aligned>
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d02b      	beq.n	8007d6a <_malloc_r+0xd2>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	442b      	add	r3, r5
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	e00e      	b.n	8007d38 <_malloc_r+0xa0>
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	1b52      	subs	r2, r2, r5
 8007d1e:	d41e      	bmi.n	8007d5e <_malloc_r+0xc6>
 8007d20:	2a0b      	cmp	r2, #11
 8007d22:	d916      	bls.n	8007d52 <_malloc_r+0xba>
 8007d24:	1961      	adds	r1, r4, r5
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	6025      	str	r5, [r4, #0]
 8007d2a:	bf18      	it	ne
 8007d2c:	6059      	strne	r1, [r3, #4]
 8007d2e:	6863      	ldr	r3, [r4, #4]
 8007d30:	bf08      	it	eq
 8007d32:	6031      	streq	r1, [r6, #0]
 8007d34:	5162      	str	r2, [r4, r5]
 8007d36:	604b      	str	r3, [r1, #4]
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f104 060b 	add.w	r6, r4, #11
 8007d3e:	f000 f877 	bl	8007e30 <__malloc_unlock>
 8007d42:	f026 0607 	bic.w	r6, r6, #7
 8007d46:	1d23      	adds	r3, r4, #4
 8007d48:	1af2      	subs	r2, r6, r3
 8007d4a:	d0b6      	beq.n	8007cba <_malloc_r+0x22>
 8007d4c:	1b9b      	subs	r3, r3, r6
 8007d4e:	50a3      	str	r3, [r4, r2]
 8007d50:	e7b3      	b.n	8007cba <_malloc_r+0x22>
 8007d52:	6862      	ldr	r2, [r4, #4]
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	bf0c      	ite	eq
 8007d58:	6032      	streq	r2, [r6, #0]
 8007d5a:	605a      	strne	r2, [r3, #4]
 8007d5c:	e7ec      	b.n	8007d38 <_malloc_r+0xa0>
 8007d5e:	4623      	mov	r3, r4
 8007d60:	6864      	ldr	r4, [r4, #4]
 8007d62:	e7b2      	b.n	8007cca <_malloc_r+0x32>
 8007d64:	4634      	mov	r4, r6
 8007d66:	6876      	ldr	r6, [r6, #4]
 8007d68:	e7b9      	b.n	8007cde <_malloc_r+0x46>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	f000 f85e 	bl	8007e30 <__malloc_unlock>
 8007d74:	e7a1      	b.n	8007cba <_malloc_r+0x22>
 8007d76:	6025      	str	r5, [r4, #0]
 8007d78:	e7de      	b.n	8007d38 <_malloc_r+0xa0>
 8007d7a:	bf00      	nop
 8007d7c:	20001b8c 	.word	0x20001b8c

08007d80 <_sbrk_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	2300      	movs	r3, #0
 8007d84:	4d05      	ldr	r5, [pc, #20]	; (8007d9c <_sbrk_r+0x1c>)
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7f9 ff1c 	bl	8001bc8 <_sbrk>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_sbrk_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_sbrk_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	20001b94 	.word	0x20001b94

08007da0 <__assert_func>:
 8007da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007da2:	4614      	mov	r4, r2
 8007da4:	461a      	mov	r2, r3
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <__assert_func+0x2c>)
 8007da8:	4605      	mov	r5, r0
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68d8      	ldr	r0, [r3, #12]
 8007dae:	b14c      	cbz	r4, 8007dc4 <__assert_func+0x24>
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <__assert_func+0x30>)
 8007db2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007db6:	9100      	str	r1, [sp, #0]
 8007db8:	462b      	mov	r3, r5
 8007dba:	4906      	ldr	r1, [pc, #24]	; (8007dd4 <__assert_func+0x34>)
 8007dbc:	f000 f80e 	bl	8007ddc <fiprintf>
 8007dc0:	f000 fa62 	bl	8008288 <abort>
 8007dc4:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <__assert_func+0x38>)
 8007dc6:	461c      	mov	r4, r3
 8007dc8:	e7f3      	b.n	8007db2 <__assert_func+0x12>
 8007dca:	bf00      	nop
 8007dcc:	20000014 	.word	0x20000014
 8007dd0:	08008bdc 	.word	0x08008bdc
 8007dd4:	08008be9 	.word	0x08008be9
 8007dd8:	08008c17 	.word	0x08008c17

08007ddc <fiprintf>:
 8007ddc:	b40e      	push	{r1, r2, r3}
 8007dde:	b503      	push	{r0, r1, lr}
 8007de0:	4601      	mov	r1, r0
 8007de2:	ab03      	add	r3, sp, #12
 8007de4:	4805      	ldr	r0, [pc, #20]	; (8007dfc <fiprintf+0x20>)
 8007de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dea:	6800      	ldr	r0, [r0, #0]
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	f000 f84d 	bl	8007e8c <_vfiprintf_r>
 8007df2:	b002      	add	sp, #8
 8007df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df8:	b003      	add	sp, #12
 8007dfa:	4770      	bx	lr
 8007dfc:	20000014 	.word	0x20000014

08007e00 <__ascii_mbtowc>:
 8007e00:	b082      	sub	sp, #8
 8007e02:	b901      	cbnz	r1, 8007e06 <__ascii_mbtowc+0x6>
 8007e04:	a901      	add	r1, sp, #4
 8007e06:	b142      	cbz	r2, 8007e1a <__ascii_mbtowc+0x1a>
 8007e08:	b14b      	cbz	r3, 8007e1e <__ascii_mbtowc+0x1e>
 8007e0a:	7813      	ldrb	r3, [r2, #0]
 8007e0c:	600b      	str	r3, [r1, #0]
 8007e0e:	7812      	ldrb	r2, [r2, #0]
 8007e10:	1e10      	subs	r0, r2, #0
 8007e12:	bf18      	it	ne
 8007e14:	2001      	movne	r0, #1
 8007e16:	b002      	add	sp, #8
 8007e18:	4770      	bx	lr
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	e7fb      	b.n	8007e16 <__ascii_mbtowc+0x16>
 8007e1e:	f06f 0001 	mvn.w	r0, #1
 8007e22:	e7f8      	b.n	8007e16 <__ascii_mbtowc+0x16>

08007e24 <__malloc_lock>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__malloc_lock+0x8>)
 8007e26:	f000 bbeb 	b.w	8008600 <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	20001b98 	.word	0x20001b98

08007e30 <__malloc_unlock>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__malloc_unlock+0x8>)
 8007e32:	f000 bbe6 	b.w	8008602 <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	20001b98 	.word	0x20001b98

08007e3c <__sfputc_r>:
 8007e3c:	6893      	ldr	r3, [r2, #8]
 8007e3e:	b410      	push	{r4}
 8007e40:	3b01      	subs	r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	6093      	str	r3, [r2, #8]
 8007e46:	da07      	bge.n	8007e58 <__sfputc_r+0x1c>
 8007e48:	6994      	ldr	r4, [r2, #24]
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	db01      	blt.n	8007e52 <__sfputc_r+0x16>
 8007e4e:	290a      	cmp	r1, #10
 8007e50:	d102      	bne.n	8007e58 <__sfputc_r+0x1c>
 8007e52:	bc10      	pop	{r4}
 8007e54:	f000 b94a 	b.w	80080ec <__swbuf_r>
 8007e58:	6813      	ldr	r3, [r2, #0]
 8007e5a:	1c58      	adds	r0, r3, #1
 8007e5c:	6010      	str	r0, [r2, #0]
 8007e5e:	7019      	strb	r1, [r3, #0]
 8007e60:	4608      	mov	r0, r1
 8007e62:	bc10      	pop	{r4}
 8007e64:	4770      	bx	lr

08007e66 <__sfputs_r>:
 8007e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e68:	4606      	mov	r6, r0
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	18d5      	adds	r5, r2, r3
 8007e70:	42ac      	cmp	r4, r5
 8007e72:	d101      	bne.n	8007e78 <__sfputs_r+0x12>
 8007e74:	2000      	movs	r0, #0
 8007e76:	e007      	b.n	8007e88 <__sfputs_r+0x22>
 8007e78:	463a      	mov	r2, r7
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e80:	f7ff ffdc 	bl	8007e3c <__sfputc_r>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d1f3      	bne.n	8007e70 <__sfputs_r+0xa>
 8007e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e8c <_vfiprintf_r>:
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	460d      	mov	r5, r1
 8007e92:	4614      	mov	r4, r2
 8007e94:	4698      	mov	r8, r3
 8007e96:	4606      	mov	r6, r0
 8007e98:	b09d      	sub	sp, #116	; 0x74
 8007e9a:	b118      	cbz	r0, 8007ea4 <_vfiprintf_r+0x18>
 8007e9c:	6983      	ldr	r3, [r0, #24]
 8007e9e:	b90b      	cbnz	r3, 8007ea4 <_vfiprintf_r+0x18>
 8007ea0:	f000 fb10 	bl	80084c4 <__sinit>
 8007ea4:	4b89      	ldr	r3, [pc, #548]	; (80080cc <_vfiprintf_r+0x240>)
 8007ea6:	429d      	cmp	r5, r3
 8007ea8:	d11b      	bne.n	8007ee2 <_vfiprintf_r+0x56>
 8007eaa:	6875      	ldr	r5, [r6, #4]
 8007eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	d405      	bmi.n	8007ebe <_vfiprintf_r+0x32>
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	059a      	lsls	r2, r3, #22
 8007eb6:	d402      	bmi.n	8007ebe <_vfiprintf_r+0x32>
 8007eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eba:	f000 fba1 	bl	8008600 <__retarget_lock_acquire_recursive>
 8007ebe:	89ab      	ldrh	r3, [r5, #12]
 8007ec0:	071b      	lsls	r3, r3, #28
 8007ec2:	d501      	bpl.n	8007ec8 <_vfiprintf_r+0x3c>
 8007ec4:	692b      	ldr	r3, [r5, #16]
 8007ec6:	b9eb      	cbnz	r3, 8007f04 <_vfiprintf_r+0x78>
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 f96e 	bl	80081ac <__swsetup_r>
 8007ed0:	b1c0      	cbz	r0, 8007f04 <_vfiprintf_r+0x78>
 8007ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ed4:	07dc      	lsls	r4, r3, #31
 8007ed6:	d50e      	bpl.n	8007ef6 <_vfiprintf_r+0x6a>
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	b01d      	add	sp, #116	; 0x74
 8007ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee2:	4b7b      	ldr	r3, [pc, #492]	; (80080d0 <_vfiprintf_r+0x244>)
 8007ee4:	429d      	cmp	r5, r3
 8007ee6:	d101      	bne.n	8007eec <_vfiprintf_r+0x60>
 8007ee8:	68b5      	ldr	r5, [r6, #8]
 8007eea:	e7df      	b.n	8007eac <_vfiprintf_r+0x20>
 8007eec:	4b79      	ldr	r3, [pc, #484]	; (80080d4 <_vfiprintf_r+0x248>)
 8007eee:	429d      	cmp	r5, r3
 8007ef0:	bf08      	it	eq
 8007ef2:	68f5      	ldreq	r5, [r6, #12]
 8007ef4:	e7da      	b.n	8007eac <_vfiprintf_r+0x20>
 8007ef6:	89ab      	ldrh	r3, [r5, #12]
 8007ef8:	0598      	lsls	r0, r3, #22
 8007efa:	d4ed      	bmi.n	8007ed8 <_vfiprintf_r+0x4c>
 8007efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007efe:	f000 fb80 	bl	8008602 <__retarget_lock_release_recursive>
 8007f02:	e7e9      	b.n	8007ed8 <_vfiprintf_r+0x4c>
 8007f04:	2300      	movs	r3, #0
 8007f06:	9309      	str	r3, [sp, #36]	; 0x24
 8007f08:	2320      	movs	r3, #32
 8007f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f0e:	2330      	movs	r3, #48	; 0x30
 8007f10:	f04f 0901 	mov.w	r9, #1
 8007f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80080d8 <_vfiprintf_r+0x24c>
 8007f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f20:	4623      	mov	r3, r4
 8007f22:	469a      	mov	sl, r3
 8007f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f28:	b10a      	cbz	r2, 8007f2e <_vfiprintf_r+0xa2>
 8007f2a:	2a25      	cmp	r2, #37	; 0x25
 8007f2c:	d1f9      	bne.n	8007f22 <_vfiprintf_r+0x96>
 8007f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f32:	d00b      	beq.n	8007f4c <_vfiprintf_r+0xc0>
 8007f34:	465b      	mov	r3, fp
 8007f36:	4622      	mov	r2, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff ff93 	bl	8007e66 <__sfputs_r>
 8007f40:	3001      	adds	r0, #1
 8007f42:	f000 80aa 	beq.w	800809a <_vfiprintf_r+0x20e>
 8007f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f48:	445a      	add	r2, fp
 8007f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 80a2 	beq.w	800809a <_vfiprintf_r+0x20e>
 8007f56:	2300      	movs	r3, #0
 8007f58:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f60:	f10a 0a01 	add.w	sl, sl, #1
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f6e:	4654      	mov	r4, sl
 8007f70:	2205      	movs	r2, #5
 8007f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f76:	4858      	ldr	r0, [pc, #352]	; (80080d8 <_vfiprintf_r+0x24c>)
 8007f78:	f7ff fa74 	bl	8007464 <memchr>
 8007f7c:	9a04      	ldr	r2, [sp, #16]
 8007f7e:	b9d8      	cbnz	r0, 8007fb8 <_vfiprintf_r+0x12c>
 8007f80:	06d1      	lsls	r1, r2, #27
 8007f82:	bf44      	itt	mi
 8007f84:	2320      	movmi	r3, #32
 8007f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f8a:	0713      	lsls	r3, r2, #28
 8007f8c:	bf44      	itt	mi
 8007f8e:	232b      	movmi	r3, #43	; 0x2b
 8007f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f94:	f89a 3000 	ldrb.w	r3, [sl]
 8007f98:	2b2a      	cmp	r3, #42	; 0x2a
 8007f9a:	d015      	beq.n	8007fc8 <_vfiprintf_r+0x13c>
 8007f9c:	4654      	mov	r4, sl
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f04f 0c0a 	mov.w	ip, #10
 8007fa4:	9a07      	ldr	r2, [sp, #28]
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fac:	3b30      	subs	r3, #48	; 0x30
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d94e      	bls.n	8008050 <_vfiprintf_r+0x1c4>
 8007fb2:	b1b0      	cbz	r0, 8007fe2 <_vfiprintf_r+0x156>
 8007fb4:	9207      	str	r2, [sp, #28]
 8007fb6:	e014      	b.n	8007fe2 <_vfiprintf_r+0x156>
 8007fb8:	eba0 0308 	sub.w	r3, r0, r8
 8007fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	46a2      	mov	sl, r4
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	e7d2      	b.n	8007f6e <_vfiprintf_r+0xe2>
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	1d19      	adds	r1, r3, #4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	9103      	str	r1, [sp, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bfbb      	ittet	lt
 8007fd4:	425b      	neglt	r3, r3
 8007fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8007fda:	9307      	strge	r3, [sp, #28]
 8007fdc:	9307      	strlt	r3, [sp, #28]
 8007fde:	bfb8      	it	lt
 8007fe0:	9204      	strlt	r2, [sp, #16]
 8007fe2:	7823      	ldrb	r3, [r4, #0]
 8007fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe6:	d10c      	bne.n	8008002 <_vfiprintf_r+0x176>
 8007fe8:	7863      	ldrb	r3, [r4, #1]
 8007fea:	2b2a      	cmp	r3, #42	; 0x2a
 8007fec:	d135      	bne.n	800805a <_vfiprintf_r+0x1ce>
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	3402      	adds	r4, #2
 8007ff2:	1d1a      	adds	r2, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	9203      	str	r2, [sp, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfb8      	it	lt
 8007ffc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80080dc <_vfiprintf_r+0x250>
 8008006:	2203      	movs	r2, #3
 8008008:	4650      	mov	r0, sl
 800800a:	7821      	ldrb	r1, [r4, #0]
 800800c:	f7ff fa2a 	bl	8007464 <memchr>
 8008010:	b140      	cbz	r0, 8008024 <_vfiprintf_r+0x198>
 8008012:	2340      	movs	r3, #64	; 0x40
 8008014:	eba0 000a 	sub.w	r0, r0, sl
 8008018:	fa03 f000 	lsl.w	r0, r3, r0
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	3401      	adds	r4, #1
 8008020:	4303      	orrs	r3, r0
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008028:	2206      	movs	r2, #6
 800802a:	482d      	ldr	r0, [pc, #180]	; (80080e0 <_vfiprintf_r+0x254>)
 800802c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008030:	f7ff fa18 	bl	8007464 <memchr>
 8008034:	2800      	cmp	r0, #0
 8008036:	d03f      	beq.n	80080b8 <_vfiprintf_r+0x22c>
 8008038:	4b2a      	ldr	r3, [pc, #168]	; (80080e4 <_vfiprintf_r+0x258>)
 800803a:	bb1b      	cbnz	r3, 8008084 <_vfiprintf_r+0x1f8>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	3307      	adds	r3, #7
 8008040:	f023 0307 	bic.w	r3, r3, #7
 8008044:	3308      	adds	r3, #8
 8008046:	9303      	str	r3, [sp, #12]
 8008048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804a:	443b      	add	r3, r7
 800804c:	9309      	str	r3, [sp, #36]	; 0x24
 800804e:	e767      	b.n	8007f20 <_vfiprintf_r+0x94>
 8008050:	460c      	mov	r4, r1
 8008052:	2001      	movs	r0, #1
 8008054:	fb0c 3202 	mla	r2, ip, r2, r3
 8008058:	e7a5      	b.n	8007fa6 <_vfiprintf_r+0x11a>
 800805a:	2300      	movs	r3, #0
 800805c:	f04f 0c0a 	mov.w	ip, #10
 8008060:	4619      	mov	r1, r3
 8008062:	3401      	adds	r4, #1
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	4620      	mov	r0, r4
 8008068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800806c:	3a30      	subs	r2, #48	; 0x30
 800806e:	2a09      	cmp	r2, #9
 8008070:	d903      	bls.n	800807a <_vfiprintf_r+0x1ee>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0c5      	beq.n	8008002 <_vfiprintf_r+0x176>
 8008076:	9105      	str	r1, [sp, #20]
 8008078:	e7c3      	b.n	8008002 <_vfiprintf_r+0x176>
 800807a:	4604      	mov	r4, r0
 800807c:	2301      	movs	r3, #1
 800807e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008082:	e7f0      	b.n	8008066 <_vfiprintf_r+0x1da>
 8008084:	ab03      	add	r3, sp, #12
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	462a      	mov	r2, r5
 800808a:	4630      	mov	r0, r6
 800808c:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <_vfiprintf_r+0x25c>)
 800808e:	a904      	add	r1, sp, #16
 8008090:	f7fd ff9e 	bl	8005fd0 <_printf_float>
 8008094:	4607      	mov	r7, r0
 8008096:	1c78      	adds	r0, r7, #1
 8008098:	d1d6      	bne.n	8008048 <_vfiprintf_r+0x1bc>
 800809a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800809c:	07d9      	lsls	r1, r3, #31
 800809e:	d405      	bmi.n	80080ac <_vfiprintf_r+0x220>
 80080a0:	89ab      	ldrh	r3, [r5, #12]
 80080a2:	059a      	lsls	r2, r3, #22
 80080a4:	d402      	bmi.n	80080ac <_vfiprintf_r+0x220>
 80080a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a8:	f000 faab 	bl	8008602 <__retarget_lock_release_recursive>
 80080ac:	89ab      	ldrh	r3, [r5, #12]
 80080ae:	065b      	lsls	r3, r3, #25
 80080b0:	f53f af12 	bmi.w	8007ed8 <_vfiprintf_r+0x4c>
 80080b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080b6:	e711      	b.n	8007edc <_vfiprintf_r+0x50>
 80080b8:	ab03      	add	r3, sp, #12
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	462a      	mov	r2, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <_vfiprintf_r+0x25c>)
 80080c2:	a904      	add	r1, sp, #16
 80080c4:	f7fe fa20 	bl	8006508 <_printf_i>
 80080c8:	e7e4      	b.n	8008094 <_vfiprintf_r+0x208>
 80080ca:	bf00      	nop
 80080cc:	08008d54 	.word	0x08008d54
 80080d0:	08008d74 	.word	0x08008d74
 80080d4:	08008d34 	.word	0x08008d34
 80080d8:	08008c22 	.word	0x08008c22
 80080dc:	08008c28 	.word	0x08008c28
 80080e0:	08008c2c 	.word	0x08008c2c
 80080e4:	08005fd1 	.word	0x08005fd1
 80080e8:	08007e67 	.word	0x08007e67

080080ec <__swbuf_r>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	460e      	mov	r6, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	4605      	mov	r5, r0
 80080f4:	b118      	cbz	r0, 80080fe <__swbuf_r+0x12>
 80080f6:	6983      	ldr	r3, [r0, #24]
 80080f8:	b90b      	cbnz	r3, 80080fe <__swbuf_r+0x12>
 80080fa:	f000 f9e3 	bl	80084c4 <__sinit>
 80080fe:	4b21      	ldr	r3, [pc, #132]	; (8008184 <__swbuf_r+0x98>)
 8008100:	429c      	cmp	r4, r3
 8008102:	d12b      	bne.n	800815c <__swbuf_r+0x70>
 8008104:	686c      	ldr	r4, [r5, #4]
 8008106:	69a3      	ldr	r3, [r4, #24]
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	071a      	lsls	r2, r3, #28
 800810e:	d52f      	bpl.n	8008170 <__swbuf_r+0x84>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	b36b      	cbz	r3, 8008170 <__swbuf_r+0x84>
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	6820      	ldr	r0, [r4, #0]
 8008118:	b2f6      	uxtb	r6, r6
 800811a:	1ac0      	subs	r0, r0, r3
 800811c:	6963      	ldr	r3, [r4, #20]
 800811e:	4637      	mov	r7, r6
 8008120:	4283      	cmp	r3, r0
 8008122:	dc04      	bgt.n	800812e <__swbuf_r+0x42>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f938 	bl	800839c <_fflush_r>
 800812c:	bb30      	cbnz	r0, 800817c <__swbuf_r+0x90>
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	3001      	adds	r0, #1
 8008132:	3b01      	subs	r3, #1
 8008134:	60a3      	str	r3, [r4, #8]
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	701e      	strb	r6, [r3, #0]
 800813e:	6963      	ldr	r3, [r4, #20]
 8008140:	4283      	cmp	r3, r0
 8008142:	d004      	beq.n	800814e <__swbuf_r+0x62>
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d506      	bpl.n	8008158 <__swbuf_r+0x6c>
 800814a:	2e0a      	cmp	r6, #10
 800814c:	d104      	bne.n	8008158 <__swbuf_r+0x6c>
 800814e:	4621      	mov	r1, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f000 f923 	bl	800839c <_fflush_r>
 8008156:	b988      	cbnz	r0, 800817c <__swbuf_r+0x90>
 8008158:	4638      	mov	r0, r7
 800815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <__swbuf_r+0x9c>)
 800815e:	429c      	cmp	r4, r3
 8008160:	d101      	bne.n	8008166 <__swbuf_r+0x7a>
 8008162:	68ac      	ldr	r4, [r5, #8]
 8008164:	e7cf      	b.n	8008106 <__swbuf_r+0x1a>
 8008166:	4b09      	ldr	r3, [pc, #36]	; (800818c <__swbuf_r+0xa0>)
 8008168:	429c      	cmp	r4, r3
 800816a:	bf08      	it	eq
 800816c:	68ec      	ldreq	r4, [r5, #12]
 800816e:	e7ca      	b.n	8008106 <__swbuf_r+0x1a>
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f81a 	bl	80081ac <__swsetup_r>
 8008178:	2800      	cmp	r0, #0
 800817a:	d0cb      	beq.n	8008114 <__swbuf_r+0x28>
 800817c:	f04f 37ff 	mov.w	r7, #4294967295
 8008180:	e7ea      	b.n	8008158 <__swbuf_r+0x6c>
 8008182:	bf00      	nop
 8008184:	08008d54 	.word	0x08008d54
 8008188:	08008d74 	.word	0x08008d74
 800818c:	08008d34 	.word	0x08008d34

08008190 <__ascii_wctomb>:
 8008190:	4603      	mov	r3, r0
 8008192:	4608      	mov	r0, r1
 8008194:	b141      	cbz	r1, 80081a8 <__ascii_wctomb+0x18>
 8008196:	2aff      	cmp	r2, #255	; 0xff
 8008198:	d904      	bls.n	80081a4 <__ascii_wctomb+0x14>
 800819a:	228a      	movs	r2, #138	; 0x8a
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	4770      	bx	lr
 80081a4:	2001      	movs	r0, #1
 80081a6:	700a      	strb	r2, [r1, #0]
 80081a8:	4770      	bx	lr
	...

080081ac <__swsetup_r>:
 80081ac:	4b32      	ldr	r3, [pc, #200]	; (8008278 <__swsetup_r+0xcc>)
 80081ae:	b570      	push	{r4, r5, r6, lr}
 80081b0:	681d      	ldr	r5, [r3, #0]
 80081b2:	4606      	mov	r6, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	b125      	cbz	r5, 80081c2 <__swsetup_r+0x16>
 80081b8:	69ab      	ldr	r3, [r5, #24]
 80081ba:	b913      	cbnz	r3, 80081c2 <__swsetup_r+0x16>
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 f981 	bl	80084c4 <__sinit>
 80081c2:	4b2e      	ldr	r3, [pc, #184]	; (800827c <__swsetup_r+0xd0>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d10f      	bne.n	80081e8 <__swsetup_r+0x3c>
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d0:	0719      	lsls	r1, r3, #28
 80081d2:	d42c      	bmi.n	800822e <__swsetup_r+0x82>
 80081d4:	06dd      	lsls	r5, r3, #27
 80081d6:	d411      	bmi.n	80081fc <__swsetup_r+0x50>
 80081d8:	2309      	movs	r3, #9
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e03e      	b.n	8008266 <__swsetup_r+0xba>
 80081e8:	4b25      	ldr	r3, [pc, #148]	; (8008280 <__swsetup_r+0xd4>)
 80081ea:	429c      	cmp	r4, r3
 80081ec:	d101      	bne.n	80081f2 <__swsetup_r+0x46>
 80081ee:	68ac      	ldr	r4, [r5, #8]
 80081f0:	e7eb      	b.n	80081ca <__swsetup_r+0x1e>
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <__swsetup_r+0xd8>)
 80081f4:	429c      	cmp	r4, r3
 80081f6:	bf08      	it	eq
 80081f8:	68ec      	ldreq	r4, [r5, #12]
 80081fa:	e7e6      	b.n	80081ca <__swsetup_r+0x1e>
 80081fc:	0758      	lsls	r0, r3, #29
 80081fe:	d512      	bpl.n	8008226 <__swsetup_r+0x7a>
 8008200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008202:	b141      	cbz	r1, 8008216 <__swsetup_r+0x6a>
 8008204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008208:	4299      	cmp	r1, r3
 800820a:	d002      	beq.n	8008212 <__swsetup_r+0x66>
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff fcdb 	bl	8007bc8 <_free_r>
 8008212:	2300      	movs	r3, #0
 8008214:	6363      	str	r3, [r4, #52]	; 0x34
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	2300      	movs	r3, #0
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	b94b      	cbnz	r3, 8008246 <__swsetup_r+0x9a>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823c:	d003      	beq.n	8008246 <__swsetup_r+0x9a>
 800823e:	4621      	mov	r1, r4
 8008240:	4630      	mov	r0, r6
 8008242:	f000 fa05 	bl	8008650 <__smakebuf_r>
 8008246:	89a0      	ldrh	r0, [r4, #12]
 8008248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800824c:	f010 0301 	ands.w	r3, r0, #1
 8008250:	d00a      	beq.n	8008268 <__swsetup_r+0xbc>
 8008252:	2300      	movs	r3, #0
 8008254:	60a3      	str	r3, [r4, #8]
 8008256:	6963      	ldr	r3, [r4, #20]
 8008258:	425b      	negs	r3, r3
 800825a:	61a3      	str	r3, [r4, #24]
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	b943      	cbnz	r3, 8008272 <__swsetup_r+0xc6>
 8008260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008264:	d1ba      	bne.n	80081dc <__swsetup_r+0x30>
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	0781      	lsls	r1, r0, #30
 800826a:	bf58      	it	pl
 800826c:	6963      	ldrpl	r3, [r4, #20]
 800826e:	60a3      	str	r3, [r4, #8]
 8008270:	e7f4      	b.n	800825c <__swsetup_r+0xb0>
 8008272:	2000      	movs	r0, #0
 8008274:	e7f7      	b.n	8008266 <__swsetup_r+0xba>
 8008276:	bf00      	nop
 8008278:	20000014 	.word	0x20000014
 800827c:	08008d54 	.word	0x08008d54
 8008280:	08008d74 	.word	0x08008d74
 8008284:	08008d34 	.word	0x08008d34

08008288 <abort>:
 8008288:	2006      	movs	r0, #6
 800828a:	b508      	push	{r3, lr}
 800828c:	f000 fa48 	bl	8008720 <raise>
 8008290:	2001      	movs	r0, #1
 8008292:	f7f9 fc69 	bl	8001b68 <_exit>
	...

08008298 <__sflush_r>:
 8008298:	898a      	ldrh	r2, [r1, #12]
 800829a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829c:	4605      	mov	r5, r0
 800829e:	0710      	lsls	r0, r2, #28
 80082a0:	460c      	mov	r4, r1
 80082a2:	d457      	bmi.n	8008354 <__sflush_r+0xbc>
 80082a4:	684b      	ldr	r3, [r1, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	dc04      	bgt.n	80082b4 <__sflush_r+0x1c>
 80082aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dc01      	bgt.n	80082b4 <__sflush_r+0x1c>
 80082b0:	2000      	movs	r0, #0
 80082b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082b6:	2e00      	cmp	r6, #0
 80082b8:	d0fa      	beq.n	80082b0 <__sflush_r+0x18>
 80082ba:	2300      	movs	r3, #0
 80082bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082c0:	682f      	ldr	r7, [r5, #0]
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	d032      	beq.n	800832c <__sflush_r+0x94>
 80082c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	075a      	lsls	r2, r3, #29
 80082cc:	d505      	bpl.n	80082da <__sflush_r+0x42>
 80082ce:	6863      	ldr	r3, [r4, #4]
 80082d0:	1ac0      	subs	r0, r0, r3
 80082d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082d4:	b10b      	cbz	r3, 80082da <__sflush_r+0x42>
 80082d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082d8:	1ac0      	subs	r0, r0, r3
 80082da:	2300      	movs	r3, #0
 80082dc:	4602      	mov	r2, r0
 80082de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082e0:	4628      	mov	r0, r5
 80082e2:	6a21      	ldr	r1, [r4, #32]
 80082e4:	47b0      	blx	r6
 80082e6:	1c43      	adds	r3, r0, #1
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	d106      	bne.n	80082fa <__sflush_r+0x62>
 80082ec:	6829      	ldr	r1, [r5, #0]
 80082ee:	291d      	cmp	r1, #29
 80082f0:	d82c      	bhi.n	800834c <__sflush_r+0xb4>
 80082f2:	4a29      	ldr	r2, [pc, #164]	; (8008398 <__sflush_r+0x100>)
 80082f4:	40ca      	lsrs	r2, r1
 80082f6:	07d6      	lsls	r6, r2, #31
 80082f8:	d528      	bpl.n	800834c <__sflush_r+0xb4>
 80082fa:	2200      	movs	r2, #0
 80082fc:	6062      	str	r2, [r4, #4]
 80082fe:	6922      	ldr	r2, [r4, #16]
 8008300:	04d9      	lsls	r1, r3, #19
 8008302:	6022      	str	r2, [r4, #0]
 8008304:	d504      	bpl.n	8008310 <__sflush_r+0x78>
 8008306:	1c42      	adds	r2, r0, #1
 8008308:	d101      	bne.n	800830e <__sflush_r+0x76>
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	b903      	cbnz	r3, 8008310 <__sflush_r+0x78>
 800830e:	6560      	str	r0, [r4, #84]	; 0x54
 8008310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008312:	602f      	str	r7, [r5, #0]
 8008314:	2900      	cmp	r1, #0
 8008316:	d0cb      	beq.n	80082b0 <__sflush_r+0x18>
 8008318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800831c:	4299      	cmp	r1, r3
 800831e:	d002      	beq.n	8008326 <__sflush_r+0x8e>
 8008320:	4628      	mov	r0, r5
 8008322:	f7ff fc51 	bl	8007bc8 <_free_r>
 8008326:	2000      	movs	r0, #0
 8008328:	6360      	str	r0, [r4, #52]	; 0x34
 800832a:	e7c2      	b.n	80082b2 <__sflush_r+0x1a>
 800832c:	6a21      	ldr	r1, [r4, #32]
 800832e:	2301      	movs	r3, #1
 8008330:	4628      	mov	r0, r5
 8008332:	47b0      	blx	r6
 8008334:	1c41      	adds	r1, r0, #1
 8008336:	d1c7      	bne.n	80082c8 <__sflush_r+0x30>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0c4      	beq.n	80082c8 <__sflush_r+0x30>
 800833e:	2b1d      	cmp	r3, #29
 8008340:	d001      	beq.n	8008346 <__sflush_r+0xae>
 8008342:	2b16      	cmp	r3, #22
 8008344:	d101      	bne.n	800834a <__sflush_r+0xb2>
 8008346:	602f      	str	r7, [r5, #0]
 8008348:	e7b2      	b.n	80082b0 <__sflush_r+0x18>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	e7ae      	b.n	80082b2 <__sflush_r+0x1a>
 8008354:	690f      	ldr	r7, [r1, #16]
 8008356:	2f00      	cmp	r7, #0
 8008358:	d0aa      	beq.n	80082b0 <__sflush_r+0x18>
 800835a:	0793      	lsls	r3, r2, #30
 800835c:	bf18      	it	ne
 800835e:	2300      	movne	r3, #0
 8008360:	680e      	ldr	r6, [r1, #0]
 8008362:	bf08      	it	eq
 8008364:	694b      	ldreq	r3, [r1, #20]
 8008366:	1bf6      	subs	r6, r6, r7
 8008368:	600f      	str	r7, [r1, #0]
 800836a:	608b      	str	r3, [r1, #8]
 800836c:	2e00      	cmp	r6, #0
 800836e:	dd9f      	ble.n	80082b0 <__sflush_r+0x18>
 8008370:	4633      	mov	r3, r6
 8008372:	463a      	mov	r2, r7
 8008374:	4628      	mov	r0, r5
 8008376:	6a21      	ldr	r1, [r4, #32]
 8008378:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800837c:	47e0      	blx	ip
 800837e:	2800      	cmp	r0, #0
 8008380:	dc06      	bgt.n	8008390 <__sflush_r+0xf8>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	e790      	b.n	80082b2 <__sflush_r+0x1a>
 8008390:	4407      	add	r7, r0
 8008392:	1a36      	subs	r6, r6, r0
 8008394:	e7ea      	b.n	800836c <__sflush_r+0xd4>
 8008396:	bf00      	nop
 8008398:	20400001 	.word	0x20400001

0800839c <_fflush_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	690b      	ldr	r3, [r1, #16]
 80083a0:	4605      	mov	r5, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	b913      	cbnz	r3, 80083ac <_fflush_r+0x10>
 80083a6:	2500      	movs	r5, #0
 80083a8:	4628      	mov	r0, r5
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	b118      	cbz	r0, 80083b6 <_fflush_r+0x1a>
 80083ae:	6983      	ldr	r3, [r0, #24]
 80083b0:	b90b      	cbnz	r3, 80083b6 <_fflush_r+0x1a>
 80083b2:	f000 f887 	bl	80084c4 <__sinit>
 80083b6:	4b14      	ldr	r3, [pc, #80]	; (8008408 <_fflush_r+0x6c>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	d11b      	bne.n	80083f4 <_fflush_r+0x58>
 80083bc:	686c      	ldr	r4, [r5, #4]
 80083be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0ef      	beq.n	80083a6 <_fflush_r+0xa>
 80083c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083c8:	07d0      	lsls	r0, r2, #31
 80083ca:	d404      	bmi.n	80083d6 <_fflush_r+0x3a>
 80083cc:	0599      	lsls	r1, r3, #22
 80083ce:	d402      	bmi.n	80083d6 <_fflush_r+0x3a>
 80083d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083d2:	f000 f915 	bl	8008600 <__retarget_lock_acquire_recursive>
 80083d6:	4628      	mov	r0, r5
 80083d8:	4621      	mov	r1, r4
 80083da:	f7ff ff5d 	bl	8008298 <__sflush_r>
 80083de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083e0:	4605      	mov	r5, r0
 80083e2:	07da      	lsls	r2, r3, #31
 80083e4:	d4e0      	bmi.n	80083a8 <_fflush_r+0xc>
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	059b      	lsls	r3, r3, #22
 80083ea:	d4dd      	bmi.n	80083a8 <_fflush_r+0xc>
 80083ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ee:	f000 f908 	bl	8008602 <__retarget_lock_release_recursive>
 80083f2:	e7d9      	b.n	80083a8 <_fflush_r+0xc>
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <_fflush_r+0x70>)
 80083f6:	429c      	cmp	r4, r3
 80083f8:	d101      	bne.n	80083fe <_fflush_r+0x62>
 80083fa:	68ac      	ldr	r4, [r5, #8]
 80083fc:	e7df      	b.n	80083be <_fflush_r+0x22>
 80083fe:	4b04      	ldr	r3, [pc, #16]	; (8008410 <_fflush_r+0x74>)
 8008400:	429c      	cmp	r4, r3
 8008402:	bf08      	it	eq
 8008404:	68ec      	ldreq	r4, [r5, #12]
 8008406:	e7da      	b.n	80083be <_fflush_r+0x22>
 8008408:	08008d54 	.word	0x08008d54
 800840c:	08008d74 	.word	0x08008d74
 8008410:	08008d34 	.word	0x08008d34

08008414 <std>:
 8008414:	2300      	movs	r3, #0
 8008416:	b510      	push	{r4, lr}
 8008418:	4604      	mov	r4, r0
 800841a:	e9c0 3300 	strd	r3, r3, [r0]
 800841e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008422:	6083      	str	r3, [r0, #8]
 8008424:	8181      	strh	r1, [r0, #12]
 8008426:	6643      	str	r3, [r0, #100]	; 0x64
 8008428:	81c2      	strh	r2, [r0, #14]
 800842a:	6183      	str	r3, [r0, #24]
 800842c:	4619      	mov	r1, r3
 800842e:	2208      	movs	r2, #8
 8008430:	305c      	adds	r0, #92	; 0x5c
 8008432:	f7fd fd27 	bl	8005e84 <memset>
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <std+0x38>)
 8008438:	6224      	str	r4, [r4, #32]
 800843a:	6263      	str	r3, [r4, #36]	; 0x24
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <std+0x3c>)
 800843e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <std+0x40>)
 8008442:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <std+0x44>)
 8008446:	6323      	str	r3, [r4, #48]	; 0x30
 8008448:	bd10      	pop	{r4, pc}
 800844a:	bf00      	nop
 800844c:	08008759 	.word	0x08008759
 8008450:	0800877b 	.word	0x0800877b
 8008454:	080087b3 	.word	0x080087b3
 8008458:	080087d7 	.word	0x080087d7

0800845c <_cleanup_r>:
 800845c:	4901      	ldr	r1, [pc, #4]	; (8008464 <_cleanup_r+0x8>)
 800845e:	f000 b8af 	b.w	80085c0 <_fwalk_reent>
 8008462:	bf00      	nop
 8008464:	0800839d 	.word	0x0800839d

08008468 <__sfmoreglue>:
 8008468:	2268      	movs	r2, #104	; 0x68
 800846a:	b570      	push	{r4, r5, r6, lr}
 800846c:	1e4d      	subs	r5, r1, #1
 800846e:	4355      	muls	r5, r2
 8008470:	460e      	mov	r6, r1
 8008472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008476:	f7ff fc0f 	bl	8007c98 <_malloc_r>
 800847a:	4604      	mov	r4, r0
 800847c:	b140      	cbz	r0, 8008490 <__sfmoreglue+0x28>
 800847e:	2100      	movs	r1, #0
 8008480:	e9c0 1600 	strd	r1, r6, [r0]
 8008484:	300c      	adds	r0, #12
 8008486:	60a0      	str	r0, [r4, #8]
 8008488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800848c:	f7fd fcfa 	bl	8005e84 <memset>
 8008490:	4620      	mov	r0, r4
 8008492:	bd70      	pop	{r4, r5, r6, pc}

08008494 <__sfp_lock_acquire>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__sfp_lock_acquire+0x8>)
 8008496:	f000 b8b3 	b.w	8008600 <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	20001b99 	.word	0x20001b99

080084a0 <__sfp_lock_release>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__sfp_lock_release+0x8>)
 80084a2:	f000 b8ae 	b.w	8008602 <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	20001b99 	.word	0x20001b99

080084ac <__sinit_lock_acquire>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__sinit_lock_acquire+0x8>)
 80084ae:	f000 b8a7 	b.w	8008600 <__retarget_lock_acquire_recursive>
 80084b2:	bf00      	nop
 80084b4:	20001b9a 	.word	0x20001b9a

080084b8 <__sinit_lock_release>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__sinit_lock_release+0x8>)
 80084ba:	f000 b8a2 	b.w	8008602 <__retarget_lock_release_recursive>
 80084be:	bf00      	nop
 80084c0:	20001b9a 	.word	0x20001b9a

080084c4 <__sinit>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	4604      	mov	r4, r0
 80084c8:	f7ff fff0 	bl	80084ac <__sinit_lock_acquire>
 80084cc:	69a3      	ldr	r3, [r4, #24]
 80084ce:	b11b      	cbz	r3, 80084d8 <__sinit+0x14>
 80084d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d4:	f7ff bff0 	b.w	80084b8 <__sinit_lock_release>
 80084d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084dc:	6523      	str	r3, [r4, #80]	; 0x50
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <__sinit+0x68>)
 80084e0:	4a13      	ldr	r2, [pc, #76]	; (8008530 <__sinit+0x6c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	bf08      	it	eq
 80084ea:	2301      	moveq	r3, #1
 80084ec:	4620      	mov	r0, r4
 80084ee:	bf08      	it	eq
 80084f0:	61a3      	streq	r3, [r4, #24]
 80084f2:	f000 f81f 	bl	8008534 <__sfp>
 80084f6:	6060      	str	r0, [r4, #4]
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 f81b 	bl	8008534 <__sfp>
 80084fe:	60a0      	str	r0, [r4, #8]
 8008500:	4620      	mov	r0, r4
 8008502:	f000 f817 	bl	8008534 <__sfp>
 8008506:	2200      	movs	r2, #0
 8008508:	2104      	movs	r1, #4
 800850a:	60e0      	str	r0, [r4, #12]
 800850c:	6860      	ldr	r0, [r4, #4]
 800850e:	f7ff ff81 	bl	8008414 <std>
 8008512:	2201      	movs	r2, #1
 8008514:	2109      	movs	r1, #9
 8008516:	68a0      	ldr	r0, [r4, #8]
 8008518:	f7ff ff7c 	bl	8008414 <std>
 800851c:	2202      	movs	r2, #2
 800851e:	2112      	movs	r1, #18
 8008520:	68e0      	ldr	r0, [r4, #12]
 8008522:	f7ff ff77 	bl	8008414 <std>
 8008526:	2301      	movs	r3, #1
 8008528:	61a3      	str	r3, [r4, #24]
 800852a:	e7d1      	b.n	80084d0 <__sinit+0xc>
 800852c:	080089b8 	.word	0x080089b8
 8008530:	0800845d 	.word	0x0800845d

08008534 <__sfp>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	4607      	mov	r7, r0
 8008538:	f7ff ffac 	bl	8008494 <__sfp_lock_acquire>
 800853c:	4b1e      	ldr	r3, [pc, #120]	; (80085b8 <__sfp+0x84>)
 800853e:	681e      	ldr	r6, [r3, #0]
 8008540:	69b3      	ldr	r3, [r6, #24]
 8008542:	b913      	cbnz	r3, 800854a <__sfp+0x16>
 8008544:	4630      	mov	r0, r6
 8008546:	f7ff ffbd 	bl	80084c4 <__sinit>
 800854a:	3648      	adds	r6, #72	; 0x48
 800854c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008550:	3b01      	subs	r3, #1
 8008552:	d503      	bpl.n	800855c <__sfp+0x28>
 8008554:	6833      	ldr	r3, [r6, #0]
 8008556:	b30b      	cbz	r3, 800859c <__sfp+0x68>
 8008558:	6836      	ldr	r6, [r6, #0]
 800855a:	e7f7      	b.n	800854c <__sfp+0x18>
 800855c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008560:	b9d5      	cbnz	r5, 8008598 <__sfp+0x64>
 8008562:	4b16      	ldr	r3, [pc, #88]	; (80085bc <__sfp+0x88>)
 8008564:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008568:	60e3      	str	r3, [r4, #12]
 800856a:	6665      	str	r5, [r4, #100]	; 0x64
 800856c:	f000 f847 	bl	80085fe <__retarget_lock_init_recursive>
 8008570:	f7ff ff96 	bl	80084a0 <__sfp_lock_release>
 8008574:	2208      	movs	r2, #8
 8008576:	4629      	mov	r1, r5
 8008578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800857c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008580:	6025      	str	r5, [r4, #0]
 8008582:	61a5      	str	r5, [r4, #24]
 8008584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008588:	f7fd fc7c 	bl	8005e84 <memset>
 800858c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008594:	4620      	mov	r0, r4
 8008596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008598:	3468      	adds	r4, #104	; 0x68
 800859a:	e7d9      	b.n	8008550 <__sfp+0x1c>
 800859c:	2104      	movs	r1, #4
 800859e:	4638      	mov	r0, r7
 80085a0:	f7ff ff62 	bl	8008468 <__sfmoreglue>
 80085a4:	4604      	mov	r4, r0
 80085a6:	6030      	str	r0, [r6, #0]
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d1d5      	bne.n	8008558 <__sfp+0x24>
 80085ac:	f7ff ff78 	bl	80084a0 <__sfp_lock_release>
 80085b0:	230c      	movs	r3, #12
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	e7ee      	b.n	8008594 <__sfp+0x60>
 80085b6:	bf00      	nop
 80085b8:	080089b8 	.word	0x080089b8
 80085bc:	ffff0001 	.word	0xffff0001

080085c0 <_fwalk_reent>:
 80085c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c4:	4606      	mov	r6, r0
 80085c6:	4688      	mov	r8, r1
 80085c8:	2700      	movs	r7, #0
 80085ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085d2:	f1b9 0901 	subs.w	r9, r9, #1
 80085d6:	d505      	bpl.n	80085e4 <_fwalk_reent+0x24>
 80085d8:	6824      	ldr	r4, [r4, #0]
 80085da:	2c00      	cmp	r4, #0
 80085dc:	d1f7      	bne.n	80085ce <_fwalk_reent+0xe>
 80085de:	4638      	mov	r0, r7
 80085e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e4:	89ab      	ldrh	r3, [r5, #12]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d907      	bls.n	80085fa <_fwalk_reent+0x3a>
 80085ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085ee:	3301      	adds	r3, #1
 80085f0:	d003      	beq.n	80085fa <_fwalk_reent+0x3a>
 80085f2:	4629      	mov	r1, r5
 80085f4:	4630      	mov	r0, r6
 80085f6:	47c0      	blx	r8
 80085f8:	4307      	orrs	r7, r0
 80085fa:	3568      	adds	r5, #104	; 0x68
 80085fc:	e7e9      	b.n	80085d2 <_fwalk_reent+0x12>

080085fe <__retarget_lock_init_recursive>:
 80085fe:	4770      	bx	lr

08008600 <__retarget_lock_acquire_recursive>:
 8008600:	4770      	bx	lr

08008602 <__retarget_lock_release_recursive>:
 8008602:	4770      	bx	lr

08008604 <__swhatbuf_r>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	460e      	mov	r6, r1
 8008608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860c:	4614      	mov	r4, r2
 800860e:	2900      	cmp	r1, #0
 8008610:	461d      	mov	r5, r3
 8008612:	b096      	sub	sp, #88	; 0x58
 8008614:	da08      	bge.n	8008628 <__swhatbuf_r+0x24>
 8008616:	2200      	movs	r2, #0
 8008618:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800861c:	602a      	str	r2, [r5, #0]
 800861e:	061a      	lsls	r2, r3, #24
 8008620:	d410      	bmi.n	8008644 <__swhatbuf_r+0x40>
 8008622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008626:	e00e      	b.n	8008646 <__swhatbuf_r+0x42>
 8008628:	466a      	mov	r2, sp
 800862a:	f000 f8fb 	bl	8008824 <_fstat_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	dbf1      	blt.n	8008616 <__swhatbuf_r+0x12>
 8008632:	9a01      	ldr	r2, [sp, #4]
 8008634:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008638:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800863c:	425a      	negs	r2, r3
 800863e:	415a      	adcs	r2, r3
 8008640:	602a      	str	r2, [r5, #0]
 8008642:	e7ee      	b.n	8008622 <__swhatbuf_r+0x1e>
 8008644:	2340      	movs	r3, #64	; 0x40
 8008646:	2000      	movs	r0, #0
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	b016      	add	sp, #88	; 0x58
 800864c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008650 <__smakebuf_r>:
 8008650:	898b      	ldrh	r3, [r1, #12]
 8008652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008654:	079d      	lsls	r5, r3, #30
 8008656:	4606      	mov	r6, r0
 8008658:	460c      	mov	r4, r1
 800865a:	d507      	bpl.n	800866c <__smakebuf_r+0x1c>
 800865c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	2301      	movs	r3, #1
 8008666:	6163      	str	r3, [r4, #20]
 8008668:	b002      	add	sp, #8
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	466a      	mov	r2, sp
 800866e:	ab01      	add	r3, sp, #4
 8008670:	f7ff ffc8 	bl	8008604 <__swhatbuf_r>
 8008674:	9900      	ldr	r1, [sp, #0]
 8008676:	4605      	mov	r5, r0
 8008678:	4630      	mov	r0, r6
 800867a:	f7ff fb0d 	bl	8007c98 <_malloc_r>
 800867e:	b948      	cbnz	r0, 8008694 <__smakebuf_r+0x44>
 8008680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008684:	059a      	lsls	r2, r3, #22
 8008686:	d4ef      	bmi.n	8008668 <__smakebuf_r+0x18>
 8008688:	f023 0303 	bic.w	r3, r3, #3
 800868c:	f043 0302 	orr.w	r3, r3, #2
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	e7e3      	b.n	800865c <__smakebuf_r+0xc>
 8008694:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <__smakebuf_r+0x7c>)
 8008696:	62b3      	str	r3, [r6, #40]	; 0x28
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	6020      	str	r0, [r4, #0]
 800869c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	9b00      	ldr	r3, [sp, #0]
 80086a4:	6120      	str	r0, [r4, #16]
 80086a6:	6163      	str	r3, [r4, #20]
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	b15b      	cbz	r3, 80086c4 <__smakebuf_r+0x74>
 80086ac:	4630      	mov	r0, r6
 80086ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086b2:	f000 f8c9 	bl	8008848 <_isatty_r>
 80086b6:	b128      	cbz	r0, 80086c4 <__smakebuf_r+0x74>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	f023 0303 	bic.w	r3, r3, #3
 80086be:	f043 0301 	orr.w	r3, r3, #1
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	89a0      	ldrh	r0, [r4, #12]
 80086c6:	4305      	orrs	r5, r0
 80086c8:	81a5      	strh	r5, [r4, #12]
 80086ca:	e7cd      	b.n	8008668 <__smakebuf_r+0x18>
 80086cc:	0800845d 	.word	0x0800845d

080086d0 <_raise_r>:
 80086d0:	291f      	cmp	r1, #31
 80086d2:	b538      	push	{r3, r4, r5, lr}
 80086d4:	4604      	mov	r4, r0
 80086d6:	460d      	mov	r5, r1
 80086d8:	d904      	bls.n	80086e4 <_raise_r+0x14>
 80086da:	2316      	movs	r3, #22
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	f04f 30ff 	mov.w	r0, #4294967295
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086e6:	b112      	cbz	r2, 80086ee <_raise_r+0x1e>
 80086e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086ec:	b94b      	cbnz	r3, 8008702 <_raise_r+0x32>
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 f830 	bl	8008754 <_getpid_r>
 80086f4:	462a      	mov	r2, r5
 80086f6:	4601      	mov	r1, r0
 80086f8:	4620      	mov	r0, r4
 80086fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fe:	f000 b817 	b.w	8008730 <_kill_r>
 8008702:	2b01      	cmp	r3, #1
 8008704:	d00a      	beq.n	800871c <_raise_r+0x4c>
 8008706:	1c59      	adds	r1, r3, #1
 8008708:	d103      	bne.n	8008712 <_raise_r+0x42>
 800870a:	2316      	movs	r3, #22
 800870c:	6003      	str	r3, [r0, #0]
 800870e:	2001      	movs	r0, #1
 8008710:	e7e7      	b.n	80086e2 <_raise_r+0x12>
 8008712:	2400      	movs	r4, #0
 8008714:	4628      	mov	r0, r5
 8008716:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800871a:	4798      	blx	r3
 800871c:	2000      	movs	r0, #0
 800871e:	e7e0      	b.n	80086e2 <_raise_r+0x12>

08008720 <raise>:
 8008720:	4b02      	ldr	r3, [pc, #8]	; (800872c <raise+0xc>)
 8008722:	4601      	mov	r1, r0
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	f7ff bfd3 	b.w	80086d0 <_raise_r>
 800872a:	bf00      	nop
 800872c:	20000014 	.word	0x20000014

08008730 <_kill_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	2300      	movs	r3, #0
 8008734:	4d06      	ldr	r5, [pc, #24]	; (8008750 <_kill_r+0x20>)
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	4611      	mov	r1, r2
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	f7f9 fa0b 	bl	8001b58 <_kill>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d102      	bne.n	800874c <_kill_r+0x1c>
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	b103      	cbz	r3, 800874c <_kill_r+0x1c>
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	bf00      	nop
 8008750:	20001b94 	.word	0x20001b94

08008754 <_getpid_r>:
 8008754:	f7f9 b9fe 	b.w	8001b54 <_getpid>

08008758 <__sread>:
 8008758:	b510      	push	{r4, lr}
 800875a:	460c      	mov	r4, r1
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	f000 f894 	bl	800888c <_read_r>
 8008764:	2800      	cmp	r0, #0
 8008766:	bfab      	itete	ge
 8008768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800876a:	89a3      	ldrhlt	r3, [r4, #12]
 800876c:	181b      	addge	r3, r3, r0
 800876e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008772:	bfac      	ite	ge
 8008774:	6563      	strge	r3, [r4, #84]	; 0x54
 8008776:	81a3      	strhlt	r3, [r4, #12]
 8008778:	bd10      	pop	{r4, pc}

0800877a <__swrite>:
 800877a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	461f      	mov	r7, r3
 8008780:	898b      	ldrh	r3, [r1, #12]
 8008782:	4605      	mov	r5, r0
 8008784:	05db      	lsls	r3, r3, #23
 8008786:	460c      	mov	r4, r1
 8008788:	4616      	mov	r6, r2
 800878a:	d505      	bpl.n	8008798 <__swrite+0x1e>
 800878c:	2302      	movs	r3, #2
 800878e:	2200      	movs	r2, #0
 8008790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008794:	f000 f868 	bl	8008868 <_lseek_r>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	4632      	mov	r2, r6
 800879c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	4628      	mov	r0, r5
 80087a4:	463b      	mov	r3, r7
 80087a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	f000 b817 	b.w	80087e0 <_write_r>

080087b2 <__sseek>:
 80087b2:	b510      	push	{r4, lr}
 80087b4:	460c      	mov	r4, r1
 80087b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ba:	f000 f855 	bl	8008868 <_lseek_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	bf15      	itete	ne
 80087c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80087c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087ce:	81a3      	strheq	r3, [r4, #12]
 80087d0:	bf18      	it	ne
 80087d2:	81a3      	strhne	r3, [r4, #12]
 80087d4:	bd10      	pop	{r4, pc}

080087d6 <__sclose>:
 80087d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087da:	f000 b813 	b.w	8008804 <_close_r>
	...

080087e0 <_write_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	4611      	mov	r1, r2
 80087e8:	2200      	movs	r2, #0
 80087ea:	4d05      	ldr	r5, [pc, #20]	; (8008800 <_write_r+0x20>)
 80087ec:	602a      	str	r2, [r5, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7f9 f9d0 	bl	8001b94 <_write>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_write_r+0x1e>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_write_r+0x1e>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20001b94 	.word	0x20001b94

08008804 <_close_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	2300      	movs	r3, #0
 8008808:	4d05      	ldr	r5, [pc, #20]	; (8008820 <_close_r+0x1c>)
 800880a:	4604      	mov	r4, r0
 800880c:	4608      	mov	r0, r1
 800880e:	602b      	str	r3, [r5, #0]
 8008810:	f7f9 f9ce 	bl	8001bb0 <_close>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_close_r+0x1a>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_close_r+0x1a>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20001b94 	.word	0x20001b94

08008824 <_fstat_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	2300      	movs	r3, #0
 8008828:	4d06      	ldr	r5, [pc, #24]	; (8008844 <_fstat_r+0x20>)
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	4611      	mov	r1, r2
 8008830:	602b      	str	r3, [r5, #0]
 8008832:	f7f9 f9c0 	bl	8001bb6 <_fstat>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d102      	bne.n	8008840 <_fstat_r+0x1c>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	b103      	cbz	r3, 8008840 <_fstat_r+0x1c>
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	bf00      	nop
 8008844:	20001b94 	.word	0x20001b94

08008848 <_isatty_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	2300      	movs	r3, #0
 800884c:	4d05      	ldr	r5, [pc, #20]	; (8008864 <_isatty_r+0x1c>)
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f9 f9b4 	bl	8001bc0 <_isatty>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_isatty_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_isatty_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20001b94 	.word	0x20001b94

08008868 <_lseek_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	4611      	mov	r1, r2
 8008870:	2200      	movs	r2, #0
 8008872:	4d05      	ldr	r5, [pc, #20]	; (8008888 <_lseek_r+0x20>)
 8008874:	602a      	str	r2, [r5, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f7f9 f9a4 	bl	8001bc4 <_lseek>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_lseek_r+0x1e>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b103      	cbz	r3, 8008886 <_lseek_r+0x1e>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20001b94 	.word	0x20001b94

0800888c <_read_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	2200      	movs	r2, #0
 8008896:	4d05      	ldr	r5, [pc, #20]	; (80088ac <_read_r+0x20>)
 8008898:	602a      	str	r2, [r5, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	f7f9 f96a 	bl	8001b74 <_read>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_read_r+0x1e>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_read_r+0x1e>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20001b94 	.word	0x20001b94

080088b0 <_init>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr

080088bc <_fini>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr


raydio103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004344  08006cd0  08006cd0  00016cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b014  0800b014  000211e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b014  0800b014  000211e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b014  0800b014  000211e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b014  0800b014  0001b014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b018  0800b018  0001b018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011e0  20000000  0800b01c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000168c  200011e0  0800c1fc  000211e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000286c  0800c1fc  0002286c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000211e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001380a  00000000  00000000  00021209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cae  00000000  00000000  00034a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000376c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019734  00000000  00000000  00039558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e88  00000000  00000000  00052c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092010  00000000  00000000  00067b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000f9b24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  000f9be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000d884  00000000  00000000  000fd610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200011e0 	.word	0x200011e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cb8 	.word	0x08006cb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200011e4 	.word	0x200011e4
 800014c:	08006cb8 	.word	0x08006cb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e10:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	2400      	movs	r4, #0
 8000e14:	9404      	str	r4, [sp, #16]
 8000e16:	9405      	str	r4, [sp, #20]
 8000e18:	9406      	str	r4, [sp, #24]
 8000e1a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <MX_GPIO_Init+0xe4>)
 8000e1e:	699a      	ldr	r2, [r3, #24]
 8000e20:	f042 0210 	orr.w	r2, r2, #16
 8000e24:	619a      	str	r2, [r3, #24]
 8000e26:	699a      	ldr	r2, [r3, #24]
 8000e28:	f002 0210 	and.w	r2, r2, #16
 8000e2c:	9200      	str	r2, [sp, #0]
 8000e2e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	f042 0220 	orr.w	r2, r2, #32
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	699a      	ldr	r2, [r3, #24]
 8000e3a:	f002 0220 	and.w	r2, r2, #32
 8000e3e:	9201      	str	r2, [sp, #4]
 8000e40:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	699a      	ldr	r2, [r3, #24]
 8000e44:	f042 0204 	orr.w	r2, r2, #4
 8000e48:	619a      	str	r2, [r3, #24]
 8000e4a:	699a      	ldr	r2, [r3, #24]
 8000e4c:	f002 0204 	and.w	r2, r2, #4
 8000e50:	9202      	str	r2, [sp, #8]
 8000e52:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	699a      	ldr	r2, [r3, #24]
 8000e56:	f042 0208 	orr.w	r2, r2, #8
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	9303      	str	r3, [sp, #12]
 8000e64:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 8000e66:	4e23      	ldr	r6, [pc, #140]	; (8000ef4 <MX_GPIO_Init+0xe8>)
 8000e68:	4622      	mov	r2, r4
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f001 f952 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LCD_CS_GPIO_Port, PIN_LCD_CS_Pin, GPIO_PIN_RESET);
 8000e74:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8000ef8 <MX_GPIO_Init+0xec>
 8000e78:	4622      	mov	r2, r4
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4648      	mov	r0, r9
 8000e7e:	f001 f94b 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8000e82:	4d1e      	ldr	r5, [pc, #120]	; (8000efc <MX_GPIO_Init+0xf0>)
 8000e84:	4622      	mov	r2, r4
 8000e86:	f24c 0138 	movw	r1, #49208	; 0xc038
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f001 f944 	bl	8002118 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PIN_LED_Pin */
  GPIO_InitStruct.Pin = PIN_LED_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e96:	2311      	movs	r3, #17
 8000e98:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2703      	movs	r7, #3
 8000e9e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(PIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	a904      	add	r1, sp, #16
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f001 f826 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_LCD_CS_Pin */
  GPIO_InitStruct.Pin = PIN_LCD_CS_Pin;
 8000ea8:	2340      	movs	r3, #64	; 0x40
 8000eaa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2601      	movs	r6, #1
 8000eae:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb0:	f04f 0802 	mov.w	r8, #2
 8000eb4:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb8:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(PIN_LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000eba:	a904      	add	r1, sp, #16
 8000ebc:	4648      	mov	r0, r9
 8000ebe:	f001 f819 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ec2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ec6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	a904      	add	r1, sp, #16
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	f001 f80f 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ed6:	2338      	movs	r3, #56	; 0x38
 8000ed8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	a904      	add	r1, sp, #16
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	f001 f805 	bl	8001ef4 <HAL_GPIO_Init>

}
 8000eea:	b009      	add	sp, #36	; 0x24
 8000eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <MX_DMA_Init>:
{
 8000f00:	b500      	push	{lr}
 8000f02:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_DMA_Init+0x40>)
 8000f06:	695a      	ldr	r2, [r3, #20]
 8000f08:	f042 0201 	orr.w	r2, r2, #1
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	200b      	movs	r0, #11
 8000f1e:	f000 fe67 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f22:	200b      	movs	r0, #11
 8000f24:	f000 fe9c 	bl	8001c60 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	2010      	movs	r0, #16
 8000f2e:	f000 fe5f 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f32:	2010      	movs	r0, #16
 8000f34:	f000 fe94 	bl	8001c60 <HAL_NVIC_EnableIRQ>
}
 8000f38:	b003      	add	sp, #12
 8000f3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <everythingElse>:
void everythingElse(void){
 8000f44:	b508      	push	{r3, lr}
	if (!elseDone){
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <everythingElse+0x1c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b103      	cbz	r3, 8000f4e <everythingElse+0xa>
}
 8000f4c:	bd08      	pop	{r3, pc}
	  GLCD_Font_Print(10, 3, "hello");
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <everythingElse+0x20>)
 8000f50:	2103      	movs	r1, #3
 8000f52:	200a      	movs	r0, #10
 8000f54:	f002 fd94 	bl	8003a80 <GLCD_Font_Print>
	elseDone = 1;
 8000f58:	4b01      	ldr	r3, [pc, #4]	; (8000f60 <everythingElse+0x1c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
}
 8000f5e:	e7f5      	b.n	8000f4c <everythingElse+0x8>
 8000f60:	200011fc 	.word	0x200011fc
 8000f64:	08006cd4 	.word	0x08006cd4

08000f68 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <Error_Handler+0x2>

08000f6c <MX_ADC1_Init>:
{
 8000f6c:	b500      	push	{lr}
 8000f6e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f70:	2300      	movs	r3, #0
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000f78:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <MX_ADC1_Init+0x68>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <MX_ADC1_Init+0x6c>)
 8000f7c:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f82:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f84:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f86:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC2;
 8000f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f8c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	f000 fd96 	bl	8001ac4 <HAL_ADC_Init>
 8000f98:	b9b0      	cbnz	r0, 8000fc8 <MX_ADC1_Init+0x5c>
  sConfig.Channel = ADC_CHANNEL_0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	a901      	add	r1, sp, #4
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <MX_ADC1_Init+0x68>)
 8000faa:	f000 fbe1 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000fae:	b968      	cbnz	r0, 8000fcc <MX_ADC1_Init+0x60>
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	a901      	add	r1, sp, #4
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_ADC1_Init+0x68>)
 8000fbc:	f000 fbd8 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000fc0:	b930      	cbnz	r0, 8000fd0 <MX_ADC1_Init+0x64>
}
 8000fc2:	b005      	add	sp, #20
 8000fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000fc8:	f7ff ffce 	bl	8000f68 <Error_Handler>
    Error_Handler();
 8000fcc:	f7ff ffcc 	bl	8000f68 <Error_Handler>
    Error_Handler();
 8000fd0:	f7ff ffca 	bl	8000f68 <Error_Handler>
 8000fd4:	20001200 	.word	0x20001200
 8000fd8:	40012400 	.word	0x40012400

08000fdc <MX_TIM1_Init>:
{
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	9412      	str	r4, [sp, #72]	; 0x48
 8000fe4:	9413      	str	r4, [sp, #76]	; 0x4c
 8000fe6:	9414      	str	r4, [sp, #80]	; 0x50
 8000fe8:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	9410      	str	r4, [sp, #64]	; 0x40
 8000fec:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	9409      	str	r4, [sp, #36]	; 0x24
 8000ff0:	940a      	str	r4, [sp, #40]	; 0x28
 8000ff2:	940b      	str	r4, [sp, #44]	; 0x2c
 8000ff4:	940c      	str	r4, [sp, #48]	; 0x30
 8000ff6:	940d      	str	r4, [sp, #52]	; 0x34
 8000ff8:	940e      	str	r4, [sp, #56]	; 0x38
 8000ffa:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	4621      	mov	r1, r4
 8001000:	a801      	add	r0, sp, #4
 8001002:	f003 f943 	bl	800428c <memset>
  htim1.Instance = TIM1;
 8001006:	4831      	ldr	r0, [pc, #196]	; (80010cc <MX_TIM1_Init+0xf0>)
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <MX_TIM1_Init+0xf4>)
 800100a:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 2-1;
 800100c:	2301      	movs	r3, #1
 800100e:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1024-1;
 8001012:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001016:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800101a:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001020:	f001 ff6e 	bl	8002f00 <HAL_TIM_Base_Init>
 8001024:	2800      	cmp	r0, #0
 8001026:	d142      	bne.n	80010ae <MX_TIM1_Init+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102e:	a912      	add	r1, sp, #72	; 0x48
 8001030:	4826      	ldr	r0, [pc, #152]	; (80010cc <MX_TIM1_Init+0xf0>)
 8001032:	f002 f863 	bl	80030fc <HAL_TIM_ConfigClockSource>
 8001036:	2800      	cmp	r0, #0
 8001038:	d13b      	bne.n	80010b2 <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800103a:	4824      	ldr	r0, [pc, #144]	; (80010cc <MX_TIM1_Init+0xf0>)
 800103c:	f001 ff8c 	bl	8002f58 <HAL_TIM_PWM_Init>
 8001040:	2800      	cmp	r0, #0
 8001042:	d138      	bne.n	80010b6 <MX_TIM1_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800104a:	a910      	add	r1, sp, #64	; 0x40
 800104c:	481f      	ldr	r0, [pc, #124]	; (80010cc <MX_TIM1_Init+0xf0>)
 800104e:	f002 facd 	bl	80035ec <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	2800      	cmp	r0, #0
 8001054:	d131      	bne.n	80010ba <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001056:	2360      	movs	r3, #96	; 0x60
 8001058:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105e:	2300      	movs	r3, #0
 8001060:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001062:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001064:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001066:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001068:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800106a:	2204      	movs	r2, #4
 800106c:	a909      	add	r1, sp, #36	; 0x24
 800106e:	4817      	ldr	r0, [pc, #92]	; (80010cc <MX_TIM1_Init+0xf0>)
 8001070:	f001 ffd0 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 8001074:	bb18      	cbnz	r0, 80010be <MX_TIM1_Init+0xe2>
  sConfigOC.Pulse = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107a:	2208      	movs	r2, #8
 800107c:	a909      	add	r1, sp, #36	; 0x24
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <MX_TIM1_Init+0xf0>)
 8001080:	f001 ffc8 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 8001084:	b9e8      	cbnz	r0, 80010c2 <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800108a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800108c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001090:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001096:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001098:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800109a:	a901      	add	r1, sp, #4
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <MX_TIM1_Init+0xf0>)
 800109e:	f002 fadb 	bl	8003658 <HAL_TIMEx_ConfigBreakDeadTime>
 80010a2:	b980      	cbnz	r0, 80010c6 <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <MX_TIM1_Init+0xf0>)
 80010a6:	f000 f9ff 	bl	80014a8 <HAL_TIM_MspPostInit>
}
 80010aa:	b016      	add	sp, #88	; 0x58
 80010ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010ae:	f7ff ff5b 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80010b2:	f7ff ff59 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80010b6:	f7ff ff57 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80010ba:	f7ff ff55 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80010be:	f7ff ff53 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80010c2:	f7ff ff51 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80010c6:	f7ff ff4f 	bl	8000f68 <Error_Handler>
 80010ca:	bf00      	nop
 80010cc:	20001310 	.word	0x20001310
 80010d0:	40012c00 	.word	0x40012c00

080010d4 <MX_SPI1_Init>:
{
 80010d4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80010d6:	480e      	ldr	r0, [pc, #56]	; (8001110 <MX_SPI1_Init+0x3c>)
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI1_Init+0x40>)
 80010da:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010e0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e2:	2300      	movs	r3, #0
 80010e4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010ea:	2201      	movs	r2, #1
 80010ec:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010f4:	2230      	movs	r2, #48	; 0x30
 80010f6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fe:	230a      	movs	r3, #10
 8001100:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001102:	f001 fc23 	bl	800294c <HAL_SPI_Init>
 8001106:	b900      	cbnz	r0, 800110a <MX_SPI1_Init+0x36>
}
 8001108:	bd08      	pop	{r3, pc}
    Error_Handler();
 800110a:	f7ff ff2d 	bl	8000f68 <Error_Handler>
 800110e:	bf00      	nop
 8001110:	200012b8 	.word	0x200012b8
 8001114:	40013000 	.word	0x40013000

08001118 <MX_TIM3_Init>:
{
 8001118:	b500      	push	{lr}
 800111a:	b093      	sub	sp, #76	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111c:	2300      	movs	r3, #0
 800111e:	930e      	str	r3, [sp, #56]	; 0x38
 8001120:	930f      	str	r3, [sp, #60]	; 0x3c
 8001122:	9310      	str	r3, [sp, #64]	; 0x40
 8001124:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001126:	9309      	str	r3, [sp, #36]	; 0x24
 8001128:	930a      	str	r3, [sp, #40]	; 0x28
 800112a:	930b      	str	r3, [sp, #44]	; 0x2c
 800112c:	930c      	str	r3, [sp, #48]	; 0x30
 800112e:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	9307      	str	r3, [sp, #28]
 8001132:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	9303      	str	r3, [sp, #12]
 800113c:	9304      	str	r3, [sp, #16]
 800113e:	9305      	str	r3, [sp, #20]
 8001140:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 8001142:	4823      	ldr	r0, [pc, #140]	; (80011d0 <MX_TIM3_Init+0xb8>)
 8001144:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <MX_TIM3_Init+0xbc>)
 8001146:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 2-1;
 8001148:	2201      	movs	r2, #1
 800114a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1024-1;
 800114e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001152:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001158:	f001 fed2 	bl	8002f00 <HAL_TIM_Base_Init>
 800115c:	bb58      	cbnz	r0, 80011b6 <MX_TIM3_Init+0x9e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001164:	a90e      	add	r1, sp, #56	; 0x38
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <MX_TIM3_Init+0xb8>)
 8001168:	f001 ffc8 	bl	80030fc <HAL_TIM_ConfigClockSource>
 800116c:	bb28      	cbnz	r0, 80011ba <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <MX_TIM3_Init+0xb8>)
 8001170:	f001 fef2 	bl	8002f58 <HAL_TIM_PWM_Init>
 8001174:	bb18      	cbnz	r0, 80011be <MX_TIM3_Init+0xa6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001176:	2306      	movs	r3, #6
 8001178:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800117a:	2300      	movs	r3, #0
 800117c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800117e:	a909      	add	r1, sp, #36	; 0x24
 8001180:	4813      	ldr	r0, [pc, #76]	; (80011d0 <MX_TIM3_Init+0xb8>)
 8001182:	f002 f86f 	bl	8003264 <HAL_TIM_SlaveConfigSynchro>
 8001186:	b9e0      	cbnz	r0, 80011c2 <MX_TIM3_Init+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001188:	2320      	movs	r3, #32
 800118a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001190:	a907      	add	r1, sp, #28
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <MX_TIM3_Init+0xb8>)
 8001194:	f002 fa2a 	bl	80035ec <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	b9a8      	cbnz	r0, 80011c6 <MX_TIM3_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800119e:	2200      	movs	r2, #0
 80011a0:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	4669      	mov	r1, sp
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <MX_TIM3_Init+0xb8>)
 80011aa:	f001 ff33 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	b960      	cbnz	r0, 80011ca <MX_TIM3_Init+0xb2>
}
 80011b0:	b013      	add	sp, #76	; 0x4c
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011b6:	f7ff fed7 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80011ba:	f7ff fed5 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80011be:	f7ff fed3 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80011c2:	f7ff fed1 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80011c6:	f7ff fecf 	bl	8000f68 <Error_Handler>
    Error_Handler();
 80011ca:	f7ff fecd 	bl	8000f68 <Error_Handler>
 80011ce:	bf00      	nop
 80011d0:	20001358 	.word	0x20001358
 80011d4:	40000400 	.word	0x40000400

080011d8 <SystemClock_Config>:
{
 80011d8:	b500      	push	{lr}
 80011da:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011dc:	2228      	movs	r2, #40	; 0x28
 80011de:	2100      	movs	r1, #0
 80011e0:	eb0d 0002 	add.w	r0, sp, r2
 80011e4:	f003 f852 	bl	800428c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	2300      	movs	r3, #0
 80011ea:	9305      	str	r3, [sp, #20]
 80011ec:	9306      	str	r3, [sp, #24]
 80011ee:	9307      	str	r3, [sp, #28]
 80011f0:	9308      	str	r3, [sp, #32]
 80011f2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	9303      	str	r3, [sp, #12]
 80011fa:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011fc:	2201      	movs	r2, #1
 80011fe:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001204:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2202      	movs	r2, #2
 800120a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800120e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001212:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	a80a      	add	r0, sp, #40	; 0x28
 8001216:	f000 ff9b 	bl	8002150 <HAL_RCC_OscConfig>
 800121a:	b9c8      	cbnz	r0, 8001250 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2102      	movs	r1, #2
 8001222:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001230:	a805      	add	r0, sp, #20
 8001232:	f001 f9cd 	bl	80025d0 <HAL_RCC_ClockConfig>
 8001236:	b968      	cbnz	r0, 8001254 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001238:	2302      	movs	r3, #2
 800123a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800123c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001240:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001242:	a801      	add	r0, sp, #4
 8001244:	f001 fa7a 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 8001248:	b930      	cbnz	r0, 8001258 <SystemClock_Config+0x80>
}
 800124a:	b015      	add	sp, #84	; 0x54
 800124c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001250:	f7ff fe8a 	bl	8000f68 <Error_Handler>
    Error_Handler();
 8001254:	f7ff fe88 	bl	8000f68 <Error_Handler>
    Error_Handler();
 8001258:	f7ff fe86 	bl	8000f68 <Error_Handler>

0800125c <main>:
{
 800125c:	b508      	push	{r3, lr}
  HAL_Init();
 800125e:	f000 fa13 	bl	8001688 <HAL_Init>
  SystemClock_Config();
 8001262:	f7ff ffb9 	bl	80011d8 <SystemClock_Config>
  MX_GPIO_Init();
 8001266:	f7ff fdd1 	bl	8000e0c <MX_GPIO_Init>
  MX_DMA_Init();
 800126a:	f7ff fe49 	bl	8000f00 <MX_DMA_Init>
  MX_ADC1_Init();
 800126e:	f7ff fe7d 	bl	8000f6c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001272:	f7ff feb3 	bl	8000fdc <MX_TIM1_Init>
  MX_SPI1_Init();
 8001276:	f7ff ff2d 	bl	80010d4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800127a:	f7ff ff4d 	bl	8001118 <MX_TIM3_Init>
  dspInit();
 800127e:	f002 fc2d 	bl	8003adc <dspInit>
  fftInit();
 8001282:	f002 fc21 	bl	8003ac8 <fftInit>
  dspStart();
 8001286:	f002 fc59 	bl	8003b3c <dspStart>
  HAL_Delay(100);
 800128a:	2064      	movs	r0, #100	; 0x64
 800128c:	f000 fa20 	bl	80016d0 <HAL_Delay>
  HAL_GPIO_WritePin(PIN_LCD_CS_GPIO_Port, PIN_LCD_CS_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <main+0x6c>)
 8001296:	f000 ff3f 	bl	8002118 <HAL_GPIO_WritePin>
  ST7920_Init();
 800129a:	f002 fb7f 	bl	800399c <ST7920_Init>
  ST7920_GraphicMode(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f002 fa5c 	bl	800375c <ST7920_GraphicMode>
  ST7920_Clear();
 80012a4:	f002 fb42 	bl	800392c <ST7920_Clear>
  SetPixel(10, 10);
 80012a8:	210a      	movs	r1, #10
 80012aa:	4608      	mov	r0, r1
 80012ac:	f002 fba6 	bl	80039fc <SetPixel>
  GLCD_Font_Print(10, 3, "hello");
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <main+0x70>)
 80012b2:	2103      	movs	r1, #3
 80012b4:	200a      	movs	r0, #10
 80012b6:	f002 fbe3 	bl	8003a80 <GLCD_Font_Print>
  ST7920_Update();
 80012ba:	f002 fb2b 	bl	8003914 <ST7920_Update>
	 dspProc();
 80012be:	f002 fcb1 	bl	8003c24 <dspProc>
	 everythingElse();
 80012c2:	f7ff fe3f 	bl	8000f44 <everythingElse>
  while (1)
 80012c6:	e7fa      	b.n	80012be <main+0x62>
 80012c8:	40010800 	.word	0x40010800
 80012cc:	08006cd4 	.word	0x08006cd4

080012d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_MspInit+0x3c>)
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	619a      	str	r2, [r3, #24]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	f002 0201 	and.w	r2, r2, #1
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	69da      	ldr	r2, [r3, #28]
 80012e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ec:	61da      	str	r2, [r3, #28]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_MspInit+0x40>)
 80012fa:	6853      	ldr	r3, [r2, #4]
 80012fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001300:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001304:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	b002      	add	sp, #8
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001314:	b510      	push	{r4, lr}
 8001316:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	2300      	movs	r3, #0
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	9304      	str	r3, [sp, #16]
 8001320:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001322:	6802      	ldr	r2, [r0, #0]
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_ADC_MspInit+0x8c>)
 8001326:	429a      	cmp	r2, r3
 8001328:	d001      	beq.n	800132e <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800132a:	b006      	add	sp, #24
 800132c:	bd10      	pop	{r4, pc}
 800132e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001330:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800133a:	619a      	str	r2, [r3, #24]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	f042 0204 	orr.w	r2, r2, #4
 800134c:	619a      	str	r2, [r3, #24]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001358:	2303      	movs	r3, #3
 800135a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	a902      	add	r1, sp, #8
 8001360:	4810      	ldr	r0, [pc, #64]	; (80013a4 <HAL_ADC_MspInit+0x90>)
 8001362:	f000 fdc7 	bl	8001ef4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001366:	4810      	ldr	r0, [pc, #64]	; (80013a8 <HAL_ADC_MspInit+0x94>)
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_ADC_MspInit+0x98>)
 800136a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136c:	2300      	movs	r3, #0
 800136e:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001380:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001382:	2320      	movs	r3, #32
 8001384:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001386:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800138a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138c:	f000 fca0 	bl	8001cd0 <HAL_DMA_Init>
 8001390:	b918      	cbnz	r0, 800139a <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_ADC_MspInit+0x94>)
 8001394:	6223      	str	r3, [r4, #32]
 8001396:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001398:	e7c7      	b.n	800132a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 800139a:	f7ff fde5 	bl	8000f68 <Error_Handler>
 800139e:	e7f8      	b.n	8001392 <HAL_ADC_MspInit+0x7e>
 80013a0:	40012400 	.word	0x40012400
 80013a4:	40010800 	.word	0x40010800
 80013a8:	20001230 	.word	0x20001230
 80013ac:	40020008 	.word	0x40020008

080013b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013b0:	b500      	push	{lr}
 80013b2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	2300      	movs	r3, #0
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	9303      	str	r3, [sp, #12]
 80013ba:	9304      	str	r3, [sp, #16]
 80013bc:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 80013be:	6802      	ldr	r2, [r0, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_SPI_MspInit+0x5c>)
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d002      	beq.n	80013cc <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013c6:	b007      	add	sp, #28
 80013c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013cc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	f042 0204 	orr.w	r2, r2, #4
 80013e8:	619a      	str	r2, [r3, #24]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013f4:	23a0      	movs	r3, #160	; 0xa0
 80013f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	a902      	add	r1, sp, #8
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <HAL_SPI_MspInit+0x60>)
 8001404:	f000 fd76 	bl	8001ef4 <HAL_GPIO_Init>
}
 8001408:	e7dd      	b.n	80013c6 <HAL_SPI_MspInit+0x16>
 800140a:	bf00      	nop
 800140c:	40013000 	.word	0x40013000
 8001410:	40010800 	.word	0x40010800

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b510      	push	{r4, lr}
 8001416:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001418:	6803      	ldr	r3, [r0, #0]
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_TIM_Base_MspInit+0x80>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d004      	beq.n	800142a <HAL_TIM_Base_MspInit+0x16>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_TIM_Base_MspInit+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02a      	beq.n	800147c <HAL_TIM_Base_MspInit+0x68>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001426:	b002      	add	sp, #8
 8001428:	bd10      	pop	{r4, pc}
 800142a:	4604      	mov	r4, r0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_TIM_Base_MspInit+0x88>)
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001434:	619a      	str	r2, [r3, #24]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_TIM_Base_MspInit+0x90>)
 8001444:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001446:	2310      	movs	r3, #16
 8001448:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001456:	6103      	str	r3, [r0, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145c:	6143      	str	r3, [r0, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 800145e:	2320      	movs	r3, #32
 8001460:	6183      	str	r3, [r0, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001466:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001468:	f000 fc32 	bl	8001cd0 <HAL_DMA_Init>
 800146c:	b918      	cbnz	r0, 8001476 <HAL_TIM_Base_MspInit+0x62>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001472:	625c      	str	r4, [r3, #36]	; 0x24
 8001474:	e7d7      	b.n	8001426 <HAL_TIM_Base_MspInit+0x12>
      Error_Handler();
 8001476:	f7ff fd77 	bl	8000f68 <Error_Handler>
 800147a:	e7f8      	b.n	800146e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_TIM_Base_MspInit+0x88>)
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	f042 0202 	orr.w	r2, r2, #2
 8001484:	61da      	str	r2, [r3, #28]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9b01      	ldr	r3, [sp, #4]
}
 8001490:	e7c9      	b.n	8001426 <HAL_TIM_Base_MspInit+0x12>
 8001492:	bf00      	nop
 8001494:	40012c00 	.word	0x40012c00
 8001498:	40000400 	.word	0x40000400
 800149c:	40021000 	.word	0x40021000
 80014a0:	20001274 	.word	0x20001274
 80014a4:	4002006c 	.word	0x4002006c

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b500      	push	{lr}
 80014aa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	2300      	movs	r3, #0
 80014ae:	9302      	str	r3, [sp, #8]
 80014b0:	9303      	str	r3, [sp, #12]
 80014b2:	9304      	str	r3, [sp, #16]
 80014b4:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80014b6:	6802      	ldr	r2, [r0, #0]
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_TIM_MspPostInit+0x48>)
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d002      	beq.n	80014c4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014be:	b007      	add	sp, #28
 80014c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	f042 0204 	orr.w	r2, r2, #4
 80014ce:	619a      	str	r2, [r3, #24]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	a902      	add	r1, sp, #8
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <HAL_TIM_MspPostInit+0x4c>)
 80014ea:	f000 fd03 	bl	8001ef4 <HAL_GPIO_Init>
}
 80014ee:	e7e6      	b.n	80014be <HAL_TIM_MspPostInit+0x16>
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40010800 	.word	0x40010800

080014f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler>

080014fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler>

080014fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler>

080014fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler>

08001500 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler>

08001502 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f000 f8cf 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bd08      	pop	{r3, pc}

08001510 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001510:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001512:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA1_Channel1_IRQHandler+0xc>)
 8001514:	f000 fc4c 	bl	8001db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001518:	bd08      	pop	{r3, pc}
 800151a:	bf00      	nop
 800151c:	20001230 	.word	0x20001230

08001520 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001520:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA1_Channel6_IRQHandler+0xc>)
 8001524:	f000 fc44 	bl	8001db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001528:	bd08      	pop	{r3, pc}
 800152a:	bf00      	nop
 800152c:	20001274 	.word	0x20001274

08001530 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001530:	2001      	movs	r0, #1
 8001532:	4770      	bx	lr

08001534 <_kill>:

int _kill(int pid, int sig)
{
 8001534:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001536:	f002 fe7f 	bl	8004238 <__errno>
 800153a:	2316      	movs	r3, #22
 800153c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800153e:	f04f 30ff 	mov.w	r0, #4294967295
 8001542:	bd08      	pop	{r3, pc}

08001544 <_exit>:

void _exit (int status)
{
 8001544:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001546:	f04f 31ff 	mov.w	r1, #4294967295
 800154a:	f7ff fff3 	bl	8001534 <_kill>
	while (1) {}		/* Make sure we hang here */
 800154e:	e7fe      	b.n	800154e <_exit+0xa>

08001550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	460c      	mov	r4, r1
 8001554:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2500      	movs	r5, #0
 8001558:	e006      	b.n	8001568 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800155a:	f3af 8000 	nop.w
 800155e:	4621      	mov	r1, r4
 8001560:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001566:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	42b5      	cmp	r5, r6
 800156a:	dbf6      	blt.n	800155a <_read+0xa>
	}

return len;
}
 800156c:	4630      	mov	r0, r6
 800156e:	bd70      	pop	{r4, r5, r6, pc}

08001570 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	460c      	mov	r4, r1
 8001574:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	2500      	movs	r5, #0
 8001578:	e004      	b.n	8001584 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800157a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800157e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	3501      	adds	r5, #1
 8001584:	42b5      	cmp	r5, r6
 8001586:	dbf8      	blt.n	800157a <_write+0xa>
	}
	return len;
}
 8001588:	4630      	mov	r0, r6
 800158a:	bd70      	pop	{r4, r5, r6, pc}

0800158c <_close>:

int _close(int file)
{
	return -1;
}
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	4770      	bx	lr

08001592 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001598:	2000      	movs	r0, #0
 800159a:	4770      	bx	lr

0800159c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800159c:	2001      	movs	r0, #1
 800159e:	4770      	bx	lr

080015a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80015a0:	2000      	movs	r0, #0
 80015a2:	4770      	bx	lr

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <_sbrk+0x38>)
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <_sbrk+0x40>)
 80015ae:	6800      	ldr	r0, [r0, #0]
 80015b0:	b140      	cbz	r0, 80015c4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <_sbrk+0x40>)
 80015b4:	6800      	ldr	r0, [r0, #0]
 80015b6:	4403      	add	r3, r0
 80015b8:	1a52      	subs	r2, r2, r1
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d806      	bhi.n	80015cc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <_sbrk+0x40>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80015c2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <_sbrk+0x40>)
 80015c6:	4c08      	ldr	r4, [pc, #32]	; (80015e8 <_sbrk+0x44>)
 80015c8:	6004      	str	r4, [r0, #0]
 80015ca:	e7f2      	b.n	80015b2 <_sbrk+0xe>
    errno = ENOMEM;
 80015cc:	f002 fe34 	bl	8004238 <__errno>
 80015d0:	230c      	movs	r3, #12
 80015d2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	e7f3      	b.n	80015c2 <_sbrk+0x1e>
 80015da:	bf00      	nop
 80015dc:	20005000 	.word	0x20005000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	200013a0 	.word	0x200013a0
 80015e8:	20002870 	.word	0x20002870

080015ec <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ec:	4770      	bx	lr
	...

080015f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
     ldr r0, =_sdata
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f2:	490d      	ldr	r1, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001608:	4c0a      	ldr	r4, [pc, #40]	; (8001634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001616:	f7ff ffe9 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f002 fe13 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161e:	f7ff fe1d 	bl	800125c <main>
  bx lr
 8001622:	4770      	bx	lr
     ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	200011e0 	.word	0x200011e0
  ldr r2, =_sidata
 800162c:	0800b01c 	.word	0x0800b01c
  ldr r2, =_sbss
 8001630:	200011e0 	.word	0x200011e0
  ldr r4, =_ebss
 8001634:	2000286c 	.word	0x2000286c

08001638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>
	...

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b510      	push	{r4, lr}
 800163e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_InitTick+0x40>)
 8001642:	7818      	ldrb	r0, [r3, #0]
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	fbb3 f3f0 	udiv	r3, r3, r0
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_InitTick+0x44>)
 800164e:	6810      	ldr	r0, [r2, #0]
 8001650:	fbb0 f0f3 	udiv	r0, r0, r3
 8001654:	f000 fb12 	bl	8001c7c <HAL_SYSTICK_Config>
 8001658:	b968      	cbnz	r0, 8001676 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	2c0f      	cmp	r4, #15
 800165c:	d901      	bls.n	8001662 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800165e:	2001      	movs	r0, #1
 8001660:	e00a      	b.n	8001678 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001662:	2200      	movs	r2, #0
 8001664:	4621      	mov	r1, r4
 8001666:	f04f 30ff 	mov.w	r0, #4294967295
 800166a:	f000 fac1 	bl	8001bf0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_InitTick+0x48>)
 8001670:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2000      	movs	r0, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001676:	2001      	movs	r0, #1
}
 8001678:	bd10      	pop	{r4, pc}
 800167a:	bf00      	nop
 800167c:	20000004 	.word	0x20000004
 8001680:	20000000 	.word	0x20000000
 8001684:	20000008 	.word	0x20000008

08001688 <HAL_Init>:
{
 8001688:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x20>)
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 fa99 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	200f      	movs	r0, #15
 800169c:	f7ff ffce 	bl	800163c <HAL_InitTick>
  HAL_MspInit();
 80016a0:	f7ff fe16 	bl	80012d0 <HAL_MspInit>
}
 80016a4:	2000      	movs	r0, #0
 80016a6:	bd08      	pop	{r3, pc}
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x10>)
 80016ae:	6811      	ldr	r1, [r2, #0]
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_IncTick+0x14>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	440b      	add	r3, r1
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200013a4 	.word	0x200013a4
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016c4:	4b01      	ldr	r3, [pc, #4]	; (80016cc <HAL_GetTick+0x8>)
 80016c6:	6818      	ldr	r0, [r3, #0]
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200013a4 	.word	0x200013a4

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fff6 	bl	80016c4 <HAL_GetTick>
 80016d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	f1b4 3fff 	cmp.w	r4, #4294967295
 80016de:	d002      	beq.n	80016e6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_Delay+0x24>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	f7ff ffed 	bl	80016c4 <HAL_GetTick>
 80016ea:	1b40      	subs	r0, r0, r5
 80016ec:	42a0      	cmp	r0, r4
 80016ee:	d3fa      	bcc.n	80016e6 <HAL_Delay+0x16>
  {
  }
}
 80016f0:	bd38      	pop	{r3, r4, r5, pc}
 80016f2:	bf00      	nop
 80016f4:	20000004 	.word	0x20000004

080016f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016f8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fe:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001702:	d11e      	bne.n	8001742 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	6892      	ldr	r2, [r2, #8]
 8001710:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001714:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001718:	d003      	beq.n	8001722 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800171a:	4618      	mov	r0, r3
 800171c:	f002 faab 	bl	8003c76 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001720:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001722:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001724:	2a00      	cmp	r2, #0
 8001726:	d1f8      	bne.n	800171a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001732:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001736:	d1f0      	bne.n	800171a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
 8001740:	e7eb      	b.n	800171a <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4798      	blx	r3
}
 8001748:	e7ea      	b.n	8001720 <ADC_DMAConvCplt+0x28>

0800174a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800174a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800174c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800174e:	f002 fa91 	bl	8003c74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001752:	bd08      	pop	{r3, pc}

08001754 <HAL_ADC_ErrorCallback>:
}
 8001754:	4770      	bx	lr

08001756 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001756:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001758:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800175a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800175c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001760:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001762:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800176a:	f7ff fff3 	bl	8001754 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800176e:	bd08      	pop	{r3, pc}

08001770 <HAL_ADC_ConfigChannel>:
{ 
 8001770:	b430      	push	{r4, r5}
 8001772:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001774:	2200      	movs	r2, #0
 8001776:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001778:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800177c:	2a01      	cmp	r2, #1
 800177e:	f000 8091 	beq.w	80018a4 <HAL_ADC_ConfigChannel+0x134>
 8001782:	4603      	mov	r3, r0
 8001784:	2201      	movs	r2, #1
 8001786:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800178a:	684a      	ldr	r2, [r1, #4]
 800178c:	2a06      	cmp	r2, #6
 800178e:	d82d      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001790:	6804      	ldr	r4, [r0, #0]
 8001792:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001794:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001798:	3a05      	subs	r2, #5
 800179a:	f04f 0c1f 	mov.w	ip, #31
 800179e:	fa0c fc02 	lsl.w	ip, ip, r2
 80017a2:	ea20 000c 	bic.w	r0, r0, ip
 80017a6:	680d      	ldr	r5, [r1, #0]
 80017a8:	fa05 f202 	lsl.w	r2, r5, r2
 80017ac:	4302      	orrs	r2, r0
 80017ae:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b0:	680a      	ldr	r2, [r1, #0]
 80017b2:	2a09      	cmp	r2, #9
 80017b4:	d93a      	bls.n	800182c <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017b6:	681c      	ldr	r4, [r3, #0]
 80017b8:	68e0      	ldr	r0, [r4, #12]
 80017ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80017be:	3a1e      	subs	r2, #30
 80017c0:	f04f 0c07 	mov.w	ip, #7
 80017c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80017c8:	ea20 000c 	bic.w	r0, r0, ip
 80017cc:	688d      	ldr	r5, [r1, #8]
 80017ce:	fa05 f202 	lsl.w	r2, r5, r2
 80017d2:	4302      	orrs	r2, r0
 80017d4:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017d6:	680a      	ldr	r2, [r1, #0]
 80017d8:	3a10      	subs	r2, #16
 80017da:	2a01      	cmp	r2, #1
 80017dc:	d936      	bls.n	800184c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017de:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80017e6:	b002      	add	sp, #8
 80017e8:	bc30      	pop	{r4, r5}
 80017ea:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80017ec:	2a0c      	cmp	r2, #12
 80017ee:	d80e      	bhi.n	800180e <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017f0:	6805      	ldr	r5, [r0, #0]
 80017f2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80017f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017f8:	3a23      	subs	r2, #35	; 0x23
 80017fa:	241f      	movs	r4, #31
 80017fc:	4094      	lsls	r4, r2
 80017fe:	ea20 0004 	bic.w	r0, r0, r4
 8001802:	680c      	ldr	r4, [r1, #0]
 8001804:	fa04 f202 	lsl.w	r2, r4, r2
 8001808:	4302      	orrs	r2, r0
 800180a:	632a      	str	r2, [r5, #48]	; 0x30
 800180c:	e7d0      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800180e:	6805      	ldr	r5, [r0, #0]
 8001810:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001812:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001816:	3a41      	subs	r2, #65	; 0x41
 8001818:	241f      	movs	r4, #31
 800181a:	4094      	lsls	r4, r2
 800181c:	ea20 0004 	bic.w	r0, r0, r4
 8001820:	680c      	ldr	r4, [r1, #0]
 8001822:	fa04 f202 	lsl.w	r2, r4, r2
 8001826:	4302      	orrs	r2, r0
 8001828:	62ea      	str	r2, [r5, #44]	; 0x2c
 800182a:	e7c1      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800182c:	681c      	ldr	r4, [r3, #0]
 800182e:	6920      	ldr	r0, [r4, #16]
 8001830:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001834:	f04f 0c07 	mov.w	ip, #7
 8001838:	fa0c fc02 	lsl.w	ip, ip, r2
 800183c:	ea20 000c 	bic.w	r0, r0, ip
 8001840:	688d      	ldr	r5, [r1, #8]
 8001842:	fa05 f202 	lsl.w	r2, r5, r2
 8001846:	4302      	orrs	r2, r0
 8001848:	6122      	str	r2, [r4, #16]
 800184a:	e7c4      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4816      	ldr	r0, [pc, #88]	; (80018a8 <HAL_ADC_ConfigChannel+0x138>)
 8001850:	4282      	cmp	r2, r0
 8001852:	d005      	beq.n	8001860 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800185c:	2001      	movs	r0, #1
 800185e:	e7bf      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001860:	6890      	ldr	r0, [r2, #8]
 8001862:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001866:	d11b      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001868:	6890      	ldr	r0, [r2, #8]
 800186a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800186e:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001870:	680a      	ldr	r2, [r1, #0]
 8001872:	2a10      	cmp	r2, #16
 8001874:	d001      	beq.n	800187a <HAL_ADC_ConfigChannel+0x10a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001876:	2000      	movs	r0, #0
 8001878:	e7b2      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <HAL_ADC_ConfigChannel+0x13c>)
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	490c      	ldr	r1, [pc, #48]	; (80018b0 <HAL_ADC_ConfigChannel+0x140>)
 8001880:	fba1 1202 	umull	r1, r2, r1, r2
 8001884:	0c92      	lsrs	r2, r2, #18
 8001886:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800188a:	0052      	lsls	r2, r2, #1
 800188c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800188e:	e002      	b.n	8001896 <HAL_ADC_ConfigChannel+0x126>
            wait_loop_index--;
 8001890:	9a01      	ldr	r2, [sp, #4]
 8001892:	3a01      	subs	r2, #1
 8001894:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001896:	9a01      	ldr	r2, [sp, #4]
 8001898:	2a00      	cmp	r2, #0
 800189a:	d1f9      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2000      	movs	r0, #0
 800189e:	e79f      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x70>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e79d      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80018a4:	2002      	movs	r0, #2
 80018a6:	e79e      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x76>
 80018a8:	40012400 	.word	0x40012400
 80018ac:	20000000 	.word	0x20000000
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <ADC_Enable>:
{
 80018b4:	b530      	push	{r4, r5, lr}
 80018b6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018bc:	6803      	ldr	r3, [r0, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	f012 0f01 	tst.w	r2, #1
 80018c4:	d133      	bne.n	800192e <ADC_Enable+0x7a>
 80018c6:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <ADC_Enable+0x80>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a18      	ldr	r2, [pc, #96]	; (8001938 <ADC_Enable+0x84>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0c9b      	lsrs	r3, r3, #18
 80018dc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80018de:	e002      	b.n	80018e6 <ADC_Enable+0x32>
      wait_loop_index--;
 80018e0:	9b01      	ldr	r3, [sp, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80018e6:	9b01      	ldr	r3, [sp, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f9      	bne.n	80018e0 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80018ec:	f7ff feea 	bl	80016c4 <HAL_GetTick>
 80018f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f013 0f01 	tst.w	r3, #1
 80018fa:	d116      	bne.n	800192a <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018fc:	f7ff fee2 	bl	80016c4 <HAL_GetTick>
 8001900:	1b43      	subs	r3, r0, r5
 8001902:	2b02      	cmp	r3, #2
 8001904:	d9f5      	bls.n	80018f2 <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f013 0f01 	tst.w	r3, #1
 800190e:	d1f0      	bne.n	80018f2 <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001920:	2300      	movs	r3, #0
 8001922:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8001926:	2001      	movs	r0, #1
 8001928:	e002      	b.n	8001930 <ADC_Enable+0x7c>
  return HAL_OK;
 800192a:	2000      	movs	r0, #0
 800192c:	e000      	b.n	8001930 <ADC_Enable+0x7c>
 800192e:	2000      	movs	r0, #0
}
 8001930:	b003      	add	sp, #12
 8001932:	bd30      	pop	{r4, r5, pc}
 8001934:	20000000 	.word	0x20000000
 8001938:	431bde83 	.word	0x431bde83

0800193c <HAL_ADC_Start_DMA>:
{
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193e:	4604      	mov	r4, r0
 8001940:	460d      	mov	r5, r1
 8001942:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001944:	6801      	ldr	r1, [r0, #0]
 8001946:	4844      	ldr	r0, [pc, #272]	; (8001a58 <HAL_ADC_Start_DMA+0x11c>)
 8001948:	4281      	cmp	r1, r0
 800194a:	d059      	beq.n	8001a00 <HAL_ADC_Start_DMA+0xc4>
 800194c:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_ADC_Start_DMA+0x120>)
 800194e:	4299      	cmp	r1, r3
 8001950:	d056      	beq.n	8001a00 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8001952:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001956:	2b01      	cmp	r3, #1
 8001958:	d07c      	beq.n	8001a54 <HAL_ADC_Start_DMA+0x118>
 800195a:	2301      	movs	r3, #1
 800195c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff ffa7 	bl	80018b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001966:	4607      	mov	r7, r0
 8001968:	2800      	cmp	r0, #0
 800196a:	d16e      	bne.n	8001a4a <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 800196c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800196e:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001972:	f021 0101 	bic.w	r1, r1, #1
 8001976:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800197a:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_ADC_Start_DMA+0x120>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d044      	beq.n	8001a0e <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001986:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800198a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800198c:	6853      	ldr	r3, [r2, #4]
 800198e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001992:	d005      	beq.n	80019a0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001996:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800199a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800199e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019a2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80019a6:	d048      	beq.n	8001a3a <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019aa:	f023 0306 	bic.w	r3, r3, #6
 80019ae:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80019b0:	2300      	movs	r3, #0
 80019b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019b6:	6a23      	ldr	r3, [r4, #32]
 80019b8:	4a29      	ldr	r2, [pc, #164]	; (8001a60 <HAL_ADC_Start_DMA+0x124>)
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019bc:	6a23      	ldr	r3, [r4, #32]
 80019be:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <HAL_ADC_Start_DMA+0x128>)
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019c2:	6a23      	ldr	r3, [r4, #32]
 80019c4:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <HAL_ADC_Start_DMA+0x12c>)
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	f06f 0202 	mvn.w	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019d0:	6822      	ldr	r2, [r4, #0]
 80019d2:	6893      	ldr	r3, [r2, #8]
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019da:	6821      	ldr	r1, [r4, #0]
 80019dc:	4633      	mov	r3, r6
 80019de:	462a      	mov	r2, r5
 80019e0:	314c      	adds	r1, #76	; 0x4c
 80019e2:	6a20      	ldr	r0, [r4, #32]
 80019e4:	f000 f9aa 	bl	8001d3c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80019f0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80019f4:	d024      	beq.n	8001a40 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	e027      	b.n	8001a50 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_ADC_Start_DMA+0x11c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001a08:	d0a3      	beq.n	8001952 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001a0a:	2701      	movs	r7, #1
 8001a0c:	e020      	b.n	8001a50 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a0e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001a18:	d0b4      	beq.n	8001984 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a20:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_ADC_Start_DMA+0x11c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a2a:	d0b9      	beq.n	80019a0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a36:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a38:	e7b2      	b.n	80019a0 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a3e:	e7b7      	b.n	80019b0 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e002      	b.n	8001a50 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001a50:	4638      	mov	r0, r7
 8001a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001a54:	2702      	movs	r7, #2
 8001a56:	e7fb      	b.n	8001a50 <HAL_ADC_Start_DMA+0x114>
 8001a58:	40012400 	.word	0x40012400
 8001a5c:	40012800 	.word	0x40012800
 8001a60:	080016f9 	.word	0x080016f9
 8001a64:	0800174b 	.word	0x0800174b
 8001a68:	08001757 	.word	0x08001757

08001a6c <ADC_ConversionStop_Disable>:
{
 8001a6c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a6e:	6803      	ldr	r3, [r0, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	f012 0f01 	tst.w	r2, #1
 8001a76:	d101      	bne.n	8001a7c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001a78:	2000      	movs	r0, #0
}
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001a86:	f7ff fe1d 	bl	80016c4 <HAL_GetTick>
 8001a8a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f013 0f01 	tst.w	r3, #1
 8001a94:	d013      	beq.n	8001abe <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a96:	f7ff fe15 	bl	80016c4 <HAL_GetTick>
 8001a9a:	1b43      	subs	r3, r0, r5
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d9f5      	bls.n	8001a8c <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f013 0f01 	tst.w	r3, #1
 8001aa8:	d0f0      	beq.n	8001a8c <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001aac:	f043 0310 	orr.w	r3, r3, #16
 8001ab0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001aba:	2001      	movs	r0, #1
 8001abc:	e7dd      	b.n	8001a7a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001abe:	2000      	movs	r0, #0
 8001ac0:	e7db      	b.n	8001a7a <ADC_ConversionStop_Disable+0xe>
	...

08001ac4 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d07b      	beq.n	8001bc0 <HAL_ADC_Init+0xfc>
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001acc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d04d      	beq.n	8001b6e <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff ffca 	bl	8001a6c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ada:	f013 0310 	ands.w	r3, r3, #16
 8001ade:	d169      	bne.n	8001bb4 <HAL_ADC_Init+0xf0>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d167      	bne.n	8001bb4 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ae6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001aea:	f022 0202 	bic.w	r2, r2, #2
 8001aee:	f042 0202 	orr.w	r2, r2, #2
 8001af2:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001af4:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001af6:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001af8:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001afa:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001afc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b00:	68a5      	ldr	r5, [r4, #8]
 8001b02:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001b06:	d002      	beq.n	8001b0e <HAL_ADC_Init+0x4a>
 8001b08:	2d01      	cmp	r5, #1
 8001b0a:	d036      	beq.n	8001b7a <HAL_ADC_Init+0xb6>
 8001b0c:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b0e:	7d26      	ldrb	r6, [r4, #20]
 8001b10:	2e01      	cmp	r6, #1
 8001b12:	d035      	beq.n	8001b80 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001b14:	6826      	ldr	r6, [r4, #0]
 8001b16:	6871      	ldr	r1, [r6, #4]
 8001b18:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001b1c:	4329      	orrs	r1, r5
 8001b1e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001b20:	6825      	ldr	r5, [r4, #0]
 8001b22:	68ae      	ldr	r6, [r5, #8]
 8001b24:	4927      	ldr	r1, [pc, #156]	; (8001bc4 <HAL_ADC_Init+0x100>)
 8001b26:	4031      	ands	r1, r6
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b2c:	68a1      	ldr	r1, [r4, #8]
 8001b2e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001b32:	d001      	beq.n	8001b38 <HAL_ADC_Init+0x74>
 8001b34:	2901      	cmp	r1, #1
 8001b36:	d102      	bne.n	8001b3e <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b38:	6923      	ldr	r3, [r4, #16]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001b3e:	6825      	ldr	r5, [r4, #0]
 8001b40:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001b42:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8001b46:	430b      	orrs	r3, r1
 8001b48:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	6899      	ldr	r1, [r3, #8]
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_ADC_Init+0x104>)
 8001b50:	400b      	ands	r3, r1
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d025      	beq.n	8001ba2 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8001b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b58:	f023 0312 	bic.w	r3, r3, #18
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	e027      	b.n	8001bbe <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001b70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001b74:	f7ff fbce 	bl	8001314 <HAL_ADC_MspInit>
 8001b78:	e7ab      	b.n	8001ad2 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b7a:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001b7e:	e7c6      	b.n	8001b0e <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b80:	b931      	cbnz	r1, 8001b90 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b82:	69a1      	ldr	r1, [r4, #24]
 8001b84:	3901      	subs	r1, #1
 8001b86:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001b8a:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8001b8e:	e7c1      	b.n	8001b14 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b92:	f041 0120 	orr.w	r1, r1, #32
 8001b96:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b9a:	f041 0101 	orr.w	r1, r1, #1
 8001b9e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001ba0:	e7b8      	b.n	8001b14 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ba8:	f023 0303 	bic.w	r3, r3, #3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bb2:	e004      	b.n	8001bbe <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001bbc:	2001      	movs	r0, #1
}
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
}
 8001bc2:	4770      	bx	lr
 8001bc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bc8:	ff1f0efe 	.word	0xff1f0efe

08001bcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001bce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd8:	0200      	lsls	r0, r0, #8
 8001bda:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bde:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001be8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_NVIC_SetPriority+0x68>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfa:	f1c3 0c07 	rsb	ip, r3, #7
 8001bfe:	f1bc 0f04 	cmp.w	ip, #4
 8001c02:	bf28      	it	cs
 8001c04:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c08:	f103 0e04 	add.w	lr, r3, #4
 8001c0c:	f1be 0f06 	cmp.w	lr, #6
 8001c10:	d918      	bls.n	8001c44 <HAL_NVIC_SetPriority+0x54>
 8001c12:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 3eff 	mov.w	lr, #4294967295
 8001c18:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001c1c:	ea21 010c 	bic.w	r1, r1, ip
 8001c20:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c22:	fa0e f303 	lsl.w	r3, lr, r3
 8001c26:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	db0b      	blt.n	8001c48 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	0109      	lsls	r1, r1, #4
 8001c32:	b2c9      	uxtb	r1, r1
 8001c34:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001c38:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001c3c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c40:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c44:	2300      	movs	r3, #0
 8001c46:	e7e5      	b.n	8001c14 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	f000 000f 	and.w	r0, r0, #15
 8001c4c:	0109      	lsls	r1, r1, #4
 8001c4e:	b2c9      	uxtb	r1, r1
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <HAL_NVIC_SetPriority+0x6c>)
 8001c52:	5419      	strb	r1, [r3, r0]
 8001c54:	e7f4      	b.n	8001c40 <HAL_NVIC_SetPriority+0x50>
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	e000ed14 	.word	0xe000ed14

08001c60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c60:	2800      	cmp	r0, #0
 8001c62:	db07      	blt.n	8001c74 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c64:	f000 021f 	and.w	r2, r0, #31
 8001c68:	0940      	lsrs	r0, r0, #5
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	4a02      	ldr	r2, [pc, #8]	; (8001c78 <HAL_NVIC_EnableIRQ+0x18>)
 8001c70:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	3801      	subs	r0, #1
 8001c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c82:	d20b      	bcs.n	8001c9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001c88:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <HAL_SYSTICK_Config+0x24>)
 8001c8c:	21f0      	movs	r1, #240	; 0xf0
 8001c8e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c92:	2000      	movs	r0, #0
 8001c94:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	2207      	movs	r2, #7
 8001c98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ca6:	2401      	movs	r4, #1
 8001ca8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001caa:	40ac      	lsls	r4, r5
 8001cac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001cae:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cb0:	6804      	ldr	r4, [r0, #0]
 8001cb2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb4:	6843      	ldr	r3, [r0, #4]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d005      	beq.n	8001cc6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001cbe:	6803      	ldr	r3, [r0, #0]
 8001cc0:	60da      	str	r2, [r3, #12]
  }
}
 8001cc2:	bc30      	pop	{r4, r5}
 8001cc4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001cc6:	6803      	ldr	r3, [r0, #0]
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001cca:	6803      	ldr	r3, [r0, #0]
 8001ccc:	60d9      	str	r1, [r3, #12]
 8001cce:	e7f8      	b.n	8001cc2 <DMA_SetConfig+0x1e>

08001cd0 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001cd0:	b360      	cbz	r0, 8001d2c <HAL_DMA_Init+0x5c>
{
 8001cd2:	b410      	push	{r4}
 8001cd4:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cd6:	6801      	ldr	r1, [r0, #0]
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_DMA_Init+0x60>)
 8001cda:	440b      	add	r3, r1
 8001cdc:	4815      	ldr	r0, [pc, #84]	; (8001d34 <HAL_DMA_Init+0x64>)
 8001cde:	fba0 0303 	umull	r0, r3, r0, r3
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_DMA_Init+0x68>)
 8001cea:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001cf2:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cf4:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8001cf8:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001cfc:	6853      	ldr	r3, [r2, #4]
 8001cfe:	6894      	ldr	r4, [r2, #8]
 8001d00:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d02:	68d4      	ldr	r4, [r2, #12]
 8001d04:	4323      	orrs	r3, r4
 8001d06:	6914      	ldr	r4, [r2, #16]
 8001d08:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0a:	6954      	ldr	r4, [r2, #20]
 8001d0c:	4323      	orrs	r3, r4
 8001d0e:	6994      	ldr	r4, [r2, #24]
 8001d10:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d12:	69d4      	ldr	r4, [r2, #28]
 8001d14:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001d16:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001d18:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001d24:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001d28:	bc10      	pop	{r4}
 8001d2a:	4770      	bx	lr
    return HAL_ERROR;
 8001d2c:	2001      	movs	r0, #1
}
 8001d2e:	4770      	bx	lr
 8001d30:	bffdfff8 	.word	0xbffdfff8
 8001d34:	cccccccd 	.word	0xcccccccd
 8001d38:	40020000 	.word	0x40020000

08001d3c <HAL_DMA_Start_IT>:
{
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001d40:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001d44:	2801      	cmp	r0, #1
 8001d46:	d031      	beq.n	8001dac <HAL_DMA_Start_IT+0x70>
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d4e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8001d52:	2801      	cmp	r0, #1
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001d56:	2300      	movs	r3, #0
 8001d58:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001d5c:	2002      	movs	r0, #2
}
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d60:	2002      	movs	r0, #2
 8001d62:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d66:	2000      	movs	r0, #0
 8001d68:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001d6a:	6825      	ldr	r5, [r4, #0]
 8001d6c:	6828      	ldr	r0, [r5, #0]
 8001d6e:	f020 0001 	bic.w	r0, r0, #1
 8001d72:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff ff95 	bl	8001ca4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001d7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d7c:	b15b      	cbz	r3, 8001d96 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	6813      	ldr	r3, [r2, #0]
 8001d82:	f043 030e 	orr.w	r3, r3, #14
 8001d86:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d92:	2000      	movs	r0, #0
 8001d94:	e7e3      	b.n	8001d5e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	6813      	ldr	r3, [r2, #0]
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	6813      	ldr	r3, [r2, #0]
 8001da4:	f043 030a 	orr.w	r3, r3, #10
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e7ed      	b.n	8001d88 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001dac:	2002      	movs	r0, #2
 8001dae:	e7d6      	b.n	8001d5e <HAL_DMA_Start_IT+0x22>

08001db0 <HAL_DMA_IRQHandler>:
{
 8001db0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001db2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001db4:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001db6:	6804      	ldr	r4, [r0, #0]
 8001db8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001dba:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	408b      	lsls	r3, r1
 8001dc0:	4213      	tst	r3, r2
 8001dc2:	d035      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x80>
 8001dc4:	f015 0f04 	tst.w	r5, #4
 8001dc8:	d032      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	f013 0f20 	tst.w	r3, #32
 8001dd0:	d103      	bne.n	8001dda <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dda:	6803      	ldr	r3, [r0, #0]
 8001ddc:	4a43      	ldr	r2, [pc, #268]	; (8001eec <HAL_DMA_IRQHandler+0x13c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d014      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x5c>
 8001de2:	3214      	adds	r2, #20
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d018      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x6a>
 8001de8:	3214      	adds	r2, #20
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d017      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x6e>
 8001dee:	3214      	adds	r2, #20
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d017      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x74>
 8001df4:	3214      	adds	r2, #20
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d017      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x7a>
 8001dfa:	3214      	adds	r2, #20
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d002      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x56>
 8001e00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e04:	e003      	b.n	8001e0e <HAL_DMA_IRQHandler+0x5e>
 8001e06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e0a:	e000      	b.n	8001e0e <HAL_DMA_IRQHandler+0x5e>
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_DMA_IRQHandler+0x140>)
 8001e10:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e14:	b103      	cbz	r3, 8001e18 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8001e16:	4798      	blx	r3
}
 8001e18:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	e7f7      	b.n	8001e0e <HAL_DMA_IRQHandler+0x5e>
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	e7f4      	b.n	8001e0e <HAL_DMA_IRQHandler+0x5e>
 8001e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e28:	e7f1      	b.n	8001e0e <HAL_DMA_IRQHandler+0x5e>
 8001e2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e2e:	e7ee      	b.n	8001e0e <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e30:	2302      	movs	r3, #2
 8001e32:	408b      	lsls	r3, r1
 8001e34:	4213      	tst	r3, r2
 8001e36:	d03c      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x102>
 8001e38:	f015 0f02 	tst.w	r5, #2
 8001e3c:	d039      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f013 0f20 	tst.w	r3, #32
 8001e44:	d106      	bne.n	8001e54 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	f023 030a 	bic.w	r3, r3, #10
 8001e4c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e54:	6803      	ldr	r3, [r0, #0]
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_DMA_IRQHandler+0x13c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d014      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xd6>
 8001e5c:	3214      	adds	r2, #20
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01c      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xec>
 8001e62:	3214      	adds	r2, #20
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01b      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0xf0>
 8001e68:	3214      	adds	r2, #20
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01b      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0xf6>
 8001e6e:	3214      	adds	r2, #20
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d01b      	beq.n	8001eac <HAL_DMA_IRQHandler+0xfc>
 8001e74:	3214      	adds	r2, #20
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d002      	beq.n	8001e80 <HAL_DMA_IRQHandler+0xd0>
 8001e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7e:	e003      	b.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
 8001e80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e84:	e000      	b.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
 8001e86:	2202      	movs	r2, #2
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_DMA_IRQHandler+0x140>)
 8001e8a:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001e92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0bf      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001e98:	4798      	blx	r3
 8001e9a:	e7bd      	b.n	8001e18 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	e7f3      	b.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
 8001ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea4:	e7f0      	b.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
 8001ea6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eaa:	e7ed      	b.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
 8001eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb0:	e7ea      	b.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	fa03 f101 	lsl.w	r1, r3, r1
 8001eb8:	4211      	tst	r1, r2
 8001eba:	d0ad      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x68>
 8001ebc:	f015 0f08 	tst.w	r5, #8
 8001ec0:	d0aa      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	f023 030e 	bic.w	r3, r3, #14
 8001ec8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001ecc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ece:	2301      	movs	r3, #1
 8001ed0:	fa03 f202 	lsl.w	r2, r3, r2
 8001ed4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ed6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001edc:	2300      	movs	r3, #0
 8001ede:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001ee2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d097      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8001ee8:	4798      	blx	r3
  return;
 8001eea:	e795      	b.n	8001e18 <HAL_DMA_IRQHandler+0x68>
 8001eec:	40020008 	.word	0x40020008
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ef8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001efa:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efc:	e0a6      	b.n	800204c <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efe:	4d80      	ldr	r5, [pc, #512]	; (8002100 <HAL_GPIO_Init+0x20c>)
 8001f00:	42aa      	cmp	r2, r5
 8001f02:	d010      	beq.n	8001f26 <HAL_GPIO_Init+0x32>
 8001f04:	d907      	bls.n	8001f16 <HAL_GPIO_Init+0x22>
 8001f06:	4d7f      	ldr	r5, [pc, #508]	; (8002104 <HAL_GPIO_Init+0x210>)
 8001f08:	42aa      	cmp	r2, r5
 8001f0a:	d00c      	beq.n	8001f26 <HAL_GPIO_Init+0x32>
 8001f0c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8001f10:	42aa      	cmp	r2, r5
 8001f12:	d008      	beq.n	8001f26 <HAL_GPIO_Init+0x32>
 8001f14:	e013      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
 8001f16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8001f1a:	42aa      	cmp	r2, r5
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x32>
 8001f1e:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8001f22:	42aa      	cmp	r2, r5
 8001f24:	d107      	bne.n	8001f36 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f26:	688a      	ldr	r2, [r1, #8]
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	d058      	beq.n	8001fde <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f2c:	2a01      	cmp	r2, #1
 8001f2e:	d051      	beq.n	8001fd4 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001f30:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f32:	2408      	movs	r4, #8
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001f36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8001f3a:	42aa      	cmp	r2, r5
 8001f3c:	d0f3      	beq.n	8001f26 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f3e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8001f42:	d84e      	bhi.n	8001fe2 <HAL_GPIO_Init+0xee>
 8001f44:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f46:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8001f4a:	d84c      	bhi.n	8001fe6 <HAL_GPIO_Init+0xf2>
 8001f4c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f50:	6833      	ldr	r3, [r6, #0]
 8001f52:	250f      	movs	r5, #15
 8001f54:	4095      	lsls	r5, r2
 8001f56:	ea23 0305 	bic.w	r3, r3, r5
 8001f5a:	fa04 f202 	lsl.w	r2, r4, r2
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	684b      	ldr	r3, [r1, #4]
 8001f64:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f68:	d06e      	beq.n	8002048 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_GPIO_Init+0x214>)
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	619a      	str	r2, [r3, #24]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001f7e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001f82:	1c95      	adds	r5, r2, #2
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_GPIO_Init+0x218>)
 8001f86:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8a:	f00c 0303 	and.w	r3, ip, #3
 8001f8e:	009d      	lsls	r5, r3, #2
 8001f90:	230f      	movs	r3, #15
 8001f92:	40ab      	lsls	r3, r5
 8001f94:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f98:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_GPIO_Init+0x21c>)
 8001f9a:	4298      	cmp	r0, r3
 8001f9c:	d029      	beq.n	8001ff2 <HAL_GPIO_Init+0xfe>
 8001f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa2:	4298      	cmp	r0, r3
 8001fa4:	f000 808e 	beq.w	80020c4 <HAL_GPIO_Init+0x1d0>
 8001fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fac:	4298      	cmp	r0, r3
 8001fae:	f000 808b 	beq.w	80020c8 <HAL_GPIO_Init+0x1d4>
 8001fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb6:	4298      	cmp	r0, r3
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e01a      	b.n	8001ff4 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fbe:	68cc      	ldr	r4, [r1, #12]
          break;
 8001fc0:	e7bd      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc2:	68cc      	ldr	r4, [r1, #12]
 8001fc4:	3404      	adds	r4, #4
          break;
 8001fc6:	e7ba      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fc8:	68cc      	ldr	r4, [r1, #12]
 8001fca:	3408      	adds	r4, #8
          break;
 8001fcc:	e7b7      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fce:	68cc      	ldr	r4, [r1, #12]
 8001fd0:	340c      	adds	r4, #12
          break;
 8001fd2:	e7b4      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8001fd4:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd6:	2408      	movs	r4, #8
 8001fd8:	e7b1      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fda:	2400      	movs	r4, #0
 8001fdc:	e7af      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fde:	2404      	movs	r4, #4
 8001fe0:	e7ad      	b.n	8001f3e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fe2:	1d06      	adds	r6, r0, #4
 8001fe4:	e7af      	b.n	8001f46 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe6:	f1ac 0208 	sub.w	r2, ip, #8
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	e7b0      	b.n	8001f50 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x100>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	40ab      	lsls	r3, r5
 8001ff6:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff8:	3202      	adds	r2, #2
 8001ffa:	4d44      	ldr	r5, [pc, #272]	; (800210c <HAL_GPIO_Init+0x218>)
 8001ffc:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002000:	684b      	ldr	r3, [r1, #4]
 8002002:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002006:	d061      	beq.n	80020cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002008:	4a42      	ldr	r2, [pc, #264]	; (8002114 <HAL_GPIO_Init+0x220>)
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	ea43 030e 	orr.w	r3, r3, lr
 8002010:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002012:	684b      	ldr	r3, [r1, #4]
 8002014:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002018:	d05e      	beq.n	80020d8 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800201a:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <HAL_GPIO_Init+0x220>)
 800201c:	6853      	ldr	r3, [r2, #4]
 800201e:	ea43 030e 	orr.w	r3, r3, lr
 8002022:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002024:	684b      	ldr	r3, [r1, #4]
 8002026:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800202a:	d05b      	beq.n	80020e4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4a39      	ldr	r2, [pc, #228]	; (8002114 <HAL_GPIO_Init+0x220>)
 800202e:	6893      	ldr	r3, [r2, #8]
 8002030:	ea43 030e 	orr.w	r3, r3, lr
 8002034:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002036:	684b      	ldr	r3, [r1, #4]
 8002038:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800203c:	d058      	beq.n	80020f0 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800203e:	4a35      	ldr	r2, [pc, #212]	; (8002114 <HAL_GPIO_Init+0x220>)
 8002040:	68d3      	ldr	r3, [r2, #12]
 8002042:	ea43 030e 	orr.w	r3, r3, lr
 8002046:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002048:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	680a      	ldr	r2, [r1, #0]
 800204e:	fa32 f30c 	lsrs.w	r3, r2, ip
 8002052:	d053      	beq.n	80020fc <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8002054:	2301      	movs	r3, #1
 8002056:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 800205e:	ea33 0202 	bics.w	r2, r3, r2
 8002062:	d1f1      	bne.n	8002048 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8002064:	684a      	ldr	r2, [r1, #4]
 8002066:	2a12      	cmp	r2, #18
 8002068:	f63f af49 	bhi.w	8001efe <HAL_GPIO_Init+0xa>
 800206c:	2a12      	cmp	r2, #18
 800206e:	f63f af66 	bhi.w	8001f3e <HAL_GPIO_Init+0x4a>
 8002072:	a501      	add	r5, pc, #4	; (adr r5, 8002078 <HAL_GPIO_Init+0x184>)
 8002074:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002078:	08001f27 	.word	0x08001f27
 800207c:	08001fbf 	.word	0x08001fbf
 8002080:	08001fc9 	.word	0x08001fc9
 8002084:	08001fdb 	.word	0x08001fdb
 8002088:	08001f3f 	.word	0x08001f3f
 800208c:	08001f3f 	.word	0x08001f3f
 8002090:	08001f3f 	.word	0x08001f3f
 8002094:	08001f3f 	.word	0x08001f3f
 8002098:	08001f3f 	.word	0x08001f3f
 800209c:	08001f3f 	.word	0x08001f3f
 80020a0:	08001f3f 	.word	0x08001f3f
 80020a4:	08001f3f 	.word	0x08001f3f
 80020a8:	08001f3f 	.word	0x08001f3f
 80020ac:	08001f3f 	.word	0x08001f3f
 80020b0:	08001f3f 	.word	0x08001f3f
 80020b4:	08001f3f 	.word	0x08001f3f
 80020b8:	08001f3f 	.word	0x08001f3f
 80020bc:	08001fc3 	.word	0x08001fc3
 80020c0:	08001fcf 	.word	0x08001fcf
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c4:	2301      	movs	r3, #1
 80020c6:	e795      	b.n	8001ff4 <HAL_GPIO_Init+0x100>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e793      	b.n	8001ff4 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_GPIO_Init+0x220>)
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	ea23 030e 	bic.w	r3, r3, lr
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e79c      	b.n	8002012 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_GPIO_Init+0x220>)
 80020da:	6853      	ldr	r3, [r2, #4]
 80020dc:	ea23 030e 	bic.w	r3, r3, lr
 80020e0:	6053      	str	r3, [r2, #4]
 80020e2:	e79f      	b.n	8002024 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_GPIO_Init+0x220>)
 80020e6:	6893      	ldr	r3, [r2, #8]
 80020e8:	ea23 030e 	bic.w	r3, r3, lr
 80020ec:	6093      	str	r3, [r2, #8]
 80020ee:	e7a2      	b.n	8002036 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020f0:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_GPIO_Init+0x220>)
 80020f2:	68d3      	ldr	r3, [r2, #12]
 80020f4:	ea23 030e 	bic.w	r3, r3, lr
 80020f8:	60d3      	str	r3, [r2, #12]
 80020fa:	e7a5      	b.n	8002048 <HAL_GPIO_Init+0x154>
  }
}
 80020fc:	b002      	add	sp, #8
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	10220000 	.word	0x10220000
 8002104:	10310000 	.word	0x10310000
 8002108:	40021000 	.word	0x40021000
 800210c:	40010000 	.word	0x40010000
 8002110:	40010800 	.word	0x40010800
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002118:	b10a      	cbz	r2, 800211e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	6101      	str	r1, [r0, #16]
 800211c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800211e:	0409      	lsls	r1, r1, #16
 8002120:	6101      	str	r1, [r0, #16]
  }
}
 8002122:	4770      	bx	lr

08002124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002124:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <RCC_Delay+0x24>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <RCC_Delay+0x28>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	0a5b      	lsrs	r3, r3, #9
 8002132:	fb00 f303 	mul.w	r3, r0, r3
 8002136:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002138:	bf00      	nop
  }
  while (Delay --);
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	9201      	str	r2, [sp, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f9      	bne.n	8002138 <RCC_Delay+0x14>
}
 8002144:	b002      	add	sp, #8
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000
 800214c:	10624dd3 	.word	0x10624dd3

08002150 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002150:	2800      	cmp	r0, #0
 8002152:	f000 81f1 	beq.w	8002538 <HAL_RCC_OscConfig+0x3e8>
{
 8002156:	b570      	push	{r4, r5, r6, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215c:	6803      	ldr	r3, [r0, #0]
 800215e:	f013 0f01 	tst.w	r3, #1
 8002162:	d02c      	beq.n	80021be <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002164:	4b99      	ldr	r3, [pc, #612]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b04      	cmp	r3, #4
 800216e:	d01d      	beq.n	80021ac <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002170:	4b96      	ldr	r3, [pc, #600]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d012      	beq.n	80021a2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217c:	6863      	ldr	r3, [r4, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d041      	beq.n	8002208 <HAL_RCC_OscConfig+0xb8>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d155      	bne.n	8002234 <HAL_RCC_OscConfig+0xe4>
 8002188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800218c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e037      	b.n	8002212 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a2:	4b8a      	ldr	r3, [pc, #552]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021aa:	d0e7      	beq.n	800217c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	4b87      	ldr	r3, [pc, #540]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021b4:	d003      	beq.n	80021be <HAL_RCC_OscConfig+0x6e>
 80021b6:	6863      	ldr	r3, [r4, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 81bf 	beq.w	800253c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	f013 0f02 	tst.w	r3, #2
 80021c4:	d075      	beq.n	80022b2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	4b81      	ldr	r3, [pc, #516]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f013 0f0c 	tst.w	r3, #12
 80021ce:	d05f      	beq.n	8002290 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d0:	4b7e      	ldr	r3, [pc, #504]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d054      	beq.n	8002286 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021dc:	6923      	ldr	r3, [r4, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 808a 	beq.w	80022f8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80021e4:	4b7a      	ldr	r3, [pc, #488]	; (80023d0 <HAL_RCC_OscConfig+0x280>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021ea:	f7ff fa6b 	bl	80016c4 <HAL_GetTick>
 80021ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f013 0f02 	tst.w	r3, #2
 80021f8:	d175      	bne.n	80022e6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7ff fa63 	bl	80016c4 <HAL_GetTick>
 80021fe:	1b40      	subs	r0, r0, r5
 8002200:	2802      	cmp	r0, #2
 8002202:	d9f5      	bls.n	80021f0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e19e      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	4a70      	ldr	r2, [pc, #448]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002212:	6863      	ldr	r3, [r4, #4]
 8002214:	b343      	cbz	r3, 8002268 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002216:	f7ff fa55 	bl	80016c4 <HAL_GetTick>
 800221a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221c:	4b6b      	ldr	r3, [pc, #428]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002224:	d1cb      	bne.n	80021be <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002226:	f7ff fa4d 	bl	80016c4 <HAL_GetTick>
 800222a:	1b40      	subs	r0, r0, r5
 800222c:	2864      	cmp	r0, #100	; 0x64
 800222e:	d9f5      	bls.n	800221c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002230:	2003      	movs	r0, #3
 8002232:	e188      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d009      	beq.n	800224e <HAL_RCC_OscConfig+0xfe>
 800223a:	4b64      	ldr	r3, [pc, #400]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e7e1      	b.n	8002212 <HAL_RCC_OscConfig+0xc2>
 800224e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002252:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e7d4      	b.n	8002212 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002268:	f7ff fa2c 	bl	80016c4 <HAL_GetTick>
 800226c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	4b57      	ldr	r3, [pc, #348]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002276:	d0a2      	beq.n	80021be <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff fa24 	bl	80016c4 <HAL_GetTick>
 800227c:	1b40      	subs	r0, r0, r5
 800227e:	2864      	cmp	r0, #100	; 0x64
 8002280:	d9f5      	bls.n	800226e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002282:	2003      	movs	r0, #3
 8002284:	e15f      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800228e:	d1a5      	bne.n	80021dc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002290:	4b4e      	ldr	r3, [pc, #312]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f013 0f02 	tst.w	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
 800229a:	6923      	ldr	r3, [r4, #16]
 800229c:	2b01      	cmp	r3, #1
 800229e:	f040 814f 	bne.w	8002540 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022aa:	6961      	ldr	r1, [r4, #20]
 80022ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022b0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	f013 0f08 	tst.w	r3, #8
 80022b8:	d033      	beq.n	8002322 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ba:	69a3      	ldr	r3, [r4, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d05c      	beq.n	800237a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80022c0:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <HAL_RCC_OscConfig+0x280>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80022c8:	f7ff f9fc 	bl	80016c4 <HAL_GetTick>
 80022cc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f013 0f02 	tst.w	r3, #2
 80022d6:	d121      	bne.n	800231c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff f9f4 	bl	80016c4 <HAL_GetTick>
 80022dc:	1b40      	subs	r0, r0, r5
 80022de:	2802      	cmp	r0, #2
 80022e0:	d9f5      	bls.n	80022ce <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80022e2:	2003      	movs	r0, #3
 80022e4:	e12f      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4a39      	ldr	r2, [pc, #228]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022e8:	6813      	ldr	r3, [r2, #0]
 80022ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022ee:	6961      	ldr	r1, [r4, #20]
 80022f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e7dc      	b.n	80022b2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_RCC_OscConfig+0x280>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022fe:	f7ff f9e1 	bl	80016c4 <HAL_GetTick>
 8002302:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002304:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f013 0f02 	tst.w	r3, #2
 800230c:	d0d1      	beq.n	80022b2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7ff f9d9 	bl	80016c4 <HAL_GetTick>
 8002312:	1b40      	subs	r0, r0, r5
 8002314:	2802      	cmp	r0, #2
 8002316:	d9f5      	bls.n	8002304 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002318:	2003      	movs	r0, #3
 800231a:	e114      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800231c:	2001      	movs	r0, #1
 800231e:	f7ff ff01 	bl	8002124 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	f013 0f04 	tst.w	r3, #4
 8002328:	f000 8096 	beq.w	8002458 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002334:	d134      	bne.n	80023a0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800233e:	61da      	str	r2, [r3, #28]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800234a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_RCC_OscConfig+0x284>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002354:	d026      	beq.n	80023a4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002356:	68e3      	ldr	r3, [r4, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d03d      	beq.n	80023d8 <HAL_RCC_OscConfig+0x288>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d153      	bne.n	8002408 <HAL_RCC_OscConfig+0x2b8>
 8002360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002364:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002368:	6a1a      	ldr	r2, [r3, #32]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	621a      	str	r2, [r3, #32]
 8002370:	6a1a      	ldr	r2, [r3, #32]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	621a      	str	r2, [r3, #32]
 8002378:	e033      	b.n	80023e2 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_OscConfig+0x280>)
 800237c:	2200      	movs	r2, #0
 800237e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002382:	f7ff f99f 	bl	80016c4 <HAL_GetTick>
 8002386:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f013 0f02 	tst.w	r3, #2
 8002390:	d0c7      	beq.n	8002322 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002392:	f7ff f997 	bl	80016c4 <HAL_GetTick>
 8002396:	1b40      	subs	r0, r0, r5
 8002398:	2802      	cmp	r0, #2
 800239a:	d9f5      	bls.n	8002388 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
 800239e:	e0d2      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80023a0:	2500      	movs	r5, #0
 80023a2:	e7d3      	b.n	800234c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a4:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x284>)
 80023a6:	6813      	ldr	r3, [r2, #0]
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80023ae:	f7ff f989 	bl	80016c4 <HAL_GetTick>
 80023b2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_RCC_OscConfig+0x284>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023bc:	d1cb      	bne.n	8002356 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff f981 	bl	80016c4 <HAL_GetTick>
 80023c2:	1b80      	subs	r0, r0, r6
 80023c4:	2864      	cmp	r0, #100	; 0x64
 80023c6:	d9f5      	bls.n	80023b4 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80023c8:	2003      	movs	r0, #3
 80023ca:	e0bc      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
 80023cc:	40021000 	.word	0x40021000
 80023d0:	42420000 	.word	0x42420000
 80023d4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	4a5f      	ldr	r2, [pc, #380]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 80023da:	6a13      	ldr	r3, [r2, #32]
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e2:	68e3      	ldr	r3, [r4, #12]
 80023e4:	b333      	cbz	r3, 8002434 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80023e6:	f7ff f96d 	bl	80016c4 <HAL_GetTick>
 80023ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f013 0f02 	tst.w	r3, #2
 80023f4:	d12f      	bne.n	8002456 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7ff f965 	bl	80016c4 <HAL_GetTick>
 80023fa:	1b80      	subs	r0, r0, r6
 80023fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002400:	4298      	cmp	r0, r3
 8002402:	d9f3      	bls.n	80023ec <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002404:	2003      	movs	r0, #3
 8002406:	e09e      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	2b05      	cmp	r3, #5
 800240a:	d009      	beq.n	8002420 <HAL_RCC_OscConfig+0x2d0>
 800240c:	4b52      	ldr	r3, [pc, #328]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 800240e:	6a1a      	ldr	r2, [r3, #32]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	621a      	str	r2, [r3, #32]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	f022 0204 	bic.w	r2, r2, #4
 800241c:	621a      	str	r2, [r3, #32]
 800241e:	e7e0      	b.n	80023e2 <HAL_RCC_OscConfig+0x292>
 8002420:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	f042 0204 	orr.w	r2, r2, #4
 8002428:	621a      	str	r2, [r3, #32]
 800242a:	6a1a      	ldr	r2, [r3, #32]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	621a      	str	r2, [r3, #32]
 8002432:	e7d6      	b.n	80023e2 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002434:	f7ff f946 	bl	80016c4 <HAL_GetTick>
 8002438:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f013 0f02 	tst.w	r3, #2
 8002442:	d008      	beq.n	8002456 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7ff f93e 	bl	80016c4 <HAL_GetTick>
 8002448:	1b80      	subs	r0, r0, r6
 800244a:	f241 3388 	movw	r3, #5000	; 0x1388
 800244e:	4298      	cmp	r0, r3
 8002450:	d9f3      	bls.n	800243a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002452:	2003      	movs	r0, #3
 8002454:	e077      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002456:	b9e5      	cbnz	r5, 8002492 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	69e3      	ldr	r3, [r4, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d072      	beq.n	8002544 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 8002460:	6852      	ldr	r2, [r2, #4]
 8002462:	f002 020c 	and.w	r2, r2, #12
 8002466:	2a08      	cmp	r2, #8
 8002468:	d056      	beq.n	8002518 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246a:	2b02      	cmp	r3, #2
 800246c:	d017      	beq.n	800249e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_OscConfig+0x40c>)
 8002470:	2200      	movs	r2, #0
 8002472:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002474:	f7ff f926 	bl	80016c4 <HAL_GetTick>
 8002478:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002482:	d047      	beq.n	8002514 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7ff f91e 	bl	80016c4 <HAL_GetTick>
 8002488:	1b00      	subs	r0, r0, r4
 800248a:	2802      	cmp	r0, #2
 800248c:	d9f5      	bls.n	800247a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800248e:	2003      	movs	r0, #3
 8002490:	e059      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 8002494:	69d3      	ldr	r3, [r2, #28]
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	61d3      	str	r3, [r2, #28]
 800249c:	e7dc      	b.n	8002458 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_RCC_OscConfig+0x40c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80024a4:	f7ff f90e 	bl	80016c4 <HAL_GetTick>
 80024a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024aa:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024b2:	d006      	beq.n	80024c2 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7ff f906 	bl	80016c4 <HAL_GetTick>
 80024b8:	1b40      	subs	r0, r0, r5
 80024ba:	2802      	cmp	r0, #2
 80024bc:	d9f5      	bls.n	80024aa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80024be:	2003      	movs	r0, #3
 80024c0:	e041      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c2:	6a23      	ldr	r3, [r4, #32]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d01a      	beq.n	8002500 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ca:	4923      	ldr	r1, [pc, #140]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 80024cc:	684b      	ldr	r3, [r1, #4]
 80024ce:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80024d2:	6a22      	ldr	r2, [r4, #32]
 80024d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024d6:	4302      	orrs	r2, r0
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_RCC_OscConfig+0x40c>)
 80024de:	2201      	movs	r2, #1
 80024e0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80024e2:	f7ff f8ef 	bl	80016c4 <HAL_GetTick>
 80024e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024f0:	d10e      	bne.n	8002510 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7ff f8e7 	bl	80016c4 <HAL_GetTick>
 80024f6:	1b00      	subs	r0, r0, r4
 80024f8:	2802      	cmp	r0, #2
 80024fa:	d9f5      	bls.n	80024e8 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80024fc:	2003      	movs	r0, #3
 80024fe:	e022      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002500:	4a15      	ldr	r2, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002508:	68a1      	ldr	r1, [r4, #8]
 800250a:	430b      	orrs	r3, r1
 800250c:	6053      	str	r3, [r2, #4]
 800250e:	e7dc      	b.n	80024ca <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002510:	2000      	movs	r0, #0
 8002512:	e018      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
 8002514:	2000      	movs	r0, #0
 8002516:	e016      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	2b01      	cmp	r3, #1
 800251a:	d016      	beq.n	800254a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_RCC_OscConfig+0x408>)
 800251e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002524:	6a22      	ldr	r2, [r4, #32]
 8002526:	4291      	cmp	r1, r2
 8002528:	d111      	bne.n	800254e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800252a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800252e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002530:	4293      	cmp	r3, r2
 8002532:	d10e      	bne.n	8002552 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002534:	2000      	movs	r0, #0
 8002536:	e006      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
}
 800253a:	4770      	bx	lr
        return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e002      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002544:	2000      	movs	r0, #0
}
 8002546:	b002      	add	sp, #8
 8002548:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e7fb      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800254e:	2001      	movs	r0, #1
 8002550:	e7f9      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
 8002552:	2001      	movs	r0, #1
 8002554:	e7f7      	b.n	8002546 <HAL_RCC_OscConfig+0x3f6>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	42420000 	.word	0x42420000

08002560 <HAL_RCC_GetSysClockFreq>:
{
 8002560:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002566:	f10d 0c18 	add.w	ip, sp, #24
 800256a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800256e:	f240 2301 	movw	r3, #513	; 0x201
 8002572:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x64>)
 8002578:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	2a08      	cmp	r2, #8
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8002582:	4811      	ldr	r0, [pc, #68]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002584:	b006      	add	sp, #24
 8002586:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002588:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800258c:	3218      	adds	r2, #24
 800258e:	446a      	add	r2, sp
 8002590:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002594:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002598:	d00d      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x64>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80025a2:	3318      	adds	r3, #24
 80025a4:	446b      	add	r3, sp
 80025a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x68>)
 80025ac:	fb02 f000 	mul.w	r0, r2, r0
 80025b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80025b4:	e7e6      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetSysClockFreq+0x6c>)
 80025b8:	fb03 f000 	mul.w	r0, r3, r0
 80025bc:	e7e2      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x24>
 80025be:	bf00      	nop
 80025c0:	08006cec 	.word	0x08006cec
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	003d0900 	.word	0x003d0900

080025d0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	f000 80a0 	beq.w	8002716 <HAL_RCC_ClockConfig+0x146>
{
 80025d6:	b570      	push	{r4, r5, r6, lr}
 80025d8:	460d      	mov	r5, r1
 80025da:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025dc:	4b52      	ldr	r3, [pc, #328]	; (8002728 <HAL_RCC_ClockConfig+0x158>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	428b      	cmp	r3, r1
 80025e6:	d20b      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e8:	4a4f      	ldr	r2, [pc, #316]	; (8002728 <HAL_RCC_ClockConfig+0x158>)
 80025ea:	6813      	ldr	r3, [r2, #0]
 80025ec:	f023 0307 	bic.w	r3, r3, #7
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	428b      	cmp	r3, r1
 80025fc:	f040 808d 	bne.w	800271a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	f013 0f02 	tst.w	r3, #2
 8002606:	d017      	beq.n	8002638 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	f013 0f04 	tst.w	r3, #4
 800260c:	d004      	beq.n	8002618 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260e:	4a47      	ldr	r2, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 8002610:	6853      	ldr	r3, [r2, #4]
 8002612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002616:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	f013 0f08 	tst.w	r3, #8
 800261e:	d004      	beq.n	800262a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 8002622:	6853      	ldr	r3, [r2, #4]
 8002624:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002628:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262a:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 800262c:	6853      	ldr	r3, [r2, #4]
 800262e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002632:	68a1      	ldr	r1, [r4, #8]
 8002634:	430b      	orrs	r3, r1
 8002636:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	f013 0f01 	tst.w	r3, #1
 800263e:	d031      	beq.n	80026a4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002640:	6863      	ldr	r3, [r4, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d020      	beq.n	8002688 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002646:	2b02      	cmp	r3, #2
 8002648:	d025      	beq.n	8002696 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4a38      	ldr	r2, [pc, #224]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	f012 0f02 	tst.w	r2, #2
 8002652:	d064      	beq.n	800271e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002654:	4935      	ldr	r1, [pc, #212]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 8002656:	684a      	ldr	r2, [r1, #4]
 8002658:	f022 0203 	bic.w	r2, r2, #3
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002660:	f7ff f830 	bl	80016c4 <HAL_GetTick>
 8002664:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	6862      	ldr	r2, [r4, #4]
 8002670:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002676:	f7ff f825 	bl	80016c4 <HAL_GetTick>
 800267a:	1b80      	subs	r0, r0, r6
 800267c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002680:	4298      	cmp	r0, r3
 8002682:	d9f0      	bls.n	8002666 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002684:	2003      	movs	r0, #3
 8002686:	e045      	b.n	8002714 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002688:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002690:	d1e0      	bne.n	8002654 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002692:	2001      	movs	r0, #1
 8002694:	e03e      	b.n	8002714 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4a25      	ldr	r2, [pc, #148]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800269e:	d1d9      	bne.n	8002654 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80026a0:	2001      	movs	r0, #1
 80026a2:	e037      	b.n	8002714 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x158>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	42ab      	cmp	r3, r5
 80026ae:	d90a      	bls.n	80026c6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_RCC_ClockConfig+0x158>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f023 0307 	bic.w	r3, r3, #7
 80026b8:	432b      	orrs	r3, r5
 80026ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	42ab      	cmp	r3, r5
 80026c4:	d12d      	bne.n	8002722 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f013 0f04 	tst.w	r3, #4
 80026cc:	d006      	beq.n	80026dc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ce:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 80026d0:	6853      	ldr	r3, [r2, #4]
 80026d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026d6:	68e1      	ldr	r1, [r4, #12]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f013 0f08 	tst.w	r3, #8
 80026e2:	d007      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 80026e6:	6853      	ldr	r3, [r2, #4]
 80026e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026ec:	6921      	ldr	r1, [r4, #16]
 80026ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026f2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f4:	f7ff ff34 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x160>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	40d8      	lsrs	r0, r3
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_ClockConfig+0x164>)
 8002708:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x168>)
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	f7fe ff95 	bl	800163c <HAL_InitTick>
  return HAL_OK;
 8002712:	2000      	movs	r0, #0
}
 8002714:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
}
 8002718:	4770      	bx	lr
    return HAL_ERROR;
 800271a:	2001      	movs	r0, #1
 800271c:	e7fa      	b.n	8002714 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
 8002720:	e7f8      	b.n	8002714 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	e7f6      	b.n	8002714 <HAL_RCC_ClockConfig+0x144>
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	08006cdc 	.word	0x08006cdc
 8002734:	20000000 	.word	0x20000000
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002742:	6803      	ldr	r3, [r0, #0]
 8002744:	f013 0f01 	tst.w	r3, #1
 8002748:	d036      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002752:	d149      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800275c:	61da      	str	r2, [r3, #28]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002768:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002772:	d03b      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002778:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800277c:	d013      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800277e:	6862      	ldr	r2, [r4, #4]
 8002780:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002784:	429a      	cmp	r2, r3
 8002786:	d00e      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002788:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800278a:	6a13      	ldr	r3, [r2, #32]
 800278c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002790:	492f      	ldr	r1, [pc, #188]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002792:	2601      	movs	r6, #1
 8002794:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002798:	2600      	movs	r6, #0
 800279a:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800279e:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027a0:	f013 0f01 	tst.w	r3, #1
 80027a4:	d136      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a6:	4a28      	ldr	r2, [pc, #160]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80027a8:	6a13      	ldr	r3, [r2, #32]
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	6861      	ldr	r1, [r4, #4]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b4:	2d00      	cmp	r5, #0
 80027b6:	d13e      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f013 0f02 	tst.w	r3, #2
 80027be:	d006      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c0:	4a21      	ldr	r2, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80027c2:	6853      	ldr	r3, [r2, #4]
 80027c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027c8:	68a1      	ldr	r1, [r4, #8]
 80027ca:	430b      	orrs	r3, r1
 80027cc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f013 0f10 	tst.w	r3, #16
 80027d4:	d034      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80027d8:	6853      	ldr	r3, [r2, #4]
 80027da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027de:	68e1      	ldr	r1, [r4, #12]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027e4:	2000      	movs	r0, #0
 80027e6:	e02c      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 80027e8:	2500      	movs	r5, #0
 80027ea:	e7be      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ec:	4a17      	ldr	r2, [pc, #92]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027f6:	f7fe ff65 	bl	80016c4 <HAL_GetTick>
 80027fa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002804:	d1b6      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002806:	f7fe ff5d 	bl	80016c4 <HAL_GetTick>
 800280a:	1b80      	subs	r0, r0, r6
 800280c:	2864      	cmp	r0, #100	; 0x64
 800280e:	d9f5      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002810:	2003      	movs	r0, #3
 8002812:	e016      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002814:	f7fe ff56 	bl	80016c4 <HAL_GetTick>
 8002818:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f013 0f02 	tst.w	r3, #2
 8002822:	d1c0      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7fe ff4e 	bl	80016c4 <HAL_GetTick>
 8002828:	1b80      	subs	r0, r0, r6
 800282a:	f241 3388 	movw	r3, #5000	; 0x1388
 800282e:	4298      	cmp	r0, r3
 8002830:	d9f3      	bls.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8002832:	2003      	movs	r0, #3
 8002834:	e005      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	69d3      	ldr	r3, [r2, #28]
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	e7bb      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8002840:	2000      	movs	r0, #0
}
 8002842:	b002      	add	sp, #8
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
 8002850:	42420000 	.word	0x42420000

08002854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	4605      	mov	r5, r0
 800285c:	4688      	mov	r8, r1
 800285e:	4617      	mov	r7, r2
 8002860:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002862:	f7fe ff2f 	bl	80016c4 <HAL_GetTick>
 8002866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002868:	1a1b      	subs	r3, r3, r0
 800286a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800286e:	f7fe ff29 	bl	80016c4 <HAL_GetTick>
 8002872:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800287c:	fb09 f303 	mul.w	r3, r9, r3
 8002880:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	689c      	ldr	r4, [r3, #8]
 8002886:	ea38 0304 	bics.w	r3, r8, r4
 800288a:	bf0c      	ite	eq
 800288c:	f04f 0c01 	moveq.w	ip, #1
 8002890:	f04f 0c00 	movne.w	ip, #0
 8002894:	45bc      	cmp	ip, r7
 8002896:	d040      	beq.n	800291a <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002898:	f1b6 3fff 	cmp.w	r6, #4294967295
 800289c:	d0f1      	beq.n	8002882 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800289e:	f7fe ff11 	bl	80016c4 <HAL_GetTick>
 80028a2:	eba0 000a 	sub.w	r0, r0, sl
 80028a6:	4548      	cmp	r0, r9
 80028a8:	d20a      	bcs.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80028aa:	f1b9 0f00 	cmp.w	r9, #0
 80028ae:	d007      	beq.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028b0:	9a01      	ldr	r2, [sp, #4]
 80028b2:	b102      	cbz	r2, 80028b6 <SPI_WaitFlagStateUntilTimeout+0x62>
 80028b4:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80028b6:	9b01      	ldr	r3, [sp, #4]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	4691      	mov	r9, r2
 80028be:	e7e0      	b.n	8002882 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028c0:	682a      	ldr	r2, [r5, #0]
 80028c2:	6853      	ldr	r3, [r2, #4]
 80028c4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80028c8:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ca:	686b      	ldr	r3, [r5, #4]
 80028cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d0:	d00b      	beq.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80028d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d8:	d014      	beq.n	8002904 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80028da:	2301      	movs	r3, #1
 80028dc:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80028e0:	2300      	movs	r3, #0
 80028e2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80028e6:	2003      	movs	r0, #3
 80028e8:	e018      	b.n	800291c <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ea:	68ab      	ldr	r3, [r5, #8]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d002      	beq.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d1ec      	bne.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80028f8:	682a      	ldr	r2, [r5, #0]
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e7e6      	b.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002904:	682a      	ldr	r2, [r5, #0]
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	682a      	ldr	r2, [r5, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e7df      	b.n	80028da <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 800291a:	2000      	movs	r0, #0
}
 800291c:	b002      	add	sp, #8
 800291e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000

08002928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b510      	push	{r4, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	4604      	mov	r4, r0
 800292e:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	f7ff ff8d 	bl	8002854 <SPI_WaitFlagStateUntilTimeout>
 800293a:	b908      	cbnz	r0, 8002940 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800293c:	b002      	add	sp, #8
 800293e:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002940:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002942:	f043 0320 	orr.w	r3, r3, #32
 8002946:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002948:	2003      	movs	r0, #3
 800294a:	e7f7      	b.n	800293c <SPI_EndRxTxTransaction+0x14>

0800294c <HAL_SPI_Init>:
  if (hspi == NULL)
 800294c:	2800      	cmp	r0, #0
 800294e:	d056      	beq.n	80029fe <HAL_SPI_Init+0xb2>
{
 8002950:	b510      	push	{r4, lr}
 8002952:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002956:	b933      	cbnz	r3, 8002966 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002958:	6843      	ldr	r3, [r0, #4]
 800295a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800295e:	d005      	beq.n	800296c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002960:	2300      	movs	r3, #0
 8002962:	61c3      	str	r3, [r0, #28]
 8002964:	e002      	b.n	800296c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800296a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002970:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002974:	2b00      	cmp	r3, #0
 8002976:	d03c      	beq.n	80029f2 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002978:	2302      	movs	r3, #2
 800297a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	6813      	ldr	r3, [r2, #0]
 8002982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002986:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002988:	6863      	ldr	r3, [r4, #4]
 800298a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800298e:	68a2      	ldr	r2, [r4, #8]
 8002990:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8002994:	4313      	orrs	r3, r2
 8002996:	68e2      	ldr	r2, [r4, #12]
 8002998:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800299c:	4313      	orrs	r3, r2
 800299e:	6922      	ldr	r2, [r4, #16]
 80029a0:	f002 0202 	and.w	r2, r2, #2
 80029a4:	4313      	orrs	r3, r2
 80029a6:	6962      	ldr	r2, [r4, #20]
 80029a8:	f002 0201 	and.w	r2, r2, #1
 80029ac:	4313      	orrs	r3, r2
 80029ae:	69a2      	ldr	r2, [r4, #24]
 80029b0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80029b4:	4313      	orrs	r3, r2
 80029b6:	69e2      	ldr	r2, [r4, #28]
 80029b8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80029bc:	4313      	orrs	r3, r2
 80029be:	6a22      	ldr	r2, [r4, #32]
 80029c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80029c4:	4313      	orrs	r3, r2
 80029c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029cc:	6821      	ldr	r1, [r4, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029d2:	8b63      	ldrh	r3, [r4, #26]
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029dc:	6822      	ldr	r2, [r4, #0]
 80029de:	69d3      	ldr	r3, [r2, #28]
 80029e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029e4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e6:	2000      	movs	r0, #0
 80029e8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80029f0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80029f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80029f6:	4620      	mov	r0, r4
 80029f8:	f7fe fcda 	bl	80013b0 <HAL_SPI_MspInit>
 80029fc:	e7bc      	b.n	8002978 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
}
 8002a00:	4770      	bx	lr

08002a02 <HAL_SPI_Transmit>:
{
 8002a02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8002a0a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	f000 80d1 	beq.w	8002bb6 <HAL_SPI_Transmit+0x1b4>
 8002a14:	4604      	mov	r4, r0
 8002a16:	4688      	mov	r8, r1
 8002a18:	4691      	mov	r9, r2
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002a20:	f7fe fe50 	bl	80016c4 <HAL_GetTick>
 8002a24:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a26:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8002a2a:	b2f6      	uxtb	r6, r6
 8002a2c:	2e01      	cmp	r6, #1
 8002a2e:	f040 80af 	bne.w	8002b90 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 8002a32:	f1b8 0f00 	cmp.w	r8, #0
 8002a36:	f000 80ac 	beq.w	8002b92 <HAL_SPI_Transmit+0x190>
 8002a3a:	f1b9 0f00 	cmp.w	r9, #0
 8002a3e:	f000 80a8 	beq.w	8002b92 <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a42:	2303      	movs	r3, #3
 8002a44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a4c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a50:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a54:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a58:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a5a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a5e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a60:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a68:	d01e      	beq.n	8002aa8 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a72:	d103      	bne.n	8002a7c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a7c:	68e3      	ldr	r3, [r4, #12]
 8002a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a82:	d01c      	beq.n	8002abe <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a84:	6863      	ldr	r3, [r4, #4]
 8002a86:	b113      	cbz	r3, 8002a8e <HAL_SPI_Transmit+0x8c>
 8002a88:	f1b9 0f01 	cmp.w	r9, #1
 8002a8c:	d152      	bne.n	8002b34 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a98:	3301      	adds	r3, #1
 8002a9a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002a9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002aa6:	e045      	b.n	8002b34 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab0:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e7d5      	b.n	8002a6a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	b113      	cbz	r3, 8002ac8 <HAL_SPI_Transmit+0xc6>
 8002ac2:	f1b9 0f01 	cmp.w	r9, #1
 8002ac6:	d116      	bne.n	8002af6 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002ad6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002ae0:	e009      	b.n	8002af6 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae2:	f7fe fdef 	bl	80016c4 <HAL_GetTick>
 8002ae6:	1bc0      	subs	r0, r0, r7
 8002ae8:	42a8      	cmp	r0, r5
 8002aea:	d302      	bcc.n	8002af2 <HAL_SPI_Transmit+0xf0>
 8002aec:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002af0:	d159      	bne.n	8002ba6 <HAL_SPI_Transmit+0x1a4>
 8002af2:	2d00      	cmp	r5, #0
 8002af4:	d059      	beq.n	8002baa <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 8002af6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d033      	beq.n	8002b66 <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	f012 0f02 	tst.w	r2, #2
 8002b06:	d0ec      	beq.n	8002ae2 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b10:	3302      	adds	r3, #2
 8002b12:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002b1e:	e7ea      	b.n	8002af6 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b20:	f7fe fdd0 	bl	80016c4 <HAL_GetTick>
 8002b24:	1bc0      	subs	r0, r0, r7
 8002b26:	42a8      	cmp	r0, r5
 8002b28:	d302      	bcc.n	8002b30 <HAL_SPI_Transmit+0x12e>
 8002b2a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b2e:	d13e      	bne.n	8002bae <HAL_SPI_Transmit+0x1ac>
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	d03e      	beq.n	8002bb2 <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8002b34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b1ab      	cbz	r3, 8002b66 <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	f012 0f02 	tst.w	r2, #2
 8002b42:	d0ed      	beq.n	8002b20 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b46:	7812      	ldrb	r2, [r2, #0]
 8002b48:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b50:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8002b54:	fa1f fc8c 	uxth.w	ip, ip
 8002b58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002b5c:	fa1f fc8c 	uxth.w	ip, ip
 8002b60:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8002b64:	e7e6      	b.n	8002b34 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b66:	463a      	mov	r2, r7
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7ff fedc 	bl	8002928 <SPI_EndRxTxTransaction>
 8002b70:	b108      	cbz	r0, 8002b76 <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b72:	2320      	movs	r3, #32
 8002b74:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b76:	68a3      	ldr	r3, [r4, #8]
 8002b78:	b933      	cbnz	r3, 8002b88 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	9201      	str	r2, [sp, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b8a:	b913      	cbnz	r3, 8002b92 <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 8002b90:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b9e:	4630      	mov	r0, r6
 8002ba0:	b003      	add	sp, #12
 8002ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8002ba6:	2603      	movs	r6, #3
 8002ba8:	e7f3      	b.n	8002b92 <HAL_SPI_Transmit+0x190>
 8002baa:	2603      	movs	r6, #3
 8002bac:	e7f1      	b.n	8002b92 <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 8002bae:	2603      	movs	r6, #3
 8002bb0:	e7ef      	b.n	8002b92 <HAL_SPI_Transmit+0x190>
 8002bb2:	2603      	movs	r6, #3
 8002bb4:	e7ed      	b.n	8002b92 <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 8002bb6:	2602      	movs	r6, #2
 8002bb8:	e7f1      	b.n	8002b9e <HAL_SPI_Transmit+0x19c>
	...

08002bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	6a03      	ldr	r3, [r0, #32]
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bcc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd0:	680c      	ldr	r4, [r1, #0]
 8002bd2:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bd6:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bda:	688b      	ldr	r3, [r1, #8]
 8002bdc:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bde:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <TIM_OC1_SetConfig+0x58>)
 8002be0:	42a0      	cmp	r0, r4
 8002be2:	d009      	beq.n	8002bf8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be4:	4c0b      	ldr	r4, [pc, #44]	; (8002c14 <TIM_OC1_SetConfig+0x58>)
 8002be6:	42a0      	cmp	r0, r4
 8002be8:	d00d      	beq.n	8002c06 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bea:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bec:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bee:	684a      	ldr	r2, [r1, #4]
 8002bf0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf2:	6203      	str	r3, [r0, #32]
}
 8002bf4:	bc70      	pop	{r4, r5, r6}
 8002bf6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bf8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002bfc:	68ca      	ldr	r2, [r1, #12]
 8002bfe:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	e7ee      	b.n	8002be4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c06:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002c0a:	694a      	ldr	r2, [r1, #20]
 8002c0c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c0e:	698e      	ldr	r6, [r1, #24]
 8002c10:	4316      	orrs	r6, r2
 8002c12:	e7ea      	b.n	8002bea <TIM_OC1_SetConfig+0x2e>
 8002c14:	40012c00 	.word	0x40012c00

08002c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c1a:	6a03      	ldr	r3, [r0, #32]
 8002c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c26:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c28:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	680c      	ldr	r4, [r1, #0]
 8002c2e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c34:	688c      	ldr	r4, [r1, #8]
 8002c36:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c3a:	4c0f      	ldr	r4, [pc, #60]	; (8002c78 <TIM_OC3_SetConfig+0x60>)
 8002c3c:	42a0      	cmp	r0, r4
 8002c3e:	d009      	beq.n	8002c54 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c40:	4c0d      	ldr	r4, [pc, #52]	; (8002c78 <TIM_OC3_SetConfig+0x60>)
 8002c42:	42a0      	cmp	r0, r4
 8002c44:	d00e      	beq.n	8002c64 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c46:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c48:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c4a:	684a      	ldr	r2, [r1, #4]
 8002c4c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	6203      	str	r3, [r0, #32]
}
 8002c50:	bc30      	pop	{r4, r5}
 8002c52:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c58:	68cc      	ldr	r4, [r1, #12]
 8002c5a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c62:	e7ed      	b.n	8002c40 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c64:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c68:	694c      	ldr	r4, [r1, #20]
 8002c6a:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c6e:	698c      	ldr	r4, [r1, #24]
 8002c70:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8002c74:	e7e7      	b.n	8002c46 <TIM_OC3_SetConfig+0x2e>
 8002c76:	bf00      	nop
 8002c78:	40012c00 	.word	0x40012c00

08002c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c7e:	6a03      	ldr	r3, [r0, #32]
 8002c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c8c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c90:	680d      	ldr	r5, [r1, #0]
 8002c92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c9a:	688d      	ldr	r5, [r1, #8]
 8002c9c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca0:	4d07      	ldr	r5, [pc, #28]	; (8002cc0 <TIM_OC4_SetConfig+0x44>)
 8002ca2:	42a8      	cmp	r0, r5
 8002ca4:	d006      	beq.n	8002cb4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002caa:	684a      	ldr	r2, [r1, #4]
 8002cac:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cae:	6203      	str	r3, [r0, #32]
}
 8002cb0:	bc30      	pop	{r4, r5}
 8002cb2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cb4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb8:	694d      	ldr	r5, [r1, #20]
 8002cba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002cbe:	e7f2      	b.n	8002ca6 <TIM_OC4_SetConfig+0x2a>
 8002cc0:	40012c00 	.word	0x40012c00

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cc6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc8:	6a04      	ldr	r4, [r0, #32]
 8002cca:	f024 0401 	bic.w	r4, r4, #1
 8002cce:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd2:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cda:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002cde:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ce0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ce2:	6203      	str	r3, [r0, #32]
}
 8002ce4:	bc10      	pop	{r4}
 8002ce6:	4770      	bx	lr

08002ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cea:	6a04      	ldr	r4, [r0, #32]
 8002cec:	f024 0410 	bic.w	r4, r4, #16
 8002cf0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cf2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002cf4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf6:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfa:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d02:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d06:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d08:	6203      	str	r3, [r0, #32]
}
 8002d0a:	bc10      	pop	{r4}
 8002d0c:	4770      	bx	lr

08002d0e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d0e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d14:	430b      	orrs	r3, r1
 8002d16:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1a:	6083      	str	r3, [r0, #8]
}
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002d20:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d30:	6803      	ldr	r3, [r0, #0]
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_TIM_Base_Start+0x58>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d010      	beq.n	8002d5a <HAL_TIM_Base_Start+0x3a>
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d00d      	beq.n	8002d5a <HAL_TIM_Base_Start+0x3a>
 8002d3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_TIM_Base_Start+0x3a>
 8002d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d005      	beq.n	8002d5a <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d56:	2000      	movs	r0, #0
 8002d58:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d60:	2a06      	cmp	r2, #6
 8002d62:	d007      	beq.n	8002d74 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	4770      	bx	lr
    return HAL_ERROR;
 8002d70:	2001      	movs	r0, #1
 8002d72:	4770      	bx	lr
  return HAL_OK;
 8002d74:	2000      	movs	r0, #0
}
 8002d76:	4770      	bx	lr
 8002d78:	40012c00 	.word	0x40012c00

08002d7c <HAL_TIM_PWM_MspInit>:
}
 8002d7c:	4770      	bx	lr

08002d7e <TIM_DMADelayPulseCplt>:
{
 8002d7e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d80:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d84:	4283      	cmp	r3, r0
 8002d86:	d00e      	beq.n	8002da6 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d8a:	4283      	cmp	r3, r0
 8002d8c:	d014      	beq.n	8002db8 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d90:	4283      	cmp	r3, r0
 8002d92:	d01a      	beq.n	8002dca <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d96:	4283      	cmp	r3, r0
 8002d98:	d020      	beq.n	8002ddc <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f000 ff80 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	2300      	movs	r3, #0
 8002da2:	7723      	strb	r3, [r4, #28]
}
 8002da4:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002daa:	6983      	ldr	r3, [r0, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f4      	bne.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	2301      	movs	r3, #1
 8002db2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002db6:	e7f0      	b.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db8:	2302      	movs	r3, #2
 8002dba:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002dbc:	6983      	ldr	r3, [r0, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1eb      	bne.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002dc8:	e7e7      	b.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002dce:	6983      	ldr	r3, [r0, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e2      	bne.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002dda:	e7de      	b.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ddc:	2308      	movs	r3, #8
 8002dde:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002de0:	6983      	ldr	r3, [r0, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1d9      	bne.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002de6:	2301      	movs	r3, #1
 8002de8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002dec:	e7d5      	b.n	8002d9a <TIM_DMADelayPulseCplt+0x1c>

08002dee <TIM_DMADelayPulseHalfCplt>:
{
 8002dee:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002df4:	4283      	cmp	r3, r0
 8002df6:	d00b      	beq.n	8002e10 <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dfa:	4283      	cmp	r3, r0
 8002dfc:	d010      	beq.n	8002e20 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e00:	4283      	cmp	r3, r0
 8002e02:	d010      	beq.n	8002e26 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e06:	4283      	cmp	r3, r0
 8002e08:	d104      	bne.n	8002e14 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	7723      	strb	r3, [r4, #28]
 8002e0e:	e001      	b.n	8002e14 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002e14:	4620      	mov	r0, r4
 8002e16:	f000 ff2f 	bl	8003c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	7723      	strb	r3, [r4, #28]
}
 8002e1e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e20:	2302      	movs	r3, #2
 8002e22:	7723      	strb	r3, [r4, #28]
 8002e24:	e7f6      	b.n	8002e14 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e26:	2304      	movs	r3, #4
 8002e28:	7723      	strb	r3, [r4, #28]
 8002e2a:	e7f3      	b.n	8002e14 <TIM_DMADelayPulseHalfCplt+0x26>

08002e2c <HAL_TIM_ErrorCallback>:
}
 8002e2c:	4770      	bx	lr

08002e2e <TIM_DMAError>:
{
 8002e2e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e30:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e34:	4283      	cmp	r3, r0
 8002e36:	d00c      	beq.n	8002e52 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e3a:	4283      	cmp	r3, r0
 8002e3c:	d013      	beq.n	8002e66 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e40:	4283      	cmp	r3, r0
 8002e42:	d016      	beq.n	8002e72 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e46:	4283      	cmp	r3, r0
 8002e48:	d019      	beq.n	8002e7e <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002e50:	e003      	b.n	8002e5a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff ffe6 	bl	8002e2c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e60:	2300      	movs	r3, #0
 8002e62:	7723      	strb	r3, [r4, #28]
}
 8002e64:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e66:	2302      	movs	r3, #2
 8002e68:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e70:	e7f3      	b.n	8002e5a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e72:	2304      	movs	r3, #4
 8002e74:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002e76:	2301      	movs	r3, #1
 8002e78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e7c:	e7ed      	b.n	8002e5a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e7e:	2308      	movs	r3, #8
 8002e80:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002e82:	2301      	movs	r3, #1
 8002e84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002e88:	e7e7      	b.n	8002e5a <TIM_DMAError+0x2c>
	...

08002e8c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002e8c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <TIM_Base_SetConfig+0x70>)
 8002e90:	4290      	cmp	r0, r2
 8002e92:	d00a      	beq.n	8002eaa <TIM_Base_SetConfig+0x1e>
 8002e94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e98:	d007      	beq.n	8002eaa <TIM_Base_SetConfig+0x1e>
 8002e9a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e9e:	4290      	cmp	r0, r2
 8002ea0:	d003      	beq.n	8002eaa <TIM_Base_SetConfig+0x1e>
 8002ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ea6:	4290      	cmp	r0, r2
 8002ea8:	d103      	bne.n	8002eb2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002eae:	684a      	ldr	r2, [r1, #4]
 8002eb0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <TIM_Base_SetConfig+0x70>)
 8002eb4:	4290      	cmp	r0, r2
 8002eb6:	d00a      	beq.n	8002ece <TIM_Base_SetConfig+0x42>
 8002eb8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0x42>
 8002ebe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ec2:	4290      	cmp	r0, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0x42>
 8002ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eca:	4290      	cmp	r0, r2
 8002ecc:	d103      	bne.n	8002ed6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed2:	68ca      	ldr	r2, [r1, #12]
 8002ed4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eda:	694a      	ldr	r2, [r1, #20]
 8002edc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ede:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee0:	688b      	ldr	r3, [r1, #8]
 8002ee2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ee4:	680b      	ldr	r3, [r1, #0]
 8002ee6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <TIM_Base_SetConfig+0x70>)
 8002eea:	4298      	cmp	r0, r3
 8002eec:	d002      	beq.n	8002ef4 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	6143      	str	r3, [r0, #20]
}
 8002ef2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef4:	690b      	ldr	r3, [r1, #16]
 8002ef6:	6303      	str	r3, [r0, #48]	; 0x30
 8002ef8:	e7f9      	b.n	8002eee <TIM_Base_SetConfig+0x62>
 8002efa:	bf00      	nop
 8002efc:	40012c00 	.word	0x40012c00

08002f00 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002f00:	b340      	cbz	r0, 8002f54 <HAL_TIM_Base_Init+0x54>
{
 8002f02:	b510      	push	{r4, lr}
 8002f04:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f0a:	b1f3      	cbz	r3, 8002f4a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	4621      	mov	r1, r4
 8002f14:	f851 0b04 	ldr.w	r0, [r1], #4
 8002f18:	f7ff ffb8 	bl	8002e8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002f26:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002f3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002f42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f46:	2000      	movs	r0, #0
}
 8002f48:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f4e:	f7fe fa61 	bl	8001414 <HAL_TIM_Base_MspInit>
 8002f52:	e7db      	b.n	8002f0c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
}
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002f58:	b340      	cbz	r0, 8002fac <HAL_TIM_PWM_Init+0x54>
{
 8002f5a:	b510      	push	{r4, lr}
 8002f5c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f62:	b1f3      	cbz	r3, 8002fa2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	2302      	movs	r3, #2
 8002f66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002f70:	f7ff ff8c 	bl	8002e8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002f7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002f9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f9e:	2000      	movs	r0, #0
}
 8002fa0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002fa2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002fa6:	f7ff fee9 	bl	8002d7c <HAL_TIM_PWM_MspInit>
 8002faa:	e7db      	b.n	8002f64 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002fac:	2001      	movs	r0, #1
}
 8002fae:	4770      	bx	lr

08002fb0 <TIM_OC2_SetConfig>:
{
 8002fb0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb2:	6a03      	ldr	r3, [r0, #32]
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002fba:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002fbc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002fbe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc4:	680d      	ldr	r5, [r1, #0]
 8002fc6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002fca:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fce:	688d      	ldr	r5, [r1, #8]
 8002fd0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd4:	4d0e      	ldr	r5, [pc, #56]	; (8003010 <TIM_OC2_SetConfig+0x60>)
 8002fd6:	42a8      	cmp	r0, r5
 8002fd8:	d009      	beq.n	8002fee <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fda:	4d0d      	ldr	r5, [pc, #52]	; (8003010 <TIM_OC2_SetConfig+0x60>)
 8002fdc:	42a8      	cmp	r0, r5
 8002fde:	d00e      	beq.n	8002ffe <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002fe0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fe2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002fe4:	684a      	ldr	r2, [r1, #4]
 8002fe6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002fe8:	6203      	str	r3, [r0, #32]
}
 8002fea:	bc30      	pop	{r4, r5}
 8002fec:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ff2:	68cd      	ldr	r5, [r1, #12]
 8002ff4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffc:	e7ed      	b.n	8002fda <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ffe:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003002:	694d      	ldr	r5, [r1, #20]
 8003004:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003008:	698d      	ldr	r5, [r1, #24]
 800300a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800300e:	e7e7      	b.n	8002fe0 <TIM_OC2_SetConfig+0x30>
 8003010:	40012c00 	.word	0x40012c00

08003014 <HAL_TIM_PWM_ConfigChannel>:
{
 8003014:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003016:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d060      	beq.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0xcc>
 800301e:	4604      	mov	r4, r0
 8003020:	460d      	mov	r5, r1
 8003022:	2301      	movs	r3, #1
 8003024:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003028:	2a0c      	cmp	r2, #12
 800302a:	d81a      	bhi.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800302c:	e8df f002 	tbb	[pc, r2]
 8003030:	19191907 	.word	0x19191907
 8003034:	1919191d 	.word	0x1919191d
 8003038:	19191931 	.word	0x19191931
 800303c:	44          	.byte	0x44
 800303d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800303e:	6800      	ldr	r0, [r0, #0]
 8003040:	f7ff fdbc 	bl	8002bbc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003044:	6822      	ldr	r2, [r4, #0]
 8003046:	6993      	ldr	r3, [r2, #24]
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800304e:	6822      	ldr	r2, [r4, #0]
 8003050:	6993      	ldr	r3, [r2, #24]
 8003052:	f023 0304 	bic.w	r3, r3, #4
 8003056:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	6822      	ldr	r2, [r4, #0]
 800305a:	6993      	ldr	r3, [r2, #24]
 800305c:	6929      	ldr	r1, [r5, #16]
 800305e:	430b      	orrs	r3, r1
 8003060:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8003062:	2000      	movs	r0, #0
 8003064:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003068:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	f7ff ffa0 	bl	8002fb0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	6993      	ldr	r3, [r2, #24]
 8003074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003078:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800307a:	6822      	ldr	r2, [r4, #0]
 800307c:	6993      	ldr	r3, [r2, #24]
 800307e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003082:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	6993      	ldr	r3, [r2, #24]
 8003088:	6929      	ldr	r1, [r5, #16]
 800308a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800308e:	6193      	str	r3, [r2, #24]
      break;
 8003090:	e7e7      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003092:	6800      	ldr	r0, [r0, #0]
 8003094:	f7ff fdc0 	bl	8002c18 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	69d3      	ldr	r3, [r2, #28]
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	69d3      	ldr	r3, [r2, #28]
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	69d3      	ldr	r3, [r2, #28]
 80030b0:	6929      	ldr	r1, [r5, #16]
 80030b2:	430b      	orrs	r3, r1
 80030b4:	61d3      	str	r3, [r2, #28]
      break;
 80030b6:	e7d4      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030b8:	6800      	ldr	r0, [r0, #0]
 80030ba:	f7ff fddf 	bl	8002c7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	69d3      	ldr	r3, [r2, #28]
 80030c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030c6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	69d3      	ldr	r3, [r2, #28]
 80030cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030d0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	69d3      	ldr	r3, [r2, #28]
 80030d6:	6929      	ldr	r1, [r5, #16]
 80030d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030dc:	61d3      	str	r3, [r2, #28]
      break;
 80030de:	e7c0      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80030e0:	2002      	movs	r0, #2
 80030e2:	e7c1      	b.n	8003068 <HAL_TIM_PWM_ConfigChannel+0x54>

080030e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e8:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ec:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80030f0:	430a      	orrs	r2, r1
 80030f2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f6:	6082      	str	r2, [r0, #8]
}
 80030f8:	bc10      	pop	{r4}
 80030fa:	4770      	bx	lr

080030fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80030fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003100:	2b01      	cmp	r3, #1
 8003102:	d066      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xd6>
{
 8003104:	b510      	push	{r4, lr}
 8003106:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003108:	2301      	movs	r3, #1
 800310a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003114:	6802      	ldr	r2, [r0, #0]
 8003116:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003120:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003122:	680b      	ldr	r3, [r1, #0]
 8003124:	2b60      	cmp	r3, #96	; 0x60
 8003126:	d040      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0xae>
 8003128:	d822      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x74>
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d047      	beq.n	80031be <HAL_TIM_ConfigClockSource+0xc2>
 800312e:	d90b      	bls.n	8003148 <HAL_TIM_ConfigClockSource+0x4c>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d10e      	bne.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003134:	68ca      	ldr	r2, [r1, #12]
 8003136:	6849      	ldr	r1, [r1, #4]
 8003138:	6800      	ldr	r0, [r0, #0]
 800313a:	f7ff fdc3 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800313e:	2150      	movs	r1, #80	; 0x50
 8003140:	6820      	ldr	r0, [r4, #0]
 8003142:	f7ff fde4 	bl	8002d0e <TIM_ITRx_SetConfig>
      break;
 8003146:	e004      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003148:	2b20      	cmp	r3, #32
 800314a:	d00c      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x6a>
 800314c:	d908      	bls.n	8003160 <HAL_TIM_ConfigClockSource+0x64>
 800314e:	2b30      	cmp	r3, #48	; 0x30
 8003150:	d009      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8003152:	2301      	movs	r3, #1
 8003154:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003158:	2000      	movs	r0, #0
 800315a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800315e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003160:	b10b      	cbz	r3, 8003166 <HAL_TIM_ConfigClockSource+0x6a>
 8003162:	2b10      	cmp	r3, #16
 8003164:	d1f5      	bne.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003166:	4619      	mov	r1, r3
 8003168:	6820      	ldr	r0, [r4, #0]
 800316a:	f7ff fdd0 	bl	8002d0e <TIM_ITRx_SetConfig>
        break;
 800316e:	e7f0      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003170:	2b70      	cmp	r3, #112	; 0x70
 8003172:	d00e      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x96>
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003178:	d1eb      	bne.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800317a:	68cb      	ldr	r3, [r1, #12]
 800317c:	684a      	ldr	r2, [r1, #4]
 800317e:	6889      	ldr	r1, [r1, #8]
 8003180:	6800      	ldr	r0, [r0, #0]
 8003182:	f7ff ffaf 	bl	80030e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	6893      	ldr	r3, [r2, #8]
 800318a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318e:	6093      	str	r3, [r2, #8]
      break;
 8003190:	e7df      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003192:	68cb      	ldr	r3, [r1, #12]
 8003194:	684a      	ldr	r2, [r1, #4]
 8003196:	6889      	ldr	r1, [r1, #8]
 8003198:	6800      	ldr	r0, [r0, #0]
 800319a:	f7ff ffa3 	bl	80030e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80031a6:	6093      	str	r3, [r2, #8]
      break;
 80031a8:	e7d3      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031aa:	68ca      	ldr	r2, [r1, #12]
 80031ac:	6849      	ldr	r1, [r1, #4]
 80031ae:	6800      	ldr	r0, [r0, #0]
 80031b0:	f7ff fd9a 	bl	8002ce8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b4:	2160      	movs	r1, #96	; 0x60
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f7ff fda9 	bl	8002d0e <TIM_ITRx_SetConfig>
      break;
 80031bc:	e7c9      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031be:	68ca      	ldr	r2, [r1, #12]
 80031c0:	6849      	ldr	r1, [r1, #4]
 80031c2:	6800      	ldr	r0, [r0, #0]
 80031c4:	f7ff fd7e 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	6820      	ldr	r0, [r4, #0]
 80031cc:	f7ff fd9f 	bl	8002d0e <TIM_ITRx_SetConfig>
      break;
 80031d0:	e7bf      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80031d2:	2002      	movs	r0, #2
}
 80031d4:	4770      	bx	lr

080031d6 <TIM_SlaveTimer_SetConfig>:
{
 80031d6:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	6804      	ldr	r4, [r0, #0]
 80031da:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80031dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80031e0:	684b      	ldr	r3, [r1, #4]
 80031e2:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80031e4:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80031e8:	680a      	ldr	r2, [r1, #0]
 80031ea:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80031ec:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80031ee:	684b      	ldr	r3, [r1, #4]
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d02c      	beq.n	800324e <TIM_SlaveTimer_SetConfig+0x78>
 80031f4:	d80c      	bhi.n	8003210 <TIM_SlaveTimer_SetConfig+0x3a>
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d014      	beq.n	8003224 <TIM_SlaveTimer_SetConfig+0x4e>
 80031fa:	2b50      	cmp	r3, #80	; 0x50
 80031fc:	d106      	bne.n	800320c <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fe:	690a      	ldr	r2, [r1, #16]
 8003200:	6889      	ldr	r1, [r1, #8]
 8003202:	6800      	ldr	r0, [r0, #0]
 8003204:	f7ff fd5e 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8003208:	2000      	movs	r0, #0
      break;
 800320a:	e028      	b.n	800325e <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 800320c:	2000      	movs	r0, #0
 800320e:	e026      	b.n	800325e <TIM_SlaveTimer_SetConfig+0x88>
 8003210:	2b70      	cmp	r3, #112	; 0x70
 8003212:	d123      	bne.n	800325c <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	690b      	ldr	r3, [r1, #16]
 8003216:	688a      	ldr	r2, [r1, #8]
 8003218:	68c9      	ldr	r1, [r1, #12]
 800321a:	6800      	ldr	r0, [r0, #0]
 800321c:	f7ff ff62 	bl	80030e4 <TIM_ETR_SetConfig>
  return HAL_OK;
 8003220:	2000      	movs	r0, #0
      break;
 8003222:	e01c      	b.n	800325e <TIM_SlaveTimer_SetConfig+0x88>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d01a      	beq.n	8003260 <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 800322a:	6803      	ldr	r3, [r0, #0]
 800322c:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003236:	6802      	ldr	r2, [r0, #0]
 8003238:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800323e:	6909      	ldr	r1, [r1, #16]
 8003240:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003244:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003246:	6803      	ldr	r3, [r0, #0]
 8003248:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 800324a:	2000      	movs	r0, #0
      break;
 800324c:	e007      	b.n	800325e <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	690a      	ldr	r2, [r1, #16]
 8003250:	6889      	ldr	r1, [r1, #8]
 8003252:	6800      	ldr	r0, [r0, #0]
 8003254:	f7ff fd48 	bl	8002ce8 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003258:	2000      	movs	r0, #0
      break;
 800325a:	e000      	b.n	800325e <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 800325c:	2000      	movs	r0, #0
}
 800325e:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
 8003262:	e7fc      	b.n	800325e <TIM_SlaveTimer_SetConfig+0x88>

08003264 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003264:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d022      	beq.n	80032b2 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 800326c:	b510      	push	{r4, lr}
 800326e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003270:	2301      	movs	r3, #1
 8003272:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800327c:	f7ff ffab 	bl	80031d6 <TIM_SlaveTimer_SetConfig>
 8003280:	b980      	cbnz	r0, 80032a4 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003282:	6822      	ldr	r2, [r4, #0]
 8003284:	68d3      	ldr	r3, [r2, #12]
 8003286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	68d3      	ldr	r3, [r2, #12]
 8003290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003294:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003296:	2301      	movs	r3, #1
 8003298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800329c:	2300      	movs	r3, #0
 800329e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80032a2:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80032a4:	2001      	movs	r0, #1
 80032a6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80032aa:	2300      	movs	r3, #0
 80032ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80032b0:	e7f7      	b.n	80032a2 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 80032b2:	2002      	movs	r0, #2
}
 80032b4:	4770      	bx	lr

080032b6 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032b6:	f001 011f 	and.w	r1, r1, #31
 80032ba:	2301      	movs	r3, #1
 80032bc:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032c0:	6a03      	ldr	r3, [r0, #32]
 80032c2:	ea23 030c 	bic.w	r3, r3, ip
 80032c6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c8:	6a03      	ldr	r3, [r0, #32]
 80032ca:	fa02 f101 	lsl.w	r1, r2, r1
 80032ce:	430b      	orrs	r3, r1
 80032d0:	6203      	str	r3, [r0, #32]
}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_PWM_Start>:
{
 80032d4:	b510      	push	{r4, lr}
 80032d6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032d8:	4608      	mov	r0, r1
 80032da:	bb51      	cbnz	r1, 8003332 <HAL_TIM_PWM_Start+0x5e>
 80032dc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	bf18      	it	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15b      	bne.n	80033a4 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d139      	bne.n	8003364 <HAL_TIM_PWM_Start+0x90>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032f6:	2201      	movs	r2, #1
 80032f8:	4601      	mov	r1, r0
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	f7ff ffdb 	bl	80032b6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_TIM_PWM_Start+0xd8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d03d      	beq.n	8003384 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	4a28      	ldr	r2, [pc, #160]	; (80033ac <HAL_TIM_PWM_Start+0xd8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d03e      	beq.n	800338e <HAL_TIM_PWM_Start+0xba>
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d03b      	beq.n	800338e <HAL_TIM_PWM_Start+0xba>
 8003316:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800331a:	4293      	cmp	r3, r2
 800331c:	d037      	beq.n	800338e <HAL_TIM_PWM_Start+0xba>
 800331e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003322:	4293      	cmp	r3, r2
 8003324:	d033      	beq.n	800338e <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800332e:	2000      	movs	r0, #0
 8003330:	e039      	b.n	80033a6 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003332:	2904      	cmp	r1, #4
 8003334:	d008      	beq.n	8003348 <HAL_TIM_PWM_Start+0x74>
 8003336:	2908      	cmp	r1, #8
 8003338:	d00d      	beq.n	8003356 <HAL_TIM_PWM_Start+0x82>
 800333a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800333e:	b2db      	uxtb	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	bf18      	it	ne
 8003344:	2301      	movne	r3, #1
 8003346:	e7cf      	b.n	80032e8 <HAL_TIM_PWM_Start+0x14>
 8003348:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	bf18      	it	ne
 8003352:	2301      	movne	r3, #1
 8003354:	e7c8      	b.n	80032e8 <HAL_TIM_PWM_Start+0x14>
 8003356:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800335a:	b2db      	uxtb	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	bf18      	it	ne
 8003360:	2301      	movne	r3, #1
 8003362:	e7c1      	b.n	80032e8 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003364:	2804      	cmp	r0, #4
 8003366:	d005      	beq.n	8003374 <HAL_TIM_PWM_Start+0xa0>
 8003368:	2808      	cmp	r0, #8
 800336a:	d007      	beq.n	800337c <HAL_TIM_PWM_Start+0xa8>
 800336c:	2302      	movs	r3, #2
 800336e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003372:	e7c0      	b.n	80032f6 <HAL_TIM_PWM_Start+0x22>
 8003374:	2302      	movs	r3, #2
 8003376:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800337a:	e7bc      	b.n	80032f6 <HAL_TIM_PWM_Start+0x22>
 800337c:	2302      	movs	r3, #2
 800337e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003382:	e7b8      	b.n	80032f6 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
 800338c:	e7bc      	b.n	8003308 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	2a06      	cmp	r2, #6
 8003396:	d007      	beq.n	80033a8 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80033a0:	2000      	movs	r0, #0
 80033a2:	e000      	b.n	80033a6 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 80033a4:	2001      	movs	r0, #1
}
 80033a6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80033a8:	2000      	movs	r0, #0
 80033aa:	e7fc      	b.n	80033a6 <HAL_TIM_PWM_Start+0xd2>
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <HAL_TIM_PWM_Start_DMA>:
{
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4604      	mov	r4, r0
 80033b4:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80033b6:	460d      	mov	r5, r1
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d12d      	bne.n	8003418 <HAL_TIM_PWM_Start_DMA+0x68>
 80033bc:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80033c0:	b2c0      	uxtb	r0, r0
 80033c2:	2802      	cmp	r0, #2
 80033c4:	bf14      	ite	ne
 80033c6:	2000      	movne	r0, #0
 80033c8:	2001      	moveq	r0, #1
 80033ca:	2800      	cmp	r0, #0
 80033cc:	f040 80f8 	bne.w	80035c0 <HAL_TIM_PWM_Start_DMA+0x210>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	d13d      	bne.n	8003450 <HAL_TIM_PWM_Start_DMA+0xa0>
 80033d4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	2a01      	cmp	r2, #1
 80033dc:	bf14      	ite	ne
 80033de:	2200      	movne	r2, #0
 80033e0:	2201      	moveq	r2, #1
 80033e2:	2a00      	cmp	r2, #0
 80033e4:	f000 80ee 	beq.w	80035c4 <HAL_TIM_PWM_Start_DMA+0x214>
    if ((pData == NULL) && (Length > 0U))
 80033e8:	2e00      	cmp	r6, #0
 80033ea:	d04d      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0xd8>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	d14f      	bne.n	8003490 <HAL_TIM_PWM_Start_DMA+0xe0>
 80033f0:	2202      	movs	r2, #2
 80033f2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 80033f6:	2d0c      	cmp	r5, #12
 80033f8:	d870      	bhi.n	80034dc <HAL_TIM_PWM_Start_DMA+0x12c>
 80033fa:	e8df f015 	tbh	[pc, r5, lsl #1]
 80033fe:	0059      	.short	0x0059
 8003400:	006f006f 	.word	0x006f006f
 8003404:	008d006f 	.word	0x008d006f
 8003408:	006f006f 	.word	0x006f006f
 800340c:	00a4006f 	.word	0x00a4006f
 8003410:	006f006f 	.word	0x006f006f
 8003414:	00bb006f 	.word	0x00bb006f
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003418:	2904      	cmp	r1, #4
 800341a:	d009      	beq.n	8003430 <HAL_TIM_PWM_Start_DMA+0x80>
 800341c:	2908      	cmp	r1, #8
 800341e:	d00f      	beq.n	8003440 <HAL_TIM_PWM_Start_DMA+0x90>
 8003420:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8003424:	b2c0      	uxtb	r0, r0
 8003426:	2802      	cmp	r0, #2
 8003428:	bf14      	ite	ne
 800342a:	2000      	movne	r0, #0
 800342c:	2001      	moveq	r0, #1
 800342e:	e7cc      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x1a>
 8003430:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8003434:	b2c0      	uxtb	r0, r0
 8003436:	2802      	cmp	r0, #2
 8003438:	bf14      	ite	ne
 800343a:	2000      	movne	r0, #0
 800343c:	2001      	moveq	r0, #1
 800343e:	e7c4      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x1a>
 8003440:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003444:	b2c0      	uxtb	r0, r0
 8003446:	2802      	cmp	r0, #2
 8003448:	bf14      	ite	ne
 800344a:	2000      	movne	r0, #0
 800344c:	2001      	moveq	r0, #1
 800344e:	e7bc      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003450:	2d04      	cmp	r5, #4
 8003452:	d009      	beq.n	8003468 <HAL_TIM_PWM_Start_DMA+0xb8>
 8003454:	2d08      	cmp	r5, #8
 8003456:	d00f      	beq.n	8003478 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003458:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	2a01      	cmp	r2, #1
 8003460:	bf14      	ite	ne
 8003462:	2200      	movne	r2, #0
 8003464:	2201      	moveq	r2, #1
 8003466:	e7bc      	b.n	80033e2 <HAL_TIM_PWM_Start_DMA+0x32>
 8003468:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	2a01      	cmp	r2, #1
 8003470:	bf14      	ite	ne
 8003472:	2200      	movne	r2, #0
 8003474:	2201      	moveq	r2, #1
 8003476:	e7b4      	b.n	80033e2 <HAL_TIM_PWM_Start_DMA+0x32>
 8003478:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	2a01      	cmp	r2, #1
 8003480:	bf14      	ite	ne
 8003482:	2200      	movne	r2, #0
 8003484:	2201      	moveq	r2, #1
 8003486:	e7ac      	b.n	80033e2 <HAL_TIM_PWM_Start_DMA+0x32>
    if ((pData == NULL) && (Length > 0U))
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0af      	beq.n	80033ec <HAL_TIM_PWM_Start_DMA+0x3c>
      return HAL_ERROR;
 800348c:	2001      	movs	r0, #1
 800348e:	e09a      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	2d04      	cmp	r5, #4
 8003492:	d005      	beq.n	80034a0 <HAL_TIM_PWM_Start_DMA+0xf0>
 8003494:	2d08      	cmp	r5, #8
 8003496:	d007      	beq.n	80034a8 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003498:	2202      	movs	r2, #2
 800349a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800349e:	e7aa      	b.n	80033f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80034a0:	2202      	movs	r2, #2
 80034a2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 80034a6:	e7a6      	b.n	80033f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80034a8:	2202      	movs	r2, #2
 80034aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80034ae:	e7a2      	b.n	80033f6 <HAL_TIM_PWM_Start_DMA+0x46>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034b2:	494a      	ldr	r1, [pc, #296]	; (80035dc <HAL_TIM_PWM_Start_DMA+0x22c>)
 80034b4:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034b8:	4949      	ldr	r1, [pc, #292]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x230>)
 80034ba:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80034bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034be:	4949      	ldr	r1, [pc, #292]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x234>)
 80034c0:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	3234      	adds	r2, #52	; 0x34
 80034c6:	4631      	mov	r1, r6
 80034c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80034ca:	f7fe fc37 	bl	8001d3c <HAL_DMA_Start_IT>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d17a      	bne.n	80035c8 <HAL_TIM_PWM_Start_DMA+0x218>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	68d3      	ldr	r3, [r2, #12]
 80034d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034da:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034dc:	2201      	movs	r2, #1
 80034de:	4629      	mov	r1, r5
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	f7ff fee8 	bl	80032b6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	4a3f      	ldr	r2, [pc, #252]	; (80035e8 <HAL_TIM_PWM_Start_DMA+0x238>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d058      	beq.n	80035a0 <HAL_TIM_PWM_Start_DMA+0x1f0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	4a3d      	ldr	r2, [pc, #244]	; (80035e8 <HAL_TIM_PWM_Start_DMA+0x238>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d059      	beq.n	80035aa <HAL_TIM_PWM_Start_DMA+0x1fa>
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d056      	beq.n	80035aa <HAL_TIM_PWM_Start_DMA+0x1fa>
 80034fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003500:	4293      	cmp	r3, r2
 8003502:	d052      	beq.n	80035aa <HAL_TIM_PWM_Start_DMA+0x1fa>
 8003504:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003508:	4293      	cmp	r3, r2
 800350a:	d04e      	beq.n	80035aa <HAL_TIM_PWM_Start_DMA+0x1fa>
    __HAL_TIM_ENABLE(htim);
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003514:	2000      	movs	r0, #0
 8003516:	e056      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003518:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800351a:	4930      	ldr	r1, [pc, #192]	; (80035dc <HAL_TIM_PWM_Start_DMA+0x22c>)
 800351c:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800351e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003520:	492f      	ldr	r1, [pc, #188]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x230>)
 8003522:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003524:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003526:	492f      	ldr	r1, [pc, #188]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x234>)
 8003528:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	3238      	adds	r2, #56	; 0x38
 800352e:	4631      	mov	r1, r6
 8003530:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003532:	f7fe fc03 	bl	8001d3c <HAL_DMA_Start_IT>
 8003536:	2800      	cmp	r0, #0
 8003538:	d148      	bne.n	80035cc <HAL_TIM_PWM_Start_DMA+0x21c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800353a:	6822      	ldr	r2, [r4, #0]
 800353c:	68d3      	ldr	r3, [r2, #12]
 800353e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003542:	60d3      	str	r3, [r2, #12]
      break;
 8003544:	e7ca      	b.n	80034dc <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003548:	4924      	ldr	r1, [pc, #144]	; (80035dc <HAL_TIM_PWM_Start_DMA+0x22c>)
 800354a:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800354c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800354e:	4924      	ldr	r1, [pc, #144]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x230>)
 8003550:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003552:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003554:	4923      	ldr	r1, [pc, #140]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x234>)
 8003556:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003558:	6822      	ldr	r2, [r4, #0]
 800355a:	323c      	adds	r2, #60	; 0x3c
 800355c:	4631      	mov	r1, r6
 800355e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003560:	f7fe fbec 	bl	8001d3c <HAL_DMA_Start_IT>
 8003564:	2800      	cmp	r0, #0
 8003566:	d133      	bne.n	80035d0 <HAL_TIM_PWM_Start_DMA+0x220>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	68d3      	ldr	r3, [r2, #12]
 800356c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003570:	60d3      	str	r3, [r2, #12]
      break;
 8003572:	e7b3      	b.n	80034dc <HAL_TIM_PWM_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003574:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003576:	4919      	ldr	r1, [pc, #100]	; (80035dc <HAL_TIM_PWM_Start_DMA+0x22c>)
 8003578:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800357a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800357c:	4918      	ldr	r1, [pc, #96]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x230>)
 800357e:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003580:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003582:	4918      	ldr	r1, [pc, #96]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x234>)
 8003584:	6311      	str	r1, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	3240      	adds	r2, #64	; 0x40
 800358a:	4631      	mov	r1, r6
 800358c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800358e:	f7fe fbd5 	bl	8001d3c <HAL_DMA_Start_IT>
 8003592:	b9f8      	cbnz	r0, 80035d4 <HAL_TIM_PWM_Start_DMA+0x224>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	68d3      	ldr	r3, [r2, #12]
 8003598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800359c:	60d3      	str	r3, [r2, #12]
      break;
 800359e:	e79d      	b.n	80034dc <HAL_TIM_PWM_Start_DMA+0x12c>
    __HAL_TIM_MOE_ENABLE(htim);
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
 80035a8:	e7a1      	b.n	80034ee <HAL_TIM_PWM_Start_DMA+0x13e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	2a06      	cmp	r2, #6
 80035b2:	d011      	beq.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x228>
      __HAL_TIM_ENABLE(htim);
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035bc:	2000      	movs	r0, #0
 80035be:	e002      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_BUSY;
 80035c0:	2002      	movs	r0, #2
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
    return HAL_ERROR;
 80035c4:	2001      	movs	r0, #1
}
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80035c8:	2001      	movs	r0, #1
 80035ca:	e7fc      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 80035cc:	2001      	movs	r0, #1
 80035ce:	e7fa      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 80035d0:	2001      	movs	r0, #1
 80035d2:	e7f8      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
        return HAL_ERROR;
 80035d4:	2001      	movs	r0, #1
 80035d6:	e7f6      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
  return HAL_OK;
 80035d8:	2000      	movs	r0, #0
 80035da:	e7f4      	b.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x216>
 80035dc:	08002d7f 	.word	0x08002d7f
 80035e0:	08002def 	.word	0x08002def
 80035e4:	08002e2f 	.word	0x08002e2f
 80035e8:	40012c00 	.word	0x40012c00

080035ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d02c      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80035f4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80035f6:	2301      	movs	r3, #1
 80035f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	2302      	movs	r3, #2
 80035fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003602:	6803      	ldr	r3, [r0, #0]
 8003604:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003606:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003608:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800360c:	680a      	ldr	r2, [r1, #0]
 800360e:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003614:	6803      	ldr	r3, [r0, #0]
 8003616:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00a      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d007      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003622:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800362a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800362e:	4293      	cmp	r3, r2
 8003630:	d104      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003632:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003636:	684a      	ldr	r2, [r1, #4]
 8003638:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800363a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800363c:	2301      	movs	r3, #1
 800363e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003642:	2300      	movs	r3, #0
 8003644:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003648:	4618      	mov	r0, r3
}
 800364a:	bc10      	pop	{r4}
 800364c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800364e:	2002      	movs	r0, #2
}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40012c00 	.word	0x40012c00

08003658 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003658:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d022      	beq.n	80036a6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003660:	2301      	movs	r3, #1
 8003662:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003666:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	688a      	ldr	r2, [r1, #8]
 800366e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003674:	684a      	ldr	r2, [r1, #4]
 8003676:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367c:	680a      	ldr	r2, [r1, #0]
 800367e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003684:	690a      	ldr	r2, [r1, #16]
 8003686:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368c:	694a      	ldr	r2, [r1, #20]
 800368e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003694:	69ca      	ldr	r2, [r1, #28]
 8003696:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003698:	6802      	ldr	r2, [r0, #0]
 800369a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800369c:	2300      	movs	r3, #0
 800369e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80036a2:	4618      	mov	r0, r3
 80036a4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80036a6:	2002      	movs	r0, #2
}
 80036a8:	4770      	bx	lr
	...

080036ac <ST7920_SendCmd>:
// A replacement for SPI_TRANSMIT

//SPI_HandleTypeDef hspi1;

void ST7920_SendCmd (uint8_t cmd)
{
 80036ac:	b530      	push	{r4, r5, lr}
 80036ae:	b083      	sub	sp, #12

	uint8_t data[3] = {0};
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <ST7920_SendCmd+0x4c>)
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80036b8:	2500      	movs	r5, #0
 80036ba:	f88d 5006 	strb.w	r5, [sp, #6]
	data[0] = 0xf8 + (0<<1);
 80036be:	23f8      	movs	r3, #248	; 0xf8
 80036c0:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = cmd & 0xf0;
 80036c4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80036c8:	f88d 3005 	strb.w	r3, [sp, #5]
	data[2] = (cmd << 4) & 0xf0;
 80036cc:	0100      	lsls	r0, r0, #4
 80036ce:	f88d 0006 	strb.w	r0, [sp, #6]


	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80036d2:	4c0a      	ldr	r4, [pc, #40]	; (80036fc <ST7920_SendCmd+0x50>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	2140      	movs	r1, #64	; 0x40
 80036d8:	4620      	mov	r0, r4
 80036da:	f7fe fd1d 	bl	8002118 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 3, 2);
 80036de:	2302      	movs	r3, #2
 80036e0:	2203      	movs	r2, #3
 80036e2:	a901      	add	r1, sp, #4
 80036e4:	4806      	ldr	r0, [pc, #24]	; (8003700 <ST7920_SendCmd+0x54>)
 80036e6:	f7ff f98c 	bl	8002a02 <HAL_SPI_Transmit>
		//delay_us(50);
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80036ea:	462a      	mov	r2, r5
 80036ec:	2140      	movs	r1, #64	; 0x40
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7fe fd12 	bl	8002118 <HAL_GPIO_WritePin>

}
 80036f4:	b003      	add	sp, #12
 80036f6:	bd30      	pop	{r4, r5, pc}
 80036f8:	08006cd0 	.word	0x08006cd0
 80036fc:	40010800 	.word	0x40010800
 8003700:	200012b8 	.word	0x200012b8

08003704 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8003704:	b530      	push	{r4, r5, lr}
 8003706:	b083      	sub	sp, #12

	uint8_t dat[3] = {0};
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <ST7920_SendData+0x4c>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003710:	2500      	movs	r5, #0
 8003712:	f88d 5006 	strb.w	r5, [sp, #6]
	dat[0] = 0xf8+(1<<1);
 8003716:	23fa      	movs	r3, #250	; 0xfa
 8003718:	f88d 3004 	strb.w	r3, [sp, #4]
	dat[1] = data&0xf0;
 800371c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8003720:	f88d 3005 	strb.w	r3, [sp, #5]
	dat[2] = (data<<4)&0xf0;
 8003724:	0100      	lsls	r0, r0, #4
 8003726:	f88d 0006 	strb.w	r0, [sp, #6]


	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800372a:	4c0a      	ldr	r4, [pc, #40]	; (8003754 <ST7920_SendData+0x50>)
 800372c:	2201      	movs	r2, #1
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	4620      	mov	r0, r4
 8003732:	f7fe fcf1 	bl	8002118 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&dat, 3, 2);
 8003736:	2302      	movs	r3, #2
 8003738:	2203      	movs	r2, #3
 800373a:	a901      	add	r1, sp, #4
 800373c:	4806      	ldr	r0, [pc, #24]	; (8003758 <ST7920_SendData+0x54>)
 800373e:	f7ff f960 	bl	8002a02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8003742:	462a      	mov	r2, r5
 8003744:	2140      	movs	r1, #64	; 0x40
 8003746:	4620      	mov	r0, r4
 8003748:	f7fe fce6 	bl	8002118 <HAL_GPIO_WritePin>
}
 800374c:	b003      	add	sp, #12
 800374e:	bd30      	pop	{r4, r5, pc}
 8003750:	08006cd0 	.word	0x08006cd0
 8003754:	40010800 	.word	0x40010800
 8003758:	200012b8 	.word	0x200012b8

0800375c <ST7920_GraphicMode>:
    	}
}
// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 800375c:	b508      	push	{r3, lr}
	if (enable == 1)
 800375e:	2801      	cmp	r0, #1
 8003760:	d001      	beq.n	8003766 <ST7920_GraphicMode+0xa>
		ST7920_SendCmd(0x36);  // enable graphics
		HAL_Delay (1);
		Graphic_Check = 1;  // update the variable
	}

	else if (enable == 0)
 8003762:	b1b0      	cbz	r0, 8003792 <ST7920_GraphicMode+0x36>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 8003764:	bd08      	pop	{r3, pc}
		ST7920_SendCmd(0x30);  // 8 bit mode
 8003766:	2030      	movs	r0, #48	; 0x30
 8003768:	f7ff ffa0 	bl	80036ac <ST7920_SendCmd>
		HAL_Delay (1);
 800376c:	2001      	movs	r0, #1
 800376e:	f7fd ffaf 	bl	80016d0 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 8003772:	2034      	movs	r0, #52	; 0x34
 8003774:	f7ff ff9a 	bl	80036ac <ST7920_SendCmd>
		HAL_Delay (1);
 8003778:	2001      	movs	r0, #1
 800377a:	f7fd ffa9 	bl	80016d0 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 800377e:	2036      	movs	r0, #54	; 0x36
 8003780:	f7ff ff94 	bl	80036ac <ST7920_SendCmd>
		HAL_Delay (1);
 8003784:	2001      	movs	r0, #1
 8003786:	f7fd ffa3 	bl	80016d0 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <ST7920_GraphicMode+0x4c>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e7e8      	b.n	8003764 <ST7920_GraphicMode+0x8>
		ST7920_SendCmd(0x30);  // 8 bit mode
 8003792:	2030      	movs	r0, #48	; 0x30
 8003794:	f7ff ff8a 	bl	80036ac <ST7920_SendCmd>
		HAL_Delay (1);
 8003798:	2001      	movs	r0, #1
 800379a:	f7fd ff99 	bl	80016d0 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 800379e:	4b02      	ldr	r3, [pc, #8]	; (80037a8 <ST7920_GraphicMode+0x4c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
}
 80037a4:	e7de      	b.n	8003764 <ST7920_GraphicMode+0x8>
 80037a6:	bf00      	nop
 80037a8:	200017a8 	.word	0x200017a8

080037ac <ST7920_DrawBitmap>:
  ST7920_SendCmd(0x80 | y); // 6-bit (0..63)
  ST7920_SendCmd(0x80 | x); // 4-bit (0..15)
}

void ST7920_DrawBitmap(const unsigned char* graphic, bool half)
{
 80037ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b0:	4607      	mov	r7, r0

	uint8_t x, y;

	uint16_t Index=0;
	uint8_t Temp,Db;
	int Ystart = 0+half*64;
 80037b2:	018e      	lsls	r6, r1, #6
	int Yend = 64+half*64;
 80037b4:	3101      	adds	r1, #1
 80037b6:	ea4f 1881 	mov.w	r8, r1, lsl #6



	for(y=Ystart;y<Yend;y++)
 80037ba:	b2f6      	uxtb	r6, r6
 80037bc:	e096      	b.n	80038ec <ST7920_DrawBitmap+0x140>
				ST7920_SendCmd(0x80 | y);										//Y(0-31)
				ST7920_SendCmd(0x80 | x);										//X(0-8)
			}
			else
			{
				ST7920_SendCmd(0x80 | y-32);//Y(0-31)
 80037be:	f1a6 0020 	sub.w	r0, r6, #32
 80037c2:	b240      	sxtb	r0, r0
 80037c4:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80037c8:	b2c0      	uxtb	r0, r0
 80037ca:	f7ff ff6f 	bl	80036ac <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);//X(0-8)
 80037ce:	f045 0088 	orr.w	r0, r5, #136	; 0x88
 80037d2:	f7ff ff6b 	bl	80036ac <ST7920_SendCmd>
			}

			Index=((y/8)*128)+(x*16);
 80037d6:	f006 04f8 	and.w	r4, r6, #248	; 0xf8
 80037da:	442c      	add	r4, r5
 80037dc:	0124      	lsls	r4, r4, #4
 80037de:	b2a4      	uxth	r4, r4
			Db=y%8;
 80037e0:	f006 0907 	and.w	r9, r6, #7

			Temp=	(((graphic[Index+0]>>Db)&0x01)<<7)|
 80037e4:	5d38      	ldrb	r0, [r7, r4]
 80037e6:	fa40 f309 	asr.w	r3, r0, r9
						(((graphic[Index+1]>>Db)&0x01)<<6)|
 80037ea:	443c      	add	r4, r7
 80037ec:	7860      	ldrb	r0, [r4, #1]
 80037ee:	fa40 f009 	asr.w	r0, r0, r9
 80037f2:	0180      	lsls	r0, r0, #6
 80037f4:	f000 0040 	and.w	r0, r0, #64	; 0x40
			Temp=	(((graphic[Index+0]>>Db)&0x01)<<7)|
 80037f8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 80037fc:	b240      	sxtb	r0, r0
						(((graphic[Index+2]>>Db)&0x01)<<5)|
 80037fe:	78a3      	ldrb	r3, [r4, #2]
 8003800:	fa43 f309 	asr.w	r3, r3, r9
 8003804:	015b      	lsls	r3, r3, #5
 8003806:	f003 0320 	and.w	r3, r3, #32
						(((graphic[Index+1]>>Db)&0x01)<<6)|
 800380a:	4318      	orrs	r0, r3
						(((graphic[Index+3]>>Db)&0x01)<<4)|
 800380c:	78e3      	ldrb	r3, [r4, #3]
 800380e:	fa43 f309 	asr.w	r3, r3, r9
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	f003 0310 	and.w	r3, r3, #16
						(((graphic[Index+2]>>Db)&0x01)<<5)|
 8003818:	4318      	orrs	r0, r3
						(((graphic[Index+4]>>Db)&0x01)<<3)|
 800381a:	7923      	ldrb	r3, [r4, #4]
 800381c:	fa43 f309 	asr.w	r3, r3, r9
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	f003 0308 	and.w	r3, r3, #8
						(((graphic[Index+3]>>Db)&0x01)<<4)|
 8003826:	4318      	orrs	r0, r3
						(((graphic[Index+5]>>Db)&0x01)<<2)|
 8003828:	7963      	ldrb	r3, [r4, #5]
 800382a:	fa43 f309 	asr.w	r3, r3, r9
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	f003 0304 	and.w	r3, r3, #4
						(((graphic[Index+4]>>Db)&0x01)<<3)|
 8003834:	4318      	orrs	r0, r3
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 8003836:	79a3      	ldrb	r3, [r4, #6]
 8003838:	fa43 f309 	asr.w	r3, r3, r9
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	f003 0302 	and.w	r3, r3, #2
						(((graphic[Index+5]>>Db)&0x01)<<2)|
 8003842:	4318      	orrs	r0, r3
						(((graphic[Index+7]>>Db)&0x01)<<0);
 8003844:	79e3      	ldrb	r3, [r4, #7]
 8003846:	fa43 f309 	asr.w	r3, r3, r9
 800384a:	f003 0301 	and.w	r3, r3, #1
						(((graphic[Index+6]>>Db)&0x01)<<1)|
 800384e:	4318      	orrs	r0, r3
			ST7920_SendData(Temp);
 8003850:	b2c0      	uxtb	r0, r0
 8003852:	f7ff ff57 	bl	8003704 <ST7920_SendData>

			Temp=	(((graphic[Index+8]>>Db)&0x01)<<7)|
 8003856:	7a20      	ldrb	r0, [r4, #8]
 8003858:	fa40 f309 	asr.w	r3, r0, r9
						(((graphic[Index+9]>>Db)&0x01)<<6)|
 800385c:	7a60      	ldrb	r0, [r4, #9]
 800385e:	fa40 f009 	asr.w	r0, r0, r9
 8003862:	0180      	lsls	r0, r0, #6
 8003864:	f000 0040 	and.w	r0, r0, #64	; 0x40
			Temp=	(((graphic[Index+8]>>Db)&0x01)<<7)|
 8003868:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 800386c:	b240      	sxtb	r0, r0
						(((graphic[Index+10]>>Db)&0x01)<<5)|
 800386e:	7aa3      	ldrb	r3, [r4, #10]
 8003870:	fa43 f309 	asr.w	r3, r3, r9
 8003874:	015b      	lsls	r3, r3, #5
 8003876:	f003 0320 	and.w	r3, r3, #32
						(((graphic[Index+9]>>Db)&0x01)<<6)|
 800387a:	4318      	orrs	r0, r3
						(((graphic[Index+11]>>Db)&0x01)<<4)|
 800387c:	7ae3      	ldrb	r3, [r4, #11]
 800387e:	fa43 f309 	asr.w	r3, r3, r9
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	f003 0310 	and.w	r3, r3, #16
						(((graphic[Index+10]>>Db)&0x01)<<5)|
 8003888:	4318      	orrs	r0, r3
						(((graphic[Index+12]>>Db)&0x01)<<3)|
 800388a:	7b23      	ldrb	r3, [r4, #12]
 800388c:	fa43 f309 	asr.w	r3, r3, r9
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f003 0308 	and.w	r3, r3, #8
						(((graphic[Index+11]>>Db)&0x01)<<4)|
 8003896:	4318      	orrs	r0, r3
						(((graphic[Index+13]>>Db)&0x01)<<2)|
 8003898:	7b63      	ldrb	r3, [r4, #13]
 800389a:	fa43 f309 	asr.w	r3, r3, r9
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f003 0304 	and.w	r3, r3, #4
						(((graphic[Index+12]>>Db)&0x01)<<3)|
 80038a4:	4318      	orrs	r0, r3
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80038a6:	7ba3      	ldrb	r3, [r4, #14]
 80038a8:	fa43 f309 	asr.w	r3, r3, r9
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	f003 0302 	and.w	r3, r3, #2
						(((graphic[Index+13]>>Db)&0x01)<<2)|
 80038b2:	4318      	orrs	r0, r3
						(((graphic[Index+15]>>Db)&0x01)<<0);
 80038b4:	7be3      	ldrb	r3, [r4, #15]
 80038b6:	fa43 f909 	asr.w	r9, r3, r9
 80038ba:	f009 0901 	and.w	r9, r9, #1
						(((graphic[Index+14]>>Db)&0x01)<<1)|
 80038be:	ea40 0009 	orr.w	r0, r0, r9

			ST7920_SendData(Temp);
 80038c2:	b2c0      	uxtb	r0, r0
 80038c4:	f7ff ff1e 	bl	8003704 <ST7920_SendData>
		for(x=0;x<8;x++)
 80038c8:	3501      	adds	r5, #1
 80038ca:	b2ed      	uxtb	r5, r5
 80038cc:	2d07      	cmp	r5, #7
 80038ce:	d80b      	bhi.n	80038e8 <ST7920_DrawBitmap+0x13c>
			if(y<32)//Up
 80038d0:	2e1f      	cmp	r6, #31
 80038d2:	f63f af74 	bhi.w	80037be <ST7920_DrawBitmap+0x12>
				ST7920_SendCmd(0x80 | y);										//Y(0-31)
 80038d6:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 80038da:	f7ff fee7 	bl	80036ac <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);										//X(0-8)
 80038de:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 80038e2:	f7ff fee3 	bl	80036ac <ST7920_SendCmd>
 80038e6:	e776      	b.n	80037d6 <ST7920_DrawBitmap+0x2a>
	for(y=Ystart;y<Yend;y++)
 80038e8:	3601      	adds	r6, #1
 80038ea:	b2f6      	uxtb	r6, r6
 80038ec:	4546      	cmp	r6, r8
 80038ee:	da01      	bge.n	80038f4 <ST7920_DrawBitmap+0x148>
		for(x=0;x<8;x++)
 80038f0:	2500      	movs	r5, #0
 80038f2:	e7eb      	b.n	80038cc <ST7920_DrawBitmap+0x120>
		}

	}

}
 80038f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080038f8 <GLCD_Buf_Clear>:

//Clear GLCD Buf
void GLCD_Buf_Clear(void)
{
	uint16_t i;
	for(i=0;i<1024;i++)GLCD_Buf[i]=0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e004      	b.n	8003906 <GLCD_Buf_Clear+0xe>
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <GLCD_Buf_Clear+0x18>)
 80038fe:	2100      	movs	r1, #0
 8003900:	54d1      	strb	r1, [r2, r3]
 8003902:	3301      	adds	r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390a:	d3f7      	bcc.n	80038fc <GLCD_Buf_Clear+0x4>
}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	200013a8 	.word	0x200013a8

08003914 <ST7920_Update>:

#include <stdbool.h>
bool lastHalf;
// Update the display with the selected graphics
void ST7920_Update(void)
{
 8003914:	b508      	push	{r3, lr}

	ST7920_DrawBitmap(GLCD_Buf, lastHalf);
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <ST7920_Update+0x10>)
 8003918:	7819      	ldrb	r1, [r3, #0]
 800391a:	4803      	ldr	r0, [pc, #12]	; (8003928 <ST7920_Update+0x14>)
 800391c:	f7ff ff46 	bl	80037ac <ST7920_DrawBitmap>
	//ST7920_Switch(lastHalf);
	//lastHalf = !lastHalf;

}
 8003920:	bd08      	pop	{r3, pc}
 8003922:	bf00      	nop
 8003924:	200017ab 	.word	0x200017ab
 8003928:	200013a8 	.word	0x200013a8

0800392c <ST7920_Clear>:
	ST7920_SendCmd(0x03);
	ST7920_SendCmd(0x40 + 32 * i);
}

void ST7920_Clear()
{
 800392c:	b538      	push	{r3, r4, r5, lr}
	if (Graphic_Check == 1)  // if the graphic mode is set
 800392e:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <ST7920_Clear+0x6c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d129      	bne.n	800398a <ST7920_Clear+0x5e>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 8003936:	2500      	movs	r5, #0
 8003938:	e017      	b.n	800396a <ST7920_Clear+0x3e>
				ST7920_SendCmd(0x80 | y);
				ST7920_SendCmd(0x80);
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 800393a:	f1a5 0020 	sub.w	r0, r5, #32
 800393e:	b240      	sxtb	r0, r0
 8003940:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003944:	b2c0      	uxtb	r0, r0
 8003946:	f7ff feb1 	bl	80036ac <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 800394a:	2088      	movs	r0, #136	; 0x88
 800394c:	f7ff feae 	bl	80036ac <ST7920_SendCmd>
 8003950:	e016      	b.n	8003980 <ST7920_Clear+0x54>
			}
			for(x = 0; x < 8; x++)
			{
				ST7920_SendData(0);
 8003952:	2000      	movs	r0, #0
 8003954:	f7ff fed6 	bl	8003704 <ST7920_SendData>
				ST7920_SendData(0);
 8003958:	2000      	movs	r0, #0
 800395a:	f7ff fed3 	bl	8003704 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800395e:	3401      	adds	r4, #1
 8003960:	b2e4      	uxtb	r4, r4
 8003962:	2c07      	cmp	r4, #7
 8003964:	d9f5      	bls.n	8003952 <ST7920_Clear+0x26>
		for(y = 0; y < 64; y++)
 8003966:	3501      	adds	r5, #1
 8003968:	b2ed      	uxtb	r5, r5
 800396a:	2d3f      	cmp	r5, #63	; 0x3f
 800396c:	d80a      	bhi.n	8003984 <ST7920_Clear+0x58>
			if(y < 32)
 800396e:	2d1f      	cmp	r5, #31
 8003970:	d8e3      	bhi.n	800393a <ST7920_Clear+0xe>
				ST7920_SendCmd(0x80 | y);
 8003972:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8003976:	f7ff fe99 	bl	80036ac <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 800397a:	2080      	movs	r0, #128	; 0x80
 800397c:	f7ff fe96 	bl	80036ac <ST7920_SendCmd>
{
 8003980:	2400      	movs	r4, #0
 8003982:	e7ee      	b.n	8003962 <ST7920_Clear+0x36>
			}
		}
		GLCD_Buf_Clear();
 8003984:	f7ff ffb8 	bl	80038f8 <GLCD_Buf_Clear>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8003988:	bd38      	pop	{r3, r4, r5, pc}
		ST7920_SendCmd(0x01);   // clear the display using command
 800398a:	2001      	movs	r0, #1
 800398c:	f7ff fe8e 	bl	80036ac <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8003990:	2002      	movs	r0, #2
 8003992:	f7fd fe9d 	bl	80016d0 <HAL_Delay>
}
 8003996:	e7f7      	b.n	8003988 <ST7920_Clear+0x5c>
 8003998:	200017a8 	.word	0x200017a8

0800399c <ST7920_Init>:
#define LCD_LINE1       0x90
#define LCD_LINE2       0x88
#define LCD_LINE3       0x98

void ST7920_Init (void)
{
 800399c:	b508      	push	{r3, lr}
	//HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
	//HAL_Delay(10);   // wait for 10ms
	//HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1

	HAL_Delay(50);   //wait for >40 ms
 800399e:	2032      	movs	r0, #50	; 0x32
 80039a0:	f7fd fe96 	bl	80016d0 <HAL_Delay>

	ST7920_SendCmd(LCD_BASIC);  // 8bit mode
 80039a4:	2030      	movs	r0, #48	; 0x30
 80039a6:	f7ff fe81 	bl	80036ac <ST7920_SendCmd>
	HAL_Delay(1);
 80039aa:	2001      	movs	r0, #1
 80039ac:	f7fd fe90 	bl	80016d0 <HAL_Delay>

	ST7920_SendCmd(LCD_BASIC);  // 8bit mode
 80039b0:	2030      	movs	r0, #48	; 0x30
 80039b2:	f7ff fe7b 	bl	80036ac <ST7920_SendCmd>
	HAL_Delay(1);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7fd fe8a 	bl	80016d0 <HAL_Delay>

	ST7920_SendCmd(LCD_CLS);  // D=0, C=0, B=0
 80039bc:	2001      	movs	r0, #1
 80039be:	f7ff fe75 	bl	80036ac <ST7920_SendCmd>
	HAL_Delay(1);
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7fd fe84 	bl	80016d0 <HAL_Delay>

	ST7920_SendCmd(LCD_ADDRINC);  // clear screen
 80039c8:	2006      	movs	r0, #6
 80039ca:	f7ff fe6f 	bl	80036ac <ST7920_SendCmd>
	HAL_Delay(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f7fd fe7e 	bl	80016d0 <HAL_Delay>


	ST7920_SendCmd(LCD_DISPLAYON);  // cursor increment right no shift
 80039d4:	200c      	movs	r0, #12
 80039d6:	f7ff fe69 	bl	80036ac <ST7920_SendCmd>
	//ST7920_SendCmd(0x07);
	HAL_Delay(1);  // 1ms delay
 80039da:	2001      	movs	r0, #1
 80039dc:	f7fd fe78 	bl	80016d0 <HAL_Delay>

	ST7920_SendCmd(LCD_EXTEND);  // D=1, C=0, B=0
 80039e0:	2034      	movs	r0, #52	; 0x34
 80039e2:	f7ff fe63 	bl	80036ac <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7fd fe72 	bl	80016d0 <HAL_Delay>

    ST7920_SendCmd(LCD_GFXMODE);  // D=1, C=0, B=0
 80039ec:	2036      	movs	r0, #54	; 0x36
 80039ee:	f7ff fe5d 	bl	80036ac <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 80039f2:	2001      	movs	r0, #1
 80039f4:	f7fd fe6c 	bl	80016d0 <HAL_Delay>


}
 80039f8:	bd08      	pop	{r3, pc}
	...

080039fc <SetPixel>:

// Set Pixel
void SetPixel(uint8_t x, uint8_t y)
{
  if (y < numRows && x < numCols)
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <SetPixel+0x68>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d92d      	bls.n	8003a60 <SetPixel+0x64>
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <SetPixel+0x6c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4283      	cmp	r3, r0
 8003a0a:	d929      	bls.n	8003a60 <SetPixel+0x64>
{
 8003a0c:	b410      	push	{r4}
  {
		GLCD_Buf[(x)+((y/8)*128)]|=0x01<<y%8;
 8003a0e:	08cb      	lsrs	r3, r1, #3
 8003a10:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
 8003a14:	f001 0c07 	and.w	ip, r1, #7
 8003a18:	2201      	movs	r2, #1
 8003a1a:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003a1e:	4c13      	ldr	r4, [pc, #76]	; (8003a6c <SetPixel+0x70>)
 8003a20:	5ce2      	ldrb	r2, [r4, r3]
 8003a22:	ea42 020c 	orr.w	r2, r2, ip
 8003a26:	54e2      	strb	r2, [r4, r3]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <SetPixel+0x74>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d901      	bls.n	8003a34 <SetPixel+0x38>
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <SetPixel+0x74>)
 8003a32:	7019      	strb	r1, [r3, #0]
    if (endRow <= y)  { endRow = y + 1; }
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <SetPixel+0x78>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d802      	bhi.n	8003a42 <SetPixel+0x46>
 8003a3c:	3101      	adds	r1, #1
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <SetPixel+0x78>)
 8003a40:	7019      	strb	r1, [r3, #0]
    if (startCol > x) { startCol = x; }
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <SetPixel+0x7c>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	4283      	cmp	r3, r0
 8003a48:	d901      	bls.n	8003a4e <SetPixel+0x52>
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <SetPixel+0x7c>)
 8003a4c:	7018      	strb	r0, [r3, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <SetPixel+0x80>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	4283      	cmp	r3, r0
 8003a54:	d802      	bhi.n	8003a5c <SetPixel+0x60>
 8003a56:	3001      	adds	r0, #1
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <SetPixel+0x80>)
 8003a5a:	7018      	strb	r0, [r3, #0]
  }
}
 8003a5c:	bc10      	pop	{r4}
 8003a5e:	4770      	bx	lr
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2000000d 	.word	0x2000000d
 8003a68:	2000000c 	.word	0x2000000c
 8003a6c:	200013a8 	.word	0x200013a8
 8003a70:	200017ad 	.word	0x200017ad
 8003a74:	200017aa 	.word	0x200017aa
 8003a78:	200017ac 	.word	0x200017ac
 8003a7c:	200017a9 	.word	0x200017a9

08003a80 <GLCD_Font_Print>:
}


//Print Fonted String x=0-15 y=0-7
void GLCD_Font_Print(uint8_t x,uint8_t y,char * String)
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	460c      	mov	r4, r1
 8003a84:	4611      	mov	r1, r2
	int shiftX = 0;
	int shiftY = 1;

	int i;
	while(*String)
 8003a86:	e015      	b.n	8003ab4 <GLCD_Font_Print+0x34>
	{
		for(i=0;i<8;i++)
			GLCD_Buf[i+(x*8)+(y*128)+shiftX/*+shiftY*32*/]=Font[(*String)*8+i-33*8];
 8003a88:	780b      	ldrb	r3, [r1, #0]
 8003a8a:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8003a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a92:	eb0c 0ec0 	add.w	lr, ip, r0, lsl #3
 8003a96:	eb0e 1ec4 	add.w	lr, lr, r4, lsl #7
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <GLCD_Font_Print+0x40>)
 8003a9c:	5cd2      	ldrb	r2, [r2, r3]
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <GLCD_Font_Print+0x44>)
 8003aa0:	f803 200e 	strb.w	r2, [r3, lr]
		for(i=0;i<8;i++)
 8003aa4:	f10c 0c01 	add.w	ip, ip, #1
 8003aa8:	f1bc 0f07 	cmp.w	ip, #7
 8003aac:	ddec      	ble.n	8003a88 <GLCD_Font_Print+0x8>
		String++;
 8003aae:	3101      	adds	r1, #1
		x++;
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	b2c0      	uxtb	r0, r0
	while(*String)
 8003ab4:	780b      	ldrb	r3, [r1, #0]
 8003ab6:	b113      	cbz	r3, 8003abe <GLCD_Font_Print+0x3e>
		for(i=0;i<8;i++)
 8003ab8:	f04f 0c00 	mov.w	ip, #0
 8003abc:	e7f4      	b.n	8003aa8 <GLCD_Font_Print+0x28>
			x=0;
			y++;
		}
		*/
	}
}
 8003abe:	bd10      	pop	{r4, pc}
 8003ac0:	08006d00 	.word	0x08006d00
 8003ac4:	200013a8 	.word	0x200013a8

08003ac8 <fftInit>:
#define FFT_LEN	128
q31_t	fftData[FFT_LEN*2] = {0};
arm_cfft_instance_q31 fftS;
q31_t mags[FFT_LEN] = {0};

void fftInit(void) {
 8003ac8:	b508      	push	{r3, lr}
	arm_cfft_radix4_init_q15(&fftS, FFT_LEN, 0, 1);
 8003aca:	2301      	movs	r3, #1
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <fftInit+0x10>)
 8003ad2:	f000 f8f7 	bl	8003cc4 <arm_cfft_radix4_init_q15>
	//arm_rfft_fast_init_f32(&fftR, FFT_LEN);
}
 8003ad6:	bd08      	pop	{r3, pc}
 8003ad8:	20001bd0 	.word	0x20001bd0

08003adc <dspInit>:

int outStarted = 0;
void dspInit(void){
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	b082      	sub	sp, #8
	//arm_fir_init_f32(&S1, NUM_TAPS, firCoeffs32, firState1, AUDIO_BUFFER_LEN/2);
	//arm_fir_init_f32(&S2, NUM_TAPS, firCoeffs32, firState2, AUDIO_BUFFER_LEN/2);
	outStarted = 0;
 8003ae0:	2400      	movs	r4, #0
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <dspInit+0x44>)
 8003ae4:	601c      	str	r4, [r3, #0]
	arm_fir_init_q31(&S1, NUM_TAPS, firCoeffs32, firState1, DSP_BLOCK_SIZE);
 8003ae6:	4d0f      	ldr	r5, [pc, #60]	; (8003b24 <dspInit+0x48>)
 8003ae8:	2680      	movs	r6, #128	; 0x80
 8003aea:	9600      	str	r6, [sp, #0]
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <dspInit+0x4c>)
 8003aee:	462a      	mov	r2, r5
 8003af0:	2110      	movs	r1, #16
 8003af2:	480e      	ldr	r0, [pc, #56]	; (8003b2c <dspInit+0x50>)
 8003af4:	f000 f93e 	bl	8003d74 <arm_fir_init_q31>
	arm_fir_init_q31(&S2, NUM_TAPS, firCoeffs32, firState2, DSP_BLOCK_SIZE);
 8003af8:	9600      	str	r6, [sp, #0]
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <dspInit+0x54>)
 8003afc:	462a      	mov	r2, r5
 8003afe:	2110      	movs	r1, #16
 8003b00:	480c      	ldr	r0, [pc, #48]	; (8003b34 <dspInit+0x58>)
 8003b02:	f000 f937 	bl	8003d74 <arm_fir_init_q31>

	for (int i=0; i<ADC_BUFFER_LEN; i++){
 8003b06:	4623      	mov	r3, r4
 8003b08:	e004      	b.n	8003b14 <dspInit+0x38>
		inBuf[i] = i << 2;
 8003b0a:	0099      	lsls	r1, r3, #2
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <dspInit+0x5c>)
 8003b0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<ADC_BUFFER_LEN; i++){
 8003b12:	3301      	adds	r3, #1
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b18:	dbf7      	blt.n	8003b0a <dspInit+0x2e>
	}

}
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	bf00      	nop
 8003b20:	20002858 	.word	0x20002858
 8003b24:	080073f8 	.word	0x080073f8
 8003b28:	20001be0 	.word	0x20001be0
 8003b2c:	200017b0 	.word	0x200017b0
 8003b30:	20001e1c 	.word	0x20001e1c
 8003b34:	200017bc 	.word	0x200017bc
 8003b38:	20002058 	.word	0x20002058

08003b3c <dspStart>:

void dspStart(void){
 8003b3c:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 8003b3e:	4c0b      	ldr	r4, [pc, #44]	; (8003b6c <dspStart+0x30>)
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7ff f8ed 	bl	8002d20 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003b46:	2104      	movs	r1, #4
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7ff fbc3 	bl	80032d4 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inBuf, ADC_BUFFER_LEN);
 8003b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b52:	4907      	ldr	r1, [pc, #28]	; (8003b70 <dspStart+0x34>)
 8003b54:	4807      	ldr	r0, [pc, #28]	; (8003b74 <dspStart+0x38>)
 8003b56:	f7fd fef1 	bl	800193c <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)outBuf, ADC_BUFFER_LEN/2);
 8003b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b5e:	4a06      	ldr	r2, [pc, #24]	; (8003b78 <dspStart+0x3c>)
 8003b60:	2108      	movs	r1, #8
 8003b62:	4620      	mov	r0, r4
 8003b64:	f7ff fc24 	bl	80033b0 <HAL_TIM_PWM_Start_DMA>
}
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20001310 	.word	0x20001310
 8003b70:	20002058 	.word	0x20002058
 8003b74:	20001200 	.word	0x20001200
 8003b78:	20002458 	.word	0x20002458

08003b7c <dspPrepareInput>:

int32_t debugInput[ADC_BUFFER_LEN] = {0xff};
float debugInputF[ADC_BUFFER_LEN] = {555.0f};


void dspPrepareInput(void){
 8003b7c:	b570      	push	{r4, r5, r6, lr}
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,dspRingHalf);
	adcBuffStart = ADC_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER);
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <dspPrepareInput+0x4c>)
 8003b80:	781e      	ldrb	r6, [r3, #0]
 8003b82:	f086 0601 	eor.w	r6, r6, #1
 8003b86:	0236      	lsls	r6, r6, #8
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <dspPrepareInput+0x50>)
 8003b8a:	601e      	str	r6, [r3, #0]

	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	e018      	b.n	8003bc2 <dspPrepareInput+0x46>
		debugInput[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
 8003b90:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <dspPrepareInput+0x54>)
 8003b96:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
	return ((input - ADC_HALF) << 20);
 8003b9a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8003b9e:	0524      	lsls	r4, r4, #20
		debugInput[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <dspPrepareInput+0x58>)
 8003ba2:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
	return ((float)i / 2147483648.0f);
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7fd f8dc 	bl	8000d64 <__aeabi_i2f>
 8003bac:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8003bb0:	f7fc fad6 	bl	8000160 <__aeabi_fmul>
		debugInputF[i] = Q31float(adcToQ31(inBuf[i * 2 + adcBuffStart]));
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <dspPrepareInput+0x5c>)
 8003bb6:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
		dspInI[i] = adcToQ31(inBuf[i * 2 + adcBuffStart]);
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <dspPrepareInput+0x60>)
 8003bbc:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
	for (int i=0; i < DSP_BLOCK_SIZE; i++){
 8003bc0:	3501      	adds	r5, #1
 8003bc2:	2d7f      	cmp	r5, #127	; 0x7f
 8003bc4:	dde4      	ble.n	8003b90 <dspPrepareInput+0x14>
	}

	//done = 1;
}
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	20001bcd 	.word	0x20001bcd
 8003bcc:	200017c8 	.word	0x200017c8
 8003bd0:	20002058 	.word	0x20002058
 8003bd4:	20000010 	.word	0x20000010
 8003bd8:	20000810 	.word	0x20000810
 8003bdc:	200017cc 	.word	0x200017cc

08003be0 <dspPrepareOutput>:

void dspPrepareOutput(void){
 8003be0:	b410      	push	{r4}
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,dspRingHalf);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, dspRingHalf);
	adcBuffStart = ADC_BUFFER_LEN/4 * (dspRingHalf == HALF_LOWER);
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <dspPrepareOutput+0x34>)
 8003be4:	781c      	ldrb	r4, [r3, #0]
 8003be6:	f084 0401 	eor.w	r4, r4, #1
 8003bea:	01e4      	lsls	r4, r4, #7
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <dspPrepareOutput+0x38>)
 8003bee:	601c      	str	r4, [r3, #0]
	// если здесь /2, частота будет ниже

	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	e00a      	b.n	8003c0a <dspPrepareOutput+0x2a>
		outBuf[adcBuffStart + k] = 	q31toPwm(dspOut[k]);
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <dspPrepareOutput+0x3c>)
 8003bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfa:	18a0      	adds	r0, r4, r2
	return ((input >> 22) + PWM_HALF);
 8003bfc:	159b      	asrs	r3, r3, #22
 8003bfe:	f503 7300 	add.w	r3, r3, #512	; 0x200
		outBuf[adcBuffStart + k] = 	q31toPwm(dspOut[k]);
 8003c02:	4907      	ldr	r1, [pc, #28]	; (8003c20 <dspPrepareOutput+0x40>)
 8003c04:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	for (int k=0; k < DSP_BLOCK_SIZE; k++){
 8003c08:	3201      	adds	r2, #1
 8003c0a:	2a7f      	cmp	r2, #127	; 0x7f
 8003c0c:	ddf2      	ble.n	8003bf4 <dspPrepareOutput+0x14>
	}
}
 8003c0e:	bc10      	pop	{r4}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20001bcd 	.word	0x20001bcd
 8003c18:	200017c8 	.word	0x200017c8
 8003c1c:	200019cc 	.word	0x200019cc
 8003c20:	20002458 	.word	0x20002458

08003c24 <dspProc>:

q31_t sinX = 0;

void dspProc(void){

	if (!dspProcDone){
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <dspProc+0x3c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b103      	cbz	r3, 8003c2c <dspProc+0x8>
 8003c2a:	4770      	bx	lr
void dspProc(void){
 8003c2c:	b510      	push	{r4, lr}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003c2e:	4c0d      	ldr	r4, [pc, #52]	; (8003c64 <dspProc+0x40>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	2110      	movs	r1, #16
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fe fa6f 	bl	8002118 <HAL_GPIO_WritePin>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);

		//arm_scale_f32(blockIN, (1.0f/4096.0f), blockOUT, BUF_LEN/2);

		dspPrepareInput();
 8003c3a:	f7ff ff9f 	bl	8003b7c <dspPrepareInput>
			//arm_scale_q31(dspInI, floatQ31(2.0), 0, dspOut, BUF_LEN/2);
			//arm_copy_q31(dspInI, dspOut, DSP_BLOCK_SIZE);

			//arm_cfft_q15(&fftS, blockOUT, 0, 1);

			arm_fir_fast_q31(&S1, dspInI, dspOut, DSP_BLOCK_SIZE);
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <dspProc+0x44>)
 8003c42:	490a      	ldr	r1, [pc, #40]	; (8003c6c <dspProc+0x48>)
 8003c44:	480a      	ldr	r0, [pc, #40]	; (8003c70 <dspProc+0x4c>)
 8003c46:	f000 f8a7 	bl	8003d98 <arm_fir_fast_q31>
*/


			//arm_q15_to_float(blockOUT, a, BUF_LEN/2);

		dspPrepareOutput();
 8003c4a:	f7ff ffc9 	bl	8003be0 <dspPrepareOutput>
		dspProcDone = 1;
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <dspProc+0x3c>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	2110      	movs	r1, #16
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f7fe fa5d 	bl	8002118 <HAL_GPIO_WritePin>
	}
}
 8003c5e:	bd10      	pop	{r4, pc}
 8003c60:	20001bcc 	.word	0x20001bcc
 8003c64:	40010c00 	.word	0x40010c00
 8003c68:	200019cc 	.word	0x200019cc
 8003c6c:	200017cc 	.word	0x200017cc
 8003c70:	200017b0 	.word	0x200017b0

08003c74 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){

}
 8003c74:	4770      	bx	lr

08003c76 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){



}
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim1){
 8003c78:	b508      	push	{r3, lr}
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);


	dspRingHalf = HALF_UPPER;
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1c>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
	dspProcDone = 0;
 8003c80:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>)
 8003c82:	2100      	movs	r1, #0
 8003c84:	7011      	strb	r1, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	2108      	movs	r1, #8
 8003c8a:	4804      	ldr	r0, [pc, #16]	; (8003c9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>)
 8003c8c:	f7fe fa44 	bl	8002118 <HAL_GPIO_WritePin>
	//elseDone = 0;
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

};
 8003c90:	bd08      	pop	{r3, pc}
 8003c92:	bf00      	nop
 8003c94:	20001bcd 	.word	0x20001bcd
 8003c98:	20001bcc 	.word	0x20001bcc
 8003c9c:	40010c00 	.word	0x40010c00

08003ca0 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim1){
 8003ca0:	b508      	push	{r3, lr}


	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

		dspRingHalf = HALF_LOWER;
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
		dspProcDone = 0;
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8003caa:	700a      	strb	r2, [r1, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,dspRingHalf);
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	2108      	movs	r1, #8
 8003cb0:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003cb2:	f7fe fa31 	bl	8002118 <HAL_GPIO_WritePin>
		//elseDone = 0;
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dspRingHalf);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

}
 8003cb6:	bd08      	pop	{r3, pc}
 8003cb8:	20001bcd 	.word	0x20001bcd
 8003cbc:	20001bcc 	.word	0x20001bcc
 8003cc0:	40010c00 	.word	0x40010c00

08003cc4 <arm_cfft_radix4_init_q15>:
 8003cc4:	b410      	push	{r4}
 8003cc6:	4c25      	ldr	r4, [pc, #148]	; (8003d5c <arm_cfft_radix4_init_q15+0x98>)
 8003cc8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003ccc:	7082      	strb	r2, [r0, #2]
 8003cce:	70c3      	strb	r3, [r0, #3]
 8003cd0:	8001      	strh	r1, [r0, #0]
 8003cd2:	6044      	str	r4, [r0, #4]
 8003cd4:	d037      	beq.n	8003d46 <arm_cfft_radix4_init_q15+0x82>
 8003cd6:	d80c      	bhi.n	8003cf2 <arm_cfft_radix4_init_q15+0x2e>
 8003cd8:	2910      	cmp	r1, #16
 8003cda:	d029      	beq.n	8003d30 <arm_cfft_radix4_init_q15+0x6c>
 8003cdc:	2940      	cmp	r1, #64	; 0x40
 8003cde:	d118      	bne.n	8003d12 <arm_cfft_radix4_init_q15+0x4e>
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <arm_cfft_radix4_init_q15+0x9c>)
 8003ce2:	8181      	strh	r1, [r0, #12]
 8003ce4:	81c1      	strh	r1, [r0, #14]
 8003ce6:	6083      	str	r3, [r0, #8]
 8003ce8:	2000      	movs	r0, #0
 8003cea:	b240      	sxtb	r0, r0
 8003cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003cf6:	d011      	beq.n	8003d1c <arm_cfft_radix4_init_q15+0x58>
 8003cf8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003cfc:	d109      	bne.n	8003d12 <arm_cfft_radix4_init_q15+0x4e>
 8003cfe:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <arm_cfft_radix4_init_q15+0xa0>)
 8003d00:	2301      	movs	r3, #1
 8003d02:	6082      	str	r2, [r0, #8]
 8003d04:	8183      	strh	r3, [r0, #12]
 8003d06:	81c3      	strh	r3, [r0, #14]
 8003d08:	2000      	movs	r0, #0
 8003d0a:	b240      	sxtb	r0, r0
 8003d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	20ff      	movs	r0, #255	; 0xff
 8003d14:	b240      	sxtb	r0, r0
 8003d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <arm_cfft_radix4_init_q15+0xa4>)
 8003d1e:	2304      	movs	r3, #4
 8003d20:	6082      	str	r2, [r0, #8]
 8003d22:	8183      	strh	r3, [r0, #12]
 8003d24:	81c3      	strh	r3, [r0, #14]
 8003d26:	2000      	movs	r0, #0
 8003d28:	b240      	sxtb	r0, r0
 8003d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <arm_cfft_radix4_init_q15+0xa8>)
 8003d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d36:	6082      	str	r2, [r0, #8]
 8003d38:	8183      	strh	r3, [r0, #12]
 8003d3a:	81c3      	strh	r3, [r0, #14]
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	b240      	sxtb	r0, r0
 8003d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <arm_cfft_radix4_init_q15+0xac>)
 8003d48:	2310      	movs	r3, #16
 8003d4a:	6082      	str	r2, [r0, #8]
 8003d4c:	8183      	strh	r3, [r0, #12]
 8003d4e:	81c3      	strh	r3, [r0, #14]
 8003d50:	2000      	movs	r0, #0
 8003d52:	b240      	sxtb	r0, r0
 8003d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	08007438 	.word	0x08007438
 8003d60:	0800a4b6 	.word	0x0800a4b6
 8003d64:	0800a438 	.word	0x0800a438
 8003d68:	0800a43e 	.word	0x0800a43e
 8003d6c:	0800a636 	.word	0x0800a636
 8003d70:	0800a456 	.word	0x0800a456

08003d74 <arm_fir_init_q31>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4604      	mov	r4, r0
 8003d78:	461d      	mov	r5, r3
 8003d7a:	9804      	ldr	r0, [sp, #16]
 8003d7c:	60a2      	str	r2, [r4, #8]
 8003d7e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003d82:	3a01      	subs	r2, #1
 8003d84:	440a      	add	r2, r1
 8003d86:	8021      	strh	r1, [r4, #0]
 8003d88:	0092      	lsls	r2, r2, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f000 fa7d 	bl	800428c <memset>
 8003d92:	6065      	str	r5, [r4, #4]
 8003d94:	bd38      	pop	{r3, r4, r5, pc}
 8003d96:	bf00      	nop

08003d98 <arm_fir_fast_q31>:
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	686c      	ldr	r4, [r5, #4]
 8003da0:	469c      	mov	ip, r3
 8003da2:	4627      	mov	r7, r4
 8003da4:	b0c5      	sub	sp, #276	; 0x114
 8003da6:	9040      	str	r0, [sp, #256]	; 0x100
 8003da8:	8800      	ldrh	r0, [r0, #0]
 8003daa:	9341      	str	r3, [sp, #260]	; 0x104
 8003dac:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003db0:	3b01      	subs	r3, #1
 8003db2:	943a      	str	r4, [sp, #232]	; 0xe8
 8003db4:	eb07 0483 	add.w	r4, r7, r3, lsl #2
 8003db8:	4626      	mov	r6, r4
 8003dba:	943b      	str	r4, [sp, #236]	; 0xec
 8003dbc:	68ac      	ldr	r4, [r5, #8]
 8003dbe:	ea5f 039c 	movs.w	r3, ip, lsr #2
 8003dc2:	4696      	mov	lr, r2
 8003dc4:	923d      	str	r2, [sp, #244]	; 0xf4
 8003dc6:	903e      	str	r0, [sp, #248]	; 0xf8
 8003dc8:	913c      	str	r1, [sp, #240]	; 0xf0
 8003dca:	4622      	mov	r2, r4
 8003dcc:	9436      	str	r4, [sp, #216]	; 0xd8
 8003dce:	933f      	str	r3, [sp, #252]	; 0xfc
 8003dd0:	f000 81de 	beq.w	8004190 <arm_fir_fast_q31+0x3f8>
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	932f      	str	r3, [sp, #188]	; 0xbc
 8003dd8:	0883      	lsrs	r3, r0, #2
 8003dda:	4610      	mov	r0, r2
 8003ddc:	461d      	mov	r5, r3
 8003dde:	9335      	str	r3, [sp, #212]	; 0xd4
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4418      	add	r0, r3
 8003de4:	3b04      	subs	r3, #4
 8003de6:	9339      	str	r3, [sp, #228]	; 0xe4
 8003de8:	eba4 0385 	sub.w	r3, r4, r5, lsl #2
 8003dec:	9337      	str	r3, [sp, #220]	; 0xdc
 8003dee:	f106 0310 	add.w	r3, r6, #16
 8003df2:	932d      	str	r3, [sp, #180]	; 0xb4
 8003df4:	460b      	mov	r3, r1
 8003df6:	3310      	adds	r3, #16
 8003df8:	932e      	str	r3, [sp, #184]	; 0xb8
 8003dfa:	f107 0310 	add.w	r3, r7, #16
 8003dfe:	932c      	str	r3, [sp, #176]	; 0xb0
 8003e00:	4673      	mov	r3, lr
 8003e02:	3310      	adds	r3, #16
 8003e04:	9038      	str	r0, [sp, #224]	; 0xe0
 8003e06:	9334      	str	r3, [sp, #208]	; 0xd0
 8003e08:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8003e0a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	f851 3c10 	ldr.w	r3, [r1, #-16]
 8003e12:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8003e14:	f844 3c10 	str.w	r3, [r4, #-16]
 8003e18:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8003e1c:	f1a5 0804 	sub.w	r8, r5, #4
 8003e20:	f844 3c0c 	str.w	r3, [r4, #-12]
 8003e24:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8003e28:	f844 3c08 	str.w	r3, [r4, #-8]
 8003e2c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8003e30:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8003e32:	f844 3c04 	str.w	r3, [r4, #-4]
 8003e36:	f855 3c10 	ldr.w	r3, [r5, #-16]
 8003e3a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8003e3e:	461f      	mov	r7, r3
 8003e40:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8003e44:	461e      	mov	r6, r3
 8003e46:	469e      	mov	lr, r3
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	f000 81ee 	beq.w	800422a <arm_fir_fast_q31+0x492>
 8003e4e:	2100      	movs	r1, #0
 8003e50:	f105 0e0c 	add.w	lr, r5, #12
 8003e54:	460c      	mov	r4, r1
 8003e56:	4665      	mov	r5, ip
 8003e58:	4608      	mov	r0, r1
 8003e5a:	46b4      	mov	ip, r6
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	460e      	mov	r6, r1
 8003e60:	9224      	str	r2, [sp, #144]	; 0x90
 8003e62:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8003e64:	3210      	adds	r2, #16
 8003e66:	46b3      	mov	fp, r6
 8003e68:	f04f 0a00 	mov.w	sl, #0
 8003e6c:	46d0      	mov	r8, sl
 8003e6e:	46d9      	mov	r9, fp
 8003e70:	9105      	str	r1, [sp, #20]
 8003e72:	f852 1c10 	ldr.w	r1, [r2, #-16]
 8003e76:	9403      	str	r4, [sp, #12]
 8003e78:	fbc1 8903 	smlal	r8, r9, r1, r3
 8003e7c:	f8cd a008 	str.w	sl, [sp, #8]
 8003e80:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 8003e84:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003e88:	fbc5 8901 	smlal	r8, r9, r5, r1
 8003e8c:	f85e 3c10 	ldr.w	r3, [lr, #-16]
 8003e90:	f8cd a010 	str.w	sl, [sp, #16]
 8003e94:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 8003e98:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003e9c:	fbc3 8901 	smlal	r8, r9, r3, r1
 8003ea0:	9001      	str	r0, [sp, #4]
 8003ea2:	f8cd a000 	str.w	sl, [sp]
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003eac:	fbcc 6701 	smlal	r6, r7, ip, r1
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 8003eb6:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8003eba:	f147 0700 	adc.w	r7, r7, #0
 8003ebe:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003ec2:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
 8003ec6:	e9dd 672a 	ldrd	r6, r7, [sp, #168]	; 0xa8
 8003eca:	f149 0900 	adc.w	r9, r9, #0
 8003ece:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8003ed2:	f147 0700 	adc.w	r7, r7, #0
 8003ed6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003eda:	f141 0100 	adc.w	r1, r1, #0
 8003ede:	f85e 0c10 	ldr.w	r0, [lr, #-16]
 8003ee2:	910d      	str	r1, [sp, #52]	; 0x34
 8003ee4:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 8003ee8:	970b      	str	r7, [sp, #44]	; 0x2c
 8003eea:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8003eee:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ef2:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8003ef6:	fbc1 8900 	smlal	r8, r9, r1, r0
 8003efa:	f8cd a018 	str.w	sl, [sp, #24]
 8003efe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003f00:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 8003f04:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003f08:	fbc1 890c 	smlal	r8, r9, r1, ip
 8003f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0e:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 8003f12:	f8cd a020 	str.w	sl, [sp, #32]
 8003f16:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003f1a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 8003f1e:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 8003f22:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 8003f26:	fbc3 8901 	smlal	r8, r9, r3, r1
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	fbc1 6705 	smlal	r6, r7, r1, r5
 8003f30:	4649      	mov	r1, r9
 8003f32:	e9dd 892a 	ldrd	r8, r9, [sp, #168]	; 0xa8
 8003f36:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8003f3a:	f147 0700 	adc.w	r7, r7, #0
 8003f3e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003f42:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
 8003f46:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 8003f4a:	f149 0900 	adc.w	r9, r9, #0
 8003f4e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8003f52:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003f54:	f147 0700 	adc.w	r7, r7, #0
 8003f58:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003f5c:	f141 0100 	adc.w	r1, r1, #0
 8003f60:	9411      	str	r4, [sp, #68]	; 0x44
 8003f62:	9115      	str	r1, [sp, #84]	; 0x54
 8003f64:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8003f68:	f85e 1c10 	ldr.w	r1, [lr, #-16]
 8003f6c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003f70:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003f74:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8003f78:	970f      	str	r7, [sp, #60]	; 0x3c
 8003f7a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003f7e:	fbc4 6701 	smlal	r6, r7, r4, r1
 8003f82:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003f86:	fbc4 0103 	smlal	r0, r1, r4, r3
 8003f8a:	f85e cc08 	ldr.w	ip, [lr, #-8]
 8003f8e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003f92:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8003f96:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8003f9a:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8003f9e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003fa2:	fbc4 8905 	smlal	r8, r9, r4, r5
 8003fa6:	fbcc 0104 	smlal	r0, r1, ip, r4
 8003faa:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 8003fae:	4680      	mov	r8, r0
 8003fb0:	4689      	mov	r9, r1
 8003fb2:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8003fb6:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8003fba:	f147 0700 	adc.w	r7, r7, #0
 8003fbe:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003fc2:	f141 0100 	adc.w	r1, r1, #0
 8003fc6:	f118 4400 	adds.w	r4, r8, #2147483648	; 0x80000000
 8003fca:	f149 0500 	adc.w	r5, r9, #0
 8003fce:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8003fd2:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 8003fd6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003fda:	f149 0900 	adc.w	r9, r9, #0
 8003fde:	9719      	str	r7, [sp, #100]	; 0x64
 8003fe0:	911b      	str	r1, [sp, #108]	; 0x6c
 8003fe2:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
 8003fe6:	951d      	str	r5, [sp, #116]	; 0x74
 8003fe8:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8003fec:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8003ff0:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 8003ff4:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 8003ff8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8003ffc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004000:	fbc4 0103 	smlal	r0, r1, r4, r3
 8004004:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004008:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800400c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8004010:	fbc4 010c 	smlal	r0, r1, r4, ip
 8004014:	4606      	mov	r6, r0
 8004016:	460f      	mov	r7, r1
 8004018:	fbc5 8904 	smlal	r8, r9, r5, r4
 800401c:	f85e 1c10 	ldr.w	r1, [lr, #-16]
 8004020:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 8004024:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 8004028:	fbc4 8901 	smlal	r8, r9, r4, r1
 800402c:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8004030:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004034:	f141 0100 	adc.w	r1, r1, #0
 8004038:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800403c:	f147 0700 	adc.w	r7, r7, #0
 8004040:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 8004044:	e9dd 892a 	ldrd	r8, r9, [sp, #168]	; 0xa8
 8004048:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800404c:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
 8004050:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 8004054:	f149 0900 	adc.w	r9, r9, #0
 8004058:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800405c:	f147 0700 	adc.w	r7, r7, #0
 8004060:	463e      	mov	r6, r7
 8004062:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8004064:	4608      	mov	r0, r1
 8004066:	3f01      	subs	r7, #1
 8004068:	f102 0210 	add.w	r2, r2, #16
 800406c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800406e:	f10e 0e10 	add.w	lr, lr, #16
 8004072:	4649      	mov	r1, r9
 8004074:	9724      	str	r7, [sp, #144]	; 0x90
 8004076:	f47f aef6 	bne.w	8003e66 <arm_fir_fast_q31+0xce>
 800407a:	461f      	mov	r7, r3
 800407c:	4633      	mov	r3, r6
 800407e:	46e6      	mov	lr, ip
 8004080:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8004082:	46ac      	mov	ip, r5
 8004084:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8004086:	f8dd 90e0 	ldr.w	r9, [sp, #224]	; 0xe0
 800408a:	eb02 0805 	add.w	r8, r2, r5
 800408e:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8004090:	2a00      	cmp	r2, #0
 8004092:	d051      	beq.n	8004138 <arm_fir_fast_q31+0x3a0>
 8004094:	4615      	mov	r5, r2
 8004096:	e9cd ab32 	strd	sl, fp, [sp, #200]	; 0xc8
 800409a:	463a      	mov	r2, r7
 800409c:	46cb      	mov	fp, r9
 800409e:	46c2      	mov	sl, r8
 80040a0:	46a9      	mov	r9, r5
 80040a2:	461f      	mov	r7, r3
 80040a4:	2600      	movs	r6, #0
 80040a6:	f85b 3b04 	ldr.w	r3, [fp], #4
 80040aa:	9421      	str	r4, [sp, #132]	; 0x84
 80040ac:	9620      	str	r6, [sp, #128]	; 0x80
 80040ae:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 80040b2:	fbcc 4503 	smlal	r4, r5, ip, r3
 80040b6:	e9cd 4528 	strd	r4, r5, [sp, #160]	; 0xa0
 80040ba:	4634      	mov	r4, r6
 80040bc:	463d      	mov	r5, r7
 80040be:	901f      	str	r0, [sp, #124]	; 0x7c
 80040c0:	961e      	str	r6, [sp, #120]	; 0x78
 80040c2:	9123      	str	r1, [sp, #140]	; 0x8c
 80040c4:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 80040c8:	fbce 0103 	smlal	r0, r1, lr, r3
 80040cc:	f85a 8b04 	ldr.w	r8, [sl], #4
 80040d0:	9622      	str	r6, [sp, #136]	; 0x88
 80040d2:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 80040d6:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80040da:	fbc8 0103 	smlal	r0, r1, r8, r3
 80040de:	fbc3 4502 	smlal	r4, r5, r3, r2
 80040e2:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
 80040e6:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80040ea:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80040ee:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80040f2:	f141 0100 	adc.w	r1, r1, #0
 80040f6:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
 80040fa:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 80040fe:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8004102:	f145 0500 	adc.w	r5, r5, #0
 8004106:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800410a:	f143 0300 	adc.w	r3, r3, #0
 800410e:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8004112:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8004116:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800411a:	f143 0300 	adc.w	r3, r3, #0
 800411e:	f1b9 0901 	subs.w	r9, r9, #1
 8004122:	4608      	mov	r0, r1
 8004124:	4672      	mov	r2, lr
 8004126:	462c      	mov	r4, r5
 8004128:	46e6      	mov	lr, ip
 800412a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800412c:	46c4      	mov	ip, r8
 800412e:	d1b8      	bne.n	80040a2 <arm_fir_fast_q31+0x30a>
 8004130:	e9cd 6730 	strd	r6, r7, [sp, #192]	; 0xc0
 8004134:	e9dd ab32 	ldrd	sl, fp, [sp, #200]	; 0xc8
 8004138:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	f845 3c10 	str.w	r3, [r5, #-16]
 8004140:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8004142:	0040      	lsls	r0, r0, #1
 8004144:	3310      	adds	r3, #16
 8004146:	932d      	str	r3, [sp, #180]	; 0xb4
 8004148:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800414a:	0064      	lsls	r4, r4, #1
 800414c:	3310      	adds	r3, #16
 800414e:	932e      	str	r3, [sp, #184]	; 0xb8
 8004150:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004152:	0049      	lsls	r1, r1, #1
 8004154:	3310      	adds	r3, #16
 8004156:	932c      	str	r3, [sp, #176]	; 0xb0
 8004158:	f105 0310 	add.w	r3, r5, #16
 800415c:	9334      	str	r3, [sp, #208]	; 0xd0
 800415e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8004160:	f845 0c0c 	str.w	r0, [r5, #-12]
 8004164:	3b01      	subs	r3, #1
 8004166:	f845 4c08 	str.w	r4, [r5, #-8]
 800416a:	f845 1c04 	str.w	r1, [r5, #-4]
 800416e:	932f      	str	r3, [sp, #188]	; 0xbc
 8004170:	f47f ae4a 	bne.w	8003e08 <arm_fir_fast_q31+0x70>
 8004174:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8004176:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	441a      	add	r2, r3
 800417c:	923b      	str	r2, [sp, #236]	; 0xec
 800417e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8004180:	441a      	add	r2, r3
 8004182:	923c      	str	r2, [sp, #240]	; 0xf0
 8004184:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8004186:	441a      	add	r2, r3
 8004188:	923a      	str	r2, [sp, #232]	; 0xe8
 800418a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800418c:	441a      	add	r2, r3
 800418e:	923d      	str	r2, [sp, #244]	; 0xf4
 8004190:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004192:	f013 0e03 	ands.w	lr, r3, #3
 8004196:	d038      	beq.n	800420a <arm_fir_fast_q31+0x472>
 8004198:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800419a:	4676      	mov	r6, lr
 800419c:	f8cd e010 	str.w	lr, [sp, #16]
 80041a0:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80041a2:	f8dd a0d8 	ldr.w	sl, [sp, #216]	; 0xd8
 80041a6:	f8dd b0f8 	ldr.w	fp, [sp, #248]	; 0xf8
 80041aa:	f8dd e0f0 	ldr.w	lr, [sp, #240]	; 0xf0
 80041ae:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
 80041b2:	1f1f      	subs	r7, r3, #4
 80041b4:	465b      	mov	r3, fp
 80041b6:	4651      	mov	r1, sl
 80041b8:	4602      	mov	r2, r0
 80041ba:	f85e 5b04 	ldr.w	r5, [lr], #4
 80041be:	2400      	movs	r4, #0
 80041c0:	f847 5f04 	str.w	r5, [r7, #4]!
 80041c4:	9600      	str	r6, [sp, #0]
 80041c6:	9702      	str	r7, [sp, #8]
 80041c8:	46a1      	mov	r9, r4
 80041ca:	f04f 0800 	mov.w	r8, #0
 80041ce:	4646      	mov	r6, r8
 80041d0:	464f      	mov	r7, r9
 80041d2:	f852 5b04 	ldr.w	r5, [r2], #4
 80041d6:	f851 4b04 	ldr.w	r4, [r1], #4
 80041da:	fbc4 6705 	smlal	r6, r7, r4, r5
 80041de:	f116 4400 	adds.w	r4, r6, #2147483648	; 0x80000000
 80041e2:	f147 0500 	adc.w	r5, r7, #0
 80041e6:	3b01      	subs	r3, #1
 80041e8:	462c      	mov	r4, r5
 80041ea:	d1ed      	bne.n	80041c8 <arm_fir_fast_q31+0x430>
 80041ec:	9e00      	ldr	r6, [sp, #0]
 80041ee:	006c      	lsls	r4, r5, #1
 80041f0:	3e01      	subs	r6, #1
 80041f2:	9f02      	ldr	r7, [sp, #8]
 80041f4:	f84c 4b04 	str.w	r4, [ip], #4
 80041f8:	f100 0004 	add.w	r0, r0, #4
 80041fc:	d1da      	bne.n	80041b4 <arm_fir_fast_q31+0x41c>
 80041fe:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004200:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004204:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8004208:	933a      	str	r3, [sp, #232]	; 0xe8
 800420a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8004210:	3b01      	subs	r3, #1
 8004212:	d007      	beq.n	8004224 <arm_fir_fast_q31+0x48c>
 8004214:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8004216:	3a04      	subs	r2, #4
 8004218:	f851 0b04 	ldr.w	r0, [r1], #4
 800421c:	3b01      	subs	r3, #1
 800421e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004222:	d1f9      	bne.n	8004218 <arm_fir_fast_q31+0x480>
 8004224:	b045      	add	sp, #276	; 0x114
 8004226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422a:	4613      	mov	r3, r2
 800422c:	f8dd 90d8 	ldr.w	r9, [sp, #216]	; 0xd8
 8004230:	4611      	mov	r1, r2
 8004232:	4614      	mov	r4, r2
 8004234:	4610      	mov	r0, r2
 8004236:	e72a      	b.n	800408e <arm_fir_fast_q31+0x2f6>

08004238 <__errno>:
 8004238:	4b01      	ldr	r3, [pc, #4]	; (8004240 <__errno+0x8>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20001010 	.word	0x20001010

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	2600      	movs	r6, #0
 8004248:	4d0c      	ldr	r5, [pc, #48]	; (800427c <__libc_init_array+0x38>)
 800424a:	4c0d      	ldr	r4, [pc, #52]	; (8004280 <__libc_init_array+0x3c>)
 800424c:	1b64      	subs	r4, r4, r5
 800424e:	10a4      	asrs	r4, r4, #2
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	f002 fd30 	bl	8006cb8 <_init>
 8004258:	2600      	movs	r6, #0
 800425a:	4d0a      	ldr	r5, [pc, #40]	; (8004284 <__libc_init_array+0x40>)
 800425c:	4c0a      	ldr	r4, [pc, #40]	; (8004288 <__libc_init_array+0x44>)
 800425e:	1b64      	subs	r4, r4, r5
 8004260:	10a4      	asrs	r4, r4, #2
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	0800b014 	.word	0x0800b014
 8004280:	0800b014 	.word	0x0800b014
 8004284:	0800b014 	.word	0x0800b014
 8004288:	0800b018 	.word	0x0800b018

0800428c <memset>:
 800428c:	4603      	mov	r3, r0
 800428e:	4402      	add	r2, r0
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	f803 1b01 	strb.w	r1, [r3], #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <__cvt>:
 800429c:	2b00      	cmp	r3, #0
 800429e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a2:	461f      	mov	r7, r3
 80042a4:	bfbb      	ittet	lt
 80042a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	461f      	movlt	r7, r3
 80042ac:	2300      	movge	r3, #0
 80042ae:	232d      	movlt	r3, #45	; 0x2d
 80042b0:	b088      	sub	sp, #32
 80042b2:	4614      	mov	r4, r2
 80042b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80042b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80042b8:	7013      	strb	r3, [r2, #0]
 80042ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80042bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80042c0:	f023 0820 	bic.w	r8, r3, #32
 80042c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042c8:	d005      	beq.n	80042d6 <__cvt+0x3a>
 80042ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042ce:	d100      	bne.n	80042d2 <__cvt+0x36>
 80042d0:	3501      	adds	r5, #1
 80042d2:	2302      	movs	r3, #2
 80042d4:	e000      	b.n	80042d8 <__cvt+0x3c>
 80042d6:	2303      	movs	r3, #3
 80042d8:	aa07      	add	r2, sp, #28
 80042da:	9204      	str	r2, [sp, #16]
 80042dc:	aa06      	add	r2, sp, #24
 80042de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042e2:	e9cd 3500 	strd	r3, r5, [sp]
 80042e6:	4622      	mov	r2, r4
 80042e8:	463b      	mov	r3, r7
 80042ea:	f000 fcc5 	bl	8004c78 <_dtoa_r>
 80042ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042f2:	4606      	mov	r6, r0
 80042f4:	d102      	bne.n	80042fc <__cvt+0x60>
 80042f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042f8:	07db      	lsls	r3, r3, #31
 80042fa:	d522      	bpl.n	8004342 <__cvt+0xa6>
 80042fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004300:	eb06 0905 	add.w	r9, r6, r5
 8004304:	d110      	bne.n	8004328 <__cvt+0x8c>
 8004306:	7833      	ldrb	r3, [r6, #0]
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d10a      	bne.n	8004322 <__cvt+0x86>
 800430c:	2200      	movs	r2, #0
 800430e:	2300      	movs	r3, #0
 8004310:	4620      	mov	r0, r4
 8004312:	4639      	mov	r1, r7
 8004314:	f7fc fbfc 	bl	8000b10 <__aeabi_dcmpeq>
 8004318:	b918      	cbnz	r0, 8004322 <__cvt+0x86>
 800431a:	f1c5 0501 	rsb	r5, r5, #1
 800431e:	f8ca 5000 	str.w	r5, [sl]
 8004322:	f8da 3000 	ldr.w	r3, [sl]
 8004326:	4499      	add	r9, r3
 8004328:	2200      	movs	r2, #0
 800432a:	2300      	movs	r3, #0
 800432c:	4620      	mov	r0, r4
 800432e:	4639      	mov	r1, r7
 8004330:	f7fc fbee 	bl	8000b10 <__aeabi_dcmpeq>
 8004334:	b108      	cbz	r0, 800433a <__cvt+0x9e>
 8004336:	f8cd 901c 	str.w	r9, [sp, #28]
 800433a:	2230      	movs	r2, #48	; 0x30
 800433c:	9b07      	ldr	r3, [sp, #28]
 800433e:	454b      	cmp	r3, r9
 8004340:	d307      	bcc.n	8004352 <__cvt+0xb6>
 8004342:	4630      	mov	r0, r6
 8004344:	9b07      	ldr	r3, [sp, #28]
 8004346:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004348:	1b9b      	subs	r3, r3, r6
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	b008      	add	sp, #32
 800434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	9107      	str	r1, [sp, #28]
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e7f0      	b.n	800433c <__cvt+0xa0>

0800435a <__exponent>:
 800435a:	4603      	mov	r3, r0
 800435c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800435e:	2900      	cmp	r1, #0
 8004360:	f803 2b02 	strb.w	r2, [r3], #2
 8004364:	bfb6      	itet	lt
 8004366:	222d      	movlt	r2, #45	; 0x2d
 8004368:	222b      	movge	r2, #43	; 0x2b
 800436a:	4249      	neglt	r1, r1
 800436c:	2909      	cmp	r1, #9
 800436e:	7042      	strb	r2, [r0, #1]
 8004370:	dd2b      	ble.n	80043ca <__exponent+0x70>
 8004372:	f10d 0407 	add.w	r4, sp, #7
 8004376:	46a4      	mov	ip, r4
 8004378:	270a      	movs	r7, #10
 800437a:	fb91 f6f7 	sdiv	r6, r1, r7
 800437e:	460a      	mov	r2, r1
 8004380:	46a6      	mov	lr, r4
 8004382:	fb07 1516 	mls	r5, r7, r6, r1
 8004386:	2a63      	cmp	r2, #99	; 0x63
 8004388:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800438c:	4631      	mov	r1, r6
 800438e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004392:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004396:	dcf0      	bgt.n	800437a <__exponent+0x20>
 8004398:	3130      	adds	r1, #48	; 0x30
 800439a:	f1ae 0502 	sub.w	r5, lr, #2
 800439e:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043a2:	4629      	mov	r1, r5
 80043a4:	1c44      	adds	r4, r0, #1
 80043a6:	4561      	cmp	r1, ip
 80043a8:	d30a      	bcc.n	80043c0 <__exponent+0x66>
 80043aa:	f10d 0209 	add.w	r2, sp, #9
 80043ae:	eba2 020e 	sub.w	r2, r2, lr
 80043b2:	4565      	cmp	r5, ip
 80043b4:	bf88      	it	hi
 80043b6:	2200      	movhi	r2, #0
 80043b8:	4413      	add	r3, r2
 80043ba:	1a18      	subs	r0, r3, r0
 80043bc:	b003      	add	sp, #12
 80043be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043c4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043c8:	e7ed      	b.n	80043a6 <__exponent+0x4c>
 80043ca:	2330      	movs	r3, #48	; 0x30
 80043cc:	3130      	adds	r1, #48	; 0x30
 80043ce:	7083      	strb	r3, [r0, #2]
 80043d0:	70c1      	strb	r1, [r0, #3]
 80043d2:	1d03      	adds	r3, r0, #4
 80043d4:	e7f1      	b.n	80043ba <__exponent+0x60>
	...

080043d8 <_printf_float>:
 80043d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	b091      	sub	sp, #68	; 0x44
 80043de:	460c      	mov	r4, r1
 80043e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80043e4:	4616      	mov	r6, r2
 80043e6:	461f      	mov	r7, r3
 80043e8:	4605      	mov	r5, r0
 80043ea:	f001 fa33 	bl	8005854 <_localeconv_r>
 80043ee:	6803      	ldr	r3, [r0, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	9309      	str	r3, [sp, #36]	; 0x24
 80043f4:	f7fb feac 	bl	8000150 <strlen>
 80043f8:	2300      	movs	r3, #0
 80043fa:	930e      	str	r3, [sp, #56]	; 0x38
 80043fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004400:	900a      	str	r0, [sp, #40]	; 0x28
 8004402:	3307      	adds	r3, #7
 8004404:	f023 0307 	bic.w	r3, r3, #7
 8004408:	f103 0208 	add.w	r2, r3, #8
 800440c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004410:	f8d4 b000 	ldr.w	fp, [r4]
 8004414:	f8c8 2000 	str.w	r2, [r8]
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004420:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004424:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004428:	930b      	str	r3, [sp, #44]	; 0x2c
 800442a:	f04f 32ff 	mov.w	r2, #4294967295
 800442e:	4640      	mov	r0, r8
 8004430:	4b9c      	ldr	r3, [pc, #624]	; (80046a4 <_printf_float+0x2cc>)
 8004432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004434:	f7fc fb9e 	bl	8000b74 <__aeabi_dcmpun>
 8004438:	bb70      	cbnz	r0, 8004498 <_printf_float+0xc0>
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	4640      	mov	r0, r8
 8004440:	4b98      	ldr	r3, [pc, #608]	; (80046a4 <_printf_float+0x2cc>)
 8004442:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004444:	f7fc fb78 	bl	8000b38 <__aeabi_dcmple>
 8004448:	bb30      	cbnz	r0, 8004498 <_printf_float+0xc0>
 800444a:	2200      	movs	r2, #0
 800444c:	2300      	movs	r3, #0
 800444e:	4640      	mov	r0, r8
 8004450:	4651      	mov	r1, sl
 8004452:	f7fc fb67 	bl	8000b24 <__aeabi_dcmplt>
 8004456:	b110      	cbz	r0, 800445e <_printf_float+0x86>
 8004458:	232d      	movs	r3, #45	; 0x2d
 800445a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800445e:	4b92      	ldr	r3, [pc, #584]	; (80046a8 <_printf_float+0x2d0>)
 8004460:	4892      	ldr	r0, [pc, #584]	; (80046ac <_printf_float+0x2d4>)
 8004462:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004466:	bf94      	ite	ls
 8004468:	4698      	movls	r8, r3
 800446a:	4680      	movhi	r8, r0
 800446c:	2303      	movs	r3, #3
 800446e:	f04f 0a00 	mov.w	sl, #0
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	f02b 0304 	bic.w	r3, fp, #4
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	4633      	mov	r3, r6
 800447c:	4621      	mov	r1, r4
 800447e:	4628      	mov	r0, r5
 8004480:	9700      	str	r7, [sp, #0]
 8004482:	aa0f      	add	r2, sp, #60	; 0x3c
 8004484:	f000 f9d4 	bl	8004830 <_printf_common>
 8004488:	3001      	adds	r0, #1
 800448a:	f040 8090 	bne.w	80045ae <_printf_float+0x1d6>
 800448e:	f04f 30ff 	mov.w	r0, #4294967295
 8004492:	b011      	add	sp, #68	; 0x44
 8004494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004498:	4642      	mov	r2, r8
 800449a:	4653      	mov	r3, sl
 800449c:	4640      	mov	r0, r8
 800449e:	4651      	mov	r1, sl
 80044a0:	f7fc fb68 	bl	8000b74 <__aeabi_dcmpun>
 80044a4:	b148      	cbz	r0, 80044ba <_printf_float+0xe2>
 80044a6:	f1ba 0f00 	cmp.w	sl, #0
 80044aa:	bfb8      	it	lt
 80044ac:	232d      	movlt	r3, #45	; 0x2d
 80044ae:	4880      	ldr	r0, [pc, #512]	; (80046b0 <_printf_float+0x2d8>)
 80044b0:	bfb8      	it	lt
 80044b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <_printf_float+0x2dc>)
 80044b8:	e7d3      	b.n	8004462 <_printf_float+0x8a>
 80044ba:	6863      	ldr	r3, [r4, #4]
 80044bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	d142      	bne.n	800454a <_printf_float+0x172>
 80044c4:	2306      	movs	r3, #6
 80044c6:	6063      	str	r3, [r4, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	9206      	str	r2, [sp, #24]
 80044cc:	aa0e      	add	r2, sp, #56	; 0x38
 80044ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80044d2:	aa0d      	add	r2, sp, #52	; 0x34
 80044d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80044d8:	9203      	str	r2, [sp, #12]
 80044da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80044de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	4642      	mov	r2, r8
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	4628      	mov	r0, r5
 80044ec:	4653      	mov	r3, sl
 80044ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80044f0:	f7ff fed4 	bl	800429c <__cvt>
 80044f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044f6:	4680      	mov	r8, r0
 80044f8:	2947      	cmp	r1, #71	; 0x47
 80044fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044fc:	d108      	bne.n	8004510 <_printf_float+0x138>
 80044fe:	1cc8      	adds	r0, r1, #3
 8004500:	db02      	blt.n	8004508 <_printf_float+0x130>
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	4299      	cmp	r1, r3
 8004506:	dd40      	ble.n	800458a <_printf_float+0x1b2>
 8004508:	f1a9 0902 	sub.w	r9, r9, #2
 800450c:	fa5f f989 	uxtb.w	r9, r9
 8004510:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004514:	d81f      	bhi.n	8004556 <_printf_float+0x17e>
 8004516:	464a      	mov	r2, r9
 8004518:	3901      	subs	r1, #1
 800451a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800451e:	910d      	str	r1, [sp, #52]	; 0x34
 8004520:	f7ff ff1b 	bl	800435a <__exponent>
 8004524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004526:	4682      	mov	sl, r0
 8004528:	1813      	adds	r3, r2, r0
 800452a:	2a01      	cmp	r2, #1
 800452c:	6123      	str	r3, [r4, #16]
 800452e:	dc02      	bgt.n	8004536 <_printf_float+0x15e>
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	07d2      	lsls	r2, r2, #31
 8004534:	d501      	bpl.n	800453a <_printf_float+0x162>
 8004536:	3301      	adds	r3, #1
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800453e:	2b00      	cmp	r3, #0
 8004540:	d09b      	beq.n	800447a <_printf_float+0xa2>
 8004542:	232d      	movs	r3, #45	; 0x2d
 8004544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004548:	e797      	b.n	800447a <_printf_float+0xa2>
 800454a:	2947      	cmp	r1, #71	; 0x47
 800454c:	d1bc      	bne.n	80044c8 <_printf_float+0xf0>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ba      	bne.n	80044c8 <_printf_float+0xf0>
 8004552:	2301      	movs	r3, #1
 8004554:	e7b7      	b.n	80044c6 <_printf_float+0xee>
 8004556:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800455a:	d118      	bne.n	800458e <_printf_float+0x1b6>
 800455c:	2900      	cmp	r1, #0
 800455e:	6863      	ldr	r3, [r4, #4]
 8004560:	dd0b      	ble.n	800457a <_printf_float+0x1a2>
 8004562:	6121      	str	r1, [r4, #16]
 8004564:	b913      	cbnz	r3, 800456c <_printf_float+0x194>
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	07d0      	lsls	r0, r2, #31
 800456a:	d502      	bpl.n	8004572 <_printf_float+0x19a>
 800456c:	3301      	adds	r3, #1
 800456e:	440b      	add	r3, r1
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	f04f 0a00 	mov.w	sl, #0
 8004576:	65a1      	str	r1, [r4, #88]	; 0x58
 8004578:	e7df      	b.n	800453a <_printf_float+0x162>
 800457a:	b913      	cbnz	r3, 8004582 <_printf_float+0x1aa>
 800457c:	6822      	ldr	r2, [r4, #0]
 800457e:	07d2      	lsls	r2, r2, #31
 8004580:	d501      	bpl.n	8004586 <_printf_float+0x1ae>
 8004582:	3302      	adds	r3, #2
 8004584:	e7f4      	b.n	8004570 <_printf_float+0x198>
 8004586:	2301      	movs	r3, #1
 8004588:	e7f2      	b.n	8004570 <_printf_float+0x198>
 800458a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800458e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004590:	4299      	cmp	r1, r3
 8004592:	db05      	blt.n	80045a0 <_printf_float+0x1c8>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	6121      	str	r1, [r4, #16]
 8004598:	07d8      	lsls	r0, r3, #31
 800459a:	d5ea      	bpl.n	8004572 <_printf_float+0x19a>
 800459c:	1c4b      	adds	r3, r1, #1
 800459e:	e7e7      	b.n	8004570 <_printf_float+0x198>
 80045a0:	2900      	cmp	r1, #0
 80045a2:	bfcc      	ite	gt
 80045a4:	2201      	movgt	r2, #1
 80045a6:	f1c1 0202 	rsble	r2, r1, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	e7e0      	b.n	8004570 <_printf_float+0x198>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	055a      	lsls	r2, r3, #21
 80045b2:	d407      	bmi.n	80045c4 <_printf_float+0x1ec>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	4642      	mov	r2, r8
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	d12b      	bne.n	800461a <_printf_float+0x242>
 80045c2:	e764      	b.n	800448e <_printf_float+0xb6>
 80045c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045c8:	f240 80dd 	bls.w	8004786 <_printf_float+0x3ae>
 80045cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045d0:	2200      	movs	r2, #0
 80045d2:	2300      	movs	r3, #0
 80045d4:	f7fc fa9c 	bl	8000b10 <__aeabi_dcmpeq>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d033      	beq.n	8004644 <_printf_float+0x26c>
 80045dc:	2301      	movs	r3, #1
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	4a35      	ldr	r2, [pc, #212]	; (80046b8 <_printf_float+0x2e0>)
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	f43f af51 	beq.w	800448e <_printf_float+0xb6>
 80045ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045f0:	429a      	cmp	r2, r3
 80045f2:	db02      	blt.n	80045fa <_printf_float+0x222>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	07d8      	lsls	r0, r3, #31
 80045f8:	d50f      	bpl.n	800461a <_printf_float+0x242>
 80045fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045fe:	4631      	mov	r1, r6
 8004600:	4628      	mov	r0, r5
 8004602:	47b8      	blx	r7
 8004604:	3001      	adds	r0, #1
 8004606:	f43f af42 	beq.w	800448e <_printf_float+0xb6>
 800460a:	f04f 0800 	mov.w	r8, #0
 800460e:	f104 091a 	add.w	r9, r4, #26
 8004612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004614:	3b01      	subs	r3, #1
 8004616:	4543      	cmp	r3, r8
 8004618:	dc09      	bgt.n	800462e <_printf_float+0x256>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	079b      	lsls	r3, r3, #30
 800461e:	f100 8102 	bmi.w	8004826 <_printf_float+0x44e>
 8004622:	68e0      	ldr	r0, [r4, #12]
 8004624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004626:	4298      	cmp	r0, r3
 8004628:	bfb8      	it	lt
 800462a:	4618      	movlt	r0, r3
 800462c:	e731      	b.n	8004492 <_printf_float+0xba>
 800462e:	2301      	movs	r3, #1
 8004630:	464a      	mov	r2, r9
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	f43f af28 	beq.w	800448e <_printf_float+0xb6>
 800463e:	f108 0801 	add.w	r8, r8, #1
 8004642:	e7e6      	b.n	8004612 <_printf_float+0x23a>
 8004644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004646:	2b00      	cmp	r3, #0
 8004648:	dc38      	bgt.n	80046bc <_printf_float+0x2e4>
 800464a:	2301      	movs	r3, #1
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <_printf_float+0x2e0>)
 8004652:	47b8      	blx	r7
 8004654:	3001      	adds	r0, #1
 8004656:	f43f af1a 	beq.w	800448e <_printf_float+0xb6>
 800465a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800465e:	4313      	orrs	r3, r2
 8004660:	d102      	bne.n	8004668 <_printf_float+0x290>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	07d9      	lsls	r1, r3, #31
 8004666:	d5d8      	bpl.n	800461a <_printf_float+0x242>
 8004668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800466c:	4631      	mov	r1, r6
 800466e:	4628      	mov	r0, r5
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	f43f af0b 	beq.w	800448e <_printf_float+0xb6>
 8004678:	f04f 0900 	mov.w	r9, #0
 800467c:	f104 0a1a 	add.w	sl, r4, #26
 8004680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004682:	425b      	negs	r3, r3
 8004684:	454b      	cmp	r3, r9
 8004686:	dc01      	bgt.n	800468c <_printf_float+0x2b4>
 8004688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800468a:	e794      	b.n	80045b6 <_printf_float+0x1de>
 800468c:	2301      	movs	r3, #1
 800468e:	4652      	mov	r2, sl
 8004690:	4631      	mov	r1, r6
 8004692:	4628      	mov	r0, r5
 8004694:	47b8      	blx	r7
 8004696:	3001      	adds	r0, #1
 8004698:	f43f aef9 	beq.w	800448e <_printf_float+0xb6>
 800469c:	f109 0901 	add.w	r9, r9, #1
 80046a0:	e7ee      	b.n	8004680 <_printf_float+0x2a8>
 80046a2:	bf00      	nop
 80046a4:	7fefffff 	.word	0x7fefffff
 80046a8:	0800ac3c 	.word	0x0800ac3c
 80046ac:	0800ac40 	.word	0x0800ac40
 80046b0:	0800ac48 	.word	0x0800ac48
 80046b4:	0800ac44 	.word	0x0800ac44
 80046b8:	0800ac4c 	.word	0x0800ac4c
 80046bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046c0:	429a      	cmp	r2, r3
 80046c2:	bfa8      	it	ge
 80046c4:	461a      	movge	r2, r3
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	4691      	mov	r9, r2
 80046ca:	dc37      	bgt.n	800473c <_printf_float+0x364>
 80046cc:	f04f 0b00 	mov.w	fp, #0
 80046d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046d4:	f104 021a 	add.w	r2, r4, #26
 80046d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046dc:	ebaa 0309 	sub.w	r3, sl, r9
 80046e0:	455b      	cmp	r3, fp
 80046e2:	dc33      	bgt.n	800474c <_printf_float+0x374>
 80046e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046e8:	429a      	cmp	r2, r3
 80046ea:	db3b      	blt.n	8004764 <_printf_float+0x38c>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	07da      	lsls	r2, r3, #31
 80046f0:	d438      	bmi.n	8004764 <_printf_float+0x38c>
 80046f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046f6:	eba3 020a 	sub.w	r2, r3, sl
 80046fa:	eba3 0901 	sub.w	r9, r3, r1
 80046fe:	4591      	cmp	r9, r2
 8004700:	bfa8      	it	ge
 8004702:	4691      	movge	r9, r2
 8004704:	f1b9 0f00 	cmp.w	r9, #0
 8004708:	dc34      	bgt.n	8004774 <_printf_float+0x39c>
 800470a:	f04f 0800 	mov.w	r8, #0
 800470e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004712:	f104 0a1a 	add.w	sl, r4, #26
 8004716:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	eba3 0309 	sub.w	r3, r3, r9
 8004720:	4543      	cmp	r3, r8
 8004722:	f77f af7a 	ble.w	800461a <_printf_float+0x242>
 8004726:	2301      	movs	r3, #1
 8004728:	4652      	mov	r2, sl
 800472a:	4631      	mov	r1, r6
 800472c:	4628      	mov	r0, r5
 800472e:	47b8      	blx	r7
 8004730:	3001      	adds	r0, #1
 8004732:	f43f aeac 	beq.w	800448e <_printf_float+0xb6>
 8004736:	f108 0801 	add.w	r8, r8, #1
 800473a:	e7ec      	b.n	8004716 <_printf_float+0x33e>
 800473c:	4613      	mov	r3, r2
 800473e:	4631      	mov	r1, r6
 8004740:	4642      	mov	r2, r8
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	d1c0      	bne.n	80046cc <_printf_float+0x2f4>
 800474a:	e6a0      	b.n	800448e <_printf_float+0xb6>
 800474c:	2301      	movs	r3, #1
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	920b      	str	r2, [sp, #44]	; 0x2c
 8004754:	47b8      	blx	r7
 8004756:	3001      	adds	r0, #1
 8004758:	f43f ae99 	beq.w	800448e <_printf_float+0xb6>
 800475c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800475e:	f10b 0b01 	add.w	fp, fp, #1
 8004762:	e7b9      	b.n	80046d8 <_printf_float+0x300>
 8004764:	4631      	mov	r1, r6
 8004766:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800476a:	4628      	mov	r0, r5
 800476c:	47b8      	blx	r7
 800476e:	3001      	adds	r0, #1
 8004770:	d1bf      	bne.n	80046f2 <_printf_float+0x31a>
 8004772:	e68c      	b.n	800448e <_printf_float+0xb6>
 8004774:	464b      	mov	r3, r9
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	eb08 020a 	add.w	r2, r8, sl
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	d1c2      	bne.n	800470a <_printf_float+0x332>
 8004784:	e683      	b.n	800448e <_printf_float+0xb6>
 8004786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004788:	2a01      	cmp	r2, #1
 800478a:	dc01      	bgt.n	8004790 <_printf_float+0x3b8>
 800478c:	07db      	lsls	r3, r3, #31
 800478e:	d537      	bpl.n	8004800 <_printf_float+0x428>
 8004790:	2301      	movs	r3, #1
 8004792:	4642      	mov	r2, r8
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	f43f ae77 	beq.w	800448e <_printf_float+0xb6>
 80047a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a4:	4631      	mov	r1, r6
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	f43f ae6f 	beq.w	800448e <_printf_float+0xb6>
 80047b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047b4:	2200      	movs	r2, #0
 80047b6:	2300      	movs	r3, #0
 80047b8:	f7fc f9aa 	bl	8000b10 <__aeabi_dcmpeq>
 80047bc:	b9d8      	cbnz	r0, 80047f6 <_printf_float+0x41e>
 80047be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c0:	f108 0201 	add.w	r2, r8, #1
 80047c4:	3b01      	subs	r3, #1
 80047c6:	4631      	mov	r1, r6
 80047c8:	4628      	mov	r0, r5
 80047ca:	47b8      	blx	r7
 80047cc:	3001      	adds	r0, #1
 80047ce:	d10e      	bne.n	80047ee <_printf_float+0x416>
 80047d0:	e65d      	b.n	800448e <_printf_float+0xb6>
 80047d2:	2301      	movs	r3, #1
 80047d4:	464a      	mov	r2, r9
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	47b8      	blx	r7
 80047dc:	3001      	adds	r0, #1
 80047de:	f43f ae56 	beq.w	800448e <_printf_float+0xb6>
 80047e2:	f108 0801 	add.w	r8, r8, #1
 80047e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047e8:	3b01      	subs	r3, #1
 80047ea:	4543      	cmp	r3, r8
 80047ec:	dcf1      	bgt.n	80047d2 <_printf_float+0x3fa>
 80047ee:	4653      	mov	r3, sl
 80047f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047f4:	e6e0      	b.n	80045b8 <_printf_float+0x1e0>
 80047f6:	f04f 0800 	mov.w	r8, #0
 80047fa:	f104 091a 	add.w	r9, r4, #26
 80047fe:	e7f2      	b.n	80047e6 <_printf_float+0x40e>
 8004800:	2301      	movs	r3, #1
 8004802:	4642      	mov	r2, r8
 8004804:	e7df      	b.n	80047c6 <_printf_float+0x3ee>
 8004806:	2301      	movs	r3, #1
 8004808:	464a      	mov	r2, r9
 800480a:	4631      	mov	r1, r6
 800480c:	4628      	mov	r0, r5
 800480e:	47b8      	blx	r7
 8004810:	3001      	adds	r0, #1
 8004812:	f43f ae3c 	beq.w	800448e <_printf_float+0xb6>
 8004816:	f108 0801 	add.w	r8, r8, #1
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800481e:	1a5b      	subs	r3, r3, r1
 8004820:	4543      	cmp	r3, r8
 8004822:	dcf0      	bgt.n	8004806 <_printf_float+0x42e>
 8004824:	e6fd      	b.n	8004622 <_printf_float+0x24a>
 8004826:	f04f 0800 	mov.w	r8, #0
 800482a:	f104 0919 	add.w	r9, r4, #25
 800482e:	e7f4      	b.n	800481a <_printf_float+0x442>

08004830 <_printf_common>:
 8004830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	4616      	mov	r6, r2
 8004836:	4699      	mov	r9, r3
 8004838:	688a      	ldr	r2, [r1, #8]
 800483a:	690b      	ldr	r3, [r1, #16]
 800483c:	4607      	mov	r7, r0
 800483e:	4293      	cmp	r3, r2
 8004840:	bfb8      	it	lt
 8004842:	4613      	movlt	r3, r2
 8004844:	6033      	str	r3, [r6, #0]
 8004846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800484a:	460c      	mov	r4, r1
 800484c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004850:	b10a      	cbz	r2, 8004856 <_printf_common+0x26>
 8004852:	3301      	adds	r3, #1
 8004854:	6033      	str	r3, [r6, #0]
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	0699      	lsls	r1, r3, #26
 800485a:	bf42      	ittt	mi
 800485c:	6833      	ldrmi	r3, [r6, #0]
 800485e:	3302      	addmi	r3, #2
 8004860:	6033      	strmi	r3, [r6, #0]
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	f015 0506 	ands.w	r5, r5, #6
 8004868:	d106      	bne.n	8004878 <_printf_common+0x48>
 800486a:	f104 0a19 	add.w	sl, r4, #25
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	6832      	ldr	r2, [r6, #0]
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	42ab      	cmp	r3, r5
 8004876:	dc28      	bgt.n	80048ca <_printf_common+0x9a>
 8004878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800487c:	1e13      	subs	r3, r2, #0
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	bf18      	it	ne
 8004882:	2301      	movne	r3, #1
 8004884:	0692      	lsls	r2, r2, #26
 8004886:	d42d      	bmi.n	80048e4 <_printf_common+0xb4>
 8004888:	4649      	mov	r1, r9
 800488a:	4638      	mov	r0, r7
 800488c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004890:	47c0      	blx	r8
 8004892:	3001      	adds	r0, #1
 8004894:	d020      	beq.n	80048d8 <_printf_common+0xa8>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	68e5      	ldr	r5, [r4, #12]
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	2b04      	cmp	r3, #4
 80048a0:	bf18      	it	ne
 80048a2:	2500      	movne	r5, #0
 80048a4:	6832      	ldr	r2, [r6, #0]
 80048a6:	f04f 0600 	mov.w	r6, #0
 80048aa:	68a3      	ldr	r3, [r4, #8]
 80048ac:	bf08      	it	eq
 80048ae:	1aad      	subeq	r5, r5, r2
 80048b0:	6922      	ldr	r2, [r4, #16]
 80048b2:	bf08      	it	eq
 80048b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bfc4      	itt	gt
 80048bc:	1a9b      	subgt	r3, r3, r2
 80048be:	18ed      	addgt	r5, r5, r3
 80048c0:	341a      	adds	r4, #26
 80048c2:	42b5      	cmp	r5, r6
 80048c4:	d11a      	bne.n	80048fc <_printf_common+0xcc>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e008      	b.n	80048dc <_printf_common+0xac>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4652      	mov	r2, sl
 80048ce:	4649      	mov	r1, r9
 80048d0:	4638      	mov	r0, r7
 80048d2:	47c0      	blx	r8
 80048d4:	3001      	adds	r0, #1
 80048d6:	d103      	bne.n	80048e0 <_printf_common+0xb0>
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e0:	3501      	adds	r5, #1
 80048e2:	e7c4      	b.n	800486e <_printf_common+0x3e>
 80048e4:	2030      	movs	r0, #48	; 0x30
 80048e6:	18e1      	adds	r1, r4, r3
 80048e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048f2:	4422      	add	r2, r4
 80048f4:	3302      	adds	r3, #2
 80048f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048fa:	e7c5      	b.n	8004888 <_printf_common+0x58>
 80048fc:	2301      	movs	r3, #1
 80048fe:	4622      	mov	r2, r4
 8004900:	4649      	mov	r1, r9
 8004902:	4638      	mov	r0, r7
 8004904:	47c0      	blx	r8
 8004906:	3001      	adds	r0, #1
 8004908:	d0e6      	beq.n	80048d8 <_printf_common+0xa8>
 800490a:	3601      	adds	r6, #1
 800490c:	e7d9      	b.n	80048c2 <_printf_common+0x92>
	...

08004910 <_printf_i>:
 8004910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	7e0f      	ldrb	r7, [r1, #24]
 8004916:	4691      	mov	r9, r2
 8004918:	2f78      	cmp	r7, #120	; 0x78
 800491a:	4680      	mov	r8, r0
 800491c:	460c      	mov	r4, r1
 800491e:	469a      	mov	sl, r3
 8004920:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004926:	d807      	bhi.n	8004938 <_printf_i+0x28>
 8004928:	2f62      	cmp	r7, #98	; 0x62
 800492a:	d80a      	bhi.n	8004942 <_printf_i+0x32>
 800492c:	2f00      	cmp	r7, #0
 800492e:	f000 80d9 	beq.w	8004ae4 <_printf_i+0x1d4>
 8004932:	2f58      	cmp	r7, #88	; 0x58
 8004934:	f000 80a4 	beq.w	8004a80 <_printf_i+0x170>
 8004938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800493c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004940:	e03a      	b.n	80049b8 <_printf_i+0xa8>
 8004942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004946:	2b15      	cmp	r3, #21
 8004948:	d8f6      	bhi.n	8004938 <_printf_i+0x28>
 800494a:	a101      	add	r1, pc, #4	; (adr r1, 8004950 <_printf_i+0x40>)
 800494c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004950:	080049a9 	.word	0x080049a9
 8004954:	080049bd 	.word	0x080049bd
 8004958:	08004939 	.word	0x08004939
 800495c:	08004939 	.word	0x08004939
 8004960:	08004939 	.word	0x08004939
 8004964:	08004939 	.word	0x08004939
 8004968:	080049bd 	.word	0x080049bd
 800496c:	08004939 	.word	0x08004939
 8004970:	08004939 	.word	0x08004939
 8004974:	08004939 	.word	0x08004939
 8004978:	08004939 	.word	0x08004939
 800497c:	08004acb 	.word	0x08004acb
 8004980:	080049ed 	.word	0x080049ed
 8004984:	08004aad 	.word	0x08004aad
 8004988:	08004939 	.word	0x08004939
 800498c:	08004939 	.word	0x08004939
 8004990:	08004aed 	.word	0x08004aed
 8004994:	08004939 	.word	0x08004939
 8004998:	080049ed 	.word	0x080049ed
 800499c:	08004939 	.word	0x08004939
 80049a0:	08004939 	.word	0x08004939
 80049a4:	08004ab5 	.word	0x08004ab5
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	602a      	str	r2, [r5, #0]
 80049b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0a4      	b.n	8004b06 <_printf_i+0x1f6>
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	6829      	ldr	r1, [r5, #0]
 80049c0:	0606      	lsls	r6, r0, #24
 80049c2:	f101 0304 	add.w	r3, r1, #4
 80049c6:	d50a      	bpl.n	80049de <_printf_i+0xce>
 80049c8:	680e      	ldr	r6, [r1, #0]
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	2e00      	cmp	r6, #0
 80049ce:	da03      	bge.n	80049d8 <_printf_i+0xc8>
 80049d0:	232d      	movs	r3, #45	; 0x2d
 80049d2:	4276      	negs	r6, r6
 80049d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d8:	230a      	movs	r3, #10
 80049da:	485e      	ldr	r0, [pc, #376]	; (8004b54 <_printf_i+0x244>)
 80049dc:	e019      	b.n	8004a12 <_printf_i+0x102>
 80049de:	680e      	ldr	r6, [r1, #0]
 80049e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049e4:	602b      	str	r3, [r5, #0]
 80049e6:	bf18      	it	ne
 80049e8:	b236      	sxthne	r6, r6
 80049ea:	e7ef      	b.n	80049cc <_printf_i+0xbc>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	1d19      	adds	r1, r3, #4
 80049f2:	6029      	str	r1, [r5, #0]
 80049f4:	0601      	lsls	r1, r0, #24
 80049f6:	d501      	bpl.n	80049fc <_printf_i+0xec>
 80049f8:	681e      	ldr	r6, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <_printf_i+0xf2>
 80049fc:	0646      	lsls	r6, r0, #25
 80049fe:	d5fb      	bpl.n	80049f8 <_printf_i+0xe8>
 8004a00:	881e      	ldrh	r6, [r3, #0]
 8004a02:	2f6f      	cmp	r7, #111	; 0x6f
 8004a04:	bf0c      	ite	eq
 8004a06:	2308      	moveq	r3, #8
 8004a08:	230a      	movne	r3, #10
 8004a0a:	4852      	ldr	r0, [pc, #328]	; (8004b54 <_printf_i+0x244>)
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a12:	6865      	ldr	r5, [r4, #4]
 8004a14:	2d00      	cmp	r5, #0
 8004a16:	bfa8      	it	ge
 8004a18:	6821      	ldrge	r1, [r4, #0]
 8004a1a:	60a5      	str	r5, [r4, #8]
 8004a1c:	bfa4      	itt	ge
 8004a1e:	f021 0104 	bicge.w	r1, r1, #4
 8004a22:	6021      	strge	r1, [r4, #0]
 8004a24:	b90e      	cbnz	r6, 8004a2a <_printf_i+0x11a>
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	d04d      	beq.n	8004ac6 <_printf_i+0x1b6>
 8004a2a:	4615      	mov	r5, r2
 8004a2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a30:	fb03 6711 	mls	r7, r3, r1, r6
 8004a34:	5dc7      	ldrb	r7, [r0, r7]
 8004a36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a3a:	4637      	mov	r7, r6
 8004a3c:	42bb      	cmp	r3, r7
 8004a3e:	460e      	mov	r6, r1
 8004a40:	d9f4      	bls.n	8004a2c <_printf_i+0x11c>
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d10b      	bne.n	8004a5e <_printf_i+0x14e>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	07de      	lsls	r6, r3, #31
 8004a4a:	d508      	bpl.n	8004a5e <_printf_i+0x14e>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	6861      	ldr	r1, [r4, #4]
 8004a50:	4299      	cmp	r1, r3
 8004a52:	bfde      	ittt	le
 8004a54:	2330      	movle	r3, #48	; 0x30
 8004a56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a5e:	1b52      	subs	r2, r2, r5
 8004a60:	6122      	str	r2, [r4, #16]
 8004a62:	464b      	mov	r3, r9
 8004a64:	4621      	mov	r1, r4
 8004a66:	4640      	mov	r0, r8
 8004a68:	f8cd a000 	str.w	sl, [sp]
 8004a6c:	aa03      	add	r2, sp, #12
 8004a6e:	f7ff fedf 	bl	8004830 <_printf_common>
 8004a72:	3001      	adds	r0, #1
 8004a74:	d14c      	bne.n	8004b10 <_printf_i+0x200>
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	b004      	add	sp, #16
 8004a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a80:	4834      	ldr	r0, [pc, #208]	; (8004b54 <_printf_i+0x244>)
 8004a82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a86:	6829      	ldr	r1, [r5, #0]
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a8e:	6029      	str	r1, [r5, #0]
 8004a90:	061d      	lsls	r5, r3, #24
 8004a92:	d514      	bpl.n	8004abe <_printf_i+0x1ae>
 8004a94:	07df      	lsls	r7, r3, #31
 8004a96:	bf44      	itt	mi
 8004a98:	f043 0320 	orrmi.w	r3, r3, #32
 8004a9c:	6023      	strmi	r3, [r4, #0]
 8004a9e:	b91e      	cbnz	r6, 8004aa8 <_printf_i+0x198>
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	f023 0320 	bic.w	r3, r3, #32
 8004aa6:	6023      	str	r3, [r4, #0]
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	e7af      	b.n	8004a0c <_printf_i+0xfc>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	f043 0320 	orr.w	r3, r3, #32
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	2378      	movs	r3, #120	; 0x78
 8004ab6:	4828      	ldr	r0, [pc, #160]	; (8004b58 <_printf_i+0x248>)
 8004ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004abc:	e7e3      	b.n	8004a86 <_printf_i+0x176>
 8004abe:	0659      	lsls	r1, r3, #25
 8004ac0:	bf48      	it	mi
 8004ac2:	b2b6      	uxthmi	r6, r6
 8004ac4:	e7e6      	b.n	8004a94 <_printf_i+0x184>
 8004ac6:	4615      	mov	r5, r2
 8004ac8:	e7bb      	b.n	8004a42 <_printf_i+0x132>
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	6826      	ldr	r6, [r4, #0]
 8004ace:	1d18      	adds	r0, r3, #4
 8004ad0:	6961      	ldr	r1, [r4, #20]
 8004ad2:	6028      	str	r0, [r5, #0]
 8004ad4:	0635      	lsls	r5, r6, #24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	d501      	bpl.n	8004ade <_printf_i+0x1ce>
 8004ada:	6019      	str	r1, [r3, #0]
 8004adc:	e002      	b.n	8004ae4 <_printf_i+0x1d4>
 8004ade:	0670      	lsls	r0, r6, #25
 8004ae0:	d5fb      	bpl.n	8004ada <_printf_i+0x1ca>
 8004ae2:	8019      	strh	r1, [r3, #0]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4615      	mov	r5, r2
 8004ae8:	6123      	str	r3, [r4, #16]
 8004aea:	e7ba      	b.n	8004a62 <_printf_i+0x152>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	2100      	movs	r1, #0
 8004af0:	1d1a      	adds	r2, r3, #4
 8004af2:	602a      	str	r2, [r5, #0]
 8004af4:	681d      	ldr	r5, [r3, #0]
 8004af6:	6862      	ldr	r2, [r4, #4]
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 feb7 	bl	800586c <memchr>
 8004afe:	b108      	cbz	r0, 8004b04 <_printf_i+0x1f4>
 8004b00:	1b40      	subs	r0, r0, r5
 8004b02:	6060      	str	r0, [r4, #4]
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0e:	e7a8      	b.n	8004a62 <_printf_i+0x152>
 8004b10:	462a      	mov	r2, r5
 8004b12:	4649      	mov	r1, r9
 8004b14:	4640      	mov	r0, r8
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	47d0      	blx	sl
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d0ab      	beq.n	8004a76 <_printf_i+0x166>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	079b      	lsls	r3, r3, #30
 8004b22:	d413      	bmi.n	8004b4c <_printf_i+0x23c>
 8004b24:	68e0      	ldr	r0, [r4, #12]
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	4298      	cmp	r0, r3
 8004b2a:	bfb8      	it	lt
 8004b2c:	4618      	movlt	r0, r3
 8004b2e:	e7a4      	b.n	8004a7a <_printf_i+0x16a>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4632      	mov	r2, r6
 8004b34:	4649      	mov	r1, r9
 8004b36:	4640      	mov	r0, r8
 8004b38:	47d0      	blx	sl
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d09b      	beq.n	8004a76 <_printf_i+0x166>
 8004b3e:	3501      	adds	r5, #1
 8004b40:	68e3      	ldr	r3, [r4, #12]
 8004b42:	9903      	ldr	r1, [sp, #12]
 8004b44:	1a5b      	subs	r3, r3, r1
 8004b46:	42ab      	cmp	r3, r5
 8004b48:	dcf2      	bgt.n	8004b30 <_printf_i+0x220>
 8004b4a:	e7eb      	b.n	8004b24 <_printf_i+0x214>
 8004b4c:	2500      	movs	r5, #0
 8004b4e:	f104 0619 	add.w	r6, r4, #25
 8004b52:	e7f5      	b.n	8004b40 <_printf_i+0x230>
 8004b54:	0800ac4e 	.word	0x0800ac4e
 8004b58:	0800ac5f 	.word	0x0800ac5f

08004b5c <quorem>:
 8004b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	6903      	ldr	r3, [r0, #16]
 8004b62:	690c      	ldr	r4, [r1, #16]
 8004b64:	4607      	mov	r7, r0
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	f2c0 8082 	blt.w	8004c70 <quorem+0x114>
 8004b6c:	3c01      	subs	r4, #1
 8004b6e:	f100 0514 	add.w	r5, r0, #20
 8004b72:	f101 0814 	add.w	r8, r1, #20
 8004b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b84:	3301      	adds	r3, #1
 8004b86:	429a      	cmp	r2, r3
 8004b88:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b94:	d331      	bcc.n	8004bfa <quorem+0x9e>
 8004b96:	f04f 0e00 	mov.w	lr, #0
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	46ac      	mov	ip, r5
 8004b9e:	46f2      	mov	sl, lr
 8004ba0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ba4:	b293      	uxth	r3, r2
 8004ba6:	fb06 e303 	mla	r3, r6, r3, lr
 8004baa:	0c12      	lsrs	r2, r2, #16
 8004bac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	fb06 e202 	mla	r2, r6, r2, lr
 8004bb6:	ebaa 0303 	sub.w	r3, sl, r3
 8004bba:	f8dc a000 	ldr.w	sl, [ip]
 8004bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bc2:	fa1f fa8a 	uxth.w	sl, sl
 8004bc6:	4453      	add	r3, sl
 8004bc8:	f8dc a000 	ldr.w	sl, [ip]
 8004bcc:	b292      	uxth	r2, r2
 8004bce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bdc:	4581      	cmp	r9, r0
 8004bde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004be2:	f84c 3b04 	str.w	r3, [ip], #4
 8004be6:	d2db      	bcs.n	8004ba0 <quorem+0x44>
 8004be8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bec:	b92b      	cbnz	r3, 8004bfa <quorem+0x9e>
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	3b04      	subs	r3, #4
 8004bf2:	429d      	cmp	r5, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	d32f      	bcc.n	8004c58 <quorem+0xfc>
 8004bf8:	613c      	str	r4, [r7, #16]
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f001 f8d0 	bl	8005da0 <__mcmp>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	db25      	blt.n	8004c50 <quorem+0xf4>
 8004c04:	4628      	mov	r0, r5
 8004c06:	f04f 0c00 	mov.w	ip, #0
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004c10:	f8d0 e000 	ldr.w	lr, [r0]
 8004c14:	b28b      	uxth	r3, r1
 8004c16:	ebac 0303 	sub.w	r3, ip, r3
 8004c1a:	fa1f f28e 	uxth.w	r2, lr
 8004c1e:	4413      	add	r3, r2
 8004c20:	0c0a      	lsrs	r2, r1, #16
 8004c22:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c30:	45c1      	cmp	r9, r8
 8004c32:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c36:	f840 3b04 	str.w	r3, [r0], #4
 8004c3a:	d2e7      	bcs.n	8004c0c <quorem+0xb0>
 8004c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c44:	b922      	cbnz	r2, 8004c50 <quorem+0xf4>
 8004c46:	3b04      	subs	r3, #4
 8004c48:	429d      	cmp	r5, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	d30a      	bcc.n	8004c64 <quorem+0x108>
 8004c4e:	613c      	str	r4, [r7, #16]
 8004c50:	4630      	mov	r0, r6
 8004c52:	b003      	add	sp, #12
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	3b04      	subs	r3, #4
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d1cb      	bne.n	8004bf8 <quorem+0x9c>
 8004c60:	3c01      	subs	r4, #1
 8004c62:	e7c6      	b.n	8004bf2 <quorem+0x96>
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	3b04      	subs	r3, #4
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	d1f0      	bne.n	8004c4e <quorem+0xf2>
 8004c6c:	3c01      	subs	r4, #1
 8004c6e:	e7eb      	b.n	8004c48 <quorem+0xec>
 8004c70:	2000      	movs	r0, #0
 8004c72:	e7ee      	b.n	8004c52 <quorem+0xf6>
 8004c74:	0000      	movs	r0, r0
	...

08004c78 <_dtoa_r>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	461f      	mov	r7, r3
 8004c80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c82:	b099      	sub	sp, #100	; 0x64
 8004c84:	4605      	mov	r5, r0
 8004c86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c8e:	b974      	cbnz	r4, 8004cae <_dtoa_r+0x36>
 8004c90:	2010      	movs	r0, #16
 8004c92:	f000 fde3 	bl	800585c <malloc>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6268      	str	r0, [r5, #36]	; 0x24
 8004c9a:	b920      	cbnz	r0, 8004ca6 <_dtoa_r+0x2e>
 8004c9c:	21ea      	movs	r1, #234	; 0xea
 8004c9e:	4ba8      	ldr	r3, [pc, #672]	; (8004f40 <_dtoa_r+0x2c8>)
 8004ca0:	48a8      	ldr	r0, [pc, #672]	; (8004f44 <_dtoa_r+0x2cc>)
 8004ca2:	f001 fa81 	bl	80061a8 <__assert_func>
 8004ca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004caa:	6004      	str	r4, [r0, #0]
 8004cac:	60c4      	str	r4, [r0, #12]
 8004cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	b151      	cbz	r1, 8004cca <_dtoa_r+0x52>
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4093      	lsls	r3, r2
 8004cba:	604a      	str	r2, [r1, #4]
 8004cbc:	608b      	str	r3, [r1, #8]
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 fe30 	bl	8005924 <_Bfree>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	1e3b      	subs	r3, r7, #0
 8004ccc:	bfaf      	iteee	ge
 8004cce:	2300      	movge	r3, #0
 8004cd0:	2201      	movlt	r2, #1
 8004cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cd6:	9305      	strlt	r3, [sp, #20]
 8004cd8:	bfa8      	it	ge
 8004cda:	f8c8 3000 	strge.w	r3, [r8]
 8004cde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004ce2:	4b99      	ldr	r3, [pc, #612]	; (8004f48 <_dtoa_r+0x2d0>)
 8004ce4:	bfb8      	it	lt
 8004ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cea:	ea33 0309 	bics.w	r3, r3, r9
 8004cee:	d119      	bne.n	8004d24 <_dtoa_r+0xac>
 8004cf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cfc:	4333      	orrs	r3, r6
 8004cfe:	f000 857f 	beq.w	8005800 <_dtoa_r+0xb88>
 8004d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d04:	b953      	cbnz	r3, 8004d1c <_dtoa_r+0xa4>
 8004d06:	4b91      	ldr	r3, [pc, #580]	; (8004f4c <_dtoa_r+0x2d4>)
 8004d08:	e022      	b.n	8004d50 <_dtoa_r+0xd8>
 8004d0a:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <_dtoa_r+0x2d8>)
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	9803      	ldr	r0, [sp, #12]
 8004d16:	b019      	add	sp, #100	; 0x64
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1c:	4b8b      	ldr	r3, [pc, #556]	; (8004f4c <_dtoa_r+0x2d4>)
 8004d1e:	9303      	str	r3, [sp, #12]
 8004d20:	3303      	adds	r3, #3
 8004d22:	e7f5      	b.n	8004d10 <_dtoa_r+0x98>
 8004d24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	f7fb feec 	bl	8000b10 <__aeabi_dcmpeq>
 8004d38:	4680      	mov	r8, r0
 8004d3a:	b158      	cbz	r0, 8004d54 <_dtoa_r+0xdc>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8558 	beq.w	80057fa <_dtoa_r+0xb82>
 8004d4a:	4882      	ldr	r0, [pc, #520]	; (8004f54 <_dtoa_r+0x2dc>)
 8004d4c:	6018      	str	r0, [r3, #0]
 8004d4e:	1e43      	subs	r3, r0, #1
 8004d50:	9303      	str	r3, [sp, #12]
 8004d52:	e7df      	b.n	8004d14 <_dtoa_r+0x9c>
 8004d54:	ab16      	add	r3, sp, #88	; 0x58
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	ab17      	add	r3, sp, #92	; 0x5c
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d62:	f001 f8c5 	bl	8005ef0 <__d2b>
 8004d66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d6a:	4683      	mov	fp, r0
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d07f      	beq.n	8004e70 <_dtoa_r+0x1f8>
 8004d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	4b72      	ldr	r3, [pc, #456]	; (8004f58 <_dtoa_r+0x2e0>)
 8004d8e:	f7fb fa9f 	bl	80002d0 <__aeabi_dsub>
 8004d92:	a365      	add	r3, pc, #404	; (adr r3, 8004f28 <_dtoa_r+0x2b0>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f7fb fc52 	bl	8000640 <__aeabi_dmul>
 8004d9c:	a364      	add	r3, pc, #400	; (adr r3, 8004f30 <_dtoa_r+0x2b8>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f7fb fa97 	bl	80002d4 <__adddf3>
 8004da6:	4606      	mov	r6, r0
 8004da8:	4620      	mov	r0, r4
 8004daa:	460f      	mov	r7, r1
 8004dac:	f7fb fbde 	bl	800056c <__aeabi_i2d>
 8004db0:	a361      	add	r3, pc, #388	; (adr r3, 8004f38 <_dtoa_r+0x2c0>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fc43 	bl	8000640 <__aeabi_dmul>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f7fb fa87 	bl	80002d4 <__adddf3>
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	460f      	mov	r7, r1
 8004dca:	f7fb fee9 	bl	8000ba0 <__aeabi_d2iz>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4682      	mov	sl, r0
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	f7fb fea4 	bl	8000b24 <__aeabi_dcmplt>
 8004ddc:	b148      	cbz	r0, 8004df2 <_dtoa_r+0x17a>
 8004dde:	4650      	mov	r0, sl
 8004de0:	f7fb fbc4 	bl	800056c <__aeabi_i2d>
 8004de4:	4632      	mov	r2, r6
 8004de6:	463b      	mov	r3, r7
 8004de8:	f7fb fe92 	bl	8000b10 <__aeabi_dcmpeq>
 8004dec:	b908      	cbnz	r0, 8004df2 <_dtoa_r+0x17a>
 8004dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004df2:	f1ba 0f16 	cmp.w	sl, #22
 8004df6:	d858      	bhi.n	8004eaa <_dtoa_r+0x232>
 8004df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dfc:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <_dtoa_r+0x2e4>)
 8004dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f7fb fe8d 	bl	8000b24 <__aeabi_dcmplt>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d04f      	beq.n	8004eae <_dtoa_r+0x236>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e18:	1b1c      	subs	r4, r3, r4
 8004e1a:	1e63      	subs	r3, r4, #1
 8004e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1e:	bf49      	itett	mi
 8004e20:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e24:	2300      	movpl	r3, #0
 8004e26:	9306      	strmi	r3, [sp, #24]
 8004e28:	2300      	movmi	r3, #0
 8004e2a:	bf54      	ite	pl
 8004e2c:	9306      	strpl	r3, [sp, #24]
 8004e2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e30:	f1ba 0f00 	cmp.w	sl, #0
 8004e34:	db3d      	blt.n	8004eb2 <_dtoa_r+0x23a>
 8004e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e3c:	4453      	add	r3, sl
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	2300      	movs	r3, #0
 8004e42:	930a      	str	r3, [sp, #40]	; 0x28
 8004e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e46:	2b09      	cmp	r3, #9
 8004e48:	f200 808c 	bhi.w	8004f64 <_dtoa_r+0x2ec>
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	bfc4      	itt	gt
 8004e50:	3b04      	subgt	r3, #4
 8004e52:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e56:	bfc8      	it	gt
 8004e58:	2400      	movgt	r4, #0
 8004e5a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e5e:	bfd8      	it	le
 8004e60:	2401      	movle	r4, #1
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	f200 808a 	bhi.w	8004f7c <_dtoa_r+0x304>
 8004e68:	e8df f003 	tbb	[pc, r3]
 8004e6c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e74:	441c      	add	r4, r3
 8004e76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	bfc3      	ittte	gt
 8004e7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e86:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e8a:	f1c3 0320 	rsble	r3, r3, #32
 8004e8e:	bfc6      	itte	gt
 8004e90:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e94:	4318      	orrgt	r0, r3
 8004e96:	fa06 f003 	lslle.w	r0, r6, r3
 8004e9a:	f7fb fb57 	bl	800054c <__aeabi_ui2d>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004ea4:	3c01      	subs	r4, #1
 8004ea6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ea8:	e76f      	b.n	8004d8a <_dtoa_r+0x112>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e7b2      	b.n	8004e14 <_dtoa_r+0x19c>
 8004eae:	900f      	str	r0, [sp, #60]	; 0x3c
 8004eb0:	e7b1      	b.n	8004e16 <_dtoa_r+0x19e>
 8004eb2:	9b06      	ldr	r3, [sp, #24]
 8004eb4:	eba3 030a 	sub.w	r3, r3, sl
 8004eb8:	9306      	str	r3, [sp, #24]
 8004eba:	f1ca 0300 	rsb	r3, sl, #0
 8004ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ec4:	e7be      	b.n	8004e44 <_dtoa_r+0x1cc>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dc58      	bgt.n	8004f82 <_dtoa_r+0x30a>
 8004ed0:	f04f 0901 	mov.w	r9, #1
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004eda:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ede:	2200      	movs	r2, #0
 8004ee0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ee2:	6042      	str	r2, [r0, #4]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	f102 0614 	add.w	r6, r2, #20
 8004eea:	429e      	cmp	r6, r3
 8004eec:	6841      	ldr	r1, [r0, #4]
 8004eee:	d94e      	bls.n	8004f8e <_dtoa_r+0x316>
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 fcd7 	bl	80058a4 <_Balloc>
 8004ef6:	9003      	str	r0, [sp, #12]
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d14c      	bne.n	8004f96 <_dtoa_r+0x31e>
 8004efc:	4602      	mov	r2, r0
 8004efe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <_dtoa_r+0x2e8>)
 8004f04:	e6cc      	b.n	8004ca0 <_dtoa_r+0x28>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e7de      	b.n	8004ec8 <_dtoa_r+0x250>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f10:	eb0a 0903 	add.w	r9, sl, r3
 8004f14:	f109 0301 	add.w	r3, r9, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	9308      	str	r3, [sp, #32]
 8004f1c:	bfb8      	it	lt
 8004f1e:	2301      	movlt	r3, #1
 8004f20:	e7dd      	b.n	8004ede <_dtoa_r+0x266>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e7f2      	b.n	8004f0c <_dtoa_r+0x294>
 8004f26:	bf00      	nop
 8004f28:	636f4361 	.word	0x636f4361
 8004f2c:	3fd287a7 	.word	0x3fd287a7
 8004f30:	8b60c8b3 	.word	0x8b60c8b3
 8004f34:	3fc68a28 	.word	0x3fc68a28
 8004f38:	509f79fb 	.word	0x509f79fb
 8004f3c:	3fd34413 	.word	0x3fd34413
 8004f40:	0800ac7d 	.word	0x0800ac7d
 8004f44:	0800ac94 	.word	0x0800ac94
 8004f48:	7ff00000 	.word	0x7ff00000
 8004f4c:	0800ac79 	.word	0x0800ac79
 8004f50:	0800ac70 	.word	0x0800ac70
 8004f54:	0800ac4d 	.word	0x0800ac4d
 8004f58:	3ff80000 	.word	0x3ff80000
 8004f5c:	0800ad88 	.word	0x0800ad88
 8004f60:	0800acef 	.word	0x0800acef
 8004f64:	2401      	movs	r4, #1
 8004f66:	2300      	movs	r3, #0
 8004f68:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f6a:	9322      	str	r3, [sp, #136]	; 0x88
 8004f6c:	f04f 39ff 	mov.w	r9, #4294967295
 8004f70:	2200      	movs	r2, #0
 8004f72:	2312      	movs	r3, #18
 8004f74:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f78:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f7a:	e7b0      	b.n	8004ede <_dtoa_r+0x266>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f80:	e7f4      	b.n	8004f6c <_dtoa_r+0x2f4>
 8004f82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f86:	464b      	mov	r3, r9
 8004f88:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f8c:	e7a7      	b.n	8004ede <_dtoa_r+0x266>
 8004f8e:	3101      	adds	r1, #1
 8004f90:	6041      	str	r1, [r0, #4]
 8004f92:	0052      	lsls	r2, r2, #1
 8004f94:	e7a7      	b.n	8004ee6 <_dtoa_r+0x26e>
 8004f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f98:	9a03      	ldr	r2, [sp, #12]
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	9b08      	ldr	r3, [sp, #32]
 8004f9e:	2b0e      	cmp	r3, #14
 8004fa0:	f200 80a8 	bhi.w	80050f4 <_dtoa_r+0x47c>
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	f000 80a5 	beq.w	80050f4 <_dtoa_r+0x47c>
 8004faa:	f1ba 0f00 	cmp.w	sl, #0
 8004fae:	dd34      	ble.n	800501a <_dtoa_r+0x3a2>
 8004fb0:	4a9a      	ldr	r2, [pc, #616]	; (800521c <_dtoa_r+0x5a4>)
 8004fb2:	f00a 030f 	and.w	r3, sl, #15
 8004fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004fca:	d016      	beq.n	8004ffa <_dtoa_r+0x382>
 8004fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd0:	4b93      	ldr	r3, [pc, #588]	; (8005220 <_dtoa_r+0x5a8>)
 8004fd2:	2703      	movs	r7, #3
 8004fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fd8:	f7fb fc5c 	bl	8000894 <__aeabi_ddiv>
 8004fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fe0:	f004 040f 	and.w	r4, r4, #15
 8004fe4:	4e8e      	ldr	r6, [pc, #568]	; (8005220 <_dtoa_r+0x5a8>)
 8004fe6:	b954      	cbnz	r4, 8004ffe <_dtoa_r+0x386>
 8004fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff0:	f7fb fc50 	bl	8000894 <__aeabi_ddiv>
 8004ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff8:	e029      	b.n	800504e <_dtoa_r+0x3d6>
 8004ffa:	2702      	movs	r7, #2
 8004ffc:	e7f2      	b.n	8004fe4 <_dtoa_r+0x36c>
 8004ffe:	07e1      	lsls	r1, r4, #31
 8005000:	d508      	bpl.n	8005014 <_dtoa_r+0x39c>
 8005002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005006:	e9d6 2300 	ldrd	r2, r3, [r6]
 800500a:	f7fb fb19 	bl	8000640 <__aeabi_dmul>
 800500e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005012:	3701      	adds	r7, #1
 8005014:	1064      	asrs	r4, r4, #1
 8005016:	3608      	adds	r6, #8
 8005018:	e7e5      	b.n	8004fe6 <_dtoa_r+0x36e>
 800501a:	f000 80a5 	beq.w	8005168 <_dtoa_r+0x4f0>
 800501e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005022:	f1ca 0400 	rsb	r4, sl, #0
 8005026:	4b7d      	ldr	r3, [pc, #500]	; (800521c <_dtoa_r+0x5a4>)
 8005028:	f004 020f 	and.w	r2, r4, #15
 800502c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb fb04 	bl	8000640 <__aeabi_dmul>
 8005038:	2702      	movs	r7, #2
 800503a:	2300      	movs	r3, #0
 800503c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005040:	4e77      	ldr	r6, [pc, #476]	; (8005220 <_dtoa_r+0x5a8>)
 8005042:	1124      	asrs	r4, r4, #4
 8005044:	2c00      	cmp	r4, #0
 8005046:	f040 8084 	bne.w	8005152 <_dtoa_r+0x4da>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1d2      	bne.n	8004ff4 <_dtoa_r+0x37c>
 800504e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 808b 	beq.w	800516c <_dtoa_r+0x4f4>
 8005056:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800505a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800505e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005062:	2200      	movs	r2, #0
 8005064:	4b6f      	ldr	r3, [pc, #444]	; (8005224 <_dtoa_r+0x5ac>)
 8005066:	f7fb fd5d 	bl	8000b24 <__aeabi_dcmplt>
 800506a:	2800      	cmp	r0, #0
 800506c:	d07e      	beq.n	800516c <_dtoa_r+0x4f4>
 800506e:	9b08      	ldr	r3, [sp, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d07b      	beq.n	800516c <_dtoa_r+0x4f4>
 8005074:	f1b9 0f00 	cmp.w	r9, #0
 8005078:	dd38      	ble.n	80050ec <_dtoa_r+0x474>
 800507a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800507e:	2200      	movs	r2, #0
 8005080:	4b69      	ldr	r3, [pc, #420]	; (8005228 <_dtoa_r+0x5b0>)
 8005082:	f7fb fadd 	bl	8000640 <__aeabi_dmul>
 8005086:	464c      	mov	r4, r9
 8005088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800508c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005090:	3701      	adds	r7, #1
 8005092:	4638      	mov	r0, r7
 8005094:	f7fb fa6a 	bl	800056c <__aeabi_i2d>
 8005098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800509c:	f7fb fad0 	bl	8000640 <__aeabi_dmul>
 80050a0:	2200      	movs	r2, #0
 80050a2:	4b62      	ldr	r3, [pc, #392]	; (800522c <_dtoa_r+0x5b4>)
 80050a4:	f7fb f916 	bl	80002d4 <__adddf3>
 80050a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050b0:	9611      	str	r6, [sp, #68]	; 0x44
 80050b2:	2c00      	cmp	r4, #0
 80050b4:	d15d      	bne.n	8005172 <_dtoa_r+0x4fa>
 80050b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ba:	2200      	movs	r2, #0
 80050bc:	4b5c      	ldr	r3, [pc, #368]	; (8005230 <_dtoa_r+0x5b8>)
 80050be:	f7fb f907 	bl	80002d0 <__aeabi_dsub>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050ca:	4633      	mov	r3, r6
 80050cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ce:	f7fb fd47 	bl	8000b60 <__aeabi_dcmpgt>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f040 829c 	bne.w	8005610 <_dtoa_r+0x998>
 80050d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050e2:	f7fb fd1f 	bl	8000b24 <__aeabi_dcmplt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f040 8290 	bne.w	800560c <_dtoa_r+0x994>
 80050ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f2c0 8152 	blt.w	80053a0 <_dtoa_r+0x728>
 80050fc:	f1ba 0f0e 	cmp.w	sl, #14
 8005100:	f300 814e 	bgt.w	80053a0 <_dtoa_r+0x728>
 8005104:	4b45      	ldr	r3, [pc, #276]	; (800521c <_dtoa_r+0x5a4>)
 8005106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800510a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800510e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005114:	2b00      	cmp	r3, #0
 8005116:	f280 80db 	bge.w	80052d0 <_dtoa_r+0x658>
 800511a:	9b08      	ldr	r3, [sp, #32]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f300 80d7 	bgt.w	80052d0 <_dtoa_r+0x658>
 8005122:	f040 8272 	bne.w	800560a <_dtoa_r+0x992>
 8005126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800512a:	2200      	movs	r2, #0
 800512c:	4b40      	ldr	r3, [pc, #256]	; (8005230 <_dtoa_r+0x5b8>)
 800512e:	f7fb fa87 	bl	8000640 <__aeabi_dmul>
 8005132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005136:	f7fb fd09 	bl	8000b4c <__aeabi_dcmpge>
 800513a:	9c08      	ldr	r4, [sp, #32]
 800513c:	4626      	mov	r6, r4
 800513e:	2800      	cmp	r0, #0
 8005140:	f040 8248 	bne.w	80055d4 <_dtoa_r+0x95c>
 8005144:	2331      	movs	r3, #49	; 0x31
 8005146:	9f03      	ldr	r7, [sp, #12]
 8005148:	f10a 0a01 	add.w	sl, sl, #1
 800514c:	f807 3b01 	strb.w	r3, [r7], #1
 8005150:	e244      	b.n	80055dc <_dtoa_r+0x964>
 8005152:	07e2      	lsls	r2, r4, #31
 8005154:	d505      	bpl.n	8005162 <_dtoa_r+0x4ea>
 8005156:	e9d6 2300 	ldrd	r2, r3, [r6]
 800515a:	f7fb fa71 	bl	8000640 <__aeabi_dmul>
 800515e:	2301      	movs	r3, #1
 8005160:	3701      	adds	r7, #1
 8005162:	1064      	asrs	r4, r4, #1
 8005164:	3608      	adds	r6, #8
 8005166:	e76d      	b.n	8005044 <_dtoa_r+0x3cc>
 8005168:	2702      	movs	r7, #2
 800516a:	e770      	b.n	800504e <_dtoa_r+0x3d6>
 800516c:	46d0      	mov	r8, sl
 800516e:	9c08      	ldr	r4, [sp, #32]
 8005170:	e78f      	b.n	8005092 <_dtoa_r+0x41a>
 8005172:	9903      	ldr	r1, [sp, #12]
 8005174:	4b29      	ldr	r3, [pc, #164]	; (800521c <_dtoa_r+0x5a4>)
 8005176:	4421      	add	r1, r4
 8005178:	9112      	str	r1, [sp, #72]	; 0x48
 800517a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800517c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005180:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005184:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005188:	2900      	cmp	r1, #0
 800518a:	d055      	beq.n	8005238 <_dtoa_r+0x5c0>
 800518c:	2000      	movs	r0, #0
 800518e:	4929      	ldr	r1, [pc, #164]	; (8005234 <_dtoa_r+0x5bc>)
 8005190:	f7fb fb80 	bl	8000894 <__aeabi_ddiv>
 8005194:	463b      	mov	r3, r7
 8005196:	4632      	mov	r2, r6
 8005198:	f7fb f89a 	bl	80002d0 <__aeabi_dsub>
 800519c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051a0:	9f03      	ldr	r7, [sp, #12]
 80051a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051a6:	f7fb fcfb 	bl	8000ba0 <__aeabi_d2iz>
 80051aa:	4604      	mov	r4, r0
 80051ac:	f7fb f9de 	bl	800056c <__aeabi_i2d>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b8:	f7fb f88a 	bl	80002d0 <__aeabi_dsub>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	3430      	adds	r4, #48	; 0x30
 80051c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ca:	f807 4b01 	strb.w	r4, [r7], #1
 80051ce:	f7fb fca9 	bl	8000b24 <__aeabi_dcmplt>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d174      	bne.n	80052c0 <_dtoa_r+0x648>
 80051d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051da:	2000      	movs	r0, #0
 80051dc:	4911      	ldr	r1, [pc, #68]	; (8005224 <_dtoa_r+0x5ac>)
 80051de:	f7fb f877 	bl	80002d0 <__aeabi_dsub>
 80051e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051e6:	f7fb fc9d 	bl	8000b24 <__aeabi_dcmplt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	f040 80b7 	bne.w	800535e <_dtoa_r+0x6e6>
 80051f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051f2:	429f      	cmp	r7, r3
 80051f4:	f43f af7a 	beq.w	80050ec <_dtoa_r+0x474>
 80051f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051fc:	2200      	movs	r2, #0
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <_dtoa_r+0x5b0>)
 8005200:	f7fb fa1e 	bl	8000640 <__aeabi_dmul>
 8005204:	2200      	movs	r2, #0
 8005206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800520a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <_dtoa_r+0x5b0>)
 8005210:	f7fb fa16 	bl	8000640 <__aeabi_dmul>
 8005214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005218:	e7c3      	b.n	80051a2 <_dtoa_r+0x52a>
 800521a:	bf00      	nop
 800521c:	0800ad88 	.word	0x0800ad88
 8005220:	0800ad60 	.word	0x0800ad60
 8005224:	3ff00000 	.word	0x3ff00000
 8005228:	40240000 	.word	0x40240000
 800522c:	401c0000 	.word	0x401c0000
 8005230:	40140000 	.word	0x40140000
 8005234:	3fe00000 	.word	0x3fe00000
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	f7fb fa00 	bl	8000640 <__aeabi_dmul>
 8005240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005242:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005246:	9c03      	ldr	r4, [sp, #12]
 8005248:	9314      	str	r3, [sp, #80]	; 0x50
 800524a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800524e:	f7fb fca7 	bl	8000ba0 <__aeabi_d2iz>
 8005252:	9015      	str	r0, [sp, #84]	; 0x54
 8005254:	f7fb f98a 	bl	800056c <__aeabi_i2d>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005260:	f7fb f836 	bl	80002d0 <__aeabi_dsub>
 8005264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005266:	4606      	mov	r6, r0
 8005268:	3330      	adds	r3, #48	; 0x30
 800526a:	f804 3b01 	strb.w	r3, [r4], #1
 800526e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005270:	460f      	mov	r7, r1
 8005272:	429c      	cmp	r4, r3
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	d124      	bne.n	80052c4 <_dtoa_r+0x64c>
 800527a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800527e:	4bb0      	ldr	r3, [pc, #704]	; (8005540 <_dtoa_r+0x8c8>)
 8005280:	f7fb f828 	bl	80002d4 <__adddf3>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f7fb fc68 	bl	8000b60 <__aeabi_dcmpgt>
 8005290:	2800      	cmp	r0, #0
 8005292:	d163      	bne.n	800535c <_dtoa_r+0x6e4>
 8005294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005298:	2000      	movs	r0, #0
 800529a:	49a9      	ldr	r1, [pc, #676]	; (8005540 <_dtoa_r+0x8c8>)
 800529c:	f7fb f818 	bl	80002d0 <__aeabi_dsub>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4630      	mov	r0, r6
 80052a6:	4639      	mov	r1, r7
 80052a8:	f7fb fc3c 	bl	8000b24 <__aeabi_dcmplt>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f43f af1d 	beq.w	80050ec <_dtoa_r+0x474>
 80052b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052b4:	1e7b      	subs	r3, r7, #1
 80052b6:	9314      	str	r3, [sp, #80]	; 0x50
 80052b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d0f8      	beq.n	80052b2 <_dtoa_r+0x63a>
 80052c0:	46c2      	mov	sl, r8
 80052c2:	e03b      	b.n	800533c <_dtoa_r+0x6c4>
 80052c4:	4b9f      	ldr	r3, [pc, #636]	; (8005544 <_dtoa_r+0x8cc>)
 80052c6:	f7fb f9bb 	bl	8000640 <__aeabi_dmul>
 80052ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052ce:	e7bc      	b.n	800524a <_dtoa_r+0x5d2>
 80052d0:	9f03      	ldr	r7, [sp, #12]
 80052d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052da:	4640      	mov	r0, r8
 80052dc:	4649      	mov	r1, r9
 80052de:	f7fb fad9 	bl	8000894 <__aeabi_ddiv>
 80052e2:	f7fb fc5d 	bl	8000ba0 <__aeabi_d2iz>
 80052e6:	4604      	mov	r4, r0
 80052e8:	f7fb f940 	bl	800056c <__aeabi_i2d>
 80052ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052f0:	f7fb f9a6 	bl	8000640 <__aeabi_dmul>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fa ffe8 	bl	80002d0 <__aeabi_dsub>
 8005300:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005304:	f807 6b01 	strb.w	r6, [r7], #1
 8005308:	9e03      	ldr	r6, [sp, #12]
 800530a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800530e:	1bbe      	subs	r6, r7, r6
 8005310:	45b4      	cmp	ip, r6
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	d136      	bne.n	8005386 <_dtoa_r+0x70e>
 8005318:	f7fa ffdc 	bl	80002d4 <__adddf3>
 800531c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005320:	4680      	mov	r8, r0
 8005322:	4689      	mov	r9, r1
 8005324:	f7fb fc1c 	bl	8000b60 <__aeabi_dcmpgt>
 8005328:	bb58      	cbnz	r0, 8005382 <_dtoa_r+0x70a>
 800532a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800532e:	4640      	mov	r0, r8
 8005330:	4649      	mov	r1, r9
 8005332:	f7fb fbed 	bl	8000b10 <__aeabi_dcmpeq>
 8005336:	b108      	cbz	r0, 800533c <_dtoa_r+0x6c4>
 8005338:	07e1      	lsls	r1, r4, #31
 800533a:	d422      	bmi.n	8005382 <_dtoa_r+0x70a>
 800533c:	4628      	mov	r0, r5
 800533e:	4659      	mov	r1, fp
 8005340:	f000 faf0 	bl	8005924 <_Bfree>
 8005344:	2300      	movs	r3, #0
 8005346:	703b      	strb	r3, [r7, #0]
 8005348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800534a:	f10a 0001 	add.w	r0, sl, #1
 800534e:	6018      	str	r0, [r3, #0]
 8005350:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005352:	2b00      	cmp	r3, #0
 8005354:	f43f acde 	beq.w	8004d14 <_dtoa_r+0x9c>
 8005358:	601f      	str	r7, [r3, #0]
 800535a:	e4db      	b.n	8004d14 <_dtoa_r+0x9c>
 800535c:	4627      	mov	r7, r4
 800535e:	463b      	mov	r3, r7
 8005360:	461f      	mov	r7, r3
 8005362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005366:	2a39      	cmp	r2, #57	; 0x39
 8005368:	d107      	bne.n	800537a <_dtoa_r+0x702>
 800536a:	9a03      	ldr	r2, [sp, #12]
 800536c:	429a      	cmp	r2, r3
 800536e:	d1f7      	bne.n	8005360 <_dtoa_r+0x6e8>
 8005370:	2230      	movs	r2, #48	; 0x30
 8005372:	9903      	ldr	r1, [sp, #12]
 8005374:	f108 0801 	add.w	r8, r8, #1
 8005378:	700a      	strb	r2, [r1, #0]
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	3201      	adds	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	e79e      	b.n	80052c0 <_dtoa_r+0x648>
 8005382:	46d0      	mov	r8, sl
 8005384:	e7eb      	b.n	800535e <_dtoa_r+0x6e6>
 8005386:	2200      	movs	r2, #0
 8005388:	4b6e      	ldr	r3, [pc, #440]	; (8005544 <_dtoa_r+0x8cc>)
 800538a:	f7fb f959 	bl	8000640 <__aeabi_dmul>
 800538e:	2200      	movs	r2, #0
 8005390:	2300      	movs	r3, #0
 8005392:	4680      	mov	r8, r0
 8005394:	4689      	mov	r9, r1
 8005396:	f7fb fbbb 	bl	8000b10 <__aeabi_dcmpeq>
 800539a:	2800      	cmp	r0, #0
 800539c:	d09b      	beq.n	80052d6 <_dtoa_r+0x65e>
 800539e:	e7cd      	b.n	800533c <_dtoa_r+0x6c4>
 80053a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	f000 80d0 	beq.w	8005548 <_dtoa_r+0x8d0>
 80053a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053aa:	2a01      	cmp	r2, #1
 80053ac:	f300 80ae 	bgt.w	800550c <_dtoa_r+0x894>
 80053b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	f000 80a6 	beq.w	8005504 <_dtoa_r+0x88c>
 80053b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053be:	9f06      	ldr	r7, [sp, #24]
 80053c0:	9a06      	ldr	r2, [sp, #24]
 80053c2:	2101      	movs	r1, #1
 80053c4:	441a      	add	r2, r3
 80053c6:	9206      	str	r2, [sp, #24]
 80053c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ca:	4628      	mov	r0, r5
 80053cc:	441a      	add	r2, r3
 80053ce:	9209      	str	r2, [sp, #36]	; 0x24
 80053d0:	f000 fb5e 	bl	8005a90 <__i2b>
 80053d4:	4606      	mov	r6, r0
 80053d6:	2f00      	cmp	r7, #0
 80053d8:	dd0c      	ble.n	80053f4 <_dtoa_r+0x77c>
 80053da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dd09      	ble.n	80053f4 <_dtoa_r+0x77c>
 80053e0:	42bb      	cmp	r3, r7
 80053e2:	bfa8      	it	ge
 80053e4:	463b      	movge	r3, r7
 80053e6:	9a06      	ldr	r2, [sp, #24]
 80053e8:	1aff      	subs	r7, r7, r3
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	9206      	str	r2, [sp, #24]
 80053ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	9309      	str	r3, [sp, #36]	; 0x24
 80053f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f6:	b1f3      	cbz	r3, 8005436 <_dtoa_r+0x7be>
 80053f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a8 	beq.w	8005550 <_dtoa_r+0x8d8>
 8005400:	2c00      	cmp	r4, #0
 8005402:	dd10      	ble.n	8005426 <_dtoa_r+0x7ae>
 8005404:	4631      	mov	r1, r6
 8005406:	4622      	mov	r2, r4
 8005408:	4628      	mov	r0, r5
 800540a:	f000 fbff 	bl	8005c0c <__pow5mult>
 800540e:	465a      	mov	r2, fp
 8005410:	4601      	mov	r1, r0
 8005412:	4606      	mov	r6, r0
 8005414:	4628      	mov	r0, r5
 8005416:	f000 fb51 	bl	8005abc <__multiply>
 800541a:	4680      	mov	r8, r0
 800541c:	4659      	mov	r1, fp
 800541e:	4628      	mov	r0, r5
 8005420:	f000 fa80 	bl	8005924 <_Bfree>
 8005424:	46c3      	mov	fp, r8
 8005426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005428:	1b1a      	subs	r2, r3, r4
 800542a:	d004      	beq.n	8005436 <_dtoa_r+0x7be>
 800542c:	4659      	mov	r1, fp
 800542e:	4628      	mov	r0, r5
 8005430:	f000 fbec 	bl	8005c0c <__pow5mult>
 8005434:	4683      	mov	fp, r0
 8005436:	2101      	movs	r1, #1
 8005438:	4628      	mov	r0, r5
 800543a:	f000 fb29 	bl	8005a90 <__i2b>
 800543e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005440:	4604      	mov	r4, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	f340 8086 	ble.w	8005554 <_dtoa_r+0x8dc>
 8005448:	461a      	mov	r2, r3
 800544a:	4601      	mov	r1, r0
 800544c:	4628      	mov	r0, r5
 800544e:	f000 fbdd 	bl	8005c0c <__pow5mult>
 8005452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005454:	4604      	mov	r4, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	dd7f      	ble.n	800555a <_dtoa_r+0x8e2>
 800545a:	f04f 0800 	mov.w	r8, #0
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005464:	6918      	ldr	r0, [r3, #16]
 8005466:	f000 fac5 	bl	80059f4 <__hi0bits>
 800546a:	f1c0 0020 	rsb	r0, r0, #32
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	4418      	add	r0, r3
 8005472:	f010 001f 	ands.w	r0, r0, #31
 8005476:	f000 8092 	beq.w	800559e <_dtoa_r+0x926>
 800547a:	f1c0 0320 	rsb	r3, r0, #32
 800547e:	2b04      	cmp	r3, #4
 8005480:	f340 808a 	ble.w	8005598 <_dtoa_r+0x920>
 8005484:	f1c0 001c 	rsb	r0, r0, #28
 8005488:	9b06      	ldr	r3, [sp, #24]
 800548a:	4407      	add	r7, r0
 800548c:	4403      	add	r3, r0
 800548e:	9306      	str	r3, [sp, #24]
 8005490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005492:	4403      	add	r3, r0
 8005494:	9309      	str	r3, [sp, #36]	; 0x24
 8005496:	9b06      	ldr	r3, [sp, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dd05      	ble.n	80054a8 <_dtoa_r+0x830>
 800549c:	4659      	mov	r1, fp
 800549e:	461a      	mov	r2, r3
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 fc0d 	bl	8005cc0 <__lshift>
 80054a6:	4683      	mov	fp, r0
 80054a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dd05      	ble.n	80054ba <_dtoa_r+0x842>
 80054ae:	4621      	mov	r1, r4
 80054b0:	461a      	mov	r2, r3
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 fc04 	bl	8005cc0 <__lshift>
 80054b8:	4604      	mov	r4, r0
 80054ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d070      	beq.n	80055a2 <_dtoa_r+0x92a>
 80054c0:	4621      	mov	r1, r4
 80054c2:	4658      	mov	r0, fp
 80054c4:	f000 fc6c 	bl	8005da0 <__mcmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	da6a      	bge.n	80055a2 <_dtoa_r+0x92a>
 80054cc:	2300      	movs	r3, #0
 80054ce:	4659      	mov	r1, fp
 80054d0:	220a      	movs	r2, #10
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fa48 	bl	8005968 <__multadd>
 80054d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054da:	4683      	mov	fp, r0
 80054dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8194 	beq.w	800580e <_dtoa_r+0xb96>
 80054e6:	4631      	mov	r1, r6
 80054e8:	2300      	movs	r3, #0
 80054ea:	220a      	movs	r2, #10
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 fa3b 	bl	8005968 <__multadd>
 80054f2:	f1b9 0f00 	cmp.w	r9, #0
 80054f6:	4606      	mov	r6, r0
 80054f8:	f300 8093 	bgt.w	8005622 <_dtoa_r+0x9aa>
 80054fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054fe:	2b02      	cmp	r3, #2
 8005500:	dc57      	bgt.n	80055b2 <_dtoa_r+0x93a>
 8005502:	e08e      	b.n	8005622 <_dtoa_r+0x9aa>
 8005504:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800550a:	e757      	b.n	80053bc <_dtoa_r+0x744>
 800550c:	9b08      	ldr	r3, [sp, #32]
 800550e:	1e5c      	subs	r4, r3, #1
 8005510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005512:	42a3      	cmp	r3, r4
 8005514:	bfb7      	itett	lt
 8005516:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005518:	1b1c      	subge	r4, r3, r4
 800551a:	1ae2      	sublt	r2, r4, r3
 800551c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800551e:	bfbe      	ittt	lt
 8005520:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005522:	189b      	addlt	r3, r3, r2
 8005524:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005526:	9b08      	ldr	r3, [sp, #32]
 8005528:	bfb8      	it	lt
 800552a:	2400      	movlt	r4, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	bfbb      	ittet	lt
 8005530:	9b06      	ldrlt	r3, [sp, #24]
 8005532:	9a08      	ldrlt	r2, [sp, #32]
 8005534:	9f06      	ldrge	r7, [sp, #24]
 8005536:	1a9f      	sublt	r7, r3, r2
 8005538:	bfac      	ite	ge
 800553a:	9b08      	ldrge	r3, [sp, #32]
 800553c:	2300      	movlt	r3, #0
 800553e:	e73f      	b.n	80053c0 <_dtoa_r+0x748>
 8005540:	3fe00000 	.word	0x3fe00000
 8005544:	40240000 	.word	0x40240000
 8005548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800554a:	9f06      	ldr	r7, [sp, #24]
 800554c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800554e:	e742      	b.n	80053d6 <_dtoa_r+0x75e>
 8005550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005552:	e76b      	b.n	800542c <_dtoa_r+0x7b4>
 8005554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005556:	2b01      	cmp	r3, #1
 8005558:	dc19      	bgt.n	800558e <_dtoa_r+0x916>
 800555a:	9b04      	ldr	r3, [sp, #16]
 800555c:	b9bb      	cbnz	r3, 800558e <_dtoa_r+0x916>
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005564:	b99b      	cbnz	r3, 800558e <_dtoa_r+0x916>
 8005566:	9b05      	ldr	r3, [sp, #20]
 8005568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800556c:	0d1b      	lsrs	r3, r3, #20
 800556e:	051b      	lsls	r3, r3, #20
 8005570:	b183      	cbz	r3, 8005594 <_dtoa_r+0x91c>
 8005572:	f04f 0801 	mov.w	r8, #1
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	3301      	adds	r3, #1
 800557a:	9306      	str	r3, [sp, #24]
 800557c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557e:	3301      	adds	r3, #1
 8005580:	9309      	str	r3, [sp, #36]	; 0x24
 8005582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f af6a 	bne.w	800545e <_dtoa_r+0x7e6>
 800558a:	2001      	movs	r0, #1
 800558c:	e76f      	b.n	800546e <_dtoa_r+0x7f6>
 800558e:	f04f 0800 	mov.w	r8, #0
 8005592:	e7f6      	b.n	8005582 <_dtoa_r+0x90a>
 8005594:	4698      	mov	r8, r3
 8005596:	e7f4      	b.n	8005582 <_dtoa_r+0x90a>
 8005598:	f43f af7d 	beq.w	8005496 <_dtoa_r+0x81e>
 800559c:	4618      	mov	r0, r3
 800559e:	301c      	adds	r0, #28
 80055a0:	e772      	b.n	8005488 <_dtoa_r+0x810>
 80055a2:	9b08      	ldr	r3, [sp, #32]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dc36      	bgt.n	8005616 <_dtoa_r+0x99e>
 80055a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	dd33      	ble.n	8005616 <_dtoa_r+0x99e>
 80055ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055b2:	f1b9 0f00 	cmp.w	r9, #0
 80055b6:	d10d      	bne.n	80055d4 <_dtoa_r+0x95c>
 80055b8:	4621      	mov	r1, r4
 80055ba:	464b      	mov	r3, r9
 80055bc:	2205      	movs	r2, #5
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 f9d2 	bl	8005968 <__multadd>
 80055c4:	4601      	mov	r1, r0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4658      	mov	r0, fp
 80055ca:	f000 fbe9 	bl	8005da0 <__mcmp>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f73f adb8 	bgt.w	8005144 <_dtoa_r+0x4cc>
 80055d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055d6:	9f03      	ldr	r7, [sp, #12]
 80055d8:	ea6f 0a03 	mvn.w	sl, r3
 80055dc:	f04f 0800 	mov.w	r8, #0
 80055e0:	4621      	mov	r1, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f99e 	bl	8005924 <_Bfree>
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	f43f aea7 	beq.w	800533c <_dtoa_r+0x6c4>
 80055ee:	f1b8 0f00 	cmp.w	r8, #0
 80055f2:	d005      	beq.n	8005600 <_dtoa_r+0x988>
 80055f4:	45b0      	cmp	r8, r6
 80055f6:	d003      	beq.n	8005600 <_dtoa_r+0x988>
 80055f8:	4641      	mov	r1, r8
 80055fa:	4628      	mov	r0, r5
 80055fc:	f000 f992 	bl	8005924 <_Bfree>
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	f000 f98e 	bl	8005924 <_Bfree>
 8005608:	e698      	b.n	800533c <_dtoa_r+0x6c4>
 800560a:	2400      	movs	r4, #0
 800560c:	4626      	mov	r6, r4
 800560e:	e7e1      	b.n	80055d4 <_dtoa_r+0x95c>
 8005610:	46c2      	mov	sl, r8
 8005612:	4626      	mov	r6, r4
 8005614:	e596      	b.n	8005144 <_dtoa_r+0x4cc>
 8005616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80fd 	beq.w	800581c <_dtoa_r+0xba4>
 8005622:	2f00      	cmp	r7, #0
 8005624:	dd05      	ble.n	8005632 <_dtoa_r+0x9ba>
 8005626:	4631      	mov	r1, r6
 8005628:	463a      	mov	r2, r7
 800562a:	4628      	mov	r0, r5
 800562c:	f000 fb48 	bl	8005cc0 <__lshift>
 8005630:	4606      	mov	r6, r0
 8005632:	f1b8 0f00 	cmp.w	r8, #0
 8005636:	d05c      	beq.n	80056f2 <_dtoa_r+0xa7a>
 8005638:	4628      	mov	r0, r5
 800563a:	6871      	ldr	r1, [r6, #4]
 800563c:	f000 f932 	bl	80058a4 <_Balloc>
 8005640:	4607      	mov	r7, r0
 8005642:	b928      	cbnz	r0, 8005650 <_dtoa_r+0x9d8>
 8005644:	4602      	mov	r2, r0
 8005646:	f240 21ea 	movw	r1, #746	; 0x2ea
 800564a:	4b7f      	ldr	r3, [pc, #508]	; (8005848 <_dtoa_r+0xbd0>)
 800564c:	f7ff bb28 	b.w	8004ca0 <_dtoa_r+0x28>
 8005650:	6932      	ldr	r2, [r6, #16]
 8005652:	f106 010c 	add.w	r1, r6, #12
 8005656:	3202      	adds	r2, #2
 8005658:	0092      	lsls	r2, r2, #2
 800565a:	300c      	adds	r0, #12
 800565c:	f000 f914 	bl	8005888 <memcpy>
 8005660:	2201      	movs	r2, #1
 8005662:	4639      	mov	r1, r7
 8005664:	4628      	mov	r0, r5
 8005666:	f000 fb2b 	bl	8005cc0 <__lshift>
 800566a:	46b0      	mov	r8, r6
 800566c:	4606      	mov	r6, r0
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	9308      	str	r3, [sp, #32]
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	444b      	add	r3, r9
 8005678:	930a      	str	r3, [sp, #40]	; 0x28
 800567a:	9b04      	ldr	r3, [sp, #16]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	9309      	str	r3, [sp, #36]	; 0x24
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	4621      	mov	r1, r4
 8005686:	3b01      	subs	r3, #1
 8005688:	4658      	mov	r0, fp
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	f7ff fa66 	bl	8004b5c <quorem>
 8005690:	4603      	mov	r3, r0
 8005692:	4641      	mov	r1, r8
 8005694:	3330      	adds	r3, #48	; 0x30
 8005696:	9006      	str	r0, [sp, #24]
 8005698:	4658      	mov	r0, fp
 800569a:	930b      	str	r3, [sp, #44]	; 0x2c
 800569c:	f000 fb80 	bl	8005da0 <__mcmp>
 80056a0:	4632      	mov	r2, r6
 80056a2:	4681      	mov	r9, r0
 80056a4:	4621      	mov	r1, r4
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 fb96 	bl	8005dd8 <__mdiff>
 80056ac:	68c2      	ldr	r2, [r0, #12]
 80056ae:	4607      	mov	r7, r0
 80056b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b2:	bb02      	cbnz	r2, 80056f6 <_dtoa_r+0xa7e>
 80056b4:	4601      	mov	r1, r0
 80056b6:	4658      	mov	r0, fp
 80056b8:	f000 fb72 	bl	8005da0 <__mcmp>
 80056bc:	4602      	mov	r2, r0
 80056be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c0:	4639      	mov	r1, r7
 80056c2:	4628      	mov	r0, r5
 80056c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056c8:	f000 f92c 	bl	8005924 <_Bfree>
 80056cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056d0:	9f08      	ldr	r7, [sp, #32]
 80056d2:	ea43 0102 	orr.w	r1, r3, r2
 80056d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d8:	430b      	orrs	r3, r1
 80056da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056dc:	d10d      	bne.n	80056fa <_dtoa_r+0xa82>
 80056de:	2b39      	cmp	r3, #57	; 0x39
 80056e0:	d029      	beq.n	8005736 <_dtoa_r+0xabe>
 80056e2:	f1b9 0f00 	cmp.w	r9, #0
 80056e6:	dd01      	ble.n	80056ec <_dtoa_r+0xa74>
 80056e8:	9b06      	ldr	r3, [sp, #24]
 80056ea:	3331      	adds	r3, #49	; 0x31
 80056ec:	9a04      	ldr	r2, [sp, #16]
 80056ee:	7013      	strb	r3, [r2, #0]
 80056f0:	e776      	b.n	80055e0 <_dtoa_r+0x968>
 80056f2:	4630      	mov	r0, r6
 80056f4:	e7b9      	b.n	800566a <_dtoa_r+0x9f2>
 80056f6:	2201      	movs	r2, #1
 80056f8:	e7e2      	b.n	80056c0 <_dtoa_r+0xa48>
 80056fa:	f1b9 0f00 	cmp.w	r9, #0
 80056fe:	db06      	blt.n	800570e <_dtoa_r+0xa96>
 8005700:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005702:	ea41 0909 	orr.w	r9, r1, r9
 8005706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005708:	ea59 0101 	orrs.w	r1, r9, r1
 800570c:	d120      	bne.n	8005750 <_dtoa_r+0xad8>
 800570e:	2a00      	cmp	r2, #0
 8005710:	ddec      	ble.n	80056ec <_dtoa_r+0xa74>
 8005712:	4659      	mov	r1, fp
 8005714:	2201      	movs	r2, #1
 8005716:	4628      	mov	r0, r5
 8005718:	9308      	str	r3, [sp, #32]
 800571a:	f000 fad1 	bl	8005cc0 <__lshift>
 800571e:	4621      	mov	r1, r4
 8005720:	4683      	mov	fp, r0
 8005722:	f000 fb3d 	bl	8005da0 <__mcmp>
 8005726:	2800      	cmp	r0, #0
 8005728:	9b08      	ldr	r3, [sp, #32]
 800572a:	dc02      	bgt.n	8005732 <_dtoa_r+0xaba>
 800572c:	d1de      	bne.n	80056ec <_dtoa_r+0xa74>
 800572e:	07da      	lsls	r2, r3, #31
 8005730:	d5dc      	bpl.n	80056ec <_dtoa_r+0xa74>
 8005732:	2b39      	cmp	r3, #57	; 0x39
 8005734:	d1d8      	bne.n	80056e8 <_dtoa_r+0xa70>
 8005736:	2339      	movs	r3, #57	; 0x39
 8005738:	9a04      	ldr	r2, [sp, #16]
 800573a:	7013      	strb	r3, [r2, #0]
 800573c:	463b      	mov	r3, r7
 800573e:	461f      	mov	r7, r3
 8005740:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005744:	3b01      	subs	r3, #1
 8005746:	2a39      	cmp	r2, #57	; 0x39
 8005748:	d050      	beq.n	80057ec <_dtoa_r+0xb74>
 800574a:	3201      	adds	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e747      	b.n	80055e0 <_dtoa_r+0x968>
 8005750:	2a00      	cmp	r2, #0
 8005752:	dd03      	ble.n	800575c <_dtoa_r+0xae4>
 8005754:	2b39      	cmp	r3, #57	; 0x39
 8005756:	d0ee      	beq.n	8005736 <_dtoa_r+0xabe>
 8005758:	3301      	adds	r3, #1
 800575a:	e7c7      	b.n	80056ec <_dtoa_r+0xa74>
 800575c:	9a08      	ldr	r2, [sp, #32]
 800575e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005760:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005764:	428a      	cmp	r2, r1
 8005766:	d02a      	beq.n	80057be <_dtoa_r+0xb46>
 8005768:	4659      	mov	r1, fp
 800576a:	2300      	movs	r3, #0
 800576c:	220a      	movs	r2, #10
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f8fa 	bl	8005968 <__multadd>
 8005774:	45b0      	cmp	r8, r6
 8005776:	4683      	mov	fp, r0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	f04f 020a 	mov.w	r2, #10
 8005780:	4641      	mov	r1, r8
 8005782:	4628      	mov	r0, r5
 8005784:	d107      	bne.n	8005796 <_dtoa_r+0xb1e>
 8005786:	f000 f8ef 	bl	8005968 <__multadd>
 800578a:	4680      	mov	r8, r0
 800578c:	4606      	mov	r6, r0
 800578e:	9b08      	ldr	r3, [sp, #32]
 8005790:	3301      	adds	r3, #1
 8005792:	9308      	str	r3, [sp, #32]
 8005794:	e775      	b.n	8005682 <_dtoa_r+0xa0a>
 8005796:	f000 f8e7 	bl	8005968 <__multadd>
 800579a:	4631      	mov	r1, r6
 800579c:	4680      	mov	r8, r0
 800579e:	2300      	movs	r3, #0
 80057a0:	220a      	movs	r2, #10
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f8e0 	bl	8005968 <__multadd>
 80057a8:	4606      	mov	r6, r0
 80057aa:	e7f0      	b.n	800578e <_dtoa_r+0xb16>
 80057ac:	f1b9 0f00 	cmp.w	r9, #0
 80057b0:	bfcc      	ite	gt
 80057b2:	464f      	movgt	r7, r9
 80057b4:	2701      	movle	r7, #1
 80057b6:	f04f 0800 	mov.w	r8, #0
 80057ba:	9a03      	ldr	r2, [sp, #12]
 80057bc:	4417      	add	r7, r2
 80057be:	4659      	mov	r1, fp
 80057c0:	2201      	movs	r2, #1
 80057c2:	4628      	mov	r0, r5
 80057c4:	9308      	str	r3, [sp, #32]
 80057c6:	f000 fa7b 	bl	8005cc0 <__lshift>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4683      	mov	fp, r0
 80057ce:	f000 fae7 	bl	8005da0 <__mcmp>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	dcb2      	bgt.n	800573c <_dtoa_r+0xac4>
 80057d6:	d102      	bne.n	80057de <_dtoa_r+0xb66>
 80057d8:	9b08      	ldr	r3, [sp, #32]
 80057da:	07db      	lsls	r3, r3, #31
 80057dc:	d4ae      	bmi.n	800573c <_dtoa_r+0xac4>
 80057de:	463b      	mov	r3, r7
 80057e0:	461f      	mov	r7, r3
 80057e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057e6:	2a30      	cmp	r2, #48	; 0x30
 80057e8:	d0fa      	beq.n	80057e0 <_dtoa_r+0xb68>
 80057ea:	e6f9      	b.n	80055e0 <_dtoa_r+0x968>
 80057ec:	9a03      	ldr	r2, [sp, #12]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d1a5      	bne.n	800573e <_dtoa_r+0xac6>
 80057f2:	2331      	movs	r3, #49	; 0x31
 80057f4:	f10a 0a01 	add.w	sl, sl, #1
 80057f8:	e779      	b.n	80056ee <_dtoa_r+0xa76>
 80057fa:	4b14      	ldr	r3, [pc, #80]	; (800584c <_dtoa_r+0xbd4>)
 80057fc:	f7ff baa8 	b.w	8004d50 <_dtoa_r+0xd8>
 8005800:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005802:	2b00      	cmp	r3, #0
 8005804:	f47f aa81 	bne.w	8004d0a <_dtoa_r+0x92>
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <_dtoa_r+0xbd8>)
 800580a:	f7ff baa1 	b.w	8004d50 <_dtoa_r+0xd8>
 800580e:	f1b9 0f00 	cmp.w	r9, #0
 8005812:	dc03      	bgt.n	800581c <_dtoa_r+0xba4>
 8005814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005816:	2b02      	cmp	r3, #2
 8005818:	f73f aecb 	bgt.w	80055b2 <_dtoa_r+0x93a>
 800581c:	9f03      	ldr	r7, [sp, #12]
 800581e:	4621      	mov	r1, r4
 8005820:	4658      	mov	r0, fp
 8005822:	f7ff f99b 	bl	8004b5c <quorem>
 8005826:	9a03      	ldr	r2, [sp, #12]
 8005828:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800582c:	f807 3b01 	strb.w	r3, [r7], #1
 8005830:	1aba      	subs	r2, r7, r2
 8005832:	4591      	cmp	r9, r2
 8005834:	ddba      	ble.n	80057ac <_dtoa_r+0xb34>
 8005836:	4659      	mov	r1, fp
 8005838:	2300      	movs	r3, #0
 800583a:	220a      	movs	r2, #10
 800583c:	4628      	mov	r0, r5
 800583e:	f000 f893 	bl	8005968 <__multadd>
 8005842:	4683      	mov	fp, r0
 8005844:	e7eb      	b.n	800581e <_dtoa_r+0xba6>
 8005846:	bf00      	nop
 8005848:	0800acef 	.word	0x0800acef
 800584c:	0800ac4c 	.word	0x0800ac4c
 8005850:	0800ac70 	.word	0x0800ac70

08005854 <_localeconv_r>:
 8005854:	4800      	ldr	r0, [pc, #0]	; (8005858 <_localeconv_r+0x4>)
 8005856:	4770      	bx	lr
 8005858:	20001164 	.word	0x20001164

0800585c <malloc>:
 800585c:	4b02      	ldr	r3, [pc, #8]	; (8005868 <malloc+0xc>)
 800585e:	4601      	mov	r1, r0
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f000 bc1d 	b.w	80060a0 <_malloc_r>
 8005866:	bf00      	nop
 8005868:	20001010 	.word	0x20001010

0800586c <memchr>:
 800586c:	4603      	mov	r3, r0
 800586e:	b510      	push	{r4, lr}
 8005870:	b2c9      	uxtb	r1, r1
 8005872:	4402      	add	r2, r0
 8005874:	4293      	cmp	r3, r2
 8005876:	4618      	mov	r0, r3
 8005878:	d101      	bne.n	800587e <memchr+0x12>
 800587a:	2000      	movs	r0, #0
 800587c:	e003      	b.n	8005886 <memchr+0x1a>
 800587e:	7804      	ldrb	r4, [r0, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	428c      	cmp	r4, r1
 8005884:	d1f6      	bne.n	8005874 <memchr+0x8>
 8005886:	bd10      	pop	{r4, pc}

08005888 <memcpy>:
 8005888:	440a      	add	r2, r1
 800588a:	4291      	cmp	r1, r2
 800588c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005890:	d100      	bne.n	8005894 <memcpy+0xc>
 8005892:	4770      	bx	lr
 8005894:	b510      	push	{r4, lr}
 8005896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800589a:	4291      	cmp	r1, r2
 800589c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a0:	d1f9      	bne.n	8005896 <memcpy+0xe>
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <_Balloc>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058a8:	4604      	mov	r4, r0
 80058aa:	460d      	mov	r5, r1
 80058ac:	b976      	cbnz	r6, 80058cc <_Balloc+0x28>
 80058ae:	2010      	movs	r0, #16
 80058b0:	f7ff ffd4 	bl	800585c <malloc>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6260      	str	r0, [r4, #36]	; 0x24
 80058b8:	b920      	cbnz	r0, 80058c4 <_Balloc+0x20>
 80058ba:	2166      	movs	r1, #102	; 0x66
 80058bc:	4b17      	ldr	r3, [pc, #92]	; (800591c <_Balloc+0x78>)
 80058be:	4818      	ldr	r0, [pc, #96]	; (8005920 <_Balloc+0x7c>)
 80058c0:	f000 fc72 	bl	80061a8 <__assert_func>
 80058c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058c8:	6006      	str	r6, [r0, #0]
 80058ca:	60c6      	str	r6, [r0, #12]
 80058cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058ce:	68f3      	ldr	r3, [r6, #12]
 80058d0:	b183      	cbz	r3, 80058f4 <_Balloc+0x50>
 80058d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058da:	b9b8      	cbnz	r0, 800590c <_Balloc+0x68>
 80058dc:	2101      	movs	r1, #1
 80058de:	fa01 f605 	lsl.w	r6, r1, r5
 80058e2:	1d72      	adds	r2, r6, #5
 80058e4:	4620      	mov	r0, r4
 80058e6:	0092      	lsls	r2, r2, #2
 80058e8:	f000 fb5e 	bl	8005fa8 <_calloc_r>
 80058ec:	b160      	cbz	r0, 8005908 <_Balloc+0x64>
 80058ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058f2:	e00e      	b.n	8005912 <_Balloc+0x6e>
 80058f4:	2221      	movs	r2, #33	; 0x21
 80058f6:	2104      	movs	r1, #4
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fb55 	bl	8005fa8 <_calloc_r>
 80058fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005900:	60f0      	str	r0, [r6, #12]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e4      	bne.n	80058d2 <_Balloc+0x2e>
 8005908:	2000      	movs	r0, #0
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	6802      	ldr	r2, [r0, #0]
 800590e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005912:	2300      	movs	r3, #0
 8005914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005918:	e7f7      	b.n	800590a <_Balloc+0x66>
 800591a:	bf00      	nop
 800591c:	0800ac7d 	.word	0x0800ac7d
 8005920:	0800ad00 	.word	0x0800ad00

08005924 <_Bfree>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005928:	4605      	mov	r5, r0
 800592a:	460c      	mov	r4, r1
 800592c:	b976      	cbnz	r6, 800594c <_Bfree+0x28>
 800592e:	2010      	movs	r0, #16
 8005930:	f7ff ff94 	bl	800585c <malloc>
 8005934:	4602      	mov	r2, r0
 8005936:	6268      	str	r0, [r5, #36]	; 0x24
 8005938:	b920      	cbnz	r0, 8005944 <_Bfree+0x20>
 800593a:	218a      	movs	r1, #138	; 0x8a
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <_Bfree+0x3c>)
 800593e:	4809      	ldr	r0, [pc, #36]	; (8005964 <_Bfree+0x40>)
 8005940:	f000 fc32 	bl	80061a8 <__assert_func>
 8005944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005948:	6006      	str	r6, [r0, #0]
 800594a:	60c6      	str	r6, [r0, #12]
 800594c:	b13c      	cbz	r4, 800595e <_Bfree+0x3a>
 800594e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005950:	6862      	ldr	r2, [r4, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005958:	6021      	str	r1, [r4, #0]
 800595a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	0800ac7d 	.word	0x0800ac7d
 8005964:	0800ad00 	.word	0x0800ad00

08005968 <__multadd>:
 8005968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596c:	4607      	mov	r7, r0
 800596e:	460c      	mov	r4, r1
 8005970:	461e      	mov	r6, r3
 8005972:	2000      	movs	r0, #0
 8005974:	690d      	ldr	r5, [r1, #16]
 8005976:	f101 0c14 	add.w	ip, r1, #20
 800597a:	f8dc 3000 	ldr.w	r3, [ip]
 800597e:	3001      	adds	r0, #1
 8005980:	b299      	uxth	r1, r3
 8005982:	fb02 6101 	mla	r1, r2, r1, r6
 8005986:	0c1e      	lsrs	r6, r3, #16
 8005988:	0c0b      	lsrs	r3, r1, #16
 800598a:	fb02 3306 	mla	r3, r2, r6, r3
 800598e:	b289      	uxth	r1, r1
 8005990:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005994:	4285      	cmp	r5, r0
 8005996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800599a:	f84c 1b04 	str.w	r1, [ip], #4
 800599e:	dcec      	bgt.n	800597a <__multadd+0x12>
 80059a0:	b30e      	cbz	r6, 80059e6 <__multadd+0x7e>
 80059a2:	68a3      	ldr	r3, [r4, #8]
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	dc19      	bgt.n	80059dc <__multadd+0x74>
 80059a8:	6861      	ldr	r1, [r4, #4]
 80059aa:	4638      	mov	r0, r7
 80059ac:	3101      	adds	r1, #1
 80059ae:	f7ff ff79 	bl	80058a4 <_Balloc>
 80059b2:	4680      	mov	r8, r0
 80059b4:	b928      	cbnz	r0, 80059c2 <__multadd+0x5a>
 80059b6:	4602      	mov	r2, r0
 80059b8:	21b5      	movs	r1, #181	; 0xb5
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <__multadd+0x84>)
 80059bc:	480c      	ldr	r0, [pc, #48]	; (80059f0 <__multadd+0x88>)
 80059be:	f000 fbf3 	bl	80061a8 <__assert_func>
 80059c2:	6922      	ldr	r2, [r4, #16]
 80059c4:	f104 010c 	add.w	r1, r4, #12
 80059c8:	3202      	adds	r2, #2
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	300c      	adds	r0, #12
 80059ce:	f7ff ff5b 	bl	8005888 <memcpy>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4638      	mov	r0, r7
 80059d6:	f7ff ffa5 	bl	8005924 <_Bfree>
 80059da:	4644      	mov	r4, r8
 80059dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059e0:	3501      	adds	r5, #1
 80059e2:	615e      	str	r6, [r3, #20]
 80059e4:	6125      	str	r5, [r4, #16]
 80059e6:	4620      	mov	r0, r4
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ec:	0800acef 	.word	0x0800acef
 80059f0:	0800ad00 	.word	0x0800ad00

080059f4 <__hi0bits>:
 80059f4:	0c02      	lsrs	r2, r0, #16
 80059f6:	0412      	lsls	r2, r2, #16
 80059f8:	4603      	mov	r3, r0
 80059fa:	b9ca      	cbnz	r2, 8005a30 <__hi0bits+0x3c>
 80059fc:	0403      	lsls	r3, r0, #16
 80059fe:	2010      	movs	r0, #16
 8005a00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a04:	bf04      	itt	eq
 8005a06:	021b      	lsleq	r3, r3, #8
 8005a08:	3008      	addeq	r0, #8
 8005a0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a0e:	bf04      	itt	eq
 8005a10:	011b      	lsleq	r3, r3, #4
 8005a12:	3004      	addeq	r0, #4
 8005a14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a18:	bf04      	itt	eq
 8005a1a:	009b      	lsleq	r3, r3, #2
 8005a1c:	3002      	addeq	r0, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db05      	blt.n	8005a2e <__hi0bits+0x3a>
 8005a22:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a26:	f100 0001 	add.w	r0, r0, #1
 8005a2a:	bf08      	it	eq
 8005a2c:	2020      	moveq	r0, #32
 8005a2e:	4770      	bx	lr
 8005a30:	2000      	movs	r0, #0
 8005a32:	e7e5      	b.n	8005a00 <__hi0bits+0xc>

08005a34 <__lo0bits>:
 8005a34:	6803      	ldr	r3, [r0, #0]
 8005a36:	4602      	mov	r2, r0
 8005a38:	f013 0007 	ands.w	r0, r3, #7
 8005a3c:	d00b      	beq.n	8005a56 <__lo0bits+0x22>
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d421      	bmi.n	8005a86 <__lo0bits+0x52>
 8005a42:	0798      	lsls	r0, r3, #30
 8005a44:	bf49      	itett	mi
 8005a46:	085b      	lsrmi	r3, r3, #1
 8005a48:	089b      	lsrpl	r3, r3, #2
 8005a4a:	2001      	movmi	r0, #1
 8005a4c:	6013      	strmi	r3, [r2, #0]
 8005a4e:	bf5c      	itt	pl
 8005a50:	2002      	movpl	r0, #2
 8005a52:	6013      	strpl	r3, [r2, #0]
 8005a54:	4770      	bx	lr
 8005a56:	b299      	uxth	r1, r3
 8005a58:	b909      	cbnz	r1, 8005a5e <__lo0bits+0x2a>
 8005a5a:	2010      	movs	r0, #16
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	b2d9      	uxtb	r1, r3
 8005a60:	b909      	cbnz	r1, 8005a66 <__lo0bits+0x32>
 8005a62:	3008      	adds	r0, #8
 8005a64:	0a1b      	lsrs	r3, r3, #8
 8005a66:	0719      	lsls	r1, r3, #28
 8005a68:	bf04      	itt	eq
 8005a6a:	091b      	lsreq	r3, r3, #4
 8005a6c:	3004      	addeq	r0, #4
 8005a6e:	0799      	lsls	r1, r3, #30
 8005a70:	bf04      	itt	eq
 8005a72:	089b      	lsreq	r3, r3, #2
 8005a74:	3002      	addeq	r0, #2
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	d403      	bmi.n	8005a82 <__lo0bits+0x4e>
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	f100 0001 	add.w	r0, r0, #1
 8005a80:	d003      	beq.n	8005a8a <__lo0bits+0x56>
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	4770      	bx	lr
 8005a86:	2000      	movs	r0, #0
 8005a88:	4770      	bx	lr
 8005a8a:	2020      	movs	r0, #32
 8005a8c:	4770      	bx	lr
	...

08005a90 <__i2b>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	460c      	mov	r4, r1
 8005a94:	2101      	movs	r1, #1
 8005a96:	f7ff ff05 	bl	80058a4 <_Balloc>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	b928      	cbnz	r0, 8005aaa <__i2b+0x1a>
 8005a9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <__i2b+0x24>)
 8005aa4:	4804      	ldr	r0, [pc, #16]	; (8005ab8 <__i2b+0x28>)
 8005aa6:	f000 fb7f 	bl	80061a8 <__assert_func>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	6144      	str	r4, [r0, #20]
 8005aae:	6103      	str	r3, [r0, #16]
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	bf00      	nop
 8005ab4:	0800acef 	.word	0x0800acef
 8005ab8:	0800ad00 	.word	0x0800ad00

08005abc <__multiply>:
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	4691      	mov	r9, r2
 8005ac2:	690a      	ldr	r2, [r1, #16]
 8005ac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ac8:	460c      	mov	r4, r1
 8005aca:	429a      	cmp	r2, r3
 8005acc:	bfbe      	ittt	lt
 8005ace:	460b      	movlt	r3, r1
 8005ad0:	464c      	movlt	r4, r9
 8005ad2:	4699      	movlt	r9, r3
 8005ad4:	6927      	ldr	r7, [r4, #16]
 8005ad6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	6861      	ldr	r1, [r4, #4]
 8005ade:	eb07 060a 	add.w	r6, r7, sl
 8005ae2:	42b3      	cmp	r3, r6
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	bfb8      	it	lt
 8005ae8:	3101      	addlt	r1, #1
 8005aea:	f7ff fedb 	bl	80058a4 <_Balloc>
 8005aee:	b930      	cbnz	r0, 8005afe <__multiply+0x42>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f240 115d 	movw	r1, #349	; 0x15d
 8005af6:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <__multiply+0x148>)
 8005af8:	4843      	ldr	r0, [pc, #268]	; (8005c08 <__multiply+0x14c>)
 8005afa:	f000 fb55 	bl	80061a8 <__assert_func>
 8005afe:	f100 0514 	add.w	r5, r0, #20
 8005b02:	462b      	mov	r3, r5
 8005b04:	2200      	movs	r2, #0
 8005b06:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b0a:	4543      	cmp	r3, r8
 8005b0c:	d321      	bcc.n	8005b52 <__multiply+0x96>
 8005b0e:	f104 0314 	add.w	r3, r4, #20
 8005b12:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b16:	f109 0314 	add.w	r3, r9, #20
 8005b1a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b1e:	9202      	str	r2, [sp, #8]
 8005b20:	1b3a      	subs	r2, r7, r4
 8005b22:	3a15      	subs	r2, #21
 8005b24:	f022 0203 	bic.w	r2, r2, #3
 8005b28:	3204      	adds	r2, #4
 8005b2a:	f104 0115 	add.w	r1, r4, #21
 8005b2e:	428f      	cmp	r7, r1
 8005b30:	bf38      	it	cc
 8005b32:	2204      	movcc	r2, #4
 8005b34:	9201      	str	r2, [sp, #4]
 8005b36:	9a02      	ldr	r2, [sp, #8]
 8005b38:	9303      	str	r3, [sp, #12]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d80c      	bhi.n	8005b58 <__multiply+0x9c>
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	dd03      	ble.n	8005b4a <__multiply+0x8e>
 8005b42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d059      	beq.n	8005bfe <__multiply+0x142>
 8005b4a:	6106      	str	r6, [r0, #16]
 8005b4c:	b005      	add	sp, #20
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	f843 2b04 	str.w	r2, [r3], #4
 8005b56:	e7d8      	b.n	8005b0a <__multiply+0x4e>
 8005b58:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b5c:	f1ba 0f00 	cmp.w	sl, #0
 8005b60:	d023      	beq.n	8005baa <__multiply+0xee>
 8005b62:	46a9      	mov	r9, r5
 8005b64:	f04f 0c00 	mov.w	ip, #0
 8005b68:	f104 0e14 	add.w	lr, r4, #20
 8005b6c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b70:	f8d9 1000 	ldr.w	r1, [r9]
 8005b74:	fa1f fb82 	uxth.w	fp, r2
 8005b78:	b289      	uxth	r1, r1
 8005b7a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b7e:	4461      	add	r1, ip
 8005b80:	f8d9 c000 	ldr.w	ip, [r9]
 8005b84:	0c12      	lsrs	r2, r2, #16
 8005b86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b8a:	fb0a c202 	mla	r2, sl, r2, ip
 8005b8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b92:	b289      	uxth	r1, r1
 8005b94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b98:	4577      	cmp	r7, lr
 8005b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b9e:	f849 1b04 	str.w	r1, [r9], #4
 8005ba2:	d8e3      	bhi.n	8005b6c <__multiply+0xb0>
 8005ba4:	9a01      	ldr	r2, [sp, #4]
 8005ba6:	f845 c002 	str.w	ip, [r5, r2]
 8005baa:	9a03      	ldr	r2, [sp, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005bb2:	f1b9 0f00 	cmp.w	r9, #0
 8005bb6:	d020      	beq.n	8005bfa <__multiply+0x13e>
 8005bb8:	46ae      	mov	lr, r5
 8005bba:	f04f 0a00 	mov.w	sl, #0
 8005bbe:	6829      	ldr	r1, [r5, #0]
 8005bc0:	f104 0c14 	add.w	ip, r4, #20
 8005bc4:	f8bc b000 	ldrh.w	fp, [ip]
 8005bc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bcc:	b289      	uxth	r1, r1
 8005bce:	fb09 220b 	mla	r2, r9, fp, r2
 8005bd2:	4492      	add	sl, r2
 8005bd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005bd8:	f84e 1b04 	str.w	r1, [lr], #4
 8005bdc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005be0:	f8be 1000 	ldrh.w	r1, [lr]
 8005be4:	0c12      	lsrs	r2, r2, #16
 8005be6:	fb09 1102 	mla	r1, r9, r2, r1
 8005bea:	4567      	cmp	r7, ip
 8005bec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005bf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bf4:	d8e6      	bhi.n	8005bc4 <__multiply+0x108>
 8005bf6:	9a01      	ldr	r2, [sp, #4]
 8005bf8:	50a9      	str	r1, [r5, r2]
 8005bfa:	3504      	adds	r5, #4
 8005bfc:	e79b      	b.n	8005b36 <__multiply+0x7a>
 8005bfe:	3e01      	subs	r6, #1
 8005c00:	e79d      	b.n	8005b3e <__multiply+0x82>
 8005c02:	bf00      	nop
 8005c04:	0800acef 	.word	0x0800acef
 8005c08:	0800ad00 	.word	0x0800ad00

08005c0c <__pow5mult>:
 8005c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c10:	4615      	mov	r5, r2
 8005c12:	f012 0203 	ands.w	r2, r2, #3
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	d007      	beq.n	8005c2c <__pow5mult+0x20>
 8005c1c:	4c25      	ldr	r4, [pc, #148]	; (8005cb4 <__pow5mult+0xa8>)
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	2300      	movs	r3, #0
 8005c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c26:	f7ff fe9f 	bl	8005968 <__multadd>
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	10ad      	asrs	r5, r5, #2
 8005c2e:	d03d      	beq.n	8005cac <__pow5mult+0xa0>
 8005c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c32:	b97c      	cbnz	r4, 8005c54 <__pow5mult+0x48>
 8005c34:	2010      	movs	r0, #16
 8005c36:	f7ff fe11 	bl	800585c <malloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8005c3e:	b928      	cbnz	r0, 8005c4c <__pow5mult+0x40>
 8005c40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c44:	4b1c      	ldr	r3, [pc, #112]	; (8005cb8 <__pow5mult+0xac>)
 8005c46:	481d      	ldr	r0, [pc, #116]	; (8005cbc <__pow5mult+0xb0>)
 8005c48:	f000 faae 	bl	80061a8 <__assert_func>
 8005c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c50:	6004      	str	r4, [r0, #0]
 8005c52:	60c4      	str	r4, [r0, #12]
 8005c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c5c:	b94c      	cbnz	r4, 8005c72 <__pow5mult+0x66>
 8005c5e:	f240 2171 	movw	r1, #625	; 0x271
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff ff14 	bl	8005a90 <__i2b>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c70:	6003      	str	r3, [r0, #0]
 8005c72:	f04f 0900 	mov.w	r9, #0
 8005c76:	07eb      	lsls	r3, r5, #31
 8005c78:	d50a      	bpl.n	8005c90 <__pow5mult+0x84>
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7ff ff1c 	bl	8005abc <__multiply>
 8005c84:	4680      	mov	r8, r0
 8005c86:	4639      	mov	r1, r7
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff fe4b 	bl	8005924 <_Bfree>
 8005c8e:	4647      	mov	r7, r8
 8005c90:	106d      	asrs	r5, r5, #1
 8005c92:	d00b      	beq.n	8005cac <__pow5mult+0xa0>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	b938      	cbnz	r0, 8005ca8 <__pow5mult+0x9c>
 8005c98:	4622      	mov	r2, r4
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff ff0d 	bl	8005abc <__multiply>
 8005ca2:	6020      	str	r0, [r4, #0]
 8005ca4:	f8c0 9000 	str.w	r9, [r0]
 8005ca8:	4604      	mov	r4, r0
 8005caa:	e7e4      	b.n	8005c76 <__pow5mult+0x6a>
 8005cac:	4638      	mov	r0, r7
 8005cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	bf00      	nop
 8005cb4:	0800ae50 	.word	0x0800ae50
 8005cb8:	0800ac7d 	.word	0x0800ac7d
 8005cbc:	0800ad00 	.word	0x0800ad00

08005cc0 <__lshift>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	4691      	mov	r9, r2
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6849      	ldr	r1, [r1, #4]
 8005cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cd2:	68a3      	ldr	r3, [r4, #8]
 8005cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cd8:	f108 0601 	add.w	r6, r8, #1
 8005cdc:	42b3      	cmp	r3, r6
 8005cde:	db0b      	blt.n	8005cf8 <__lshift+0x38>
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7ff fddf 	bl	80058a4 <_Balloc>
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	b948      	cbnz	r0, 8005cfe <__lshift+0x3e>
 8005cea:	4602      	mov	r2, r0
 8005cec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cf0:	4b29      	ldr	r3, [pc, #164]	; (8005d98 <__lshift+0xd8>)
 8005cf2:	482a      	ldr	r0, [pc, #168]	; (8005d9c <__lshift+0xdc>)
 8005cf4:	f000 fa58 	bl	80061a8 <__assert_func>
 8005cf8:	3101      	adds	r1, #1
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	e7ee      	b.n	8005cdc <__lshift+0x1c>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f100 0114 	add.w	r1, r0, #20
 8005d04:	f100 0210 	add.w	r2, r0, #16
 8005d08:	4618      	mov	r0, r3
 8005d0a:	4553      	cmp	r3, sl
 8005d0c:	db37      	blt.n	8005d7e <__lshift+0xbe>
 8005d0e:	6920      	ldr	r0, [r4, #16]
 8005d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d14:	f104 0314 	add.w	r3, r4, #20
 8005d18:	f019 091f 	ands.w	r9, r9, #31
 8005d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d24:	d02f      	beq.n	8005d86 <__lshift+0xc6>
 8005d26:	468a      	mov	sl, r1
 8005d28:	f04f 0c00 	mov.w	ip, #0
 8005d2c:	f1c9 0e20 	rsb	lr, r9, #32
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	fa02 f209 	lsl.w	r2, r2, r9
 8005d36:	ea42 020c 	orr.w	r2, r2, ip
 8005d3a:	f84a 2b04 	str.w	r2, [sl], #4
 8005d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d42:	4298      	cmp	r0, r3
 8005d44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d48:	d8f2      	bhi.n	8005d30 <__lshift+0x70>
 8005d4a:	1b03      	subs	r3, r0, r4
 8005d4c:	3b15      	subs	r3, #21
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	3304      	adds	r3, #4
 8005d54:	f104 0215 	add.w	r2, r4, #21
 8005d58:	4290      	cmp	r0, r2
 8005d5a:	bf38      	it	cc
 8005d5c:	2304      	movcc	r3, #4
 8005d5e:	f841 c003 	str.w	ip, [r1, r3]
 8005d62:	f1bc 0f00 	cmp.w	ip, #0
 8005d66:	d001      	beq.n	8005d6c <__lshift+0xac>
 8005d68:	f108 0602 	add.w	r6, r8, #2
 8005d6c:	3e01      	subs	r6, #1
 8005d6e:	4638      	mov	r0, r7
 8005d70:	4621      	mov	r1, r4
 8005d72:	612e      	str	r6, [r5, #16]
 8005d74:	f7ff fdd6 	bl	8005924 <_Bfree>
 8005d78:	4628      	mov	r0, r5
 8005d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d82:	3301      	adds	r3, #1
 8005d84:	e7c1      	b.n	8005d0a <__lshift+0x4a>
 8005d86:	3904      	subs	r1, #4
 8005d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8c:	4298      	cmp	r0, r3
 8005d8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d92:	d8f9      	bhi.n	8005d88 <__lshift+0xc8>
 8005d94:	e7ea      	b.n	8005d6c <__lshift+0xac>
 8005d96:	bf00      	nop
 8005d98:	0800acef 	.word	0x0800acef
 8005d9c:	0800ad00 	.word	0x0800ad00

08005da0 <__mcmp>:
 8005da0:	4603      	mov	r3, r0
 8005da2:	690a      	ldr	r2, [r1, #16]
 8005da4:	6900      	ldr	r0, [r0, #16]
 8005da6:	b530      	push	{r4, r5, lr}
 8005da8:	1a80      	subs	r0, r0, r2
 8005daa:	d10d      	bne.n	8005dc8 <__mcmp+0x28>
 8005dac:	3314      	adds	r3, #20
 8005dae:	3114      	adds	r1, #20
 8005db0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005db4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005dc0:	4295      	cmp	r5, r2
 8005dc2:	d002      	beq.n	8005dca <__mcmp+0x2a>
 8005dc4:	d304      	bcc.n	8005dd0 <__mcmp+0x30>
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	bd30      	pop	{r4, r5, pc}
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	d3f4      	bcc.n	8005db8 <__mcmp+0x18>
 8005dce:	e7fb      	b.n	8005dc8 <__mcmp+0x28>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	e7f8      	b.n	8005dc8 <__mcmp+0x28>
	...

08005dd8 <__mdiff>:
 8005dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	460d      	mov	r5, r1
 8005dde:	4607      	mov	r7, r0
 8005de0:	4611      	mov	r1, r2
 8005de2:	4628      	mov	r0, r5
 8005de4:	4614      	mov	r4, r2
 8005de6:	f7ff ffdb 	bl	8005da0 <__mcmp>
 8005dea:	1e06      	subs	r6, r0, #0
 8005dec:	d111      	bne.n	8005e12 <__mdiff+0x3a>
 8005dee:	4631      	mov	r1, r6
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7ff fd57 	bl	80058a4 <_Balloc>
 8005df6:	4602      	mov	r2, r0
 8005df8:	b928      	cbnz	r0, 8005e06 <__mdiff+0x2e>
 8005dfa:	f240 2132 	movw	r1, #562	; 0x232
 8005dfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <__mdiff+0x110>)
 8005e00:	483a      	ldr	r0, [pc, #232]	; (8005eec <__mdiff+0x114>)
 8005e02:	f000 f9d1 	bl	80061a8 <__assert_func>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e12:	bfa4      	itt	ge
 8005e14:	4623      	movge	r3, r4
 8005e16:	462c      	movge	r4, r5
 8005e18:	4638      	mov	r0, r7
 8005e1a:	6861      	ldr	r1, [r4, #4]
 8005e1c:	bfa6      	itte	ge
 8005e1e:	461d      	movge	r5, r3
 8005e20:	2600      	movge	r6, #0
 8005e22:	2601      	movlt	r6, #1
 8005e24:	f7ff fd3e 	bl	80058a4 <_Balloc>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	b918      	cbnz	r0, 8005e34 <__mdiff+0x5c>
 8005e2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e30:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <__mdiff+0x110>)
 8005e32:	e7e5      	b.n	8005e00 <__mdiff+0x28>
 8005e34:	f102 0814 	add.w	r8, r2, #20
 8005e38:	46c2      	mov	sl, r8
 8005e3a:	f04f 0c00 	mov.w	ip, #0
 8005e3e:	6927      	ldr	r7, [r4, #16]
 8005e40:	60c6      	str	r6, [r0, #12]
 8005e42:	692e      	ldr	r6, [r5, #16]
 8005e44:	f104 0014 	add.w	r0, r4, #20
 8005e48:	f105 0914 	add.w	r9, r5, #20
 8005e4c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e54:	3410      	adds	r4, #16
 8005e56:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e5e:	fa1f f18b 	uxth.w	r1, fp
 8005e62:	448c      	add	ip, r1
 8005e64:	b299      	uxth	r1, r3
 8005e66:	0c1b      	lsrs	r3, r3, #16
 8005e68:	ebac 0101 	sub.w	r1, ip, r1
 8005e6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e70:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e74:	b289      	uxth	r1, r1
 8005e76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e7a:	454e      	cmp	r6, r9
 8005e7c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e80:	f84a 3b04 	str.w	r3, [sl], #4
 8005e84:	d8e7      	bhi.n	8005e56 <__mdiff+0x7e>
 8005e86:	1b73      	subs	r3, r6, r5
 8005e88:	3b15      	subs	r3, #21
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	3515      	adds	r5, #21
 8005e90:	3304      	adds	r3, #4
 8005e92:	42ae      	cmp	r6, r5
 8005e94:	bf38      	it	cc
 8005e96:	2304      	movcc	r3, #4
 8005e98:	4418      	add	r0, r3
 8005e9a:	4443      	add	r3, r8
 8005e9c:	461e      	mov	r6, r3
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	4575      	cmp	r5, lr
 8005ea2:	d30e      	bcc.n	8005ec2 <__mdiff+0xea>
 8005ea4:	f10e 0103 	add.w	r1, lr, #3
 8005ea8:	1a09      	subs	r1, r1, r0
 8005eaa:	f021 0103 	bic.w	r1, r1, #3
 8005eae:	3803      	subs	r0, #3
 8005eb0:	4586      	cmp	lr, r0
 8005eb2:	bf38      	it	cc
 8005eb4:	2100      	movcc	r1, #0
 8005eb6:	4419      	add	r1, r3
 8005eb8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ebc:	b18b      	cbz	r3, 8005ee2 <__mdiff+0x10a>
 8005ebe:	6117      	str	r7, [r2, #16]
 8005ec0:	e7a4      	b.n	8005e0c <__mdiff+0x34>
 8005ec2:	f855 8b04 	ldr.w	r8, [r5], #4
 8005ec6:	fa1f f188 	uxth.w	r1, r8
 8005eca:	4461      	add	r1, ip
 8005ecc:	140c      	asrs	r4, r1, #16
 8005ece:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ed2:	b289      	uxth	r1, r1
 8005ed4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ed8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005edc:	f846 1b04 	str.w	r1, [r6], #4
 8005ee0:	e7de      	b.n	8005ea0 <__mdiff+0xc8>
 8005ee2:	3f01      	subs	r7, #1
 8005ee4:	e7e8      	b.n	8005eb8 <__mdiff+0xe0>
 8005ee6:	bf00      	nop
 8005ee8:	0800acef 	.word	0x0800acef
 8005eec:	0800ad00 	.word	0x0800ad00

08005ef0 <__d2b>:
 8005ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005efa:	4690      	mov	r8, r2
 8005efc:	461d      	mov	r5, r3
 8005efe:	f7ff fcd1 	bl	80058a4 <_Balloc>
 8005f02:	4604      	mov	r4, r0
 8005f04:	b930      	cbnz	r0, 8005f14 <__d2b+0x24>
 8005f06:	4602      	mov	r2, r0
 8005f08:	f240 310a 	movw	r1, #778	; 0x30a
 8005f0c:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <__d2b+0xb0>)
 8005f0e:	4825      	ldr	r0, [pc, #148]	; (8005fa4 <__d2b+0xb4>)
 8005f10:	f000 f94a 	bl	80061a8 <__assert_func>
 8005f14:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f18:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005f1c:	bb2d      	cbnz	r5, 8005f6a <__d2b+0x7a>
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	f1b8 0300 	subs.w	r3, r8, #0
 8005f24:	d026      	beq.n	8005f74 <__d2b+0x84>
 8005f26:	4668      	mov	r0, sp
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	f7ff fd83 	bl	8005a34 <__lo0bits>
 8005f2e:	9900      	ldr	r1, [sp, #0]
 8005f30:	b1f0      	cbz	r0, 8005f70 <__d2b+0x80>
 8005f32:	9a01      	ldr	r2, [sp, #4]
 8005f34:	f1c0 0320 	rsb	r3, r0, #32
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	40c2      	lsrs	r2, r0
 8005f40:	6163      	str	r3, [r4, #20]
 8005f42:	9201      	str	r2, [sp, #4]
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf14      	ite	ne
 8005f4a:	2102      	movne	r1, #2
 8005f4c:	2101      	moveq	r1, #1
 8005f4e:	61a3      	str	r3, [r4, #24]
 8005f50:	6121      	str	r1, [r4, #16]
 8005f52:	b1c5      	cbz	r5, 8005f86 <__d2b+0x96>
 8005f54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f58:	4405      	add	r5, r0
 8005f5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f5e:	603d      	str	r5, [r7, #0]
 8005f60:	6030      	str	r0, [r6, #0]
 8005f62:	4620      	mov	r0, r4
 8005f64:	b002      	add	sp, #8
 8005f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6e:	e7d6      	b.n	8005f1e <__d2b+0x2e>
 8005f70:	6161      	str	r1, [r4, #20]
 8005f72:	e7e7      	b.n	8005f44 <__d2b+0x54>
 8005f74:	a801      	add	r0, sp, #4
 8005f76:	f7ff fd5d 	bl	8005a34 <__lo0bits>
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	9b01      	ldr	r3, [sp, #4]
 8005f7e:	6121      	str	r1, [r4, #16]
 8005f80:	6163      	str	r3, [r4, #20]
 8005f82:	3020      	adds	r0, #32
 8005f84:	e7e5      	b.n	8005f52 <__d2b+0x62>
 8005f86:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005f8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f8e:	6038      	str	r0, [r7, #0]
 8005f90:	6918      	ldr	r0, [r3, #16]
 8005f92:	f7ff fd2f 	bl	80059f4 <__hi0bits>
 8005f96:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005f9a:	6031      	str	r1, [r6, #0]
 8005f9c:	e7e1      	b.n	8005f62 <__d2b+0x72>
 8005f9e:	bf00      	nop
 8005fa0:	0800acef 	.word	0x0800acef
 8005fa4:	0800ad00 	.word	0x0800ad00

08005fa8 <_calloc_r>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	fba1 5402 	umull	r5, r4, r1, r2
 8005fae:	b934      	cbnz	r4, 8005fbe <_calloc_r+0x16>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f000 f875 	bl	80060a0 <_malloc_r>
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <_calloc_r+0x1e>
 8005fba:	4630      	mov	r0, r6
 8005fbc:	bd70      	pop	{r4, r5, r6, pc}
 8005fbe:	220c      	movs	r2, #12
 8005fc0:	2600      	movs	r6, #0
 8005fc2:	6002      	str	r2, [r0, #0]
 8005fc4:	e7f9      	b.n	8005fba <_calloc_r+0x12>
 8005fc6:	462a      	mov	r2, r5
 8005fc8:	4621      	mov	r1, r4
 8005fca:	f7fe f95f 	bl	800428c <memset>
 8005fce:	e7f4      	b.n	8005fba <_calloc_r+0x12>

08005fd0 <_free_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	d040      	beq.n	800605a <_free_r+0x8a>
 8005fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fdc:	1f0c      	subs	r4, r1, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bfb8      	it	lt
 8005fe2:	18e4      	addlt	r4, r4, r3
 8005fe4:	f000 f922 	bl	800622c <__malloc_lock>
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	; (800605c <_free_r+0x8c>)
 8005fea:	6813      	ldr	r3, [r2, #0]
 8005fec:	b933      	cbnz	r3, 8005ffc <_free_r+0x2c>
 8005fee:	6063      	str	r3, [r4, #4]
 8005ff0:	6014      	str	r4, [r2, #0]
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ff8:	f000 b91e 	b.w	8006238 <__malloc_unlock>
 8005ffc:	42a3      	cmp	r3, r4
 8005ffe:	d908      	bls.n	8006012 <_free_r+0x42>
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	1821      	adds	r1, r4, r0
 8006004:	428b      	cmp	r3, r1
 8006006:	bf01      	itttt	eq
 8006008:	6819      	ldreq	r1, [r3, #0]
 800600a:	685b      	ldreq	r3, [r3, #4]
 800600c:	1809      	addeq	r1, r1, r0
 800600e:	6021      	streq	r1, [r4, #0]
 8006010:	e7ed      	b.n	8005fee <_free_r+0x1e>
 8006012:	461a      	mov	r2, r3
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	b10b      	cbz	r3, 800601c <_free_r+0x4c>
 8006018:	42a3      	cmp	r3, r4
 800601a:	d9fa      	bls.n	8006012 <_free_r+0x42>
 800601c:	6811      	ldr	r1, [r2, #0]
 800601e:	1850      	adds	r0, r2, r1
 8006020:	42a0      	cmp	r0, r4
 8006022:	d10b      	bne.n	800603c <_free_r+0x6c>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	4401      	add	r1, r0
 8006028:	1850      	adds	r0, r2, r1
 800602a:	4283      	cmp	r3, r0
 800602c:	6011      	str	r1, [r2, #0]
 800602e:	d1e0      	bne.n	8005ff2 <_free_r+0x22>
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4401      	add	r1, r0
 8006036:	6011      	str	r1, [r2, #0]
 8006038:	6053      	str	r3, [r2, #4]
 800603a:	e7da      	b.n	8005ff2 <_free_r+0x22>
 800603c:	d902      	bls.n	8006044 <_free_r+0x74>
 800603e:	230c      	movs	r3, #12
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	e7d6      	b.n	8005ff2 <_free_r+0x22>
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	1821      	adds	r1, r4, r0
 8006048:	428b      	cmp	r3, r1
 800604a:	bf01      	itttt	eq
 800604c:	6819      	ldreq	r1, [r3, #0]
 800604e:	685b      	ldreq	r3, [r3, #4]
 8006050:	1809      	addeq	r1, r1, r0
 8006052:	6021      	streq	r1, [r4, #0]
 8006054:	6063      	str	r3, [r4, #4]
 8006056:	6054      	str	r4, [r2, #4]
 8006058:	e7cb      	b.n	8005ff2 <_free_r+0x22>
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	2000285c 	.word	0x2000285c

08006060 <sbrk_aligned>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	4e0e      	ldr	r6, [pc, #56]	; (800609c <sbrk_aligned+0x3c>)
 8006064:	460c      	mov	r4, r1
 8006066:	6831      	ldr	r1, [r6, #0]
 8006068:	4605      	mov	r5, r0
 800606a:	b911      	cbnz	r1, 8006072 <sbrk_aligned+0x12>
 800606c:	f000 f88c 	bl	8006188 <_sbrk_r>
 8006070:	6030      	str	r0, [r6, #0]
 8006072:	4621      	mov	r1, r4
 8006074:	4628      	mov	r0, r5
 8006076:	f000 f887 	bl	8006188 <_sbrk_r>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d00a      	beq.n	8006094 <sbrk_aligned+0x34>
 800607e:	1cc4      	adds	r4, r0, #3
 8006080:	f024 0403 	bic.w	r4, r4, #3
 8006084:	42a0      	cmp	r0, r4
 8006086:	d007      	beq.n	8006098 <sbrk_aligned+0x38>
 8006088:	1a21      	subs	r1, r4, r0
 800608a:	4628      	mov	r0, r5
 800608c:	f000 f87c 	bl	8006188 <_sbrk_r>
 8006090:	3001      	adds	r0, #1
 8006092:	d101      	bne.n	8006098 <sbrk_aligned+0x38>
 8006094:	f04f 34ff 	mov.w	r4, #4294967295
 8006098:	4620      	mov	r0, r4
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	20002860 	.word	0x20002860

080060a0 <_malloc_r>:
 80060a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a4:	1ccd      	adds	r5, r1, #3
 80060a6:	f025 0503 	bic.w	r5, r5, #3
 80060aa:	3508      	adds	r5, #8
 80060ac:	2d0c      	cmp	r5, #12
 80060ae:	bf38      	it	cc
 80060b0:	250c      	movcc	r5, #12
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	4607      	mov	r7, r0
 80060b6:	db01      	blt.n	80060bc <_malloc_r+0x1c>
 80060b8:	42a9      	cmp	r1, r5
 80060ba:	d905      	bls.n	80060c8 <_malloc_r+0x28>
 80060bc:	230c      	movs	r3, #12
 80060be:	2600      	movs	r6, #0
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	4630      	mov	r0, r6
 80060c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c8:	4e2e      	ldr	r6, [pc, #184]	; (8006184 <_malloc_r+0xe4>)
 80060ca:	f000 f8af 	bl	800622c <__malloc_lock>
 80060ce:	6833      	ldr	r3, [r6, #0]
 80060d0:	461c      	mov	r4, r3
 80060d2:	bb34      	cbnz	r4, 8006122 <_malloc_r+0x82>
 80060d4:	4629      	mov	r1, r5
 80060d6:	4638      	mov	r0, r7
 80060d8:	f7ff ffc2 	bl	8006060 <sbrk_aligned>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	4604      	mov	r4, r0
 80060e0:	d14d      	bne.n	800617e <_malloc_r+0xde>
 80060e2:	6834      	ldr	r4, [r6, #0]
 80060e4:	4626      	mov	r6, r4
 80060e6:	2e00      	cmp	r6, #0
 80060e8:	d140      	bne.n	800616c <_malloc_r+0xcc>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	4631      	mov	r1, r6
 80060ee:	4638      	mov	r0, r7
 80060f0:	eb04 0803 	add.w	r8, r4, r3
 80060f4:	f000 f848 	bl	8006188 <_sbrk_r>
 80060f8:	4580      	cmp	r8, r0
 80060fa:	d13a      	bne.n	8006172 <_malloc_r+0xd2>
 80060fc:	6821      	ldr	r1, [r4, #0]
 80060fe:	3503      	adds	r5, #3
 8006100:	1a6d      	subs	r5, r5, r1
 8006102:	f025 0503 	bic.w	r5, r5, #3
 8006106:	3508      	adds	r5, #8
 8006108:	2d0c      	cmp	r5, #12
 800610a:	bf38      	it	cc
 800610c:	250c      	movcc	r5, #12
 800610e:	4638      	mov	r0, r7
 8006110:	4629      	mov	r1, r5
 8006112:	f7ff ffa5 	bl	8006060 <sbrk_aligned>
 8006116:	3001      	adds	r0, #1
 8006118:	d02b      	beq.n	8006172 <_malloc_r+0xd2>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	442b      	add	r3, r5
 800611e:	6023      	str	r3, [r4, #0]
 8006120:	e00e      	b.n	8006140 <_malloc_r+0xa0>
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	1b52      	subs	r2, r2, r5
 8006126:	d41e      	bmi.n	8006166 <_malloc_r+0xc6>
 8006128:	2a0b      	cmp	r2, #11
 800612a:	d916      	bls.n	800615a <_malloc_r+0xba>
 800612c:	1961      	adds	r1, r4, r5
 800612e:	42a3      	cmp	r3, r4
 8006130:	6025      	str	r5, [r4, #0]
 8006132:	bf18      	it	ne
 8006134:	6059      	strne	r1, [r3, #4]
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	bf08      	it	eq
 800613a:	6031      	streq	r1, [r6, #0]
 800613c:	5162      	str	r2, [r4, r5]
 800613e:	604b      	str	r3, [r1, #4]
 8006140:	4638      	mov	r0, r7
 8006142:	f104 060b 	add.w	r6, r4, #11
 8006146:	f000 f877 	bl	8006238 <__malloc_unlock>
 800614a:	f026 0607 	bic.w	r6, r6, #7
 800614e:	1d23      	adds	r3, r4, #4
 8006150:	1af2      	subs	r2, r6, r3
 8006152:	d0b6      	beq.n	80060c2 <_malloc_r+0x22>
 8006154:	1b9b      	subs	r3, r3, r6
 8006156:	50a3      	str	r3, [r4, r2]
 8006158:	e7b3      	b.n	80060c2 <_malloc_r+0x22>
 800615a:	6862      	ldr	r2, [r4, #4]
 800615c:	42a3      	cmp	r3, r4
 800615e:	bf0c      	ite	eq
 8006160:	6032      	streq	r2, [r6, #0]
 8006162:	605a      	strne	r2, [r3, #4]
 8006164:	e7ec      	b.n	8006140 <_malloc_r+0xa0>
 8006166:	4623      	mov	r3, r4
 8006168:	6864      	ldr	r4, [r4, #4]
 800616a:	e7b2      	b.n	80060d2 <_malloc_r+0x32>
 800616c:	4634      	mov	r4, r6
 800616e:	6876      	ldr	r6, [r6, #4]
 8006170:	e7b9      	b.n	80060e6 <_malloc_r+0x46>
 8006172:	230c      	movs	r3, #12
 8006174:	4638      	mov	r0, r7
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	f000 f85e 	bl	8006238 <__malloc_unlock>
 800617c:	e7a1      	b.n	80060c2 <_malloc_r+0x22>
 800617e:	6025      	str	r5, [r4, #0]
 8006180:	e7de      	b.n	8006140 <_malloc_r+0xa0>
 8006182:	bf00      	nop
 8006184:	2000285c 	.word	0x2000285c

08006188 <_sbrk_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	2300      	movs	r3, #0
 800618c:	4d05      	ldr	r5, [pc, #20]	; (80061a4 <_sbrk_r+0x1c>)
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fb fa06 	bl	80015a4 <_sbrk>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_sbrk_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_sbrk_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20002864 	.word	0x20002864

080061a8 <__assert_func>:
 80061a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061aa:	4614      	mov	r4, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <__assert_func+0x2c>)
 80061b0:	4605      	mov	r5, r0
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68d8      	ldr	r0, [r3, #12]
 80061b6:	b14c      	cbz	r4, 80061cc <__assert_func+0x24>
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <__assert_func+0x30>)
 80061ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061be:	9100      	str	r1, [sp, #0]
 80061c0:	462b      	mov	r3, r5
 80061c2:	4906      	ldr	r1, [pc, #24]	; (80061dc <__assert_func+0x34>)
 80061c4:	f000 f80e 	bl	80061e4 <fiprintf>
 80061c8:	f000 fa62 	bl	8006690 <abort>
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <__assert_func+0x38>)
 80061ce:	461c      	mov	r4, r3
 80061d0:	e7f3      	b.n	80061ba <__assert_func+0x12>
 80061d2:	bf00      	nop
 80061d4:	20001010 	.word	0x20001010
 80061d8:	0800ae5c 	.word	0x0800ae5c
 80061dc:	0800ae69 	.word	0x0800ae69
 80061e0:	0800ae97 	.word	0x0800ae97

080061e4 <fiprintf>:
 80061e4:	b40e      	push	{r1, r2, r3}
 80061e6:	b503      	push	{r0, r1, lr}
 80061e8:	4601      	mov	r1, r0
 80061ea:	ab03      	add	r3, sp, #12
 80061ec:	4805      	ldr	r0, [pc, #20]	; (8006204 <fiprintf+0x20>)
 80061ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f2:	6800      	ldr	r0, [r0, #0]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	f000 f84d 	bl	8006294 <_vfiprintf_r>
 80061fa:	b002      	add	sp, #8
 80061fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006200:	b003      	add	sp, #12
 8006202:	4770      	bx	lr
 8006204:	20001010 	.word	0x20001010

08006208 <__ascii_mbtowc>:
 8006208:	b082      	sub	sp, #8
 800620a:	b901      	cbnz	r1, 800620e <__ascii_mbtowc+0x6>
 800620c:	a901      	add	r1, sp, #4
 800620e:	b142      	cbz	r2, 8006222 <__ascii_mbtowc+0x1a>
 8006210:	b14b      	cbz	r3, 8006226 <__ascii_mbtowc+0x1e>
 8006212:	7813      	ldrb	r3, [r2, #0]
 8006214:	600b      	str	r3, [r1, #0]
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	1e10      	subs	r0, r2, #0
 800621a:	bf18      	it	ne
 800621c:	2001      	movne	r0, #1
 800621e:	b002      	add	sp, #8
 8006220:	4770      	bx	lr
 8006222:	4610      	mov	r0, r2
 8006224:	e7fb      	b.n	800621e <__ascii_mbtowc+0x16>
 8006226:	f06f 0001 	mvn.w	r0, #1
 800622a:	e7f8      	b.n	800621e <__ascii_mbtowc+0x16>

0800622c <__malloc_lock>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__malloc_lock+0x8>)
 800622e:	f000 bbeb 	b.w	8006a08 <__retarget_lock_acquire_recursive>
 8006232:	bf00      	nop
 8006234:	20002868 	.word	0x20002868

08006238 <__malloc_unlock>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__malloc_unlock+0x8>)
 800623a:	f000 bbe6 	b.w	8006a0a <__retarget_lock_release_recursive>
 800623e:	bf00      	nop
 8006240:	20002868 	.word	0x20002868

08006244 <__sfputc_r>:
 8006244:	6893      	ldr	r3, [r2, #8]
 8006246:	b410      	push	{r4}
 8006248:	3b01      	subs	r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	6093      	str	r3, [r2, #8]
 800624e:	da07      	bge.n	8006260 <__sfputc_r+0x1c>
 8006250:	6994      	ldr	r4, [r2, #24]
 8006252:	42a3      	cmp	r3, r4
 8006254:	db01      	blt.n	800625a <__sfputc_r+0x16>
 8006256:	290a      	cmp	r1, #10
 8006258:	d102      	bne.n	8006260 <__sfputc_r+0x1c>
 800625a:	bc10      	pop	{r4}
 800625c:	f000 b94a 	b.w	80064f4 <__swbuf_r>
 8006260:	6813      	ldr	r3, [r2, #0]
 8006262:	1c58      	adds	r0, r3, #1
 8006264:	6010      	str	r0, [r2, #0]
 8006266:	7019      	strb	r1, [r3, #0]
 8006268:	4608      	mov	r0, r1
 800626a:	bc10      	pop	{r4}
 800626c:	4770      	bx	lr

0800626e <__sfputs_r>:
 800626e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006270:	4606      	mov	r6, r0
 8006272:	460f      	mov	r7, r1
 8006274:	4614      	mov	r4, r2
 8006276:	18d5      	adds	r5, r2, r3
 8006278:	42ac      	cmp	r4, r5
 800627a:	d101      	bne.n	8006280 <__sfputs_r+0x12>
 800627c:	2000      	movs	r0, #0
 800627e:	e007      	b.n	8006290 <__sfputs_r+0x22>
 8006280:	463a      	mov	r2, r7
 8006282:	4630      	mov	r0, r6
 8006284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006288:	f7ff ffdc 	bl	8006244 <__sfputc_r>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d1f3      	bne.n	8006278 <__sfputs_r+0xa>
 8006290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006294 <_vfiprintf_r>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	460d      	mov	r5, r1
 800629a:	4614      	mov	r4, r2
 800629c:	4698      	mov	r8, r3
 800629e:	4606      	mov	r6, r0
 80062a0:	b09d      	sub	sp, #116	; 0x74
 80062a2:	b118      	cbz	r0, 80062ac <_vfiprintf_r+0x18>
 80062a4:	6983      	ldr	r3, [r0, #24]
 80062a6:	b90b      	cbnz	r3, 80062ac <_vfiprintf_r+0x18>
 80062a8:	f000 fb10 	bl	80068cc <__sinit>
 80062ac:	4b89      	ldr	r3, [pc, #548]	; (80064d4 <_vfiprintf_r+0x240>)
 80062ae:	429d      	cmp	r5, r3
 80062b0:	d11b      	bne.n	80062ea <_vfiprintf_r+0x56>
 80062b2:	6875      	ldr	r5, [r6, #4]
 80062b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	d405      	bmi.n	80062c6 <_vfiprintf_r+0x32>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	059a      	lsls	r2, r3, #22
 80062be:	d402      	bmi.n	80062c6 <_vfiprintf_r+0x32>
 80062c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062c2:	f000 fba1 	bl	8006a08 <__retarget_lock_acquire_recursive>
 80062c6:	89ab      	ldrh	r3, [r5, #12]
 80062c8:	071b      	lsls	r3, r3, #28
 80062ca:	d501      	bpl.n	80062d0 <_vfiprintf_r+0x3c>
 80062cc:	692b      	ldr	r3, [r5, #16]
 80062ce:	b9eb      	cbnz	r3, 800630c <_vfiprintf_r+0x78>
 80062d0:	4629      	mov	r1, r5
 80062d2:	4630      	mov	r0, r6
 80062d4:	f000 f96e 	bl	80065b4 <__swsetup_r>
 80062d8:	b1c0      	cbz	r0, 800630c <_vfiprintf_r+0x78>
 80062da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062dc:	07dc      	lsls	r4, r3, #31
 80062de:	d50e      	bpl.n	80062fe <_vfiprintf_r+0x6a>
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	b01d      	add	sp, #116	; 0x74
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	4b7b      	ldr	r3, [pc, #492]	; (80064d8 <_vfiprintf_r+0x244>)
 80062ec:	429d      	cmp	r5, r3
 80062ee:	d101      	bne.n	80062f4 <_vfiprintf_r+0x60>
 80062f0:	68b5      	ldr	r5, [r6, #8]
 80062f2:	e7df      	b.n	80062b4 <_vfiprintf_r+0x20>
 80062f4:	4b79      	ldr	r3, [pc, #484]	; (80064dc <_vfiprintf_r+0x248>)
 80062f6:	429d      	cmp	r5, r3
 80062f8:	bf08      	it	eq
 80062fa:	68f5      	ldreq	r5, [r6, #12]
 80062fc:	e7da      	b.n	80062b4 <_vfiprintf_r+0x20>
 80062fe:	89ab      	ldrh	r3, [r5, #12]
 8006300:	0598      	lsls	r0, r3, #22
 8006302:	d4ed      	bmi.n	80062e0 <_vfiprintf_r+0x4c>
 8006304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006306:	f000 fb80 	bl	8006a0a <__retarget_lock_release_recursive>
 800630a:	e7e9      	b.n	80062e0 <_vfiprintf_r+0x4c>
 800630c:	2300      	movs	r3, #0
 800630e:	9309      	str	r3, [sp, #36]	; 0x24
 8006310:	2320      	movs	r3, #32
 8006312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006316:	2330      	movs	r3, #48	; 0x30
 8006318:	f04f 0901 	mov.w	r9, #1
 800631c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006320:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80064e0 <_vfiprintf_r+0x24c>
 8006324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006328:	4623      	mov	r3, r4
 800632a:	469a      	mov	sl, r3
 800632c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006330:	b10a      	cbz	r2, 8006336 <_vfiprintf_r+0xa2>
 8006332:	2a25      	cmp	r2, #37	; 0x25
 8006334:	d1f9      	bne.n	800632a <_vfiprintf_r+0x96>
 8006336:	ebba 0b04 	subs.w	fp, sl, r4
 800633a:	d00b      	beq.n	8006354 <_vfiprintf_r+0xc0>
 800633c:	465b      	mov	r3, fp
 800633e:	4622      	mov	r2, r4
 8006340:	4629      	mov	r1, r5
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff ff93 	bl	800626e <__sfputs_r>
 8006348:	3001      	adds	r0, #1
 800634a:	f000 80aa 	beq.w	80064a2 <_vfiprintf_r+0x20e>
 800634e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006350:	445a      	add	r2, fp
 8006352:	9209      	str	r2, [sp, #36]	; 0x24
 8006354:	f89a 3000 	ldrb.w	r3, [sl]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80a2 	beq.w	80064a2 <_vfiprintf_r+0x20e>
 800635e:	2300      	movs	r3, #0
 8006360:	f04f 32ff 	mov.w	r2, #4294967295
 8006364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006368:	f10a 0a01 	add.w	sl, sl, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006374:	931a      	str	r3, [sp, #104]	; 0x68
 8006376:	4654      	mov	r4, sl
 8006378:	2205      	movs	r2, #5
 800637a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637e:	4858      	ldr	r0, [pc, #352]	; (80064e0 <_vfiprintf_r+0x24c>)
 8006380:	f7ff fa74 	bl	800586c <memchr>
 8006384:	9a04      	ldr	r2, [sp, #16]
 8006386:	b9d8      	cbnz	r0, 80063c0 <_vfiprintf_r+0x12c>
 8006388:	06d1      	lsls	r1, r2, #27
 800638a:	bf44      	itt	mi
 800638c:	2320      	movmi	r3, #32
 800638e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006392:	0713      	lsls	r3, r2, #28
 8006394:	bf44      	itt	mi
 8006396:	232b      	movmi	r3, #43	; 0x2b
 8006398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800639c:	f89a 3000 	ldrb.w	r3, [sl]
 80063a0:	2b2a      	cmp	r3, #42	; 0x2a
 80063a2:	d015      	beq.n	80063d0 <_vfiprintf_r+0x13c>
 80063a4:	4654      	mov	r4, sl
 80063a6:	2000      	movs	r0, #0
 80063a8:	f04f 0c0a 	mov.w	ip, #10
 80063ac:	9a07      	ldr	r2, [sp, #28]
 80063ae:	4621      	mov	r1, r4
 80063b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b4:	3b30      	subs	r3, #48	; 0x30
 80063b6:	2b09      	cmp	r3, #9
 80063b8:	d94e      	bls.n	8006458 <_vfiprintf_r+0x1c4>
 80063ba:	b1b0      	cbz	r0, 80063ea <_vfiprintf_r+0x156>
 80063bc:	9207      	str	r2, [sp, #28]
 80063be:	e014      	b.n	80063ea <_vfiprintf_r+0x156>
 80063c0:	eba0 0308 	sub.w	r3, r0, r8
 80063c4:	fa09 f303 	lsl.w	r3, r9, r3
 80063c8:	4313      	orrs	r3, r2
 80063ca:	46a2      	mov	sl, r4
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	e7d2      	b.n	8006376 <_vfiprintf_r+0xe2>
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	1d19      	adds	r1, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	9103      	str	r1, [sp, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfbb      	ittet	lt
 80063dc:	425b      	neglt	r3, r3
 80063de:	f042 0202 	orrlt.w	r2, r2, #2
 80063e2:	9307      	strge	r3, [sp, #28]
 80063e4:	9307      	strlt	r3, [sp, #28]
 80063e6:	bfb8      	it	lt
 80063e8:	9204      	strlt	r2, [sp, #16]
 80063ea:	7823      	ldrb	r3, [r4, #0]
 80063ec:	2b2e      	cmp	r3, #46	; 0x2e
 80063ee:	d10c      	bne.n	800640a <_vfiprintf_r+0x176>
 80063f0:	7863      	ldrb	r3, [r4, #1]
 80063f2:	2b2a      	cmp	r3, #42	; 0x2a
 80063f4:	d135      	bne.n	8006462 <_vfiprintf_r+0x1ce>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	3402      	adds	r4, #2
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	9203      	str	r2, [sp, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	bfb8      	it	lt
 8006404:	f04f 33ff 	movlt.w	r3, #4294967295
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80064e4 <_vfiprintf_r+0x250>
 800640e:	2203      	movs	r2, #3
 8006410:	4650      	mov	r0, sl
 8006412:	7821      	ldrb	r1, [r4, #0]
 8006414:	f7ff fa2a 	bl	800586c <memchr>
 8006418:	b140      	cbz	r0, 800642c <_vfiprintf_r+0x198>
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	eba0 000a 	sub.w	r0, r0, sl
 8006420:	fa03 f000 	lsl.w	r0, r3, r0
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	3401      	adds	r4, #1
 8006428:	4303      	orrs	r3, r0
 800642a:	9304      	str	r3, [sp, #16]
 800642c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006430:	2206      	movs	r2, #6
 8006432:	482d      	ldr	r0, [pc, #180]	; (80064e8 <_vfiprintf_r+0x254>)
 8006434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006438:	f7ff fa18 	bl	800586c <memchr>
 800643c:	2800      	cmp	r0, #0
 800643e:	d03f      	beq.n	80064c0 <_vfiprintf_r+0x22c>
 8006440:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <_vfiprintf_r+0x258>)
 8006442:	bb1b      	cbnz	r3, 800648c <_vfiprintf_r+0x1f8>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	3307      	adds	r3, #7
 8006448:	f023 0307 	bic.w	r3, r3, #7
 800644c:	3308      	adds	r3, #8
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	443b      	add	r3, r7
 8006454:	9309      	str	r3, [sp, #36]	; 0x24
 8006456:	e767      	b.n	8006328 <_vfiprintf_r+0x94>
 8006458:	460c      	mov	r4, r1
 800645a:	2001      	movs	r0, #1
 800645c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006460:	e7a5      	b.n	80063ae <_vfiprintf_r+0x11a>
 8006462:	2300      	movs	r3, #0
 8006464:	f04f 0c0a 	mov.w	ip, #10
 8006468:	4619      	mov	r1, r3
 800646a:	3401      	adds	r4, #1
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	4620      	mov	r0, r4
 8006470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006474:	3a30      	subs	r2, #48	; 0x30
 8006476:	2a09      	cmp	r2, #9
 8006478:	d903      	bls.n	8006482 <_vfiprintf_r+0x1ee>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0c5      	beq.n	800640a <_vfiprintf_r+0x176>
 800647e:	9105      	str	r1, [sp, #20]
 8006480:	e7c3      	b.n	800640a <_vfiprintf_r+0x176>
 8006482:	4604      	mov	r4, r0
 8006484:	2301      	movs	r3, #1
 8006486:	fb0c 2101 	mla	r1, ip, r1, r2
 800648a:	e7f0      	b.n	800646e <_vfiprintf_r+0x1da>
 800648c:	ab03      	add	r3, sp, #12
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	462a      	mov	r2, r5
 8006492:	4630      	mov	r0, r6
 8006494:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <_vfiprintf_r+0x25c>)
 8006496:	a904      	add	r1, sp, #16
 8006498:	f7fd ff9e 	bl	80043d8 <_printf_float>
 800649c:	4607      	mov	r7, r0
 800649e:	1c78      	adds	r0, r7, #1
 80064a0:	d1d6      	bne.n	8006450 <_vfiprintf_r+0x1bc>
 80064a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064a4:	07d9      	lsls	r1, r3, #31
 80064a6:	d405      	bmi.n	80064b4 <_vfiprintf_r+0x220>
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	059a      	lsls	r2, r3, #22
 80064ac:	d402      	bmi.n	80064b4 <_vfiprintf_r+0x220>
 80064ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b0:	f000 faab 	bl	8006a0a <__retarget_lock_release_recursive>
 80064b4:	89ab      	ldrh	r3, [r5, #12]
 80064b6:	065b      	lsls	r3, r3, #25
 80064b8:	f53f af12 	bmi.w	80062e0 <_vfiprintf_r+0x4c>
 80064bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064be:	e711      	b.n	80062e4 <_vfiprintf_r+0x50>
 80064c0:	ab03      	add	r3, sp, #12
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	462a      	mov	r2, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <_vfiprintf_r+0x25c>)
 80064ca:	a904      	add	r1, sp, #16
 80064cc:	f7fe fa20 	bl	8004910 <_printf_i>
 80064d0:	e7e4      	b.n	800649c <_vfiprintf_r+0x208>
 80064d2:	bf00      	nop
 80064d4:	0800afd4 	.word	0x0800afd4
 80064d8:	0800aff4 	.word	0x0800aff4
 80064dc:	0800afb4 	.word	0x0800afb4
 80064e0:	0800aea2 	.word	0x0800aea2
 80064e4:	0800aea8 	.word	0x0800aea8
 80064e8:	0800aeac 	.word	0x0800aeac
 80064ec:	080043d9 	.word	0x080043d9
 80064f0:	0800626f 	.word	0x0800626f

080064f4 <__swbuf_r>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	460e      	mov	r6, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	4605      	mov	r5, r0
 80064fc:	b118      	cbz	r0, 8006506 <__swbuf_r+0x12>
 80064fe:	6983      	ldr	r3, [r0, #24]
 8006500:	b90b      	cbnz	r3, 8006506 <__swbuf_r+0x12>
 8006502:	f000 f9e3 	bl	80068cc <__sinit>
 8006506:	4b21      	ldr	r3, [pc, #132]	; (800658c <__swbuf_r+0x98>)
 8006508:	429c      	cmp	r4, r3
 800650a:	d12b      	bne.n	8006564 <__swbuf_r+0x70>
 800650c:	686c      	ldr	r4, [r5, #4]
 800650e:	69a3      	ldr	r3, [r4, #24]
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	071a      	lsls	r2, r3, #28
 8006516:	d52f      	bpl.n	8006578 <__swbuf_r+0x84>
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	b36b      	cbz	r3, 8006578 <__swbuf_r+0x84>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	6820      	ldr	r0, [r4, #0]
 8006520:	b2f6      	uxtb	r6, r6
 8006522:	1ac0      	subs	r0, r0, r3
 8006524:	6963      	ldr	r3, [r4, #20]
 8006526:	4637      	mov	r7, r6
 8006528:	4283      	cmp	r3, r0
 800652a:	dc04      	bgt.n	8006536 <__swbuf_r+0x42>
 800652c:	4621      	mov	r1, r4
 800652e:	4628      	mov	r0, r5
 8006530:	f000 f938 	bl	80067a4 <_fflush_r>
 8006534:	bb30      	cbnz	r0, 8006584 <__swbuf_r+0x90>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	3001      	adds	r0, #1
 800653a:	3b01      	subs	r3, #1
 800653c:	60a3      	str	r3, [r4, #8]
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	701e      	strb	r6, [r3, #0]
 8006546:	6963      	ldr	r3, [r4, #20]
 8006548:	4283      	cmp	r3, r0
 800654a:	d004      	beq.n	8006556 <__swbuf_r+0x62>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	07db      	lsls	r3, r3, #31
 8006550:	d506      	bpl.n	8006560 <__swbuf_r+0x6c>
 8006552:	2e0a      	cmp	r6, #10
 8006554:	d104      	bne.n	8006560 <__swbuf_r+0x6c>
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f923 	bl	80067a4 <_fflush_r>
 800655e:	b988      	cbnz	r0, 8006584 <__swbuf_r+0x90>
 8006560:	4638      	mov	r0, r7
 8006562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <__swbuf_r+0x9c>)
 8006566:	429c      	cmp	r4, r3
 8006568:	d101      	bne.n	800656e <__swbuf_r+0x7a>
 800656a:	68ac      	ldr	r4, [r5, #8]
 800656c:	e7cf      	b.n	800650e <__swbuf_r+0x1a>
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <__swbuf_r+0xa0>)
 8006570:	429c      	cmp	r4, r3
 8006572:	bf08      	it	eq
 8006574:	68ec      	ldreq	r4, [r5, #12]
 8006576:	e7ca      	b.n	800650e <__swbuf_r+0x1a>
 8006578:	4621      	mov	r1, r4
 800657a:	4628      	mov	r0, r5
 800657c:	f000 f81a 	bl	80065b4 <__swsetup_r>
 8006580:	2800      	cmp	r0, #0
 8006582:	d0cb      	beq.n	800651c <__swbuf_r+0x28>
 8006584:	f04f 37ff 	mov.w	r7, #4294967295
 8006588:	e7ea      	b.n	8006560 <__swbuf_r+0x6c>
 800658a:	bf00      	nop
 800658c:	0800afd4 	.word	0x0800afd4
 8006590:	0800aff4 	.word	0x0800aff4
 8006594:	0800afb4 	.word	0x0800afb4

08006598 <__ascii_wctomb>:
 8006598:	4603      	mov	r3, r0
 800659a:	4608      	mov	r0, r1
 800659c:	b141      	cbz	r1, 80065b0 <__ascii_wctomb+0x18>
 800659e:	2aff      	cmp	r2, #255	; 0xff
 80065a0:	d904      	bls.n	80065ac <__ascii_wctomb+0x14>
 80065a2:	228a      	movs	r2, #138	; 0x8a
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	4770      	bx	lr
 80065ac:	2001      	movs	r0, #1
 80065ae:	700a      	strb	r2, [r1, #0]
 80065b0:	4770      	bx	lr
	...

080065b4 <__swsetup_r>:
 80065b4:	4b32      	ldr	r3, [pc, #200]	; (8006680 <__swsetup_r+0xcc>)
 80065b6:	b570      	push	{r4, r5, r6, lr}
 80065b8:	681d      	ldr	r5, [r3, #0]
 80065ba:	4606      	mov	r6, r0
 80065bc:	460c      	mov	r4, r1
 80065be:	b125      	cbz	r5, 80065ca <__swsetup_r+0x16>
 80065c0:	69ab      	ldr	r3, [r5, #24]
 80065c2:	b913      	cbnz	r3, 80065ca <__swsetup_r+0x16>
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 f981 	bl	80068cc <__sinit>
 80065ca:	4b2e      	ldr	r3, [pc, #184]	; (8006684 <__swsetup_r+0xd0>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d10f      	bne.n	80065f0 <__swsetup_r+0x3c>
 80065d0:	686c      	ldr	r4, [r5, #4]
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065d8:	0719      	lsls	r1, r3, #28
 80065da:	d42c      	bmi.n	8006636 <__swsetup_r+0x82>
 80065dc:	06dd      	lsls	r5, r3, #27
 80065de:	d411      	bmi.n	8006604 <__swsetup_r+0x50>
 80065e0:	2309      	movs	r3, #9
 80065e2:	6033      	str	r3, [r6, #0]
 80065e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	e03e      	b.n	800666e <__swsetup_r+0xba>
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <__swsetup_r+0xd4>)
 80065f2:	429c      	cmp	r4, r3
 80065f4:	d101      	bne.n	80065fa <__swsetup_r+0x46>
 80065f6:	68ac      	ldr	r4, [r5, #8]
 80065f8:	e7eb      	b.n	80065d2 <__swsetup_r+0x1e>
 80065fa:	4b24      	ldr	r3, [pc, #144]	; (800668c <__swsetup_r+0xd8>)
 80065fc:	429c      	cmp	r4, r3
 80065fe:	bf08      	it	eq
 8006600:	68ec      	ldreq	r4, [r5, #12]
 8006602:	e7e6      	b.n	80065d2 <__swsetup_r+0x1e>
 8006604:	0758      	lsls	r0, r3, #29
 8006606:	d512      	bpl.n	800662e <__swsetup_r+0x7a>
 8006608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800660a:	b141      	cbz	r1, 800661e <__swsetup_r+0x6a>
 800660c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006610:	4299      	cmp	r1, r3
 8006612:	d002      	beq.n	800661a <__swsetup_r+0x66>
 8006614:	4630      	mov	r0, r6
 8006616:	f7ff fcdb 	bl	8005fd0 <_free_r>
 800661a:	2300      	movs	r3, #0
 800661c:	6363      	str	r3, [r4, #52]	; 0x34
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	2300      	movs	r3, #0
 8006628:	6063      	str	r3, [r4, #4]
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f043 0308 	orr.w	r3, r3, #8
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	b94b      	cbnz	r3, 800664e <__swsetup_r+0x9a>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006644:	d003      	beq.n	800664e <__swsetup_r+0x9a>
 8006646:	4621      	mov	r1, r4
 8006648:	4630      	mov	r0, r6
 800664a:	f000 fa05 	bl	8006a58 <__smakebuf_r>
 800664e:	89a0      	ldrh	r0, [r4, #12]
 8006650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006654:	f010 0301 	ands.w	r3, r0, #1
 8006658:	d00a      	beq.n	8006670 <__swsetup_r+0xbc>
 800665a:	2300      	movs	r3, #0
 800665c:	60a3      	str	r3, [r4, #8]
 800665e:	6963      	ldr	r3, [r4, #20]
 8006660:	425b      	negs	r3, r3
 8006662:	61a3      	str	r3, [r4, #24]
 8006664:	6923      	ldr	r3, [r4, #16]
 8006666:	b943      	cbnz	r3, 800667a <__swsetup_r+0xc6>
 8006668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800666c:	d1ba      	bne.n	80065e4 <__swsetup_r+0x30>
 800666e:	bd70      	pop	{r4, r5, r6, pc}
 8006670:	0781      	lsls	r1, r0, #30
 8006672:	bf58      	it	pl
 8006674:	6963      	ldrpl	r3, [r4, #20]
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	e7f4      	b.n	8006664 <__swsetup_r+0xb0>
 800667a:	2000      	movs	r0, #0
 800667c:	e7f7      	b.n	800666e <__swsetup_r+0xba>
 800667e:	bf00      	nop
 8006680:	20001010 	.word	0x20001010
 8006684:	0800afd4 	.word	0x0800afd4
 8006688:	0800aff4 	.word	0x0800aff4
 800668c:	0800afb4 	.word	0x0800afb4

08006690 <abort>:
 8006690:	2006      	movs	r0, #6
 8006692:	b508      	push	{r3, lr}
 8006694:	f000 fa48 	bl	8006b28 <raise>
 8006698:	2001      	movs	r0, #1
 800669a:	f7fa ff53 	bl	8001544 <_exit>
	...

080066a0 <__sflush_r>:
 80066a0:	898a      	ldrh	r2, [r1, #12]
 80066a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a4:	4605      	mov	r5, r0
 80066a6:	0710      	lsls	r0, r2, #28
 80066a8:	460c      	mov	r4, r1
 80066aa:	d457      	bmi.n	800675c <__sflush_r+0xbc>
 80066ac:	684b      	ldr	r3, [r1, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dc04      	bgt.n	80066bc <__sflush_r+0x1c>
 80066b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dc01      	bgt.n	80066bc <__sflush_r+0x1c>
 80066b8:	2000      	movs	r0, #0
 80066ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066be:	2e00      	cmp	r6, #0
 80066c0:	d0fa      	beq.n	80066b8 <__sflush_r+0x18>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066c8:	682f      	ldr	r7, [r5, #0]
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	d032      	beq.n	8006734 <__sflush_r+0x94>
 80066ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	075a      	lsls	r2, r3, #29
 80066d4:	d505      	bpl.n	80066e2 <__sflush_r+0x42>
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	1ac0      	subs	r0, r0, r3
 80066da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066dc:	b10b      	cbz	r3, 80066e2 <__sflush_r+0x42>
 80066de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066e0:	1ac0      	subs	r0, r0, r3
 80066e2:	2300      	movs	r3, #0
 80066e4:	4602      	mov	r2, r0
 80066e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066e8:	4628      	mov	r0, r5
 80066ea:	6a21      	ldr	r1, [r4, #32]
 80066ec:	47b0      	blx	r6
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	d106      	bne.n	8006702 <__sflush_r+0x62>
 80066f4:	6829      	ldr	r1, [r5, #0]
 80066f6:	291d      	cmp	r1, #29
 80066f8:	d82c      	bhi.n	8006754 <__sflush_r+0xb4>
 80066fa:	4a29      	ldr	r2, [pc, #164]	; (80067a0 <__sflush_r+0x100>)
 80066fc:	40ca      	lsrs	r2, r1
 80066fe:	07d6      	lsls	r6, r2, #31
 8006700:	d528      	bpl.n	8006754 <__sflush_r+0xb4>
 8006702:	2200      	movs	r2, #0
 8006704:	6062      	str	r2, [r4, #4]
 8006706:	6922      	ldr	r2, [r4, #16]
 8006708:	04d9      	lsls	r1, r3, #19
 800670a:	6022      	str	r2, [r4, #0]
 800670c:	d504      	bpl.n	8006718 <__sflush_r+0x78>
 800670e:	1c42      	adds	r2, r0, #1
 8006710:	d101      	bne.n	8006716 <__sflush_r+0x76>
 8006712:	682b      	ldr	r3, [r5, #0]
 8006714:	b903      	cbnz	r3, 8006718 <__sflush_r+0x78>
 8006716:	6560      	str	r0, [r4, #84]	; 0x54
 8006718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800671a:	602f      	str	r7, [r5, #0]
 800671c:	2900      	cmp	r1, #0
 800671e:	d0cb      	beq.n	80066b8 <__sflush_r+0x18>
 8006720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006724:	4299      	cmp	r1, r3
 8006726:	d002      	beq.n	800672e <__sflush_r+0x8e>
 8006728:	4628      	mov	r0, r5
 800672a:	f7ff fc51 	bl	8005fd0 <_free_r>
 800672e:	2000      	movs	r0, #0
 8006730:	6360      	str	r0, [r4, #52]	; 0x34
 8006732:	e7c2      	b.n	80066ba <__sflush_r+0x1a>
 8006734:	6a21      	ldr	r1, [r4, #32]
 8006736:	2301      	movs	r3, #1
 8006738:	4628      	mov	r0, r5
 800673a:	47b0      	blx	r6
 800673c:	1c41      	adds	r1, r0, #1
 800673e:	d1c7      	bne.n	80066d0 <__sflush_r+0x30>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0c4      	beq.n	80066d0 <__sflush_r+0x30>
 8006746:	2b1d      	cmp	r3, #29
 8006748:	d001      	beq.n	800674e <__sflush_r+0xae>
 800674a:	2b16      	cmp	r3, #22
 800674c:	d101      	bne.n	8006752 <__sflush_r+0xb2>
 800674e:	602f      	str	r7, [r5, #0]
 8006750:	e7b2      	b.n	80066b8 <__sflush_r+0x18>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	e7ae      	b.n	80066ba <__sflush_r+0x1a>
 800675c:	690f      	ldr	r7, [r1, #16]
 800675e:	2f00      	cmp	r7, #0
 8006760:	d0aa      	beq.n	80066b8 <__sflush_r+0x18>
 8006762:	0793      	lsls	r3, r2, #30
 8006764:	bf18      	it	ne
 8006766:	2300      	movne	r3, #0
 8006768:	680e      	ldr	r6, [r1, #0]
 800676a:	bf08      	it	eq
 800676c:	694b      	ldreq	r3, [r1, #20]
 800676e:	1bf6      	subs	r6, r6, r7
 8006770:	600f      	str	r7, [r1, #0]
 8006772:	608b      	str	r3, [r1, #8]
 8006774:	2e00      	cmp	r6, #0
 8006776:	dd9f      	ble.n	80066b8 <__sflush_r+0x18>
 8006778:	4633      	mov	r3, r6
 800677a:	463a      	mov	r2, r7
 800677c:	4628      	mov	r0, r5
 800677e:	6a21      	ldr	r1, [r4, #32]
 8006780:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006784:	47e0      	blx	ip
 8006786:	2800      	cmp	r0, #0
 8006788:	dc06      	bgt.n	8006798 <__sflush_r+0xf8>
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	e790      	b.n	80066ba <__sflush_r+0x1a>
 8006798:	4407      	add	r7, r0
 800679a:	1a36      	subs	r6, r6, r0
 800679c:	e7ea      	b.n	8006774 <__sflush_r+0xd4>
 800679e:	bf00      	nop
 80067a0:	20400001 	.word	0x20400001

080067a4 <_fflush_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	690b      	ldr	r3, [r1, #16]
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	b913      	cbnz	r3, 80067b4 <_fflush_r+0x10>
 80067ae:	2500      	movs	r5, #0
 80067b0:	4628      	mov	r0, r5
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	b118      	cbz	r0, 80067be <_fflush_r+0x1a>
 80067b6:	6983      	ldr	r3, [r0, #24]
 80067b8:	b90b      	cbnz	r3, 80067be <_fflush_r+0x1a>
 80067ba:	f000 f887 	bl	80068cc <__sinit>
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <_fflush_r+0x6c>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d11b      	bne.n	80067fc <_fflush_r+0x58>
 80067c4:	686c      	ldr	r4, [r5, #4]
 80067c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0ef      	beq.n	80067ae <_fflush_r+0xa>
 80067ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067d0:	07d0      	lsls	r0, r2, #31
 80067d2:	d404      	bmi.n	80067de <_fflush_r+0x3a>
 80067d4:	0599      	lsls	r1, r3, #22
 80067d6:	d402      	bmi.n	80067de <_fflush_r+0x3a>
 80067d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067da:	f000 f915 	bl	8006a08 <__retarget_lock_acquire_recursive>
 80067de:	4628      	mov	r0, r5
 80067e0:	4621      	mov	r1, r4
 80067e2:	f7ff ff5d 	bl	80066a0 <__sflush_r>
 80067e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e8:	4605      	mov	r5, r0
 80067ea:	07da      	lsls	r2, r3, #31
 80067ec:	d4e0      	bmi.n	80067b0 <_fflush_r+0xc>
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	059b      	lsls	r3, r3, #22
 80067f2:	d4dd      	bmi.n	80067b0 <_fflush_r+0xc>
 80067f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067f6:	f000 f908 	bl	8006a0a <__retarget_lock_release_recursive>
 80067fa:	e7d9      	b.n	80067b0 <_fflush_r+0xc>
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <_fflush_r+0x70>)
 80067fe:	429c      	cmp	r4, r3
 8006800:	d101      	bne.n	8006806 <_fflush_r+0x62>
 8006802:	68ac      	ldr	r4, [r5, #8]
 8006804:	e7df      	b.n	80067c6 <_fflush_r+0x22>
 8006806:	4b04      	ldr	r3, [pc, #16]	; (8006818 <_fflush_r+0x74>)
 8006808:	429c      	cmp	r4, r3
 800680a:	bf08      	it	eq
 800680c:	68ec      	ldreq	r4, [r5, #12]
 800680e:	e7da      	b.n	80067c6 <_fflush_r+0x22>
 8006810:	0800afd4 	.word	0x0800afd4
 8006814:	0800aff4 	.word	0x0800aff4
 8006818:	0800afb4 	.word	0x0800afb4

0800681c <std>:
 800681c:	2300      	movs	r3, #0
 800681e:	b510      	push	{r4, lr}
 8006820:	4604      	mov	r4, r0
 8006822:	e9c0 3300 	strd	r3, r3, [r0]
 8006826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800682a:	6083      	str	r3, [r0, #8]
 800682c:	8181      	strh	r1, [r0, #12]
 800682e:	6643      	str	r3, [r0, #100]	; 0x64
 8006830:	81c2      	strh	r2, [r0, #14]
 8006832:	6183      	str	r3, [r0, #24]
 8006834:	4619      	mov	r1, r3
 8006836:	2208      	movs	r2, #8
 8006838:	305c      	adds	r0, #92	; 0x5c
 800683a:	f7fd fd27 	bl	800428c <memset>
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <std+0x38>)
 8006840:	6224      	str	r4, [r4, #32]
 8006842:	6263      	str	r3, [r4, #36]	; 0x24
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <std+0x3c>)
 8006846:	62a3      	str	r3, [r4, #40]	; 0x28
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <std+0x40>)
 800684a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800684c:	4b04      	ldr	r3, [pc, #16]	; (8006860 <std+0x44>)
 800684e:	6323      	str	r3, [r4, #48]	; 0x30
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	08006b61 	.word	0x08006b61
 8006858:	08006b83 	.word	0x08006b83
 800685c:	08006bbb 	.word	0x08006bbb
 8006860:	08006bdf 	.word	0x08006bdf

08006864 <_cleanup_r>:
 8006864:	4901      	ldr	r1, [pc, #4]	; (800686c <_cleanup_r+0x8>)
 8006866:	f000 b8af 	b.w	80069c8 <_fwalk_reent>
 800686a:	bf00      	nop
 800686c:	080067a5 	.word	0x080067a5

08006870 <__sfmoreglue>:
 8006870:	2268      	movs	r2, #104	; 0x68
 8006872:	b570      	push	{r4, r5, r6, lr}
 8006874:	1e4d      	subs	r5, r1, #1
 8006876:	4355      	muls	r5, r2
 8006878:	460e      	mov	r6, r1
 800687a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800687e:	f7ff fc0f 	bl	80060a0 <_malloc_r>
 8006882:	4604      	mov	r4, r0
 8006884:	b140      	cbz	r0, 8006898 <__sfmoreglue+0x28>
 8006886:	2100      	movs	r1, #0
 8006888:	e9c0 1600 	strd	r1, r6, [r0]
 800688c:	300c      	adds	r0, #12
 800688e:	60a0      	str	r0, [r4, #8]
 8006890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006894:	f7fd fcfa 	bl	800428c <memset>
 8006898:	4620      	mov	r0, r4
 800689a:	bd70      	pop	{r4, r5, r6, pc}

0800689c <__sfp_lock_acquire>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__sfp_lock_acquire+0x8>)
 800689e:	f000 b8b3 	b.w	8006a08 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	20002869 	.word	0x20002869

080068a8 <__sfp_lock_release>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sfp_lock_release+0x8>)
 80068aa:	f000 b8ae 	b.w	8006a0a <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	20002869 	.word	0x20002869

080068b4 <__sinit_lock_acquire>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sinit_lock_acquire+0x8>)
 80068b6:	f000 b8a7 	b.w	8006a08 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	2000286a 	.word	0x2000286a

080068c0 <__sinit_lock_release>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sinit_lock_release+0x8>)
 80068c2:	f000 b8a2 	b.w	8006a0a <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	2000286a 	.word	0x2000286a

080068cc <__sinit>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	4604      	mov	r4, r0
 80068d0:	f7ff fff0 	bl	80068b4 <__sinit_lock_acquire>
 80068d4:	69a3      	ldr	r3, [r4, #24]
 80068d6:	b11b      	cbz	r3, 80068e0 <__sinit+0x14>
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f7ff bff0 	b.w	80068c0 <__sinit_lock_release>
 80068e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068e4:	6523      	str	r3, [r4, #80]	; 0x50
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <__sinit+0x68>)
 80068e8:	4a13      	ldr	r2, [pc, #76]	; (8006938 <__sinit+0x6c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	bf08      	it	eq
 80068f2:	2301      	moveq	r3, #1
 80068f4:	4620      	mov	r0, r4
 80068f6:	bf08      	it	eq
 80068f8:	61a3      	streq	r3, [r4, #24]
 80068fa:	f000 f81f 	bl	800693c <__sfp>
 80068fe:	6060      	str	r0, [r4, #4]
 8006900:	4620      	mov	r0, r4
 8006902:	f000 f81b 	bl	800693c <__sfp>
 8006906:	60a0      	str	r0, [r4, #8]
 8006908:	4620      	mov	r0, r4
 800690a:	f000 f817 	bl	800693c <__sfp>
 800690e:	2200      	movs	r2, #0
 8006910:	2104      	movs	r1, #4
 8006912:	60e0      	str	r0, [r4, #12]
 8006914:	6860      	ldr	r0, [r4, #4]
 8006916:	f7ff ff81 	bl	800681c <std>
 800691a:	2201      	movs	r2, #1
 800691c:	2109      	movs	r1, #9
 800691e:	68a0      	ldr	r0, [r4, #8]
 8006920:	f7ff ff7c 	bl	800681c <std>
 8006924:	2202      	movs	r2, #2
 8006926:	2112      	movs	r1, #18
 8006928:	68e0      	ldr	r0, [r4, #12]
 800692a:	f7ff ff77 	bl	800681c <std>
 800692e:	2301      	movs	r3, #1
 8006930:	61a3      	str	r3, [r4, #24]
 8006932:	e7d1      	b.n	80068d8 <__sinit+0xc>
 8006934:	0800ac38 	.word	0x0800ac38
 8006938:	08006865 	.word	0x08006865

0800693c <__sfp>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	4607      	mov	r7, r0
 8006940:	f7ff ffac 	bl	800689c <__sfp_lock_acquire>
 8006944:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <__sfp+0x84>)
 8006946:	681e      	ldr	r6, [r3, #0]
 8006948:	69b3      	ldr	r3, [r6, #24]
 800694a:	b913      	cbnz	r3, 8006952 <__sfp+0x16>
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff ffbd 	bl	80068cc <__sinit>
 8006952:	3648      	adds	r6, #72	; 0x48
 8006954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006958:	3b01      	subs	r3, #1
 800695a:	d503      	bpl.n	8006964 <__sfp+0x28>
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	b30b      	cbz	r3, 80069a4 <__sfp+0x68>
 8006960:	6836      	ldr	r6, [r6, #0]
 8006962:	e7f7      	b.n	8006954 <__sfp+0x18>
 8006964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006968:	b9d5      	cbnz	r5, 80069a0 <__sfp+0x64>
 800696a:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <__sfp+0x88>)
 800696c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006970:	60e3      	str	r3, [r4, #12]
 8006972:	6665      	str	r5, [r4, #100]	; 0x64
 8006974:	f000 f847 	bl	8006a06 <__retarget_lock_init_recursive>
 8006978:	f7ff ff96 	bl	80068a8 <__sfp_lock_release>
 800697c:	2208      	movs	r2, #8
 800697e:	4629      	mov	r1, r5
 8006980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006988:	6025      	str	r5, [r4, #0]
 800698a:	61a5      	str	r5, [r4, #24]
 800698c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006990:	f7fd fc7c 	bl	800428c <memset>
 8006994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800699c:	4620      	mov	r0, r4
 800699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a0:	3468      	adds	r4, #104	; 0x68
 80069a2:	e7d9      	b.n	8006958 <__sfp+0x1c>
 80069a4:	2104      	movs	r1, #4
 80069a6:	4638      	mov	r0, r7
 80069a8:	f7ff ff62 	bl	8006870 <__sfmoreglue>
 80069ac:	4604      	mov	r4, r0
 80069ae:	6030      	str	r0, [r6, #0]
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d1d5      	bne.n	8006960 <__sfp+0x24>
 80069b4:	f7ff ff78 	bl	80068a8 <__sfp_lock_release>
 80069b8:	230c      	movs	r3, #12
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	e7ee      	b.n	800699c <__sfp+0x60>
 80069be:	bf00      	nop
 80069c0:	0800ac38 	.word	0x0800ac38
 80069c4:	ffff0001 	.word	0xffff0001

080069c8 <_fwalk_reent>:
 80069c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069cc:	4606      	mov	r6, r0
 80069ce:	4688      	mov	r8, r1
 80069d0:	2700      	movs	r7, #0
 80069d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069da:	f1b9 0901 	subs.w	r9, r9, #1
 80069de:	d505      	bpl.n	80069ec <_fwalk_reent+0x24>
 80069e0:	6824      	ldr	r4, [r4, #0]
 80069e2:	2c00      	cmp	r4, #0
 80069e4:	d1f7      	bne.n	80069d6 <_fwalk_reent+0xe>
 80069e6:	4638      	mov	r0, r7
 80069e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ec:	89ab      	ldrh	r3, [r5, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d907      	bls.n	8006a02 <_fwalk_reent+0x3a>
 80069f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069f6:	3301      	adds	r3, #1
 80069f8:	d003      	beq.n	8006a02 <_fwalk_reent+0x3a>
 80069fa:	4629      	mov	r1, r5
 80069fc:	4630      	mov	r0, r6
 80069fe:	47c0      	blx	r8
 8006a00:	4307      	orrs	r7, r0
 8006a02:	3568      	adds	r5, #104	; 0x68
 8006a04:	e7e9      	b.n	80069da <_fwalk_reent+0x12>

08006a06 <__retarget_lock_init_recursive>:
 8006a06:	4770      	bx	lr

08006a08 <__retarget_lock_acquire_recursive>:
 8006a08:	4770      	bx	lr

08006a0a <__retarget_lock_release_recursive>:
 8006a0a:	4770      	bx	lr

08006a0c <__swhatbuf_r>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	460e      	mov	r6, r1
 8006a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a14:	4614      	mov	r4, r2
 8006a16:	2900      	cmp	r1, #0
 8006a18:	461d      	mov	r5, r3
 8006a1a:	b096      	sub	sp, #88	; 0x58
 8006a1c:	da08      	bge.n	8006a30 <__swhatbuf_r+0x24>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a24:	602a      	str	r2, [r5, #0]
 8006a26:	061a      	lsls	r2, r3, #24
 8006a28:	d410      	bmi.n	8006a4c <__swhatbuf_r+0x40>
 8006a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a2e:	e00e      	b.n	8006a4e <__swhatbuf_r+0x42>
 8006a30:	466a      	mov	r2, sp
 8006a32:	f000 f8fb 	bl	8006c2c <_fstat_r>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	dbf1      	blt.n	8006a1e <__swhatbuf_r+0x12>
 8006a3a:	9a01      	ldr	r2, [sp, #4]
 8006a3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a44:	425a      	negs	r2, r3
 8006a46:	415a      	adcs	r2, r3
 8006a48:	602a      	str	r2, [r5, #0]
 8006a4a:	e7ee      	b.n	8006a2a <__swhatbuf_r+0x1e>
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	2000      	movs	r0, #0
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	b016      	add	sp, #88	; 0x58
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a58 <__smakebuf_r>:
 8006a58:	898b      	ldrh	r3, [r1, #12]
 8006a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a5c:	079d      	lsls	r5, r3, #30
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460c      	mov	r4, r1
 8006a62:	d507      	bpl.n	8006a74 <__smakebuf_r+0x1c>
 8006a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	6163      	str	r3, [r4, #20]
 8006a70:	b002      	add	sp, #8
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	466a      	mov	r2, sp
 8006a76:	ab01      	add	r3, sp, #4
 8006a78:	f7ff ffc8 	bl	8006a0c <__swhatbuf_r>
 8006a7c:	9900      	ldr	r1, [sp, #0]
 8006a7e:	4605      	mov	r5, r0
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7ff fb0d 	bl	80060a0 <_malloc_r>
 8006a86:	b948      	cbnz	r0, 8006a9c <__smakebuf_r+0x44>
 8006a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8c:	059a      	lsls	r2, r3, #22
 8006a8e:	d4ef      	bmi.n	8006a70 <__smakebuf_r+0x18>
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	f043 0302 	orr.w	r3, r3, #2
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	e7e3      	b.n	8006a64 <__smakebuf_r+0xc>
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ad4 <__smakebuf_r+0x7c>)
 8006a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	6020      	str	r0, [r4, #0]
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa8:	81a3      	strh	r3, [r4, #12]
 8006aaa:	9b00      	ldr	r3, [sp, #0]
 8006aac:	6120      	str	r0, [r4, #16]
 8006aae:	6163      	str	r3, [r4, #20]
 8006ab0:	9b01      	ldr	r3, [sp, #4]
 8006ab2:	b15b      	cbz	r3, 8006acc <__smakebuf_r+0x74>
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aba:	f000 f8c9 	bl	8006c50 <_isatty_r>
 8006abe:	b128      	cbz	r0, 8006acc <__smakebuf_r+0x74>
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	89a0      	ldrh	r0, [r4, #12]
 8006ace:	4305      	orrs	r5, r0
 8006ad0:	81a5      	strh	r5, [r4, #12]
 8006ad2:	e7cd      	b.n	8006a70 <__smakebuf_r+0x18>
 8006ad4:	08006865 	.word	0x08006865

08006ad8 <_raise_r>:
 8006ad8:	291f      	cmp	r1, #31
 8006ada:	b538      	push	{r3, r4, r5, lr}
 8006adc:	4604      	mov	r4, r0
 8006ade:	460d      	mov	r5, r1
 8006ae0:	d904      	bls.n	8006aec <_raise_r+0x14>
 8006ae2:	2316      	movs	r3, #22
 8006ae4:	6003      	str	r3, [r0, #0]
 8006ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006aee:	b112      	cbz	r2, 8006af6 <_raise_r+0x1e>
 8006af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006af4:	b94b      	cbnz	r3, 8006b0a <_raise_r+0x32>
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 f830 	bl	8006b5c <_getpid_r>
 8006afc:	462a      	mov	r2, r5
 8006afe:	4601      	mov	r1, r0
 8006b00:	4620      	mov	r0, r4
 8006b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b06:	f000 b817 	b.w	8006b38 <_kill_r>
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d00a      	beq.n	8006b24 <_raise_r+0x4c>
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	d103      	bne.n	8006b1a <_raise_r+0x42>
 8006b12:	2316      	movs	r3, #22
 8006b14:	6003      	str	r3, [r0, #0]
 8006b16:	2001      	movs	r0, #1
 8006b18:	e7e7      	b.n	8006aea <_raise_r+0x12>
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b22:	4798      	blx	r3
 8006b24:	2000      	movs	r0, #0
 8006b26:	e7e0      	b.n	8006aea <_raise_r+0x12>

08006b28 <raise>:
 8006b28:	4b02      	ldr	r3, [pc, #8]	; (8006b34 <raise+0xc>)
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f7ff bfd3 	b.w	8006ad8 <_raise_r>
 8006b32:	bf00      	nop
 8006b34:	20001010 	.word	0x20001010

08006b38 <_kill_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4d06      	ldr	r5, [pc, #24]	; (8006b58 <_kill_r+0x20>)
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	602b      	str	r3, [r5, #0]
 8006b46:	f7fa fcf5 	bl	8001534 <_kill>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d102      	bne.n	8006b54 <_kill_r+0x1c>
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	b103      	cbz	r3, 8006b54 <_kill_r+0x1c>
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	20002864 	.word	0x20002864

08006b5c <_getpid_r>:
 8006b5c:	f7fa bce8 	b.w	8001530 <_getpid>

08006b60 <__sread>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b68:	f000 f894 	bl	8006c94 <_read_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	bfab      	itete	ge
 8006b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b72:	89a3      	ldrhlt	r3, [r4, #12]
 8006b74:	181b      	addge	r3, r3, r0
 8006b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b7a:	bfac      	ite	ge
 8006b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b7e:	81a3      	strhlt	r3, [r4, #12]
 8006b80:	bd10      	pop	{r4, pc}

08006b82 <__swrite>:
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	461f      	mov	r7, r3
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	05db      	lsls	r3, r3, #23
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4616      	mov	r6, r2
 8006b92:	d505      	bpl.n	8006ba0 <__swrite+0x1e>
 8006b94:	2302      	movs	r3, #2
 8006b96:	2200      	movs	r2, #0
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	f000 f868 	bl	8006c70 <_lseek_r>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	4628      	mov	r0, r5
 8006bac:	463b      	mov	r3, r7
 8006bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	f000 b817 	b.w	8006be8 <_write_r>

08006bba <__sseek>:
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc2:	f000 f855 	bl	8006c70 <_lseek_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	bf15      	itete	ne
 8006bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bd6:	81a3      	strheq	r3, [r4, #12]
 8006bd8:	bf18      	it	ne
 8006bda:	81a3      	strhne	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__sclose>:
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 b813 	b.w	8006c0c <_close_r>
	...

08006be8 <_write_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4d05      	ldr	r5, [pc, #20]	; (8006c08 <_write_r+0x20>)
 8006bf4:	602a      	str	r2, [r5, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f7fa fcba 	bl	8001570 <_write>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_write_r+0x1e>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_write_r+0x1e>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20002864 	.word	0x20002864

08006c0c <_close_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4d05      	ldr	r5, [pc, #20]	; (8006c28 <_close_r+0x1c>)
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fa fcb8 	bl	800158c <_close>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_close_r+0x1a>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_close_r+0x1a>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20002864 	.word	0x20002864

08006c2c <_fstat_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4d06      	ldr	r5, [pc, #24]	; (8006c4c <_fstat_r+0x20>)
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	f7fa fcaa 	bl	8001592 <_fstat>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d102      	bne.n	8006c48 <_fstat_r+0x1c>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	b103      	cbz	r3, 8006c48 <_fstat_r+0x1c>
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	bd38      	pop	{r3, r4, r5, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20002864 	.word	0x20002864

08006c50 <_isatty_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	2300      	movs	r3, #0
 8006c54:	4d05      	ldr	r5, [pc, #20]	; (8006c6c <_isatty_r+0x1c>)
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	f7fa fc9e 	bl	800159c <_isatty>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_isatty_r+0x1a>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_isatty_r+0x1a>
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	20002864 	.word	0x20002864

08006c70 <_lseek_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4604      	mov	r4, r0
 8006c74:	4608      	mov	r0, r1
 8006c76:	4611      	mov	r1, r2
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4d05      	ldr	r5, [pc, #20]	; (8006c90 <_lseek_r+0x20>)
 8006c7c:	602a      	str	r2, [r5, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f7fa fc8e 	bl	80015a0 <_lseek>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_lseek_r+0x1e>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_lseek_r+0x1e>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	20002864 	.word	0x20002864

08006c94 <_read_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4d05      	ldr	r5, [pc, #20]	; (8006cb4 <_read_r+0x20>)
 8006ca0:	602a      	str	r2, [r5, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f7fa fc54 	bl	8001550 <_read>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_read_r+0x1e>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_read_r+0x1e>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20002864 	.word	0x20002864

08006cb8 <_init>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr

08006cc4 <_fini>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr
